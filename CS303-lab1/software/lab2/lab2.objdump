
lab2.elf:     file format elf32-littlenios2
lab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00007b1c memsz 0x00007b1c flags r-x
    LOAD off    0x00008b3c vaddr 0x00807b3c paddr 0x00809794 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x0000b3ec vaddr 0x0080b3ec paddr 0x0080b3ec align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007624  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d4  00807868  00807868  00008868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  00807b3c  00809794  00008b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0080b3ec  0080b3ec  0000b3ec  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0080b540  0080b540  0000a794  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0000a794  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000a794  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b48  00000000  00000000  0000a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001855f  00000000  00000000  0000b300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006aa7  00000000  00000000  0002385f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000077d0  00000000  00000000  0002a306  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001a0c  00000000  00000000  00031ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002dfb  00000000  00000000  000334e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  000362df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0003ad2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000698  00000000  00000000  0003ad70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003de9e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0003dea1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003dea4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003dea5  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0003dea6  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003deaf  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0003deb8  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0003dec1  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002f  00000000  00000000  0003decd  2**0
                  CONTENTS, READONLY
 27 .jdi          00004b2b  00000000  00000000  0003defc  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006fcb6  00000000  00000000  00042a27  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00807868 l    d  .rodata	00000000 .rodata
00807b3c l    d  .rwdata	00000000 .rwdata
0080b3ec l    d  .bss	00000000 .bss
0080b540 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab2_bsp//obj/HAL/src/crt0.o
0080027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00800bb8 l     F .text	00000008 __fp_unlock
00800bcc l     F .text	0000019c __sinit.part.1
00800d68 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00807b3c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00803814 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803920 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080394c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00803a38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00803b18 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00803c04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00803dd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080977c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00804024 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00804158 l     F .text	00000034 alt_dev_reg
00808510 l     O .rwdata	00001060 jtag_uart
00809570 l     O .rwdata	00000120 lcd
00809690 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00804480 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080468c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00809780 l     O .rwdata	00000004 colstart
00804cc4 l     F .text	000000b8 lcd_write_command
00804d7c l     F .text	000000d8 lcd_write_data
00804e54 l     F .text	000000d0 lcd_clear_screen
00804f24 l     F .text	000001ec lcd_repaint_screen
00805110 l     F .text	000000cc lcd_scroll_up
008051dc l     F .text	000002ac lcd_handle_escape
00805960 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00805ba0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00805e50 l     F .text	0000009c altera_avalon_uart_irq
00805eec l     F .text	000000e4 altera_avalon_uart_rxirq
00805fd0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080616c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00806384 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008066b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00806b18 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00806c58 l     F .text	0000003c alt_get_errno
00806c94 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008079bb l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080b414 g     O .bss	00000004 alt_instruction_exception_handler
0080360c g     F .text	00000054 _isatty_r
00803d14 g     F .text	0000007c alt_main
00800a4c g     F .text	000000c0 _puts_r
0080b440 g     O .bss	00000100 alt_irq
00803334 g     F .text	00000060 _lseek_r
00809794 g       *ABS*	00000000 __flash_rwdata_start
0080b540 g       *ABS*	00000000 __alt_heap_start
008028e8 g     F .text	0000005c __sseek
00800f08 g     F .text	00000010 __sinit
00800d70 g     F .text	00000068 __sfmoreglue
00803db4 g     F .text	00000024 __malloc_unlock
00801fd4 g     F .text	0000015c memmove
00800ef0 g     F .text	00000018 _cleanup
00807080 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008035b0 g     F .text	0000005c _fstat_r
0080b3f8 g     O .bss	00000004 errno
00802864 g     F .text	00000008 __seofread
0080b400 g     O .bss	00000004 alt_argv
00811754 g       *ABS*	00000000 _gp
00807050 g     F .text	00000030 usleep
00800988 g     F .text	00000058 reset
00808390 g     O .rwdata	00000180 alt_fd_list
008071fc g     F .text	00000090 alt_find_dev
00801e8c g     F .text	00000148 memcpy
00800bc0 g     F .text	0000000c _cleanup_r
00806bdc g     F .text	0000007c alt_io_redirect
00807868 g       *ABS*	00000000 __DTOR_END__
00800b0c g     F .text	00000014 puts
00807438 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00804884 g     F .text	0000021c altera_avalon_jtag_uart_read
00803758 g     F .text	00000064 .hidden __udivsi3
00803a74 g     F .text	000000a4 isatty
0080b3f4 g     O .bss	00000004 __malloc_top_pad
00800f58 g     F .text	000004bc __sfvwrite_r
008027bc g     F .text	00000054 _sbrk_r
00803550 g     F .text	00000060 _read_r
00809774 g     O .rwdata	00000004 alt_max_fd
00802b54 g     F .text	000000f0 _fclose_r
00802ed0 g     F .text	00000030 fflush
0080b3f0 g     O .bss	00000004 __malloc_max_sbrked_mem
00803c40 g     F .text	000000d4 lseek
00809754 g     O .rwdata	00000004 _global_impure_ptr
00802258 g     F .text	00000564 _realloc_r
0080b540 g       *ABS*	00000000 __bss_end
00806a28 g     F .text	000000f0 alt_iic_isr_register
00806f48 g     F .text	00000108 alt_tick
00805da4 g     F .text	000000ac altera_avalon_uart_init
00800f28 g     F .text	00000018 __fp_lock_all
008069dc g     F .text	0000004c alt_ic_irq_enabled
00806eac g     F .text	0000009c alt_alarm_stop
0080b408 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00808368 g     O .rwdata	00000028 alt_dev_null
00806698 g     F .text	00000020 alt_dcache_flush_all
00809794 g       *ABS*	00000000 __ram_rwdata_end
0080976c g     O .rwdata	00000008 alt_dev_list
00804060 g     F .text	000000f8 write
00807b3c g       *ABS*	00000000 __ram_rodata_end
00803988 g     F .text	000000b0 fstat
008037bc g     F .text	00000058 .hidden __umodsi3
0080b540 g       *ABS*	00000000 end
00805488 g     F .text	000004d8 altera_avalon_lcd_16207_write
008063c0 g     F .text	000001ac altera_avalon_uart_write
008043c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00807868 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00805c18 g     F .text	0000007c alt_avalon_timer_sc_init
00805cf4 g     F .text	00000060 altera_avalon_uart_write_fd
00805d54 g     F .text	00000050 altera_avalon_uart_close_fd
00804aa0 g     F .text	00000224 altera_avalon_jtag_uart_write
00800f18 g     F .text	00000004 __sfp_lock_acquire
00801da8 g     F .text	000000e4 memchr
00803024 g     F .text	00000310 _free_r
008076b4 g     F .text	00000180 __call_exitprocs
0080975c g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000003c _start
0080b40c g     O .bss	00000004 _alt_tick_rate
0080b410 g     O .bss	00000004 _alt_nticks
00803e14 g     F .text	000000fc read
008041c4 g     F .text	00000098 alt_sys_init
0080759c g     F .text	00000118 __register_exitproc
0080472c g     F .text	00000068 altera_avalon_jtag_uart_close
00807b3c g       *ABS*	00000000 __ram_rwdata_start
00807868 g       *ABS*	00000000 __ram_rodata_start
0080b418 g     O .bss	00000028 __malloc_current_mallinfo
0080425c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00807394 g     F .text	000000a4 alt_get_fd
008070a4 g     F .text	00000158 alt_busy_sleep
00802b00 g     F .text	00000054 _close_r
00807520 g     F .text	0000007c memcmp
0080431c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0080b540 g       *ABS*	00000000 __alt_stack_base
0080436c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008029ac g     F .text	00000154 __swsetup_r
008009e0 g     F .text	0000006c tick
00800dd8 g     F .text	00000118 __sfp
00807f60 g     O .rwdata	00000408 __malloc_av_
00800f24 g     F .text	00000004 __sinit_lock_release
00802810 g     F .text	00000054 __sread
0080728c g     F .text	00000108 alt_find_file
008066f4 g     F .text	000000a4 alt_dev_llist_insert
00803d90 g     F .text	00000024 __malloc_lock
00803f74 g     F .text	000000b0 sbrk
00802e74 g     F .text	0000005c _fflush_r
0080b3ec g       *ABS*	00000000 __bss_start
00802130 g     F .text	00000128 memset
00800280 g     F .text	00000094 main
0080b404 g     O .bss	00000004 alt_envp
0080b3ec g     O .bss	00000004 __malloc_max_total_mem
008042bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00805a0c g     F .text	00000134 altera_avalon_lcd_16207_init
00802944 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802c44 g     F .text	00000014 fclose
0080159c g     F .text	0000080c _malloc_r
00809778 g     O .rwdata	00000004 alt_errno
00801414 g     F .text	000000c4 _fwalk
00803660 g     F .text	00000084 .hidden __divsi3
00802f00 g     F .text	00000124 _malloc_trim_r
00807868 g       *ABS*	00000000 __CTOR_END__
00807868 g       *ABS*	00000000 __flash_rodata_start
00807868 g       *ABS*	00000000 __DTOR_LIST__
0080418c g     F .text	00000038 alt_irq_init
00803f10 g     F .text	00000064 alt_release_fd
008074d4 g     F .text	00000014 atexit
0080294c g     F .text	00000060 _write_r
00809758 g     O .rwdata	00000004 _impure_ptr
0080b3fc g     O .bss	00000004 alt_argc
00802c58 g     F .text	0000021c __sflush_r
008067f8 g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00800f40 g     F .text	00000018 __fp_unlock_all
00805b40 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00809764 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806878 g     F .text	00000050 alt_ic_isr_register
00809794 g       *ABS*	00000000 _edata
00805c94 g     F .text	00000060 altera_avalon_uart_read_fd
0080b540 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00804794 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00806950 g     F .text	0000008c alt_ic_irq_disable
0080286c g     F .text	0000007c __swrite
00809760 g     O .rwdata	00000004 __malloc_trim_threshold
008074e8 g     F .text	00000038 exit
008014d8 g     F .text	000000c4 _fwalk_reent
008036e4 g     F .text	00000074 .hidden __modsi3
00800314 g     F .text	00000674 logic
00809790 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800f1c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008078ba g     O .rodata	00000101 _ctype_
00806118 g     F .text	00000054 altera_avalon_uart_close
00807834 g     F .text	00000034 _exit
0080656c g     F .text	0000012c alt_alarm_start
00803394 g     F .text	000001bc __smakebuf_r
00800b20 g     F .text	00000098 strlen
00806d58 g     F .text	00000154 open
00806858 g     F .text	00000020 alt_icache_flush_all
00809784 g     O .rwdata	00000004 alt_priority_mask
008068c8 g     F .text	00000088 alt_ic_irq_enable
008061a8 g     F .text	000001dc altera_avalon_uart_read
00809788 g     O .rwdata	00000008 alt_alarm_list
00806798 g     F .text	00000060 _do_ctors
00803850 g     F .text	000000d0 close
00803b80 g     F .text	00000084 alt_load
00800f20 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08409114 	ori	at,at,580
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10ad1004 	addi	r2,r2,-19392
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10ad1004 	addi	r2,r2,-19392
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73017 	ldw	r2,-25408(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73017 	ldw	r2,-25408(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80024c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800250:	d685d514 	ori	gp,gp,5972
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800254:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800258:	10acfb14 	ori	r2,r2,46060

    movhi r3, %hi(__bss_end)
  80025c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800260:	18ed5014 	ori	r3,r3,46400

    beq r2, r3, 1f
  800264:	10c00326 	beq	r2,r3,800274 <_start+0x30>

0:
    stw zero, (r2)
  800268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800270:	10fffd36 	bltu	r2,r3,800268 <__alt_mem_onchip_mem+0xff7f8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800274:	0803b800 	call	803b80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800278:	0803d140 	call	803d14 <alt_main>

0080027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80027c:	003fff06 	br	80027c <__alt_mem_onchip_mem+0xff7f827c>

00800280 <main>:
#include "system.h" // to use the symbolic names
#include "altera_avalon_pio_regs.h" // to use PIO functions
#include <stdint.h>

int main()
{
  800280:	defff604 	addi	sp,sp,-40
  800284:	dfc00915 	stw	ra,36(sp)
  800288:	df000815 	stw	fp,32(sp)
  80028c:	df000804 	addi	fp,sp,32
  printf("program\n");
  800290:	01002034 	movhi	r4,128
  800294:	211e1a04 	addi	r4,r4,30824
  800298:	0800b0c0 	call	800b0c <puts>

  TickData t;

  reset(&t);
  80029c:	e0bff844 	addi	r2,fp,-31
  8002a0:	1009883a 	mov	r4,r2
  8002a4:	08009880 	call	800988 <reset>

  uint8_t buttons = 0xff;
  8002a8:	00bfffc4 	movi	r2,-1
  8002ac:	e0bff805 	stb	r2,-32(fp)

  for(;;){

	  buttons = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  8002b0:	00804074 	movhi	r2,257
  8002b4:	10842804 	addi	r2,r2,4256
  8002b8:	10800037 	ldwio	r2,0(r2)
  8002bc:	e0bff805 	stb	r2,-32(fp)
	  t.A = buttons && 0x04;
  8002c0:	e0bff803 	ldbu	r2,-32(fp)
  8002c4:	1004c03a 	cmpne	r2,r2,zero
  8002c8:	e0bff845 	stb	r2,-31(fp)
	  t.B = buttons && 0x02;
  8002cc:	e0bff803 	ldbu	r2,-32(fp)
  8002d0:	1004c03a 	cmpne	r2,r2,zero
  8002d4:	e0bff885 	stb	r2,-30(fp)
	  t.R = buttons && 0x01;
  8002d8:	e0bff803 	ldbu	r2,-32(fp)
  8002dc:	1004c03a 	cmpne	r2,r2,zero
  8002e0:	e0bff8c5 	stb	r2,-29(fp)

	  tick(&t);
  8002e4:	e0bff844 	addi	r2,fp,-31
  8002e8:	1009883a 	mov	r4,r2
  8002ec:	08009e00 	call	8009e0 <tick>

	  IOWR_ALTERA_AVALON_PIO_SET_BITS(LEDS_RED_BASE, t.O * 255);
  8002f0:	e0bff903 	ldbu	r2,-28(fp)
  8002f4:	10803fcc 	andi	r2,r2,255
  8002f8:	1080201c 	xori	r2,r2,128
  8002fc:	10bfe004 	addi	r2,r2,-128
  800300:	10c03fe4 	muli	r3,r2,255
  800304:	00804074 	movhi	r2,257
  800308:	10842404 	addi	r2,r2,4240
  80030c:	10c00035 	stwio	r3,0(r2)
  }
  800310:	003fe706 	br	8002b0 <__alt_mem_onchip_mem+0xff7f82b0>

00800314 <logic>:
 * http://rtsys.informatik.uni-kiel.de/kieler
 */

#include "sccharts.h"

void logic(TickData* d) {
  800314:	defffe04 	addi	sp,sp,-8
  800318:	df000115 	stw	fp,4(sp)
  80031c:	df000104 	addi	fp,sp,4
  800320:	e13fff15 	stw	r4,-4(fp)
  d->_g5 = d->_pg14_e1;
  800324:	e0bfff17 	ldw	r2,-4(fp)
  800328:	10c006c3 	ldbu	r3,27(r2)
  80032c:	e0bfff17 	ldw	r2,-4(fp)
  800330:	10c00105 	stb	r3,4(r2)
  d->_g10 = d->_pg14;
  800334:	e0bfff17 	ldw	r2,-4(fp)
  800338:	10c00703 	ldbu	r3,28(r2)
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10c001c5 	stb	r3,7(r2)
  d->_g14_e1 = !(d->_g5 || d->_g10);
  800344:	e0bfff17 	ldw	r2,-4(fp)
  800348:	10800103 	ldbu	r2,4(r2)
  80034c:	10803fcc 	andi	r2,r2,255
  800350:	1080201c 	xori	r2,r2,128
  800354:	10bfe004 	addi	r2,r2,-128
  800358:	1000081e 	bne	r2,zero,80037c <logic+0x68>
  80035c:	e0bfff17 	ldw	r2,-4(fp)
  800360:	108001c3 	ldbu	r2,7(r2)
  800364:	10803fcc 	andi	r2,r2,255
  800368:	1080201c 	xori	r2,r2,128
  80036c:	10bfe004 	addi	r2,r2,-128
  800370:	1000021e 	bne	r2,zero,80037c <logic+0x68>
  800374:	00800044 	movi	r2,1
  800378:	00000106 	br	800380 <logic+0x6c>
  80037c:	0005883a 	mov	r2,zero
  800380:	1007883a 	mov	r3,r2
  800384:	e0bfff17 	ldw	r2,-4(fp)
  800388:	10c00605 	stb	r3,24(r2)
  d->_g6_e1 = !d->_g5;
  80038c:	e0bfff17 	ldw	r2,-4(fp)
  800390:	10800103 	ldbu	r2,4(r2)
  800394:	10803fcc 	andi	r2,r2,255
  800398:	1080201c 	xori	r2,r2,128
  80039c:	10bfe004 	addi	r2,r2,-128
  8003a0:	1005003a 	cmpeq	r2,r2,zero
  8003a4:	1007883a 	mov	r3,r2
  8003a8:	e0bfff17 	ldw	r2,-4(fp)
  8003ac:	10c00585 	stb	r3,22(r2)
  d->_g7 = d->_g5 && !d->R;
  8003b0:	e0bfff17 	ldw	r2,-4(fp)
  8003b4:	10800103 	ldbu	r2,4(r2)
  8003b8:	10803fcc 	andi	r2,r2,255
  8003bc:	1080201c 	xori	r2,r2,128
  8003c0:	10bfe004 	addi	r2,r2,-128
  8003c4:	10000826 	beq	r2,zero,8003e8 <logic+0xd4>
  8003c8:	e0bfff17 	ldw	r2,-4(fp)
  8003cc:	10800083 	ldbu	r2,2(r2)
  8003d0:	10803fcc 	andi	r2,r2,255
  8003d4:	1080201c 	xori	r2,r2,128
  8003d8:	10bfe004 	addi	r2,r2,-128
  8003dc:	1000021e 	bne	r2,zero,8003e8 <logic+0xd4>
  8003e0:	00800044 	movi	r2,1
  8003e4:	00000106 	br	8003ec <logic+0xd8>
  8003e8:	0005883a 	mov	r2,zero
  8003ec:	1007883a 	mov	r3,r2
  8003f0:	e0bfff17 	ldw	r2,-4(fp)
  8003f4:	10c00185 	stb	r3,6(r2)
  d->_g5 = d->_g5 && d->R || d->_g7 && d->A;
  8003f8:	e0bfff17 	ldw	r2,-4(fp)
  8003fc:	10800103 	ldbu	r2,4(r2)
  800400:	10803fcc 	andi	r2,r2,255
  800404:	1080201c 	xori	r2,r2,128
  800408:	10bfe004 	addi	r2,r2,-128
  80040c:	10000626 	beq	r2,zero,800428 <logic+0x114>
  800410:	e0bfff17 	ldw	r2,-4(fp)
  800414:	10800083 	ldbu	r2,2(r2)
  800418:	10803fcc 	andi	r2,r2,255
  80041c:	1080201c 	xori	r2,r2,128
  800420:	10bfe004 	addi	r2,r2,-128
  800424:	10000c1e 	bne	r2,zero,800458 <logic+0x144>
  800428:	e0bfff17 	ldw	r2,-4(fp)
  80042c:	10800183 	ldbu	r2,6(r2)
  800430:	10803fcc 	andi	r2,r2,255
  800434:	1080201c 	xori	r2,r2,128
  800438:	10bfe004 	addi	r2,r2,-128
  80043c:	10000826 	beq	r2,zero,800460 <logic+0x14c>
  800440:	e0bfff17 	ldw	r2,-4(fp)
  800444:	10800003 	ldbu	r2,0(r2)
  800448:	10803fcc 	andi	r2,r2,255
  80044c:	1080201c 	xori	r2,r2,128
  800450:	10bfe004 	addi	r2,r2,-128
  800454:	10000226 	beq	r2,zero,800460 <logic+0x14c>
  800458:	00800044 	movi	r2,1
  80045c:	00000106 	br	800464 <logic+0x150>
  800460:	0005883a 	mov	r2,zero
  800464:	1007883a 	mov	r3,r2
  800468:	e0bfff17 	ldw	r2,-4(fp)
  80046c:	10c00105 	stb	r3,4(r2)
  d->_g11_e2 = !d->_g10;
  800470:	e0bfff17 	ldw	r2,-4(fp)
  800474:	108001c3 	ldbu	r2,7(r2)
  800478:	10803fcc 	andi	r2,r2,255
  80047c:	1080201c 	xori	r2,r2,128
  800480:	10bfe004 	addi	r2,r2,-128
  800484:	1005003a 	cmpeq	r2,r2,zero
  800488:	1007883a 	mov	r3,r2
  80048c:	e0bfff17 	ldw	r2,-4(fp)
  800490:	10c005c5 	stb	r3,23(r2)
  d->_g12 = d->_g10 && !d->R;
  800494:	e0bfff17 	ldw	r2,-4(fp)
  800498:	108001c3 	ldbu	r2,7(r2)
  80049c:	10803fcc 	andi	r2,r2,255
  8004a0:	1080201c 	xori	r2,r2,128
  8004a4:	10bfe004 	addi	r2,r2,-128
  8004a8:	10000826 	beq	r2,zero,8004cc <logic+0x1b8>
  8004ac:	e0bfff17 	ldw	r2,-4(fp)
  8004b0:	10800083 	ldbu	r2,2(r2)
  8004b4:	10803fcc 	andi	r2,r2,255
  8004b8:	1080201c 	xori	r2,r2,128
  8004bc:	10bfe004 	addi	r2,r2,-128
  8004c0:	1000021e 	bne	r2,zero,8004cc <logic+0x1b8>
  8004c4:	00800044 	movi	r2,1
  8004c8:	00000106 	br	8004d0 <logic+0x1bc>
  8004cc:	0005883a 	mov	r2,zero
  8004d0:	1007883a 	mov	r3,r2
  8004d4:	e0bfff17 	ldw	r2,-4(fp)
  8004d8:	10c00245 	stb	r3,9(r2)
  d->_g10 = d->_g10 && d->R || d->_g12 && d->B;
  8004dc:	e0bfff17 	ldw	r2,-4(fp)
  8004e0:	108001c3 	ldbu	r2,7(r2)
  8004e4:	10803fcc 	andi	r2,r2,255
  8004e8:	1080201c 	xori	r2,r2,128
  8004ec:	10bfe004 	addi	r2,r2,-128
  8004f0:	10000626 	beq	r2,zero,80050c <logic+0x1f8>
  8004f4:	e0bfff17 	ldw	r2,-4(fp)
  8004f8:	10800083 	ldbu	r2,2(r2)
  8004fc:	10803fcc 	andi	r2,r2,255
  800500:	1080201c 	xori	r2,r2,128
  800504:	10bfe004 	addi	r2,r2,-128
  800508:	10000c1e 	bne	r2,zero,80053c <logic+0x228>
  80050c:	e0bfff17 	ldw	r2,-4(fp)
  800510:	10800243 	ldbu	r2,9(r2)
  800514:	10803fcc 	andi	r2,r2,255
  800518:	1080201c 	xori	r2,r2,128
  80051c:	10bfe004 	addi	r2,r2,-128
  800520:	10000826 	beq	r2,zero,800544 <logic+0x230>
  800524:	e0bfff17 	ldw	r2,-4(fp)
  800528:	10800043 	ldbu	r2,1(r2)
  80052c:	10803fcc 	andi	r2,r2,255
  800530:	1080201c 	xori	r2,r2,128
  800534:	10bfe004 	addi	r2,r2,-128
  800538:	10000226 	beq	r2,zero,800544 <logic+0x230>
  80053c:	00800044 	movi	r2,1
  800540:	00000106 	br	800548 <logic+0x234>
  800544:	0005883a 	mov	r2,zero
  800548:	1007883a 	mov	r3,r2
  80054c:	e0bfff17 	ldw	r2,-4(fp)
  800550:	10c001c5 	stb	r3,7(r2)
  d->_g11_e2 = (d->_g6_e1 || d->_g5) && (d->_g11_e2 || d->_g10) && (d->_g5 || d->_g10);
  800554:	e0bfff17 	ldw	r2,-4(fp)
  800558:	10800583 	ldbu	r2,22(r2)
  80055c:	10803fcc 	andi	r2,r2,255
  800560:	1080201c 	xori	r2,r2,128
  800564:	10bfe004 	addi	r2,r2,-128
  800568:	1000061e 	bne	r2,zero,800584 <logic+0x270>
  80056c:	e0bfff17 	ldw	r2,-4(fp)
  800570:	10800103 	ldbu	r2,4(r2)
  800574:	10803fcc 	andi	r2,r2,255
  800578:	1080201c 	xori	r2,r2,128
  80057c:	10bfe004 	addi	r2,r2,-128
  800580:	10001a26 	beq	r2,zero,8005ec <logic+0x2d8>
  800584:	e0bfff17 	ldw	r2,-4(fp)
  800588:	108005c3 	ldbu	r2,23(r2)
  80058c:	10803fcc 	andi	r2,r2,255
  800590:	1080201c 	xori	r2,r2,128
  800594:	10bfe004 	addi	r2,r2,-128
  800598:	1000061e 	bne	r2,zero,8005b4 <logic+0x2a0>
  80059c:	e0bfff17 	ldw	r2,-4(fp)
  8005a0:	108001c3 	ldbu	r2,7(r2)
  8005a4:	10803fcc 	andi	r2,r2,255
  8005a8:	1080201c 	xori	r2,r2,128
  8005ac:	10bfe004 	addi	r2,r2,-128
  8005b0:	10000e26 	beq	r2,zero,8005ec <logic+0x2d8>
  8005b4:	e0bfff17 	ldw	r2,-4(fp)
  8005b8:	10800103 	ldbu	r2,4(r2)
  8005bc:	10803fcc 	andi	r2,r2,255
  8005c0:	1080201c 	xori	r2,r2,128
  8005c4:	10bfe004 	addi	r2,r2,-128
  8005c8:	1000061e 	bne	r2,zero,8005e4 <logic+0x2d0>
  8005cc:	e0bfff17 	ldw	r2,-4(fp)
  8005d0:	108001c3 	ldbu	r2,7(r2)
  8005d4:	10803fcc 	andi	r2,r2,255
  8005d8:	1080201c 	xori	r2,r2,128
  8005dc:	10bfe004 	addi	r2,r2,-128
  8005e0:	10000226 	beq	r2,zero,8005ec <logic+0x2d8>
  8005e4:	00800044 	movi	r2,1
  8005e8:	00000106 	br	8005f0 <logic+0x2dc>
  8005ec:	0005883a 	mov	r2,zero
  8005f0:	1007883a 	mov	r3,r2
  8005f4:	e0bfff17 	ldw	r2,-4(fp)
  8005f8:	10c005c5 	stb	r3,23(r2)
  d->_g11 = d->_g11_e2 && !d->R;
  8005fc:	e0bfff17 	ldw	r2,-4(fp)
  800600:	108005c3 	ldbu	r2,23(r2)
  800604:	10803fcc 	andi	r2,r2,255
  800608:	1080201c 	xori	r2,r2,128
  80060c:	10bfe004 	addi	r2,r2,-128
  800610:	10000826 	beq	r2,zero,800634 <logic+0x320>
  800614:	e0bfff17 	ldw	r2,-4(fp)
  800618:	10800083 	ldbu	r2,2(r2)
  80061c:	10803fcc 	andi	r2,r2,255
  800620:	1080201c 	xori	r2,r2,128
  800624:	10bfe004 	addi	r2,r2,-128
  800628:	1000021e 	bne	r2,zero,800634 <logic+0x320>
  80062c:	00800044 	movi	r2,1
  800630:	00000106 	br	800638 <logic+0x324>
  800634:	0005883a 	mov	r2,zero
  800638:	1007883a 	mov	r3,r2
  80063c:	e0bfff17 	ldw	r2,-4(fp)
  800640:	10c00205 	stb	r3,8(r2)
  if (d->_g11) {
  800644:	e0bfff17 	ldw	r2,-4(fp)
  800648:	10800203 	ldbu	r2,8(r2)
  80064c:	10803fcc 	andi	r2,r2,255
  800650:	1080201c 	xori	r2,r2,128
  800654:	10bfe004 	addi	r2,r2,-128
  800658:	10000326 	beq	r2,zero,800668 <logic+0x354>
    d->O = 1;
  80065c:	e0bfff17 	ldw	r2,-4(fp)
  800660:	00c00044 	movi	r3,1
  800664:	10c000c5 	stb	r3,3(r2)
  }
  d->_g6_e1 = d->_g11_e2 && d->R || d->_g11;
  800668:	e0bfff17 	ldw	r2,-4(fp)
  80066c:	108005c3 	ldbu	r2,23(r2)
  800670:	10803fcc 	andi	r2,r2,255
  800674:	1080201c 	xori	r2,r2,128
  800678:	10bfe004 	addi	r2,r2,-128
  80067c:	10000626 	beq	r2,zero,800698 <logic+0x384>
  800680:	e0bfff17 	ldw	r2,-4(fp)
  800684:	10800083 	ldbu	r2,2(r2)
  800688:	10803fcc 	andi	r2,r2,255
  80068c:	1080201c 	xori	r2,r2,128
  800690:	10bfe004 	addi	r2,r2,-128
  800694:	1000061e 	bne	r2,zero,8006b0 <logic+0x39c>
  800698:	e0bfff17 	ldw	r2,-4(fp)
  80069c:	10800203 	ldbu	r2,8(r2)
  8006a0:	10803fcc 	andi	r2,r2,255
  8006a4:	1080201c 	xori	r2,r2,128
  8006a8:	10bfe004 	addi	r2,r2,-128
  8006ac:	10000226 	beq	r2,zero,8006b8 <logic+0x3a4>
  8006b0:	00800044 	movi	r2,1
  8006b4:	00000106 	br	8006bc <logic+0x3a8>
  8006b8:	0005883a 	mov	r2,zero
  8006bc:	1007883a 	mov	r3,r2
  8006c0:	e0bfff17 	ldw	r2,-4(fp)
  8006c4:	10c00585 	stb	r3,22(r2)
  d->_g6 = d->_pg20;
  8006c8:	e0bfff17 	ldw	r2,-4(fp)
  8006cc:	10c00743 	ldbu	r3,29(r2)
  8006d0:	e0bfff17 	ldw	r2,-4(fp)
  8006d4:	10c00145 	stb	r3,5(r2)
  d->_g15 = !d->_g6;
  8006d8:	e0bfff17 	ldw	r2,-4(fp)
  8006dc:	10800143 	ldbu	r2,5(r2)
  8006e0:	10803fcc 	andi	r2,r2,255
  8006e4:	1080201c 	xori	r2,r2,128
  8006e8:	10bfe004 	addi	r2,r2,-128
  8006ec:	1005003a 	cmpeq	r2,r2,zero
  8006f0:	1007883a 	mov	r3,r2
  8006f4:	e0bfff17 	ldw	r2,-4(fp)
  8006f8:	10c00305 	stb	r3,12(r2)
  d->_g13 = d->_g6 && d->R;
  8006fc:	e0bfff17 	ldw	r2,-4(fp)
  800700:	10800143 	ldbu	r2,5(r2)
  800704:	10803fcc 	andi	r2,r2,255
  800708:	1080201c 	xori	r2,r2,128
  80070c:	10bfe004 	addi	r2,r2,-128
  800710:	10000826 	beq	r2,zero,800734 <logic+0x420>
  800714:	e0bfff17 	ldw	r2,-4(fp)
  800718:	10800083 	ldbu	r2,2(r2)
  80071c:	10803fcc 	andi	r2,r2,255
  800720:	1080201c 	xori	r2,r2,128
  800724:	10bfe004 	addi	r2,r2,-128
  800728:	10000226 	beq	r2,zero,800734 <logic+0x420>
  80072c:	00800044 	movi	r2,1
  800730:	00000106 	br	800738 <logic+0x424>
  800734:	0005883a 	mov	r2,zero
  800738:	1007883a 	mov	r3,r2
  80073c:	e0bfff17 	ldw	r2,-4(fp)
  800740:	10c00285 	stb	r3,10(r2)
  d->_g19_e2 = (d->_g14_e1 || d->_g6_e1) && (d->_g15 || d->_g13) && (d->_g6_e1 || d->_g13);
  800744:	e0bfff17 	ldw	r2,-4(fp)
  800748:	10800603 	ldbu	r2,24(r2)
  80074c:	10803fcc 	andi	r2,r2,255
  800750:	1080201c 	xori	r2,r2,128
  800754:	10bfe004 	addi	r2,r2,-128
  800758:	1000061e 	bne	r2,zero,800774 <logic+0x460>
  80075c:	e0bfff17 	ldw	r2,-4(fp)
  800760:	10800583 	ldbu	r2,22(r2)
  800764:	10803fcc 	andi	r2,r2,255
  800768:	1080201c 	xori	r2,r2,128
  80076c:	10bfe004 	addi	r2,r2,-128
  800770:	10001a26 	beq	r2,zero,8007dc <logic+0x4c8>
  800774:	e0bfff17 	ldw	r2,-4(fp)
  800778:	10800303 	ldbu	r2,12(r2)
  80077c:	10803fcc 	andi	r2,r2,255
  800780:	1080201c 	xori	r2,r2,128
  800784:	10bfe004 	addi	r2,r2,-128
  800788:	1000061e 	bne	r2,zero,8007a4 <logic+0x490>
  80078c:	e0bfff17 	ldw	r2,-4(fp)
  800790:	10800283 	ldbu	r2,10(r2)
  800794:	10803fcc 	andi	r2,r2,255
  800798:	1080201c 	xori	r2,r2,128
  80079c:	10bfe004 	addi	r2,r2,-128
  8007a0:	10000e26 	beq	r2,zero,8007dc <logic+0x4c8>
  8007a4:	e0bfff17 	ldw	r2,-4(fp)
  8007a8:	10800583 	ldbu	r2,22(r2)
  8007ac:	10803fcc 	andi	r2,r2,255
  8007b0:	1080201c 	xori	r2,r2,128
  8007b4:	10bfe004 	addi	r2,r2,-128
  8007b8:	1000061e 	bne	r2,zero,8007d4 <logic+0x4c0>
  8007bc:	e0bfff17 	ldw	r2,-4(fp)
  8007c0:	10800283 	ldbu	r2,10(r2)
  8007c4:	10803fcc 	andi	r2,r2,255
  8007c8:	1080201c 	xori	r2,r2,128
  8007cc:	10bfe004 	addi	r2,r2,-128
  8007d0:	10000226 	beq	r2,zero,8007dc <logic+0x4c8>
  8007d4:	00800044 	movi	r2,1
  8007d8:	00000106 	br	8007e0 <logic+0x4cc>
  8007dc:	0005883a 	mov	r2,zero
  8007e0:	1007883a 	mov	r3,r2
  8007e4:	e0bfff17 	ldw	r2,-4(fp)
  8007e8:	10c00645 	stb	r3,25(r2)
  d->_g19 = d->_GO || d->_g19_e2;
  8007ec:	e0bfff17 	ldw	r2,-4(fp)
  8007f0:	108003c3 	ldbu	r2,15(r2)
  8007f4:	10803fcc 	andi	r2,r2,255
  8007f8:	1080201c 	xori	r2,r2,128
  8007fc:	10bfe004 	addi	r2,r2,-128
  800800:	1000061e 	bne	r2,zero,80081c <logic+0x508>
  800804:	e0bfff17 	ldw	r2,-4(fp)
  800808:	10800643 	ldbu	r2,25(r2)
  80080c:	10803fcc 	andi	r2,r2,255
  800810:	1080201c 	xori	r2,r2,128
  800814:	10bfe004 	addi	r2,r2,-128
  800818:	10000226 	beq	r2,zero,800824 <logic+0x510>
  80081c:	00800044 	movi	r2,1
  800820:	00000106 	br	800828 <logic+0x514>
  800824:	0005883a 	mov	r2,zero
  800828:	1007883a 	mov	r3,r2
  80082c:	e0bfff17 	ldw	r2,-4(fp)
  800830:	10c00345 	stb	r3,13(r2)
  if (d->_g19) {
  800834:	e0bfff17 	ldw	r2,-4(fp)
  800838:	10800343 	ldbu	r2,13(r2)
  80083c:	10803fcc 	andi	r2,r2,255
  800840:	1080201c 	xori	r2,r2,128
  800844:	10bfe004 	addi	r2,r2,-128
  800848:	10000226 	beq	r2,zero,800854 <logic+0x540>
    d->O = 0;
  80084c:	e0bfff17 	ldw	r2,-4(fp)
  800850:	100000c5 	stb	zero,3(r2)
  }
  d->_g14_e1 = d->_g19 || d->_g7 && !d->A;
  800854:	e0bfff17 	ldw	r2,-4(fp)
  800858:	10800343 	ldbu	r2,13(r2)
  80085c:	10803fcc 	andi	r2,r2,255
  800860:	1080201c 	xori	r2,r2,128
  800864:	10bfe004 	addi	r2,r2,-128
  800868:	10000c1e 	bne	r2,zero,80089c <logic+0x588>
  80086c:	e0bfff17 	ldw	r2,-4(fp)
  800870:	10800183 	ldbu	r2,6(r2)
  800874:	10803fcc 	andi	r2,r2,255
  800878:	1080201c 	xori	r2,r2,128
  80087c:	10bfe004 	addi	r2,r2,-128
  800880:	10000826 	beq	r2,zero,8008a4 <logic+0x590>
  800884:	e0bfff17 	ldw	r2,-4(fp)
  800888:	10800003 	ldbu	r2,0(r2)
  80088c:	10803fcc 	andi	r2,r2,255
  800890:	1080201c 	xori	r2,r2,128
  800894:	10bfe004 	addi	r2,r2,-128
  800898:	1000021e 	bne	r2,zero,8008a4 <logic+0x590>
  80089c:	00800044 	movi	r2,1
  8008a0:	00000106 	br	8008a8 <logic+0x594>
  8008a4:	0005883a 	mov	r2,zero
  8008a8:	1007883a 	mov	r3,r2
  8008ac:	e0bfff17 	ldw	r2,-4(fp)
  8008b0:	10c00605 	stb	r3,24(r2)
  d->_g14 = d->_g19 || d->_g12 && !d->B;
  8008b4:	e0bfff17 	ldw	r2,-4(fp)
  8008b8:	10800343 	ldbu	r2,13(r2)
  8008bc:	10803fcc 	andi	r2,r2,255
  8008c0:	1080201c 	xori	r2,r2,128
  8008c4:	10bfe004 	addi	r2,r2,-128
  8008c8:	10000c1e 	bne	r2,zero,8008fc <logic+0x5e8>
  8008cc:	e0bfff17 	ldw	r2,-4(fp)
  8008d0:	10800243 	ldbu	r2,9(r2)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	10000826 	beq	r2,zero,800904 <logic+0x5f0>
  8008e4:	e0bfff17 	ldw	r2,-4(fp)
  8008e8:	10800043 	ldbu	r2,1(r2)
  8008ec:	10803fcc 	andi	r2,r2,255
  8008f0:	1080201c 	xori	r2,r2,128
  8008f4:	10bfe004 	addi	r2,r2,-128
  8008f8:	1000021e 	bne	r2,zero,800904 <logic+0x5f0>
  8008fc:	00800044 	movi	r2,1
  800900:	00000106 	br	800908 <logic+0x5f4>
  800904:	0005883a 	mov	r2,zero
  800908:	1007883a 	mov	r3,r2
  80090c:	e0bfff17 	ldw	r2,-4(fp)
  800910:	10c002c5 	stb	r3,11(r2)
  d->_g20 = d->_g19 || d->_g6 && !d->R;
  800914:	e0bfff17 	ldw	r2,-4(fp)
  800918:	10800343 	ldbu	r2,13(r2)
  80091c:	10803fcc 	andi	r2,r2,255
  800920:	1080201c 	xori	r2,r2,128
  800924:	10bfe004 	addi	r2,r2,-128
  800928:	10000c1e 	bne	r2,zero,80095c <logic+0x648>
  80092c:	e0bfff17 	ldw	r2,-4(fp)
  800930:	10800143 	ldbu	r2,5(r2)
  800934:	10803fcc 	andi	r2,r2,255
  800938:	1080201c 	xori	r2,r2,128
  80093c:	10bfe004 	addi	r2,r2,-128
  800940:	10000826 	beq	r2,zero,800964 <logic+0x650>
  800944:	e0bfff17 	ldw	r2,-4(fp)
  800948:	10800083 	ldbu	r2,2(r2)
  80094c:	10803fcc 	andi	r2,r2,255
  800950:	1080201c 	xori	r2,r2,128
  800954:	10bfe004 	addi	r2,r2,-128
  800958:	1000021e 	bne	r2,zero,800964 <logic+0x650>
  80095c:	00800044 	movi	r2,1
  800960:	00000106 	br	800968 <logic+0x654>
  800964:	0005883a 	mov	r2,zero
  800968:	1007883a 	mov	r3,r2
  80096c:	e0bfff17 	ldw	r2,-4(fp)
  800970:	10c00385 	stb	r3,14(r2)
}
  800974:	0001883a 	nop
  800978:	e037883a 	mov	sp,fp
  80097c:	df000017 	ldw	fp,0(sp)
  800980:	dec00104 	addi	sp,sp,4
  800984:	f800283a 	ret

00800988 <reset>:

void reset(TickData* d) {
  800988:	defffe04 	addi	sp,sp,-8
  80098c:	df000115 	stw	fp,4(sp)
  800990:	df000104 	addi	fp,sp,4
  800994:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  800998:	e0bfff17 	ldw	r2,-4(fp)
  80099c:	00c00044 	movi	r3,1
  8009a0:	10c003c5 	stb	r3,15(r2)
  d->_TERM = 0;
  8009a4:	e0bfff17 	ldw	r2,-4(fp)
  8009a8:	10000685 	stb	zero,26(r2)
  d->O = 0;
  8009ac:	e0bfff17 	ldw	r2,-4(fp)
  8009b0:	100000c5 	stb	zero,3(r2)
  d->_pg14_e1 = 0;
  8009b4:	e0bfff17 	ldw	r2,-4(fp)
  8009b8:	100006c5 	stb	zero,27(r2)
  d->_pg14 = 0;
  8009bc:	e0bfff17 	ldw	r2,-4(fp)
  8009c0:	10000705 	stb	zero,28(r2)
  d->_pg20 = 0;
  8009c4:	e0bfff17 	ldw	r2,-4(fp)
  8009c8:	10000745 	stb	zero,29(r2)
}
  8009cc:	0001883a 	nop
  8009d0:	e037883a 	mov	sp,fp
  8009d4:	df000017 	ldw	fp,0(sp)
  8009d8:	dec00104 	addi	sp,sp,4
  8009dc:	f800283a 	ret

008009e0 <tick>:

void tick(TickData* d) {
  8009e0:	defffd04 	addi	sp,sp,-12
  8009e4:	dfc00215 	stw	ra,8(sp)
  8009e8:	df000115 	stw	fp,4(sp)
  8009ec:	df000104 	addi	fp,sp,4
  8009f0:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  8009f4:	e13fff17 	ldw	r4,-4(fp)
  8009f8:	08003140 	call	800314 <logic>

  d->_pg14_e1 = d->_g14_e1;
  8009fc:	e0bfff17 	ldw	r2,-4(fp)
  800a00:	10c00603 	ldbu	r3,24(r2)
  800a04:	e0bfff17 	ldw	r2,-4(fp)
  800a08:	10c006c5 	stb	r3,27(r2)
  d->_pg14 = d->_g14;
  800a0c:	e0bfff17 	ldw	r2,-4(fp)
  800a10:	10c002c3 	ldbu	r3,11(r2)
  800a14:	e0bfff17 	ldw	r2,-4(fp)
  800a18:	10c00705 	stb	r3,28(r2)
  d->_pg20 = d->_g20;
  800a1c:	e0bfff17 	ldw	r2,-4(fp)
  800a20:	10c00383 	ldbu	r3,14(r2)
  800a24:	e0bfff17 	ldw	r2,-4(fp)
  800a28:	10c00745 	stb	r3,29(r2)
  d->_GO = 0;
  800a2c:	e0bfff17 	ldw	r2,-4(fp)
  800a30:	100003c5 	stb	zero,15(r2)
}
  800a34:	0001883a 	nop
  800a38:	e037883a 	mov	sp,fp
  800a3c:	dfc00117 	ldw	ra,4(sp)
  800a40:	df000017 	ldw	fp,0(sp)
  800a44:	dec00204 	addi	sp,sp,8
  800a48:	f800283a 	ret

00800a4c <_puts_r>:
  800a4c:	defff604 	addi	sp,sp,-40
  800a50:	dc000715 	stw	r16,28(sp)
  800a54:	2021883a 	mov	r16,r4
  800a58:	2809883a 	mov	r4,r5
  800a5c:	dc400815 	stw	r17,32(sp)
  800a60:	dfc00915 	stw	ra,36(sp)
  800a64:	2823883a 	mov	r17,r5
  800a68:	0800b200 	call	800b20 <strlen>
  800a6c:	10c00044 	addi	r3,r2,1
  800a70:	d8800115 	stw	r2,4(sp)
  800a74:	00802034 	movhi	r2,128
  800a78:	109e1c04 	addi	r2,r2,30832
  800a7c:	d8800215 	stw	r2,8(sp)
  800a80:	00800044 	movi	r2,1
  800a84:	d8800315 	stw	r2,12(sp)
  800a88:	00800084 	movi	r2,2
  800a8c:	dc400015 	stw	r17,0(sp)
  800a90:	d8c00615 	stw	r3,24(sp)
  800a94:	dec00415 	stw	sp,16(sp)
  800a98:	d8800515 	stw	r2,20(sp)
  800a9c:	80000226 	beq	r16,zero,800aa8 <_puts_r+0x5c>
  800aa0:	80800e17 	ldw	r2,56(r16)
  800aa4:	10001426 	beq	r2,zero,800af8 <_puts_r+0xac>
  800aa8:	81400217 	ldw	r5,8(r16)
  800aac:	2880030b 	ldhu	r2,12(r5)
  800ab0:	10c8000c 	andi	r3,r2,8192
  800ab4:	1800061e 	bne	r3,zero,800ad0 <_puts_r+0x84>
  800ab8:	29001917 	ldw	r4,100(r5)
  800abc:	00f7ffc4 	movi	r3,-8193
  800ac0:	10880014 	ori	r2,r2,8192
  800ac4:	20c6703a 	and	r3,r4,r3
  800ac8:	2880030d 	sth	r2,12(r5)
  800acc:	28c01915 	stw	r3,100(r5)
  800ad0:	d9800404 	addi	r6,sp,16
  800ad4:	8009883a 	mov	r4,r16
  800ad8:	0800f580 	call	800f58 <__sfvwrite_r>
  800adc:	1000091e 	bne	r2,zero,800b04 <_puts_r+0xb8>
  800ae0:	00800284 	movi	r2,10
  800ae4:	dfc00917 	ldw	ra,36(sp)
  800ae8:	dc400817 	ldw	r17,32(sp)
  800aec:	dc000717 	ldw	r16,28(sp)
  800af0:	dec00a04 	addi	sp,sp,40
  800af4:	f800283a 	ret
  800af8:	8009883a 	mov	r4,r16
  800afc:	0800f080 	call	800f08 <__sinit>
  800b00:	003fe906 	br	800aa8 <__alt_mem_onchip_mem+0xff7f8aa8>
  800b04:	00bfffc4 	movi	r2,-1
  800b08:	003ff606 	br	800ae4 <__alt_mem_onchip_mem+0xff7f8ae4>

00800b0c <puts>:
  800b0c:	00802074 	movhi	r2,129
  800b10:	10a5d604 	addi	r2,r2,-26792
  800b14:	200b883a 	mov	r5,r4
  800b18:	11000017 	ldw	r4,0(r2)
  800b1c:	0800a4c1 	jmpi	800a4c <_puts_r>

00800b20 <strlen>:
  800b20:	208000cc 	andi	r2,r4,3
  800b24:	10002026 	beq	r2,zero,800ba8 <strlen+0x88>
  800b28:	20800007 	ldb	r2,0(r4)
  800b2c:	10002026 	beq	r2,zero,800bb0 <strlen+0x90>
  800b30:	2005883a 	mov	r2,r4
  800b34:	00000206 	br	800b40 <strlen+0x20>
  800b38:	10c00007 	ldb	r3,0(r2)
  800b3c:	18001826 	beq	r3,zero,800ba0 <strlen+0x80>
  800b40:	10800044 	addi	r2,r2,1
  800b44:	10c000cc 	andi	r3,r2,3
  800b48:	183ffb1e 	bne	r3,zero,800b38 <__alt_mem_onchip_mem+0xff7f8b38>
  800b4c:	10c00017 	ldw	r3,0(r2)
  800b50:	01ffbff4 	movhi	r7,65279
  800b54:	39ffbfc4 	addi	r7,r7,-257
  800b58:	00ca303a 	nor	r5,zero,r3
  800b5c:	01a02074 	movhi	r6,32897
  800b60:	19c7883a 	add	r3,r3,r7
  800b64:	31a02004 	addi	r6,r6,-32640
  800b68:	1946703a 	and	r3,r3,r5
  800b6c:	1986703a 	and	r3,r3,r6
  800b70:	1800091e 	bne	r3,zero,800b98 <strlen+0x78>
  800b74:	10800104 	addi	r2,r2,4
  800b78:	10c00017 	ldw	r3,0(r2)
  800b7c:	19cb883a 	add	r5,r3,r7
  800b80:	00c6303a 	nor	r3,zero,r3
  800b84:	28c6703a 	and	r3,r5,r3
  800b88:	1986703a 	and	r3,r3,r6
  800b8c:	183ff926 	beq	r3,zero,800b74 <__alt_mem_onchip_mem+0xff7f8b74>
  800b90:	00000106 	br	800b98 <strlen+0x78>
  800b94:	10800044 	addi	r2,r2,1
  800b98:	10c00007 	ldb	r3,0(r2)
  800b9c:	183ffd1e 	bne	r3,zero,800b94 <__alt_mem_onchip_mem+0xff7f8b94>
  800ba0:	1105c83a 	sub	r2,r2,r4
  800ba4:	f800283a 	ret
  800ba8:	2005883a 	mov	r2,r4
  800bac:	003fe706 	br	800b4c <__alt_mem_onchip_mem+0xff7f8b4c>
  800bb0:	0005883a 	mov	r2,zero
  800bb4:	f800283a 	ret

00800bb8 <__fp_unlock>:
  800bb8:	0005883a 	mov	r2,zero
  800bbc:	f800283a 	ret

00800bc0 <_cleanup_r>:
  800bc0:	01402034 	movhi	r5,128
  800bc4:	294ad504 	addi	r5,r5,11092
  800bc8:	08014d81 	jmpi	8014d8 <_fwalk_reent>

00800bcc <__sinit.part.1>:
  800bcc:	defff704 	addi	sp,sp,-36
  800bd0:	00c02034 	movhi	r3,128
  800bd4:	dfc00815 	stw	ra,32(sp)
  800bd8:	ddc00715 	stw	r23,28(sp)
  800bdc:	dd800615 	stw	r22,24(sp)
  800be0:	dd400515 	stw	r21,20(sp)
  800be4:	dd000415 	stw	r20,16(sp)
  800be8:	dcc00315 	stw	r19,12(sp)
  800bec:	dc800215 	stw	r18,8(sp)
  800bf0:	dc400115 	stw	r17,4(sp)
  800bf4:	dc000015 	stw	r16,0(sp)
  800bf8:	18c2f004 	addi	r3,r3,3008
  800bfc:	24000117 	ldw	r16,4(r4)
  800c00:	20c00f15 	stw	r3,60(r4)
  800c04:	2080bb04 	addi	r2,r4,748
  800c08:	00c000c4 	movi	r3,3
  800c0c:	20c0b915 	stw	r3,740(r4)
  800c10:	2080ba15 	stw	r2,744(r4)
  800c14:	2000b815 	stw	zero,736(r4)
  800c18:	05c00204 	movi	r23,8
  800c1c:	00800104 	movi	r2,4
  800c20:	2025883a 	mov	r18,r4
  800c24:	b80d883a 	mov	r6,r23
  800c28:	81001704 	addi	r4,r16,92
  800c2c:	000b883a 	mov	r5,zero
  800c30:	80000015 	stw	zero,0(r16)
  800c34:	80000115 	stw	zero,4(r16)
  800c38:	80000215 	stw	zero,8(r16)
  800c3c:	8080030d 	sth	r2,12(r16)
  800c40:	80001915 	stw	zero,100(r16)
  800c44:	8000038d 	sth	zero,14(r16)
  800c48:	80000415 	stw	zero,16(r16)
  800c4c:	80000515 	stw	zero,20(r16)
  800c50:	80000615 	stw	zero,24(r16)
  800c54:	08021300 	call	802130 <memset>
  800c58:	05802034 	movhi	r22,128
  800c5c:	94400217 	ldw	r17,8(r18)
  800c60:	05402034 	movhi	r21,128
  800c64:	05002034 	movhi	r20,128
  800c68:	04c02034 	movhi	r19,128
  800c6c:	b58a0404 	addi	r22,r22,10256
  800c70:	ad4a1b04 	addi	r21,r21,10348
  800c74:	a50a3a04 	addi	r20,r20,10472
  800c78:	9cca5104 	addi	r19,r19,10564
  800c7c:	85800815 	stw	r22,32(r16)
  800c80:	85400915 	stw	r21,36(r16)
  800c84:	85000a15 	stw	r20,40(r16)
  800c88:	84c00b15 	stw	r19,44(r16)
  800c8c:	84000715 	stw	r16,28(r16)
  800c90:	00800284 	movi	r2,10
  800c94:	8880030d 	sth	r2,12(r17)
  800c98:	00800044 	movi	r2,1
  800c9c:	b80d883a 	mov	r6,r23
  800ca0:	89001704 	addi	r4,r17,92
  800ca4:	000b883a 	mov	r5,zero
  800ca8:	88000015 	stw	zero,0(r17)
  800cac:	88000115 	stw	zero,4(r17)
  800cb0:	88000215 	stw	zero,8(r17)
  800cb4:	88001915 	stw	zero,100(r17)
  800cb8:	8880038d 	sth	r2,14(r17)
  800cbc:	88000415 	stw	zero,16(r17)
  800cc0:	88000515 	stw	zero,20(r17)
  800cc4:	88000615 	stw	zero,24(r17)
  800cc8:	08021300 	call	802130 <memset>
  800ccc:	94000317 	ldw	r16,12(r18)
  800cd0:	00800484 	movi	r2,18
  800cd4:	8c400715 	stw	r17,28(r17)
  800cd8:	8d800815 	stw	r22,32(r17)
  800cdc:	8d400915 	stw	r21,36(r17)
  800ce0:	8d000a15 	stw	r20,40(r17)
  800ce4:	8cc00b15 	stw	r19,44(r17)
  800ce8:	8080030d 	sth	r2,12(r16)
  800cec:	00800084 	movi	r2,2
  800cf0:	80000015 	stw	zero,0(r16)
  800cf4:	80000115 	stw	zero,4(r16)
  800cf8:	80000215 	stw	zero,8(r16)
  800cfc:	80001915 	stw	zero,100(r16)
  800d00:	8080038d 	sth	r2,14(r16)
  800d04:	80000415 	stw	zero,16(r16)
  800d08:	80000515 	stw	zero,20(r16)
  800d0c:	80000615 	stw	zero,24(r16)
  800d10:	b80d883a 	mov	r6,r23
  800d14:	000b883a 	mov	r5,zero
  800d18:	81001704 	addi	r4,r16,92
  800d1c:	08021300 	call	802130 <memset>
  800d20:	00800044 	movi	r2,1
  800d24:	84000715 	stw	r16,28(r16)
  800d28:	85800815 	stw	r22,32(r16)
  800d2c:	85400915 	stw	r21,36(r16)
  800d30:	85000a15 	stw	r20,40(r16)
  800d34:	84c00b15 	stw	r19,44(r16)
  800d38:	90800e15 	stw	r2,56(r18)
  800d3c:	dfc00817 	ldw	ra,32(sp)
  800d40:	ddc00717 	ldw	r23,28(sp)
  800d44:	dd800617 	ldw	r22,24(sp)
  800d48:	dd400517 	ldw	r21,20(sp)
  800d4c:	dd000417 	ldw	r20,16(sp)
  800d50:	dcc00317 	ldw	r19,12(sp)
  800d54:	dc800217 	ldw	r18,8(sp)
  800d58:	dc400117 	ldw	r17,4(sp)
  800d5c:	dc000017 	ldw	r16,0(sp)
  800d60:	dec00904 	addi	sp,sp,36
  800d64:	f800283a 	ret

00800d68 <__fp_lock>:
  800d68:	0005883a 	mov	r2,zero
  800d6c:	f800283a 	ret

00800d70 <__sfmoreglue>:
  800d70:	defffc04 	addi	sp,sp,-16
  800d74:	dc400115 	stw	r17,4(sp)
  800d78:	2c7fffc4 	addi	r17,r5,-1
  800d7c:	8c401a24 	muli	r17,r17,104
  800d80:	dc800215 	stw	r18,8(sp)
  800d84:	2825883a 	mov	r18,r5
  800d88:	89401d04 	addi	r5,r17,116
  800d8c:	dc000015 	stw	r16,0(sp)
  800d90:	dfc00315 	stw	ra,12(sp)
  800d94:	080159c0 	call	80159c <_malloc_r>
  800d98:	1021883a 	mov	r16,r2
  800d9c:	10000726 	beq	r2,zero,800dbc <__sfmoreglue+0x4c>
  800da0:	11000304 	addi	r4,r2,12
  800da4:	10000015 	stw	zero,0(r2)
  800da8:	14800115 	stw	r18,4(r2)
  800dac:	11000215 	stw	r4,8(r2)
  800db0:	89801a04 	addi	r6,r17,104
  800db4:	000b883a 	mov	r5,zero
  800db8:	08021300 	call	802130 <memset>
  800dbc:	8005883a 	mov	r2,r16
  800dc0:	dfc00317 	ldw	ra,12(sp)
  800dc4:	dc800217 	ldw	r18,8(sp)
  800dc8:	dc400117 	ldw	r17,4(sp)
  800dcc:	dc000017 	ldw	r16,0(sp)
  800dd0:	dec00404 	addi	sp,sp,16
  800dd4:	f800283a 	ret

00800dd8 <__sfp>:
  800dd8:	defffb04 	addi	sp,sp,-20
  800ddc:	dc000015 	stw	r16,0(sp)
  800de0:	04002074 	movhi	r16,129
  800de4:	8425d504 	addi	r16,r16,-26796
  800de8:	dcc00315 	stw	r19,12(sp)
  800dec:	2027883a 	mov	r19,r4
  800df0:	81000017 	ldw	r4,0(r16)
  800df4:	dfc00415 	stw	ra,16(sp)
  800df8:	dc800215 	stw	r18,8(sp)
  800dfc:	20800e17 	ldw	r2,56(r4)
  800e00:	dc400115 	stw	r17,4(sp)
  800e04:	1000021e 	bne	r2,zero,800e10 <__sfp+0x38>
  800e08:	0800bcc0 	call	800bcc <__sinit.part.1>
  800e0c:	81000017 	ldw	r4,0(r16)
  800e10:	2480b804 	addi	r18,r4,736
  800e14:	047fffc4 	movi	r17,-1
  800e18:	91000117 	ldw	r4,4(r18)
  800e1c:	94000217 	ldw	r16,8(r18)
  800e20:	213fffc4 	addi	r4,r4,-1
  800e24:	20000a16 	blt	r4,zero,800e50 <__sfp+0x78>
  800e28:	8080030f 	ldh	r2,12(r16)
  800e2c:	10000c26 	beq	r2,zero,800e60 <__sfp+0x88>
  800e30:	80c01d04 	addi	r3,r16,116
  800e34:	00000206 	br	800e40 <__sfp+0x68>
  800e38:	18bfe60f 	ldh	r2,-104(r3)
  800e3c:	10000826 	beq	r2,zero,800e60 <__sfp+0x88>
  800e40:	213fffc4 	addi	r4,r4,-1
  800e44:	1c3ffd04 	addi	r16,r3,-12
  800e48:	18c01a04 	addi	r3,r3,104
  800e4c:	247ffa1e 	bne	r4,r17,800e38 <__alt_mem_onchip_mem+0xff7f8e38>
  800e50:	90800017 	ldw	r2,0(r18)
  800e54:	10001d26 	beq	r2,zero,800ecc <__sfp+0xf4>
  800e58:	1025883a 	mov	r18,r2
  800e5c:	003fee06 	br	800e18 <__alt_mem_onchip_mem+0xff7f8e18>
  800e60:	00bfffc4 	movi	r2,-1
  800e64:	8080038d 	sth	r2,14(r16)
  800e68:	00800044 	movi	r2,1
  800e6c:	8080030d 	sth	r2,12(r16)
  800e70:	80001915 	stw	zero,100(r16)
  800e74:	80000015 	stw	zero,0(r16)
  800e78:	80000215 	stw	zero,8(r16)
  800e7c:	80000115 	stw	zero,4(r16)
  800e80:	80000415 	stw	zero,16(r16)
  800e84:	80000515 	stw	zero,20(r16)
  800e88:	80000615 	stw	zero,24(r16)
  800e8c:	01800204 	movi	r6,8
  800e90:	000b883a 	mov	r5,zero
  800e94:	81001704 	addi	r4,r16,92
  800e98:	08021300 	call	802130 <memset>
  800e9c:	8005883a 	mov	r2,r16
  800ea0:	80000c15 	stw	zero,48(r16)
  800ea4:	80000d15 	stw	zero,52(r16)
  800ea8:	80001115 	stw	zero,68(r16)
  800eac:	80001215 	stw	zero,72(r16)
  800eb0:	dfc00417 	ldw	ra,16(sp)
  800eb4:	dcc00317 	ldw	r19,12(sp)
  800eb8:	dc800217 	ldw	r18,8(sp)
  800ebc:	dc400117 	ldw	r17,4(sp)
  800ec0:	dc000017 	ldw	r16,0(sp)
  800ec4:	dec00504 	addi	sp,sp,20
  800ec8:	f800283a 	ret
  800ecc:	01400104 	movi	r5,4
  800ed0:	9809883a 	mov	r4,r19
  800ed4:	0800d700 	call	800d70 <__sfmoreglue>
  800ed8:	90800015 	stw	r2,0(r18)
  800edc:	103fde1e 	bne	r2,zero,800e58 <__alt_mem_onchip_mem+0xff7f8e58>
  800ee0:	00800304 	movi	r2,12
  800ee4:	98800015 	stw	r2,0(r19)
  800ee8:	0005883a 	mov	r2,zero
  800eec:	003ff006 	br	800eb0 <__alt_mem_onchip_mem+0xff7f8eb0>

00800ef0 <_cleanup>:
  800ef0:	00802074 	movhi	r2,129
  800ef4:	10a5d504 	addi	r2,r2,-26796
  800ef8:	11000017 	ldw	r4,0(r2)
  800efc:	01402034 	movhi	r5,128
  800f00:	294ad504 	addi	r5,r5,11092
  800f04:	08014d81 	jmpi	8014d8 <_fwalk_reent>

00800f08 <__sinit>:
  800f08:	20800e17 	ldw	r2,56(r4)
  800f0c:	10000126 	beq	r2,zero,800f14 <__sinit+0xc>
  800f10:	f800283a 	ret
  800f14:	0800bcc1 	jmpi	800bcc <__sinit.part.1>

00800f18 <__sfp_lock_acquire>:
  800f18:	f800283a 	ret

00800f1c <__sfp_lock_release>:
  800f1c:	f800283a 	ret

00800f20 <__sinit_lock_acquire>:
  800f20:	f800283a 	ret

00800f24 <__sinit_lock_release>:
  800f24:	f800283a 	ret

00800f28 <__fp_lock_all>:
  800f28:	00802074 	movhi	r2,129
  800f2c:	10a5d604 	addi	r2,r2,-26792
  800f30:	11000017 	ldw	r4,0(r2)
  800f34:	01402034 	movhi	r5,128
  800f38:	29435a04 	addi	r5,r5,3432
  800f3c:	08014141 	jmpi	801414 <_fwalk>

00800f40 <__fp_unlock_all>:
  800f40:	00802074 	movhi	r2,129
  800f44:	10a5d604 	addi	r2,r2,-26792
  800f48:	11000017 	ldw	r4,0(r2)
  800f4c:	01402034 	movhi	r5,128
  800f50:	2942ee04 	addi	r5,r5,3000
  800f54:	08014141 	jmpi	801414 <_fwalk>

00800f58 <__sfvwrite_r>:
  800f58:	30800217 	ldw	r2,8(r6)
  800f5c:	10006726 	beq	r2,zero,8010fc <__sfvwrite_r+0x1a4>
  800f60:	28c0030b 	ldhu	r3,12(r5)
  800f64:	defff404 	addi	sp,sp,-48
  800f68:	dd400715 	stw	r21,28(sp)
  800f6c:	dd000615 	stw	r20,24(sp)
  800f70:	dc000215 	stw	r16,8(sp)
  800f74:	dfc00b15 	stw	ra,44(sp)
  800f78:	df000a15 	stw	fp,40(sp)
  800f7c:	ddc00915 	stw	r23,36(sp)
  800f80:	dd800815 	stw	r22,32(sp)
  800f84:	dcc00515 	stw	r19,20(sp)
  800f88:	dc800415 	stw	r18,16(sp)
  800f8c:	dc400315 	stw	r17,12(sp)
  800f90:	1880020c 	andi	r2,r3,8
  800f94:	2821883a 	mov	r16,r5
  800f98:	202b883a 	mov	r21,r4
  800f9c:	3029883a 	mov	r20,r6
  800fa0:	10002726 	beq	r2,zero,801040 <__sfvwrite_r+0xe8>
  800fa4:	28800417 	ldw	r2,16(r5)
  800fa8:	10002526 	beq	r2,zero,801040 <__sfvwrite_r+0xe8>
  800fac:	1880008c 	andi	r2,r3,2
  800fb0:	a4400017 	ldw	r17,0(r20)
  800fb4:	10002a26 	beq	r2,zero,801060 <__sfvwrite_r+0x108>
  800fb8:	05a00034 	movhi	r22,32768
  800fbc:	0027883a 	mov	r19,zero
  800fc0:	0025883a 	mov	r18,zero
  800fc4:	b5bf0004 	addi	r22,r22,-1024
  800fc8:	980d883a 	mov	r6,r19
  800fcc:	a809883a 	mov	r4,r21
  800fd0:	90004626 	beq	r18,zero,8010ec <__sfvwrite_r+0x194>
  800fd4:	900f883a 	mov	r7,r18
  800fd8:	b480022e 	bgeu	r22,r18,800fe4 <__sfvwrite_r+0x8c>
  800fdc:	01e00034 	movhi	r7,32768
  800fe0:	39ff0004 	addi	r7,r7,-1024
  800fe4:	80800917 	ldw	r2,36(r16)
  800fe8:	81400717 	ldw	r5,28(r16)
  800fec:	103ee83a 	callr	r2
  800ff0:	0080570e 	bge	zero,r2,801150 <__sfvwrite_r+0x1f8>
  800ff4:	a0c00217 	ldw	r3,8(r20)
  800ff8:	98a7883a 	add	r19,r19,r2
  800ffc:	90a5c83a 	sub	r18,r18,r2
  801000:	1885c83a 	sub	r2,r3,r2
  801004:	a0800215 	stw	r2,8(r20)
  801008:	103fef1e 	bne	r2,zero,800fc8 <__alt_mem_onchip_mem+0xff7f8fc8>
  80100c:	0005883a 	mov	r2,zero
  801010:	dfc00b17 	ldw	ra,44(sp)
  801014:	df000a17 	ldw	fp,40(sp)
  801018:	ddc00917 	ldw	r23,36(sp)
  80101c:	dd800817 	ldw	r22,32(sp)
  801020:	dd400717 	ldw	r21,28(sp)
  801024:	dd000617 	ldw	r20,24(sp)
  801028:	dcc00517 	ldw	r19,20(sp)
  80102c:	dc800417 	ldw	r18,16(sp)
  801030:	dc400317 	ldw	r17,12(sp)
  801034:	dc000217 	ldw	r16,8(sp)
  801038:	dec00c04 	addi	sp,sp,48
  80103c:	f800283a 	ret
  801040:	800b883a 	mov	r5,r16
  801044:	a809883a 	mov	r4,r21
  801048:	08029ac0 	call	8029ac <__swsetup_r>
  80104c:	1000eb1e 	bne	r2,zero,8013fc <__sfvwrite_r+0x4a4>
  801050:	80c0030b 	ldhu	r3,12(r16)
  801054:	a4400017 	ldw	r17,0(r20)
  801058:	1880008c 	andi	r2,r3,2
  80105c:	103fd61e 	bne	r2,zero,800fb8 <__alt_mem_onchip_mem+0xff7f8fb8>
  801060:	1880004c 	andi	r2,r3,1
  801064:	10003f1e 	bne	r2,zero,801164 <__sfvwrite_r+0x20c>
  801068:	0039883a 	mov	fp,zero
  80106c:	0025883a 	mov	r18,zero
  801070:	90001a26 	beq	r18,zero,8010dc <__sfvwrite_r+0x184>
  801074:	1880800c 	andi	r2,r3,512
  801078:	84c00217 	ldw	r19,8(r16)
  80107c:	10002126 	beq	r2,zero,801104 <__sfvwrite_r+0x1ac>
  801080:	982f883a 	mov	r23,r19
  801084:	94c09336 	bltu	r18,r19,8012d4 <__sfvwrite_r+0x37c>
  801088:	1881200c 	andi	r2,r3,1152
  80108c:	10009e1e 	bne	r2,zero,801308 <__sfvwrite_r+0x3b0>
  801090:	81000017 	ldw	r4,0(r16)
  801094:	b80d883a 	mov	r6,r23
  801098:	e00b883a 	mov	r5,fp
  80109c:	0801fd40 	call	801fd4 <memmove>
  8010a0:	80c00217 	ldw	r3,8(r16)
  8010a4:	81000017 	ldw	r4,0(r16)
  8010a8:	9005883a 	mov	r2,r18
  8010ac:	1ce7c83a 	sub	r19,r3,r19
  8010b0:	25cf883a 	add	r7,r4,r23
  8010b4:	84c00215 	stw	r19,8(r16)
  8010b8:	81c00015 	stw	r7,0(r16)
  8010bc:	a0c00217 	ldw	r3,8(r20)
  8010c0:	e0b9883a 	add	fp,fp,r2
  8010c4:	90a5c83a 	sub	r18,r18,r2
  8010c8:	18a7c83a 	sub	r19,r3,r2
  8010cc:	a4c00215 	stw	r19,8(r20)
  8010d0:	983fce26 	beq	r19,zero,80100c <__alt_mem_onchip_mem+0xff7f900c>
  8010d4:	80c0030b 	ldhu	r3,12(r16)
  8010d8:	903fe61e 	bne	r18,zero,801074 <__alt_mem_onchip_mem+0xff7f9074>
  8010dc:	8f000017 	ldw	fp,0(r17)
  8010e0:	8c800117 	ldw	r18,4(r17)
  8010e4:	8c400204 	addi	r17,r17,8
  8010e8:	003fe106 	br	801070 <__alt_mem_onchip_mem+0xff7f9070>
  8010ec:	8cc00017 	ldw	r19,0(r17)
  8010f0:	8c800117 	ldw	r18,4(r17)
  8010f4:	8c400204 	addi	r17,r17,8
  8010f8:	003fb306 	br	800fc8 <__alt_mem_onchip_mem+0xff7f8fc8>
  8010fc:	0005883a 	mov	r2,zero
  801100:	f800283a 	ret
  801104:	81000017 	ldw	r4,0(r16)
  801108:	80800417 	ldw	r2,16(r16)
  80110c:	11005736 	bltu	r2,r4,80126c <__sfvwrite_r+0x314>
  801110:	85c00517 	ldw	r23,20(r16)
  801114:	95c05536 	bltu	r18,r23,80126c <__sfvwrite_r+0x314>
  801118:	00a00034 	movhi	r2,32768
  80111c:	10bfffc4 	addi	r2,r2,-1
  801120:	9009883a 	mov	r4,r18
  801124:	1480012e 	bgeu	r2,r18,80112c <__sfvwrite_r+0x1d4>
  801128:	1009883a 	mov	r4,r2
  80112c:	b80b883a 	mov	r5,r23
  801130:	08036600 	call	803660 <__divsi3>
  801134:	15cf383a 	mul	r7,r2,r23
  801138:	81400717 	ldw	r5,28(r16)
  80113c:	80800917 	ldw	r2,36(r16)
  801140:	e00d883a 	mov	r6,fp
  801144:	a809883a 	mov	r4,r21
  801148:	103ee83a 	callr	r2
  80114c:	00bfdb16 	blt	zero,r2,8010bc <__alt_mem_onchip_mem+0xff7f90bc>
  801150:	8080030b 	ldhu	r2,12(r16)
  801154:	10801014 	ori	r2,r2,64
  801158:	8080030d 	sth	r2,12(r16)
  80115c:	00bfffc4 	movi	r2,-1
  801160:	003fab06 	br	801010 <__alt_mem_onchip_mem+0xff7f9010>
  801164:	0027883a 	mov	r19,zero
  801168:	0011883a 	mov	r8,zero
  80116c:	0039883a 	mov	fp,zero
  801170:	0025883a 	mov	r18,zero
  801174:	90001f26 	beq	r18,zero,8011f4 <__sfvwrite_r+0x29c>
  801178:	40005a26 	beq	r8,zero,8012e4 <__sfvwrite_r+0x38c>
  80117c:	982d883a 	mov	r22,r19
  801180:	94c0012e 	bgeu	r18,r19,801188 <__sfvwrite_r+0x230>
  801184:	902d883a 	mov	r22,r18
  801188:	81000017 	ldw	r4,0(r16)
  80118c:	80800417 	ldw	r2,16(r16)
  801190:	b02f883a 	mov	r23,r22
  801194:	81c00517 	ldw	r7,20(r16)
  801198:	1100032e 	bgeu	r2,r4,8011a8 <__sfvwrite_r+0x250>
  80119c:	80c00217 	ldw	r3,8(r16)
  8011a0:	38c7883a 	add	r3,r7,r3
  8011a4:	1d801816 	blt	r3,r22,801208 <__sfvwrite_r+0x2b0>
  8011a8:	b1c03e16 	blt	r22,r7,8012a4 <__sfvwrite_r+0x34c>
  8011ac:	80800917 	ldw	r2,36(r16)
  8011b0:	81400717 	ldw	r5,28(r16)
  8011b4:	e00d883a 	mov	r6,fp
  8011b8:	da000115 	stw	r8,4(sp)
  8011bc:	a809883a 	mov	r4,r21
  8011c0:	103ee83a 	callr	r2
  8011c4:	102f883a 	mov	r23,r2
  8011c8:	da000117 	ldw	r8,4(sp)
  8011cc:	00bfe00e 	bge	zero,r2,801150 <__alt_mem_onchip_mem+0xff7f9150>
  8011d0:	9de7c83a 	sub	r19,r19,r23
  8011d4:	98001f26 	beq	r19,zero,801254 <__sfvwrite_r+0x2fc>
  8011d8:	a0800217 	ldw	r2,8(r20)
  8011dc:	e5f9883a 	add	fp,fp,r23
  8011e0:	95e5c83a 	sub	r18,r18,r23
  8011e4:	15efc83a 	sub	r23,r2,r23
  8011e8:	a5c00215 	stw	r23,8(r20)
  8011ec:	b83f8726 	beq	r23,zero,80100c <__alt_mem_onchip_mem+0xff7f900c>
  8011f0:	903fe11e 	bne	r18,zero,801178 <__alt_mem_onchip_mem+0xff7f9178>
  8011f4:	8f000017 	ldw	fp,0(r17)
  8011f8:	8c800117 	ldw	r18,4(r17)
  8011fc:	0011883a 	mov	r8,zero
  801200:	8c400204 	addi	r17,r17,8
  801204:	003fdb06 	br	801174 <__alt_mem_onchip_mem+0xff7f9174>
  801208:	180d883a 	mov	r6,r3
  80120c:	e00b883a 	mov	r5,fp
  801210:	da000115 	stw	r8,4(sp)
  801214:	d8c00015 	stw	r3,0(sp)
  801218:	0801fd40 	call	801fd4 <memmove>
  80121c:	d8c00017 	ldw	r3,0(sp)
  801220:	80800017 	ldw	r2,0(r16)
  801224:	800b883a 	mov	r5,r16
  801228:	a809883a 	mov	r4,r21
  80122c:	10c5883a 	add	r2,r2,r3
  801230:	80800015 	stw	r2,0(r16)
  801234:	d8c00015 	stw	r3,0(sp)
  801238:	0802e740 	call	802e74 <_fflush_r>
  80123c:	d8c00017 	ldw	r3,0(sp)
  801240:	da000117 	ldw	r8,4(sp)
  801244:	103fc21e 	bne	r2,zero,801150 <__alt_mem_onchip_mem+0xff7f9150>
  801248:	182f883a 	mov	r23,r3
  80124c:	9de7c83a 	sub	r19,r19,r23
  801250:	983fe11e 	bne	r19,zero,8011d8 <__alt_mem_onchip_mem+0xff7f91d8>
  801254:	800b883a 	mov	r5,r16
  801258:	a809883a 	mov	r4,r21
  80125c:	0802e740 	call	802e74 <_fflush_r>
  801260:	103fbb1e 	bne	r2,zero,801150 <__alt_mem_onchip_mem+0xff7f9150>
  801264:	0011883a 	mov	r8,zero
  801268:	003fdb06 	br	8011d8 <__alt_mem_onchip_mem+0xff7f91d8>
  80126c:	94c0012e 	bgeu	r18,r19,801274 <__sfvwrite_r+0x31c>
  801270:	9027883a 	mov	r19,r18
  801274:	980d883a 	mov	r6,r19
  801278:	e00b883a 	mov	r5,fp
  80127c:	0801fd40 	call	801fd4 <memmove>
  801280:	80800217 	ldw	r2,8(r16)
  801284:	80c00017 	ldw	r3,0(r16)
  801288:	14c5c83a 	sub	r2,r2,r19
  80128c:	1cc7883a 	add	r3,r3,r19
  801290:	80800215 	stw	r2,8(r16)
  801294:	80c00015 	stw	r3,0(r16)
  801298:	10004326 	beq	r2,zero,8013a8 <__sfvwrite_r+0x450>
  80129c:	9805883a 	mov	r2,r19
  8012a0:	003f8606 	br	8010bc <__alt_mem_onchip_mem+0xff7f90bc>
  8012a4:	b00d883a 	mov	r6,r22
  8012a8:	e00b883a 	mov	r5,fp
  8012ac:	da000115 	stw	r8,4(sp)
  8012b0:	0801fd40 	call	801fd4 <memmove>
  8012b4:	80800217 	ldw	r2,8(r16)
  8012b8:	80c00017 	ldw	r3,0(r16)
  8012bc:	da000117 	ldw	r8,4(sp)
  8012c0:	1585c83a 	sub	r2,r2,r22
  8012c4:	1dad883a 	add	r22,r3,r22
  8012c8:	80800215 	stw	r2,8(r16)
  8012cc:	85800015 	stw	r22,0(r16)
  8012d0:	003fbf06 	br	8011d0 <__alt_mem_onchip_mem+0xff7f91d0>
  8012d4:	81000017 	ldw	r4,0(r16)
  8012d8:	9027883a 	mov	r19,r18
  8012dc:	902f883a 	mov	r23,r18
  8012e0:	003f6c06 	br	801094 <__alt_mem_onchip_mem+0xff7f9094>
  8012e4:	900d883a 	mov	r6,r18
  8012e8:	01400284 	movi	r5,10
  8012ec:	e009883a 	mov	r4,fp
  8012f0:	0801da80 	call	801da8 <memchr>
  8012f4:	10003e26 	beq	r2,zero,8013f0 <__sfvwrite_r+0x498>
  8012f8:	10800044 	addi	r2,r2,1
  8012fc:	1727c83a 	sub	r19,r2,fp
  801300:	02000044 	movi	r8,1
  801304:	003f9d06 	br	80117c <__alt_mem_onchip_mem+0xff7f917c>
  801308:	80800517 	ldw	r2,20(r16)
  80130c:	81400417 	ldw	r5,16(r16)
  801310:	81c00017 	ldw	r7,0(r16)
  801314:	10a7883a 	add	r19,r2,r2
  801318:	9885883a 	add	r2,r19,r2
  80131c:	1026d7fa 	srli	r19,r2,31
  801320:	396dc83a 	sub	r22,r7,r5
  801324:	b1000044 	addi	r4,r22,1
  801328:	9885883a 	add	r2,r19,r2
  80132c:	1027d07a 	srai	r19,r2,1
  801330:	2485883a 	add	r2,r4,r18
  801334:	980d883a 	mov	r6,r19
  801338:	9880022e 	bgeu	r19,r2,801344 <__sfvwrite_r+0x3ec>
  80133c:	1027883a 	mov	r19,r2
  801340:	100d883a 	mov	r6,r2
  801344:	18c1000c 	andi	r3,r3,1024
  801348:	18001c26 	beq	r3,zero,8013bc <__sfvwrite_r+0x464>
  80134c:	300b883a 	mov	r5,r6
  801350:	a809883a 	mov	r4,r21
  801354:	080159c0 	call	80159c <_malloc_r>
  801358:	102f883a 	mov	r23,r2
  80135c:	10002926 	beq	r2,zero,801404 <__sfvwrite_r+0x4ac>
  801360:	81400417 	ldw	r5,16(r16)
  801364:	b00d883a 	mov	r6,r22
  801368:	1009883a 	mov	r4,r2
  80136c:	0801e8c0 	call	801e8c <memcpy>
  801370:	8080030b 	ldhu	r2,12(r16)
  801374:	00fedfc4 	movi	r3,-1153
  801378:	10c4703a 	and	r2,r2,r3
  80137c:	10802014 	ori	r2,r2,128
  801380:	8080030d 	sth	r2,12(r16)
  801384:	bd89883a 	add	r4,r23,r22
  801388:	9d8fc83a 	sub	r7,r19,r22
  80138c:	85c00415 	stw	r23,16(r16)
  801390:	84c00515 	stw	r19,20(r16)
  801394:	81000015 	stw	r4,0(r16)
  801398:	9027883a 	mov	r19,r18
  80139c:	81c00215 	stw	r7,8(r16)
  8013a0:	902f883a 	mov	r23,r18
  8013a4:	003f3b06 	br	801094 <__alt_mem_onchip_mem+0xff7f9094>
  8013a8:	800b883a 	mov	r5,r16
  8013ac:	a809883a 	mov	r4,r21
  8013b0:	0802e740 	call	802e74 <_fflush_r>
  8013b4:	103fb926 	beq	r2,zero,80129c <__alt_mem_onchip_mem+0xff7f929c>
  8013b8:	003f6506 	br	801150 <__alt_mem_onchip_mem+0xff7f9150>
  8013bc:	a809883a 	mov	r4,r21
  8013c0:	08022580 	call	802258 <_realloc_r>
  8013c4:	102f883a 	mov	r23,r2
  8013c8:	103fee1e 	bne	r2,zero,801384 <__alt_mem_onchip_mem+0xff7f9384>
  8013cc:	81400417 	ldw	r5,16(r16)
  8013d0:	a809883a 	mov	r4,r21
  8013d4:	08030240 	call	803024 <_free_r>
  8013d8:	8080030b 	ldhu	r2,12(r16)
  8013dc:	00ffdfc4 	movi	r3,-129
  8013e0:	1884703a 	and	r2,r3,r2
  8013e4:	00c00304 	movi	r3,12
  8013e8:	a8c00015 	stw	r3,0(r21)
  8013ec:	003f5906 	br	801154 <__alt_mem_onchip_mem+0xff7f9154>
  8013f0:	94c00044 	addi	r19,r18,1
  8013f4:	02000044 	movi	r8,1
  8013f8:	003f6006 	br	80117c <__alt_mem_onchip_mem+0xff7f917c>
  8013fc:	00bfffc4 	movi	r2,-1
  801400:	003f0306 	br	801010 <__alt_mem_onchip_mem+0xff7f9010>
  801404:	00800304 	movi	r2,12
  801408:	a8800015 	stw	r2,0(r21)
  80140c:	8080030b 	ldhu	r2,12(r16)
  801410:	003f5006 	br	801154 <__alt_mem_onchip_mem+0xff7f9154>

00801414 <_fwalk>:
  801414:	defff704 	addi	sp,sp,-36
  801418:	dd000415 	stw	r20,16(sp)
  80141c:	dfc00815 	stw	ra,32(sp)
  801420:	ddc00715 	stw	r23,28(sp)
  801424:	dd800615 	stw	r22,24(sp)
  801428:	dd400515 	stw	r21,20(sp)
  80142c:	dcc00315 	stw	r19,12(sp)
  801430:	dc800215 	stw	r18,8(sp)
  801434:	dc400115 	stw	r17,4(sp)
  801438:	dc000015 	stw	r16,0(sp)
  80143c:	2500b804 	addi	r20,r4,736
  801440:	a0002326 	beq	r20,zero,8014d0 <_fwalk+0xbc>
  801444:	282b883a 	mov	r21,r5
  801448:	002f883a 	mov	r23,zero
  80144c:	05800044 	movi	r22,1
  801450:	04ffffc4 	movi	r19,-1
  801454:	a4400117 	ldw	r17,4(r20)
  801458:	a4800217 	ldw	r18,8(r20)
  80145c:	8c7fffc4 	addi	r17,r17,-1
  801460:	88000d16 	blt	r17,zero,801498 <_fwalk+0x84>
  801464:	94000304 	addi	r16,r18,12
  801468:	94800384 	addi	r18,r18,14
  80146c:	8080000b 	ldhu	r2,0(r16)
  801470:	8c7fffc4 	addi	r17,r17,-1
  801474:	813ffd04 	addi	r4,r16,-12
  801478:	b080042e 	bgeu	r22,r2,80148c <_fwalk+0x78>
  80147c:	9080000f 	ldh	r2,0(r18)
  801480:	14c00226 	beq	r2,r19,80148c <_fwalk+0x78>
  801484:	a83ee83a 	callr	r21
  801488:	b8aeb03a 	or	r23,r23,r2
  80148c:	84001a04 	addi	r16,r16,104
  801490:	94801a04 	addi	r18,r18,104
  801494:	8cfff51e 	bne	r17,r19,80146c <__alt_mem_onchip_mem+0xff7f946c>
  801498:	a5000017 	ldw	r20,0(r20)
  80149c:	a03fed1e 	bne	r20,zero,801454 <__alt_mem_onchip_mem+0xff7f9454>
  8014a0:	b805883a 	mov	r2,r23
  8014a4:	dfc00817 	ldw	ra,32(sp)
  8014a8:	ddc00717 	ldw	r23,28(sp)
  8014ac:	dd800617 	ldw	r22,24(sp)
  8014b0:	dd400517 	ldw	r21,20(sp)
  8014b4:	dd000417 	ldw	r20,16(sp)
  8014b8:	dcc00317 	ldw	r19,12(sp)
  8014bc:	dc800217 	ldw	r18,8(sp)
  8014c0:	dc400117 	ldw	r17,4(sp)
  8014c4:	dc000017 	ldw	r16,0(sp)
  8014c8:	dec00904 	addi	sp,sp,36
  8014cc:	f800283a 	ret
  8014d0:	002f883a 	mov	r23,zero
  8014d4:	003ff206 	br	8014a0 <__alt_mem_onchip_mem+0xff7f94a0>

008014d8 <_fwalk_reent>:
  8014d8:	defff704 	addi	sp,sp,-36
  8014dc:	dd000415 	stw	r20,16(sp)
  8014e0:	dfc00815 	stw	ra,32(sp)
  8014e4:	ddc00715 	stw	r23,28(sp)
  8014e8:	dd800615 	stw	r22,24(sp)
  8014ec:	dd400515 	stw	r21,20(sp)
  8014f0:	dcc00315 	stw	r19,12(sp)
  8014f4:	dc800215 	stw	r18,8(sp)
  8014f8:	dc400115 	stw	r17,4(sp)
  8014fc:	dc000015 	stw	r16,0(sp)
  801500:	2500b804 	addi	r20,r4,736
  801504:	a0002326 	beq	r20,zero,801594 <_fwalk_reent+0xbc>
  801508:	282b883a 	mov	r21,r5
  80150c:	2027883a 	mov	r19,r4
  801510:	002f883a 	mov	r23,zero
  801514:	05800044 	movi	r22,1
  801518:	04bfffc4 	movi	r18,-1
  80151c:	a4400117 	ldw	r17,4(r20)
  801520:	a4000217 	ldw	r16,8(r20)
  801524:	8c7fffc4 	addi	r17,r17,-1
  801528:	88000c16 	blt	r17,zero,80155c <_fwalk_reent+0x84>
  80152c:	84000304 	addi	r16,r16,12
  801530:	8080000b 	ldhu	r2,0(r16)
  801534:	8c7fffc4 	addi	r17,r17,-1
  801538:	817ffd04 	addi	r5,r16,-12
  80153c:	b080052e 	bgeu	r22,r2,801554 <_fwalk_reent+0x7c>
  801540:	8080008f 	ldh	r2,2(r16)
  801544:	9809883a 	mov	r4,r19
  801548:	14800226 	beq	r2,r18,801554 <_fwalk_reent+0x7c>
  80154c:	a83ee83a 	callr	r21
  801550:	b8aeb03a 	or	r23,r23,r2
  801554:	84001a04 	addi	r16,r16,104
  801558:	8cbff51e 	bne	r17,r18,801530 <__alt_mem_onchip_mem+0xff7f9530>
  80155c:	a5000017 	ldw	r20,0(r20)
  801560:	a03fee1e 	bne	r20,zero,80151c <__alt_mem_onchip_mem+0xff7f951c>
  801564:	b805883a 	mov	r2,r23
  801568:	dfc00817 	ldw	ra,32(sp)
  80156c:	ddc00717 	ldw	r23,28(sp)
  801570:	dd800617 	ldw	r22,24(sp)
  801574:	dd400517 	ldw	r21,20(sp)
  801578:	dd000417 	ldw	r20,16(sp)
  80157c:	dcc00317 	ldw	r19,12(sp)
  801580:	dc800217 	ldw	r18,8(sp)
  801584:	dc400117 	ldw	r17,4(sp)
  801588:	dc000017 	ldw	r16,0(sp)
  80158c:	dec00904 	addi	sp,sp,36
  801590:	f800283a 	ret
  801594:	002f883a 	mov	r23,zero
  801598:	003ff206 	br	801564 <__alt_mem_onchip_mem+0xff7f9564>

0080159c <_malloc_r>:
  80159c:	defff504 	addi	sp,sp,-44
  8015a0:	dc800315 	stw	r18,12(sp)
  8015a4:	dfc00a15 	stw	ra,40(sp)
  8015a8:	df000915 	stw	fp,36(sp)
  8015ac:	ddc00815 	stw	r23,32(sp)
  8015b0:	dd800715 	stw	r22,28(sp)
  8015b4:	dd400615 	stw	r21,24(sp)
  8015b8:	dd000515 	stw	r20,20(sp)
  8015bc:	dcc00415 	stw	r19,16(sp)
  8015c0:	dc400215 	stw	r17,8(sp)
  8015c4:	dc000115 	stw	r16,4(sp)
  8015c8:	288002c4 	addi	r2,r5,11
  8015cc:	00c00584 	movi	r3,22
  8015d0:	2025883a 	mov	r18,r4
  8015d4:	18807f2e 	bgeu	r3,r2,8017d4 <_malloc_r+0x238>
  8015d8:	047ffe04 	movi	r17,-8
  8015dc:	1462703a 	and	r17,r2,r17
  8015e0:	8800a316 	blt	r17,zero,801870 <_malloc_r+0x2d4>
  8015e4:	8940a236 	bltu	r17,r5,801870 <_malloc_r+0x2d4>
  8015e8:	0803d900 	call	803d90 <__malloc_lock>
  8015ec:	00807dc4 	movi	r2,503
  8015f0:	1441e92e 	bgeu	r2,r17,801d98 <_malloc_r+0x7fc>
  8015f4:	8804d27a 	srli	r2,r17,9
  8015f8:	1000a126 	beq	r2,zero,801880 <_malloc_r+0x2e4>
  8015fc:	00c00104 	movi	r3,4
  801600:	18811e36 	bltu	r3,r2,801a7c <_malloc_r+0x4e0>
  801604:	8804d1ba 	srli	r2,r17,6
  801608:	12000e44 	addi	r8,r2,57
  80160c:	11c00e04 	addi	r7,r2,56
  801610:	4209883a 	add	r4,r8,r8
  801614:	04c02034 	movhi	r19,128
  801618:	2109883a 	add	r4,r4,r4
  80161c:	9cdfd804 	addi	r19,r19,32608
  801620:	2109883a 	add	r4,r4,r4
  801624:	9909883a 	add	r4,r19,r4
  801628:	24000117 	ldw	r16,4(r4)
  80162c:	213ffe04 	addi	r4,r4,-8
  801630:	24009726 	beq	r4,r16,801890 <_malloc_r+0x2f4>
  801634:	80800117 	ldw	r2,4(r16)
  801638:	01bfff04 	movi	r6,-4
  80163c:	014003c4 	movi	r5,15
  801640:	1184703a 	and	r2,r2,r6
  801644:	1447c83a 	sub	r3,r2,r17
  801648:	28c00716 	blt	r5,r3,801668 <_malloc_r+0xcc>
  80164c:	1800920e 	bge	r3,zero,801898 <_malloc_r+0x2fc>
  801650:	84000317 	ldw	r16,12(r16)
  801654:	24008e26 	beq	r4,r16,801890 <_malloc_r+0x2f4>
  801658:	80800117 	ldw	r2,4(r16)
  80165c:	1184703a 	and	r2,r2,r6
  801660:	1447c83a 	sub	r3,r2,r17
  801664:	28fff90e 	bge	r5,r3,80164c <__alt_mem_onchip_mem+0xff7f964c>
  801668:	3809883a 	mov	r4,r7
  80166c:	01802034 	movhi	r6,128
  801670:	9c000417 	ldw	r16,16(r19)
  801674:	319fd804 	addi	r6,r6,32608
  801678:	32000204 	addi	r8,r6,8
  80167c:	82013426 	beq	r16,r8,801b50 <_malloc_r+0x5b4>
  801680:	80c00117 	ldw	r3,4(r16)
  801684:	00bfff04 	movi	r2,-4
  801688:	188e703a 	and	r7,r3,r2
  80168c:	3c45c83a 	sub	r2,r7,r17
  801690:	00c003c4 	movi	r3,15
  801694:	18811f16 	blt	r3,r2,801b14 <_malloc_r+0x578>
  801698:	32000515 	stw	r8,20(r6)
  80169c:	32000415 	stw	r8,16(r6)
  8016a0:	10007f0e 	bge	r2,zero,8018a0 <_malloc_r+0x304>
  8016a4:	00807fc4 	movi	r2,511
  8016a8:	11c0fd36 	bltu	r2,r7,801aa0 <_malloc_r+0x504>
  8016ac:	3806d0fa 	srli	r3,r7,3
  8016b0:	01c00044 	movi	r7,1
  8016b4:	30800117 	ldw	r2,4(r6)
  8016b8:	19400044 	addi	r5,r3,1
  8016bc:	294b883a 	add	r5,r5,r5
  8016c0:	1807d0ba 	srai	r3,r3,2
  8016c4:	294b883a 	add	r5,r5,r5
  8016c8:	294b883a 	add	r5,r5,r5
  8016cc:	298b883a 	add	r5,r5,r6
  8016d0:	38c6983a 	sll	r3,r7,r3
  8016d4:	29c00017 	ldw	r7,0(r5)
  8016d8:	2a7ffe04 	addi	r9,r5,-8
  8016dc:	1886b03a 	or	r3,r3,r2
  8016e0:	82400315 	stw	r9,12(r16)
  8016e4:	81c00215 	stw	r7,8(r16)
  8016e8:	30c00115 	stw	r3,4(r6)
  8016ec:	2c000015 	stw	r16,0(r5)
  8016f0:	3c000315 	stw	r16,12(r7)
  8016f4:	2005d0ba 	srai	r2,r4,2
  8016f8:	01400044 	movi	r5,1
  8016fc:	288a983a 	sll	r5,r5,r2
  801700:	19406f36 	bltu	r3,r5,8018c0 <_malloc_r+0x324>
  801704:	28c4703a 	and	r2,r5,r3
  801708:	10000a1e 	bne	r2,zero,801734 <_malloc_r+0x198>
  80170c:	00bfff04 	movi	r2,-4
  801710:	294b883a 	add	r5,r5,r5
  801714:	2088703a 	and	r4,r4,r2
  801718:	28c4703a 	and	r2,r5,r3
  80171c:	21000104 	addi	r4,r4,4
  801720:	1000041e 	bne	r2,zero,801734 <_malloc_r+0x198>
  801724:	294b883a 	add	r5,r5,r5
  801728:	28c4703a 	and	r2,r5,r3
  80172c:	21000104 	addi	r4,r4,4
  801730:	103ffc26 	beq	r2,zero,801724 <__alt_mem_onchip_mem+0xff7f9724>
  801734:	02bfff04 	movi	r10,-4
  801738:	024003c4 	movi	r9,15
  80173c:	21800044 	addi	r6,r4,1
  801740:	318d883a 	add	r6,r6,r6
  801744:	318d883a 	add	r6,r6,r6
  801748:	318d883a 	add	r6,r6,r6
  80174c:	998d883a 	add	r6,r19,r6
  801750:	333ffe04 	addi	r12,r6,-8
  801754:	2017883a 	mov	r11,r4
  801758:	31800104 	addi	r6,r6,4
  80175c:	34000017 	ldw	r16,0(r6)
  801760:	31fffd04 	addi	r7,r6,-12
  801764:	81c0041e 	bne	r16,r7,801778 <_malloc_r+0x1dc>
  801768:	0000fb06 	br	801b58 <_malloc_r+0x5bc>
  80176c:	1801030e 	bge	r3,zero,801b7c <_malloc_r+0x5e0>
  801770:	84000317 	ldw	r16,12(r16)
  801774:	81c0f826 	beq	r16,r7,801b58 <_malloc_r+0x5bc>
  801778:	80800117 	ldw	r2,4(r16)
  80177c:	1284703a 	and	r2,r2,r10
  801780:	1447c83a 	sub	r3,r2,r17
  801784:	48fff90e 	bge	r9,r3,80176c <__alt_mem_onchip_mem+0xff7f976c>
  801788:	80800317 	ldw	r2,12(r16)
  80178c:	81000217 	ldw	r4,8(r16)
  801790:	89400054 	ori	r5,r17,1
  801794:	81400115 	stw	r5,4(r16)
  801798:	20800315 	stw	r2,12(r4)
  80179c:	11000215 	stw	r4,8(r2)
  8017a0:	8463883a 	add	r17,r16,r17
  8017a4:	9c400515 	stw	r17,20(r19)
  8017a8:	9c400415 	stw	r17,16(r19)
  8017ac:	18800054 	ori	r2,r3,1
  8017b0:	88800115 	stw	r2,4(r17)
  8017b4:	8a000315 	stw	r8,12(r17)
  8017b8:	8a000215 	stw	r8,8(r17)
  8017bc:	88e3883a 	add	r17,r17,r3
  8017c0:	88c00015 	stw	r3,0(r17)
  8017c4:	9009883a 	mov	r4,r18
  8017c8:	0803db40 	call	803db4 <__malloc_unlock>
  8017cc:	80800204 	addi	r2,r16,8
  8017d0:	00001b06 	br	801840 <_malloc_r+0x2a4>
  8017d4:	04400404 	movi	r17,16
  8017d8:	89402536 	bltu	r17,r5,801870 <_malloc_r+0x2d4>
  8017dc:	0803d900 	call	803d90 <__malloc_lock>
  8017e0:	00800184 	movi	r2,6
  8017e4:	01000084 	movi	r4,2
  8017e8:	04c02034 	movhi	r19,128
  8017ec:	1085883a 	add	r2,r2,r2
  8017f0:	9cdfd804 	addi	r19,r19,32608
  8017f4:	1085883a 	add	r2,r2,r2
  8017f8:	9885883a 	add	r2,r19,r2
  8017fc:	14000117 	ldw	r16,4(r2)
  801800:	10fffe04 	addi	r3,r2,-8
  801804:	80c0d926 	beq	r16,r3,801b6c <_malloc_r+0x5d0>
  801808:	80c00117 	ldw	r3,4(r16)
  80180c:	81000317 	ldw	r4,12(r16)
  801810:	00bfff04 	movi	r2,-4
  801814:	1884703a 	and	r2,r3,r2
  801818:	81400217 	ldw	r5,8(r16)
  80181c:	8085883a 	add	r2,r16,r2
  801820:	10c00117 	ldw	r3,4(r2)
  801824:	29000315 	stw	r4,12(r5)
  801828:	21400215 	stw	r5,8(r4)
  80182c:	18c00054 	ori	r3,r3,1
  801830:	10c00115 	stw	r3,4(r2)
  801834:	9009883a 	mov	r4,r18
  801838:	0803db40 	call	803db4 <__malloc_unlock>
  80183c:	80800204 	addi	r2,r16,8
  801840:	dfc00a17 	ldw	ra,40(sp)
  801844:	df000917 	ldw	fp,36(sp)
  801848:	ddc00817 	ldw	r23,32(sp)
  80184c:	dd800717 	ldw	r22,28(sp)
  801850:	dd400617 	ldw	r21,24(sp)
  801854:	dd000517 	ldw	r20,20(sp)
  801858:	dcc00417 	ldw	r19,16(sp)
  80185c:	dc800317 	ldw	r18,12(sp)
  801860:	dc400217 	ldw	r17,8(sp)
  801864:	dc000117 	ldw	r16,4(sp)
  801868:	dec00b04 	addi	sp,sp,44
  80186c:	f800283a 	ret
  801870:	00800304 	movi	r2,12
  801874:	90800015 	stw	r2,0(r18)
  801878:	0005883a 	mov	r2,zero
  80187c:	003ff006 	br	801840 <__alt_mem_onchip_mem+0xff7f9840>
  801880:	01002004 	movi	r4,128
  801884:	02001004 	movi	r8,64
  801888:	01c00fc4 	movi	r7,63
  80188c:	003f6106 	br	801614 <__alt_mem_onchip_mem+0xff7f9614>
  801890:	4009883a 	mov	r4,r8
  801894:	003f7506 	br	80166c <__alt_mem_onchip_mem+0xff7f966c>
  801898:	81000317 	ldw	r4,12(r16)
  80189c:	003fde06 	br	801818 <__alt_mem_onchip_mem+0xff7f9818>
  8018a0:	81c5883a 	add	r2,r16,r7
  8018a4:	11400117 	ldw	r5,4(r2)
  8018a8:	9009883a 	mov	r4,r18
  8018ac:	29400054 	ori	r5,r5,1
  8018b0:	11400115 	stw	r5,4(r2)
  8018b4:	0803db40 	call	803db4 <__malloc_unlock>
  8018b8:	80800204 	addi	r2,r16,8
  8018bc:	003fe006 	br	801840 <__alt_mem_onchip_mem+0xff7f9840>
  8018c0:	9c000217 	ldw	r16,8(r19)
  8018c4:	00bfff04 	movi	r2,-4
  8018c8:	85800117 	ldw	r22,4(r16)
  8018cc:	b0ac703a 	and	r22,r22,r2
  8018d0:	b4400336 	bltu	r22,r17,8018e0 <_malloc_r+0x344>
  8018d4:	b445c83a 	sub	r2,r22,r17
  8018d8:	00c003c4 	movi	r3,15
  8018dc:	18805d16 	blt	r3,r2,801a54 <_malloc_r+0x4b8>
  8018e0:	05c02074 	movhi	r23,129
  8018e4:	00802074 	movhi	r2,129
  8018e8:	10acfd04 	addi	r2,r2,-19468
  8018ec:	bde5d704 	addi	r23,r23,-26788
  8018f0:	15400017 	ldw	r21,0(r2)
  8018f4:	b8c00017 	ldw	r3,0(r23)
  8018f8:	00bfffc4 	movi	r2,-1
  8018fc:	858d883a 	add	r6,r16,r22
  801900:	8d6b883a 	add	r21,r17,r21
  801904:	1880ea26 	beq	r3,r2,801cb0 <_malloc_r+0x714>
  801908:	ad4403c4 	addi	r21,r21,4111
  80190c:	00bc0004 	movi	r2,-4096
  801910:	a8aa703a 	and	r21,r21,r2
  801914:	a80b883a 	mov	r5,r21
  801918:	9009883a 	mov	r4,r18
  80191c:	d9800015 	stw	r6,0(sp)
  801920:	08027bc0 	call	8027bc <_sbrk_r>
  801924:	1029883a 	mov	r20,r2
  801928:	00bfffc4 	movi	r2,-1
  80192c:	d9800017 	ldw	r6,0(sp)
  801930:	a080e826 	beq	r20,r2,801cd4 <_malloc_r+0x738>
  801934:	a180a636 	bltu	r20,r6,801bd0 <_malloc_r+0x634>
  801938:	07002074 	movhi	fp,129
  80193c:	e72d0604 	addi	fp,fp,-19432
  801940:	e0800017 	ldw	r2,0(fp)
  801944:	a887883a 	add	r3,r21,r2
  801948:	e0c00015 	stw	r3,0(fp)
  80194c:	3500e626 	beq	r6,r20,801ce8 <_malloc_r+0x74c>
  801950:	b9000017 	ldw	r4,0(r23)
  801954:	00bfffc4 	movi	r2,-1
  801958:	2080ee26 	beq	r4,r2,801d14 <_malloc_r+0x778>
  80195c:	a185c83a 	sub	r2,r20,r6
  801960:	10c5883a 	add	r2,r2,r3
  801964:	e0800015 	stw	r2,0(fp)
  801968:	a0c001cc 	andi	r3,r20,7
  80196c:	1800bc26 	beq	r3,zero,801c60 <_malloc_r+0x6c4>
  801970:	a0e9c83a 	sub	r20,r20,r3
  801974:	00840204 	movi	r2,4104
  801978:	a5000204 	addi	r20,r20,8
  80197c:	10c7c83a 	sub	r3,r2,r3
  801980:	a545883a 	add	r2,r20,r21
  801984:	1083ffcc 	andi	r2,r2,4095
  801988:	18abc83a 	sub	r21,r3,r2
  80198c:	a80b883a 	mov	r5,r21
  801990:	9009883a 	mov	r4,r18
  801994:	08027bc0 	call	8027bc <_sbrk_r>
  801998:	00ffffc4 	movi	r3,-1
  80199c:	10c0e126 	beq	r2,r3,801d24 <_malloc_r+0x788>
  8019a0:	1505c83a 	sub	r2,r2,r20
  8019a4:	1545883a 	add	r2,r2,r21
  8019a8:	10800054 	ori	r2,r2,1
  8019ac:	e0c00017 	ldw	r3,0(fp)
  8019b0:	9d000215 	stw	r20,8(r19)
  8019b4:	a0800115 	stw	r2,4(r20)
  8019b8:	a8c7883a 	add	r3,r21,r3
  8019bc:	e0c00015 	stw	r3,0(fp)
  8019c0:	84c00e26 	beq	r16,r19,8019fc <_malloc_r+0x460>
  8019c4:	018003c4 	movi	r6,15
  8019c8:	3580a72e 	bgeu	r6,r22,801c68 <_malloc_r+0x6cc>
  8019cc:	81400117 	ldw	r5,4(r16)
  8019d0:	013ffe04 	movi	r4,-8
  8019d4:	b0bffd04 	addi	r2,r22,-12
  8019d8:	1104703a 	and	r2,r2,r4
  8019dc:	2900004c 	andi	r4,r5,1
  8019e0:	2088b03a 	or	r4,r4,r2
  8019e4:	81000115 	stw	r4,4(r16)
  8019e8:	01400144 	movi	r5,5
  8019ec:	8089883a 	add	r4,r16,r2
  8019f0:	21400115 	stw	r5,4(r4)
  8019f4:	21400215 	stw	r5,8(r4)
  8019f8:	3080cd36 	bltu	r6,r2,801d30 <_malloc_r+0x794>
  8019fc:	00802074 	movhi	r2,129
  801a00:	10acfc04 	addi	r2,r2,-19472
  801a04:	11000017 	ldw	r4,0(r2)
  801a08:	20c0012e 	bgeu	r4,r3,801a10 <_malloc_r+0x474>
  801a0c:	10c00015 	stw	r3,0(r2)
  801a10:	00802074 	movhi	r2,129
  801a14:	10acfb04 	addi	r2,r2,-19476
  801a18:	11000017 	ldw	r4,0(r2)
  801a1c:	9c000217 	ldw	r16,8(r19)
  801a20:	20c0012e 	bgeu	r4,r3,801a28 <_malloc_r+0x48c>
  801a24:	10c00015 	stw	r3,0(r2)
  801a28:	80c00117 	ldw	r3,4(r16)
  801a2c:	00bfff04 	movi	r2,-4
  801a30:	1886703a 	and	r3,r3,r2
  801a34:	1c45c83a 	sub	r2,r3,r17
  801a38:	1c400236 	bltu	r3,r17,801a44 <_malloc_r+0x4a8>
  801a3c:	00c003c4 	movi	r3,15
  801a40:	18800416 	blt	r3,r2,801a54 <_malloc_r+0x4b8>
  801a44:	9009883a 	mov	r4,r18
  801a48:	0803db40 	call	803db4 <__malloc_unlock>
  801a4c:	0005883a 	mov	r2,zero
  801a50:	003f7b06 	br	801840 <__alt_mem_onchip_mem+0xff7f9840>
  801a54:	88c00054 	ori	r3,r17,1
  801a58:	80c00115 	stw	r3,4(r16)
  801a5c:	8463883a 	add	r17,r16,r17
  801a60:	10800054 	ori	r2,r2,1
  801a64:	9c400215 	stw	r17,8(r19)
  801a68:	88800115 	stw	r2,4(r17)
  801a6c:	9009883a 	mov	r4,r18
  801a70:	0803db40 	call	803db4 <__malloc_unlock>
  801a74:	80800204 	addi	r2,r16,8
  801a78:	003f7106 	br	801840 <__alt_mem_onchip_mem+0xff7f9840>
  801a7c:	00c00504 	movi	r3,20
  801a80:	18804a2e 	bgeu	r3,r2,801bac <_malloc_r+0x610>
  801a84:	00c01504 	movi	r3,84
  801a88:	18806e36 	bltu	r3,r2,801c44 <_malloc_r+0x6a8>
  801a8c:	8804d33a 	srli	r2,r17,12
  801a90:	12001bc4 	addi	r8,r2,111
  801a94:	11c01b84 	addi	r7,r2,110
  801a98:	4209883a 	add	r4,r8,r8
  801a9c:	003edd06 	br	801614 <__alt_mem_onchip_mem+0xff7f9614>
  801aa0:	3804d27a 	srli	r2,r7,9
  801aa4:	00c00104 	movi	r3,4
  801aa8:	1880442e 	bgeu	r3,r2,801bbc <_malloc_r+0x620>
  801aac:	00c00504 	movi	r3,20
  801ab0:	18808136 	bltu	r3,r2,801cb8 <_malloc_r+0x71c>
  801ab4:	11401704 	addi	r5,r2,92
  801ab8:	10c016c4 	addi	r3,r2,91
  801abc:	294b883a 	add	r5,r5,r5
  801ac0:	294b883a 	add	r5,r5,r5
  801ac4:	294b883a 	add	r5,r5,r5
  801ac8:	994b883a 	add	r5,r19,r5
  801acc:	28800017 	ldw	r2,0(r5)
  801ad0:	01802034 	movhi	r6,128
  801ad4:	297ffe04 	addi	r5,r5,-8
  801ad8:	319fd804 	addi	r6,r6,32608
  801adc:	28806526 	beq	r5,r2,801c74 <_malloc_r+0x6d8>
  801ae0:	01bfff04 	movi	r6,-4
  801ae4:	10c00117 	ldw	r3,4(r2)
  801ae8:	1986703a 	and	r3,r3,r6
  801aec:	38c0022e 	bgeu	r7,r3,801af8 <_malloc_r+0x55c>
  801af0:	10800217 	ldw	r2,8(r2)
  801af4:	28bffb1e 	bne	r5,r2,801ae4 <__alt_mem_onchip_mem+0xff7f9ae4>
  801af8:	11400317 	ldw	r5,12(r2)
  801afc:	98c00117 	ldw	r3,4(r19)
  801b00:	81400315 	stw	r5,12(r16)
  801b04:	80800215 	stw	r2,8(r16)
  801b08:	2c000215 	stw	r16,8(r5)
  801b0c:	14000315 	stw	r16,12(r2)
  801b10:	003ef806 	br	8016f4 <__alt_mem_onchip_mem+0xff7f96f4>
  801b14:	88c00054 	ori	r3,r17,1
  801b18:	80c00115 	stw	r3,4(r16)
  801b1c:	8463883a 	add	r17,r16,r17
  801b20:	34400515 	stw	r17,20(r6)
  801b24:	34400415 	stw	r17,16(r6)
  801b28:	10c00054 	ori	r3,r2,1
  801b2c:	8a000315 	stw	r8,12(r17)
  801b30:	8a000215 	stw	r8,8(r17)
  801b34:	88c00115 	stw	r3,4(r17)
  801b38:	88a3883a 	add	r17,r17,r2
  801b3c:	88800015 	stw	r2,0(r17)
  801b40:	9009883a 	mov	r4,r18
  801b44:	0803db40 	call	803db4 <__malloc_unlock>
  801b48:	80800204 	addi	r2,r16,8
  801b4c:	003f3c06 	br	801840 <__alt_mem_onchip_mem+0xff7f9840>
  801b50:	30c00117 	ldw	r3,4(r6)
  801b54:	003ee706 	br	8016f4 <__alt_mem_onchip_mem+0xff7f96f4>
  801b58:	5ac00044 	addi	r11,r11,1
  801b5c:	588000cc 	andi	r2,r11,3
  801b60:	31800204 	addi	r6,r6,8
  801b64:	103efd1e 	bne	r2,zero,80175c <__alt_mem_onchip_mem+0xff7f975c>
  801b68:	00002406 	br	801bfc <_malloc_r+0x660>
  801b6c:	14000317 	ldw	r16,12(r2)
  801b70:	143f251e 	bne	r2,r16,801808 <__alt_mem_onchip_mem+0xff7f9808>
  801b74:	21000084 	addi	r4,r4,2
  801b78:	003ebc06 	br	80166c <__alt_mem_onchip_mem+0xff7f966c>
  801b7c:	8085883a 	add	r2,r16,r2
  801b80:	10c00117 	ldw	r3,4(r2)
  801b84:	81000317 	ldw	r4,12(r16)
  801b88:	81400217 	ldw	r5,8(r16)
  801b8c:	18c00054 	ori	r3,r3,1
  801b90:	10c00115 	stw	r3,4(r2)
  801b94:	29000315 	stw	r4,12(r5)
  801b98:	21400215 	stw	r5,8(r4)
  801b9c:	9009883a 	mov	r4,r18
  801ba0:	0803db40 	call	803db4 <__malloc_unlock>
  801ba4:	80800204 	addi	r2,r16,8
  801ba8:	003f2506 	br	801840 <__alt_mem_onchip_mem+0xff7f9840>
  801bac:	12001704 	addi	r8,r2,92
  801bb0:	11c016c4 	addi	r7,r2,91
  801bb4:	4209883a 	add	r4,r8,r8
  801bb8:	003e9606 	br	801614 <__alt_mem_onchip_mem+0xff7f9614>
  801bbc:	3804d1ba 	srli	r2,r7,6
  801bc0:	11400e44 	addi	r5,r2,57
  801bc4:	10c00e04 	addi	r3,r2,56
  801bc8:	294b883a 	add	r5,r5,r5
  801bcc:	003fbc06 	br	801ac0 <__alt_mem_onchip_mem+0xff7f9ac0>
  801bd0:	84ff5926 	beq	r16,r19,801938 <__alt_mem_onchip_mem+0xff7f9938>
  801bd4:	00802034 	movhi	r2,128
  801bd8:	109fd804 	addi	r2,r2,32608
  801bdc:	14000217 	ldw	r16,8(r2)
  801be0:	00bfff04 	movi	r2,-4
  801be4:	80c00117 	ldw	r3,4(r16)
  801be8:	1886703a 	and	r3,r3,r2
  801bec:	003f9106 	br	801a34 <__alt_mem_onchip_mem+0xff7f9a34>
  801bf0:	60800217 	ldw	r2,8(r12)
  801bf4:	213fffc4 	addi	r4,r4,-1
  801bf8:	1300651e 	bne	r2,r12,801d90 <_malloc_r+0x7f4>
  801bfc:	208000cc 	andi	r2,r4,3
  801c00:	633ffe04 	addi	r12,r12,-8
  801c04:	103ffa1e 	bne	r2,zero,801bf0 <__alt_mem_onchip_mem+0xff7f9bf0>
  801c08:	98800117 	ldw	r2,4(r19)
  801c0c:	0146303a 	nor	r3,zero,r5
  801c10:	1884703a 	and	r2,r3,r2
  801c14:	98800115 	stw	r2,4(r19)
  801c18:	294b883a 	add	r5,r5,r5
  801c1c:	117f2836 	bltu	r2,r5,8018c0 <__alt_mem_onchip_mem+0xff7f98c0>
  801c20:	283f2726 	beq	r5,zero,8018c0 <__alt_mem_onchip_mem+0xff7f98c0>
  801c24:	2886703a 	and	r3,r5,r2
  801c28:	5809883a 	mov	r4,r11
  801c2c:	183ec31e 	bne	r3,zero,80173c <__alt_mem_onchip_mem+0xff7f973c>
  801c30:	294b883a 	add	r5,r5,r5
  801c34:	2886703a 	and	r3,r5,r2
  801c38:	21000104 	addi	r4,r4,4
  801c3c:	183ffc26 	beq	r3,zero,801c30 <__alt_mem_onchip_mem+0xff7f9c30>
  801c40:	003ebe06 	br	80173c <__alt_mem_onchip_mem+0xff7f973c>
  801c44:	00c05504 	movi	r3,340
  801c48:	18801236 	bltu	r3,r2,801c94 <_malloc_r+0x6f8>
  801c4c:	8804d3fa 	srli	r2,r17,15
  801c50:	12001e04 	addi	r8,r2,120
  801c54:	11c01dc4 	addi	r7,r2,119
  801c58:	4209883a 	add	r4,r8,r8
  801c5c:	003e6d06 	br	801614 <__alt_mem_onchip_mem+0xff7f9614>
  801c60:	00c40004 	movi	r3,4096
  801c64:	003f4606 	br	801980 <__alt_mem_onchip_mem+0xff7f9980>
  801c68:	00800044 	movi	r2,1
  801c6c:	a0800115 	stw	r2,4(r20)
  801c70:	003f7406 	br	801a44 <__alt_mem_onchip_mem+0xff7f9a44>
  801c74:	1805d0ba 	srai	r2,r3,2
  801c78:	01c00044 	movi	r7,1
  801c7c:	30c00117 	ldw	r3,4(r6)
  801c80:	388e983a 	sll	r7,r7,r2
  801c84:	2805883a 	mov	r2,r5
  801c88:	38c6b03a 	or	r3,r7,r3
  801c8c:	30c00115 	stw	r3,4(r6)
  801c90:	003f9b06 	br	801b00 <__alt_mem_onchip_mem+0xff7f9b00>
  801c94:	00c15504 	movi	r3,1364
  801c98:	18801a36 	bltu	r3,r2,801d04 <_malloc_r+0x768>
  801c9c:	8804d4ba 	srli	r2,r17,18
  801ca0:	12001f44 	addi	r8,r2,125
  801ca4:	11c01f04 	addi	r7,r2,124
  801ca8:	4209883a 	add	r4,r8,r8
  801cac:	003e5906 	br	801614 <__alt_mem_onchip_mem+0xff7f9614>
  801cb0:	ad400404 	addi	r21,r21,16
  801cb4:	003f1706 	br	801914 <__alt_mem_onchip_mem+0xff7f9914>
  801cb8:	00c01504 	movi	r3,84
  801cbc:	18802336 	bltu	r3,r2,801d4c <_malloc_r+0x7b0>
  801cc0:	3804d33a 	srli	r2,r7,12
  801cc4:	11401bc4 	addi	r5,r2,111
  801cc8:	10c01b84 	addi	r3,r2,110
  801ccc:	294b883a 	add	r5,r5,r5
  801cd0:	003f7b06 	br	801ac0 <__alt_mem_onchip_mem+0xff7f9ac0>
  801cd4:	9c000217 	ldw	r16,8(r19)
  801cd8:	00bfff04 	movi	r2,-4
  801cdc:	80c00117 	ldw	r3,4(r16)
  801ce0:	1886703a 	and	r3,r3,r2
  801ce4:	003f5306 	br	801a34 <__alt_mem_onchip_mem+0xff7f9a34>
  801ce8:	3083ffcc 	andi	r2,r6,4095
  801cec:	103f181e 	bne	r2,zero,801950 <__alt_mem_onchip_mem+0xff7f9950>
  801cf0:	99000217 	ldw	r4,8(r19)
  801cf4:	b545883a 	add	r2,r22,r21
  801cf8:	10800054 	ori	r2,r2,1
  801cfc:	20800115 	stw	r2,4(r4)
  801d00:	003f3e06 	br	8019fc <__alt_mem_onchip_mem+0xff7f99fc>
  801d04:	01003f84 	movi	r4,254
  801d08:	02001fc4 	movi	r8,127
  801d0c:	01c01f84 	movi	r7,126
  801d10:	003e4006 	br	801614 <__alt_mem_onchip_mem+0xff7f9614>
  801d14:	00802074 	movhi	r2,129
  801d18:	10a5d704 	addi	r2,r2,-26788
  801d1c:	15000015 	stw	r20,0(r2)
  801d20:	003f1106 	br	801968 <__alt_mem_onchip_mem+0xff7f9968>
  801d24:	00800044 	movi	r2,1
  801d28:	002b883a 	mov	r21,zero
  801d2c:	003f1f06 	br	8019ac <__alt_mem_onchip_mem+0xff7f99ac>
  801d30:	81400204 	addi	r5,r16,8
  801d34:	9009883a 	mov	r4,r18
  801d38:	08030240 	call	803024 <_free_r>
  801d3c:	00802074 	movhi	r2,129
  801d40:	10ad0604 	addi	r2,r2,-19432
  801d44:	10c00017 	ldw	r3,0(r2)
  801d48:	003f2c06 	br	8019fc <__alt_mem_onchip_mem+0xff7f99fc>
  801d4c:	00c05504 	movi	r3,340
  801d50:	18800536 	bltu	r3,r2,801d68 <_malloc_r+0x7cc>
  801d54:	3804d3fa 	srli	r2,r7,15
  801d58:	11401e04 	addi	r5,r2,120
  801d5c:	10c01dc4 	addi	r3,r2,119
  801d60:	294b883a 	add	r5,r5,r5
  801d64:	003f5606 	br	801ac0 <__alt_mem_onchip_mem+0xff7f9ac0>
  801d68:	00c15504 	movi	r3,1364
  801d6c:	18800536 	bltu	r3,r2,801d84 <_malloc_r+0x7e8>
  801d70:	3804d4ba 	srli	r2,r7,18
  801d74:	11401f44 	addi	r5,r2,125
  801d78:	10c01f04 	addi	r3,r2,124
  801d7c:	294b883a 	add	r5,r5,r5
  801d80:	003f4f06 	br	801ac0 <__alt_mem_onchip_mem+0xff7f9ac0>
  801d84:	01403f84 	movi	r5,254
  801d88:	00c01f84 	movi	r3,126
  801d8c:	003f4c06 	br	801ac0 <__alt_mem_onchip_mem+0xff7f9ac0>
  801d90:	98800117 	ldw	r2,4(r19)
  801d94:	003fa006 	br	801c18 <__alt_mem_onchip_mem+0xff7f9c18>
  801d98:	8808d0fa 	srli	r4,r17,3
  801d9c:	20800044 	addi	r2,r4,1
  801da0:	1085883a 	add	r2,r2,r2
  801da4:	003e9006 	br	8017e8 <__alt_mem_onchip_mem+0xff7f97e8>

00801da8 <memchr>:
  801da8:	208000cc 	andi	r2,r4,3
  801dac:	280f883a 	mov	r7,r5
  801db0:	10003426 	beq	r2,zero,801e84 <memchr+0xdc>
  801db4:	30bfffc4 	addi	r2,r6,-1
  801db8:	30001a26 	beq	r6,zero,801e24 <memchr+0x7c>
  801dbc:	20c00003 	ldbu	r3,0(r4)
  801dc0:	29803fcc 	andi	r6,r5,255
  801dc4:	30c0051e 	bne	r6,r3,801ddc <memchr+0x34>
  801dc8:	00001806 	br	801e2c <memchr+0x84>
  801dcc:	10001526 	beq	r2,zero,801e24 <memchr+0x7c>
  801dd0:	20c00003 	ldbu	r3,0(r4)
  801dd4:	10bfffc4 	addi	r2,r2,-1
  801dd8:	30c01426 	beq	r6,r3,801e2c <memchr+0x84>
  801ddc:	21000044 	addi	r4,r4,1
  801de0:	20c000cc 	andi	r3,r4,3
  801de4:	183ff91e 	bne	r3,zero,801dcc <__alt_mem_onchip_mem+0xff7f9dcc>
  801de8:	020000c4 	movi	r8,3
  801dec:	40801136 	bltu	r8,r2,801e34 <memchr+0x8c>
  801df0:	10000c26 	beq	r2,zero,801e24 <memchr+0x7c>
  801df4:	20c00003 	ldbu	r3,0(r4)
  801df8:	29403fcc 	andi	r5,r5,255
  801dfc:	28c00b26 	beq	r5,r3,801e2c <memchr+0x84>
  801e00:	20c00044 	addi	r3,r4,1
  801e04:	39803fcc 	andi	r6,r7,255
  801e08:	2089883a 	add	r4,r4,r2
  801e0c:	00000306 	br	801e1c <memchr+0x74>
  801e10:	18c00044 	addi	r3,r3,1
  801e14:	197fffc3 	ldbu	r5,-1(r3)
  801e18:	31400526 	beq	r6,r5,801e30 <memchr+0x88>
  801e1c:	1805883a 	mov	r2,r3
  801e20:	20fffb1e 	bne	r4,r3,801e10 <__alt_mem_onchip_mem+0xff7f9e10>
  801e24:	0005883a 	mov	r2,zero
  801e28:	f800283a 	ret
  801e2c:	2005883a 	mov	r2,r4
  801e30:	f800283a 	ret
  801e34:	28c03fcc 	andi	r3,r5,255
  801e38:	1812923a 	slli	r9,r3,8
  801e3c:	02ffbff4 	movhi	r11,65279
  801e40:	02a02074 	movhi	r10,32897
  801e44:	48d2b03a 	or	r9,r9,r3
  801e48:	4806943a 	slli	r3,r9,16
  801e4c:	5affbfc4 	addi	r11,r11,-257
  801e50:	52a02004 	addi	r10,r10,-32640
  801e54:	48d2b03a 	or	r9,r9,r3
  801e58:	20c00017 	ldw	r3,0(r4)
  801e5c:	48c6f03a 	xor	r3,r9,r3
  801e60:	1acd883a 	add	r6,r3,r11
  801e64:	00c6303a 	nor	r3,zero,r3
  801e68:	30c6703a 	and	r3,r6,r3
  801e6c:	1a86703a 	and	r3,r3,r10
  801e70:	183fe01e 	bne	r3,zero,801df4 <__alt_mem_onchip_mem+0xff7f9df4>
  801e74:	10bfff04 	addi	r2,r2,-4
  801e78:	21000104 	addi	r4,r4,4
  801e7c:	40bff636 	bltu	r8,r2,801e58 <__alt_mem_onchip_mem+0xff7f9e58>
  801e80:	003fdb06 	br	801df0 <__alt_mem_onchip_mem+0xff7f9df0>
  801e84:	3005883a 	mov	r2,r6
  801e88:	003fd706 	br	801de8 <__alt_mem_onchip_mem+0xff7f9de8>

00801e8c <memcpy>:
  801e8c:	defffd04 	addi	sp,sp,-12
  801e90:	dfc00215 	stw	ra,8(sp)
  801e94:	dc400115 	stw	r17,4(sp)
  801e98:	dc000015 	stw	r16,0(sp)
  801e9c:	00c003c4 	movi	r3,15
  801ea0:	2005883a 	mov	r2,r4
  801ea4:	1980452e 	bgeu	r3,r6,801fbc <memcpy+0x130>
  801ea8:	2906b03a 	or	r3,r5,r4
  801eac:	18c000cc 	andi	r3,r3,3
  801eb0:	1800441e 	bne	r3,zero,801fc4 <memcpy+0x138>
  801eb4:	347ffc04 	addi	r17,r6,-16
  801eb8:	8822d13a 	srli	r17,r17,4
  801ebc:	28c00104 	addi	r3,r5,4
  801ec0:	23400104 	addi	r13,r4,4
  801ec4:	8820913a 	slli	r16,r17,4
  801ec8:	2b000204 	addi	r12,r5,8
  801ecc:	22c00204 	addi	r11,r4,8
  801ed0:	84000504 	addi	r16,r16,20
  801ed4:	2a800304 	addi	r10,r5,12
  801ed8:	22400304 	addi	r9,r4,12
  801edc:	2c21883a 	add	r16,r5,r16
  801ee0:	2811883a 	mov	r8,r5
  801ee4:	200f883a 	mov	r7,r4
  801ee8:	41000017 	ldw	r4,0(r8)
  801eec:	1fc00017 	ldw	ra,0(r3)
  801ef0:	63c00017 	ldw	r15,0(r12)
  801ef4:	39000015 	stw	r4,0(r7)
  801ef8:	53800017 	ldw	r14,0(r10)
  801efc:	6fc00015 	stw	ra,0(r13)
  801f00:	5bc00015 	stw	r15,0(r11)
  801f04:	4b800015 	stw	r14,0(r9)
  801f08:	18c00404 	addi	r3,r3,16
  801f0c:	39c00404 	addi	r7,r7,16
  801f10:	42000404 	addi	r8,r8,16
  801f14:	6b400404 	addi	r13,r13,16
  801f18:	63000404 	addi	r12,r12,16
  801f1c:	5ac00404 	addi	r11,r11,16
  801f20:	52800404 	addi	r10,r10,16
  801f24:	4a400404 	addi	r9,r9,16
  801f28:	1c3fef1e 	bne	r3,r16,801ee8 <__alt_mem_onchip_mem+0xff7f9ee8>
  801f2c:	89c00044 	addi	r7,r17,1
  801f30:	380e913a 	slli	r7,r7,4
  801f34:	310003cc 	andi	r4,r6,15
  801f38:	02c000c4 	movi	r11,3
  801f3c:	11c7883a 	add	r3,r2,r7
  801f40:	29cb883a 	add	r5,r5,r7
  801f44:	5900212e 	bgeu	r11,r4,801fcc <memcpy+0x140>
  801f48:	1813883a 	mov	r9,r3
  801f4c:	2811883a 	mov	r8,r5
  801f50:	200f883a 	mov	r7,r4
  801f54:	42800017 	ldw	r10,0(r8)
  801f58:	4a400104 	addi	r9,r9,4
  801f5c:	39ffff04 	addi	r7,r7,-4
  801f60:	4abfff15 	stw	r10,-4(r9)
  801f64:	42000104 	addi	r8,r8,4
  801f68:	59fffa36 	bltu	r11,r7,801f54 <__alt_mem_onchip_mem+0xff7f9f54>
  801f6c:	213fff04 	addi	r4,r4,-4
  801f70:	2008d0ba 	srli	r4,r4,2
  801f74:	318000cc 	andi	r6,r6,3
  801f78:	21000044 	addi	r4,r4,1
  801f7c:	2109883a 	add	r4,r4,r4
  801f80:	2109883a 	add	r4,r4,r4
  801f84:	1907883a 	add	r3,r3,r4
  801f88:	290b883a 	add	r5,r5,r4
  801f8c:	30000626 	beq	r6,zero,801fa8 <memcpy+0x11c>
  801f90:	198d883a 	add	r6,r3,r6
  801f94:	29c00003 	ldbu	r7,0(r5)
  801f98:	18c00044 	addi	r3,r3,1
  801f9c:	29400044 	addi	r5,r5,1
  801fa0:	19ffffc5 	stb	r7,-1(r3)
  801fa4:	19bffb1e 	bne	r3,r6,801f94 <__alt_mem_onchip_mem+0xff7f9f94>
  801fa8:	dfc00217 	ldw	ra,8(sp)
  801fac:	dc400117 	ldw	r17,4(sp)
  801fb0:	dc000017 	ldw	r16,0(sp)
  801fb4:	dec00304 	addi	sp,sp,12
  801fb8:	f800283a 	ret
  801fbc:	2007883a 	mov	r3,r4
  801fc0:	003ff206 	br	801f8c <__alt_mem_onchip_mem+0xff7f9f8c>
  801fc4:	2007883a 	mov	r3,r4
  801fc8:	003ff106 	br	801f90 <__alt_mem_onchip_mem+0xff7f9f90>
  801fcc:	200d883a 	mov	r6,r4
  801fd0:	003fee06 	br	801f8c <__alt_mem_onchip_mem+0xff7f9f8c>

00801fd4 <memmove>:
  801fd4:	2005883a 	mov	r2,r4
  801fd8:	29000b2e 	bgeu	r5,r4,802008 <memmove+0x34>
  801fdc:	298f883a 	add	r7,r5,r6
  801fe0:	21c0092e 	bgeu	r4,r7,802008 <memmove+0x34>
  801fe4:	2187883a 	add	r3,r4,r6
  801fe8:	198bc83a 	sub	r5,r3,r6
  801fec:	30004826 	beq	r6,zero,802110 <memmove+0x13c>
  801ff0:	39ffffc4 	addi	r7,r7,-1
  801ff4:	39000003 	ldbu	r4,0(r7)
  801ff8:	18ffffc4 	addi	r3,r3,-1
  801ffc:	19000005 	stb	r4,0(r3)
  802000:	28fffb1e 	bne	r5,r3,801ff0 <__alt_mem_onchip_mem+0xff7f9ff0>
  802004:	f800283a 	ret
  802008:	00c003c4 	movi	r3,15
  80200c:	1980412e 	bgeu	r3,r6,802114 <memmove+0x140>
  802010:	2886b03a 	or	r3,r5,r2
  802014:	18c000cc 	andi	r3,r3,3
  802018:	1800401e 	bne	r3,zero,80211c <memmove+0x148>
  80201c:	33fffc04 	addi	r15,r6,-16
  802020:	781ed13a 	srli	r15,r15,4
  802024:	28c00104 	addi	r3,r5,4
  802028:	13400104 	addi	r13,r2,4
  80202c:	781c913a 	slli	r14,r15,4
  802030:	2b000204 	addi	r12,r5,8
  802034:	12c00204 	addi	r11,r2,8
  802038:	73800504 	addi	r14,r14,20
  80203c:	2a800304 	addi	r10,r5,12
  802040:	12400304 	addi	r9,r2,12
  802044:	2b9d883a 	add	r14,r5,r14
  802048:	2811883a 	mov	r8,r5
  80204c:	100f883a 	mov	r7,r2
  802050:	41000017 	ldw	r4,0(r8)
  802054:	39c00404 	addi	r7,r7,16
  802058:	18c00404 	addi	r3,r3,16
  80205c:	393ffc15 	stw	r4,-16(r7)
  802060:	193ffc17 	ldw	r4,-16(r3)
  802064:	6b400404 	addi	r13,r13,16
  802068:	5ac00404 	addi	r11,r11,16
  80206c:	693ffc15 	stw	r4,-16(r13)
  802070:	61000017 	ldw	r4,0(r12)
  802074:	4a400404 	addi	r9,r9,16
  802078:	42000404 	addi	r8,r8,16
  80207c:	593ffc15 	stw	r4,-16(r11)
  802080:	51000017 	ldw	r4,0(r10)
  802084:	63000404 	addi	r12,r12,16
  802088:	52800404 	addi	r10,r10,16
  80208c:	493ffc15 	stw	r4,-16(r9)
  802090:	1bbfef1e 	bne	r3,r14,802050 <__alt_mem_onchip_mem+0xff7fa050>
  802094:	79000044 	addi	r4,r15,1
  802098:	2008913a 	slli	r4,r4,4
  80209c:	328003cc 	andi	r10,r6,15
  8020a0:	02c000c4 	movi	r11,3
  8020a4:	1107883a 	add	r3,r2,r4
  8020a8:	290b883a 	add	r5,r5,r4
  8020ac:	5a801e2e 	bgeu	r11,r10,802128 <memmove+0x154>
  8020b0:	1813883a 	mov	r9,r3
  8020b4:	2811883a 	mov	r8,r5
  8020b8:	500f883a 	mov	r7,r10
  8020bc:	41000017 	ldw	r4,0(r8)
  8020c0:	4a400104 	addi	r9,r9,4
  8020c4:	39ffff04 	addi	r7,r7,-4
  8020c8:	493fff15 	stw	r4,-4(r9)
  8020cc:	42000104 	addi	r8,r8,4
  8020d0:	59fffa36 	bltu	r11,r7,8020bc <__alt_mem_onchip_mem+0xff7fa0bc>
  8020d4:	513fff04 	addi	r4,r10,-4
  8020d8:	2008d0ba 	srli	r4,r4,2
  8020dc:	318000cc 	andi	r6,r6,3
  8020e0:	21000044 	addi	r4,r4,1
  8020e4:	2109883a 	add	r4,r4,r4
  8020e8:	2109883a 	add	r4,r4,r4
  8020ec:	1907883a 	add	r3,r3,r4
  8020f0:	290b883a 	add	r5,r5,r4
  8020f4:	30000b26 	beq	r6,zero,802124 <memmove+0x150>
  8020f8:	198d883a 	add	r6,r3,r6
  8020fc:	29c00003 	ldbu	r7,0(r5)
  802100:	18c00044 	addi	r3,r3,1
  802104:	29400044 	addi	r5,r5,1
  802108:	19ffffc5 	stb	r7,-1(r3)
  80210c:	19bffb1e 	bne	r3,r6,8020fc <__alt_mem_onchip_mem+0xff7fa0fc>
  802110:	f800283a 	ret
  802114:	1007883a 	mov	r3,r2
  802118:	003ff606 	br	8020f4 <__alt_mem_onchip_mem+0xff7fa0f4>
  80211c:	1007883a 	mov	r3,r2
  802120:	003ff506 	br	8020f8 <__alt_mem_onchip_mem+0xff7fa0f8>
  802124:	f800283a 	ret
  802128:	500d883a 	mov	r6,r10
  80212c:	003ff106 	br	8020f4 <__alt_mem_onchip_mem+0xff7fa0f4>

00802130 <memset>:
  802130:	20c000cc 	andi	r3,r4,3
  802134:	2005883a 	mov	r2,r4
  802138:	18004426 	beq	r3,zero,80224c <memset+0x11c>
  80213c:	31ffffc4 	addi	r7,r6,-1
  802140:	30004026 	beq	r6,zero,802244 <memset+0x114>
  802144:	2813883a 	mov	r9,r5
  802148:	200d883a 	mov	r6,r4
  80214c:	2007883a 	mov	r3,r4
  802150:	00000406 	br	802164 <memset+0x34>
  802154:	3a3fffc4 	addi	r8,r7,-1
  802158:	31800044 	addi	r6,r6,1
  80215c:	38003926 	beq	r7,zero,802244 <memset+0x114>
  802160:	400f883a 	mov	r7,r8
  802164:	18c00044 	addi	r3,r3,1
  802168:	32400005 	stb	r9,0(r6)
  80216c:	1a0000cc 	andi	r8,r3,3
  802170:	403ff81e 	bne	r8,zero,802154 <__alt_mem_onchip_mem+0xff7fa154>
  802174:	010000c4 	movi	r4,3
  802178:	21c02d2e 	bgeu	r4,r7,802230 <memset+0x100>
  80217c:	29003fcc 	andi	r4,r5,255
  802180:	200c923a 	slli	r6,r4,8
  802184:	3108b03a 	or	r4,r6,r4
  802188:	200c943a 	slli	r6,r4,16
  80218c:	218cb03a 	or	r6,r4,r6
  802190:	010003c4 	movi	r4,15
  802194:	21c0182e 	bgeu	r4,r7,8021f8 <memset+0xc8>
  802198:	3b3ffc04 	addi	r12,r7,-16
  80219c:	6018d13a 	srli	r12,r12,4
  8021a0:	1a000104 	addi	r8,r3,4
  8021a4:	1ac00204 	addi	r11,r3,8
  8021a8:	6008913a 	slli	r4,r12,4
  8021ac:	1a800304 	addi	r10,r3,12
  8021b0:	1813883a 	mov	r9,r3
  8021b4:	21000504 	addi	r4,r4,20
  8021b8:	1909883a 	add	r4,r3,r4
  8021bc:	49800015 	stw	r6,0(r9)
  8021c0:	41800015 	stw	r6,0(r8)
  8021c4:	59800015 	stw	r6,0(r11)
  8021c8:	51800015 	stw	r6,0(r10)
  8021cc:	42000404 	addi	r8,r8,16
  8021d0:	4a400404 	addi	r9,r9,16
  8021d4:	5ac00404 	addi	r11,r11,16
  8021d8:	52800404 	addi	r10,r10,16
  8021dc:	413ff71e 	bne	r8,r4,8021bc <__alt_mem_onchip_mem+0xff7fa1bc>
  8021e0:	63000044 	addi	r12,r12,1
  8021e4:	6018913a 	slli	r12,r12,4
  8021e8:	39c003cc 	andi	r7,r7,15
  8021ec:	010000c4 	movi	r4,3
  8021f0:	1b07883a 	add	r3,r3,r12
  8021f4:	21c00e2e 	bgeu	r4,r7,802230 <memset+0x100>
  8021f8:	1813883a 	mov	r9,r3
  8021fc:	3811883a 	mov	r8,r7
  802200:	010000c4 	movi	r4,3
  802204:	49800015 	stw	r6,0(r9)
  802208:	423fff04 	addi	r8,r8,-4
  80220c:	4a400104 	addi	r9,r9,4
  802210:	223ffc36 	bltu	r4,r8,802204 <__alt_mem_onchip_mem+0xff7fa204>
  802214:	393fff04 	addi	r4,r7,-4
  802218:	2008d0ba 	srli	r4,r4,2
  80221c:	39c000cc 	andi	r7,r7,3
  802220:	21000044 	addi	r4,r4,1
  802224:	2109883a 	add	r4,r4,r4
  802228:	2109883a 	add	r4,r4,r4
  80222c:	1907883a 	add	r3,r3,r4
  802230:	38000526 	beq	r7,zero,802248 <memset+0x118>
  802234:	19cf883a 	add	r7,r3,r7
  802238:	19400005 	stb	r5,0(r3)
  80223c:	18c00044 	addi	r3,r3,1
  802240:	38fffd1e 	bne	r7,r3,802238 <__alt_mem_onchip_mem+0xff7fa238>
  802244:	f800283a 	ret
  802248:	f800283a 	ret
  80224c:	2007883a 	mov	r3,r4
  802250:	300f883a 	mov	r7,r6
  802254:	003fc706 	br	802174 <__alt_mem_onchip_mem+0xff7fa174>

00802258 <_realloc_r>:
  802258:	defff604 	addi	sp,sp,-40
  80225c:	dc800215 	stw	r18,8(sp)
  802260:	dfc00915 	stw	ra,36(sp)
  802264:	df000815 	stw	fp,32(sp)
  802268:	ddc00715 	stw	r23,28(sp)
  80226c:	dd800615 	stw	r22,24(sp)
  802270:	dd400515 	stw	r21,20(sp)
  802274:	dd000415 	stw	r20,16(sp)
  802278:	dcc00315 	stw	r19,12(sp)
  80227c:	dc400115 	stw	r17,4(sp)
  802280:	dc000015 	stw	r16,0(sp)
  802284:	3025883a 	mov	r18,r6
  802288:	2800b726 	beq	r5,zero,802568 <_realloc_r+0x310>
  80228c:	282b883a 	mov	r21,r5
  802290:	2029883a 	mov	r20,r4
  802294:	0803d900 	call	803d90 <__malloc_lock>
  802298:	a8bfff17 	ldw	r2,-4(r21)
  80229c:	043fff04 	movi	r16,-4
  8022a0:	90c002c4 	addi	r3,r18,11
  8022a4:	01000584 	movi	r4,22
  8022a8:	acfffe04 	addi	r19,r21,-8
  8022ac:	1420703a 	and	r16,r2,r16
  8022b0:	20c0332e 	bgeu	r4,r3,802380 <_realloc_r+0x128>
  8022b4:	047ffe04 	movi	r17,-8
  8022b8:	1c62703a 	and	r17,r3,r17
  8022bc:	8807883a 	mov	r3,r17
  8022c0:	88005816 	blt	r17,zero,802424 <_realloc_r+0x1cc>
  8022c4:	8c805736 	bltu	r17,r18,802424 <_realloc_r+0x1cc>
  8022c8:	80c0300e 	bge	r16,r3,80238c <_realloc_r+0x134>
  8022cc:	07002034 	movhi	fp,128
  8022d0:	e71fd804 	addi	fp,fp,32608
  8022d4:	e1c00217 	ldw	r7,8(fp)
  8022d8:	9c09883a 	add	r4,r19,r16
  8022dc:	22000117 	ldw	r8,4(r4)
  8022e0:	21c06326 	beq	r4,r7,802470 <_realloc_r+0x218>
  8022e4:	017fff84 	movi	r5,-2
  8022e8:	414a703a 	and	r5,r8,r5
  8022ec:	214b883a 	add	r5,r4,r5
  8022f0:	29800117 	ldw	r6,4(r5)
  8022f4:	3180004c 	andi	r6,r6,1
  8022f8:	30003f26 	beq	r6,zero,8023f8 <_realloc_r+0x1a0>
  8022fc:	1080004c 	andi	r2,r2,1
  802300:	10008326 	beq	r2,zero,802510 <_realloc_r+0x2b8>
  802304:	900b883a 	mov	r5,r18
  802308:	a009883a 	mov	r4,r20
  80230c:	080159c0 	call	80159c <_malloc_r>
  802310:	1025883a 	mov	r18,r2
  802314:	10011e26 	beq	r2,zero,802790 <_realloc_r+0x538>
  802318:	a93fff17 	ldw	r4,-4(r21)
  80231c:	10fffe04 	addi	r3,r2,-8
  802320:	00bfff84 	movi	r2,-2
  802324:	2084703a 	and	r2,r4,r2
  802328:	9885883a 	add	r2,r19,r2
  80232c:	1880ee26 	beq	r3,r2,8026e8 <_realloc_r+0x490>
  802330:	81bfff04 	addi	r6,r16,-4
  802334:	00800904 	movi	r2,36
  802338:	1180b836 	bltu	r2,r6,80261c <_realloc_r+0x3c4>
  80233c:	00c004c4 	movi	r3,19
  802340:	19809636 	bltu	r3,r6,80259c <_realloc_r+0x344>
  802344:	9005883a 	mov	r2,r18
  802348:	a807883a 	mov	r3,r21
  80234c:	19000017 	ldw	r4,0(r3)
  802350:	11000015 	stw	r4,0(r2)
  802354:	19000117 	ldw	r4,4(r3)
  802358:	11000115 	stw	r4,4(r2)
  80235c:	18c00217 	ldw	r3,8(r3)
  802360:	10c00215 	stw	r3,8(r2)
  802364:	a80b883a 	mov	r5,r21
  802368:	a009883a 	mov	r4,r20
  80236c:	08030240 	call	803024 <_free_r>
  802370:	a009883a 	mov	r4,r20
  802374:	0803db40 	call	803db4 <__malloc_unlock>
  802378:	9005883a 	mov	r2,r18
  80237c:	00001206 	br	8023c8 <_realloc_r+0x170>
  802380:	00c00404 	movi	r3,16
  802384:	1823883a 	mov	r17,r3
  802388:	003fce06 	br	8022c4 <__alt_mem_onchip_mem+0xff7fa2c4>
  80238c:	a825883a 	mov	r18,r21
  802390:	8445c83a 	sub	r2,r16,r17
  802394:	00c003c4 	movi	r3,15
  802398:	18802636 	bltu	r3,r2,802434 <_realloc_r+0x1dc>
  80239c:	99800117 	ldw	r6,4(r19)
  8023a0:	9c07883a 	add	r3,r19,r16
  8023a4:	3180004c 	andi	r6,r6,1
  8023a8:	3420b03a 	or	r16,r6,r16
  8023ac:	9c000115 	stw	r16,4(r19)
  8023b0:	18800117 	ldw	r2,4(r3)
  8023b4:	10800054 	ori	r2,r2,1
  8023b8:	18800115 	stw	r2,4(r3)
  8023bc:	a009883a 	mov	r4,r20
  8023c0:	0803db40 	call	803db4 <__malloc_unlock>
  8023c4:	9005883a 	mov	r2,r18
  8023c8:	dfc00917 	ldw	ra,36(sp)
  8023cc:	df000817 	ldw	fp,32(sp)
  8023d0:	ddc00717 	ldw	r23,28(sp)
  8023d4:	dd800617 	ldw	r22,24(sp)
  8023d8:	dd400517 	ldw	r21,20(sp)
  8023dc:	dd000417 	ldw	r20,16(sp)
  8023e0:	dcc00317 	ldw	r19,12(sp)
  8023e4:	dc800217 	ldw	r18,8(sp)
  8023e8:	dc400117 	ldw	r17,4(sp)
  8023ec:	dc000017 	ldw	r16,0(sp)
  8023f0:	dec00a04 	addi	sp,sp,40
  8023f4:	f800283a 	ret
  8023f8:	017fff04 	movi	r5,-4
  8023fc:	414a703a 	and	r5,r8,r5
  802400:	814d883a 	add	r6,r16,r5
  802404:	30c01f16 	blt	r6,r3,802484 <_realloc_r+0x22c>
  802408:	20800317 	ldw	r2,12(r4)
  80240c:	20c00217 	ldw	r3,8(r4)
  802410:	a825883a 	mov	r18,r21
  802414:	3021883a 	mov	r16,r6
  802418:	18800315 	stw	r2,12(r3)
  80241c:	10c00215 	stw	r3,8(r2)
  802420:	003fdb06 	br	802390 <__alt_mem_onchip_mem+0xff7fa390>
  802424:	00800304 	movi	r2,12
  802428:	a0800015 	stw	r2,0(r20)
  80242c:	0005883a 	mov	r2,zero
  802430:	003fe506 	br	8023c8 <__alt_mem_onchip_mem+0xff7fa3c8>
  802434:	98c00117 	ldw	r3,4(r19)
  802438:	9c4b883a 	add	r5,r19,r17
  80243c:	11000054 	ori	r4,r2,1
  802440:	18c0004c 	andi	r3,r3,1
  802444:	1c62b03a 	or	r17,r3,r17
  802448:	9c400115 	stw	r17,4(r19)
  80244c:	29000115 	stw	r4,4(r5)
  802450:	2885883a 	add	r2,r5,r2
  802454:	10c00117 	ldw	r3,4(r2)
  802458:	29400204 	addi	r5,r5,8
  80245c:	a009883a 	mov	r4,r20
  802460:	18c00054 	ori	r3,r3,1
  802464:	10c00115 	stw	r3,4(r2)
  802468:	08030240 	call	803024 <_free_r>
  80246c:	003fd306 	br	8023bc <__alt_mem_onchip_mem+0xff7fa3bc>
  802470:	017fff04 	movi	r5,-4
  802474:	414a703a 	and	r5,r8,r5
  802478:	89800404 	addi	r6,r17,16
  80247c:	8151883a 	add	r8,r16,r5
  802480:	4180590e 	bge	r8,r6,8025e8 <_realloc_r+0x390>
  802484:	1080004c 	andi	r2,r2,1
  802488:	103f9e1e 	bne	r2,zero,802304 <__alt_mem_onchip_mem+0xff7fa304>
  80248c:	adbffe17 	ldw	r22,-8(r21)
  802490:	00bfff04 	movi	r2,-4
  802494:	9dadc83a 	sub	r22,r19,r22
  802498:	b1800117 	ldw	r6,4(r22)
  80249c:	3084703a 	and	r2,r6,r2
  8024a0:	20002026 	beq	r4,zero,802524 <_realloc_r+0x2cc>
  8024a4:	80af883a 	add	r23,r16,r2
  8024a8:	b96f883a 	add	r23,r23,r5
  8024ac:	21c05f26 	beq	r4,r7,80262c <_realloc_r+0x3d4>
  8024b0:	b8c01c16 	blt	r23,r3,802524 <_realloc_r+0x2cc>
  8024b4:	20800317 	ldw	r2,12(r4)
  8024b8:	20c00217 	ldw	r3,8(r4)
  8024bc:	81bfff04 	addi	r6,r16,-4
  8024c0:	01000904 	movi	r4,36
  8024c4:	18800315 	stw	r2,12(r3)
  8024c8:	10c00215 	stw	r3,8(r2)
  8024cc:	b0c00217 	ldw	r3,8(r22)
  8024d0:	b0800317 	ldw	r2,12(r22)
  8024d4:	b4800204 	addi	r18,r22,8
  8024d8:	18800315 	stw	r2,12(r3)
  8024dc:	10c00215 	stw	r3,8(r2)
  8024e0:	21801b36 	bltu	r4,r6,802550 <_realloc_r+0x2f8>
  8024e4:	008004c4 	movi	r2,19
  8024e8:	1180352e 	bgeu	r2,r6,8025c0 <_realloc_r+0x368>
  8024ec:	a8800017 	ldw	r2,0(r21)
  8024f0:	b0800215 	stw	r2,8(r22)
  8024f4:	a8800117 	ldw	r2,4(r21)
  8024f8:	b0800315 	stw	r2,12(r22)
  8024fc:	008006c4 	movi	r2,27
  802500:	11807f36 	bltu	r2,r6,802700 <_realloc_r+0x4a8>
  802504:	b0800404 	addi	r2,r22,16
  802508:	ad400204 	addi	r21,r21,8
  80250c:	00002d06 	br	8025c4 <_realloc_r+0x36c>
  802510:	adbffe17 	ldw	r22,-8(r21)
  802514:	00bfff04 	movi	r2,-4
  802518:	9dadc83a 	sub	r22,r19,r22
  80251c:	b1000117 	ldw	r4,4(r22)
  802520:	2084703a 	and	r2,r4,r2
  802524:	b03f7726 	beq	r22,zero,802304 <__alt_mem_onchip_mem+0xff7fa304>
  802528:	80af883a 	add	r23,r16,r2
  80252c:	b8ff7516 	blt	r23,r3,802304 <__alt_mem_onchip_mem+0xff7fa304>
  802530:	b0800317 	ldw	r2,12(r22)
  802534:	b0c00217 	ldw	r3,8(r22)
  802538:	81bfff04 	addi	r6,r16,-4
  80253c:	01000904 	movi	r4,36
  802540:	18800315 	stw	r2,12(r3)
  802544:	10c00215 	stw	r3,8(r2)
  802548:	b4800204 	addi	r18,r22,8
  80254c:	21bfe52e 	bgeu	r4,r6,8024e4 <__alt_mem_onchip_mem+0xff7fa4e4>
  802550:	a80b883a 	mov	r5,r21
  802554:	9009883a 	mov	r4,r18
  802558:	0801fd40 	call	801fd4 <memmove>
  80255c:	b821883a 	mov	r16,r23
  802560:	b027883a 	mov	r19,r22
  802564:	003f8a06 	br	802390 <__alt_mem_onchip_mem+0xff7fa390>
  802568:	300b883a 	mov	r5,r6
  80256c:	dfc00917 	ldw	ra,36(sp)
  802570:	df000817 	ldw	fp,32(sp)
  802574:	ddc00717 	ldw	r23,28(sp)
  802578:	dd800617 	ldw	r22,24(sp)
  80257c:	dd400517 	ldw	r21,20(sp)
  802580:	dd000417 	ldw	r20,16(sp)
  802584:	dcc00317 	ldw	r19,12(sp)
  802588:	dc800217 	ldw	r18,8(sp)
  80258c:	dc400117 	ldw	r17,4(sp)
  802590:	dc000017 	ldw	r16,0(sp)
  802594:	dec00a04 	addi	sp,sp,40
  802598:	080159c1 	jmpi	80159c <_malloc_r>
  80259c:	a8c00017 	ldw	r3,0(r21)
  8025a0:	90c00015 	stw	r3,0(r18)
  8025a4:	a8c00117 	ldw	r3,4(r21)
  8025a8:	90c00115 	stw	r3,4(r18)
  8025ac:	00c006c4 	movi	r3,27
  8025b0:	19804536 	bltu	r3,r6,8026c8 <_realloc_r+0x470>
  8025b4:	90800204 	addi	r2,r18,8
  8025b8:	a8c00204 	addi	r3,r21,8
  8025bc:	003f6306 	br	80234c <__alt_mem_onchip_mem+0xff7fa34c>
  8025c0:	9005883a 	mov	r2,r18
  8025c4:	a8c00017 	ldw	r3,0(r21)
  8025c8:	b821883a 	mov	r16,r23
  8025cc:	b027883a 	mov	r19,r22
  8025d0:	10c00015 	stw	r3,0(r2)
  8025d4:	a8c00117 	ldw	r3,4(r21)
  8025d8:	10c00115 	stw	r3,4(r2)
  8025dc:	a8c00217 	ldw	r3,8(r21)
  8025e0:	10c00215 	stw	r3,8(r2)
  8025e4:	003f6a06 	br	802390 <__alt_mem_onchip_mem+0xff7fa390>
  8025e8:	9c67883a 	add	r19,r19,r17
  8025ec:	4445c83a 	sub	r2,r8,r17
  8025f0:	e4c00215 	stw	r19,8(fp)
  8025f4:	10800054 	ori	r2,r2,1
  8025f8:	98800115 	stw	r2,4(r19)
  8025fc:	a8bfff17 	ldw	r2,-4(r21)
  802600:	a009883a 	mov	r4,r20
  802604:	1080004c 	andi	r2,r2,1
  802608:	1462b03a 	or	r17,r2,r17
  80260c:	ac7fff15 	stw	r17,-4(r21)
  802610:	0803db40 	call	803db4 <__malloc_unlock>
  802614:	a805883a 	mov	r2,r21
  802618:	003f6b06 	br	8023c8 <__alt_mem_onchip_mem+0xff7fa3c8>
  80261c:	a80b883a 	mov	r5,r21
  802620:	9009883a 	mov	r4,r18
  802624:	0801fd40 	call	801fd4 <memmove>
  802628:	003f4e06 	br	802364 <__alt_mem_onchip_mem+0xff7fa364>
  80262c:	89000404 	addi	r4,r17,16
  802630:	b93fbc16 	blt	r23,r4,802524 <__alt_mem_onchip_mem+0xff7fa524>
  802634:	b0800317 	ldw	r2,12(r22)
  802638:	b0c00217 	ldw	r3,8(r22)
  80263c:	81bfff04 	addi	r6,r16,-4
  802640:	01000904 	movi	r4,36
  802644:	18800315 	stw	r2,12(r3)
  802648:	10c00215 	stw	r3,8(r2)
  80264c:	b4800204 	addi	r18,r22,8
  802650:	21804336 	bltu	r4,r6,802760 <_realloc_r+0x508>
  802654:	008004c4 	movi	r2,19
  802658:	11803f2e 	bgeu	r2,r6,802758 <_realloc_r+0x500>
  80265c:	a8800017 	ldw	r2,0(r21)
  802660:	b0800215 	stw	r2,8(r22)
  802664:	a8800117 	ldw	r2,4(r21)
  802668:	b0800315 	stw	r2,12(r22)
  80266c:	008006c4 	movi	r2,27
  802670:	11803f36 	bltu	r2,r6,802770 <_realloc_r+0x518>
  802674:	b0800404 	addi	r2,r22,16
  802678:	ad400204 	addi	r21,r21,8
  80267c:	a8c00017 	ldw	r3,0(r21)
  802680:	10c00015 	stw	r3,0(r2)
  802684:	a8c00117 	ldw	r3,4(r21)
  802688:	10c00115 	stw	r3,4(r2)
  80268c:	a8c00217 	ldw	r3,8(r21)
  802690:	10c00215 	stw	r3,8(r2)
  802694:	b447883a 	add	r3,r22,r17
  802698:	bc45c83a 	sub	r2,r23,r17
  80269c:	e0c00215 	stw	r3,8(fp)
  8026a0:	10800054 	ori	r2,r2,1
  8026a4:	18800115 	stw	r2,4(r3)
  8026a8:	b0800117 	ldw	r2,4(r22)
  8026ac:	a009883a 	mov	r4,r20
  8026b0:	1080004c 	andi	r2,r2,1
  8026b4:	1462b03a 	or	r17,r2,r17
  8026b8:	b4400115 	stw	r17,4(r22)
  8026bc:	0803db40 	call	803db4 <__malloc_unlock>
  8026c0:	9005883a 	mov	r2,r18
  8026c4:	003f4006 	br	8023c8 <__alt_mem_onchip_mem+0xff7fa3c8>
  8026c8:	a8c00217 	ldw	r3,8(r21)
  8026cc:	90c00215 	stw	r3,8(r18)
  8026d0:	a8c00317 	ldw	r3,12(r21)
  8026d4:	90c00315 	stw	r3,12(r18)
  8026d8:	30801126 	beq	r6,r2,802720 <_realloc_r+0x4c8>
  8026dc:	90800404 	addi	r2,r18,16
  8026e0:	a8c00404 	addi	r3,r21,16
  8026e4:	003f1906 	br	80234c <__alt_mem_onchip_mem+0xff7fa34c>
  8026e8:	90ffff17 	ldw	r3,-4(r18)
  8026ec:	00bfff04 	movi	r2,-4
  8026f0:	a825883a 	mov	r18,r21
  8026f4:	1884703a 	and	r2,r3,r2
  8026f8:	80a1883a 	add	r16,r16,r2
  8026fc:	003f2406 	br	802390 <__alt_mem_onchip_mem+0xff7fa390>
  802700:	a8800217 	ldw	r2,8(r21)
  802704:	b0800415 	stw	r2,16(r22)
  802708:	a8800317 	ldw	r2,12(r21)
  80270c:	b0800515 	stw	r2,20(r22)
  802710:	31000a26 	beq	r6,r4,80273c <_realloc_r+0x4e4>
  802714:	b0800604 	addi	r2,r22,24
  802718:	ad400404 	addi	r21,r21,16
  80271c:	003fa906 	br	8025c4 <__alt_mem_onchip_mem+0xff7fa5c4>
  802720:	a9000417 	ldw	r4,16(r21)
  802724:	90800604 	addi	r2,r18,24
  802728:	a8c00604 	addi	r3,r21,24
  80272c:	91000415 	stw	r4,16(r18)
  802730:	a9000517 	ldw	r4,20(r21)
  802734:	91000515 	stw	r4,20(r18)
  802738:	003f0406 	br	80234c <__alt_mem_onchip_mem+0xff7fa34c>
  80273c:	a8c00417 	ldw	r3,16(r21)
  802740:	ad400604 	addi	r21,r21,24
  802744:	b0800804 	addi	r2,r22,32
  802748:	b0c00615 	stw	r3,24(r22)
  80274c:	a8ffff17 	ldw	r3,-4(r21)
  802750:	b0c00715 	stw	r3,28(r22)
  802754:	003f9b06 	br	8025c4 <__alt_mem_onchip_mem+0xff7fa5c4>
  802758:	9005883a 	mov	r2,r18
  80275c:	003fc706 	br	80267c <__alt_mem_onchip_mem+0xff7fa67c>
  802760:	a80b883a 	mov	r5,r21
  802764:	9009883a 	mov	r4,r18
  802768:	0801fd40 	call	801fd4 <memmove>
  80276c:	003fc906 	br	802694 <__alt_mem_onchip_mem+0xff7fa694>
  802770:	a8800217 	ldw	r2,8(r21)
  802774:	b0800415 	stw	r2,16(r22)
  802778:	a8800317 	ldw	r2,12(r21)
  80277c:	b0800515 	stw	r2,20(r22)
  802780:	31000726 	beq	r6,r4,8027a0 <_realloc_r+0x548>
  802784:	b0800604 	addi	r2,r22,24
  802788:	ad400404 	addi	r21,r21,16
  80278c:	003fbb06 	br	80267c <__alt_mem_onchip_mem+0xff7fa67c>
  802790:	a009883a 	mov	r4,r20
  802794:	0803db40 	call	803db4 <__malloc_unlock>
  802798:	0005883a 	mov	r2,zero
  80279c:	003f0a06 	br	8023c8 <__alt_mem_onchip_mem+0xff7fa3c8>
  8027a0:	a8c00417 	ldw	r3,16(r21)
  8027a4:	ad400604 	addi	r21,r21,24
  8027a8:	b0800804 	addi	r2,r22,32
  8027ac:	b0c00615 	stw	r3,24(r22)
  8027b0:	a8ffff17 	ldw	r3,-4(r21)
  8027b4:	b0c00715 	stw	r3,28(r22)
  8027b8:	003fb006 	br	80267c <__alt_mem_onchip_mem+0xff7fa67c>

008027bc <_sbrk_r>:
  8027bc:	defffd04 	addi	sp,sp,-12
  8027c0:	dc000015 	stw	r16,0(sp)
  8027c4:	04002074 	movhi	r16,129
  8027c8:	dc400115 	stw	r17,4(sp)
  8027cc:	842cfe04 	addi	r16,r16,-19464
  8027d0:	2023883a 	mov	r17,r4
  8027d4:	2809883a 	mov	r4,r5
  8027d8:	dfc00215 	stw	ra,8(sp)
  8027dc:	80000015 	stw	zero,0(r16)
  8027e0:	0803f740 	call	803f74 <sbrk>
  8027e4:	00ffffc4 	movi	r3,-1
  8027e8:	10c00526 	beq	r2,r3,802800 <_sbrk_r+0x44>
  8027ec:	dfc00217 	ldw	ra,8(sp)
  8027f0:	dc400117 	ldw	r17,4(sp)
  8027f4:	dc000017 	ldw	r16,0(sp)
  8027f8:	dec00304 	addi	sp,sp,12
  8027fc:	f800283a 	ret
  802800:	80c00017 	ldw	r3,0(r16)
  802804:	183ff926 	beq	r3,zero,8027ec <__alt_mem_onchip_mem+0xff7fa7ec>
  802808:	88c00015 	stw	r3,0(r17)
  80280c:	003ff706 	br	8027ec <__alt_mem_onchip_mem+0xff7fa7ec>

00802810 <__sread>:
  802810:	defffe04 	addi	sp,sp,-8
  802814:	dc000015 	stw	r16,0(sp)
  802818:	2821883a 	mov	r16,r5
  80281c:	2940038f 	ldh	r5,14(r5)
  802820:	dfc00115 	stw	ra,4(sp)
  802824:	08035500 	call	803550 <_read_r>
  802828:	10000716 	blt	r2,zero,802848 <__sread+0x38>
  80282c:	80c01417 	ldw	r3,80(r16)
  802830:	1887883a 	add	r3,r3,r2
  802834:	80c01415 	stw	r3,80(r16)
  802838:	dfc00117 	ldw	ra,4(sp)
  80283c:	dc000017 	ldw	r16,0(sp)
  802840:	dec00204 	addi	sp,sp,8
  802844:	f800283a 	ret
  802848:	80c0030b 	ldhu	r3,12(r16)
  80284c:	18fbffcc 	andi	r3,r3,61439
  802850:	80c0030d 	sth	r3,12(r16)
  802854:	dfc00117 	ldw	ra,4(sp)
  802858:	dc000017 	ldw	r16,0(sp)
  80285c:	dec00204 	addi	sp,sp,8
  802860:	f800283a 	ret

00802864 <__seofread>:
  802864:	0005883a 	mov	r2,zero
  802868:	f800283a 	ret

0080286c <__swrite>:
  80286c:	2880030b 	ldhu	r2,12(r5)
  802870:	defffb04 	addi	sp,sp,-20
  802874:	dcc00315 	stw	r19,12(sp)
  802878:	dc800215 	stw	r18,8(sp)
  80287c:	dc400115 	stw	r17,4(sp)
  802880:	dc000015 	stw	r16,0(sp)
  802884:	dfc00415 	stw	ra,16(sp)
  802888:	10c0400c 	andi	r3,r2,256
  80288c:	2821883a 	mov	r16,r5
  802890:	2023883a 	mov	r17,r4
  802894:	3025883a 	mov	r18,r6
  802898:	3827883a 	mov	r19,r7
  80289c:	18000526 	beq	r3,zero,8028b4 <__swrite+0x48>
  8028a0:	2940038f 	ldh	r5,14(r5)
  8028a4:	01c00084 	movi	r7,2
  8028a8:	000d883a 	mov	r6,zero
  8028ac:	08033340 	call	803334 <_lseek_r>
  8028b0:	8080030b 	ldhu	r2,12(r16)
  8028b4:	8140038f 	ldh	r5,14(r16)
  8028b8:	10bbffcc 	andi	r2,r2,61439
  8028bc:	980f883a 	mov	r7,r19
  8028c0:	900d883a 	mov	r6,r18
  8028c4:	8809883a 	mov	r4,r17
  8028c8:	8080030d 	sth	r2,12(r16)
  8028cc:	dfc00417 	ldw	ra,16(sp)
  8028d0:	dcc00317 	ldw	r19,12(sp)
  8028d4:	dc800217 	ldw	r18,8(sp)
  8028d8:	dc400117 	ldw	r17,4(sp)
  8028dc:	dc000017 	ldw	r16,0(sp)
  8028e0:	dec00504 	addi	sp,sp,20
  8028e4:	080294c1 	jmpi	80294c <_write_r>

008028e8 <__sseek>:
  8028e8:	defffe04 	addi	sp,sp,-8
  8028ec:	dc000015 	stw	r16,0(sp)
  8028f0:	2821883a 	mov	r16,r5
  8028f4:	2940038f 	ldh	r5,14(r5)
  8028f8:	dfc00115 	stw	ra,4(sp)
  8028fc:	08033340 	call	803334 <_lseek_r>
  802900:	00ffffc4 	movi	r3,-1
  802904:	10c00826 	beq	r2,r3,802928 <__sseek+0x40>
  802908:	80c0030b 	ldhu	r3,12(r16)
  80290c:	80801415 	stw	r2,80(r16)
  802910:	18c40014 	ori	r3,r3,4096
  802914:	80c0030d 	sth	r3,12(r16)
  802918:	dfc00117 	ldw	ra,4(sp)
  80291c:	dc000017 	ldw	r16,0(sp)
  802920:	dec00204 	addi	sp,sp,8
  802924:	f800283a 	ret
  802928:	80c0030b 	ldhu	r3,12(r16)
  80292c:	18fbffcc 	andi	r3,r3,61439
  802930:	80c0030d 	sth	r3,12(r16)
  802934:	dfc00117 	ldw	ra,4(sp)
  802938:	dc000017 	ldw	r16,0(sp)
  80293c:	dec00204 	addi	sp,sp,8
  802940:	f800283a 	ret

00802944 <__sclose>:
  802944:	2940038f 	ldh	r5,14(r5)
  802948:	0802b001 	jmpi	802b00 <_close_r>

0080294c <_write_r>:
  80294c:	defffd04 	addi	sp,sp,-12
  802950:	2805883a 	mov	r2,r5
  802954:	dc000015 	stw	r16,0(sp)
  802958:	04002074 	movhi	r16,129
  80295c:	dc400115 	stw	r17,4(sp)
  802960:	300b883a 	mov	r5,r6
  802964:	842cfe04 	addi	r16,r16,-19464
  802968:	2023883a 	mov	r17,r4
  80296c:	380d883a 	mov	r6,r7
  802970:	1009883a 	mov	r4,r2
  802974:	dfc00215 	stw	ra,8(sp)
  802978:	80000015 	stw	zero,0(r16)
  80297c:	08040600 	call	804060 <write>
  802980:	00ffffc4 	movi	r3,-1
  802984:	10c00526 	beq	r2,r3,80299c <_write_r+0x50>
  802988:	dfc00217 	ldw	ra,8(sp)
  80298c:	dc400117 	ldw	r17,4(sp)
  802990:	dc000017 	ldw	r16,0(sp)
  802994:	dec00304 	addi	sp,sp,12
  802998:	f800283a 	ret
  80299c:	80c00017 	ldw	r3,0(r16)
  8029a0:	183ff926 	beq	r3,zero,802988 <__alt_mem_onchip_mem+0xff7fa988>
  8029a4:	88c00015 	stw	r3,0(r17)
  8029a8:	003ff706 	br	802988 <__alt_mem_onchip_mem+0xff7fa988>

008029ac <__swsetup_r>:
  8029ac:	00802074 	movhi	r2,129
  8029b0:	defffd04 	addi	sp,sp,-12
  8029b4:	10a5d604 	addi	r2,r2,-26792
  8029b8:	dc400115 	stw	r17,4(sp)
  8029bc:	2023883a 	mov	r17,r4
  8029c0:	11000017 	ldw	r4,0(r2)
  8029c4:	dc000015 	stw	r16,0(sp)
  8029c8:	dfc00215 	stw	ra,8(sp)
  8029cc:	2821883a 	mov	r16,r5
  8029d0:	20000226 	beq	r4,zero,8029dc <__swsetup_r+0x30>
  8029d4:	20800e17 	ldw	r2,56(r4)
  8029d8:	10003126 	beq	r2,zero,802aa0 <__swsetup_r+0xf4>
  8029dc:	8080030b 	ldhu	r2,12(r16)
  8029e0:	10c0020c 	andi	r3,r2,8
  8029e4:	1009883a 	mov	r4,r2
  8029e8:	18000f26 	beq	r3,zero,802a28 <__swsetup_r+0x7c>
  8029ec:	80c00417 	ldw	r3,16(r16)
  8029f0:	18001526 	beq	r3,zero,802a48 <__swsetup_r+0x9c>
  8029f4:	1100004c 	andi	r4,r2,1
  8029f8:	20001c1e 	bne	r4,zero,802a6c <__swsetup_r+0xc0>
  8029fc:	1080008c 	andi	r2,r2,2
  802a00:	1000291e 	bne	r2,zero,802aa8 <__swsetup_r+0xfc>
  802a04:	80800517 	ldw	r2,20(r16)
  802a08:	80800215 	stw	r2,8(r16)
  802a0c:	18001c26 	beq	r3,zero,802a80 <__swsetup_r+0xd4>
  802a10:	0005883a 	mov	r2,zero
  802a14:	dfc00217 	ldw	ra,8(sp)
  802a18:	dc400117 	ldw	r17,4(sp)
  802a1c:	dc000017 	ldw	r16,0(sp)
  802a20:	dec00304 	addi	sp,sp,12
  802a24:	f800283a 	ret
  802a28:	2080040c 	andi	r2,r4,16
  802a2c:	10002e26 	beq	r2,zero,802ae8 <__swsetup_r+0x13c>
  802a30:	2080010c 	andi	r2,r4,4
  802a34:	10001e1e 	bne	r2,zero,802ab0 <__swsetup_r+0x104>
  802a38:	80c00417 	ldw	r3,16(r16)
  802a3c:	20800214 	ori	r2,r4,8
  802a40:	8080030d 	sth	r2,12(r16)
  802a44:	183feb1e 	bne	r3,zero,8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  802a48:	1100a00c 	andi	r4,r2,640
  802a4c:	01408004 	movi	r5,512
  802a50:	217fe826 	beq	r4,r5,8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  802a54:	800b883a 	mov	r5,r16
  802a58:	8809883a 	mov	r4,r17
  802a5c:	08033940 	call	803394 <__smakebuf_r>
  802a60:	8080030b 	ldhu	r2,12(r16)
  802a64:	80c00417 	ldw	r3,16(r16)
  802a68:	003fe206 	br	8029f4 <__alt_mem_onchip_mem+0xff7fa9f4>
  802a6c:	80800517 	ldw	r2,20(r16)
  802a70:	80000215 	stw	zero,8(r16)
  802a74:	0085c83a 	sub	r2,zero,r2
  802a78:	80800615 	stw	r2,24(r16)
  802a7c:	183fe41e 	bne	r3,zero,802a10 <__alt_mem_onchip_mem+0xff7faa10>
  802a80:	80c0030b 	ldhu	r3,12(r16)
  802a84:	0005883a 	mov	r2,zero
  802a88:	1900200c 	andi	r4,r3,128
  802a8c:	203fe126 	beq	r4,zero,802a14 <__alt_mem_onchip_mem+0xff7faa14>
  802a90:	18c01014 	ori	r3,r3,64
  802a94:	80c0030d 	sth	r3,12(r16)
  802a98:	00bfffc4 	movi	r2,-1
  802a9c:	003fdd06 	br	802a14 <__alt_mem_onchip_mem+0xff7faa14>
  802aa0:	0800f080 	call	800f08 <__sinit>
  802aa4:	003fcd06 	br	8029dc <__alt_mem_onchip_mem+0xff7fa9dc>
  802aa8:	0005883a 	mov	r2,zero
  802aac:	003fd606 	br	802a08 <__alt_mem_onchip_mem+0xff7faa08>
  802ab0:	81400c17 	ldw	r5,48(r16)
  802ab4:	28000626 	beq	r5,zero,802ad0 <__swsetup_r+0x124>
  802ab8:	80801004 	addi	r2,r16,64
  802abc:	28800326 	beq	r5,r2,802acc <__swsetup_r+0x120>
  802ac0:	8809883a 	mov	r4,r17
  802ac4:	08030240 	call	803024 <_free_r>
  802ac8:	8100030b 	ldhu	r4,12(r16)
  802acc:	80000c15 	stw	zero,48(r16)
  802ad0:	80c00417 	ldw	r3,16(r16)
  802ad4:	00bff6c4 	movi	r2,-37
  802ad8:	1108703a 	and	r4,r2,r4
  802adc:	80000115 	stw	zero,4(r16)
  802ae0:	80c00015 	stw	r3,0(r16)
  802ae4:	003fd506 	br	802a3c <__alt_mem_onchip_mem+0xff7faa3c>
  802ae8:	00800244 	movi	r2,9
  802aec:	88800015 	stw	r2,0(r17)
  802af0:	20801014 	ori	r2,r4,64
  802af4:	8080030d 	sth	r2,12(r16)
  802af8:	00bfffc4 	movi	r2,-1
  802afc:	003fc506 	br	802a14 <__alt_mem_onchip_mem+0xff7faa14>

00802b00 <_close_r>:
  802b00:	defffd04 	addi	sp,sp,-12
  802b04:	dc000015 	stw	r16,0(sp)
  802b08:	04002074 	movhi	r16,129
  802b0c:	dc400115 	stw	r17,4(sp)
  802b10:	842cfe04 	addi	r16,r16,-19464
  802b14:	2023883a 	mov	r17,r4
  802b18:	2809883a 	mov	r4,r5
  802b1c:	dfc00215 	stw	ra,8(sp)
  802b20:	80000015 	stw	zero,0(r16)
  802b24:	08038500 	call	803850 <close>
  802b28:	00ffffc4 	movi	r3,-1
  802b2c:	10c00526 	beq	r2,r3,802b44 <_close_r+0x44>
  802b30:	dfc00217 	ldw	ra,8(sp)
  802b34:	dc400117 	ldw	r17,4(sp)
  802b38:	dc000017 	ldw	r16,0(sp)
  802b3c:	dec00304 	addi	sp,sp,12
  802b40:	f800283a 	ret
  802b44:	80c00017 	ldw	r3,0(r16)
  802b48:	183ff926 	beq	r3,zero,802b30 <__alt_mem_onchip_mem+0xff7fab30>
  802b4c:	88c00015 	stw	r3,0(r17)
  802b50:	003ff706 	br	802b30 <__alt_mem_onchip_mem+0xff7fab30>

00802b54 <_fclose_r>:
  802b54:	28003926 	beq	r5,zero,802c3c <_fclose_r+0xe8>
  802b58:	defffc04 	addi	sp,sp,-16
  802b5c:	dc400115 	stw	r17,4(sp)
  802b60:	dc000015 	stw	r16,0(sp)
  802b64:	dfc00315 	stw	ra,12(sp)
  802b68:	dc800215 	stw	r18,8(sp)
  802b6c:	2023883a 	mov	r17,r4
  802b70:	2821883a 	mov	r16,r5
  802b74:	20000226 	beq	r4,zero,802b80 <_fclose_r+0x2c>
  802b78:	20800e17 	ldw	r2,56(r4)
  802b7c:	10002726 	beq	r2,zero,802c1c <_fclose_r+0xc8>
  802b80:	8080030f 	ldh	r2,12(r16)
  802b84:	1000071e 	bne	r2,zero,802ba4 <_fclose_r+0x50>
  802b88:	0005883a 	mov	r2,zero
  802b8c:	dfc00317 	ldw	ra,12(sp)
  802b90:	dc800217 	ldw	r18,8(sp)
  802b94:	dc400117 	ldw	r17,4(sp)
  802b98:	dc000017 	ldw	r16,0(sp)
  802b9c:	dec00404 	addi	sp,sp,16
  802ba0:	f800283a 	ret
  802ba4:	800b883a 	mov	r5,r16
  802ba8:	8809883a 	mov	r4,r17
  802bac:	0802c580 	call	802c58 <__sflush_r>
  802bb0:	1025883a 	mov	r18,r2
  802bb4:	80800b17 	ldw	r2,44(r16)
  802bb8:	10000426 	beq	r2,zero,802bcc <_fclose_r+0x78>
  802bbc:	81400717 	ldw	r5,28(r16)
  802bc0:	8809883a 	mov	r4,r17
  802bc4:	103ee83a 	callr	r2
  802bc8:	10001616 	blt	r2,zero,802c24 <_fclose_r+0xd0>
  802bcc:	8080030b 	ldhu	r2,12(r16)
  802bd0:	1080200c 	andi	r2,r2,128
  802bd4:	1000151e 	bne	r2,zero,802c2c <_fclose_r+0xd8>
  802bd8:	81400c17 	ldw	r5,48(r16)
  802bdc:	28000526 	beq	r5,zero,802bf4 <_fclose_r+0xa0>
  802be0:	80801004 	addi	r2,r16,64
  802be4:	28800226 	beq	r5,r2,802bf0 <_fclose_r+0x9c>
  802be8:	8809883a 	mov	r4,r17
  802bec:	08030240 	call	803024 <_free_r>
  802bf0:	80000c15 	stw	zero,48(r16)
  802bf4:	81401117 	ldw	r5,68(r16)
  802bf8:	28000326 	beq	r5,zero,802c08 <_fclose_r+0xb4>
  802bfc:	8809883a 	mov	r4,r17
  802c00:	08030240 	call	803024 <_free_r>
  802c04:	80001115 	stw	zero,68(r16)
  802c08:	0800f180 	call	800f18 <__sfp_lock_acquire>
  802c0c:	8000030d 	sth	zero,12(r16)
  802c10:	0800f1c0 	call	800f1c <__sfp_lock_release>
  802c14:	9005883a 	mov	r2,r18
  802c18:	003fdc06 	br	802b8c <__alt_mem_onchip_mem+0xff7fab8c>
  802c1c:	0800f080 	call	800f08 <__sinit>
  802c20:	003fd706 	br	802b80 <__alt_mem_onchip_mem+0xff7fab80>
  802c24:	04bfffc4 	movi	r18,-1
  802c28:	003fe806 	br	802bcc <__alt_mem_onchip_mem+0xff7fabcc>
  802c2c:	81400417 	ldw	r5,16(r16)
  802c30:	8809883a 	mov	r4,r17
  802c34:	08030240 	call	803024 <_free_r>
  802c38:	003fe706 	br	802bd8 <__alt_mem_onchip_mem+0xff7fabd8>
  802c3c:	0005883a 	mov	r2,zero
  802c40:	f800283a 	ret

00802c44 <fclose>:
  802c44:	00802074 	movhi	r2,129
  802c48:	10a5d604 	addi	r2,r2,-26792
  802c4c:	200b883a 	mov	r5,r4
  802c50:	11000017 	ldw	r4,0(r2)
  802c54:	0802b541 	jmpi	802b54 <_fclose_r>

00802c58 <__sflush_r>:
  802c58:	2880030b 	ldhu	r2,12(r5)
  802c5c:	defffb04 	addi	sp,sp,-20
  802c60:	dcc00315 	stw	r19,12(sp)
  802c64:	dc400115 	stw	r17,4(sp)
  802c68:	dfc00415 	stw	ra,16(sp)
  802c6c:	dc800215 	stw	r18,8(sp)
  802c70:	dc000015 	stw	r16,0(sp)
  802c74:	10c0020c 	andi	r3,r2,8
  802c78:	2823883a 	mov	r17,r5
  802c7c:	2027883a 	mov	r19,r4
  802c80:	1800311e 	bne	r3,zero,802d48 <__sflush_r+0xf0>
  802c84:	28c00117 	ldw	r3,4(r5)
  802c88:	10820014 	ori	r2,r2,2048
  802c8c:	2880030d 	sth	r2,12(r5)
  802c90:	00c04b0e 	bge	zero,r3,802dc0 <__sflush_r+0x168>
  802c94:	8a000a17 	ldw	r8,40(r17)
  802c98:	40002326 	beq	r8,zero,802d28 <__sflush_r+0xd0>
  802c9c:	9c000017 	ldw	r16,0(r19)
  802ca0:	10c4000c 	andi	r3,r2,4096
  802ca4:	98000015 	stw	zero,0(r19)
  802ca8:	18004826 	beq	r3,zero,802dcc <__sflush_r+0x174>
  802cac:	89801417 	ldw	r6,80(r17)
  802cb0:	10c0010c 	andi	r3,r2,4
  802cb4:	18000626 	beq	r3,zero,802cd0 <__sflush_r+0x78>
  802cb8:	88c00117 	ldw	r3,4(r17)
  802cbc:	88800c17 	ldw	r2,48(r17)
  802cc0:	30cdc83a 	sub	r6,r6,r3
  802cc4:	10000226 	beq	r2,zero,802cd0 <__sflush_r+0x78>
  802cc8:	88800f17 	ldw	r2,60(r17)
  802ccc:	308dc83a 	sub	r6,r6,r2
  802cd0:	89400717 	ldw	r5,28(r17)
  802cd4:	000f883a 	mov	r7,zero
  802cd8:	9809883a 	mov	r4,r19
  802cdc:	403ee83a 	callr	r8
  802ce0:	00ffffc4 	movi	r3,-1
  802ce4:	10c04426 	beq	r2,r3,802df8 <__sflush_r+0x1a0>
  802ce8:	88c0030b 	ldhu	r3,12(r17)
  802cec:	89000417 	ldw	r4,16(r17)
  802cf0:	88000115 	stw	zero,4(r17)
  802cf4:	197dffcc 	andi	r5,r3,63487
  802cf8:	8940030d 	sth	r5,12(r17)
  802cfc:	89000015 	stw	r4,0(r17)
  802d00:	18c4000c 	andi	r3,r3,4096
  802d04:	18002c1e 	bne	r3,zero,802db8 <__sflush_r+0x160>
  802d08:	89400c17 	ldw	r5,48(r17)
  802d0c:	9c000015 	stw	r16,0(r19)
  802d10:	28000526 	beq	r5,zero,802d28 <__sflush_r+0xd0>
  802d14:	88801004 	addi	r2,r17,64
  802d18:	28800226 	beq	r5,r2,802d24 <__sflush_r+0xcc>
  802d1c:	9809883a 	mov	r4,r19
  802d20:	08030240 	call	803024 <_free_r>
  802d24:	88000c15 	stw	zero,48(r17)
  802d28:	0005883a 	mov	r2,zero
  802d2c:	dfc00417 	ldw	ra,16(sp)
  802d30:	dcc00317 	ldw	r19,12(sp)
  802d34:	dc800217 	ldw	r18,8(sp)
  802d38:	dc400117 	ldw	r17,4(sp)
  802d3c:	dc000017 	ldw	r16,0(sp)
  802d40:	dec00504 	addi	sp,sp,20
  802d44:	f800283a 	ret
  802d48:	2c800417 	ldw	r18,16(r5)
  802d4c:	903ff626 	beq	r18,zero,802d28 <__alt_mem_onchip_mem+0xff7fad28>
  802d50:	2c000017 	ldw	r16,0(r5)
  802d54:	108000cc 	andi	r2,r2,3
  802d58:	2c800015 	stw	r18,0(r5)
  802d5c:	84a1c83a 	sub	r16,r16,r18
  802d60:	1000131e 	bne	r2,zero,802db0 <__sflush_r+0x158>
  802d64:	28800517 	ldw	r2,20(r5)
  802d68:	88800215 	stw	r2,8(r17)
  802d6c:	04000316 	blt	zero,r16,802d7c <__sflush_r+0x124>
  802d70:	003fed06 	br	802d28 <__alt_mem_onchip_mem+0xff7fad28>
  802d74:	90a5883a 	add	r18,r18,r2
  802d78:	043feb0e 	bge	zero,r16,802d28 <__alt_mem_onchip_mem+0xff7fad28>
  802d7c:	88800917 	ldw	r2,36(r17)
  802d80:	89400717 	ldw	r5,28(r17)
  802d84:	800f883a 	mov	r7,r16
  802d88:	900d883a 	mov	r6,r18
  802d8c:	9809883a 	mov	r4,r19
  802d90:	103ee83a 	callr	r2
  802d94:	80a1c83a 	sub	r16,r16,r2
  802d98:	00bff616 	blt	zero,r2,802d74 <__alt_mem_onchip_mem+0xff7fad74>
  802d9c:	88c0030b 	ldhu	r3,12(r17)
  802da0:	00bfffc4 	movi	r2,-1
  802da4:	18c01014 	ori	r3,r3,64
  802da8:	88c0030d 	sth	r3,12(r17)
  802dac:	003fdf06 	br	802d2c <__alt_mem_onchip_mem+0xff7fad2c>
  802db0:	0005883a 	mov	r2,zero
  802db4:	003fec06 	br	802d68 <__alt_mem_onchip_mem+0xff7fad68>
  802db8:	88801415 	stw	r2,80(r17)
  802dbc:	003fd206 	br	802d08 <__alt_mem_onchip_mem+0xff7fad08>
  802dc0:	28c00f17 	ldw	r3,60(r5)
  802dc4:	00ffb316 	blt	zero,r3,802c94 <__alt_mem_onchip_mem+0xff7fac94>
  802dc8:	003fd706 	br	802d28 <__alt_mem_onchip_mem+0xff7fad28>
  802dcc:	89400717 	ldw	r5,28(r17)
  802dd0:	000d883a 	mov	r6,zero
  802dd4:	01c00044 	movi	r7,1
  802dd8:	9809883a 	mov	r4,r19
  802ddc:	403ee83a 	callr	r8
  802de0:	100d883a 	mov	r6,r2
  802de4:	00bfffc4 	movi	r2,-1
  802de8:	30801426 	beq	r6,r2,802e3c <__sflush_r+0x1e4>
  802dec:	8880030b 	ldhu	r2,12(r17)
  802df0:	8a000a17 	ldw	r8,40(r17)
  802df4:	003fae06 	br	802cb0 <__alt_mem_onchip_mem+0xff7facb0>
  802df8:	98c00017 	ldw	r3,0(r19)
  802dfc:	183fba26 	beq	r3,zero,802ce8 <__alt_mem_onchip_mem+0xff7face8>
  802e00:	01000744 	movi	r4,29
  802e04:	19000626 	beq	r3,r4,802e20 <__sflush_r+0x1c8>
  802e08:	01000584 	movi	r4,22
  802e0c:	19000426 	beq	r3,r4,802e20 <__sflush_r+0x1c8>
  802e10:	88c0030b 	ldhu	r3,12(r17)
  802e14:	18c01014 	ori	r3,r3,64
  802e18:	88c0030d 	sth	r3,12(r17)
  802e1c:	003fc306 	br	802d2c <__alt_mem_onchip_mem+0xff7fad2c>
  802e20:	8880030b 	ldhu	r2,12(r17)
  802e24:	88c00417 	ldw	r3,16(r17)
  802e28:	88000115 	stw	zero,4(r17)
  802e2c:	10bdffcc 	andi	r2,r2,63487
  802e30:	8880030d 	sth	r2,12(r17)
  802e34:	88c00015 	stw	r3,0(r17)
  802e38:	003fb306 	br	802d08 <__alt_mem_onchip_mem+0xff7fad08>
  802e3c:	98800017 	ldw	r2,0(r19)
  802e40:	103fea26 	beq	r2,zero,802dec <__alt_mem_onchip_mem+0xff7fadec>
  802e44:	00c00744 	movi	r3,29
  802e48:	10c00226 	beq	r2,r3,802e54 <__sflush_r+0x1fc>
  802e4c:	00c00584 	movi	r3,22
  802e50:	10c0031e 	bne	r2,r3,802e60 <__sflush_r+0x208>
  802e54:	9c000015 	stw	r16,0(r19)
  802e58:	0005883a 	mov	r2,zero
  802e5c:	003fb306 	br	802d2c <__alt_mem_onchip_mem+0xff7fad2c>
  802e60:	88c0030b 	ldhu	r3,12(r17)
  802e64:	3005883a 	mov	r2,r6
  802e68:	18c01014 	ori	r3,r3,64
  802e6c:	88c0030d 	sth	r3,12(r17)
  802e70:	003fae06 	br	802d2c <__alt_mem_onchip_mem+0xff7fad2c>

00802e74 <_fflush_r>:
  802e74:	defffd04 	addi	sp,sp,-12
  802e78:	dc000115 	stw	r16,4(sp)
  802e7c:	dfc00215 	stw	ra,8(sp)
  802e80:	2021883a 	mov	r16,r4
  802e84:	20000226 	beq	r4,zero,802e90 <_fflush_r+0x1c>
  802e88:	20800e17 	ldw	r2,56(r4)
  802e8c:	10000c26 	beq	r2,zero,802ec0 <_fflush_r+0x4c>
  802e90:	2880030f 	ldh	r2,12(r5)
  802e94:	1000051e 	bne	r2,zero,802eac <_fflush_r+0x38>
  802e98:	0005883a 	mov	r2,zero
  802e9c:	dfc00217 	ldw	ra,8(sp)
  802ea0:	dc000117 	ldw	r16,4(sp)
  802ea4:	dec00304 	addi	sp,sp,12
  802ea8:	f800283a 	ret
  802eac:	8009883a 	mov	r4,r16
  802eb0:	dfc00217 	ldw	ra,8(sp)
  802eb4:	dc000117 	ldw	r16,4(sp)
  802eb8:	dec00304 	addi	sp,sp,12
  802ebc:	0802c581 	jmpi	802c58 <__sflush_r>
  802ec0:	d9400015 	stw	r5,0(sp)
  802ec4:	0800f080 	call	800f08 <__sinit>
  802ec8:	d9400017 	ldw	r5,0(sp)
  802ecc:	003ff006 	br	802e90 <__alt_mem_onchip_mem+0xff7fae90>

00802ed0 <fflush>:
  802ed0:	20000526 	beq	r4,zero,802ee8 <fflush+0x18>
  802ed4:	00802074 	movhi	r2,129
  802ed8:	10a5d604 	addi	r2,r2,-26792
  802edc:	200b883a 	mov	r5,r4
  802ee0:	11000017 	ldw	r4,0(r2)
  802ee4:	0802e741 	jmpi	802e74 <_fflush_r>
  802ee8:	00802074 	movhi	r2,129
  802eec:	10a5d504 	addi	r2,r2,-26796
  802ef0:	11000017 	ldw	r4,0(r2)
  802ef4:	01402034 	movhi	r5,128
  802ef8:	294b9d04 	addi	r5,r5,11892
  802efc:	08014d81 	jmpi	8014d8 <_fwalk_reent>

00802f00 <_malloc_trim_r>:
  802f00:	defffb04 	addi	sp,sp,-20
  802f04:	dcc00315 	stw	r19,12(sp)
  802f08:	04c02034 	movhi	r19,128
  802f0c:	dc800215 	stw	r18,8(sp)
  802f10:	dc400115 	stw	r17,4(sp)
  802f14:	dc000015 	stw	r16,0(sp)
  802f18:	dfc00415 	stw	ra,16(sp)
  802f1c:	2821883a 	mov	r16,r5
  802f20:	9cdfd804 	addi	r19,r19,32608
  802f24:	2025883a 	mov	r18,r4
  802f28:	0803d900 	call	803d90 <__malloc_lock>
  802f2c:	98800217 	ldw	r2,8(r19)
  802f30:	14400117 	ldw	r17,4(r2)
  802f34:	00bfff04 	movi	r2,-4
  802f38:	88a2703a 	and	r17,r17,r2
  802f3c:	8c21c83a 	sub	r16,r17,r16
  802f40:	8403fbc4 	addi	r16,r16,4079
  802f44:	8020d33a 	srli	r16,r16,12
  802f48:	0083ffc4 	movi	r2,4095
  802f4c:	843fffc4 	addi	r16,r16,-1
  802f50:	8020933a 	slli	r16,r16,12
  802f54:	1400060e 	bge	r2,r16,802f70 <_malloc_trim_r+0x70>
  802f58:	000b883a 	mov	r5,zero
  802f5c:	9009883a 	mov	r4,r18
  802f60:	08027bc0 	call	8027bc <_sbrk_r>
  802f64:	98c00217 	ldw	r3,8(r19)
  802f68:	1c47883a 	add	r3,r3,r17
  802f6c:	10c00a26 	beq	r2,r3,802f98 <_malloc_trim_r+0x98>
  802f70:	9009883a 	mov	r4,r18
  802f74:	0803db40 	call	803db4 <__malloc_unlock>
  802f78:	0005883a 	mov	r2,zero
  802f7c:	dfc00417 	ldw	ra,16(sp)
  802f80:	dcc00317 	ldw	r19,12(sp)
  802f84:	dc800217 	ldw	r18,8(sp)
  802f88:	dc400117 	ldw	r17,4(sp)
  802f8c:	dc000017 	ldw	r16,0(sp)
  802f90:	dec00504 	addi	sp,sp,20
  802f94:	f800283a 	ret
  802f98:	040bc83a 	sub	r5,zero,r16
  802f9c:	9009883a 	mov	r4,r18
  802fa0:	08027bc0 	call	8027bc <_sbrk_r>
  802fa4:	00ffffc4 	movi	r3,-1
  802fa8:	10c00d26 	beq	r2,r3,802fe0 <_malloc_trim_r+0xe0>
  802fac:	00c02074 	movhi	r3,129
  802fb0:	18ed0604 	addi	r3,r3,-19432
  802fb4:	18800017 	ldw	r2,0(r3)
  802fb8:	99000217 	ldw	r4,8(r19)
  802fbc:	8c23c83a 	sub	r17,r17,r16
  802fc0:	8c400054 	ori	r17,r17,1
  802fc4:	1421c83a 	sub	r16,r2,r16
  802fc8:	24400115 	stw	r17,4(r4)
  802fcc:	9009883a 	mov	r4,r18
  802fd0:	1c000015 	stw	r16,0(r3)
  802fd4:	0803db40 	call	803db4 <__malloc_unlock>
  802fd8:	00800044 	movi	r2,1
  802fdc:	003fe706 	br	802f7c <__alt_mem_onchip_mem+0xff7faf7c>
  802fe0:	000b883a 	mov	r5,zero
  802fe4:	9009883a 	mov	r4,r18
  802fe8:	08027bc0 	call	8027bc <_sbrk_r>
  802fec:	99000217 	ldw	r4,8(r19)
  802ff0:	014003c4 	movi	r5,15
  802ff4:	1107c83a 	sub	r3,r2,r4
  802ff8:	28ffdd0e 	bge	r5,r3,802f70 <__alt_mem_onchip_mem+0xff7faf70>
  802ffc:	01402074 	movhi	r5,129
  803000:	2965d704 	addi	r5,r5,-26788
  803004:	29400017 	ldw	r5,0(r5)
  803008:	18c00054 	ori	r3,r3,1
  80300c:	20c00115 	stw	r3,4(r4)
  803010:	00c02074 	movhi	r3,129
  803014:	1145c83a 	sub	r2,r2,r5
  803018:	18ed0604 	addi	r3,r3,-19432
  80301c:	18800015 	stw	r2,0(r3)
  803020:	003fd306 	br	802f70 <__alt_mem_onchip_mem+0xff7faf70>

00803024 <_free_r>:
  803024:	28004126 	beq	r5,zero,80312c <_free_r+0x108>
  803028:	defffd04 	addi	sp,sp,-12
  80302c:	dc400115 	stw	r17,4(sp)
  803030:	dc000015 	stw	r16,0(sp)
  803034:	2023883a 	mov	r17,r4
  803038:	2821883a 	mov	r16,r5
  80303c:	dfc00215 	stw	ra,8(sp)
  803040:	0803d900 	call	803d90 <__malloc_lock>
  803044:	81ffff17 	ldw	r7,-4(r16)
  803048:	00bfff84 	movi	r2,-2
  80304c:	01002034 	movhi	r4,128
  803050:	81bffe04 	addi	r6,r16,-8
  803054:	3884703a 	and	r2,r7,r2
  803058:	211fd804 	addi	r4,r4,32608
  80305c:	308b883a 	add	r5,r6,r2
  803060:	2a400117 	ldw	r9,4(r5)
  803064:	22000217 	ldw	r8,8(r4)
  803068:	00ffff04 	movi	r3,-4
  80306c:	48c6703a 	and	r3,r9,r3
  803070:	2a005726 	beq	r5,r8,8031d0 <_free_r+0x1ac>
  803074:	28c00115 	stw	r3,4(r5)
  803078:	39c0004c 	andi	r7,r7,1
  80307c:	3800091e 	bne	r7,zero,8030a4 <_free_r+0x80>
  803080:	823ffe17 	ldw	r8,-8(r16)
  803084:	22400204 	addi	r9,r4,8
  803088:	320dc83a 	sub	r6,r6,r8
  80308c:	31c00217 	ldw	r7,8(r6)
  803090:	1205883a 	add	r2,r2,r8
  803094:	3a406526 	beq	r7,r9,80322c <_free_r+0x208>
  803098:	32000317 	ldw	r8,12(r6)
  80309c:	3a000315 	stw	r8,12(r7)
  8030a0:	41c00215 	stw	r7,8(r8)
  8030a4:	28cf883a 	add	r7,r5,r3
  8030a8:	39c00117 	ldw	r7,4(r7)
  8030ac:	39c0004c 	andi	r7,r7,1
  8030b0:	38003a26 	beq	r7,zero,80319c <_free_r+0x178>
  8030b4:	10c00054 	ori	r3,r2,1
  8030b8:	30c00115 	stw	r3,4(r6)
  8030bc:	3087883a 	add	r3,r6,r2
  8030c0:	18800015 	stw	r2,0(r3)
  8030c4:	00c07fc4 	movi	r3,511
  8030c8:	18801936 	bltu	r3,r2,803130 <_free_r+0x10c>
  8030cc:	1004d0fa 	srli	r2,r2,3
  8030d0:	01c00044 	movi	r7,1
  8030d4:	21400117 	ldw	r5,4(r4)
  8030d8:	10c00044 	addi	r3,r2,1
  8030dc:	18c7883a 	add	r3,r3,r3
  8030e0:	1005d0ba 	srai	r2,r2,2
  8030e4:	18c7883a 	add	r3,r3,r3
  8030e8:	18c7883a 	add	r3,r3,r3
  8030ec:	1907883a 	add	r3,r3,r4
  8030f0:	3884983a 	sll	r2,r7,r2
  8030f4:	19c00017 	ldw	r7,0(r3)
  8030f8:	1a3ffe04 	addi	r8,r3,-8
  8030fc:	1144b03a 	or	r2,r2,r5
  803100:	32000315 	stw	r8,12(r6)
  803104:	31c00215 	stw	r7,8(r6)
  803108:	20800115 	stw	r2,4(r4)
  80310c:	19800015 	stw	r6,0(r3)
  803110:	39800315 	stw	r6,12(r7)
  803114:	8809883a 	mov	r4,r17
  803118:	dfc00217 	ldw	ra,8(sp)
  80311c:	dc400117 	ldw	r17,4(sp)
  803120:	dc000017 	ldw	r16,0(sp)
  803124:	dec00304 	addi	sp,sp,12
  803128:	0803db41 	jmpi	803db4 <__malloc_unlock>
  80312c:	f800283a 	ret
  803130:	100ad27a 	srli	r5,r2,9
  803134:	00c00104 	movi	r3,4
  803138:	19404a36 	bltu	r3,r5,803264 <_free_r+0x240>
  80313c:	100ad1ba 	srli	r5,r2,6
  803140:	28c00e44 	addi	r3,r5,57
  803144:	18c7883a 	add	r3,r3,r3
  803148:	29400e04 	addi	r5,r5,56
  80314c:	18c7883a 	add	r3,r3,r3
  803150:	18c7883a 	add	r3,r3,r3
  803154:	1909883a 	add	r4,r3,r4
  803158:	20c00017 	ldw	r3,0(r4)
  80315c:	01c02034 	movhi	r7,128
  803160:	213ffe04 	addi	r4,r4,-8
  803164:	39dfd804 	addi	r7,r7,32608
  803168:	20c04426 	beq	r4,r3,80327c <_free_r+0x258>
  80316c:	01ffff04 	movi	r7,-4
  803170:	19400117 	ldw	r5,4(r3)
  803174:	29ca703a 	and	r5,r5,r7
  803178:	1140022e 	bgeu	r2,r5,803184 <_free_r+0x160>
  80317c:	18c00217 	ldw	r3,8(r3)
  803180:	20fffb1e 	bne	r4,r3,803170 <__alt_mem_onchip_mem+0xff7fb170>
  803184:	19000317 	ldw	r4,12(r3)
  803188:	31000315 	stw	r4,12(r6)
  80318c:	30c00215 	stw	r3,8(r6)
  803190:	21800215 	stw	r6,8(r4)
  803194:	19800315 	stw	r6,12(r3)
  803198:	003fde06 	br	803114 <__alt_mem_onchip_mem+0xff7fb114>
  80319c:	29c00217 	ldw	r7,8(r5)
  8031a0:	10c5883a 	add	r2,r2,r3
  8031a4:	00c02034 	movhi	r3,128
  8031a8:	18dfda04 	addi	r3,r3,32616
  8031ac:	38c03b26 	beq	r7,r3,80329c <_free_r+0x278>
  8031b0:	2a000317 	ldw	r8,12(r5)
  8031b4:	11400054 	ori	r5,r2,1
  8031b8:	3087883a 	add	r3,r6,r2
  8031bc:	3a000315 	stw	r8,12(r7)
  8031c0:	41c00215 	stw	r7,8(r8)
  8031c4:	31400115 	stw	r5,4(r6)
  8031c8:	18800015 	stw	r2,0(r3)
  8031cc:	003fbd06 	br	8030c4 <__alt_mem_onchip_mem+0xff7fb0c4>
  8031d0:	39c0004c 	andi	r7,r7,1
  8031d4:	10c5883a 	add	r2,r2,r3
  8031d8:	3800071e 	bne	r7,zero,8031f8 <_free_r+0x1d4>
  8031dc:	81fffe17 	ldw	r7,-8(r16)
  8031e0:	31cdc83a 	sub	r6,r6,r7
  8031e4:	30c00317 	ldw	r3,12(r6)
  8031e8:	31400217 	ldw	r5,8(r6)
  8031ec:	11c5883a 	add	r2,r2,r7
  8031f0:	28c00315 	stw	r3,12(r5)
  8031f4:	19400215 	stw	r5,8(r3)
  8031f8:	10c00054 	ori	r3,r2,1
  8031fc:	30c00115 	stw	r3,4(r6)
  803200:	00c02074 	movhi	r3,129
  803204:	18e5d804 	addi	r3,r3,-26784
  803208:	18c00017 	ldw	r3,0(r3)
  80320c:	21800215 	stw	r6,8(r4)
  803210:	10ffc036 	bltu	r2,r3,803114 <__alt_mem_onchip_mem+0xff7fb114>
  803214:	00802074 	movhi	r2,129
  803218:	10acfd04 	addi	r2,r2,-19468
  80321c:	11400017 	ldw	r5,0(r2)
  803220:	8809883a 	mov	r4,r17
  803224:	0802f000 	call	802f00 <_malloc_trim_r>
  803228:	003fba06 	br	803114 <__alt_mem_onchip_mem+0xff7fb114>
  80322c:	28c9883a 	add	r4,r5,r3
  803230:	21000117 	ldw	r4,4(r4)
  803234:	2100004c 	andi	r4,r4,1
  803238:	2000391e 	bne	r4,zero,803320 <_free_r+0x2fc>
  80323c:	29c00217 	ldw	r7,8(r5)
  803240:	29000317 	ldw	r4,12(r5)
  803244:	1885883a 	add	r2,r3,r2
  803248:	10c00054 	ori	r3,r2,1
  80324c:	39000315 	stw	r4,12(r7)
  803250:	21c00215 	stw	r7,8(r4)
  803254:	30c00115 	stw	r3,4(r6)
  803258:	308d883a 	add	r6,r6,r2
  80325c:	30800015 	stw	r2,0(r6)
  803260:	003fac06 	br	803114 <__alt_mem_onchip_mem+0xff7fb114>
  803264:	00c00504 	movi	r3,20
  803268:	19401536 	bltu	r3,r5,8032c0 <_free_r+0x29c>
  80326c:	28c01704 	addi	r3,r5,92
  803270:	18c7883a 	add	r3,r3,r3
  803274:	294016c4 	addi	r5,r5,91
  803278:	003fb406 	br	80314c <__alt_mem_onchip_mem+0xff7fb14c>
  80327c:	280bd0ba 	srai	r5,r5,2
  803280:	00c00044 	movi	r3,1
  803284:	38800117 	ldw	r2,4(r7)
  803288:	194a983a 	sll	r5,r3,r5
  80328c:	2007883a 	mov	r3,r4
  803290:	2884b03a 	or	r2,r5,r2
  803294:	38800115 	stw	r2,4(r7)
  803298:	003fbb06 	br	803188 <__alt_mem_onchip_mem+0xff7fb188>
  80329c:	21800515 	stw	r6,20(r4)
  8032a0:	21800415 	stw	r6,16(r4)
  8032a4:	10c00054 	ori	r3,r2,1
  8032a8:	31c00315 	stw	r7,12(r6)
  8032ac:	31c00215 	stw	r7,8(r6)
  8032b0:	30c00115 	stw	r3,4(r6)
  8032b4:	308d883a 	add	r6,r6,r2
  8032b8:	30800015 	stw	r2,0(r6)
  8032bc:	003f9506 	br	803114 <__alt_mem_onchip_mem+0xff7fb114>
  8032c0:	00c01504 	movi	r3,84
  8032c4:	19400536 	bltu	r3,r5,8032dc <_free_r+0x2b8>
  8032c8:	100ad33a 	srli	r5,r2,12
  8032cc:	28c01bc4 	addi	r3,r5,111
  8032d0:	18c7883a 	add	r3,r3,r3
  8032d4:	29401b84 	addi	r5,r5,110
  8032d8:	003f9c06 	br	80314c <__alt_mem_onchip_mem+0xff7fb14c>
  8032dc:	00c05504 	movi	r3,340
  8032e0:	19400536 	bltu	r3,r5,8032f8 <_free_r+0x2d4>
  8032e4:	100ad3fa 	srli	r5,r2,15
  8032e8:	28c01e04 	addi	r3,r5,120
  8032ec:	18c7883a 	add	r3,r3,r3
  8032f0:	29401dc4 	addi	r5,r5,119
  8032f4:	003f9506 	br	80314c <__alt_mem_onchip_mem+0xff7fb14c>
  8032f8:	00c15504 	movi	r3,1364
  8032fc:	19400536 	bltu	r3,r5,803314 <_free_r+0x2f0>
  803300:	100ad4ba 	srli	r5,r2,18
  803304:	28c01f44 	addi	r3,r5,125
  803308:	18c7883a 	add	r3,r3,r3
  80330c:	29401f04 	addi	r5,r5,124
  803310:	003f8e06 	br	80314c <__alt_mem_onchip_mem+0xff7fb14c>
  803314:	00c03f84 	movi	r3,254
  803318:	01401f84 	movi	r5,126
  80331c:	003f8b06 	br	80314c <__alt_mem_onchip_mem+0xff7fb14c>
  803320:	10c00054 	ori	r3,r2,1
  803324:	30c00115 	stw	r3,4(r6)
  803328:	308d883a 	add	r6,r6,r2
  80332c:	30800015 	stw	r2,0(r6)
  803330:	003f7806 	br	803114 <__alt_mem_onchip_mem+0xff7fb114>

00803334 <_lseek_r>:
  803334:	defffd04 	addi	sp,sp,-12
  803338:	2805883a 	mov	r2,r5
  80333c:	dc000015 	stw	r16,0(sp)
  803340:	04002074 	movhi	r16,129
  803344:	dc400115 	stw	r17,4(sp)
  803348:	300b883a 	mov	r5,r6
  80334c:	842cfe04 	addi	r16,r16,-19464
  803350:	2023883a 	mov	r17,r4
  803354:	380d883a 	mov	r6,r7
  803358:	1009883a 	mov	r4,r2
  80335c:	dfc00215 	stw	ra,8(sp)
  803360:	80000015 	stw	zero,0(r16)
  803364:	0803c400 	call	803c40 <lseek>
  803368:	00ffffc4 	movi	r3,-1
  80336c:	10c00526 	beq	r2,r3,803384 <_lseek_r+0x50>
  803370:	dfc00217 	ldw	ra,8(sp)
  803374:	dc400117 	ldw	r17,4(sp)
  803378:	dc000017 	ldw	r16,0(sp)
  80337c:	dec00304 	addi	sp,sp,12
  803380:	f800283a 	ret
  803384:	80c00017 	ldw	r3,0(r16)
  803388:	183ff926 	beq	r3,zero,803370 <__alt_mem_onchip_mem+0xff7fb370>
  80338c:	88c00015 	stw	r3,0(r17)
  803390:	003ff706 	br	803370 <__alt_mem_onchip_mem+0xff7fb370>

00803394 <__smakebuf_r>:
  803394:	2880030b 	ldhu	r2,12(r5)
  803398:	10c0008c 	andi	r3,r2,2
  80339c:	1800411e 	bne	r3,zero,8034a4 <__smakebuf_r+0x110>
  8033a0:	deffec04 	addi	sp,sp,-80
  8033a4:	dc000f15 	stw	r16,60(sp)
  8033a8:	2821883a 	mov	r16,r5
  8033ac:	2940038f 	ldh	r5,14(r5)
  8033b0:	dc401015 	stw	r17,64(sp)
  8033b4:	dfc01315 	stw	ra,76(sp)
  8033b8:	dcc01215 	stw	r19,72(sp)
  8033bc:	dc801115 	stw	r18,68(sp)
  8033c0:	2023883a 	mov	r17,r4
  8033c4:	28001c16 	blt	r5,zero,803438 <__smakebuf_r+0xa4>
  8033c8:	d80d883a 	mov	r6,sp
  8033cc:	08035b00 	call	8035b0 <_fstat_r>
  8033d0:	10001816 	blt	r2,zero,803434 <__smakebuf_r+0xa0>
  8033d4:	d8800117 	ldw	r2,4(sp)
  8033d8:	00e00014 	movui	r3,32768
  8033dc:	10bc000c 	andi	r2,r2,61440
  8033e0:	14c80020 	cmpeqi	r19,r2,8192
  8033e4:	10c03726 	beq	r2,r3,8034c4 <__smakebuf_r+0x130>
  8033e8:	80c0030b 	ldhu	r3,12(r16)
  8033ec:	18c20014 	ori	r3,r3,2048
  8033f0:	80c0030d 	sth	r3,12(r16)
  8033f4:	00c80004 	movi	r3,8192
  8033f8:	10c0521e 	bne	r2,r3,803544 <__smakebuf_r+0x1b0>
  8033fc:	8140038f 	ldh	r5,14(r16)
  803400:	8809883a 	mov	r4,r17
  803404:	080360c0 	call	80360c <_isatty_r>
  803408:	10004c26 	beq	r2,zero,80353c <__smakebuf_r+0x1a8>
  80340c:	8080030b 	ldhu	r2,12(r16)
  803410:	80c010c4 	addi	r3,r16,67
  803414:	80c00015 	stw	r3,0(r16)
  803418:	10800054 	ori	r2,r2,1
  80341c:	8080030d 	sth	r2,12(r16)
  803420:	00800044 	movi	r2,1
  803424:	80c00415 	stw	r3,16(r16)
  803428:	80800515 	stw	r2,20(r16)
  80342c:	04810004 	movi	r18,1024
  803430:	00000706 	br	803450 <__smakebuf_r+0xbc>
  803434:	8080030b 	ldhu	r2,12(r16)
  803438:	10c0200c 	andi	r3,r2,128
  80343c:	18001f1e 	bne	r3,zero,8034bc <__smakebuf_r+0x128>
  803440:	04810004 	movi	r18,1024
  803444:	10820014 	ori	r2,r2,2048
  803448:	8080030d 	sth	r2,12(r16)
  80344c:	0027883a 	mov	r19,zero
  803450:	900b883a 	mov	r5,r18
  803454:	8809883a 	mov	r4,r17
  803458:	080159c0 	call	80159c <_malloc_r>
  80345c:	10002c26 	beq	r2,zero,803510 <__smakebuf_r+0x17c>
  803460:	80c0030b 	ldhu	r3,12(r16)
  803464:	01002034 	movhi	r4,128
  803468:	2102f004 	addi	r4,r4,3008
  80346c:	89000f15 	stw	r4,60(r17)
  803470:	18c02014 	ori	r3,r3,128
  803474:	80c0030d 	sth	r3,12(r16)
  803478:	80800015 	stw	r2,0(r16)
  80347c:	80800415 	stw	r2,16(r16)
  803480:	84800515 	stw	r18,20(r16)
  803484:	98001a1e 	bne	r19,zero,8034f0 <__smakebuf_r+0x15c>
  803488:	dfc01317 	ldw	ra,76(sp)
  80348c:	dcc01217 	ldw	r19,72(sp)
  803490:	dc801117 	ldw	r18,68(sp)
  803494:	dc401017 	ldw	r17,64(sp)
  803498:	dc000f17 	ldw	r16,60(sp)
  80349c:	dec01404 	addi	sp,sp,80
  8034a0:	f800283a 	ret
  8034a4:	288010c4 	addi	r2,r5,67
  8034a8:	28800015 	stw	r2,0(r5)
  8034ac:	28800415 	stw	r2,16(r5)
  8034b0:	00800044 	movi	r2,1
  8034b4:	28800515 	stw	r2,20(r5)
  8034b8:	f800283a 	ret
  8034bc:	04801004 	movi	r18,64
  8034c0:	003fe006 	br	803444 <__alt_mem_onchip_mem+0xff7fb444>
  8034c4:	81000a17 	ldw	r4,40(r16)
  8034c8:	00c02034 	movhi	r3,128
  8034cc:	18ca3a04 	addi	r3,r3,10472
  8034d0:	20ffc51e 	bne	r4,r3,8033e8 <__alt_mem_onchip_mem+0xff7fb3e8>
  8034d4:	8080030b 	ldhu	r2,12(r16)
  8034d8:	04810004 	movi	r18,1024
  8034dc:	84801315 	stw	r18,76(r16)
  8034e0:	1484b03a 	or	r2,r2,r18
  8034e4:	8080030d 	sth	r2,12(r16)
  8034e8:	0027883a 	mov	r19,zero
  8034ec:	003fd806 	br	803450 <__alt_mem_onchip_mem+0xff7fb450>
  8034f0:	8140038f 	ldh	r5,14(r16)
  8034f4:	8809883a 	mov	r4,r17
  8034f8:	080360c0 	call	80360c <_isatty_r>
  8034fc:	103fe226 	beq	r2,zero,803488 <__alt_mem_onchip_mem+0xff7fb488>
  803500:	8080030b 	ldhu	r2,12(r16)
  803504:	10800054 	ori	r2,r2,1
  803508:	8080030d 	sth	r2,12(r16)
  80350c:	003fde06 	br	803488 <__alt_mem_onchip_mem+0xff7fb488>
  803510:	8080030b 	ldhu	r2,12(r16)
  803514:	10c0800c 	andi	r3,r2,512
  803518:	183fdb1e 	bne	r3,zero,803488 <__alt_mem_onchip_mem+0xff7fb488>
  80351c:	10800094 	ori	r2,r2,2
  803520:	80c010c4 	addi	r3,r16,67
  803524:	8080030d 	sth	r2,12(r16)
  803528:	00800044 	movi	r2,1
  80352c:	80c00015 	stw	r3,0(r16)
  803530:	80c00415 	stw	r3,16(r16)
  803534:	80800515 	stw	r2,20(r16)
  803538:	003fd306 	br	803488 <__alt_mem_onchip_mem+0xff7fb488>
  80353c:	04810004 	movi	r18,1024
  803540:	003fc306 	br	803450 <__alt_mem_onchip_mem+0xff7fb450>
  803544:	0027883a 	mov	r19,zero
  803548:	04810004 	movi	r18,1024
  80354c:	003fc006 	br	803450 <__alt_mem_onchip_mem+0xff7fb450>

00803550 <_read_r>:
  803550:	defffd04 	addi	sp,sp,-12
  803554:	2805883a 	mov	r2,r5
  803558:	dc000015 	stw	r16,0(sp)
  80355c:	04002074 	movhi	r16,129
  803560:	dc400115 	stw	r17,4(sp)
  803564:	300b883a 	mov	r5,r6
  803568:	842cfe04 	addi	r16,r16,-19464
  80356c:	2023883a 	mov	r17,r4
  803570:	380d883a 	mov	r6,r7
  803574:	1009883a 	mov	r4,r2
  803578:	dfc00215 	stw	ra,8(sp)
  80357c:	80000015 	stw	zero,0(r16)
  803580:	0803e140 	call	803e14 <read>
  803584:	00ffffc4 	movi	r3,-1
  803588:	10c00526 	beq	r2,r3,8035a0 <_read_r+0x50>
  80358c:	dfc00217 	ldw	ra,8(sp)
  803590:	dc400117 	ldw	r17,4(sp)
  803594:	dc000017 	ldw	r16,0(sp)
  803598:	dec00304 	addi	sp,sp,12
  80359c:	f800283a 	ret
  8035a0:	80c00017 	ldw	r3,0(r16)
  8035a4:	183ff926 	beq	r3,zero,80358c <__alt_mem_onchip_mem+0xff7fb58c>
  8035a8:	88c00015 	stw	r3,0(r17)
  8035ac:	003ff706 	br	80358c <__alt_mem_onchip_mem+0xff7fb58c>

008035b0 <_fstat_r>:
  8035b0:	defffd04 	addi	sp,sp,-12
  8035b4:	2805883a 	mov	r2,r5
  8035b8:	dc000015 	stw	r16,0(sp)
  8035bc:	04002074 	movhi	r16,129
  8035c0:	dc400115 	stw	r17,4(sp)
  8035c4:	842cfe04 	addi	r16,r16,-19464
  8035c8:	2023883a 	mov	r17,r4
  8035cc:	300b883a 	mov	r5,r6
  8035d0:	1009883a 	mov	r4,r2
  8035d4:	dfc00215 	stw	ra,8(sp)
  8035d8:	80000015 	stw	zero,0(r16)
  8035dc:	08039880 	call	803988 <fstat>
  8035e0:	00ffffc4 	movi	r3,-1
  8035e4:	10c00526 	beq	r2,r3,8035fc <_fstat_r+0x4c>
  8035e8:	dfc00217 	ldw	ra,8(sp)
  8035ec:	dc400117 	ldw	r17,4(sp)
  8035f0:	dc000017 	ldw	r16,0(sp)
  8035f4:	dec00304 	addi	sp,sp,12
  8035f8:	f800283a 	ret
  8035fc:	80c00017 	ldw	r3,0(r16)
  803600:	183ff926 	beq	r3,zero,8035e8 <__alt_mem_onchip_mem+0xff7fb5e8>
  803604:	88c00015 	stw	r3,0(r17)
  803608:	003ff706 	br	8035e8 <__alt_mem_onchip_mem+0xff7fb5e8>

0080360c <_isatty_r>:
  80360c:	defffd04 	addi	sp,sp,-12
  803610:	dc000015 	stw	r16,0(sp)
  803614:	04002074 	movhi	r16,129
  803618:	dc400115 	stw	r17,4(sp)
  80361c:	842cfe04 	addi	r16,r16,-19464
  803620:	2023883a 	mov	r17,r4
  803624:	2809883a 	mov	r4,r5
  803628:	dfc00215 	stw	ra,8(sp)
  80362c:	80000015 	stw	zero,0(r16)
  803630:	0803a740 	call	803a74 <isatty>
  803634:	00ffffc4 	movi	r3,-1
  803638:	10c00526 	beq	r2,r3,803650 <_isatty_r+0x44>
  80363c:	dfc00217 	ldw	ra,8(sp)
  803640:	dc400117 	ldw	r17,4(sp)
  803644:	dc000017 	ldw	r16,0(sp)
  803648:	dec00304 	addi	sp,sp,12
  80364c:	f800283a 	ret
  803650:	80c00017 	ldw	r3,0(r16)
  803654:	183ff926 	beq	r3,zero,80363c <__alt_mem_onchip_mem+0xff7fb63c>
  803658:	88c00015 	stw	r3,0(r17)
  80365c:	003ff706 	br	80363c <__alt_mem_onchip_mem+0xff7fb63c>

00803660 <__divsi3>:
  803660:	20001b16 	blt	r4,zero,8036d0 <__divsi3+0x70>
  803664:	000f883a 	mov	r7,zero
  803668:	28001616 	blt	r5,zero,8036c4 <__divsi3+0x64>
  80366c:	200d883a 	mov	r6,r4
  803670:	29001a2e 	bgeu	r5,r4,8036dc <__divsi3+0x7c>
  803674:	00800804 	movi	r2,32
  803678:	00c00044 	movi	r3,1
  80367c:	00000106 	br	803684 <__divsi3+0x24>
  803680:	10000d26 	beq	r2,zero,8036b8 <__divsi3+0x58>
  803684:	294b883a 	add	r5,r5,r5
  803688:	10bfffc4 	addi	r2,r2,-1
  80368c:	18c7883a 	add	r3,r3,r3
  803690:	293ffb36 	bltu	r5,r4,803680 <__alt_mem_onchip_mem+0xff7fb680>
  803694:	0005883a 	mov	r2,zero
  803698:	18000726 	beq	r3,zero,8036b8 <__divsi3+0x58>
  80369c:	0005883a 	mov	r2,zero
  8036a0:	31400236 	bltu	r6,r5,8036ac <__divsi3+0x4c>
  8036a4:	314dc83a 	sub	r6,r6,r5
  8036a8:	10c4b03a 	or	r2,r2,r3
  8036ac:	1806d07a 	srli	r3,r3,1
  8036b0:	280ad07a 	srli	r5,r5,1
  8036b4:	183ffa1e 	bne	r3,zero,8036a0 <__alt_mem_onchip_mem+0xff7fb6a0>
  8036b8:	38000126 	beq	r7,zero,8036c0 <__divsi3+0x60>
  8036bc:	0085c83a 	sub	r2,zero,r2
  8036c0:	f800283a 	ret
  8036c4:	014bc83a 	sub	r5,zero,r5
  8036c8:	39c0005c 	xori	r7,r7,1
  8036cc:	003fe706 	br	80366c <__alt_mem_onchip_mem+0xff7fb66c>
  8036d0:	0109c83a 	sub	r4,zero,r4
  8036d4:	01c00044 	movi	r7,1
  8036d8:	003fe306 	br	803668 <__alt_mem_onchip_mem+0xff7fb668>
  8036dc:	00c00044 	movi	r3,1
  8036e0:	003fee06 	br	80369c <__alt_mem_onchip_mem+0xff7fb69c>

008036e4 <__modsi3>:
  8036e4:	20001716 	blt	r4,zero,803744 <__modsi3+0x60>
  8036e8:	000f883a 	mov	r7,zero
  8036ec:	2005883a 	mov	r2,r4
  8036f0:	28001216 	blt	r5,zero,80373c <__modsi3+0x58>
  8036f4:	2900162e 	bgeu	r5,r4,803750 <__modsi3+0x6c>
  8036f8:	01800804 	movi	r6,32
  8036fc:	00c00044 	movi	r3,1
  803700:	00000106 	br	803708 <__modsi3+0x24>
  803704:	30000a26 	beq	r6,zero,803730 <__modsi3+0x4c>
  803708:	294b883a 	add	r5,r5,r5
  80370c:	31bfffc4 	addi	r6,r6,-1
  803710:	18c7883a 	add	r3,r3,r3
  803714:	293ffb36 	bltu	r5,r4,803704 <__alt_mem_onchip_mem+0xff7fb704>
  803718:	18000526 	beq	r3,zero,803730 <__modsi3+0x4c>
  80371c:	1806d07a 	srli	r3,r3,1
  803720:	11400136 	bltu	r2,r5,803728 <__modsi3+0x44>
  803724:	1145c83a 	sub	r2,r2,r5
  803728:	280ad07a 	srli	r5,r5,1
  80372c:	183ffb1e 	bne	r3,zero,80371c <__alt_mem_onchip_mem+0xff7fb71c>
  803730:	38000126 	beq	r7,zero,803738 <__modsi3+0x54>
  803734:	0085c83a 	sub	r2,zero,r2
  803738:	f800283a 	ret
  80373c:	014bc83a 	sub	r5,zero,r5
  803740:	003fec06 	br	8036f4 <__alt_mem_onchip_mem+0xff7fb6f4>
  803744:	0109c83a 	sub	r4,zero,r4
  803748:	01c00044 	movi	r7,1
  80374c:	003fe706 	br	8036ec <__alt_mem_onchip_mem+0xff7fb6ec>
  803750:	00c00044 	movi	r3,1
  803754:	003ff106 	br	80371c <__alt_mem_onchip_mem+0xff7fb71c>

00803758 <__udivsi3>:
  803758:	200d883a 	mov	r6,r4
  80375c:	2900152e 	bgeu	r5,r4,8037b4 <__udivsi3+0x5c>
  803760:	28001416 	blt	r5,zero,8037b4 <__udivsi3+0x5c>
  803764:	00800804 	movi	r2,32
  803768:	00c00044 	movi	r3,1
  80376c:	00000206 	br	803778 <__udivsi3+0x20>
  803770:	10000e26 	beq	r2,zero,8037ac <__udivsi3+0x54>
  803774:	28000516 	blt	r5,zero,80378c <__udivsi3+0x34>
  803778:	294b883a 	add	r5,r5,r5
  80377c:	10bfffc4 	addi	r2,r2,-1
  803780:	18c7883a 	add	r3,r3,r3
  803784:	293ffa36 	bltu	r5,r4,803770 <__alt_mem_onchip_mem+0xff7fb770>
  803788:	18000826 	beq	r3,zero,8037ac <__udivsi3+0x54>
  80378c:	0005883a 	mov	r2,zero
  803790:	31400236 	bltu	r6,r5,80379c <__udivsi3+0x44>
  803794:	314dc83a 	sub	r6,r6,r5
  803798:	10c4b03a 	or	r2,r2,r3
  80379c:	1806d07a 	srli	r3,r3,1
  8037a0:	280ad07a 	srli	r5,r5,1
  8037a4:	183ffa1e 	bne	r3,zero,803790 <__alt_mem_onchip_mem+0xff7fb790>
  8037a8:	f800283a 	ret
  8037ac:	0005883a 	mov	r2,zero
  8037b0:	f800283a 	ret
  8037b4:	00c00044 	movi	r3,1
  8037b8:	003ff406 	br	80378c <__alt_mem_onchip_mem+0xff7fb78c>

008037bc <__umodsi3>:
  8037bc:	2005883a 	mov	r2,r4
  8037c0:	2900122e 	bgeu	r5,r4,80380c <__umodsi3+0x50>
  8037c4:	28001116 	blt	r5,zero,80380c <__umodsi3+0x50>
  8037c8:	01800804 	movi	r6,32
  8037cc:	00c00044 	movi	r3,1
  8037d0:	00000206 	br	8037dc <__umodsi3+0x20>
  8037d4:	30000c26 	beq	r6,zero,803808 <__umodsi3+0x4c>
  8037d8:	28000516 	blt	r5,zero,8037f0 <__umodsi3+0x34>
  8037dc:	294b883a 	add	r5,r5,r5
  8037e0:	31bfffc4 	addi	r6,r6,-1
  8037e4:	18c7883a 	add	r3,r3,r3
  8037e8:	293ffa36 	bltu	r5,r4,8037d4 <__alt_mem_onchip_mem+0xff7fb7d4>
  8037ec:	18000626 	beq	r3,zero,803808 <__umodsi3+0x4c>
  8037f0:	1806d07a 	srli	r3,r3,1
  8037f4:	11400136 	bltu	r2,r5,8037fc <__umodsi3+0x40>
  8037f8:	1145c83a 	sub	r2,r2,r5
  8037fc:	280ad07a 	srli	r5,r5,1
  803800:	183ffb1e 	bne	r3,zero,8037f0 <__alt_mem_onchip_mem+0xff7fb7f0>
  803804:	f800283a 	ret
  803808:	f800283a 	ret
  80380c:	00c00044 	movi	r3,1
  803810:	003ff706 	br	8037f0 <__alt_mem_onchip_mem+0xff7fb7f0>

00803814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803814:	defffe04 	addi	sp,sp,-8
  803818:	dfc00115 	stw	ra,4(sp)
  80381c:	df000015 	stw	fp,0(sp)
  803820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803824:	d0a00917 	ldw	r2,-32732(gp)
  803828:	10000326 	beq	r2,zero,803838 <alt_get_errno+0x24>
  80382c:	d0a00917 	ldw	r2,-32732(gp)
  803830:	103ee83a 	callr	r2
  803834:	00000106 	br	80383c <alt_get_errno+0x28>
  803838:	d0a72904 	addi	r2,gp,-25436
}
  80383c:	e037883a 	mov	sp,fp
  803840:	dfc00117 	ldw	ra,4(sp)
  803844:	df000017 	ldw	fp,0(sp)
  803848:	dec00204 	addi	sp,sp,8
  80384c:	f800283a 	ret

00803850 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  803850:	defffb04 	addi	sp,sp,-20
  803854:	dfc00415 	stw	ra,16(sp)
  803858:	df000315 	stw	fp,12(sp)
  80385c:	df000304 	addi	fp,sp,12
  803860:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803864:	e0bfff17 	ldw	r2,-4(fp)
  803868:	10000616 	blt	r2,zero,803884 <close+0x34>
  80386c:	e0bfff17 	ldw	r2,-4(fp)
  803870:	10c00324 	muli	r3,r2,12
  803874:	00802074 	movhi	r2,129
  803878:	10a0e404 	addi	r2,r2,-31856
  80387c:	1885883a 	add	r2,r3,r2
  803880:	00000106 	br	803888 <close+0x38>
  803884:	0005883a 	mov	r2,zero
  803888:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80388c:	e0bffd17 	ldw	r2,-12(fp)
  803890:	10001926 	beq	r2,zero,8038f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803894:	e0bffd17 	ldw	r2,-12(fp)
  803898:	10800017 	ldw	r2,0(r2)
  80389c:	10800417 	ldw	r2,16(r2)
  8038a0:	10000626 	beq	r2,zero,8038bc <close+0x6c>
  8038a4:	e0bffd17 	ldw	r2,-12(fp)
  8038a8:	10800017 	ldw	r2,0(r2)
  8038ac:	10800417 	ldw	r2,16(r2)
  8038b0:	e13ffd17 	ldw	r4,-12(fp)
  8038b4:	103ee83a 	callr	r2
  8038b8:	00000106 	br	8038c0 <close+0x70>
  8038bc:	0005883a 	mov	r2,zero
  8038c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8038c4:	e13fff17 	ldw	r4,-4(fp)
  8038c8:	0803f100 	call	803f10 <alt_release_fd>
    if (rval < 0)
  8038cc:	e0bffe17 	ldw	r2,-8(fp)
  8038d0:	1000070e 	bge	r2,zero,8038f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8038d4:	08038140 	call	803814 <alt_get_errno>
  8038d8:	1007883a 	mov	r3,r2
  8038dc:	e0bffe17 	ldw	r2,-8(fp)
  8038e0:	0085c83a 	sub	r2,zero,r2
  8038e4:	18800015 	stw	r2,0(r3)
      return -1;
  8038e8:	00bfffc4 	movi	r2,-1
  8038ec:	00000706 	br	80390c <close+0xbc>
    }
    return 0;
  8038f0:	0005883a 	mov	r2,zero
  8038f4:	00000506 	br	80390c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8038f8:	08038140 	call	803814 <alt_get_errno>
  8038fc:	1007883a 	mov	r3,r2
  803900:	00801444 	movi	r2,81
  803904:	18800015 	stw	r2,0(r3)
    return -1;
  803908:	00bfffc4 	movi	r2,-1
  }
}
  80390c:	e037883a 	mov	sp,fp
  803910:	dfc00117 	ldw	ra,4(sp)
  803914:	df000017 	ldw	fp,0(sp)
  803918:	dec00204 	addi	sp,sp,8
  80391c:	f800283a 	ret

00803920 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803920:	defffc04 	addi	sp,sp,-16
  803924:	df000315 	stw	fp,12(sp)
  803928:	df000304 	addi	fp,sp,12
  80392c:	e13ffd15 	stw	r4,-12(fp)
  803930:	e17ffe15 	stw	r5,-8(fp)
  803934:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803938:	e0bfff17 	ldw	r2,-4(fp)
}
  80393c:	e037883a 	mov	sp,fp
  803940:	df000017 	ldw	fp,0(sp)
  803944:	dec00104 	addi	sp,sp,4
  803948:	f800283a 	ret

0080394c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80394c:	defffe04 	addi	sp,sp,-8
  803950:	dfc00115 	stw	ra,4(sp)
  803954:	df000015 	stw	fp,0(sp)
  803958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80395c:	d0a00917 	ldw	r2,-32732(gp)
  803960:	10000326 	beq	r2,zero,803970 <alt_get_errno+0x24>
  803964:	d0a00917 	ldw	r2,-32732(gp)
  803968:	103ee83a 	callr	r2
  80396c:	00000106 	br	803974 <alt_get_errno+0x28>
  803970:	d0a72904 	addi	r2,gp,-25436
}
  803974:	e037883a 	mov	sp,fp
  803978:	dfc00117 	ldw	ra,4(sp)
  80397c:	df000017 	ldw	fp,0(sp)
  803980:	dec00204 	addi	sp,sp,8
  803984:	f800283a 	ret

00803988 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  803988:	defffb04 	addi	sp,sp,-20
  80398c:	dfc00415 	stw	ra,16(sp)
  803990:	df000315 	stw	fp,12(sp)
  803994:	df000304 	addi	fp,sp,12
  803998:	e13ffe15 	stw	r4,-8(fp)
  80399c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8039a0:	e0bffe17 	ldw	r2,-8(fp)
  8039a4:	10000616 	blt	r2,zero,8039c0 <fstat+0x38>
  8039a8:	e0bffe17 	ldw	r2,-8(fp)
  8039ac:	10c00324 	muli	r3,r2,12
  8039b0:	00802074 	movhi	r2,129
  8039b4:	10a0e404 	addi	r2,r2,-31856
  8039b8:	1885883a 	add	r2,r3,r2
  8039bc:	00000106 	br	8039c4 <fstat+0x3c>
  8039c0:	0005883a 	mov	r2,zero
  8039c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8039c8:	e0bffd17 	ldw	r2,-12(fp)
  8039cc:	10001026 	beq	r2,zero,803a10 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8039d0:	e0bffd17 	ldw	r2,-12(fp)
  8039d4:	10800017 	ldw	r2,0(r2)
  8039d8:	10800817 	ldw	r2,32(r2)
  8039dc:	10000726 	beq	r2,zero,8039fc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  8039e0:	e0bffd17 	ldw	r2,-12(fp)
  8039e4:	10800017 	ldw	r2,0(r2)
  8039e8:	10800817 	ldw	r2,32(r2)
  8039ec:	e17fff17 	ldw	r5,-4(fp)
  8039f0:	e13ffd17 	ldw	r4,-12(fp)
  8039f4:	103ee83a 	callr	r2
  8039f8:	00000a06 	br	803a24 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8039fc:	e0bfff17 	ldw	r2,-4(fp)
  803a00:	00c80004 	movi	r3,8192
  803a04:	10c00115 	stw	r3,4(r2)
      return 0;
  803a08:	0005883a 	mov	r2,zero
  803a0c:	00000506 	br	803a24 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803a10:	080394c0 	call	80394c <alt_get_errno>
  803a14:	1007883a 	mov	r3,r2
  803a18:	00801444 	movi	r2,81
  803a1c:	18800015 	stw	r2,0(r3)
    return -1;
  803a20:	00bfffc4 	movi	r2,-1
  }
}
  803a24:	e037883a 	mov	sp,fp
  803a28:	dfc00117 	ldw	ra,4(sp)
  803a2c:	df000017 	ldw	fp,0(sp)
  803a30:	dec00204 	addi	sp,sp,8
  803a34:	f800283a 	ret

00803a38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803a38:	defffe04 	addi	sp,sp,-8
  803a3c:	dfc00115 	stw	ra,4(sp)
  803a40:	df000015 	stw	fp,0(sp)
  803a44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803a48:	d0a00917 	ldw	r2,-32732(gp)
  803a4c:	10000326 	beq	r2,zero,803a5c <alt_get_errno+0x24>
  803a50:	d0a00917 	ldw	r2,-32732(gp)
  803a54:	103ee83a 	callr	r2
  803a58:	00000106 	br	803a60 <alt_get_errno+0x28>
  803a5c:	d0a72904 	addi	r2,gp,-25436
}
  803a60:	e037883a 	mov	sp,fp
  803a64:	dfc00117 	ldw	ra,4(sp)
  803a68:	df000017 	ldw	fp,0(sp)
  803a6c:	dec00204 	addi	sp,sp,8
  803a70:	f800283a 	ret

00803a74 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  803a74:	deffed04 	addi	sp,sp,-76
  803a78:	dfc01215 	stw	ra,72(sp)
  803a7c:	df001115 	stw	fp,68(sp)
  803a80:	df001104 	addi	fp,sp,68
  803a84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803a88:	e0bfff17 	ldw	r2,-4(fp)
  803a8c:	10000616 	blt	r2,zero,803aa8 <isatty+0x34>
  803a90:	e0bfff17 	ldw	r2,-4(fp)
  803a94:	10c00324 	muli	r3,r2,12
  803a98:	00802074 	movhi	r2,129
  803a9c:	10a0e404 	addi	r2,r2,-31856
  803aa0:	1885883a 	add	r2,r3,r2
  803aa4:	00000106 	br	803aac <isatty+0x38>
  803aa8:	0005883a 	mov	r2,zero
  803aac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  803ab0:	e0bfef17 	ldw	r2,-68(fp)
  803ab4:	10000e26 	beq	r2,zero,803af0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  803ab8:	e0bfef17 	ldw	r2,-68(fp)
  803abc:	10800017 	ldw	r2,0(r2)
  803ac0:	10800817 	ldw	r2,32(r2)
  803ac4:	1000021e 	bne	r2,zero,803ad0 <isatty+0x5c>
    {
      return 1;
  803ac8:	00800044 	movi	r2,1
  803acc:	00000d06 	br	803b04 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803ad0:	e0bff004 	addi	r2,fp,-64
  803ad4:	100b883a 	mov	r5,r2
  803ad8:	e13fff17 	ldw	r4,-4(fp)
  803adc:	08039880 	call	803988 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803ae0:	e0bff117 	ldw	r2,-60(fp)
  803ae4:	10880020 	cmpeqi	r2,r2,8192
  803ae8:	10803fcc 	andi	r2,r2,255
  803aec:	00000506 	br	803b04 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803af0:	0803a380 	call	803a38 <alt_get_errno>
  803af4:	1007883a 	mov	r3,r2
  803af8:	00801444 	movi	r2,81
  803afc:	18800015 	stw	r2,0(r3)
    return 0;
  803b00:	0005883a 	mov	r2,zero
  }
}
  803b04:	e037883a 	mov	sp,fp
  803b08:	dfc00117 	ldw	ra,4(sp)
  803b0c:	df000017 	ldw	fp,0(sp)
  803b10:	dec00204 	addi	sp,sp,8
  803b14:	f800283a 	ret

00803b18 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  803b18:	defffc04 	addi	sp,sp,-16
  803b1c:	df000315 	stw	fp,12(sp)
  803b20:	df000304 	addi	fp,sp,12
  803b24:	e13ffd15 	stw	r4,-12(fp)
  803b28:	e17ffe15 	stw	r5,-8(fp)
  803b2c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  803b30:	e0fffe17 	ldw	r3,-8(fp)
  803b34:	e0bffd17 	ldw	r2,-12(fp)
  803b38:	18800c26 	beq	r3,r2,803b6c <alt_load_section+0x54>
  {
    while( to != end )
  803b3c:	00000806 	br	803b60 <alt_load_section+0x48>
    {
      *to++ = *from++;
  803b40:	e0bffe17 	ldw	r2,-8(fp)
  803b44:	10c00104 	addi	r3,r2,4
  803b48:	e0fffe15 	stw	r3,-8(fp)
  803b4c:	e0fffd17 	ldw	r3,-12(fp)
  803b50:	19000104 	addi	r4,r3,4
  803b54:	e13ffd15 	stw	r4,-12(fp)
  803b58:	18c00017 	ldw	r3,0(r3)
  803b5c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  803b60:	e0fffe17 	ldw	r3,-8(fp)
  803b64:	e0bfff17 	ldw	r2,-4(fp)
  803b68:	18bff51e 	bne	r3,r2,803b40 <__alt_mem_onchip_mem+0xff7fbb40>
    {
      *to++ = *from++;
    }
  }
}
  803b6c:	0001883a 	nop
  803b70:	e037883a 	mov	sp,fp
  803b74:	df000017 	ldw	fp,0(sp)
  803b78:	dec00104 	addi	sp,sp,4
  803b7c:	f800283a 	ret

00803b80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803b80:	defffe04 	addi	sp,sp,-8
  803b84:	dfc00115 	stw	ra,4(sp)
  803b88:	df000015 	stw	fp,0(sp)
  803b8c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  803b90:	01802074 	movhi	r6,129
  803b94:	31a5e504 	addi	r6,r6,-26732
  803b98:	01402034 	movhi	r5,128
  803b9c:	295ecf04 	addi	r5,r5,31548
  803ba0:	01002074 	movhi	r4,129
  803ba4:	2125e504 	addi	r4,r4,-26732
  803ba8:	0803b180 	call	803b18 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  803bac:	01802034 	movhi	r6,128
  803bb0:	31809104 	addi	r6,r6,580
  803bb4:	01402034 	movhi	r5,128
  803bb8:	29400804 	addi	r5,r5,32
  803bbc:	01002034 	movhi	r4,128
  803bc0:	21000804 	addi	r4,r4,32
  803bc4:	0803b180 	call	803b18 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  803bc8:	01802034 	movhi	r6,128
  803bcc:	319ecf04 	addi	r6,r6,31548
  803bd0:	01402034 	movhi	r5,128
  803bd4:	295e1a04 	addi	r5,r5,30824
  803bd8:	01002034 	movhi	r4,128
  803bdc:	211e1a04 	addi	r4,r4,30824
  803be0:	0803b180 	call	803b18 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  803be4:	08066980 	call	806698 <alt_dcache_flush_all>
  alt_icache_flush_all();
  803be8:	08068580 	call	806858 <alt_icache_flush_all>
}
  803bec:	0001883a 	nop
  803bf0:	e037883a 	mov	sp,fp
  803bf4:	dfc00117 	ldw	ra,4(sp)
  803bf8:	df000017 	ldw	fp,0(sp)
  803bfc:	dec00204 	addi	sp,sp,8
  803c00:	f800283a 	ret

00803c04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803c04:	defffe04 	addi	sp,sp,-8
  803c08:	dfc00115 	stw	ra,4(sp)
  803c0c:	df000015 	stw	fp,0(sp)
  803c10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803c14:	d0a00917 	ldw	r2,-32732(gp)
  803c18:	10000326 	beq	r2,zero,803c28 <alt_get_errno+0x24>
  803c1c:	d0a00917 	ldw	r2,-32732(gp)
  803c20:	103ee83a 	callr	r2
  803c24:	00000106 	br	803c2c <alt_get_errno+0x28>
  803c28:	d0a72904 	addi	r2,gp,-25436
}
  803c2c:	e037883a 	mov	sp,fp
  803c30:	dfc00117 	ldw	ra,4(sp)
  803c34:	df000017 	ldw	fp,0(sp)
  803c38:	dec00204 	addi	sp,sp,8
  803c3c:	f800283a 	ret

00803c40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803c40:	defff904 	addi	sp,sp,-28
  803c44:	dfc00615 	stw	ra,24(sp)
  803c48:	df000515 	stw	fp,20(sp)
  803c4c:	df000504 	addi	fp,sp,20
  803c50:	e13ffd15 	stw	r4,-12(fp)
  803c54:	e17ffe15 	stw	r5,-8(fp)
  803c58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803c5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803c60:	e0bffd17 	ldw	r2,-12(fp)
  803c64:	10000616 	blt	r2,zero,803c80 <lseek+0x40>
  803c68:	e0bffd17 	ldw	r2,-12(fp)
  803c6c:	10c00324 	muli	r3,r2,12
  803c70:	00802074 	movhi	r2,129
  803c74:	10a0e404 	addi	r2,r2,-31856
  803c78:	1885883a 	add	r2,r3,r2
  803c7c:	00000106 	br	803c84 <lseek+0x44>
  803c80:	0005883a 	mov	r2,zero
  803c84:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  803c88:	e0bffc17 	ldw	r2,-16(fp)
  803c8c:	10001026 	beq	r2,zero,803cd0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803c90:	e0bffc17 	ldw	r2,-16(fp)
  803c94:	10800017 	ldw	r2,0(r2)
  803c98:	10800717 	ldw	r2,28(r2)
  803c9c:	10000926 	beq	r2,zero,803cc4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803ca0:	e0bffc17 	ldw	r2,-16(fp)
  803ca4:	10800017 	ldw	r2,0(r2)
  803ca8:	10800717 	ldw	r2,28(r2)
  803cac:	e1bfff17 	ldw	r6,-4(fp)
  803cb0:	e17ffe17 	ldw	r5,-8(fp)
  803cb4:	e13ffc17 	ldw	r4,-16(fp)
  803cb8:	103ee83a 	callr	r2
  803cbc:	e0bffb15 	stw	r2,-20(fp)
  803cc0:	00000506 	br	803cd8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803cc4:	00bfde84 	movi	r2,-134
  803cc8:	e0bffb15 	stw	r2,-20(fp)
  803ccc:	00000206 	br	803cd8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  803cd0:	00bfebc4 	movi	r2,-81
  803cd4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  803cd8:	e0bffb17 	ldw	r2,-20(fp)
  803cdc:	1000070e 	bge	r2,zero,803cfc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  803ce0:	0803c040 	call	803c04 <alt_get_errno>
  803ce4:	1007883a 	mov	r3,r2
  803ce8:	e0bffb17 	ldw	r2,-20(fp)
  803cec:	0085c83a 	sub	r2,zero,r2
  803cf0:	18800015 	stw	r2,0(r3)
    rc = -1;
  803cf4:	00bfffc4 	movi	r2,-1
  803cf8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  803cfc:	e0bffb17 	ldw	r2,-20(fp)
}
  803d00:	e037883a 	mov	sp,fp
  803d04:	dfc00117 	ldw	ra,4(sp)
  803d08:	df000017 	ldw	fp,0(sp)
  803d0c:	dec00204 	addi	sp,sp,8
  803d10:	f800283a 	ret

00803d14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803d14:	defffd04 	addi	sp,sp,-12
  803d18:	dfc00215 	stw	ra,8(sp)
  803d1c:	df000115 	stw	fp,4(sp)
  803d20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803d24:	0009883a 	mov	r4,zero
  803d28:	080418c0 	call	80418c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  803d2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803d30:	08041c40 	call	8041c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803d34:	01802034 	movhi	r6,128
  803d38:	319e2104 	addi	r6,r6,30852
  803d3c:	01402034 	movhi	r5,128
  803d40:	295e2104 	addi	r5,r5,30852
  803d44:	01002034 	movhi	r4,128
  803d48:	211e2104 	addi	r4,r4,30852
  803d4c:	0806bdc0 	call	806bdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803d50:	08067980 	call	806798 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803d54:	01002034 	movhi	r4,128
  803d58:	2119fe04 	addi	r4,r4,26616
  803d5c:	08074d40 	call	8074d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803d60:	d0a72a17 	ldw	r2,-25432(gp)
  803d64:	d0e72b17 	ldw	r3,-25428(gp)
  803d68:	d1272c17 	ldw	r4,-25424(gp)
  803d6c:	200d883a 	mov	r6,r4
  803d70:	180b883a 	mov	r5,r3
  803d74:	1009883a 	mov	r4,r2
  803d78:	08002800 	call	800280 <main>
  803d7c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  803d80:	01000044 	movi	r4,1
  803d84:	08038500 	call	803850 <close>
  exit (result);
  803d88:	e13fff17 	ldw	r4,-4(fp)
  803d8c:	08074e80 	call	8074e8 <exit>

00803d90 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  803d90:	defffe04 	addi	sp,sp,-8
  803d94:	df000115 	stw	fp,4(sp)
  803d98:	df000104 	addi	fp,sp,4
  803d9c:	e13fff15 	stw	r4,-4(fp)
}
  803da0:	0001883a 	nop
  803da4:	e037883a 	mov	sp,fp
  803da8:	df000017 	ldw	fp,0(sp)
  803dac:	dec00104 	addi	sp,sp,4
  803db0:	f800283a 	ret

00803db4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803db4:	defffe04 	addi	sp,sp,-8
  803db8:	df000115 	stw	fp,4(sp)
  803dbc:	df000104 	addi	fp,sp,4
  803dc0:	e13fff15 	stw	r4,-4(fp)
}
  803dc4:	0001883a 	nop
  803dc8:	e037883a 	mov	sp,fp
  803dcc:	df000017 	ldw	fp,0(sp)
  803dd0:	dec00104 	addi	sp,sp,4
  803dd4:	f800283a 	ret

00803dd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803dd8:	defffe04 	addi	sp,sp,-8
  803ddc:	dfc00115 	stw	ra,4(sp)
  803de0:	df000015 	stw	fp,0(sp)
  803de4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803de8:	d0a00917 	ldw	r2,-32732(gp)
  803dec:	10000326 	beq	r2,zero,803dfc <alt_get_errno+0x24>
  803df0:	d0a00917 	ldw	r2,-32732(gp)
  803df4:	103ee83a 	callr	r2
  803df8:	00000106 	br	803e00 <alt_get_errno+0x28>
  803dfc:	d0a72904 	addi	r2,gp,-25436
}
  803e00:	e037883a 	mov	sp,fp
  803e04:	dfc00117 	ldw	ra,4(sp)
  803e08:	df000017 	ldw	fp,0(sp)
  803e0c:	dec00204 	addi	sp,sp,8
  803e10:	f800283a 	ret

00803e14 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  803e14:	defff904 	addi	sp,sp,-28
  803e18:	dfc00615 	stw	ra,24(sp)
  803e1c:	df000515 	stw	fp,20(sp)
  803e20:	df000504 	addi	fp,sp,20
  803e24:	e13ffd15 	stw	r4,-12(fp)
  803e28:	e17ffe15 	stw	r5,-8(fp)
  803e2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803e30:	e0bffd17 	ldw	r2,-12(fp)
  803e34:	10000616 	blt	r2,zero,803e50 <read+0x3c>
  803e38:	e0bffd17 	ldw	r2,-12(fp)
  803e3c:	10c00324 	muli	r3,r2,12
  803e40:	00802074 	movhi	r2,129
  803e44:	10a0e404 	addi	r2,r2,-31856
  803e48:	1885883a 	add	r2,r3,r2
  803e4c:	00000106 	br	803e54 <read+0x40>
  803e50:	0005883a 	mov	r2,zero
  803e54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  803e58:	e0bffb17 	ldw	r2,-20(fp)
  803e5c:	10002226 	beq	r2,zero,803ee8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803e60:	e0bffb17 	ldw	r2,-20(fp)
  803e64:	10800217 	ldw	r2,8(r2)
  803e68:	108000cc 	andi	r2,r2,3
  803e6c:	10800060 	cmpeqi	r2,r2,1
  803e70:	1000181e 	bne	r2,zero,803ed4 <read+0xc0>
        (fd->dev->read))
  803e74:	e0bffb17 	ldw	r2,-20(fp)
  803e78:	10800017 	ldw	r2,0(r2)
  803e7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803e80:	10001426 	beq	r2,zero,803ed4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803e84:	e0bffb17 	ldw	r2,-20(fp)
  803e88:	10800017 	ldw	r2,0(r2)
  803e8c:	10800517 	ldw	r2,20(r2)
  803e90:	e0ffff17 	ldw	r3,-4(fp)
  803e94:	180d883a 	mov	r6,r3
  803e98:	e17ffe17 	ldw	r5,-8(fp)
  803e9c:	e13ffb17 	ldw	r4,-20(fp)
  803ea0:	103ee83a 	callr	r2
  803ea4:	e0bffc15 	stw	r2,-16(fp)
  803ea8:	e0bffc17 	ldw	r2,-16(fp)
  803eac:	1000070e 	bge	r2,zero,803ecc <read+0xb8>
        {
          ALT_ERRNO = -rval;
  803eb0:	0803dd80 	call	803dd8 <alt_get_errno>
  803eb4:	1007883a 	mov	r3,r2
  803eb8:	e0bffc17 	ldw	r2,-16(fp)
  803ebc:	0085c83a 	sub	r2,zero,r2
  803ec0:	18800015 	stw	r2,0(r3)
          return -1;
  803ec4:	00bfffc4 	movi	r2,-1
  803ec8:	00000c06 	br	803efc <read+0xe8>
        }
        return rval;
  803ecc:	e0bffc17 	ldw	r2,-16(fp)
  803ed0:	00000a06 	br	803efc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  803ed4:	0803dd80 	call	803dd8 <alt_get_errno>
  803ed8:	1007883a 	mov	r3,r2
  803edc:	00800344 	movi	r2,13
  803ee0:	18800015 	stw	r2,0(r3)
  803ee4:	00000406 	br	803ef8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  803ee8:	0803dd80 	call	803dd8 <alt_get_errno>
  803eec:	1007883a 	mov	r3,r2
  803ef0:	00801444 	movi	r2,81
  803ef4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803ef8:	00bfffc4 	movi	r2,-1
}
  803efc:	e037883a 	mov	sp,fp
  803f00:	dfc00117 	ldw	ra,4(sp)
  803f04:	df000017 	ldw	fp,0(sp)
  803f08:	dec00204 	addi	sp,sp,8
  803f0c:	f800283a 	ret

00803f10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803f10:	defffe04 	addi	sp,sp,-8
  803f14:	df000115 	stw	fp,4(sp)
  803f18:	df000104 	addi	fp,sp,4
  803f1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803f20:	e0bfff17 	ldw	r2,-4(fp)
  803f24:	108000d0 	cmplti	r2,r2,3
  803f28:	10000d1e 	bne	r2,zero,803f60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803f2c:	00802074 	movhi	r2,129
  803f30:	10a0e404 	addi	r2,r2,-31856
  803f34:	e0ffff17 	ldw	r3,-4(fp)
  803f38:	18c00324 	muli	r3,r3,12
  803f3c:	10c5883a 	add	r2,r2,r3
  803f40:	10800204 	addi	r2,r2,8
  803f44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803f48:	00802074 	movhi	r2,129
  803f4c:	10a0e404 	addi	r2,r2,-31856
  803f50:	e0ffff17 	ldw	r3,-4(fp)
  803f54:	18c00324 	muli	r3,r3,12
  803f58:	10c5883a 	add	r2,r2,r3
  803f5c:	10000015 	stw	zero,0(r2)
  }
}
  803f60:	0001883a 	nop
  803f64:	e037883a 	mov	sp,fp
  803f68:	df000017 	ldw	fp,0(sp)
  803f6c:	dec00104 	addi	sp,sp,4
  803f70:	f800283a 	ret

00803f74 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803f74:	defff904 	addi	sp,sp,-28
  803f78:	df000615 	stw	fp,24(sp)
  803f7c:	df000604 	addi	fp,sp,24
  803f80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803f84:	0005303a 	rdctl	r2,status
  803f88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803f8c:	e0fffe17 	ldw	r3,-8(fp)
  803f90:	00bfff84 	movi	r2,-2
  803f94:	1884703a 	and	r2,r3,r2
  803f98:	1001703a 	wrctl	status,r2
  
  return context;
  803f9c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803fa0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803fa4:	d0a00a17 	ldw	r2,-32728(gp)
  803fa8:	10c000c4 	addi	r3,r2,3
  803fac:	00bfff04 	movi	r2,-4
  803fb0:	1884703a 	and	r2,r3,r2
  803fb4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  803fb8:	d0e00a17 	ldw	r3,-32728(gp)
  803fbc:	e0bfff17 	ldw	r2,-4(fp)
  803fc0:	1887883a 	add	r3,r3,r2
  803fc4:	00804034 	movhi	r2,256
  803fc8:	10800004 	addi	r2,r2,0
  803fcc:	10c0062e 	bgeu	r2,r3,803fe8 <sbrk+0x74>
  803fd0:	e0bffb17 	ldw	r2,-20(fp)
  803fd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803fd8:	e0bffa17 	ldw	r2,-24(fp)
  803fdc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803fe0:	00bfffc4 	movi	r2,-1
  803fe4:	00000b06 	br	804014 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  803fe8:	d0a00a17 	ldw	r2,-32728(gp)
  803fec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  803ff0:	d0e00a17 	ldw	r3,-32728(gp)
  803ff4:	e0bfff17 	ldw	r2,-4(fp)
  803ff8:	1885883a 	add	r2,r3,r2
  803ffc:	d0a00a15 	stw	r2,-32728(gp)
  804000:	e0bffb17 	ldw	r2,-20(fp)
  804004:	e0bffc15 	stw	r2,-16(fp)
  804008:	e0bffc17 	ldw	r2,-16(fp)
  80400c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  804010:	e0bffd17 	ldw	r2,-12(fp)
} 
  804014:	e037883a 	mov	sp,fp
  804018:	df000017 	ldw	fp,0(sp)
  80401c:	dec00104 	addi	sp,sp,4
  804020:	f800283a 	ret

00804024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804024:	defffe04 	addi	sp,sp,-8
  804028:	dfc00115 	stw	ra,4(sp)
  80402c:	df000015 	stw	fp,0(sp)
  804030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804034:	d0a00917 	ldw	r2,-32732(gp)
  804038:	10000326 	beq	r2,zero,804048 <alt_get_errno+0x24>
  80403c:	d0a00917 	ldw	r2,-32732(gp)
  804040:	103ee83a 	callr	r2
  804044:	00000106 	br	80404c <alt_get_errno+0x28>
  804048:	d0a72904 	addi	r2,gp,-25436
}
  80404c:	e037883a 	mov	sp,fp
  804050:	dfc00117 	ldw	ra,4(sp)
  804054:	df000017 	ldw	fp,0(sp)
  804058:	dec00204 	addi	sp,sp,8
  80405c:	f800283a 	ret

00804060 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  804060:	defff904 	addi	sp,sp,-28
  804064:	dfc00615 	stw	ra,24(sp)
  804068:	df000515 	stw	fp,20(sp)
  80406c:	df000504 	addi	fp,sp,20
  804070:	e13ffd15 	stw	r4,-12(fp)
  804074:	e17ffe15 	stw	r5,-8(fp)
  804078:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80407c:	e0bffd17 	ldw	r2,-12(fp)
  804080:	10000616 	blt	r2,zero,80409c <write+0x3c>
  804084:	e0bffd17 	ldw	r2,-12(fp)
  804088:	10c00324 	muli	r3,r2,12
  80408c:	00802074 	movhi	r2,129
  804090:	10a0e404 	addi	r2,r2,-31856
  804094:	1885883a 	add	r2,r3,r2
  804098:	00000106 	br	8040a0 <write+0x40>
  80409c:	0005883a 	mov	r2,zero
  8040a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8040a4:	e0bffb17 	ldw	r2,-20(fp)
  8040a8:	10002126 	beq	r2,zero,804130 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8040ac:	e0bffb17 	ldw	r2,-20(fp)
  8040b0:	10800217 	ldw	r2,8(r2)
  8040b4:	108000cc 	andi	r2,r2,3
  8040b8:	10001826 	beq	r2,zero,80411c <write+0xbc>
  8040bc:	e0bffb17 	ldw	r2,-20(fp)
  8040c0:	10800017 	ldw	r2,0(r2)
  8040c4:	10800617 	ldw	r2,24(r2)
  8040c8:	10001426 	beq	r2,zero,80411c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8040cc:	e0bffb17 	ldw	r2,-20(fp)
  8040d0:	10800017 	ldw	r2,0(r2)
  8040d4:	10800617 	ldw	r2,24(r2)
  8040d8:	e0ffff17 	ldw	r3,-4(fp)
  8040dc:	180d883a 	mov	r6,r3
  8040e0:	e17ffe17 	ldw	r5,-8(fp)
  8040e4:	e13ffb17 	ldw	r4,-20(fp)
  8040e8:	103ee83a 	callr	r2
  8040ec:	e0bffc15 	stw	r2,-16(fp)
  8040f0:	e0bffc17 	ldw	r2,-16(fp)
  8040f4:	1000070e 	bge	r2,zero,804114 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8040f8:	08040240 	call	804024 <alt_get_errno>
  8040fc:	1007883a 	mov	r3,r2
  804100:	e0bffc17 	ldw	r2,-16(fp)
  804104:	0085c83a 	sub	r2,zero,r2
  804108:	18800015 	stw	r2,0(r3)
        return -1;
  80410c:	00bfffc4 	movi	r2,-1
  804110:	00000c06 	br	804144 <write+0xe4>
      }
      return rval;
  804114:	e0bffc17 	ldw	r2,-16(fp)
  804118:	00000a06 	br	804144 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80411c:	08040240 	call	804024 <alt_get_errno>
  804120:	1007883a 	mov	r3,r2
  804124:	00800344 	movi	r2,13
  804128:	18800015 	stw	r2,0(r3)
  80412c:	00000406 	br	804140 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  804130:	08040240 	call	804024 <alt_get_errno>
  804134:	1007883a 	mov	r3,r2
  804138:	00801444 	movi	r2,81
  80413c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  804140:	00bfffc4 	movi	r2,-1
}
  804144:	e037883a 	mov	sp,fp
  804148:	dfc00117 	ldw	ra,4(sp)
  80414c:	df000017 	ldw	fp,0(sp)
  804150:	dec00204 	addi	sp,sp,8
  804154:	f800283a 	ret

00804158 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  804158:	defffd04 	addi	sp,sp,-12
  80415c:	dfc00215 	stw	ra,8(sp)
  804160:	df000115 	stw	fp,4(sp)
  804164:	df000104 	addi	fp,sp,4
  804168:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80416c:	d1600604 	addi	r5,gp,-32744
  804170:	e13fff17 	ldw	r4,-4(fp)
  804174:	08066f40 	call	8066f4 <alt_dev_llist_insert>
}
  804178:	e037883a 	mov	sp,fp
  80417c:	dfc00117 	ldw	ra,4(sp)
  804180:	df000017 	ldw	fp,0(sp)
  804184:	dec00204 	addi	sp,sp,8
  804188:	f800283a 	ret

0080418c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80418c:	defffd04 	addi	sp,sp,-12
  804190:	dfc00215 	stw	ra,8(sp)
  804194:	df000115 	stw	fp,4(sp)
  804198:	df000104 	addi	fp,sp,4
  80419c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8041a0:	08070800 	call	807080 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8041a4:	00800044 	movi	r2,1
  8041a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8041ac:	0001883a 	nop
  8041b0:	e037883a 	mov	sp,fp
  8041b4:	dfc00117 	ldw	ra,4(sp)
  8041b8:	df000017 	ldw	fp,0(sp)
  8041bc:	dec00204 	addi	sp,sp,8
  8041c0:	f800283a 	ret

008041c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8041c4:	defffe04 	addi	sp,sp,-8
  8041c8:	dfc00115 	stw	ra,4(sp)
  8041cc:	df000015 	stw	fp,0(sp)
  8041d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8041d4:	01c0fa04 	movi	r7,1000
  8041d8:	01800044 	movi	r6,1
  8041dc:	000b883a 	mov	r5,zero
  8041e0:	01004074 	movhi	r4,257
  8041e4:	21040804 	addi	r4,r4,4128
  8041e8:	0805c180 	call	805c18 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8041ec:	000d883a 	mov	r6,zero
  8041f0:	000b883a 	mov	r5,zero
  8041f4:	01002074 	movhi	r4,129
  8041f8:	21214e04 	addi	r4,r4,-31432
  8041fc:	08043c00 	call	8043c0 <altera_avalon_jtag_uart_init>
  804200:	01002074 	movhi	r4,129
  804204:	21214404 	addi	r4,r4,-31472
  804208:	08041580 	call	804158 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80420c:	01002074 	movhi	r4,129
  804210:	21256604 	addi	r4,r4,-27240
  804214:	0805a0c0 	call	805a0c <altera_avalon_lcd_16207_init>
  804218:	01002074 	movhi	r4,129
  80421c:	21255c04 	addi	r4,r4,-27280
  804220:	08041580 	call	804158 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  804224:	01800104 	movi	r6,4
  804228:	000b883a 	mov	r5,zero
  80422c:	01002074 	movhi	r4,129
  804230:	2125ae04 	addi	r4,r4,-26952
  804234:	0805da40 	call	805da4 <altera_avalon_uart_init>
  804238:	01002074 	movhi	r4,129
  80423c:	2125a404 	addi	r4,r4,-26992
  804240:	08041580 	call	804158 <alt_dev_reg>
}
  804244:	0001883a 	nop
  804248:	e037883a 	mov	sp,fp
  80424c:	dfc00117 	ldw	ra,4(sp)
  804250:	df000017 	ldw	fp,0(sp)
  804254:	dec00204 	addi	sp,sp,8
  804258:	f800283a 	ret

0080425c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80425c:	defffa04 	addi	sp,sp,-24
  804260:	dfc00515 	stw	ra,20(sp)
  804264:	df000415 	stw	fp,16(sp)
  804268:	df000404 	addi	fp,sp,16
  80426c:	e13ffd15 	stw	r4,-12(fp)
  804270:	e17ffe15 	stw	r5,-8(fp)
  804274:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804278:	e0bffd17 	ldw	r2,-12(fp)
  80427c:	10800017 	ldw	r2,0(r2)
  804280:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  804284:	e0bffc17 	ldw	r2,-16(fp)
  804288:	10c00a04 	addi	r3,r2,40
  80428c:	e0bffd17 	ldw	r2,-12(fp)
  804290:	10800217 	ldw	r2,8(r2)
  804294:	100f883a 	mov	r7,r2
  804298:	e1bfff17 	ldw	r6,-4(fp)
  80429c:	e17ffe17 	ldw	r5,-8(fp)
  8042a0:	1809883a 	mov	r4,r3
  8042a4:	08048840 	call	804884 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8042a8:	e037883a 	mov	sp,fp
  8042ac:	dfc00117 	ldw	ra,4(sp)
  8042b0:	df000017 	ldw	fp,0(sp)
  8042b4:	dec00204 	addi	sp,sp,8
  8042b8:	f800283a 	ret

008042bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8042bc:	defffa04 	addi	sp,sp,-24
  8042c0:	dfc00515 	stw	ra,20(sp)
  8042c4:	df000415 	stw	fp,16(sp)
  8042c8:	df000404 	addi	fp,sp,16
  8042cc:	e13ffd15 	stw	r4,-12(fp)
  8042d0:	e17ffe15 	stw	r5,-8(fp)
  8042d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8042d8:	e0bffd17 	ldw	r2,-12(fp)
  8042dc:	10800017 	ldw	r2,0(r2)
  8042e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8042e4:	e0bffc17 	ldw	r2,-16(fp)
  8042e8:	10c00a04 	addi	r3,r2,40
  8042ec:	e0bffd17 	ldw	r2,-12(fp)
  8042f0:	10800217 	ldw	r2,8(r2)
  8042f4:	100f883a 	mov	r7,r2
  8042f8:	e1bfff17 	ldw	r6,-4(fp)
  8042fc:	e17ffe17 	ldw	r5,-8(fp)
  804300:	1809883a 	mov	r4,r3
  804304:	0804aa00 	call	804aa0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  804308:	e037883a 	mov	sp,fp
  80430c:	dfc00117 	ldw	ra,4(sp)
  804310:	df000017 	ldw	fp,0(sp)
  804314:	dec00204 	addi	sp,sp,8
  804318:	f800283a 	ret

0080431c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80431c:	defffc04 	addi	sp,sp,-16
  804320:	dfc00315 	stw	ra,12(sp)
  804324:	df000215 	stw	fp,8(sp)
  804328:	df000204 	addi	fp,sp,8
  80432c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  804330:	e0bfff17 	ldw	r2,-4(fp)
  804334:	10800017 	ldw	r2,0(r2)
  804338:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80433c:	e0bffe17 	ldw	r2,-8(fp)
  804340:	10c00a04 	addi	r3,r2,40
  804344:	e0bfff17 	ldw	r2,-4(fp)
  804348:	10800217 	ldw	r2,8(r2)
  80434c:	100b883a 	mov	r5,r2
  804350:	1809883a 	mov	r4,r3
  804354:	080472c0 	call	80472c <altera_avalon_jtag_uart_close>
}
  804358:	e037883a 	mov	sp,fp
  80435c:	dfc00117 	ldw	ra,4(sp)
  804360:	df000017 	ldw	fp,0(sp)
  804364:	dec00204 	addi	sp,sp,8
  804368:	f800283a 	ret

0080436c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80436c:	defffa04 	addi	sp,sp,-24
  804370:	dfc00515 	stw	ra,20(sp)
  804374:	df000415 	stw	fp,16(sp)
  804378:	df000404 	addi	fp,sp,16
  80437c:	e13ffd15 	stw	r4,-12(fp)
  804380:	e17ffe15 	stw	r5,-8(fp)
  804384:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  804388:	e0bffd17 	ldw	r2,-12(fp)
  80438c:	10800017 	ldw	r2,0(r2)
  804390:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  804394:	e0bffc17 	ldw	r2,-16(fp)
  804398:	10800a04 	addi	r2,r2,40
  80439c:	e1bfff17 	ldw	r6,-4(fp)
  8043a0:	e17ffe17 	ldw	r5,-8(fp)
  8043a4:	1009883a 	mov	r4,r2
  8043a8:	08047940 	call	804794 <altera_avalon_jtag_uart_ioctl>
}
  8043ac:	e037883a 	mov	sp,fp
  8043b0:	dfc00117 	ldw	ra,4(sp)
  8043b4:	df000017 	ldw	fp,0(sp)
  8043b8:	dec00204 	addi	sp,sp,8
  8043bc:	f800283a 	ret

008043c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8043c0:	defffa04 	addi	sp,sp,-24
  8043c4:	dfc00515 	stw	ra,20(sp)
  8043c8:	df000415 	stw	fp,16(sp)
  8043cc:	df000404 	addi	fp,sp,16
  8043d0:	e13ffd15 	stw	r4,-12(fp)
  8043d4:	e17ffe15 	stw	r5,-8(fp)
  8043d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8043dc:	e0bffd17 	ldw	r2,-12(fp)
  8043e0:	00c00044 	movi	r3,1
  8043e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8043e8:	e0bffd17 	ldw	r2,-12(fp)
  8043ec:	10800017 	ldw	r2,0(r2)
  8043f0:	10800104 	addi	r2,r2,4
  8043f4:	1007883a 	mov	r3,r2
  8043f8:	e0bffd17 	ldw	r2,-12(fp)
  8043fc:	10800817 	ldw	r2,32(r2)
  804400:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  804404:	e0bffe17 	ldw	r2,-8(fp)
  804408:	e0ffff17 	ldw	r3,-4(fp)
  80440c:	d8000015 	stw	zero,0(sp)
  804410:	e1fffd17 	ldw	r7,-12(fp)
  804414:	01802034 	movhi	r6,128
  804418:	31912004 	addi	r6,r6,17536
  80441c:	180b883a 	mov	r5,r3
  804420:	1009883a 	mov	r4,r2
  804424:	08068780 	call	806878 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  804428:	e0bffd17 	ldw	r2,-12(fp)
  80442c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  804430:	e0bffd17 	ldw	r2,-12(fp)
  804434:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804438:	d0e72e17 	ldw	r3,-25416(gp)
  80443c:	e1fffd17 	ldw	r7,-12(fp)
  804440:	01802034 	movhi	r6,128
  804444:	3191a304 	addi	r6,r6,18060
  804448:	180b883a 	mov	r5,r3
  80444c:	1009883a 	mov	r4,r2
  804450:	080656c0 	call	80656c <alt_alarm_start>
  804454:	1000040e 	bge	r2,zero,804468 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  804458:	e0fffd17 	ldw	r3,-12(fp)
  80445c:	00a00034 	movhi	r2,32768
  804460:	10bfffc4 	addi	r2,r2,-1
  804464:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  804468:	0001883a 	nop
  80446c:	e037883a 	mov	sp,fp
  804470:	dfc00117 	ldw	ra,4(sp)
  804474:	df000017 	ldw	fp,0(sp)
  804478:	dec00204 	addi	sp,sp,8
  80447c:	f800283a 	ret

00804480 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  804480:	defff804 	addi	sp,sp,-32
  804484:	df000715 	stw	fp,28(sp)
  804488:	df000704 	addi	fp,sp,28
  80448c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  804490:	e0bfff17 	ldw	r2,-4(fp)
  804494:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  804498:	e0bffb17 	ldw	r2,-20(fp)
  80449c:	10800017 	ldw	r2,0(r2)
  8044a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8044a4:	e0bffc17 	ldw	r2,-16(fp)
  8044a8:	10800104 	addi	r2,r2,4
  8044ac:	10800037 	ldwio	r2,0(r2)
  8044b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8044b4:	e0bffd17 	ldw	r2,-12(fp)
  8044b8:	1080c00c 	andi	r2,r2,768
  8044bc:	10006d26 	beq	r2,zero,804674 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8044c0:	e0bffd17 	ldw	r2,-12(fp)
  8044c4:	1080400c 	andi	r2,r2,256
  8044c8:	10003526 	beq	r2,zero,8045a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8044cc:	00800074 	movhi	r2,1
  8044d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8044d4:	e0bffb17 	ldw	r2,-20(fp)
  8044d8:	10800a17 	ldw	r2,40(r2)
  8044dc:	10800044 	addi	r2,r2,1
  8044e0:	1081ffcc 	andi	r2,r2,2047
  8044e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  8044e8:	e0bffb17 	ldw	r2,-20(fp)
  8044ec:	10c00b17 	ldw	r3,44(r2)
  8044f0:	e0bffe17 	ldw	r2,-8(fp)
  8044f4:	18801526 	beq	r3,r2,80454c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8044f8:	e0bffc17 	ldw	r2,-16(fp)
  8044fc:	10800037 	ldwio	r2,0(r2)
  804500:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  804504:	e0bff917 	ldw	r2,-28(fp)
  804508:	10a0000c 	andi	r2,r2,32768
  80450c:	10001126 	beq	r2,zero,804554 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804510:	e0bffb17 	ldw	r2,-20(fp)
  804514:	10800a17 	ldw	r2,40(r2)
  804518:	e0fff917 	ldw	r3,-28(fp)
  80451c:	1809883a 	mov	r4,r3
  804520:	e0fffb17 	ldw	r3,-20(fp)
  804524:	1885883a 	add	r2,r3,r2
  804528:	10800e04 	addi	r2,r2,56
  80452c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804530:	e0bffb17 	ldw	r2,-20(fp)
  804534:	10800a17 	ldw	r2,40(r2)
  804538:	10800044 	addi	r2,r2,1
  80453c:	10c1ffcc 	andi	r3,r2,2047
  804540:	e0bffb17 	ldw	r2,-20(fp)
  804544:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  804548:	003fe206 	br	8044d4 <__alt_mem_onchip_mem+0xff7fc4d4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80454c:	0001883a 	nop
  804550:	00000106 	br	804558 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  804554:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  804558:	e0bff917 	ldw	r2,-28(fp)
  80455c:	10bfffec 	andhi	r2,r2,65535
  804560:	10000f26 	beq	r2,zero,8045a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804564:	e0bffb17 	ldw	r2,-20(fp)
  804568:	10c00817 	ldw	r3,32(r2)
  80456c:	00bfff84 	movi	r2,-2
  804570:	1886703a 	and	r3,r3,r2
  804574:	e0bffb17 	ldw	r2,-20(fp)
  804578:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80457c:	e0bffc17 	ldw	r2,-16(fp)
  804580:	10800104 	addi	r2,r2,4
  804584:	1007883a 	mov	r3,r2
  804588:	e0bffb17 	ldw	r2,-20(fp)
  80458c:	10800817 	ldw	r2,32(r2)
  804590:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804594:	e0bffc17 	ldw	r2,-16(fp)
  804598:	10800104 	addi	r2,r2,4
  80459c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8045a0:	e0bffd17 	ldw	r2,-12(fp)
  8045a4:	1080800c 	andi	r2,r2,512
  8045a8:	103fbe26 	beq	r2,zero,8044a4 <__alt_mem_onchip_mem+0xff7fc4a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8045ac:	e0bffd17 	ldw	r2,-12(fp)
  8045b0:	1004d43a 	srli	r2,r2,16
  8045b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8045b8:	00001406 	br	80460c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8045bc:	e0bffc17 	ldw	r2,-16(fp)
  8045c0:	e0fffb17 	ldw	r3,-20(fp)
  8045c4:	18c00d17 	ldw	r3,52(r3)
  8045c8:	e13ffb17 	ldw	r4,-20(fp)
  8045cc:	20c7883a 	add	r3,r4,r3
  8045d0:	18c20e04 	addi	r3,r3,2104
  8045d4:	18c00003 	ldbu	r3,0(r3)
  8045d8:	18c03fcc 	andi	r3,r3,255
  8045dc:	18c0201c 	xori	r3,r3,128
  8045e0:	18ffe004 	addi	r3,r3,-128
  8045e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8045e8:	e0bffb17 	ldw	r2,-20(fp)
  8045ec:	10800d17 	ldw	r2,52(r2)
  8045f0:	10800044 	addi	r2,r2,1
  8045f4:	10c1ffcc 	andi	r3,r2,2047
  8045f8:	e0bffb17 	ldw	r2,-20(fp)
  8045fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  804600:	e0bffa17 	ldw	r2,-24(fp)
  804604:	10bfffc4 	addi	r2,r2,-1
  804608:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80460c:	e0bffa17 	ldw	r2,-24(fp)
  804610:	10000526 	beq	r2,zero,804628 <altera_avalon_jtag_uart_irq+0x1a8>
  804614:	e0bffb17 	ldw	r2,-20(fp)
  804618:	10c00d17 	ldw	r3,52(r2)
  80461c:	e0bffb17 	ldw	r2,-20(fp)
  804620:	10800c17 	ldw	r2,48(r2)
  804624:	18bfe51e 	bne	r3,r2,8045bc <__alt_mem_onchip_mem+0xff7fc5bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  804628:	e0bffa17 	ldw	r2,-24(fp)
  80462c:	103f9d26 	beq	r2,zero,8044a4 <__alt_mem_onchip_mem+0xff7fc4a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804630:	e0bffb17 	ldw	r2,-20(fp)
  804634:	10c00817 	ldw	r3,32(r2)
  804638:	00bfff44 	movi	r2,-3
  80463c:	1886703a 	and	r3,r3,r2
  804640:	e0bffb17 	ldw	r2,-20(fp)
  804644:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804648:	e0bffb17 	ldw	r2,-20(fp)
  80464c:	10800017 	ldw	r2,0(r2)
  804650:	10800104 	addi	r2,r2,4
  804654:	1007883a 	mov	r3,r2
  804658:	e0bffb17 	ldw	r2,-20(fp)
  80465c:	10800817 	ldw	r2,32(r2)
  804660:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  804664:	e0bffc17 	ldw	r2,-16(fp)
  804668:	10800104 	addi	r2,r2,4
  80466c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  804670:	003f8c06 	br	8044a4 <__alt_mem_onchip_mem+0xff7fc4a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  804674:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  804678:	0001883a 	nop
  80467c:	e037883a 	mov	sp,fp
  804680:	df000017 	ldw	fp,0(sp)
  804684:	dec00104 	addi	sp,sp,4
  804688:	f800283a 	ret

0080468c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80468c:	defff804 	addi	sp,sp,-32
  804690:	df000715 	stw	fp,28(sp)
  804694:	df000704 	addi	fp,sp,28
  804698:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80469c:	e0bffb17 	ldw	r2,-20(fp)
  8046a0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8046a4:	e0bff917 	ldw	r2,-28(fp)
  8046a8:	10800017 	ldw	r2,0(r2)
  8046ac:	10800104 	addi	r2,r2,4
  8046b0:	10800037 	ldwio	r2,0(r2)
  8046b4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8046b8:	e0bffa17 	ldw	r2,-24(fp)
  8046bc:	1081000c 	andi	r2,r2,1024
  8046c0:	10000b26 	beq	r2,zero,8046f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8046c4:	e0bff917 	ldw	r2,-28(fp)
  8046c8:	10800017 	ldw	r2,0(r2)
  8046cc:	10800104 	addi	r2,r2,4
  8046d0:	1007883a 	mov	r3,r2
  8046d4:	e0bff917 	ldw	r2,-28(fp)
  8046d8:	10800817 	ldw	r2,32(r2)
  8046dc:	10810014 	ori	r2,r2,1024
  8046e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8046e4:	e0bff917 	ldw	r2,-28(fp)
  8046e8:	10000915 	stw	zero,36(r2)
  8046ec:	00000a06 	br	804718 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8046f0:	e0bff917 	ldw	r2,-28(fp)
  8046f4:	10c00917 	ldw	r3,36(r2)
  8046f8:	00a00034 	movhi	r2,32768
  8046fc:	10bfff04 	addi	r2,r2,-4
  804700:	10c00536 	bltu	r2,r3,804718 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  804704:	e0bff917 	ldw	r2,-28(fp)
  804708:	10800917 	ldw	r2,36(r2)
  80470c:	10c00044 	addi	r3,r2,1
  804710:	e0bff917 	ldw	r2,-28(fp)
  804714:	10c00915 	stw	r3,36(r2)
  804718:	d0a72e17 	ldw	r2,-25416(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80471c:	e037883a 	mov	sp,fp
  804720:	df000017 	ldw	fp,0(sp)
  804724:	dec00104 	addi	sp,sp,4
  804728:	f800283a 	ret

0080472c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80472c:	defffd04 	addi	sp,sp,-12
  804730:	df000215 	stw	fp,8(sp)
  804734:	df000204 	addi	fp,sp,8
  804738:	e13ffe15 	stw	r4,-8(fp)
  80473c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804740:	00000506 	br	804758 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  804744:	e0bfff17 	ldw	r2,-4(fp)
  804748:	1090000c 	andi	r2,r2,16384
  80474c:	10000226 	beq	r2,zero,804758 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  804750:	00bffd44 	movi	r2,-11
  804754:	00000b06 	br	804784 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804758:	e0bffe17 	ldw	r2,-8(fp)
  80475c:	10c00d17 	ldw	r3,52(r2)
  804760:	e0bffe17 	ldw	r2,-8(fp)
  804764:	10800c17 	ldw	r2,48(r2)
  804768:	18800526 	beq	r3,r2,804780 <altera_avalon_jtag_uart_close+0x54>
  80476c:	e0bffe17 	ldw	r2,-8(fp)
  804770:	10c00917 	ldw	r3,36(r2)
  804774:	e0bffe17 	ldw	r2,-8(fp)
  804778:	10800117 	ldw	r2,4(r2)
  80477c:	18bff136 	bltu	r3,r2,804744 <__alt_mem_onchip_mem+0xff7fc744>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  804780:	0005883a 	mov	r2,zero
}
  804784:	e037883a 	mov	sp,fp
  804788:	df000017 	ldw	fp,0(sp)
  80478c:	dec00104 	addi	sp,sp,4
  804790:	f800283a 	ret

00804794 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  804794:	defffa04 	addi	sp,sp,-24
  804798:	df000515 	stw	fp,20(sp)
  80479c:	df000504 	addi	fp,sp,20
  8047a0:	e13ffd15 	stw	r4,-12(fp)
  8047a4:	e17ffe15 	stw	r5,-8(fp)
  8047a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  8047ac:	00bff9c4 	movi	r2,-25
  8047b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  8047b4:	e0bffe17 	ldw	r2,-8(fp)
  8047b8:	10da8060 	cmpeqi	r3,r2,27137
  8047bc:	1800031e 	bne	r3,zero,8047cc <altera_avalon_jtag_uart_ioctl+0x38>
  8047c0:	109a80a0 	cmpeqi	r2,r2,27138
  8047c4:	1000181e 	bne	r2,zero,804828 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  8047c8:	00002906 	br	804870 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8047cc:	e0bffd17 	ldw	r2,-12(fp)
  8047d0:	10c00117 	ldw	r3,4(r2)
  8047d4:	00a00034 	movhi	r2,32768
  8047d8:	10bfffc4 	addi	r2,r2,-1
  8047dc:	18802126 	beq	r3,r2,804864 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  8047e0:	e0bfff17 	ldw	r2,-4(fp)
  8047e4:	10800017 	ldw	r2,0(r2)
  8047e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8047ec:	e0bffc17 	ldw	r2,-16(fp)
  8047f0:	10800090 	cmplti	r2,r2,2
  8047f4:	1000061e 	bne	r2,zero,804810 <altera_avalon_jtag_uart_ioctl+0x7c>
  8047f8:	e0fffc17 	ldw	r3,-16(fp)
  8047fc:	00a00034 	movhi	r2,32768
  804800:	10bfffc4 	addi	r2,r2,-1
  804804:	18800226 	beq	r3,r2,804810 <altera_avalon_jtag_uart_ioctl+0x7c>
  804808:	e0bffc17 	ldw	r2,-16(fp)
  80480c:	00000206 	br	804818 <altera_avalon_jtag_uart_ioctl+0x84>
  804810:	00a00034 	movhi	r2,32768
  804814:	10bfff84 	addi	r2,r2,-2
  804818:	e0fffd17 	ldw	r3,-12(fp)
  80481c:	18800115 	stw	r2,4(r3)
      rc = 0;
  804820:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  804824:	00000f06 	br	804864 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  804828:	e0bffd17 	ldw	r2,-12(fp)
  80482c:	10c00117 	ldw	r3,4(r2)
  804830:	00a00034 	movhi	r2,32768
  804834:	10bfffc4 	addi	r2,r2,-1
  804838:	18800c26 	beq	r3,r2,80486c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80483c:	e0bffd17 	ldw	r2,-12(fp)
  804840:	10c00917 	ldw	r3,36(r2)
  804844:	e0bffd17 	ldw	r2,-12(fp)
  804848:	10800117 	ldw	r2,4(r2)
  80484c:	1885803a 	cmpltu	r2,r3,r2
  804850:	10c03fcc 	andi	r3,r2,255
  804854:	e0bfff17 	ldw	r2,-4(fp)
  804858:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80485c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  804860:	00000206 	br	80486c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  804864:	0001883a 	nop
  804868:	00000106 	br	804870 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80486c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  804870:	e0bffb17 	ldw	r2,-20(fp)
}
  804874:	e037883a 	mov	sp,fp
  804878:	df000017 	ldw	fp,0(sp)
  80487c:	dec00104 	addi	sp,sp,4
  804880:	f800283a 	ret

00804884 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  804884:	defff304 	addi	sp,sp,-52
  804888:	dfc00c15 	stw	ra,48(sp)
  80488c:	df000b15 	stw	fp,44(sp)
  804890:	df000b04 	addi	fp,sp,44
  804894:	e13ffc15 	stw	r4,-16(fp)
  804898:	e17ffd15 	stw	r5,-12(fp)
  80489c:	e1bffe15 	stw	r6,-8(fp)
  8048a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8048a4:	e0bffd17 	ldw	r2,-12(fp)
  8048a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8048ac:	00004706 	br	8049cc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8048b0:	e0bffc17 	ldw	r2,-16(fp)
  8048b4:	10800a17 	ldw	r2,40(r2)
  8048b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8048bc:	e0bffc17 	ldw	r2,-16(fp)
  8048c0:	10800b17 	ldw	r2,44(r2)
  8048c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8048c8:	e0fff717 	ldw	r3,-36(fp)
  8048cc:	e0bff817 	ldw	r2,-32(fp)
  8048d0:	18800536 	bltu	r3,r2,8048e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8048d4:	e0fff717 	ldw	r3,-36(fp)
  8048d8:	e0bff817 	ldw	r2,-32(fp)
  8048dc:	1885c83a 	sub	r2,r3,r2
  8048e0:	e0bff615 	stw	r2,-40(fp)
  8048e4:	00000406 	br	8048f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8048e8:	00c20004 	movi	r3,2048
  8048ec:	e0bff817 	ldw	r2,-32(fp)
  8048f0:	1885c83a 	sub	r2,r3,r2
  8048f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8048f8:	e0bff617 	ldw	r2,-40(fp)
  8048fc:	10001e26 	beq	r2,zero,804978 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  804900:	e0fffe17 	ldw	r3,-8(fp)
  804904:	e0bff617 	ldw	r2,-40(fp)
  804908:	1880022e 	bgeu	r3,r2,804914 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80490c:	e0bffe17 	ldw	r2,-8(fp)
  804910:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  804914:	e0bffc17 	ldw	r2,-16(fp)
  804918:	10c00e04 	addi	r3,r2,56
  80491c:	e0bff817 	ldw	r2,-32(fp)
  804920:	1885883a 	add	r2,r3,r2
  804924:	e1bff617 	ldw	r6,-40(fp)
  804928:	100b883a 	mov	r5,r2
  80492c:	e13ff517 	ldw	r4,-44(fp)
  804930:	0801e8c0 	call	801e8c <memcpy>
      ptr   += n;
  804934:	e0fff517 	ldw	r3,-44(fp)
  804938:	e0bff617 	ldw	r2,-40(fp)
  80493c:	1885883a 	add	r2,r3,r2
  804940:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  804944:	e0fffe17 	ldw	r3,-8(fp)
  804948:	e0bff617 	ldw	r2,-40(fp)
  80494c:	1885c83a 	sub	r2,r3,r2
  804950:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804954:	e0fff817 	ldw	r3,-32(fp)
  804958:	e0bff617 	ldw	r2,-40(fp)
  80495c:	1885883a 	add	r2,r3,r2
  804960:	10c1ffcc 	andi	r3,r2,2047
  804964:	e0bffc17 	ldw	r2,-16(fp)
  804968:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80496c:	e0bffe17 	ldw	r2,-8(fp)
  804970:	00bfcf16 	blt	zero,r2,8048b0 <__alt_mem_onchip_mem+0xff7fc8b0>
  804974:	00000106 	br	80497c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  804978:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80497c:	e0fff517 	ldw	r3,-44(fp)
  804980:	e0bffd17 	ldw	r2,-12(fp)
  804984:	1880141e 	bne	r3,r2,8049d8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  804988:	e0bfff17 	ldw	r2,-4(fp)
  80498c:	1090000c 	andi	r2,r2,16384
  804990:	1000131e 	bne	r2,zero,8049e0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  804994:	0001883a 	nop
  804998:	e0bffc17 	ldw	r2,-16(fp)
  80499c:	10c00a17 	ldw	r3,40(r2)
  8049a0:	e0bff717 	ldw	r2,-36(fp)
  8049a4:	1880051e 	bne	r3,r2,8049bc <altera_avalon_jtag_uart_read+0x138>
  8049a8:	e0bffc17 	ldw	r2,-16(fp)
  8049ac:	10c00917 	ldw	r3,36(r2)
  8049b0:	e0bffc17 	ldw	r2,-16(fp)
  8049b4:	10800117 	ldw	r2,4(r2)
  8049b8:	18bff736 	bltu	r3,r2,804998 <__alt_mem_onchip_mem+0xff7fc998>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8049bc:	e0bffc17 	ldw	r2,-16(fp)
  8049c0:	10c00a17 	ldw	r3,40(r2)
  8049c4:	e0bff717 	ldw	r2,-36(fp)
  8049c8:	18800726 	beq	r3,r2,8049e8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8049cc:	e0bffe17 	ldw	r2,-8(fp)
  8049d0:	00bfb716 	blt	zero,r2,8048b0 <__alt_mem_onchip_mem+0xff7fc8b0>
  8049d4:	00000506 	br	8049ec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8049d8:	0001883a 	nop
  8049dc:	00000306 	br	8049ec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8049e0:	0001883a 	nop
  8049e4:	00000106 	br	8049ec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8049e8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8049ec:	e0fff517 	ldw	r3,-44(fp)
  8049f0:	e0bffd17 	ldw	r2,-12(fp)
  8049f4:	18801826 	beq	r3,r2,804a58 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8049f8:	0005303a 	rdctl	r2,status
  8049fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a00:	e0fffb17 	ldw	r3,-20(fp)
  804a04:	00bfff84 	movi	r2,-2
  804a08:	1884703a 	and	r2,r3,r2
  804a0c:	1001703a 	wrctl	status,r2
  
  return context;
  804a10:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804a14:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  804a18:	e0bffc17 	ldw	r2,-16(fp)
  804a1c:	10800817 	ldw	r2,32(r2)
  804a20:	10c00054 	ori	r3,r2,1
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804a2c:	e0bffc17 	ldw	r2,-16(fp)
  804a30:	10800017 	ldw	r2,0(r2)
  804a34:	10800104 	addi	r2,r2,4
  804a38:	1007883a 	mov	r3,r2
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10800817 	ldw	r2,32(r2)
  804a44:	18800035 	stwio	r2,0(r3)
  804a48:	e0bffa17 	ldw	r2,-24(fp)
  804a4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a50:	e0bff917 	ldw	r2,-28(fp)
  804a54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  804a58:	e0fff517 	ldw	r3,-44(fp)
  804a5c:	e0bffd17 	ldw	r2,-12(fp)
  804a60:	18800426 	beq	r3,r2,804a74 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  804a64:	e0fff517 	ldw	r3,-44(fp)
  804a68:	e0bffd17 	ldw	r2,-12(fp)
  804a6c:	1885c83a 	sub	r2,r3,r2
  804a70:	00000606 	br	804a8c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  804a74:	e0bfff17 	ldw	r2,-4(fp)
  804a78:	1090000c 	andi	r2,r2,16384
  804a7c:	10000226 	beq	r2,zero,804a88 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  804a80:	00bffd44 	movi	r2,-11
  804a84:	00000106 	br	804a8c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  804a88:	00bffec4 	movi	r2,-5
}
  804a8c:	e037883a 	mov	sp,fp
  804a90:	dfc00117 	ldw	ra,4(sp)
  804a94:	df000017 	ldw	fp,0(sp)
  804a98:	dec00204 	addi	sp,sp,8
  804a9c:	f800283a 	ret

00804aa0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804aa0:	defff304 	addi	sp,sp,-52
  804aa4:	dfc00c15 	stw	ra,48(sp)
  804aa8:	df000b15 	stw	fp,44(sp)
  804aac:	df000b04 	addi	fp,sp,44
  804ab0:	e13ffc15 	stw	r4,-16(fp)
  804ab4:	e17ffd15 	stw	r5,-12(fp)
  804ab8:	e1bffe15 	stw	r6,-8(fp)
  804abc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804ac0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  804ac4:	e0bffd17 	ldw	r2,-12(fp)
  804ac8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804acc:	00003706 	br	804bac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  804ad0:	e0bffc17 	ldw	r2,-16(fp)
  804ad4:	10800c17 	ldw	r2,48(r2)
  804ad8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  804adc:	e0bffc17 	ldw	r2,-16(fp)
  804ae0:	10800d17 	ldw	r2,52(r2)
  804ae4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  804ae8:	e0fff917 	ldw	r3,-28(fp)
  804aec:	e0bff517 	ldw	r2,-44(fp)
  804af0:	1880062e 	bgeu	r3,r2,804b0c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  804af4:	e0fff517 	ldw	r3,-44(fp)
  804af8:	e0bff917 	ldw	r2,-28(fp)
  804afc:	1885c83a 	sub	r2,r3,r2
  804b00:	10bfffc4 	addi	r2,r2,-1
  804b04:	e0bff615 	stw	r2,-40(fp)
  804b08:	00000b06 	br	804b38 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  804b0c:	e0bff517 	ldw	r2,-44(fp)
  804b10:	10000526 	beq	r2,zero,804b28 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  804b14:	00c20004 	movi	r3,2048
  804b18:	e0bff917 	ldw	r2,-28(fp)
  804b1c:	1885c83a 	sub	r2,r3,r2
  804b20:	e0bff615 	stw	r2,-40(fp)
  804b24:	00000406 	br	804b38 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  804b28:	00c1ffc4 	movi	r3,2047
  804b2c:	e0bff917 	ldw	r2,-28(fp)
  804b30:	1885c83a 	sub	r2,r3,r2
  804b34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  804b38:	e0bff617 	ldw	r2,-40(fp)
  804b3c:	10001e26 	beq	r2,zero,804bb8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  804b40:	e0fffe17 	ldw	r3,-8(fp)
  804b44:	e0bff617 	ldw	r2,-40(fp)
  804b48:	1880022e 	bgeu	r3,r2,804b54 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  804b4c:	e0bffe17 	ldw	r2,-8(fp)
  804b50:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  804b54:	e0bffc17 	ldw	r2,-16(fp)
  804b58:	10c20e04 	addi	r3,r2,2104
  804b5c:	e0bff917 	ldw	r2,-28(fp)
  804b60:	1885883a 	add	r2,r3,r2
  804b64:	e1bff617 	ldw	r6,-40(fp)
  804b68:	e17ffd17 	ldw	r5,-12(fp)
  804b6c:	1009883a 	mov	r4,r2
  804b70:	0801e8c0 	call	801e8c <memcpy>
      ptr   += n;
  804b74:	e0fffd17 	ldw	r3,-12(fp)
  804b78:	e0bff617 	ldw	r2,-40(fp)
  804b7c:	1885883a 	add	r2,r3,r2
  804b80:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  804b84:	e0fffe17 	ldw	r3,-8(fp)
  804b88:	e0bff617 	ldw	r2,-40(fp)
  804b8c:	1885c83a 	sub	r2,r3,r2
  804b90:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804b94:	e0fff917 	ldw	r3,-28(fp)
  804b98:	e0bff617 	ldw	r2,-40(fp)
  804b9c:	1885883a 	add	r2,r3,r2
  804ba0:	10c1ffcc 	andi	r3,r2,2047
  804ba4:	e0bffc17 	ldw	r2,-16(fp)
  804ba8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804bac:	e0bffe17 	ldw	r2,-8(fp)
  804bb0:	00bfc716 	blt	zero,r2,804ad0 <__alt_mem_onchip_mem+0xff7fcad0>
  804bb4:	00000106 	br	804bbc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  804bb8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804bbc:	0005303a 	rdctl	r2,status
  804bc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804bc4:	e0fffb17 	ldw	r3,-20(fp)
  804bc8:	00bfff84 	movi	r2,-2
  804bcc:	1884703a 	and	r2,r3,r2
  804bd0:	1001703a 	wrctl	status,r2
  
  return context;
  804bd4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  804bd8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804bdc:	e0bffc17 	ldw	r2,-16(fp)
  804be0:	10800817 	ldw	r2,32(r2)
  804be4:	10c00094 	ori	r3,r2,2
  804be8:	e0bffc17 	ldw	r2,-16(fp)
  804bec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804bf0:	e0bffc17 	ldw	r2,-16(fp)
  804bf4:	10800017 	ldw	r2,0(r2)
  804bf8:	10800104 	addi	r2,r2,4
  804bfc:	1007883a 	mov	r3,r2
  804c00:	e0bffc17 	ldw	r2,-16(fp)
  804c04:	10800817 	ldw	r2,32(r2)
  804c08:	18800035 	stwio	r2,0(r3)
  804c0c:	e0bffa17 	ldw	r2,-24(fp)
  804c10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804c14:	e0bff817 	ldw	r2,-32(fp)
  804c18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  804c1c:	e0bffe17 	ldw	r2,-8(fp)
  804c20:	0080100e 	bge	zero,r2,804c64 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  804c24:	e0bfff17 	ldw	r2,-4(fp)
  804c28:	1090000c 	andi	r2,r2,16384
  804c2c:	1000101e 	bne	r2,zero,804c70 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  804c30:	0001883a 	nop
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10c00d17 	ldw	r3,52(r2)
  804c3c:	e0bff517 	ldw	r2,-44(fp)
  804c40:	1880051e 	bne	r3,r2,804c58 <altera_avalon_jtag_uart_write+0x1b8>
  804c44:	e0bffc17 	ldw	r2,-16(fp)
  804c48:	10c00917 	ldw	r3,36(r2)
  804c4c:	e0bffc17 	ldw	r2,-16(fp)
  804c50:	10800117 	ldw	r2,4(r2)
  804c54:	18bff736 	bltu	r3,r2,804c34 <__alt_mem_onchip_mem+0xff7fcc34>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  804c58:	e0bffc17 	ldw	r2,-16(fp)
  804c5c:	10800917 	ldw	r2,36(r2)
  804c60:	1000051e 	bne	r2,zero,804c78 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  804c64:	e0bffe17 	ldw	r2,-8(fp)
  804c68:	00bfd016 	blt	zero,r2,804bac <__alt_mem_onchip_mem+0xff7fcbac>
  804c6c:	00000306 	br	804c7c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  804c70:	0001883a 	nop
  804c74:	00000106 	br	804c7c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  804c78:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  804c7c:	e0fffd17 	ldw	r3,-12(fp)
  804c80:	e0bff717 	ldw	r2,-36(fp)
  804c84:	18800426 	beq	r3,r2,804c98 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  804c88:	e0fffd17 	ldw	r3,-12(fp)
  804c8c:	e0bff717 	ldw	r2,-36(fp)
  804c90:	1885c83a 	sub	r2,r3,r2
  804c94:	00000606 	br	804cb0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  804c98:	e0bfff17 	ldw	r2,-4(fp)
  804c9c:	1090000c 	andi	r2,r2,16384
  804ca0:	10000226 	beq	r2,zero,804cac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  804ca4:	00bffd44 	movi	r2,-11
  804ca8:	00000106 	br	804cb0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  804cac:	00bffec4 	movi	r2,-5
}
  804cb0:	e037883a 	mov	sp,fp
  804cb4:	dfc00117 	ldw	ra,4(sp)
  804cb8:	df000017 	ldw	fp,0(sp)
  804cbc:	dec00204 	addi	sp,sp,8
  804cc0:	f800283a 	ret

00804cc4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  804cc4:	defffa04 	addi	sp,sp,-24
  804cc8:	dfc00515 	stw	ra,20(sp)
  804ccc:	df000415 	stw	fp,16(sp)
  804cd0:	df000404 	addi	fp,sp,16
  804cd4:	e13ffe15 	stw	r4,-8(fp)
  804cd8:	2805883a 	mov	r2,r5
  804cdc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  804ce0:	e0bffe17 	ldw	r2,-8(fp)
  804ce4:	10800017 	ldw	r2,0(r2)
  804ce8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  804cec:	008003f4 	movhi	r2,15
  804cf0:	10909004 	addi	r2,r2,16960
  804cf4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  804cf8:	e0bffe17 	ldw	r2,-8(fp)
  804cfc:	10800803 	ldbu	r2,32(r2)
  804d00:	10803fcc 	andi	r2,r2,255
  804d04:	1080201c 	xori	r2,r2,128
  804d08:	10bfe004 	addi	r2,r2,-128
  804d0c:	1000151e 	bne	r2,zero,804d64 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  804d10:	00000906 	br	804d38 <lcd_write_command+0x74>
    if (--i == 0)
  804d14:	e0bffc17 	ldw	r2,-16(fp)
  804d18:	10bfffc4 	addi	r2,r2,-1
  804d1c:	e0bffc15 	stw	r2,-16(fp)
  804d20:	e0bffc17 	ldw	r2,-16(fp)
  804d24:	1000041e 	bne	r2,zero,804d38 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  804d28:	e0bffe17 	ldw	r2,-8(fp)
  804d2c:	00c00044 	movi	r3,1
  804d30:	10c00805 	stb	r3,32(r2)
      return;
  804d34:	00000c06 	br	804d68 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  804d38:	e0bffd17 	ldw	r2,-12(fp)
  804d3c:	10800104 	addi	r2,r2,4
  804d40:	10800037 	ldwio	r2,0(r2)
  804d44:	1080200c 	andi	r2,r2,128
  804d48:	103ff21e 	bne	r2,zero,804d14 <__alt_mem_onchip_mem+0xff7fcd14>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  804d4c:	01001904 	movi	r4,100
  804d50:	08070500 	call	807050 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  804d54:	e0bffd17 	ldw	r2,-12(fp)
  804d58:	e0ffff03 	ldbu	r3,-4(fp)
  804d5c:	10c00035 	stwio	r3,0(r2)
  804d60:	00000106 	br	804d68 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  804d64:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  804d68:	e037883a 	mov	sp,fp
  804d6c:	dfc00117 	ldw	ra,4(sp)
  804d70:	df000017 	ldw	fp,0(sp)
  804d74:	dec00204 	addi	sp,sp,8
  804d78:	f800283a 	ret

00804d7c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  804d7c:	defffa04 	addi	sp,sp,-24
  804d80:	dfc00515 	stw	ra,20(sp)
  804d84:	df000415 	stw	fp,16(sp)
  804d88:	df000404 	addi	fp,sp,16
  804d8c:	e13ffe15 	stw	r4,-8(fp)
  804d90:	2805883a 	mov	r2,r5
  804d94:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  804d98:	e0bffe17 	ldw	r2,-8(fp)
  804d9c:	10800017 	ldw	r2,0(r2)
  804da0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  804da4:	008003f4 	movhi	r2,15
  804da8:	10909004 	addi	r2,r2,16960
  804dac:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  804db0:	e0bffe17 	ldw	r2,-8(fp)
  804db4:	10800803 	ldbu	r2,32(r2)
  804db8:	10803fcc 	andi	r2,r2,255
  804dbc:	1080201c 	xori	r2,r2,128
  804dc0:	10bfe004 	addi	r2,r2,-128
  804dc4:	10001d1e 	bne	r2,zero,804e3c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  804dc8:	00000906 	br	804df0 <lcd_write_data+0x74>
    if (--i == 0)
  804dcc:	e0bffc17 	ldw	r2,-16(fp)
  804dd0:	10bfffc4 	addi	r2,r2,-1
  804dd4:	e0bffc15 	stw	r2,-16(fp)
  804dd8:	e0bffc17 	ldw	r2,-16(fp)
  804ddc:	1000041e 	bne	r2,zero,804df0 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  804de0:	e0bffe17 	ldw	r2,-8(fp)
  804de4:	00c00044 	movi	r3,1
  804de8:	10c00805 	stb	r3,32(r2)
      return;
  804dec:	00001406 	br	804e40 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  804df0:	e0bffd17 	ldw	r2,-12(fp)
  804df4:	10800104 	addi	r2,r2,4
  804df8:	10800037 	ldwio	r2,0(r2)
  804dfc:	1080200c 	andi	r2,r2,128
  804e00:	103ff21e 	bne	r2,zero,804dcc <__alt_mem_onchip_mem+0xff7fcdcc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  804e04:	01001904 	movi	r4,100
  804e08:	08070500 	call	807050 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  804e0c:	e0bffd17 	ldw	r2,-12(fp)
  804e10:	10800204 	addi	r2,r2,8
  804e14:	1007883a 	mov	r3,r2
  804e18:	e0bfff03 	ldbu	r2,-4(fp)
  804e1c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  804e20:	e0bffe17 	ldw	r2,-8(fp)
  804e24:	108008c3 	ldbu	r2,35(r2)
  804e28:	10800044 	addi	r2,r2,1
  804e2c:	1007883a 	mov	r3,r2
  804e30:	e0bffe17 	ldw	r2,-8(fp)
  804e34:	10c008c5 	stb	r3,35(r2)
  804e38:	00000106 	br	804e40 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  804e3c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  804e40:	e037883a 	mov	sp,fp
  804e44:	dfc00117 	ldw	ra,4(sp)
  804e48:	df000017 	ldw	fp,0(sp)
  804e4c:	dec00204 	addi	sp,sp,8
  804e50:	f800283a 	ret

00804e54 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  804e54:	defffc04 	addi	sp,sp,-16
  804e58:	dfc00315 	stw	ra,12(sp)
  804e5c:	df000215 	stw	fp,8(sp)
  804e60:	df000204 	addi	fp,sp,8
  804e64:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  804e68:	01400044 	movi	r5,1
  804e6c:	e13fff17 	ldw	r4,-4(fp)
  804e70:	0804cc40 	call	804cc4 <lcd_write_command>

  sp->x = 0;
  804e74:	e0bfff17 	ldw	r2,-4(fp)
  804e78:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  804e7c:	e0bfff17 	ldw	r2,-4(fp)
  804e80:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  804e84:	e0bfff17 	ldw	r2,-4(fp)
  804e88:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804e8c:	e03ffe15 	stw	zero,-8(fp)
  804e90:	00001b06 	br	804f00 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  804e94:	e0bffe17 	ldw	r2,-8(fp)
  804e98:	108018e4 	muli	r2,r2,99
  804e9c:	10801004 	addi	r2,r2,64
  804ea0:	e0ffff17 	ldw	r3,-4(fp)
  804ea4:	1885883a 	add	r2,r3,r2
  804ea8:	01801444 	movi	r6,81
  804eac:	01400804 	movi	r5,32
  804eb0:	1009883a 	mov	r4,r2
  804eb4:	08021300 	call	802130 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  804eb8:	e0bffe17 	ldw	r2,-8(fp)
  804ebc:	108018e4 	muli	r2,r2,99
  804ec0:	10800c04 	addi	r2,r2,48
  804ec4:	e0ffff17 	ldw	r3,-4(fp)
  804ec8:	1885883a 	add	r2,r3,r2
  804ecc:	01800404 	movi	r6,16
  804ed0:	01400804 	movi	r5,32
  804ed4:	1009883a 	mov	r4,r2
  804ed8:	08021300 	call	802130 <memset>
    sp->line[y].width = 0;
  804edc:	e0ffff17 	ldw	r3,-4(fp)
  804ee0:	e0bffe17 	ldw	r2,-8(fp)
  804ee4:	108018e4 	muli	r2,r2,99
  804ee8:	1885883a 	add	r2,r3,r2
  804eec:	10802444 	addi	r2,r2,145
  804ef0:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804ef4:	e0bffe17 	ldw	r2,-8(fp)
  804ef8:	10800044 	addi	r2,r2,1
  804efc:	e0bffe15 	stw	r2,-8(fp)
  804f00:	e0bffe17 	ldw	r2,-8(fp)
  804f04:	10800090 	cmplti	r2,r2,2
  804f08:	103fe21e 	bne	r2,zero,804e94 <__alt_mem_onchip_mem+0xff7fce94>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  804f0c:	0001883a 	nop
  804f10:	e037883a 	mov	sp,fp
  804f14:	dfc00117 	ldw	ra,4(sp)
  804f18:	df000017 	ldw	fp,0(sp)
  804f1c:	dec00204 	addi	sp,sp,8
  804f20:	f800283a 	ret

00804f24 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  804f24:	defff704 	addi	sp,sp,-36
  804f28:	dfc00815 	stw	ra,32(sp)
  804f2c:	df000715 	stw	fp,28(sp)
  804f30:	df000704 	addi	fp,sp,28
  804f34:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  804f38:	e0bfff17 	ldw	r2,-4(fp)
  804f3c:	10800943 	ldbu	r2,37(r2)
  804f40:	10803fcc 	andi	r2,r2,255
  804f44:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804f48:	e03ff915 	stw	zero,-28(fp)
  804f4c:	00006706 	br	8050ec <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  804f50:	e0ffff17 	ldw	r3,-4(fp)
  804f54:	e0bff917 	ldw	r2,-28(fp)
  804f58:	108018e4 	muli	r2,r2,99
  804f5c:	1885883a 	add	r2,r3,r2
  804f60:	10802444 	addi	r2,r2,145
  804f64:	10800003 	ldbu	r2,0(r2)
  804f68:	10803fcc 	andi	r2,r2,255
  804f6c:	1080201c 	xori	r2,r2,128
  804f70:	10bfe004 	addi	r2,r2,-128
  804f74:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  804f78:	e0ffff17 	ldw	r3,-4(fp)
  804f7c:	e0bff917 	ldw	r2,-28(fp)
  804f80:	108018e4 	muli	r2,r2,99
  804f84:	1885883a 	add	r2,r3,r2
  804f88:	10802484 	addi	r2,r2,146
  804f8c:	10800003 	ldbu	r2,0(r2)
  804f90:	10c03fcc 	andi	r3,r2,255
  804f94:	e0bffc17 	ldw	r2,-16(fp)
  804f98:	1885383a 	mul	r2,r3,r2
  804f9c:	1005d23a 	srai	r2,r2,8
  804fa0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  804fa4:	e0fffb17 	ldw	r3,-20(fp)
  804fa8:	e0bffd17 	ldw	r2,-12(fp)
  804fac:	18800116 	blt	r3,r2,804fb4 <lcd_repaint_screen+0x90>
      offset = 0;
  804fb0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  804fb4:	e03ffa15 	stw	zero,-24(fp)
  804fb8:	00004606 	br	8050d4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  804fbc:	e0fffa17 	ldw	r3,-24(fp)
  804fc0:	e0bffb17 	ldw	r2,-20(fp)
  804fc4:	1885883a 	add	r2,r3,r2
  804fc8:	e17ffd17 	ldw	r5,-12(fp)
  804fcc:	1009883a 	mov	r4,r2
  804fd0:	08036e40 	call	8036e4 <__modsi3>
  804fd4:	1009883a 	mov	r4,r2
  804fd8:	e0ffff17 	ldw	r3,-4(fp)
  804fdc:	e0bff917 	ldw	r2,-28(fp)
  804fe0:	108018e4 	muli	r2,r2,99
  804fe4:	1885883a 	add	r2,r3,r2
  804fe8:	1105883a 	add	r2,r2,r4
  804fec:	10801004 	addi	r2,r2,64
  804ff0:	10800003 	ldbu	r2,0(r2)
  804ff4:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  804ff8:	e0ffff17 	ldw	r3,-4(fp)
  804ffc:	e0bff917 	ldw	r2,-28(fp)
  805000:	108018e4 	muli	r2,r2,99
  805004:	1887883a 	add	r3,r3,r2
  805008:	e0bffa17 	ldw	r2,-24(fp)
  80500c:	1885883a 	add	r2,r3,r2
  805010:	10800c04 	addi	r2,r2,48
  805014:	10800003 	ldbu	r2,0(r2)
  805018:	10c03fcc 	andi	r3,r2,255
  80501c:	18c0201c 	xori	r3,r3,128
  805020:	18ffe004 	addi	r3,r3,-128
  805024:	e0bffe07 	ldb	r2,-8(fp)
  805028:	18802726 	beq	r3,r2,8050c8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80502c:	e0fff917 	ldw	r3,-28(fp)
  805030:	d0a00b04 	addi	r2,gp,-32724
  805034:	1885883a 	add	r2,r3,r2
  805038:	10800003 	ldbu	r2,0(r2)
  80503c:	1007883a 	mov	r3,r2
  805040:	e0bffa17 	ldw	r2,-24(fp)
  805044:	1885883a 	add	r2,r3,r2
  805048:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80504c:	e0fffe43 	ldbu	r3,-7(fp)
  805050:	e0bfff17 	ldw	r2,-4(fp)
  805054:	108008c3 	ldbu	r2,35(r2)
  805058:	10803fcc 	andi	r2,r2,255
  80505c:	1080201c 	xori	r2,r2,128
  805060:	10bfe004 	addi	r2,r2,-128
  805064:	18800a26 	beq	r3,r2,805090 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  805068:	e0fffe43 	ldbu	r3,-7(fp)
  80506c:	00bfe004 	movi	r2,-128
  805070:	1884b03a 	or	r2,r3,r2
  805074:	10803fcc 	andi	r2,r2,255
  805078:	100b883a 	mov	r5,r2
  80507c:	e13fff17 	ldw	r4,-4(fp)
  805080:	0804cc40 	call	804cc4 <lcd_write_command>
          sp->address = address;
  805084:	e0fffe43 	ldbu	r3,-7(fp)
  805088:	e0bfff17 	ldw	r2,-4(fp)
  80508c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  805090:	e0bffe03 	ldbu	r2,-8(fp)
  805094:	10803fcc 	andi	r2,r2,255
  805098:	100b883a 	mov	r5,r2
  80509c:	e13fff17 	ldw	r4,-4(fp)
  8050a0:	0804d7c0 	call	804d7c <lcd_write_data>
        sp->line[y].visible[x] = c;
  8050a4:	e0ffff17 	ldw	r3,-4(fp)
  8050a8:	e0bff917 	ldw	r2,-28(fp)
  8050ac:	108018e4 	muli	r2,r2,99
  8050b0:	1887883a 	add	r3,r3,r2
  8050b4:	e0bffa17 	ldw	r2,-24(fp)
  8050b8:	1885883a 	add	r2,r3,r2
  8050bc:	10800c04 	addi	r2,r2,48
  8050c0:	e0fffe03 	ldbu	r3,-8(fp)
  8050c4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8050c8:	e0bffa17 	ldw	r2,-24(fp)
  8050cc:	10800044 	addi	r2,r2,1
  8050d0:	e0bffa15 	stw	r2,-24(fp)
  8050d4:	e0bffa17 	ldw	r2,-24(fp)
  8050d8:	10800410 	cmplti	r2,r2,16
  8050dc:	103fb71e 	bne	r2,zero,804fbc <__alt_mem_onchip_mem+0xff7fcfbc>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8050e0:	e0bff917 	ldw	r2,-28(fp)
  8050e4:	10800044 	addi	r2,r2,1
  8050e8:	e0bff915 	stw	r2,-28(fp)
  8050ec:	e0bff917 	ldw	r2,-28(fp)
  8050f0:	10800090 	cmplti	r2,r2,2
  8050f4:	103f961e 	bne	r2,zero,804f50 <__alt_mem_onchip_mem+0xff7fcf50>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8050f8:	0001883a 	nop
  8050fc:	e037883a 	mov	sp,fp
  805100:	dfc00117 	ldw	ra,4(sp)
  805104:	df000017 	ldw	fp,0(sp)
  805108:	dec00204 	addi	sp,sp,8
  80510c:	f800283a 	ret

00805110 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  805110:	defffc04 	addi	sp,sp,-16
  805114:	dfc00315 	stw	ra,12(sp)
  805118:	df000215 	stw	fp,8(sp)
  80511c:	df000204 	addi	fp,sp,8
  805120:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805124:	e03ffe15 	stw	zero,-8(fp)
  805128:	00001d06 	br	8051a0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80512c:	e0bffe17 	ldw	r2,-8(fp)
  805130:	00800f16 	blt	zero,r2,805170 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  805134:	e0bffe17 	ldw	r2,-8(fp)
  805138:	108018e4 	muli	r2,r2,99
  80513c:	10801004 	addi	r2,r2,64
  805140:	e0ffff17 	ldw	r3,-4(fp)
  805144:	1889883a 	add	r4,r3,r2
  805148:	e0bffe17 	ldw	r2,-8(fp)
  80514c:	10800044 	addi	r2,r2,1
  805150:	108018e4 	muli	r2,r2,99
  805154:	10801004 	addi	r2,r2,64
  805158:	e0ffff17 	ldw	r3,-4(fp)
  80515c:	1885883a 	add	r2,r3,r2
  805160:	01801404 	movi	r6,80
  805164:	100b883a 	mov	r5,r2
  805168:	0801e8c0 	call	801e8c <memcpy>
  80516c:	00000906 	br	805194 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  805170:	e0bffe17 	ldw	r2,-8(fp)
  805174:	108018e4 	muli	r2,r2,99
  805178:	10801004 	addi	r2,r2,64
  80517c:	e0ffff17 	ldw	r3,-4(fp)
  805180:	1885883a 	add	r2,r3,r2
  805184:	01801404 	movi	r6,80
  805188:	01400804 	movi	r5,32
  80518c:	1009883a 	mov	r4,r2
  805190:	08021300 	call	802130 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805194:	e0bffe17 	ldw	r2,-8(fp)
  805198:	10800044 	addi	r2,r2,1
  80519c:	e0bffe15 	stw	r2,-8(fp)
  8051a0:	e0bffe17 	ldw	r2,-8(fp)
  8051a4:	10800090 	cmplti	r2,r2,2
  8051a8:	103fe01e 	bne	r2,zero,80512c <__alt_mem_onchip_mem+0xff7fd12c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8051ac:	e0bfff17 	ldw	r2,-4(fp)
  8051b0:	10800883 	ldbu	r2,34(r2)
  8051b4:	10bfffc4 	addi	r2,r2,-1
  8051b8:	1007883a 	mov	r3,r2
  8051bc:	e0bfff17 	ldw	r2,-4(fp)
  8051c0:	10c00885 	stb	r3,34(r2)
}
  8051c4:	0001883a 	nop
  8051c8:	e037883a 	mov	sp,fp
  8051cc:	dfc00117 	ldw	ra,4(sp)
  8051d0:	df000017 	ldw	fp,0(sp)
  8051d4:	dec00204 	addi	sp,sp,8
  8051d8:	f800283a 	ret

008051dc <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8051dc:	defff904 	addi	sp,sp,-28
  8051e0:	dfc00615 	stw	ra,24(sp)
  8051e4:	df000515 	stw	fp,20(sp)
  8051e8:	df000504 	addi	fp,sp,20
  8051ec:	e13ffe15 	stw	r4,-8(fp)
  8051f0:	2805883a 	mov	r2,r5
  8051f4:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8051f8:	e03ffb15 	stw	zero,-20(fp)
  8051fc:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  805200:	e0bffe17 	ldw	r2,-8(fp)
  805204:	10800a03 	ldbu	r2,40(r2)
  805208:	10803fcc 	andi	r2,r2,255
  80520c:	1080201c 	xori	r2,r2,128
  805210:	10bfe004 	addi	r2,r2,-128
  805214:	108016d8 	cmpnei	r2,r2,91
  805218:	1000411e 	bne	r2,zero,805320 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80521c:	e0bffe17 	ldw	r2,-8(fp)
  805220:	10800a04 	addi	r2,r2,40
  805224:	10800044 	addi	r2,r2,1
  805228:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80522c:	00000c06 	br	805260 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  805230:	e0bffb17 	ldw	r2,-20(fp)
  805234:	10c002a4 	muli	r3,r2,10
  805238:	e0bffd17 	ldw	r2,-12(fp)
  80523c:	11000044 	addi	r4,r2,1
  805240:	e13ffd15 	stw	r4,-12(fp)
  805244:	10800003 	ldbu	r2,0(r2)
  805248:	10803fcc 	andi	r2,r2,255
  80524c:	1080201c 	xori	r2,r2,128
  805250:	10bfe004 	addi	r2,r2,-128
  805254:	10bff404 	addi	r2,r2,-48
  805258:	1885883a 	add	r2,r3,r2
  80525c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  805260:	d0e00f17 	ldw	r3,-32708(gp)
  805264:	e0bffd17 	ldw	r2,-12(fp)
  805268:	10800003 	ldbu	r2,0(r2)
  80526c:	10803fcc 	andi	r2,r2,255
  805270:	1080201c 	xori	r2,r2,128
  805274:	10bfe004 	addi	r2,r2,-128
  805278:	10800044 	addi	r2,r2,1
  80527c:	1885883a 	add	r2,r3,r2
  805280:	10800003 	ldbu	r2,0(r2)
  805284:	10803fcc 	andi	r2,r2,255
  805288:	1080010c 	andi	r2,r2,4
  80528c:	103fe81e 	bne	r2,zero,805230 <__alt_mem_onchip_mem+0xff7fd230>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  805290:	e0bffd17 	ldw	r2,-12(fp)
  805294:	10800003 	ldbu	r2,0(r2)
  805298:	10803fcc 	andi	r2,r2,255
  80529c:	1080201c 	xori	r2,r2,128
  8052a0:	10bfe004 	addi	r2,r2,-128
  8052a4:	10800ed8 	cmpnei	r2,r2,59
  8052a8:	10001f1e 	bne	r2,zero,805328 <lcd_handle_escape+0x14c>
    {
      ptr++;
  8052ac:	e0bffd17 	ldw	r2,-12(fp)
  8052b0:	10800044 	addi	r2,r2,1
  8052b4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8052b8:	00000c06 	br	8052ec <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8052bc:	e0bffc17 	ldw	r2,-16(fp)
  8052c0:	10c002a4 	muli	r3,r2,10
  8052c4:	e0bffd17 	ldw	r2,-12(fp)
  8052c8:	11000044 	addi	r4,r2,1
  8052cc:	e13ffd15 	stw	r4,-12(fp)
  8052d0:	10800003 	ldbu	r2,0(r2)
  8052d4:	10803fcc 	andi	r2,r2,255
  8052d8:	1080201c 	xori	r2,r2,128
  8052dc:	10bfe004 	addi	r2,r2,-128
  8052e0:	10bff404 	addi	r2,r2,-48
  8052e4:	1885883a 	add	r2,r3,r2
  8052e8:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8052ec:	d0e00f17 	ldw	r3,-32708(gp)
  8052f0:	e0bffd17 	ldw	r2,-12(fp)
  8052f4:	10800003 	ldbu	r2,0(r2)
  8052f8:	10803fcc 	andi	r2,r2,255
  8052fc:	1080201c 	xori	r2,r2,128
  805300:	10bfe004 	addi	r2,r2,-128
  805304:	10800044 	addi	r2,r2,1
  805308:	1885883a 	add	r2,r3,r2
  80530c:	10800003 	ldbu	r2,0(r2)
  805310:	10803fcc 	andi	r2,r2,255
  805314:	1080010c 	andi	r2,r2,4
  805318:	103fe81e 	bne	r2,zero,8052bc <__alt_mem_onchip_mem+0xff7fd2bc>
  80531c:	00000206 	br	805328 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  805320:	00bfffc4 	movi	r2,-1
  805324:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  805328:	e0bfff07 	ldb	r2,-4(fp)
  80532c:	10c012a0 	cmpeqi	r3,r2,74
  805330:	1800291e 	bne	r3,zero,8053d8 <lcd_handle_escape+0x1fc>
  805334:	10c012c8 	cmpgei	r3,r2,75
  805338:	1800031e 	bne	r3,zero,805348 <lcd_handle_escape+0x16c>
  80533c:	10801220 	cmpeqi	r2,r2,72
  805340:	1000061e 	bne	r2,zero,80535c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  805344:	00004a06 	br	805470 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  805348:	10c012e0 	cmpeqi	r3,r2,75
  80534c:	1800281e 	bne	r3,zero,8053f0 <lcd_handle_escape+0x214>
  805350:	108019a0 	cmpeqi	r2,r2,102
  805354:	1000011e 	bne	r2,zero,80535c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  805358:	00004506 	br	805470 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80535c:	e0bffc17 	ldw	r2,-16(fp)
  805360:	0080050e 	bge	zero,r2,805378 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  805364:	e0bffc17 	ldw	r2,-16(fp)
  805368:	10bfffc4 	addi	r2,r2,-1
  80536c:	1007883a 	mov	r3,r2
  805370:	e0bffe17 	ldw	r2,-8(fp)
  805374:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  805378:	e0bffb17 	ldw	r2,-20(fp)
  80537c:	0080370e 	bge	zero,r2,80545c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  805380:	e0bffb17 	ldw	r2,-20(fp)
  805384:	10bfffc4 	addi	r2,r2,-1
  805388:	1007883a 	mov	r3,r2
  80538c:	e0bffe17 	ldw	r2,-8(fp)
  805390:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  805394:	e0bffe17 	ldw	r2,-8(fp)
  805398:	10800883 	ldbu	r2,34(r2)
  80539c:	10803fcc 	andi	r2,r2,255
  8053a0:	10800170 	cmpltui	r2,r2,5
  8053a4:	1000061e 	bne	r2,zero,8053c0 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  8053a8:	e0bffe17 	ldw	r2,-8(fp)
  8053ac:	00c00104 	movi	r3,4
  8053b0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  8053b4:	00000206 	br	8053c0 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  8053b8:	e13ffe17 	ldw	r4,-8(fp)
  8053bc:	08051100 	call	805110 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8053c0:	e0bffe17 	ldw	r2,-8(fp)
  8053c4:	10800883 	ldbu	r2,34(r2)
  8053c8:	10803fcc 	andi	r2,r2,255
  8053cc:	108000e8 	cmpgeui	r2,r2,3
  8053d0:	103ff91e 	bne	r2,zero,8053b8 <__alt_mem_onchip_mem+0xff7fd3b8>
        lcd_scroll_up(sp);
    }
    break;
  8053d4:	00002106 	br	80545c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8053d8:	e0bffb17 	ldw	r2,-20(fp)
  8053dc:	10800098 	cmpnei	r2,r2,2
  8053e0:	1000201e 	bne	r2,zero,805464 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  8053e4:	e13ffe17 	ldw	r4,-8(fp)
  8053e8:	0804e540 	call	804e54 <lcd_clear_screen>
    break;
  8053ec:	00001d06 	br	805464 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8053f0:	e0bffb17 	ldw	r2,-20(fp)
  8053f4:	00801d16 	blt	zero,r2,80546c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8053f8:	e0bffe17 	ldw	r2,-8(fp)
  8053fc:	10800843 	ldbu	r2,33(r2)
  805400:	10803fcc 	andi	r2,r2,255
  805404:	10801428 	cmpgeui	r2,r2,80
  805408:	1000181e 	bne	r2,zero,80546c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80540c:	e0bffe17 	ldw	r2,-8(fp)
  805410:	10800883 	ldbu	r2,34(r2)
  805414:	10803fcc 	andi	r2,r2,255
  805418:	108018e4 	muli	r2,r2,99
  80541c:	10801004 	addi	r2,r2,64
  805420:	e0fffe17 	ldw	r3,-8(fp)
  805424:	1887883a 	add	r3,r3,r2
  805428:	e0bffe17 	ldw	r2,-8(fp)
  80542c:	10800843 	ldbu	r2,33(r2)
  805430:	10803fcc 	andi	r2,r2,255
  805434:	1889883a 	add	r4,r3,r2
  805438:	e0bffe17 	ldw	r2,-8(fp)
  80543c:	10800843 	ldbu	r2,33(r2)
  805440:	10803fcc 	andi	r2,r2,255
  805444:	00c01404 	movi	r3,80
  805448:	1885c83a 	sub	r2,r3,r2
  80544c:	100d883a 	mov	r6,r2
  805450:	01400804 	movi	r5,32
  805454:	08021300 	call	802130 <memset>
    }
    break;
  805458:	00000406 	br	80546c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80545c:	0001883a 	nop
  805460:	00000306 	br	805470 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  805464:	0001883a 	nop
  805468:	00000106 	br	805470 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80546c:	0001883a 	nop
  }
}
  805470:	0001883a 	nop
  805474:	e037883a 	mov	sp,fp
  805478:	dfc00117 	ldw	ra,4(sp)
  80547c:	df000017 	ldw	fp,0(sp)
  805480:	dec00204 	addi	sp,sp,8
  805484:	f800283a 	ret

00805488 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  805488:	defff304 	addi	sp,sp,-52
  80548c:	dfc00c15 	stw	ra,48(sp)
  805490:	df000b15 	stw	fp,44(sp)
  805494:	df000b04 	addi	fp,sp,44
  805498:	e13ffc15 	stw	r4,-16(fp)
  80549c:	e17ffd15 	stw	r5,-12(fp)
  8054a0:	e1bffe15 	stw	r6,-8(fp)
  8054a4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8054a8:	e0bffe17 	ldw	r2,-8(fp)
  8054ac:	e0fffd17 	ldw	r3,-12(fp)
  8054b0:	1885883a 	add	r2,r3,r2
  8054b4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8054b8:	e0bffc17 	ldw	r2,-16(fp)
  8054bc:	00c00044 	movi	r3,1
  8054c0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8054c4:	00009906 	br	80572c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  8054c8:	e0bffd17 	ldw	r2,-12(fp)
  8054cc:	10800003 	ldbu	r2,0(r2)
  8054d0:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8054d4:	e0bffc17 	ldw	r2,-16(fp)
  8054d8:	10800903 	ldbu	r2,36(r2)
  8054dc:	10803fcc 	andi	r2,r2,255
  8054e0:	1080201c 	xori	r2,r2,128
  8054e4:	10bfe004 	addi	r2,r2,-128
  8054e8:	10003716 	blt	r2,zero,8055c8 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8054ec:	e0bffc17 	ldw	r2,-16(fp)
  8054f0:	10800903 	ldbu	r2,36(r2)
  8054f4:	10803fcc 	andi	r2,r2,255
  8054f8:	1080201c 	xori	r2,r2,128
  8054fc:	10bfe004 	addi	r2,r2,-128
  805500:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  805504:	e0bffa17 	ldw	r2,-24(fp)
  805508:	1000031e 	bne	r2,zero,805518 <altera_avalon_lcd_16207_write+0x90>
  80550c:	e0bff907 	ldb	r2,-28(fp)
  805510:	108016d8 	cmpnei	r2,r2,91
  805514:	10000d1e 	bne	r2,zero,80554c <altera_avalon_lcd_16207_write+0xc4>
  805518:	e0bffa17 	ldw	r2,-24(fp)
  80551c:	10001826 	beq	r2,zero,805580 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  805520:	d0e00f17 	ldw	r3,-32708(gp)
  805524:	e0bff907 	ldb	r2,-28(fp)
  805528:	10800044 	addi	r2,r2,1
  80552c:	1885883a 	add	r2,r3,r2
  805530:	10800003 	ldbu	r2,0(r2)
  805534:	10803fcc 	andi	r2,r2,255
  805538:	1080010c 	andi	r2,r2,4
  80553c:	1000101e 	bne	r2,zero,805580 <altera_avalon_lcd_16207_write+0xf8>
  805540:	e0bff907 	ldb	r2,-28(fp)
  805544:	10800ee0 	cmpeqi	r2,r2,59
  805548:	10000d1e 	bne	r2,zero,805580 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80554c:	e0fffc17 	ldw	r3,-16(fp)
  805550:	e0bffa17 	ldw	r2,-24(fp)
  805554:	1885883a 	add	r2,r3,r2
  805558:	10800a04 	addi	r2,r2,40
  80555c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  805560:	e0bff907 	ldb	r2,-28(fp)
  805564:	100b883a 	mov	r5,r2
  805568:	e13ffc17 	ldw	r4,-16(fp)
  80556c:	08051dc0 	call	8051dc <lcd_handle_escape>

        sp->esccount = -1;
  805570:	e0bffc17 	ldw	r2,-16(fp)
  805574:	00ffffc4 	movi	r3,-1
  805578:	10c00905 	stb	r3,36(r2)
  80557c:	00006806 	br	805720 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  805580:	e0bffc17 	ldw	r2,-16(fp)
  805584:	10800903 	ldbu	r2,36(r2)
  805588:	10803fcc 	andi	r2,r2,255
  80558c:	108001e8 	cmpgeui	r2,r2,7
  805590:	1000631e 	bne	r2,zero,805720 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  805594:	e0fffc17 	ldw	r3,-16(fp)
  805598:	e0bffa17 	ldw	r2,-24(fp)
  80559c:	1885883a 	add	r2,r3,r2
  8055a0:	10800a04 	addi	r2,r2,40
  8055a4:	e0fff903 	ldbu	r3,-28(fp)
  8055a8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  8055ac:	e0bffc17 	ldw	r2,-16(fp)
  8055b0:	10800903 	ldbu	r2,36(r2)
  8055b4:	10800044 	addi	r2,r2,1
  8055b8:	1007883a 	mov	r3,r2
  8055bc:	e0bffc17 	ldw	r2,-16(fp)
  8055c0:	10c00905 	stb	r3,36(r2)
  8055c4:	00005606 	br	805720 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  8055c8:	e0bff907 	ldb	r2,-28(fp)
  8055cc:	108006d8 	cmpnei	r2,r2,27
  8055d0:	1000031e 	bne	r2,zero,8055e0 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  8055d4:	e0bffc17 	ldw	r2,-16(fp)
  8055d8:	10000905 	stb	zero,36(r2)
  8055dc:	00005006 	br	805720 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  8055e0:	e0bff907 	ldb	r2,-28(fp)
  8055e4:	10800358 	cmpnei	r2,r2,13
  8055e8:	1000031e 	bne	r2,zero,8055f8 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8055ec:	e0bffc17 	ldw	r2,-16(fp)
  8055f0:	10000845 	stb	zero,33(r2)
  8055f4:	00004a06 	br	805720 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8055f8:	e0bff907 	ldb	r2,-28(fp)
  8055fc:	10800298 	cmpnei	r2,r2,10
  805600:	1000101e 	bne	r2,zero,805644 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  805604:	e0bffc17 	ldw	r2,-16(fp)
  805608:	10000845 	stb	zero,33(r2)
      sp->y++;
  80560c:	e0bffc17 	ldw	r2,-16(fp)
  805610:	10800883 	ldbu	r2,34(r2)
  805614:	10800044 	addi	r2,r2,1
  805618:	1007883a 	mov	r3,r2
  80561c:	e0bffc17 	ldw	r2,-16(fp)
  805620:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  805624:	e0bffc17 	ldw	r2,-16(fp)
  805628:	10800883 	ldbu	r2,34(r2)
  80562c:	10803fcc 	andi	r2,r2,255
  805630:	108000f0 	cmpltui	r2,r2,3
  805634:	10003a1e 	bne	r2,zero,805720 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  805638:	e13ffc17 	ldw	r4,-16(fp)
  80563c:	08051100 	call	805110 <lcd_scroll_up>
  805640:	00003706 	br	805720 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  805644:	e0bff907 	ldb	r2,-28(fp)
  805648:	10800218 	cmpnei	r2,r2,8
  80564c:	10000b1e 	bne	r2,zero,80567c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  805650:	e0bffc17 	ldw	r2,-16(fp)
  805654:	10800843 	ldbu	r2,33(r2)
  805658:	10803fcc 	andi	r2,r2,255
  80565c:	10003026 	beq	r2,zero,805720 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  805660:	e0bffc17 	ldw	r2,-16(fp)
  805664:	10800843 	ldbu	r2,33(r2)
  805668:	10bfffc4 	addi	r2,r2,-1
  80566c:	1007883a 	mov	r3,r2
  805670:	e0bffc17 	ldw	r2,-16(fp)
  805674:	10c00845 	stb	r3,33(r2)
  805678:	00002906 	br	805720 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80567c:	d0e00f17 	ldw	r3,-32708(gp)
  805680:	e0bff907 	ldb	r2,-28(fp)
  805684:	10800044 	addi	r2,r2,1
  805688:	1885883a 	add	r2,r3,r2
  80568c:	10800003 	ldbu	r2,0(r2)
  805690:	10803fcc 	andi	r2,r2,255
  805694:	1080201c 	xori	r2,r2,128
  805698:	10bfe004 	addi	r2,r2,-128
  80569c:	108025cc 	andi	r2,r2,151
  8056a0:	10001f26 	beq	r2,zero,805720 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  8056a4:	e0bffc17 	ldw	r2,-16(fp)
  8056a8:	10800883 	ldbu	r2,34(r2)
  8056ac:	10803fcc 	andi	r2,r2,255
  8056b0:	108000b0 	cmpltui	r2,r2,2
  8056b4:	1000021e 	bne	r2,zero,8056c0 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  8056b8:	e13ffc17 	ldw	r4,-16(fp)
  8056bc:	08051100 	call	805110 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8056c0:	e0bffc17 	ldw	r2,-16(fp)
  8056c4:	10800843 	ldbu	r2,33(r2)
  8056c8:	10803fcc 	andi	r2,r2,255
  8056cc:	10801428 	cmpgeui	r2,r2,80
  8056d0:	10000d1e 	bne	r2,zero,805708 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  8056d4:	e0bffc17 	ldw	r2,-16(fp)
  8056d8:	10800883 	ldbu	r2,34(r2)
  8056dc:	10c03fcc 	andi	r3,r2,255
  8056e0:	e0bffc17 	ldw	r2,-16(fp)
  8056e4:	10800843 	ldbu	r2,33(r2)
  8056e8:	10803fcc 	andi	r2,r2,255
  8056ec:	e13ffc17 	ldw	r4,-16(fp)
  8056f0:	18c018e4 	muli	r3,r3,99
  8056f4:	20c7883a 	add	r3,r4,r3
  8056f8:	1885883a 	add	r2,r3,r2
  8056fc:	10801004 	addi	r2,r2,64
  805700:	e0fff903 	ldbu	r3,-28(fp)
  805704:	10c00005 	stb	r3,0(r2)

      sp->x++;
  805708:	e0bffc17 	ldw	r2,-16(fp)
  80570c:	10800843 	ldbu	r2,33(r2)
  805710:	10800044 	addi	r2,r2,1
  805714:	1007883a 	mov	r3,r2
  805718:	e0bffc17 	ldw	r2,-16(fp)
  80571c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  805720:	e0bffd17 	ldw	r2,-12(fp)
  805724:	10800044 	addi	r2,r2,1
  805728:	e0bffd15 	stw	r2,-12(fp)
  80572c:	e0fffd17 	ldw	r3,-12(fp)
  805730:	e0bff817 	ldw	r2,-32(fp)
  805734:	18bf6436 	bltu	r3,r2,8054c8 <__alt_mem_onchip_mem+0xff7fd4c8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  805738:	00800404 	movi	r2,16
  80573c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805740:	e03ff515 	stw	zero,-44(fp)
  805744:	00003706 	br	805824 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  805748:	00801404 	movi	r2,80
  80574c:	e0bff715 	stw	r2,-36(fp)
  805750:	00001106 	br	805798 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  805754:	e0bff717 	ldw	r2,-36(fp)
  805758:	10bfffc4 	addi	r2,r2,-1
  80575c:	e13ffc17 	ldw	r4,-16(fp)
  805760:	e0fff517 	ldw	r3,-44(fp)
  805764:	18c018e4 	muli	r3,r3,99
  805768:	20c7883a 	add	r3,r4,r3
  80576c:	1885883a 	add	r2,r3,r2
  805770:	10801004 	addi	r2,r2,64
  805774:	10800003 	ldbu	r2,0(r2)
  805778:	10803fcc 	andi	r2,r2,255
  80577c:	1080201c 	xori	r2,r2,128
  805780:	10bfe004 	addi	r2,r2,-128
  805784:	10800820 	cmpeqi	r2,r2,32
  805788:	10000626 	beq	r2,zero,8057a4 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80578c:	e0bff717 	ldw	r2,-36(fp)
  805790:	10bfffc4 	addi	r2,r2,-1
  805794:	e0bff715 	stw	r2,-36(fp)
  805798:	e0bff717 	ldw	r2,-36(fp)
  80579c:	00bfed16 	blt	zero,r2,805754 <__alt_mem_onchip_mem+0xff7fd754>
  8057a0:	00000106 	br	8057a8 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  8057a4:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  8057a8:	e0bff717 	ldw	r2,-36(fp)
  8057ac:	10800448 	cmpgei	r2,r2,17
  8057b0:	1000031e 	bne	r2,zero,8057c0 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  8057b4:	00800404 	movi	r2,16
  8057b8:	e0bff715 	stw	r2,-36(fp)
  8057bc:	00000306 	br	8057cc <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  8057c0:	e0bff717 	ldw	r2,-36(fp)
  8057c4:	10800044 	addi	r2,r2,1
  8057c8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8057cc:	e0bff717 	ldw	r2,-36(fp)
  8057d0:	1009883a 	mov	r4,r2
  8057d4:	e0fffc17 	ldw	r3,-16(fp)
  8057d8:	e0bff517 	ldw	r2,-44(fp)
  8057dc:	108018e4 	muli	r2,r2,99
  8057e0:	1885883a 	add	r2,r3,r2
  8057e4:	10802444 	addi	r2,r2,145
  8057e8:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8057ec:	e0fff617 	ldw	r3,-40(fp)
  8057f0:	e0bff717 	ldw	r2,-36(fp)
  8057f4:	1880020e 	bge	r3,r2,805800 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8057f8:	e0bff717 	ldw	r2,-36(fp)
  8057fc:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  805800:	e0fffc17 	ldw	r3,-16(fp)
  805804:	e0bff517 	ldw	r2,-44(fp)
  805808:	108018e4 	muli	r2,r2,99
  80580c:	1885883a 	add	r2,r3,r2
  805810:	10802484 	addi	r2,r2,146
  805814:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805818:	e0bff517 	ldw	r2,-44(fp)
  80581c:	10800044 	addi	r2,r2,1
  805820:	e0bff515 	stw	r2,-44(fp)
  805824:	e0bff517 	ldw	r2,-44(fp)
  805828:	10800090 	cmplti	r2,r2,2
  80582c:	103fc61e 	bne	r2,zero,805748 <__alt_mem_onchip_mem+0xff7fd748>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  805830:	e0bff617 	ldw	r2,-40(fp)
  805834:	10800448 	cmpgei	r2,r2,17
  805838:	1000031e 	bne	r2,zero,805848 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80583c:	e0bffc17 	ldw	r2,-16(fp)
  805840:	10000985 	stb	zero,38(r2)
  805844:	00002e06 	br	805900 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  805848:	e0bff617 	ldw	r2,-40(fp)
  80584c:	1085883a 	add	r2,r2,r2
  805850:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  805854:	e0bff617 	ldw	r2,-40(fp)
  805858:	1007883a 	mov	r3,r2
  80585c:	e0bffc17 	ldw	r2,-16(fp)
  805860:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805864:	e03ff515 	stw	zero,-44(fp)
  805868:	00002206 	br	8058f4 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80586c:	e0fffc17 	ldw	r3,-16(fp)
  805870:	e0bff517 	ldw	r2,-44(fp)
  805874:	108018e4 	muli	r2,r2,99
  805878:	1885883a 	add	r2,r3,r2
  80587c:	10802444 	addi	r2,r2,145
  805880:	10800003 	ldbu	r2,0(r2)
  805884:	10803fcc 	andi	r2,r2,255
  805888:	1080201c 	xori	r2,r2,128
  80588c:	10bfe004 	addi	r2,r2,-128
  805890:	10800450 	cmplti	r2,r2,17
  805894:	1000141e 	bne	r2,zero,8058e8 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  805898:	e0fffc17 	ldw	r3,-16(fp)
  80589c:	e0bff517 	ldw	r2,-44(fp)
  8058a0:	108018e4 	muli	r2,r2,99
  8058a4:	1885883a 	add	r2,r3,r2
  8058a8:	10802444 	addi	r2,r2,145
  8058ac:	10800003 	ldbu	r2,0(r2)
  8058b0:	10803fcc 	andi	r2,r2,255
  8058b4:	1080201c 	xori	r2,r2,128
  8058b8:	10bfe004 	addi	r2,r2,-128
  8058bc:	1004923a 	slli	r2,r2,8
  8058c0:	e17ff617 	ldw	r5,-40(fp)
  8058c4:	1009883a 	mov	r4,r2
  8058c8:	08036600 	call	803660 <__divsi3>
  8058cc:	1009883a 	mov	r4,r2
  8058d0:	e0fffc17 	ldw	r3,-16(fp)
  8058d4:	e0bff517 	ldw	r2,-44(fp)
  8058d8:	108018e4 	muli	r2,r2,99
  8058dc:	1885883a 	add	r2,r3,r2
  8058e0:	10802484 	addi	r2,r2,146
  8058e4:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8058e8:	e0bff517 	ldw	r2,-44(fp)
  8058ec:	10800044 	addi	r2,r2,1
  8058f0:	e0bff515 	stw	r2,-44(fp)
  8058f4:	e0bff517 	ldw	r2,-44(fp)
  8058f8:	10800090 	cmplti	r2,r2,2
  8058fc:	103fdb1e 	bne	r2,zero,80586c <__alt_mem_onchip_mem+0xff7fd86c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  805900:	e0bffc17 	ldw	r2,-16(fp)
  805904:	10800943 	ldbu	r2,37(r2)
  805908:	10803fcc 	andi	r2,r2,255
  80590c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  805910:	e13ffc17 	ldw	r4,-16(fp)
  805914:	0804f240 	call	804f24 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  805918:	e0bffc17 	ldw	r2,-16(fp)
  80591c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  805920:	e0bffc17 	ldw	r2,-16(fp)
  805924:	10800943 	ldbu	r2,37(r2)
  805928:	10c03fcc 	andi	r3,r2,255
  80592c:	e0bffb17 	ldw	r2,-20(fp)
  805930:	18800426 	beq	r3,r2,805944 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  805934:	e0bffc17 	ldw	r2,-16(fp)
  805938:	00c00044 	movi	r3,1
  80593c:	10c009c5 	stb	r3,39(r2)
  }
  805940:	003fef06 	br	805900 <__alt_mem_onchip_mem+0xff7fd900>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  805944:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  805948:	e0bffe17 	ldw	r2,-8(fp)
}
  80594c:	e037883a 	mov	sp,fp
  805950:	dfc00117 	ldw	ra,4(sp)
  805954:	df000017 	ldw	fp,0(sp)
  805958:	dec00204 	addi	sp,sp,8
  80595c:	f800283a 	ret

00805960 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  805960:	defffc04 	addi	sp,sp,-16
  805964:	dfc00315 	stw	ra,12(sp)
  805968:	df000215 	stw	fp,8(sp)
  80596c:	df000204 	addi	fp,sp,8
  805970:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  805974:	e0bfff17 	ldw	r2,-4(fp)
  805978:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80597c:	e0bffe17 	ldw	r2,-8(fp)
  805980:	10800943 	ldbu	r2,37(r2)
  805984:	10803fcc 	andi	r2,r2,255
  805988:	10c00044 	addi	r3,r2,1
  80598c:	e0bffe17 	ldw	r2,-8(fp)
  805990:	10800983 	ldbu	r2,38(r2)
  805994:	10803fcc 	andi	r2,r2,255
  805998:	18800316 	blt	r3,r2,8059a8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80599c:	e0bffe17 	ldw	r2,-8(fp)
  8059a0:	10000945 	stb	zero,37(r2)
  8059a4:	00000606 	br	8059c0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8059a8:	e0bffe17 	ldw	r2,-8(fp)
  8059ac:	10800943 	ldbu	r2,37(r2)
  8059b0:	10800044 	addi	r2,r2,1
  8059b4:	1007883a 	mov	r3,r2
  8059b8:	e0bffe17 	ldw	r2,-8(fp)
  8059bc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8059c0:	e0bffe17 	ldw	r2,-8(fp)
  8059c4:	10800983 	ldbu	r2,38(r2)
  8059c8:	10803fcc 	andi	r2,r2,255
  8059cc:	10000826 	beq	r2,zero,8059f0 <alt_lcd_16207_timeout+0x90>
  8059d0:	e0bffe17 	ldw	r2,-8(fp)
  8059d4:	108009c3 	ldbu	r2,39(r2)
  8059d8:	10803fcc 	andi	r2,r2,255
  8059dc:	1080201c 	xori	r2,r2,128
  8059e0:	10bfe004 	addi	r2,r2,-128
  8059e4:	1000021e 	bne	r2,zero,8059f0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8059e8:	e13ffe17 	ldw	r4,-8(fp)
  8059ec:	0804f240 	call	804f24 <lcd_repaint_screen>

  return sp->period;
  8059f0:	e0bffe17 	ldw	r2,-8(fp)
  8059f4:	10800717 	ldw	r2,28(r2)
}
  8059f8:	e037883a 	mov	sp,fp
  8059fc:	dfc00117 	ldw	ra,4(sp)
  805a00:	df000017 	ldw	fp,0(sp)
  805a04:	dec00204 	addi	sp,sp,8
  805a08:	f800283a 	ret

00805a0c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  805a0c:	defffc04 	addi	sp,sp,-16
  805a10:	dfc00315 	stw	ra,12(sp)
  805a14:	df000215 	stw	fp,8(sp)
  805a18:	df000204 	addi	fp,sp,8
  805a1c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  805a20:	e0bfff17 	ldw	r2,-4(fp)
  805a24:	10800017 	ldw	r2,0(r2)
  805a28:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  805a2c:	e0bfff17 	ldw	r2,-4(fp)
  805a30:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  805a34:	010ea604 	movi	r4,15000
  805a38:	08070500 	call	807050 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  805a3c:	e0bffe17 	ldw	r2,-8(fp)
  805a40:	00c00c04 	movi	r3,48
  805a44:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  805a48:	01040104 	movi	r4,4100
  805a4c:	08070500 	call	807050 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  805a50:	e0bffe17 	ldw	r2,-8(fp)
  805a54:	00c00c04 	movi	r3,48
  805a58:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  805a5c:	0100fa04 	movi	r4,1000
  805a60:	08070500 	call	807050 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  805a64:	e0bffe17 	ldw	r2,-8(fp)
  805a68:	00c00c04 	movi	r3,48
  805a6c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  805a70:	01400e04 	movi	r5,56
  805a74:	e13fff17 	ldw	r4,-4(fp)
  805a78:	0804cc40 	call	804cc4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  805a7c:	01400204 	movi	r5,8
  805a80:	e13fff17 	ldw	r4,-4(fp)
  805a84:	0804cc40 	call	804cc4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  805a88:	e13fff17 	ldw	r4,-4(fp)
  805a8c:	0804e540 	call	804e54 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  805a90:	01400184 	movi	r5,6
  805a94:	e13fff17 	ldw	r4,-4(fp)
  805a98:	0804cc40 	call	804cc4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  805a9c:	01400304 	movi	r5,12
  805aa0:	e13fff17 	ldw	r4,-4(fp)
  805aa4:	0804cc40 	call	804cc4 <lcd_write_command>

  sp->esccount = -1;
  805aa8:	e0bfff17 	ldw	r2,-4(fp)
  805aac:	00ffffc4 	movi	r3,-1
  805ab0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  805ab4:	e0bfff17 	ldw	r2,-4(fp)
  805ab8:	10800a04 	addi	r2,r2,40
  805abc:	01800204 	movi	r6,8
  805ac0:	000b883a 	mov	r5,zero
  805ac4:	1009883a 	mov	r4,r2
  805ac8:	08021300 	call	802130 <memset>

  sp->scrollpos = 0;
  805acc:	e0bfff17 	ldw	r2,-4(fp)
  805ad0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  805ad4:	e0bfff17 	ldw	r2,-4(fp)
  805ad8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  805adc:	e0bfff17 	ldw	r2,-4(fp)
  805ae0:	100009c5 	stb	zero,39(r2)
  805ae4:	d0a72e17 	ldw	r2,-25416(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  805ae8:	01400284 	movi	r5,10
  805aec:	1009883a 	mov	r4,r2
  805af0:	08037580 	call	803758 <__udivsi3>
  805af4:	1007883a 	mov	r3,r2
  805af8:	e0bfff17 	ldw	r2,-4(fp)
  805afc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  805b00:	e0bfff17 	ldw	r2,-4(fp)
  805b04:	10c00104 	addi	r3,r2,4
  805b08:	e0bfff17 	ldw	r2,-4(fp)
  805b0c:	10800717 	ldw	r2,28(r2)
  805b10:	e1ffff17 	ldw	r7,-4(fp)
  805b14:	01802034 	movhi	r6,128
  805b18:	31965804 	addi	r6,r6,22880
  805b1c:	100b883a 	mov	r5,r2
  805b20:	1809883a 	mov	r4,r3
  805b24:	080656c0 	call	80656c <alt_alarm_start>
}
  805b28:	0001883a 	nop
  805b2c:	e037883a 	mov	sp,fp
  805b30:	dfc00117 	ldw	ra,4(sp)
  805b34:	df000017 	ldw	fp,0(sp)
  805b38:	dec00204 	addi	sp,sp,8
  805b3c:	f800283a 	ret

00805b40 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  805b40:	defffa04 	addi	sp,sp,-24
  805b44:	dfc00515 	stw	ra,20(sp)
  805b48:	df000415 	stw	fp,16(sp)
  805b4c:	df000404 	addi	fp,sp,16
  805b50:	e13ffd15 	stw	r4,-12(fp)
  805b54:	e17ffe15 	stw	r5,-8(fp)
  805b58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  805b5c:	e0bffd17 	ldw	r2,-12(fp)
  805b60:	10800017 	ldw	r2,0(r2)
  805b64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  805b68:	e0bffc17 	ldw	r2,-16(fp)
  805b6c:	10c00a04 	addi	r3,r2,40
  805b70:	e0bffd17 	ldw	r2,-12(fp)
  805b74:	10800217 	ldw	r2,8(r2)
  805b78:	100f883a 	mov	r7,r2
  805b7c:	e1bfff17 	ldw	r6,-4(fp)
  805b80:	e17ffe17 	ldw	r5,-8(fp)
  805b84:	1809883a 	mov	r4,r3
  805b88:	08054880 	call	805488 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  805b8c:	e037883a 	mov	sp,fp
  805b90:	dfc00117 	ldw	ra,4(sp)
  805b94:	df000017 	ldw	fp,0(sp)
  805b98:	dec00204 	addi	sp,sp,8
  805b9c:	f800283a 	ret

00805ba0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  805ba0:	defffa04 	addi	sp,sp,-24
  805ba4:	dfc00515 	stw	ra,20(sp)
  805ba8:	df000415 	stw	fp,16(sp)
  805bac:	df000404 	addi	fp,sp,16
  805bb0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  805bb4:	0007883a 	mov	r3,zero
  805bb8:	e0bfff17 	ldw	r2,-4(fp)
  805bbc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  805bc0:	e0bfff17 	ldw	r2,-4(fp)
  805bc4:	10800104 	addi	r2,r2,4
  805bc8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805bcc:	0005303a 	rdctl	r2,status
  805bd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805bd4:	e0fffd17 	ldw	r3,-12(fp)
  805bd8:	00bfff84 	movi	r2,-2
  805bdc:	1884703a 	and	r2,r3,r2
  805be0:	1001703a 	wrctl	status,r2
  
  return context;
  805be4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  805be8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  805bec:	0806f480 	call	806f48 <alt_tick>
  805bf0:	e0bffc17 	ldw	r2,-16(fp)
  805bf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805bf8:	e0bffe17 	ldw	r2,-8(fp)
  805bfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  805c00:	0001883a 	nop
  805c04:	e037883a 	mov	sp,fp
  805c08:	dfc00117 	ldw	ra,4(sp)
  805c0c:	df000017 	ldw	fp,0(sp)
  805c10:	dec00204 	addi	sp,sp,8
  805c14:	f800283a 	ret

00805c18 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  805c18:	defff804 	addi	sp,sp,-32
  805c1c:	dfc00715 	stw	ra,28(sp)
  805c20:	df000615 	stw	fp,24(sp)
  805c24:	df000604 	addi	fp,sp,24
  805c28:	e13ffc15 	stw	r4,-16(fp)
  805c2c:	e17ffd15 	stw	r5,-12(fp)
  805c30:	e1bffe15 	stw	r6,-8(fp)
  805c34:	e1ffff15 	stw	r7,-4(fp)
  805c38:	e0bfff17 	ldw	r2,-4(fp)
  805c3c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  805c40:	d0a72e17 	ldw	r2,-25416(gp)
  805c44:	1000021e 	bne	r2,zero,805c50 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  805c48:	e0bffb17 	ldw	r2,-20(fp)
  805c4c:	d0a72e15 	stw	r2,-25416(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  805c50:	e0bffc17 	ldw	r2,-16(fp)
  805c54:	10800104 	addi	r2,r2,4
  805c58:	00c001c4 	movi	r3,7
  805c5c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  805c60:	d8000015 	stw	zero,0(sp)
  805c64:	e1fffc17 	ldw	r7,-16(fp)
  805c68:	01802034 	movhi	r6,128
  805c6c:	3196e804 	addi	r6,r6,23456
  805c70:	e17ffe17 	ldw	r5,-8(fp)
  805c74:	e13ffd17 	ldw	r4,-12(fp)
  805c78:	08068780 	call	806878 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  805c7c:	0001883a 	nop
  805c80:	e037883a 	mov	sp,fp
  805c84:	dfc00117 	ldw	ra,4(sp)
  805c88:	df000017 	ldw	fp,0(sp)
  805c8c:	dec00204 	addi	sp,sp,8
  805c90:	f800283a 	ret

00805c94 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  805c94:	defffa04 	addi	sp,sp,-24
  805c98:	dfc00515 	stw	ra,20(sp)
  805c9c:	df000415 	stw	fp,16(sp)
  805ca0:	df000404 	addi	fp,sp,16
  805ca4:	e13ffd15 	stw	r4,-12(fp)
  805ca8:	e17ffe15 	stw	r5,-8(fp)
  805cac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  805cb0:	e0bffd17 	ldw	r2,-12(fp)
  805cb4:	10800017 	ldw	r2,0(r2)
  805cb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  805cbc:	e0bffc17 	ldw	r2,-16(fp)
  805cc0:	10c00a04 	addi	r3,r2,40
  805cc4:	e0bffd17 	ldw	r2,-12(fp)
  805cc8:	10800217 	ldw	r2,8(r2)
  805ccc:	100f883a 	mov	r7,r2
  805cd0:	e1bfff17 	ldw	r6,-4(fp)
  805cd4:	e17ffe17 	ldw	r5,-8(fp)
  805cd8:	1809883a 	mov	r4,r3
  805cdc:	08061a80 	call	8061a8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  805ce0:	e037883a 	mov	sp,fp
  805ce4:	dfc00117 	ldw	ra,4(sp)
  805ce8:	df000017 	ldw	fp,0(sp)
  805cec:	dec00204 	addi	sp,sp,8
  805cf0:	f800283a 	ret

00805cf4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  805cf4:	defffa04 	addi	sp,sp,-24
  805cf8:	dfc00515 	stw	ra,20(sp)
  805cfc:	df000415 	stw	fp,16(sp)
  805d00:	df000404 	addi	fp,sp,16
  805d04:	e13ffd15 	stw	r4,-12(fp)
  805d08:	e17ffe15 	stw	r5,-8(fp)
  805d0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  805d10:	e0bffd17 	ldw	r2,-12(fp)
  805d14:	10800017 	ldw	r2,0(r2)
  805d18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  805d1c:	e0bffc17 	ldw	r2,-16(fp)
  805d20:	10c00a04 	addi	r3,r2,40
  805d24:	e0bffd17 	ldw	r2,-12(fp)
  805d28:	10800217 	ldw	r2,8(r2)
  805d2c:	100f883a 	mov	r7,r2
  805d30:	e1bfff17 	ldw	r6,-4(fp)
  805d34:	e17ffe17 	ldw	r5,-8(fp)
  805d38:	1809883a 	mov	r4,r3
  805d3c:	08063c00 	call	8063c0 <altera_avalon_uart_write>
      fd->fd_flags);
}
  805d40:	e037883a 	mov	sp,fp
  805d44:	dfc00117 	ldw	ra,4(sp)
  805d48:	df000017 	ldw	fp,0(sp)
  805d4c:	dec00204 	addi	sp,sp,8
  805d50:	f800283a 	ret

00805d54 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  805d54:	defffc04 	addi	sp,sp,-16
  805d58:	dfc00315 	stw	ra,12(sp)
  805d5c:	df000215 	stw	fp,8(sp)
  805d60:	df000204 	addi	fp,sp,8
  805d64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  805d68:	e0bfff17 	ldw	r2,-4(fp)
  805d6c:	10800017 	ldw	r2,0(r2)
  805d70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  805d74:	e0bffe17 	ldw	r2,-8(fp)
  805d78:	10c00a04 	addi	r3,r2,40
  805d7c:	e0bfff17 	ldw	r2,-4(fp)
  805d80:	10800217 	ldw	r2,8(r2)
  805d84:	100b883a 	mov	r5,r2
  805d88:	1809883a 	mov	r4,r3
  805d8c:	08061180 	call	806118 <altera_avalon_uart_close>
}
  805d90:	e037883a 	mov	sp,fp
  805d94:	dfc00117 	ldw	ra,4(sp)
  805d98:	df000017 	ldw	fp,0(sp)
  805d9c:	dec00204 	addi	sp,sp,8
  805da0:	f800283a 	ret

00805da4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  805da4:	defff804 	addi	sp,sp,-32
  805da8:	dfc00715 	stw	ra,28(sp)
  805dac:	df000615 	stw	fp,24(sp)
  805db0:	df000604 	addi	fp,sp,24
  805db4:	e13ffd15 	stw	r4,-12(fp)
  805db8:	e17ffe15 	stw	r5,-8(fp)
  805dbc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  805dc0:	e0bffd17 	ldw	r2,-12(fp)
  805dc4:	10800017 	ldw	r2,0(r2)
  805dc8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  805dcc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  805dd0:	1000041e 	bne	r2,zero,805de4 <altera_avalon_uart_init+0x40>
  805dd4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  805dd8:	1000021e 	bne	r2,zero,805de4 <altera_avalon_uart_init+0x40>
  805ddc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  805de0:	10000226 	beq	r2,zero,805dec <altera_avalon_uart_init+0x48>
  805de4:	00800044 	movi	r2,1
  805de8:	00000106 	br	805df0 <altera_avalon_uart_init+0x4c>
  805dec:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  805df0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  805df4:	e0bffc17 	ldw	r2,-16(fp)
  805df8:	10000f1e 	bne	r2,zero,805e38 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  805dfc:	e0bffd17 	ldw	r2,-12(fp)
  805e00:	00c32004 	movi	r3,3200
  805e04:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  805e08:	e0bffb17 	ldw	r2,-20(fp)
  805e0c:	10800304 	addi	r2,r2,12
  805e10:	e0fffd17 	ldw	r3,-12(fp)
  805e14:	18c00117 	ldw	r3,4(r3)
  805e18:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  805e1c:	d8000015 	stw	zero,0(sp)
  805e20:	e1fffd17 	ldw	r7,-12(fp)
  805e24:	01802034 	movhi	r6,128
  805e28:	31979404 	addi	r6,r6,24144
  805e2c:	e17fff17 	ldw	r5,-4(fp)
  805e30:	e13ffe17 	ldw	r4,-8(fp)
  805e34:	08068780 	call	806878 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  805e38:	0001883a 	nop
  805e3c:	e037883a 	mov	sp,fp
  805e40:	dfc00117 	ldw	ra,4(sp)
  805e44:	df000017 	ldw	fp,0(sp)
  805e48:	dec00204 	addi	sp,sp,8
  805e4c:	f800283a 	ret

00805e50 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  805e50:	defffa04 	addi	sp,sp,-24
  805e54:	dfc00515 	stw	ra,20(sp)
  805e58:	df000415 	stw	fp,16(sp)
  805e5c:	df000404 	addi	fp,sp,16
  805e60:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  805e64:	e0bfff17 	ldw	r2,-4(fp)
  805e68:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  805e6c:	e0bffc17 	ldw	r2,-16(fp)
  805e70:	10800017 	ldw	r2,0(r2)
  805e74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  805e78:	e0bffd17 	ldw	r2,-12(fp)
  805e7c:	10800204 	addi	r2,r2,8
  805e80:	10800037 	ldwio	r2,0(r2)
  805e84:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  805e88:	e0bffd17 	ldw	r2,-12(fp)
  805e8c:	10800204 	addi	r2,r2,8
  805e90:	0007883a 	mov	r3,zero
  805e94:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  805e98:	e0bffd17 	ldw	r2,-12(fp)
  805e9c:	10800204 	addi	r2,r2,8
  805ea0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  805ea4:	e0bffe17 	ldw	r2,-8(fp)
  805ea8:	1080200c 	andi	r2,r2,128
  805eac:	10000326 	beq	r2,zero,805ebc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  805eb0:	e17ffe17 	ldw	r5,-8(fp)
  805eb4:	e13ffc17 	ldw	r4,-16(fp)
  805eb8:	0805eec0 	call	805eec <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  805ebc:	e0bffe17 	ldw	r2,-8(fp)
  805ec0:	1081100c 	andi	r2,r2,1088
  805ec4:	10000326 	beq	r2,zero,805ed4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  805ec8:	e17ffe17 	ldw	r5,-8(fp)
  805ecc:	e13ffc17 	ldw	r4,-16(fp)
  805ed0:	0805fd00 	call	805fd0 <altera_avalon_uart_txirq>
  }
  

}
  805ed4:	0001883a 	nop
  805ed8:	e037883a 	mov	sp,fp
  805edc:	dfc00117 	ldw	ra,4(sp)
  805ee0:	df000017 	ldw	fp,0(sp)
  805ee4:	dec00204 	addi	sp,sp,8
  805ee8:	f800283a 	ret

00805eec <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  805eec:	defffc04 	addi	sp,sp,-16
  805ef0:	df000315 	stw	fp,12(sp)
  805ef4:	df000304 	addi	fp,sp,12
  805ef8:	e13ffe15 	stw	r4,-8(fp)
  805efc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  805f00:	e0bfff17 	ldw	r2,-4(fp)
  805f04:	108000cc 	andi	r2,r2,3
  805f08:	10002c1e 	bne	r2,zero,805fbc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  805f0c:	e0bffe17 	ldw	r2,-8(fp)
  805f10:	10800317 	ldw	r2,12(r2)
  805f14:	e0bffe17 	ldw	r2,-8(fp)
  805f18:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  805f1c:	e0bffe17 	ldw	r2,-8(fp)
  805f20:	10800317 	ldw	r2,12(r2)
  805f24:	10800044 	addi	r2,r2,1
  805f28:	10800fcc 	andi	r2,r2,63
  805f2c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  805f30:	e0bffe17 	ldw	r2,-8(fp)
  805f34:	10800317 	ldw	r2,12(r2)
  805f38:	e0fffe17 	ldw	r3,-8(fp)
  805f3c:	18c00017 	ldw	r3,0(r3)
  805f40:	18c00037 	ldwio	r3,0(r3)
  805f44:	1809883a 	mov	r4,r3
  805f48:	e0fffe17 	ldw	r3,-8(fp)
  805f4c:	1885883a 	add	r2,r3,r2
  805f50:	10800704 	addi	r2,r2,28
  805f54:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  805f58:	e0bffe17 	ldw	r2,-8(fp)
  805f5c:	e0fffd17 	ldw	r3,-12(fp)
  805f60:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  805f64:	e0bffe17 	ldw	r2,-8(fp)
  805f68:	10800317 	ldw	r2,12(r2)
  805f6c:	10800044 	addi	r2,r2,1
  805f70:	10800fcc 	andi	r2,r2,63
  805f74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  805f78:	e0bffe17 	ldw	r2,-8(fp)
  805f7c:	10c00217 	ldw	r3,8(r2)
  805f80:	e0bffd17 	ldw	r2,-12(fp)
  805f84:	18800e1e 	bne	r3,r2,805fc0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  805f88:	e0bffe17 	ldw	r2,-8(fp)
  805f8c:	10c00117 	ldw	r3,4(r2)
  805f90:	00bfdfc4 	movi	r2,-129
  805f94:	1886703a 	and	r3,r3,r2
  805f98:	e0bffe17 	ldw	r2,-8(fp)
  805f9c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  805fa0:	e0bffe17 	ldw	r2,-8(fp)
  805fa4:	10800017 	ldw	r2,0(r2)
  805fa8:	10800304 	addi	r2,r2,12
  805fac:	e0fffe17 	ldw	r3,-8(fp)
  805fb0:	18c00117 	ldw	r3,4(r3)
  805fb4:	10c00035 	stwio	r3,0(r2)
  805fb8:	00000106 	br	805fc0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  805fbc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  805fc0:	e037883a 	mov	sp,fp
  805fc4:	df000017 	ldw	fp,0(sp)
  805fc8:	dec00104 	addi	sp,sp,4
  805fcc:	f800283a 	ret

00805fd0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  805fd0:	defffb04 	addi	sp,sp,-20
  805fd4:	df000415 	stw	fp,16(sp)
  805fd8:	df000404 	addi	fp,sp,16
  805fdc:	e13ffc15 	stw	r4,-16(fp)
  805fe0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  805fe4:	e0bffc17 	ldw	r2,-16(fp)
  805fe8:	10c00417 	ldw	r3,16(r2)
  805fec:	e0bffc17 	ldw	r2,-16(fp)
  805ff0:	10800517 	ldw	r2,20(r2)
  805ff4:	18803226 	beq	r3,r2,8060c0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  805ff8:	e0bffc17 	ldw	r2,-16(fp)
  805ffc:	10800617 	ldw	r2,24(r2)
  806000:	1080008c 	andi	r2,r2,2
  806004:	10000326 	beq	r2,zero,806014 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  806008:	e0bffd17 	ldw	r2,-12(fp)
  80600c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  806010:	10001d26 	beq	r2,zero,806088 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  806014:	e0bffc17 	ldw	r2,-16(fp)
  806018:	10800417 	ldw	r2,16(r2)
  80601c:	e0bffc17 	ldw	r2,-16(fp)
  806020:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  806024:	e0bffc17 	ldw	r2,-16(fp)
  806028:	10800017 	ldw	r2,0(r2)
  80602c:	10800104 	addi	r2,r2,4
  806030:	e0fffc17 	ldw	r3,-16(fp)
  806034:	18c00417 	ldw	r3,16(r3)
  806038:	e13ffc17 	ldw	r4,-16(fp)
  80603c:	20c7883a 	add	r3,r4,r3
  806040:	18c01704 	addi	r3,r3,92
  806044:	18c00003 	ldbu	r3,0(r3)
  806048:	18c03fcc 	andi	r3,r3,255
  80604c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  806050:	e0bffc17 	ldw	r2,-16(fp)
  806054:	10800417 	ldw	r2,16(r2)
  806058:	10800044 	addi	r2,r2,1
  80605c:	e0fffc17 	ldw	r3,-16(fp)
  806060:	18800415 	stw	r2,16(r3)
  806064:	10c00fcc 	andi	r3,r2,63
  806068:	e0bffc17 	ldw	r2,-16(fp)
  80606c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  806070:	e0bffc17 	ldw	r2,-16(fp)
  806074:	10800117 	ldw	r2,4(r2)
  806078:	10c01014 	ori	r3,r2,64
  80607c:	e0bffc17 	ldw	r2,-16(fp)
  806080:	10c00115 	stw	r3,4(r2)
  806084:	00000e06 	br	8060c0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  806088:	e0bffc17 	ldw	r2,-16(fp)
  80608c:	10800017 	ldw	r2,0(r2)
  806090:	10800204 	addi	r2,r2,8
  806094:	10800037 	ldwio	r2,0(r2)
  806098:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80609c:	e0bffd17 	ldw	r2,-12(fp)
  8060a0:	1082000c 	andi	r2,r2,2048
  8060a4:	1000061e 	bne	r2,zero,8060c0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8060a8:	e0bffc17 	ldw	r2,-16(fp)
  8060ac:	10c00117 	ldw	r3,4(r2)
  8060b0:	00bfefc4 	movi	r2,-65
  8060b4:	1886703a 	and	r3,r3,r2
  8060b8:	e0bffc17 	ldw	r2,-16(fp)
  8060bc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8060c0:	e0bffc17 	ldw	r2,-16(fp)
  8060c4:	10c00417 	ldw	r3,16(r2)
  8060c8:	e0bffc17 	ldw	r2,-16(fp)
  8060cc:	10800517 	ldw	r2,20(r2)
  8060d0:	1880061e 	bne	r3,r2,8060ec <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8060d4:	e0bffc17 	ldw	r2,-16(fp)
  8060d8:	10c00117 	ldw	r3,4(r2)
  8060dc:	00beefc4 	movi	r2,-1089
  8060e0:	1886703a 	and	r3,r3,r2
  8060e4:	e0bffc17 	ldw	r2,-16(fp)
  8060e8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8060ec:	e0bffc17 	ldw	r2,-16(fp)
  8060f0:	10800017 	ldw	r2,0(r2)
  8060f4:	10800304 	addi	r2,r2,12
  8060f8:	e0fffc17 	ldw	r3,-16(fp)
  8060fc:	18c00117 	ldw	r3,4(r3)
  806100:	10c00035 	stwio	r3,0(r2)
}
  806104:	0001883a 	nop
  806108:	e037883a 	mov	sp,fp
  80610c:	df000017 	ldw	fp,0(sp)
  806110:	dec00104 	addi	sp,sp,4
  806114:	f800283a 	ret

00806118 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  806118:	defffd04 	addi	sp,sp,-12
  80611c:	df000215 	stw	fp,8(sp)
  806120:	df000204 	addi	fp,sp,8
  806124:	e13ffe15 	stw	r4,-8(fp)
  806128:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80612c:	00000506 	br	806144 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  806130:	e0bfff17 	ldw	r2,-4(fp)
  806134:	1090000c 	andi	r2,r2,16384
  806138:	10000226 	beq	r2,zero,806144 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80613c:	00bffd44 	movi	r2,-11
  806140:	00000606 	br	80615c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  806144:	e0bffe17 	ldw	r2,-8(fp)
  806148:	10c00417 	ldw	r3,16(r2)
  80614c:	e0bffe17 	ldw	r2,-8(fp)
  806150:	10800517 	ldw	r2,20(r2)
  806154:	18bff61e 	bne	r3,r2,806130 <__alt_mem_onchip_mem+0xff7fe130>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  806158:	0005883a 	mov	r2,zero
}
  80615c:	e037883a 	mov	sp,fp
  806160:	df000017 	ldw	fp,0(sp)
  806164:	dec00104 	addi	sp,sp,4
  806168:	f800283a 	ret

0080616c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80616c:	defffe04 	addi	sp,sp,-8
  806170:	dfc00115 	stw	ra,4(sp)
  806174:	df000015 	stw	fp,0(sp)
  806178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80617c:	d0a00917 	ldw	r2,-32732(gp)
  806180:	10000326 	beq	r2,zero,806190 <alt_get_errno+0x24>
  806184:	d0a00917 	ldw	r2,-32732(gp)
  806188:	103ee83a 	callr	r2
  80618c:	00000106 	br	806194 <alt_get_errno+0x28>
  806190:	d0a72904 	addi	r2,gp,-25436
}
  806194:	e037883a 	mov	sp,fp
  806198:	dfc00117 	ldw	ra,4(sp)
  80619c:	df000017 	ldw	fp,0(sp)
  8061a0:	dec00204 	addi	sp,sp,8
  8061a4:	f800283a 	ret

008061a8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8061a8:	defff204 	addi	sp,sp,-56
  8061ac:	dfc00d15 	stw	ra,52(sp)
  8061b0:	df000c15 	stw	fp,48(sp)
  8061b4:	df000c04 	addi	fp,sp,48
  8061b8:	e13ffc15 	stw	r4,-16(fp)
  8061bc:	e17ffd15 	stw	r5,-12(fp)
  8061c0:	e1bffe15 	stw	r6,-8(fp)
  8061c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8061c8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8061cc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8061d0:	e0bfff17 	ldw	r2,-4(fp)
  8061d4:	1090000c 	andi	r2,r2,16384
  8061d8:	1005003a 	cmpeq	r2,r2,zero
  8061dc:	10803fcc 	andi	r2,r2,255
  8061e0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8061e4:	00001306 	br	806234 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8061e8:	e0bff517 	ldw	r2,-44(fp)
  8061ec:	10800044 	addi	r2,r2,1
  8061f0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8061f4:	e0bffd17 	ldw	r2,-12(fp)
  8061f8:	10c00044 	addi	r3,r2,1
  8061fc:	e0fffd15 	stw	r3,-12(fp)
  806200:	e0fffc17 	ldw	r3,-16(fp)
  806204:	18c00217 	ldw	r3,8(r3)
  806208:	e13ffc17 	ldw	r4,-16(fp)
  80620c:	20c7883a 	add	r3,r4,r3
  806210:	18c00704 	addi	r3,r3,28
  806214:	18c00003 	ldbu	r3,0(r3)
  806218:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80621c:	e0bffc17 	ldw	r2,-16(fp)
  806220:	10800217 	ldw	r2,8(r2)
  806224:	10800044 	addi	r2,r2,1
  806228:	10c00fcc 	andi	r3,r2,63
  80622c:	e0bffc17 	ldw	r2,-16(fp)
  806230:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  806234:	e0fff517 	ldw	r3,-44(fp)
  806238:	e0bffe17 	ldw	r2,-8(fp)
  80623c:	1880050e 	bge	r3,r2,806254 <altera_avalon_uart_read+0xac>
  806240:	e0bffc17 	ldw	r2,-16(fp)
  806244:	10c00217 	ldw	r3,8(r2)
  806248:	e0bffc17 	ldw	r2,-16(fp)
  80624c:	10800317 	ldw	r2,12(r2)
  806250:	18bfe51e 	bne	r3,r2,8061e8 <__alt_mem_onchip_mem+0xff7fe1e8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  806254:	e0bff517 	ldw	r2,-44(fp)
  806258:	1000251e 	bne	r2,zero,8062f0 <altera_avalon_uart_read+0x148>
  80625c:	e0bffc17 	ldw	r2,-16(fp)
  806260:	10c00217 	ldw	r3,8(r2)
  806264:	e0bffc17 	ldw	r2,-16(fp)
  806268:	10800317 	ldw	r2,12(r2)
  80626c:	1880201e 	bne	r3,r2,8062f0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  806270:	e0bff617 	ldw	r2,-40(fp)
  806274:	1000071e 	bne	r2,zero,806294 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  806278:	080616c0 	call	80616c <alt_get_errno>
  80627c:	1007883a 	mov	r3,r2
  806280:	008002c4 	movi	r2,11
  806284:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  806288:	00800044 	movi	r2,1
  80628c:	e0bff405 	stb	r2,-48(fp)
        break;
  806290:	00001b06 	br	806300 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806294:	0005303a 	rdctl	r2,status
  806298:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80629c:	e0fff917 	ldw	r3,-28(fp)
  8062a0:	00bfff84 	movi	r2,-2
  8062a4:	1884703a 	and	r2,r3,r2
  8062a8:	1001703a 	wrctl	status,r2
  
  return context;
  8062ac:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8062b0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8062b4:	e0bffc17 	ldw	r2,-16(fp)
  8062b8:	10800117 	ldw	r2,4(r2)
  8062bc:	10c02014 	ori	r3,r2,128
  8062c0:	e0bffc17 	ldw	r2,-16(fp)
  8062c4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8062c8:	e0bffc17 	ldw	r2,-16(fp)
  8062cc:	10800017 	ldw	r2,0(r2)
  8062d0:	10800304 	addi	r2,r2,12
  8062d4:	e0fffc17 	ldw	r3,-16(fp)
  8062d8:	18c00117 	ldw	r3,4(r3)
  8062dc:	10c00035 	stwio	r3,0(r2)
  8062e0:	e0bff817 	ldw	r2,-32(fp)
  8062e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8062e8:	e0bffa17 	ldw	r2,-24(fp)
  8062ec:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8062f0:	e0bff517 	ldw	r2,-44(fp)
  8062f4:	1000021e 	bne	r2,zero,806300 <altera_avalon_uart_read+0x158>
  8062f8:	e0bffe17 	ldw	r2,-8(fp)
  8062fc:	103fcd1e 	bne	r2,zero,806234 <__alt_mem_onchip_mem+0xff7fe234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806300:	0005303a 	rdctl	r2,status
  806304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806308:	e0fffb17 	ldw	r3,-20(fp)
  80630c:	00bfff84 	movi	r2,-2
  806310:	1884703a 	and	r2,r3,r2
  806314:	1001703a 	wrctl	status,r2
  
  return context;
  806318:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80631c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  806320:	e0bffc17 	ldw	r2,-16(fp)
  806324:	10800117 	ldw	r2,4(r2)
  806328:	10c02014 	ori	r3,r2,128
  80632c:	e0bffc17 	ldw	r2,-16(fp)
  806330:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806334:	e0bffc17 	ldw	r2,-16(fp)
  806338:	10800017 	ldw	r2,0(r2)
  80633c:	10800304 	addi	r2,r2,12
  806340:	e0fffc17 	ldw	r3,-16(fp)
  806344:	18c00117 	ldw	r3,4(r3)
  806348:	10c00035 	stwio	r3,0(r2)
  80634c:	e0bff817 	ldw	r2,-32(fp)
  806350:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806354:	e0bff717 	ldw	r2,-36(fp)
  806358:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80635c:	e0bff403 	ldbu	r2,-48(fp)
  806360:	10000226 	beq	r2,zero,80636c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  806364:	00bffd44 	movi	r2,-11
  806368:	00000106 	br	806370 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80636c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  806370:	e037883a 	mov	sp,fp
  806374:	dfc00117 	ldw	ra,4(sp)
  806378:	df000017 	ldw	fp,0(sp)
  80637c:	dec00204 	addi	sp,sp,8
  806380:	f800283a 	ret

00806384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806384:	defffe04 	addi	sp,sp,-8
  806388:	dfc00115 	stw	ra,4(sp)
  80638c:	df000015 	stw	fp,0(sp)
  806390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806394:	d0a00917 	ldw	r2,-32732(gp)
  806398:	10000326 	beq	r2,zero,8063a8 <alt_get_errno+0x24>
  80639c:	d0a00917 	ldw	r2,-32732(gp)
  8063a0:	103ee83a 	callr	r2
  8063a4:	00000106 	br	8063ac <alt_get_errno+0x28>
  8063a8:	d0a72904 	addi	r2,gp,-25436
}
  8063ac:	e037883a 	mov	sp,fp
  8063b0:	dfc00117 	ldw	ra,4(sp)
  8063b4:	df000017 	ldw	fp,0(sp)
  8063b8:	dec00204 	addi	sp,sp,8
  8063bc:	f800283a 	ret

008063c0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8063c0:	defff204 	addi	sp,sp,-56
  8063c4:	dfc00d15 	stw	ra,52(sp)
  8063c8:	df000c15 	stw	fp,48(sp)
  8063cc:	df000c04 	addi	fp,sp,48
  8063d0:	e13ffc15 	stw	r4,-16(fp)
  8063d4:	e17ffd15 	stw	r5,-12(fp)
  8063d8:	e1bffe15 	stw	r6,-8(fp)
  8063dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8063e0:	e0bffe17 	ldw	r2,-8(fp)
  8063e4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8063e8:	e0bfff17 	ldw	r2,-4(fp)
  8063ec:	1090000c 	andi	r2,r2,16384
  8063f0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8063f4:	00003c06 	br	8064e8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8063f8:	e0bffc17 	ldw	r2,-16(fp)
  8063fc:	10800517 	ldw	r2,20(r2)
  806400:	10800044 	addi	r2,r2,1
  806404:	10800fcc 	andi	r2,r2,63
  806408:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80640c:	e0bffc17 	ldw	r2,-16(fp)
  806410:	10c00417 	ldw	r3,16(r2)
  806414:	e0bff717 	ldw	r2,-36(fp)
  806418:	1880221e 	bne	r3,r2,8064a4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80641c:	e0bff517 	ldw	r2,-44(fp)
  806420:	10000526 	beq	r2,zero,806438 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  806424:	08063840 	call	806384 <alt_get_errno>
  806428:	1007883a 	mov	r3,r2
  80642c:	008002c4 	movi	r2,11
  806430:	18800015 	stw	r2,0(r3)
        break;
  806434:	00002e06 	br	8064f0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806438:	0005303a 	rdctl	r2,status
  80643c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806440:	e0fff917 	ldw	r3,-28(fp)
  806444:	00bfff84 	movi	r2,-2
  806448:	1884703a 	and	r2,r3,r2
  80644c:	1001703a 	wrctl	status,r2
  
  return context;
  806450:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  806454:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  806458:	e0bffc17 	ldw	r2,-16(fp)
  80645c:	10800117 	ldw	r2,4(r2)
  806460:	10c11014 	ori	r3,r2,1088
  806464:	e0bffc17 	ldw	r2,-16(fp)
  806468:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80646c:	e0bffc17 	ldw	r2,-16(fp)
  806470:	10800017 	ldw	r2,0(r2)
  806474:	10800304 	addi	r2,r2,12
  806478:	e0fffc17 	ldw	r3,-16(fp)
  80647c:	18c00117 	ldw	r3,4(r3)
  806480:	10c00035 	stwio	r3,0(r2)
  806484:	e0bff817 	ldw	r2,-32(fp)
  806488:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80648c:	e0bff617 	ldw	r2,-40(fp)
  806490:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  806494:	e0bffc17 	ldw	r2,-16(fp)
  806498:	10c00417 	ldw	r3,16(r2)
  80649c:	e0bff717 	ldw	r2,-36(fp)
  8064a0:	18bffc26 	beq	r3,r2,806494 <__alt_mem_onchip_mem+0xff7fe494>
      }
    }

    count--;
  8064a4:	e0bff417 	ldw	r2,-48(fp)
  8064a8:	10bfffc4 	addi	r2,r2,-1
  8064ac:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8064b0:	e0bffc17 	ldw	r2,-16(fp)
  8064b4:	10c00517 	ldw	r3,20(r2)
  8064b8:	e0bffd17 	ldw	r2,-12(fp)
  8064bc:	11000044 	addi	r4,r2,1
  8064c0:	e13ffd15 	stw	r4,-12(fp)
  8064c4:	10800003 	ldbu	r2,0(r2)
  8064c8:	1009883a 	mov	r4,r2
  8064cc:	e0bffc17 	ldw	r2,-16(fp)
  8064d0:	10c5883a 	add	r2,r2,r3
  8064d4:	10801704 	addi	r2,r2,92
  8064d8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8064dc:	e0bffc17 	ldw	r2,-16(fp)
  8064e0:	e0fff717 	ldw	r3,-36(fp)
  8064e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8064e8:	e0bff417 	ldw	r2,-48(fp)
  8064ec:	103fc21e 	bne	r2,zero,8063f8 <__alt_mem_onchip_mem+0xff7fe3f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8064f0:	0005303a 	rdctl	r2,status
  8064f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8064f8:	e0fffb17 	ldw	r3,-20(fp)
  8064fc:	00bfff84 	movi	r2,-2
  806500:	1884703a 	and	r2,r3,r2
  806504:	1001703a 	wrctl	status,r2
  
  return context;
  806508:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80650c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  806510:	e0bffc17 	ldw	r2,-16(fp)
  806514:	10800117 	ldw	r2,4(r2)
  806518:	10c11014 	ori	r3,r2,1088
  80651c:	e0bffc17 	ldw	r2,-16(fp)
  806520:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  806524:	e0bffc17 	ldw	r2,-16(fp)
  806528:	10800017 	ldw	r2,0(r2)
  80652c:	10800304 	addi	r2,r2,12
  806530:	e0fffc17 	ldw	r3,-16(fp)
  806534:	18c00117 	ldw	r3,4(r3)
  806538:	10c00035 	stwio	r3,0(r2)
  80653c:	e0bff817 	ldw	r2,-32(fp)
  806540:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806544:	e0bffa17 	ldw	r2,-24(fp)
  806548:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80654c:	e0fffe17 	ldw	r3,-8(fp)
  806550:	e0bff417 	ldw	r2,-48(fp)
  806554:	1885c83a 	sub	r2,r3,r2
}
  806558:	e037883a 	mov	sp,fp
  80655c:	dfc00117 	ldw	ra,4(sp)
  806560:	df000017 	ldw	fp,0(sp)
  806564:	dec00204 	addi	sp,sp,8
  806568:	f800283a 	ret

0080656c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80656c:	defff504 	addi	sp,sp,-44
  806570:	df000a15 	stw	fp,40(sp)
  806574:	df000a04 	addi	fp,sp,40
  806578:	e13ffc15 	stw	r4,-16(fp)
  80657c:	e17ffd15 	stw	r5,-12(fp)
  806580:	e1bffe15 	stw	r6,-8(fp)
  806584:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  806588:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80658c:	d0a72e17 	ldw	r2,-25416(gp)
  
  if (alt_ticks_per_second ())
  806590:	10003c26 	beq	r2,zero,806684 <alt_alarm_start+0x118>
  {
    if (alarm)
  806594:	e0bffc17 	ldw	r2,-16(fp)
  806598:	10003826 	beq	r2,zero,80667c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80659c:	e0bffc17 	ldw	r2,-16(fp)
  8065a0:	e0fffe17 	ldw	r3,-8(fp)
  8065a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8065a8:	e0bffc17 	ldw	r2,-16(fp)
  8065ac:	e0ffff17 	ldw	r3,-4(fp)
  8065b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8065b4:	0005303a 	rdctl	r2,status
  8065b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8065bc:	e0fff917 	ldw	r3,-28(fp)
  8065c0:	00bfff84 	movi	r2,-2
  8065c4:	1884703a 	and	r2,r3,r2
  8065c8:	1001703a 	wrctl	status,r2
  
  return context;
  8065cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  8065d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8065d4:	d0a72f17 	ldw	r2,-25412(gp)
      
      current_nticks = alt_nticks();
  8065d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8065dc:	e0fffd17 	ldw	r3,-12(fp)
  8065e0:	e0bff617 	ldw	r2,-40(fp)
  8065e4:	1885883a 	add	r2,r3,r2
  8065e8:	10c00044 	addi	r3,r2,1
  8065ec:	e0bffc17 	ldw	r2,-16(fp)
  8065f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8065f4:	e0bffc17 	ldw	r2,-16(fp)
  8065f8:	10c00217 	ldw	r3,8(r2)
  8065fc:	e0bff617 	ldw	r2,-40(fp)
  806600:	1880042e 	bgeu	r3,r2,806614 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  806604:	e0bffc17 	ldw	r2,-16(fp)
  806608:	00c00044 	movi	r3,1
  80660c:	10c00405 	stb	r3,16(r2)
  806610:	00000206 	br	80661c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  806614:	e0bffc17 	ldw	r2,-16(fp)
  806618:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80661c:	e0bffc17 	ldw	r2,-16(fp)
  806620:	d0e00d04 	addi	r3,gp,-32716
  806624:	e0fffa15 	stw	r3,-24(fp)
  806628:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80662c:	e0bffb17 	ldw	r2,-20(fp)
  806630:	e0fffa17 	ldw	r3,-24(fp)
  806634:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  806638:	e0bffa17 	ldw	r2,-24(fp)
  80663c:	10c00017 	ldw	r3,0(r2)
  806640:	e0bffb17 	ldw	r2,-20(fp)
  806644:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  806648:	e0bffa17 	ldw	r2,-24(fp)
  80664c:	10800017 	ldw	r2,0(r2)
  806650:	e0fffb17 	ldw	r3,-20(fp)
  806654:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  806658:	e0bffa17 	ldw	r2,-24(fp)
  80665c:	e0fffb17 	ldw	r3,-20(fp)
  806660:	10c00015 	stw	r3,0(r2)
  806664:	e0bff817 	ldw	r2,-32(fp)
  806668:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80666c:	e0bff717 	ldw	r2,-36(fp)
  806670:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  806674:	0005883a 	mov	r2,zero
  806678:	00000306 	br	806688 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80667c:	00bffa84 	movi	r2,-22
  806680:	00000106 	br	806688 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  806684:	00bfde84 	movi	r2,-134
  }
}
  806688:	e037883a 	mov	sp,fp
  80668c:	df000017 	ldw	fp,0(sp)
  806690:	dec00104 	addi	sp,sp,4
  806694:	f800283a 	ret

00806698 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  806698:	deffff04 	addi	sp,sp,-4
  80669c:	df000015 	stw	fp,0(sp)
  8066a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8066a4:	0001883a 	nop
  8066a8:	e037883a 	mov	sp,fp
  8066ac:	df000017 	ldw	fp,0(sp)
  8066b0:	dec00104 	addi	sp,sp,4
  8066b4:	f800283a 	ret

008066b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8066b8:	defffe04 	addi	sp,sp,-8
  8066bc:	dfc00115 	stw	ra,4(sp)
  8066c0:	df000015 	stw	fp,0(sp)
  8066c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8066c8:	d0a00917 	ldw	r2,-32732(gp)
  8066cc:	10000326 	beq	r2,zero,8066dc <alt_get_errno+0x24>
  8066d0:	d0a00917 	ldw	r2,-32732(gp)
  8066d4:	103ee83a 	callr	r2
  8066d8:	00000106 	br	8066e0 <alt_get_errno+0x28>
  8066dc:	d0a72904 	addi	r2,gp,-25436
}
  8066e0:	e037883a 	mov	sp,fp
  8066e4:	dfc00117 	ldw	ra,4(sp)
  8066e8:	df000017 	ldw	fp,0(sp)
  8066ec:	dec00204 	addi	sp,sp,8
  8066f0:	f800283a 	ret

008066f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8066f4:	defffa04 	addi	sp,sp,-24
  8066f8:	dfc00515 	stw	ra,20(sp)
  8066fc:	df000415 	stw	fp,16(sp)
  806700:	df000404 	addi	fp,sp,16
  806704:	e13ffe15 	stw	r4,-8(fp)
  806708:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80670c:	e0bffe17 	ldw	r2,-8(fp)
  806710:	10000326 	beq	r2,zero,806720 <alt_dev_llist_insert+0x2c>
  806714:	e0bffe17 	ldw	r2,-8(fp)
  806718:	10800217 	ldw	r2,8(r2)
  80671c:	1000061e 	bne	r2,zero,806738 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  806720:	08066b80 	call	8066b8 <alt_get_errno>
  806724:	1007883a 	mov	r3,r2
  806728:	00800584 	movi	r2,22
  80672c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  806730:	00bffa84 	movi	r2,-22
  806734:	00001306 	br	806784 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  806738:	e0bffe17 	ldw	r2,-8(fp)
  80673c:	e0ffff17 	ldw	r3,-4(fp)
  806740:	e0fffc15 	stw	r3,-16(fp)
  806744:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  806748:	e0bffd17 	ldw	r2,-12(fp)
  80674c:	e0fffc17 	ldw	r3,-16(fp)
  806750:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  806754:	e0bffc17 	ldw	r2,-16(fp)
  806758:	10c00017 	ldw	r3,0(r2)
  80675c:	e0bffd17 	ldw	r2,-12(fp)
  806760:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  806764:	e0bffc17 	ldw	r2,-16(fp)
  806768:	10800017 	ldw	r2,0(r2)
  80676c:	e0fffd17 	ldw	r3,-12(fp)
  806770:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  806774:	e0bffc17 	ldw	r2,-16(fp)
  806778:	e0fffd17 	ldw	r3,-12(fp)
  80677c:	10c00015 	stw	r3,0(r2)

  return 0;  
  806780:	0005883a 	mov	r2,zero
}
  806784:	e037883a 	mov	sp,fp
  806788:	dfc00117 	ldw	ra,4(sp)
  80678c:	df000017 	ldw	fp,0(sp)
  806790:	dec00204 	addi	sp,sp,8
  806794:	f800283a 	ret

00806798 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  806798:	defffd04 	addi	sp,sp,-12
  80679c:	dfc00215 	stw	ra,8(sp)
  8067a0:	df000115 	stw	fp,4(sp)
  8067a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8067a8:	00802034 	movhi	r2,128
  8067ac:	109e1904 	addi	r2,r2,30820
  8067b0:	e0bfff15 	stw	r2,-4(fp)
  8067b4:	00000606 	br	8067d0 <_do_ctors+0x38>
        (*ctor) (); 
  8067b8:	e0bfff17 	ldw	r2,-4(fp)
  8067bc:	10800017 	ldw	r2,0(r2)
  8067c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8067c4:	e0bfff17 	ldw	r2,-4(fp)
  8067c8:	10bfff04 	addi	r2,r2,-4
  8067cc:	e0bfff15 	stw	r2,-4(fp)
  8067d0:	e0ffff17 	ldw	r3,-4(fp)
  8067d4:	00802034 	movhi	r2,128
  8067d8:	109e1a04 	addi	r2,r2,30824
  8067dc:	18bff62e 	bgeu	r3,r2,8067b8 <__alt_mem_onchip_mem+0xff7fe7b8>
        (*ctor) (); 
}
  8067e0:	0001883a 	nop
  8067e4:	e037883a 	mov	sp,fp
  8067e8:	dfc00117 	ldw	ra,4(sp)
  8067ec:	df000017 	ldw	fp,0(sp)
  8067f0:	dec00204 	addi	sp,sp,8
  8067f4:	f800283a 	ret

008067f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8067f8:	defffd04 	addi	sp,sp,-12
  8067fc:	dfc00215 	stw	ra,8(sp)
  806800:	df000115 	stw	fp,4(sp)
  806804:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  806808:	00802034 	movhi	r2,128
  80680c:	109e1904 	addi	r2,r2,30820
  806810:	e0bfff15 	stw	r2,-4(fp)
  806814:	00000606 	br	806830 <_do_dtors+0x38>
        (*dtor) (); 
  806818:	e0bfff17 	ldw	r2,-4(fp)
  80681c:	10800017 	ldw	r2,0(r2)
  806820:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  806824:	e0bfff17 	ldw	r2,-4(fp)
  806828:	10bfff04 	addi	r2,r2,-4
  80682c:	e0bfff15 	stw	r2,-4(fp)
  806830:	e0ffff17 	ldw	r3,-4(fp)
  806834:	00802034 	movhi	r2,128
  806838:	109e1a04 	addi	r2,r2,30824
  80683c:	18bff62e 	bgeu	r3,r2,806818 <__alt_mem_onchip_mem+0xff7fe818>
        (*dtor) (); 
}
  806840:	0001883a 	nop
  806844:	e037883a 	mov	sp,fp
  806848:	dfc00117 	ldw	ra,4(sp)
  80684c:	df000017 	ldw	fp,0(sp)
  806850:	dec00204 	addi	sp,sp,8
  806854:	f800283a 	ret

00806858 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  806858:	deffff04 	addi	sp,sp,-4
  80685c:	df000015 	stw	fp,0(sp)
  806860:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  806864:	0001883a 	nop
  806868:	e037883a 	mov	sp,fp
  80686c:	df000017 	ldw	fp,0(sp)
  806870:	dec00104 	addi	sp,sp,4
  806874:	f800283a 	ret

00806878 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  806878:	defff904 	addi	sp,sp,-28
  80687c:	dfc00615 	stw	ra,24(sp)
  806880:	df000515 	stw	fp,20(sp)
  806884:	df000504 	addi	fp,sp,20
  806888:	e13ffc15 	stw	r4,-16(fp)
  80688c:	e17ffd15 	stw	r5,-12(fp)
  806890:	e1bffe15 	stw	r6,-8(fp)
  806894:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  806898:	e0800217 	ldw	r2,8(fp)
  80689c:	d8800015 	stw	r2,0(sp)
  8068a0:	e1ffff17 	ldw	r7,-4(fp)
  8068a4:	e1bffe17 	ldw	r6,-8(fp)
  8068a8:	e17ffd17 	ldw	r5,-12(fp)
  8068ac:	e13ffc17 	ldw	r4,-16(fp)
  8068b0:	0806a280 	call	806a28 <alt_iic_isr_register>
}  
  8068b4:	e037883a 	mov	sp,fp
  8068b8:	dfc00117 	ldw	ra,4(sp)
  8068bc:	df000017 	ldw	fp,0(sp)
  8068c0:	dec00204 	addi	sp,sp,8
  8068c4:	f800283a 	ret

008068c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8068c8:	defff904 	addi	sp,sp,-28
  8068cc:	df000615 	stw	fp,24(sp)
  8068d0:	df000604 	addi	fp,sp,24
  8068d4:	e13ffe15 	stw	r4,-8(fp)
  8068d8:	e17fff15 	stw	r5,-4(fp)
  8068dc:	e0bfff17 	ldw	r2,-4(fp)
  8068e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8068e4:	0005303a 	rdctl	r2,status
  8068e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8068ec:	e0fffb17 	ldw	r3,-20(fp)
  8068f0:	00bfff84 	movi	r2,-2
  8068f4:	1884703a 	and	r2,r3,r2
  8068f8:	1001703a 	wrctl	status,r2
  
  return context;
  8068fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  806900:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  806904:	00c00044 	movi	r3,1
  806908:	e0bffa17 	ldw	r2,-24(fp)
  80690c:	1884983a 	sll	r2,r3,r2
  806910:	1007883a 	mov	r3,r2
  806914:	d0a72d17 	ldw	r2,-25420(gp)
  806918:	1884b03a 	or	r2,r3,r2
  80691c:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  806920:	d0a72d17 	ldw	r2,-25420(gp)
  806924:	100170fa 	wrctl	ienable,r2
  806928:	e0bffc17 	ldw	r2,-16(fp)
  80692c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806930:	e0bffd17 	ldw	r2,-12(fp)
  806934:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  806938:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80693c:	0001883a 	nop
}
  806940:	e037883a 	mov	sp,fp
  806944:	df000017 	ldw	fp,0(sp)
  806948:	dec00104 	addi	sp,sp,4
  80694c:	f800283a 	ret

00806950 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  806950:	defff904 	addi	sp,sp,-28
  806954:	df000615 	stw	fp,24(sp)
  806958:	df000604 	addi	fp,sp,24
  80695c:	e13ffe15 	stw	r4,-8(fp)
  806960:	e17fff15 	stw	r5,-4(fp)
  806964:	e0bfff17 	ldw	r2,-4(fp)
  806968:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80696c:	0005303a 	rdctl	r2,status
  806970:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806974:	e0fffb17 	ldw	r3,-20(fp)
  806978:	00bfff84 	movi	r2,-2
  80697c:	1884703a 	and	r2,r3,r2
  806980:	1001703a 	wrctl	status,r2
  
  return context;
  806984:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  806988:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80698c:	00c00044 	movi	r3,1
  806990:	e0bffa17 	ldw	r2,-24(fp)
  806994:	1884983a 	sll	r2,r3,r2
  806998:	0084303a 	nor	r2,zero,r2
  80699c:	1007883a 	mov	r3,r2
  8069a0:	d0a72d17 	ldw	r2,-25420(gp)
  8069a4:	1884703a 	and	r2,r3,r2
  8069a8:	d0a72d15 	stw	r2,-25420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8069ac:	d0a72d17 	ldw	r2,-25420(gp)
  8069b0:	100170fa 	wrctl	ienable,r2
  8069b4:	e0bffc17 	ldw	r2,-16(fp)
  8069b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8069bc:	e0bffd17 	ldw	r2,-12(fp)
  8069c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8069c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8069c8:	0001883a 	nop
}
  8069cc:	e037883a 	mov	sp,fp
  8069d0:	df000017 	ldw	fp,0(sp)
  8069d4:	dec00104 	addi	sp,sp,4
  8069d8:	f800283a 	ret

008069dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8069dc:	defffc04 	addi	sp,sp,-16
  8069e0:	df000315 	stw	fp,12(sp)
  8069e4:	df000304 	addi	fp,sp,12
  8069e8:	e13ffe15 	stw	r4,-8(fp)
  8069ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8069f0:	000530fa 	rdctl	r2,ienable
  8069f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8069f8:	00c00044 	movi	r3,1
  8069fc:	e0bfff17 	ldw	r2,-4(fp)
  806a00:	1884983a 	sll	r2,r3,r2
  806a04:	1007883a 	mov	r3,r2
  806a08:	e0bffd17 	ldw	r2,-12(fp)
  806a0c:	1884703a 	and	r2,r3,r2
  806a10:	1004c03a 	cmpne	r2,r2,zero
  806a14:	10803fcc 	andi	r2,r2,255
}
  806a18:	e037883a 	mov	sp,fp
  806a1c:	df000017 	ldw	fp,0(sp)
  806a20:	dec00104 	addi	sp,sp,4
  806a24:	f800283a 	ret

00806a28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  806a28:	defff504 	addi	sp,sp,-44
  806a2c:	dfc00a15 	stw	ra,40(sp)
  806a30:	df000915 	stw	fp,36(sp)
  806a34:	df000904 	addi	fp,sp,36
  806a38:	e13ffc15 	stw	r4,-16(fp)
  806a3c:	e17ffd15 	stw	r5,-12(fp)
  806a40:	e1bffe15 	stw	r6,-8(fp)
  806a44:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  806a48:	00bffa84 	movi	r2,-22
  806a4c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  806a50:	e0bffd17 	ldw	r2,-12(fp)
  806a54:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  806a58:	e0bff817 	ldw	r2,-32(fp)
  806a5c:	10800808 	cmpgei	r2,r2,32
  806a60:	1000271e 	bne	r2,zero,806b00 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806a64:	0005303a 	rdctl	r2,status
  806a68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806a6c:	e0fffb17 	ldw	r3,-20(fp)
  806a70:	00bfff84 	movi	r2,-2
  806a74:	1884703a 	and	r2,r3,r2
  806a78:	1001703a 	wrctl	status,r2
  
  return context;
  806a7c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  806a80:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  806a84:	00802074 	movhi	r2,129
  806a88:	10ad1004 	addi	r2,r2,-19392
  806a8c:	e0fff817 	ldw	r3,-32(fp)
  806a90:	180690fa 	slli	r3,r3,3
  806a94:	10c5883a 	add	r2,r2,r3
  806a98:	e0fffe17 	ldw	r3,-8(fp)
  806a9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  806aa0:	00802074 	movhi	r2,129
  806aa4:	10ad1004 	addi	r2,r2,-19392
  806aa8:	e0fff817 	ldw	r3,-32(fp)
  806aac:	180690fa 	slli	r3,r3,3
  806ab0:	10c5883a 	add	r2,r2,r3
  806ab4:	10800104 	addi	r2,r2,4
  806ab8:	e0ffff17 	ldw	r3,-4(fp)
  806abc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  806ac0:	e0bffe17 	ldw	r2,-8(fp)
  806ac4:	10000526 	beq	r2,zero,806adc <alt_iic_isr_register+0xb4>
  806ac8:	e0bff817 	ldw	r2,-32(fp)
  806acc:	100b883a 	mov	r5,r2
  806ad0:	e13ffc17 	ldw	r4,-16(fp)
  806ad4:	08068c80 	call	8068c8 <alt_ic_irq_enable>
  806ad8:	00000406 	br	806aec <alt_iic_isr_register+0xc4>
  806adc:	e0bff817 	ldw	r2,-32(fp)
  806ae0:	100b883a 	mov	r5,r2
  806ae4:	e13ffc17 	ldw	r4,-16(fp)
  806ae8:	08069500 	call	806950 <alt_ic_irq_disable>
  806aec:	e0bff715 	stw	r2,-36(fp)
  806af0:	e0bffa17 	ldw	r2,-24(fp)
  806af4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806af8:	e0bff917 	ldw	r2,-28(fp)
  806afc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  806b00:	e0bff717 	ldw	r2,-36(fp)
}
  806b04:	e037883a 	mov	sp,fp
  806b08:	dfc00117 	ldw	ra,4(sp)
  806b0c:	df000017 	ldw	fp,0(sp)
  806b10:	dec00204 	addi	sp,sp,8
  806b14:	f800283a 	ret

00806b18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  806b18:	defff904 	addi	sp,sp,-28
  806b1c:	dfc00615 	stw	ra,24(sp)
  806b20:	df000515 	stw	fp,20(sp)
  806b24:	df000504 	addi	fp,sp,20
  806b28:	e13ffc15 	stw	r4,-16(fp)
  806b2c:	e17ffd15 	stw	r5,-12(fp)
  806b30:	e1bffe15 	stw	r6,-8(fp)
  806b34:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  806b38:	e1bfff17 	ldw	r6,-4(fp)
  806b3c:	e17ffe17 	ldw	r5,-8(fp)
  806b40:	e13ffd17 	ldw	r4,-12(fp)
  806b44:	0806d580 	call	806d58 <open>
  806b48:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  806b4c:	e0bffb17 	ldw	r2,-20(fp)
  806b50:	10001c16 	blt	r2,zero,806bc4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  806b54:	00802074 	movhi	r2,129
  806b58:	10a0e404 	addi	r2,r2,-31856
  806b5c:	e0fffb17 	ldw	r3,-20(fp)
  806b60:	18c00324 	muli	r3,r3,12
  806b64:	10c5883a 	add	r2,r2,r3
  806b68:	10c00017 	ldw	r3,0(r2)
  806b6c:	e0bffc17 	ldw	r2,-16(fp)
  806b70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  806b74:	00802074 	movhi	r2,129
  806b78:	10a0e404 	addi	r2,r2,-31856
  806b7c:	e0fffb17 	ldw	r3,-20(fp)
  806b80:	18c00324 	muli	r3,r3,12
  806b84:	10c5883a 	add	r2,r2,r3
  806b88:	10800104 	addi	r2,r2,4
  806b8c:	10c00017 	ldw	r3,0(r2)
  806b90:	e0bffc17 	ldw	r2,-16(fp)
  806b94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  806b98:	00802074 	movhi	r2,129
  806b9c:	10a0e404 	addi	r2,r2,-31856
  806ba0:	e0fffb17 	ldw	r3,-20(fp)
  806ba4:	18c00324 	muli	r3,r3,12
  806ba8:	10c5883a 	add	r2,r2,r3
  806bac:	10800204 	addi	r2,r2,8
  806bb0:	10c00017 	ldw	r3,0(r2)
  806bb4:	e0bffc17 	ldw	r2,-16(fp)
  806bb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  806bbc:	e13ffb17 	ldw	r4,-20(fp)
  806bc0:	0803f100 	call	803f10 <alt_release_fd>
  }
} 
  806bc4:	0001883a 	nop
  806bc8:	e037883a 	mov	sp,fp
  806bcc:	dfc00117 	ldw	ra,4(sp)
  806bd0:	df000017 	ldw	fp,0(sp)
  806bd4:	dec00204 	addi	sp,sp,8
  806bd8:	f800283a 	ret

00806bdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  806bdc:	defffb04 	addi	sp,sp,-20
  806be0:	dfc00415 	stw	ra,16(sp)
  806be4:	df000315 	stw	fp,12(sp)
  806be8:	df000304 	addi	fp,sp,12
  806bec:	e13ffd15 	stw	r4,-12(fp)
  806bf0:	e17ffe15 	stw	r5,-8(fp)
  806bf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  806bf8:	01c07fc4 	movi	r7,511
  806bfc:	01800044 	movi	r6,1
  806c00:	e17ffd17 	ldw	r5,-12(fp)
  806c04:	01002074 	movhi	r4,129
  806c08:	2120e704 	addi	r4,r4,-31844
  806c0c:	0806b180 	call	806b18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  806c10:	01c07fc4 	movi	r7,511
  806c14:	000d883a 	mov	r6,zero
  806c18:	e17ffe17 	ldw	r5,-8(fp)
  806c1c:	01002074 	movhi	r4,129
  806c20:	2120e404 	addi	r4,r4,-31856
  806c24:	0806b180 	call	806b18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  806c28:	01c07fc4 	movi	r7,511
  806c2c:	01800044 	movi	r6,1
  806c30:	e17fff17 	ldw	r5,-4(fp)
  806c34:	01002074 	movhi	r4,129
  806c38:	2120ea04 	addi	r4,r4,-31832
  806c3c:	0806b180 	call	806b18 <alt_open_fd>
}  
  806c40:	0001883a 	nop
  806c44:	e037883a 	mov	sp,fp
  806c48:	dfc00117 	ldw	ra,4(sp)
  806c4c:	df000017 	ldw	fp,0(sp)
  806c50:	dec00204 	addi	sp,sp,8
  806c54:	f800283a 	ret

00806c58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806c58:	defffe04 	addi	sp,sp,-8
  806c5c:	dfc00115 	stw	ra,4(sp)
  806c60:	df000015 	stw	fp,0(sp)
  806c64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806c68:	d0a00917 	ldw	r2,-32732(gp)
  806c6c:	10000326 	beq	r2,zero,806c7c <alt_get_errno+0x24>
  806c70:	d0a00917 	ldw	r2,-32732(gp)
  806c74:	103ee83a 	callr	r2
  806c78:	00000106 	br	806c80 <alt_get_errno+0x28>
  806c7c:	d0a72904 	addi	r2,gp,-25436
}
  806c80:	e037883a 	mov	sp,fp
  806c84:	dfc00117 	ldw	ra,4(sp)
  806c88:	df000017 	ldw	fp,0(sp)
  806c8c:	dec00204 	addi	sp,sp,8
  806c90:	f800283a 	ret

00806c94 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  806c94:	defffd04 	addi	sp,sp,-12
  806c98:	df000215 	stw	fp,8(sp)
  806c9c:	df000204 	addi	fp,sp,8
  806ca0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  806ca4:	e0bfff17 	ldw	r2,-4(fp)
  806ca8:	10800217 	ldw	r2,8(r2)
  806cac:	10d00034 	orhi	r3,r2,16384
  806cb0:	e0bfff17 	ldw	r2,-4(fp)
  806cb4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  806cb8:	e03ffe15 	stw	zero,-8(fp)
  806cbc:	00001d06 	br	806d34 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  806cc0:	00802074 	movhi	r2,129
  806cc4:	10a0e404 	addi	r2,r2,-31856
  806cc8:	e0fffe17 	ldw	r3,-8(fp)
  806ccc:	18c00324 	muli	r3,r3,12
  806cd0:	10c5883a 	add	r2,r2,r3
  806cd4:	10c00017 	ldw	r3,0(r2)
  806cd8:	e0bfff17 	ldw	r2,-4(fp)
  806cdc:	10800017 	ldw	r2,0(r2)
  806ce0:	1880111e 	bne	r3,r2,806d28 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  806ce4:	00802074 	movhi	r2,129
  806ce8:	10a0e404 	addi	r2,r2,-31856
  806cec:	e0fffe17 	ldw	r3,-8(fp)
  806cf0:	18c00324 	muli	r3,r3,12
  806cf4:	10c5883a 	add	r2,r2,r3
  806cf8:	10800204 	addi	r2,r2,8
  806cfc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  806d00:	1000090e 	bge	r2,zero,806d28 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  806d04:	e0bffe17 	ldw	r2,-8(fp)
  806d08:	10c00324 	muli	r3,r2,12
  806d0c:	00802074 	movhi	r2,129
  806d10:	10a0e404 	addi	r2,r2,-31856
  806d14:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  806d18:	e0bfff17 	ldw	r2,-4(fp)
  806d1c:	18800226 	beq	r3,r2,806d28 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  806d20:	00bffcc4 	movi	r2,-13
  806d24:	00000806 	br	806d48 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  806d28:	e0bffe17 	ldw	r2,-8(fp)
  806d2c:	10800044 	addi	r2,r2,1
  806d30:	e0bffe15 	stw	r2,-8(fp)
  806d34:	d0a00817 	ldw	r2,-32736(gp)
  806d38:	1007883a 	mov	r3,r2
  806d3c:	e0bffe17 	ldw	r2,-8(fp)
  806d40:	18bfdf2e 	bgeu	r3,r2,806cc0 <__alt_mem_onchip_mem+0xff7fecc0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  806d44:	0005883a 	mov	r2,zero
}
  806d48:	e037883a 	mov	sp,fp
  806d4c:	df000017 	ldw	fp,0(sp)
  806d50:	dec00104 	addi	sp,sp,4
  806d54:	f800283a 	ret

00806d58 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  806d58:	defff604 	addi	sp,sp,-40
  806d5c:	dfc00915 	stw	ra,36(sp)
  806d60:	df000815 	stw	fp,32(sp)
  806d64:	df000804 	addi	fp,sp,32
  806d68:	e13ffd15 	stw	r4,-12(fp)
  806d6c:	e17ffe15 	stw	r5,-8(fp)
  806d70:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  806d74:	00bfffc4 	movi	r2,-1
  806d78:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  806d7c:	00bffb44 	movi	r2,-19
  806d80:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  806d84:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  806d88:	d1600604 	addi	r5,gp,-32744
  806d8c:	e13ffd17 	ldw	r4,-12(fp)
  806d90:	08071fc0 	call	8071fc <alt_find_dev>
  806d94:	e0bff815 	stw	r2,-32(fp)
  806d98:	e0bff817 	ldw	r2,-32(fp)
  806d9c:	1000051e 	bne	r2,zero,806db4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  806da0:	e13ffd17 	ldw	r4,-12(fp)
  806da4:	080728c0 	call	80728c <alt_find_file>
  806da8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  806dac:	00800044 	movi	r2,1
  806db0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  806db4:	e0bff817 	ldw	r2,-32(fp)
  806db8:	10002926 	beq	r2,zero,806e60 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  806dbc:	e13ff817 	ldw	r4,-32(fp)
  806dc0:	08073940 	call	807394 <alt_get_fd>
  806dc4:	e0bff915 	stw	r2,-28(fp)
  806dc8:	e0bff917 	ldw	r2,-28(fp)
  806dcc:	1000030e 	bge	r2,zero,806ddc <open+0x84>
    {
      status = index;
  806dd0:	e0bff917 	ldw	r2,-28(fp)
  806dd4:	e0bffa15 	stw	r2,-24(fp)
  806dd8:	00002306 	br	806e68 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  806ddc:	e0bff917 	ldw	r2,-28(fp)
  806de0:	10c00324 	muli	r3,r2,12
  806de4:	00802074 	movhi	r2,129
  806de8:	10a0e404 	addi	r2,r2,-31856
  806dec:	1885883a 	add	r2,r3,r2
  806df0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  806df4:	e0fffe17 	ldw	r3,-8(fp)
  806df8:	00900034 	movhi	r2,16384
  806dfc:	10bfffc4 	addi	r2,r2,-1
  806e00:	1886703a 	and	r3,r3,r2
  806e04:	e0bffc17 	ldw	r2,-16(fp)
  806e08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  806e0c:	e0bffb17 	ldw	r2,-20(fp)
  806e10:	1000051e 	bne	r2,zero,806e28 <open+0xd0>
  806e14:	e13ffc17 	ldw	r4,-16(fp)
  806e18:	0806c940 	call	806c94 <alt_file_locked>
  806e1c:	e0bffa15 	stw	r2,-24(fp)
  806e20:	e0bffa17 	ldw	r2,-24(fp)
  806e24:	10001016 	blt	r2,zero,806e68 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  806e28:	e0bff817 	ldw	r2,-32(fp)
  806e2c:	10800317 	ldw	r2,12(r2)
  806e30:	10000826 	beq	r2,zero,806e54 <open+0xfc>
  806e34:	e0bff817 	ldw	r2,-32(fp)
  806e38:	10800317 	ldw	r2,12(r2)
  806e3c:	e1ffff17 	ldw	r7,-4(fp)
  806e40:	e1bffe17 	ldw	r6,-8(fp)
  806e44:	e17ffd17 	ldw	r5,-12(fp)
  806e48:	e13ffc17 	ldw	r4,-16(fp)
  806e4c:	103ee83a 	callr	r2
  806e50:	00000106 	br	806e58 <open+0x100>
  806e54:	0005883a 	mov	r2,zero
  806e58:	e0bffa15 	stw	r2,-24(fp)
  806e5c:	00000206 	br	806e68 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  806e60:	00bffb44 	movi	r2,-19
  806e64:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  806e68:	e0bffa17 	ldw	r2,-24(fp)
  806e6c:	1000090e 	bge	r2,zero,806e94 <open+0x13c>
  {
    alt_release_fd (index);  
  806e70:	e13ff917 	ldw	r4,-28(fp)
  806e74:	0803f100 	call	803f10 <alt_release_fd>
    ALT_ERRNO = -status;
  806e78:	0806c580 	call	806c58 <alt_get_errno>
  806e7c:	1007883a 	mov	r3,r2
  806e80:	e0bffa17 	ldw	r2,-24(fp)
  806e84:	0085c83a 	sub	r2,zero,r2
  806e88:	18800015 	stw	r2,0(r3)
    return -1;
  806e8c:	00bfffc4 	movi	r2,-1
  806e90:	00000106 	br	806e98 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  806e94:	e0bff917 	ldw	r2,-28(fp)
}
  806e98:	e037883a 	mov	sp,fp
  806e9c:	dfc00117 	ldw	ra,4(sp)
  806ea0:	df000017 	ldw	fp,0(sp)
  806ea4:	dec00204 	addi	sp,sp,8
  806ea8:	f800283a 	ret

00806eac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  806eac:	defffa04 	addi	sp,sp,-24
  806eb0:	df000515 	stw	fp,20(sp)
  806eb4:	df000504 	addi	fp,sp,20
  806eb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806ebc:	0005303a 	rdctl	r2,status
  806ec0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806ec4:	e0fffc17 	ldw	r3,-16(fp)
  806ec8:	00bfff84 	movi	r2,-2
  806ecc:	1884703a 	and	r2,r3,r2
  806ed0:	1001703a 	wrctl	status,r2
  
  return context;
  806ed4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  806ed8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  806edc:	e0bfff17 	ldw	r2,-4(fp)
  806ee0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  806ee4:	e0bffd17 	ldw	r2,-12(fp)
  806ee8:	10800017 	ldw	r2,0(r2)
  806eec:	e0fffd17 	ldw	r3,-12(fp)
  806ef0:	18c00117 	ldw	r3,4(r3)
  806ef4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  806ef8:	e0bffd17 	ldw	r2,-12(fp)
  806efc:	10800117 	ldw	r2,4(r2)
  806f00:	e0fffd17 	ldw	r3,-12(fp)
  806f04:	18c00017 	ldw	r3,0(r3)
  806f08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  806f0c:	e0bffd17 	ldw	r2,-12(fp)
  806f10:	e0fffd17 	ldw	r3,-12(fp)
  806f14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  806f18:	e0bffd17 	ldw	r2,-12(fp)
  806f1c:	e0fffd17 	ldw	r3,-12(fp)
  806f20:	10c00015 	stw	r3,0(r2)
  806f24:	e0bffb17 	ldw	r2,-20(fp)
  806f28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806f2c:	e0bffe17 	ldw	r2,-8(fp)
  806f30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  806f34:	0001883a 	nop
  806f38:	e037883a 	mov	sp,fp
  806f3c:	df000017 	ldw	fp,0(sp)
  806f40:	dec00104 	addi	sp,sp,4
  806f44:	f800283a 	ret

00806f48 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  806f48:	defffb04 	addi	sp,sp,-20
  806f4c:	dfc00415 	stw	ra,16(sp)
  806f50:	df000315 	stw	fp,12(sp)
  806f54:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  806f58:	d0a00d17 	ldw	r2,-32716(gp)
  806f5c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  806f60:	d0a72f17 	ldw	r2,-25412(gp)
  806f64:	10800044 	addi	r2,r2,1
  806f68:	d0a72f15 	stw	r2,-25412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  806f6c:	00002e06 	br	807028 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  806f70:	e0bffd17 	ldw	r2,-12(fp)
  806f74:	10800017 	ldw	r2,0(r2)
  806f78:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  806f7c:	e0bffd17 	ldw	r2,-12(fp)
  806f80:	10800403 	ldbu	r2,16(r2)
  806f84:	10803fcc 	andi	r2,r2,255
  806f88:	10000426 	beq	r2,zero,806f9c <alt_tick+0x54>
  806f8c:	d0a72f17 	ldw	r2,-25412(gp)
  806f90:	1000021e 	bne	r2,zero,806f9c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  806f94:	e0bffd17 	ldw	r2,-12(fp)
  806f98:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  806f9c:	e0bffd17 	ldw	r2,-12(fp)
  806fa0:	10800217 	ldw	r2,8(r2)
  806fa4:	d0e72f17 	ldw	r3,-25412(gp)
  806fa8:	18801d36 	bltu	r3,r2,807020 <alt_tick+0xd8>
  806fac:	e0bffd17 	ldw	r2,-12(fp)
  806fb0:	10800403 	ldbu	r2,16(r2)
  806fb4:	10803fcc 	andi	r2,r2,255
  806fb8:	1000191e 	bne	r2,zero,807020 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  806fbc:	e0bffd17 	ldw	r2,-12(fp)
  806fc0:	10800317 	ldw	r2,12(r2)
  806fc4:	e0fffd17 	ldw	r3,-12(fp)
  806fc8:	18c00517 	ldw	r3,20(r3)
  806fcc:	1809883a 	mov	r4,r3
  806fd0:	103ee83a 	callr	r2
  806fd4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  806fd8:	e0bfff17 	ldw	r2,-4(fp)
  806fdc:	1000031e 	bne	r2,zero,806fec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  806fe0:	e13ffd17 	ldw	r4,-12(fp)
  806fe4:	0806eac0 	call	806eac <alt_alarm_stop>
  806fe8:	00000d06 	br	807020 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  806fec:	e0bffd17 	ldw	r2,-12(fp)
  806ff0:	10c00217 	ldw	r3,8(r2)
  806ff4:	e0bfff17 	ldw	r2,-4(fp)
  806ff8:	1887883a 	add	r3,r3,r2
  806ffc:	e0bffd17 	ldw	r2,-12(fp)
  807000:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  807004:	e0bffd17 	ldw	r2,-12(fp)
  807008:	10c00217 	ldw	r3,8(r2)
  80700c:	d0a72f17 	ldw	r2,-25412(gp)
  807010:	1880032e 	bgeu	r3,r2,807020 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  807014:	e0bffd17 	ldw	r2,-12(fp)
  807018:	00c00044 	movi	r3,1
  80701c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  807020:	e0bffe17 	ldw	r2,-8(fp)
  807024:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  807028:	e0fffd17 	ldw	r3,-12(fp)
  80702c:	d0a00d04 	addi	r2,gp,-32716
  807030:	18bfcf1e 	bne	r3,r2,806f70 <__alt_mem_onchip_mem+0xff7fef70>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  807034:	0001883a 	nop
}
  807038:	0001883a 	nop
  80703c:	e037883a 	mov	sp,fp
  807040:	dfc00117 	ldw	ra,4(sp)
  807044:	df000017 	ldw	fp,0(sp)
  807048:	dec00204 	addi	sp,sp,8
  80704c:	f800283a 	ret

00807050 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  807050:	defffd04 	addi	sp,sp,-12
  807054:	dfc00215 	stw	ra,8(sp)
  807058:	df000115 	stw	fp,4(sp)
  80705c:	df000104 	addi	fp,sp,4
  807060:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  807064:	e13fff17 	ldw	r4,-4(fp)
  807068:	08070a40 	call	8070a4 <alt_busy_sleep>
}
  80706c:	e037883a 	mov	sp,fp
  807070:	dfc00117 	ldw	ra,4(sp)
  807074:	df000017 	ldw	fp,0(sp)
  807078:	dec00204 	addi	sp,sp,8
  80707c:	f800283a 	ret

00807080 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  807080:	deffff04 	addi	sp,sp,-4
  807084:	df000015 	stw	fp,0(sp)
  807088:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80708c:	000170fa 	wrctl	ienable,zero
}
  807090:	0001883a 	nop
  807094:	e037883a 	mov	sp,fp
  807098:	df000017 	ldw	fp,0(sp)
  80709c:	dec00104 	addi	sp,sp,4
  8070a0:	f800283a 	ret

008070a4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8070a4:	defffa04 	addi	sp,sp,-24
  8070a8:	dfc00515 	stw	ra,20(sp)
  8070ac:	df000415 	stw	fp,16(sp)
  8070b0:	df000404 	addi	fp,sp,16
  8070b4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8070b8:	008000c4 	movi	r2,3
  8070bc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8070c0:	e0fffd17 	ldw	r3,-12(fp)
  8070c4:	008003f4 	movhi	r2,15
  8070c8:	10909004 	addi	r2,r2,16960
  8070cc:	1885383a 	mul	r2,r3,r2
  8070d0:	100b883a 	mov	r5,r2
  8070d4:	0100bef4 	movhi	r4,763
  8070d8:	213c2004 	addi	r4,r4,-3968
  8070dc:	08037580 	call	803758 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8070e0:	100b883a 	mov	r5,r2
  8070e4:	01200034 	movhi	r4,32768
  8070e8:	213fffc4 	addi	r4,r4,-1
  8070ec:	08037580 	call	803758 <__udivsi3>
  8070f0:	100b883a 	mov	r5,r2
  8070f4:	e13fff17 	ldw	r4,-4(fp)
  8070f8:	08037580 	call	803758 <__udivsi3>
  8070fc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  807100:	e0bffe17 	ldw	r2,-8(fp)
  807104:	10002a26 	beq	r2,zero,8071b0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  807108:	e03ffc15 	stw	zero,-16(fp)
  80710c:	00001706 	br	80716c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  807110:	00a00034 	movhi	r2,32768
  807114:	10bfffc4 	addi	r2,r2,-1
  807118:	10bfffc4 	addi	r2,r2,-1
  80711c:	103ffe1e 	bne	r2,zero,807118 <__alt_mem_onchip_mem+0xff7ff118>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  807120:	e0fffd17 	ldw	r3,-12(fp)
  807124:	008003f4 	movhi	r2,15
  807128:	10909004 	addi	r2,r2,16960
  80712c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  807130:	100b883a 	mov	r5,r2
  807134:	0100bef4 	movhi	r4,763
  807138:	213c2004 	addi	r4,r4,-3968
  80713c:	08037580 	call	803758 <__udivsi3>
  807140:	100b883a 	mov	r5,r2
  807144:	01200034 	movhi	r4,32768
  807148:	213fffc4 	addi	r4,r4,-1
  80714c:	08037580 	call	803758 <__udivsi3>
  807150:	1007883a 	mov	r3,r2
  807154:	e0bfff17 	ldw	r2,-4(fp)
  807158:	10c5c83a 	sub	r2,r2,r3
  80715c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  807160:	e0bffc17 	ldw	r2,-16(fp)
  807164:	10800044 	addi	r2,r2,1
  807168:	e0bffc15 	stw	r2,-16(fp)
  80716c:	e0fffc17 	ldw	r3,-16(fp)
  807170:	e0bffe17 	ldw	r2,-8(fp)
  807174:	18bfe616 	blt	r3,r2,807110 <__alt_mem_onchip_mem+0xff7ff110>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  807178:	e0fffd17 	ldw	r3,-12(fp)
  80717c:	008003f4 	movhi	r2,15
  807180:	10909004 	addi	r2,r2,16960
  807184:	1885383a 	mul	r2,r3,r2
  807188:	100b883a 	mov	r5,r2
  80718c:	0100bef4 	movhi	r4,763
  807190:	213c2004 	addi	r4,r4,-3968
  807194:	08037580 	call	803758 <__udivsi3>
  807198:	1007883a 	mov	r3,r2
  80719c:	e0bfff17 	ldw	r2,-4(fp)
  8071a0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8071a4:	10bfffc4 	addi	r2,r2,-1
  8071a8:	103ffe1e 	bne	r2,zero,8071a4 <__alt_mem_onchip_mem+0xff7ff1a4>
  8071ac:	00000d06 	br	8071e4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8071b0:	e0fffd17 	ldw	r3,-12(fp)
  8071b4:	008003f4 	movhi	r2,15
  8071b8:	10909004 	addi	r2,r2,16960
  8071bc:	1885383a 	mul	r2,r3,r2
  8071c0:	100b883a 	mov	r5,r2
  8071c4:	0100bef4 	movhi	r4,763
  8071c8:	213c2004 	addi	r4,r4,-3968
  8071cc:	08037580 	call	803758 <__udivsi3>
  8071d0:	1007883a 	mov	r3,r2
  8071d4:	e0bfff17 	ldw	r2,-4(fp)
  8071d8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8071dc:	10bfffc4 	addi	r2,r2,-1
  8071e0:	00bffe16 	blt	zero,r2,8071dc <__alt_mem_onchip_mem+0xff7ff1dc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8071e4:	0005883a 	mov	r2,zero
}
  8071e8:	e037883a 	mov	sp,fp
  8071ec:	dfc00117 	ldw	ra,4(sp)
  8071f0:	df000017 	ldw	fp,0(sp)
  8071f4:	dec00204 	addi	sp,sp,8
  8071f8:	f800283a 	ret

008071fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8071fc:	defffa04 	addi	sp,sp,-24
  807200:	dfc00515 	stw	ra,20(sp)
  807204:	df000415 	stw	fp,16(sp)
  807208:	df000404 	addi	fp,sp,16
  80720c:	e13ffe15 	stw	r4,-8(fp)
  807210:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  807214:	e0bfff17 	ldw	r2,-4(fp)
  807218:	10800017 	ldw	r2,0(r2)
  80721c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  807220:	e13ffe17 	ldw	r4,-8(fp)
  807224:	0800b200 	call	800b20 <strlen>
  807228:	10800044 	addi	r2,r2,1
  80722c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807230:	00000d06 	br	807268 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  807234:	e0bffc17 	ldw	r2,-16(fp)
  807238:	10800217 	ldw	r2,8(r2)
  80723c:	e0fffd17 	ldw	r3,-12(fp)
  807240:	180d883a 	mov	r6,r3
  807244:	e17ffe17 	ldw	r5,-8(fp)
  807248:	1009883a 	mov	r4,r2
  80724c:	08075200 	call	807520 <memcmp>
  807250:	1000021e 	bne	r2,zero,80725c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  807254:	e0bffc17 	ldw	r2,-16(fp)
  807258:	00000706 	br	807278 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80725c:	e0bffc17 	ldw	r2,-16(fp)
  807260:	10800017 	ldw	r2,0(r2)
  807264:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807268:	e0fffc17 	ldw	r3,-16(fp)
  80726c:	e0bfff17 	ldw	r2,-4(fp)
  807270:	18bff01e 	bne	r3,r2,807234 <__alt_mem_onchip_mem+0xff7ff234>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  807274:	0005883a 	mov	r2,zero
}
  807278:	e037883a 	mov	sp,fp
  80727c:	dfc00117 	ldw	ra,4(sp)
  807280:	df000017 	ldw	fp,0(sp)
  807284:	dec00204 	addi	sp,sp,8
  807288:	f800283a 	ret

0080728c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80728c:	defffb04 	addi	sp,sp,-20
  807290:	dfc00415 	stw	ra,16(sp)
  807294:	df000315 	stw	fp,12(sp)
  807298:	df000304 	addi	fp,sp,12
  80729c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8072a0:	d0a00417 	ldw	r2,-32752(gp)
  8072a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8072a8:	00003106 	br	807370 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8072ac:	e0bffd17 	ldw	r2,-12(fp)
  8072b0:	10800217 	ldw	r2,8(r2)
  8072b4:	1009883a 	mov	r4,r2
  8072b8:	0800b200 	call	800b20 <strlen>
  8072bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8072c0:	e0bffd17 	ldw	r2,-12(fp)
  8072c4:	10c00217 	ldw	r3,8(r2)
  8072c8:	e0bffe17 	ldw	r2,-8(fp)
  8072cc:	10bfffc4 	addi	r2,r2,-1
  8072d0:	1885883a 	add	r2,r3,r2
  8072d4:	10800003 	ldbu	r2,0(r2)
  8072d8:	10803fcc 	andi	r2,r2,255
  8072dc:	1080201c 	xori	r2,r2,128
  8072e0:	10bfe004 	addi	r2,r2,-128
  8072e4:	10800bd8 	cmpnei	r2,r2,47
  8072e8:	1000031e 	bne	r2,zero,8072f8 <alt_find_file+0x6c>
    {
      len -= 1;
  8072ec:	e0bffe17 	ldw	r2,-8(fp)
  8072f0:	10bfffc4 	addi	r2,r2,-1
  8072f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8072f8:	e0bffe17 	ldw	r2,-8(fp)
  8072fc:	e0ffff17 	ldw	r3,-4(fp)
  807300:	1885883a 	add	r2,r3,r2
  807304:	10800003 	ldbu	r2,0(r2)
  807308:	10803fcc 	andi	r2,r2,255
  80730c:	1080201c 	xori	r2,r2,128
  807310:	10bfe004 	addi	r2,r2,-128
  807314:	10800be0 	cmpeqi	r2,r2,47
  807318:	1000081e 	bne	r2,zero,80733c <alt_find_file+0xb0>
  80731c:	e0bffe17 	ldw	r2,-8(fp)
  807320:	e0ffff17 	ldw	r3,-4(fp)
  807324:	1885883a 	add	r2,r3,r2
  807328:	10800003 	ldbu	r2,0(r2)
  80732c:	10803fcc 	andi	r2,r2,255
  807330:	1080201c 	xori	r2,r2,128
  807334:	10bfe004 	addi	r2,r2,-128
  807338:	10000a1e 	bne	r2,zero,807364 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80733c:	e0bffd17 	ldw	r2,-12(fp)
  807340:	10800217 	ldw	r2,8(r2)
  807344:	e0fffe17 	ldw	r3,-8(fp)
  807348:	180d883a 	mov	r6,r3
  80734c:	e17fff17 	ldw	r5,-4(fp)
  807350:	1009883a 	mov	r4,r2
  807354:	08075200 	call	807520 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807358:	1000021e 	bne	r2,zero,807364 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80735c:	e0bffd17 	ldw	r2,-12(fp)
  807360:	00000706 	br	807380 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  807364:	e0bffd17 	ldw	r2,-12(fp)
  807368:	10800017 	ldw	r2,0(r2)
  80736c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807370:	e0fffd17 	ldw	r3,-12(fp)
  807374:	d0a00404 	addi	r2,gp,-32752
  807378:	18bfcc1e 	bne	r3,r2,8072ac <__alt_mem_onchip_mem+0xff7ff2ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80737c:	0005883a 	mov	r2,zero
}
  807380:	e037883a 	mov	sp,fp
  807384:	dfc00117 	ldw	ra,4(sp)
  807388:	df000017 	ldw	fp,0(sp)
  80738c:	dec00204 	addi	sp,sp,8
  807390:	f800283a 	ret

00807394 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  807394:	defffc04 	addi	sp,sp,-16
  807398:	df000315 	stw	fp,12(sp)
  80739c:	df000304 	addi	fp,sp,12
  8073a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8073a4:	00bffa04 	movi	r2,-24
  8073a8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8073ac:	e03ffd15 	stw	zero,-12(fp)
  8073b0:	00001906 	br	807418 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  8073b4:	00802074 	movhi	r2,129
  8073b8:	10a0e404 	addi	r2,r2,-31856
  8073bc:	e0fffd17 	ldw	r3,-12(fp)
  8073c0:	18c00324 	muli	r3,r3,12
  8073c4:	10c5883a 	add	r2,r2,r3
  8073c8:	10800017 	ldw	r2,0(r2)
  8073cc:	10000f1e 	bne	r2,zero,80740c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  8073d0:	00802074 	movhi	r2,129
  8073d4:	10a0e404 	addi	r2,r2,-31856
  8073d8:	e0fffd17 	ldw	r3,-12(fp)
  8073dc:	18c00324 	muli	r3,r3,12
  8073e0:	10c5883a 	add	r2,r2,r3
  8073e4:	e0ffff17 	ldw	r3,-4(fp)
  8073e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8073ec:	d0e00817 	ldw	r3,-32736(gp)
  8073f0:	e0bffd17 	ldw	r2,-12(fp)
  8073f4:	1880020e 	bge	r3,r2,807400 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8073f8:	e0bffd17 	ldw	r2,-12(fp)
  8073fc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  807400:	e0bffd17 	ldw	r2,-12(fp)
  807404:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  807408:	00000606 	br	807424 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80740c:	e0bffd17 	ldw	r2,-12(fp)
  807410:	10800044 	addi	r2,r2,1
  807414:	e0bffd15 	stw	r2,-12(fp)
  807418:	e0bffd17 	ldw	r2,-12(fp)
  80741c:	10800810 	cmplti	r2,r2,32
  807420:	103fe41e 	bne	r2,zero,8073b4 <__alt_mem_onchip_mem+0xff7ff3b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  807424:	e0bffe17 	ldw	r2,-8(fp)
}
  807428:	e037883a 	mov	sp,fp
  80742c:	df000017 	ldw	fp,0(sp)
  807430:	dec00104 	addi	sp,sp,4
  807434:	f800283a 	ret

00807438 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  807438:	defffe04 	addi	sp,sp,-8
  80743c:	df000115 	stw	fp,4(sp)
  807440:	df000104 	addi	fp,sp,4
  807444:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  807448:	e0bfff17 	ldw	r2,-4(fp)
  80744c:	10bffe84 	addi	r2,r2,-6
  807450:	10c00428 	cmpgeui	r3,r2,16
  807454:	18001a1e 	bne	r3,zero,8074c0 <alt_exception_cause_generated_bad_addr+0x88>
  807458:	100690ba 	slli	r3,r2,2
  80745c:	00802034 	movhi	r2,128
  807460:	109d1c04 	addi	r2,r2,29808
  807464:	1885883a 	add	r2,r3,r2
  807468:	10800017 	ldw	r2,0(r2)
  80746c:	1000683a 	jmp	r2
  807470:	008074b0 	cmpltui	r2,zero,466
  807474:	008074b0 	cmpltui	r2,zero,466
  807478:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  80747c:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  807480:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  807484:	008074b0 	cmpltui	r2,zero,466
  807488:	008074b8 	rdprs	r2,zero,466
  80748c:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  807490:	008074b0 	cmpltui	r2,zero,466
  807494:	008074b0 	cmpltui	r2,zero,466
  807498:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  80749c:	008074b0 	cmpltui	r2,zero,466
  8074a0:	008074b8 	rdprs	r2,zero,466
  8074a4:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  8074a8:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  8074ac:	008074b0 	cmpltui	r2,zero,466
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8074b0:	00800044 	movi	r2,1
  8074b4:	00000306 	br	8074c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8074b8:	0005883a 	mov	r2,zero
  8074bc:	00000106 	br	8074c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8074c0:	0005883a 	mov	r2,zero
  }
}
  8074c4:	e037883a 	mov	sp,fp
  8074c8:	df000017 	ldw	fp,0(sp)
  8074cc:	dec00104 	addi	sp,sp,4
  8074d0:	f800283a 	ret

008074d4 <atexit>:
  8074d4:	200b883a 	mov	r5,r4
  8074d8:	000f883a 	mov	r7,zero
  8074dc:	000d883a 	mov	r6,zero
  8074e0:	0009883a 	mov	r4,zero
  8074e4:	080759c1 	jmpi	80759c <__register_exitproc>

008074e8 <exit>:
  8074e8:	defffe04 	addi	sp,sp,-8
  8074ec:	000b883a 	mov	r5,zero
  8074f0:	dc000015 	stw	r16,0(sp)
  8074f4:	dfc00115 	stw	ra,4(sp)
  8074f8:	2021883a 	mov	r16,r4
  8074fc:	08076b40 	call	8076b4 <__call_exitprocs>
  807500:	00802074 	movhi	r2,129
  807504:	10a5d504 	addi	r2,r2,-26796
  807508:	11000017 	ldw	r4,0(r2)
  80750c:	20800f17 	ldw	r2,60(r4)
  807510:	10000126 	beq	r2,zero,807518 <exit+0x30>
  807514:	103ee83a 	callr	r2
  807518:	8009883a 	mov	r4,r16
  80751c:	08078340 	call	807834 <_exit>

00807520 <memcmp>:
  807520:	01c000c4 	movi	r7,3
  807524:	3980192e 	bgeu	r7,r6,80758c <memcmp+0x6c>
  807528:	2144b03a 	or	r2,r4,r5
  80752c:	11c4703a 	and	r2,r2,r7
  807530:	10000f26 	beq	r2,zero,807570 <memcmp+0x50>
  807534:	20800003 	ldbu	r2,0(r4)
  807538:	28c00003 	ldbu	r3,0(r5)
  80753c:	10c0151e 	bne	r2,r3,807594 <memcmp+0x74>
  807540:	31bfff84 	addi	r6,r6,-2
  807544:	01ffffc4 	movi	r7,-1
  807548:	00000406 	br	80755c <memcmp+0x3c>
  80754c:	20800003 	ldbu	r2,0(r4)
  807550:	28c00003 	ldbu	r3,0(r5)
  807554:	31bfffc4 	addi	r6,r6,-1
  807558:	10c00e1e 	bne	r2,r3,807594 <memcmp+0x74>
  80755c:	21000044 	addi	r4,r4,1
  807560:	29400044 	addi	r5,r5,1
  807564:	31fff91e 	bne	r6,r7,80754c <__alt_mem_onchip_mem+0xff7ff54c>
  807568:	0005883a 	mov	r2,zero
  80756c:	f800283a 	ret
  807570:	20c00017 	ldw	r3,0(r4)
  807574:	28800017 	ldw	r2,0(r5)
  807578:	18bfee1e 	bne	r3,r2,807534 <__alt_mem_onchip_mem+0xff7ff534>
  80757c:	31bfff04 	addi	r6,r6,-4
  807580:	21000104 	addi	r4,r4,4
  807584:	29400104 	addi	r5,r5,4
  807588:	39bff936 	bltu	r7,r6,807570 <__alt_mem_onchip_mem+0xff7ff570>
  80758c:	303fe91e 	bne	r6,zero,807534 <__alt_mem_onchip_mem+0xff7ff534>
  807590:	003ff506 	br	807568 <__alt_mem_onchip_mem+0xff7ff568>
  807594:	10c5c83a 	sub	r2,r2,r3
  807598:	f800283a 	ret

0080759c <__register_exitproc>:
  80759c:	defffa04 	addi	sp,sp,-24
  8075a0:	dc000315 	stw	r16,12(sp)
  8075a4:	04002074 	movhi	r16,129
  8075a8:	8425d504 	addi	r16,r16,-26796
  8075ac:	80c00017 	ldw	r3,0(r16)
  8075b0:	dc400415 	stw	r17,16(sp)
  8075b4:	dfc00515 	stw	ra,20(sp)
  8075b8:	18805217 	ldw	r2,328(r3)
  8075bc:	2023883a 	mov	r17,r4
  8075c0:	10003726 	beq	r2,zero,8076a0 <__register_exitproc+0x104>
  8075c4:	10c00117 	ldw	r3,4(r2)
  8075c8:	010007c4 	movi	r4,31
  8075cc:	20c00e16 	blt	r4,r3,807608 <__register_exitproc+0x6c>
  8075d0:	1a000044 	addi	r8,r3,1
  8075d4:	8800221e 	bne	r17,zero,807660 <__register_exitproc+0xc4>
  8075d8:	18c00084 	addi	r3,r3,2
  8075dc:	18c7883a 	add	r3,r3,r3
  8075e0:	18c7883a 	add	r3,r3,r3
  8075e4:	12000115 	stw	r8,4(r2)
  8075e8:	10c7883a 	add	r3,r2,r3
  8075ec:	19400015 	stw	r5,0(r3)
  8075f0:	0005883a 	mov	r2,zero
  8075f4:	dfc00517 	ldw	ra,20(sp)
  8075f8:	dc400417 	ldw	r17,16(sp)
  8075fc:	dc000317 	ldw	r16,12(sp)
  807600:	dec00604 	addi	sp,sp,24
  807604:	f800283a 	ret
  807608:	00800034 	movhi	r2,0
  80760c:	10800004 	addi	r2,r2,0
  807610:	10002626 	beq	r2,zero,8076ac <__register_exitproc+0x110>
  807614:	01006404 	movi	r4,400
  807618:	d9400015 	stw	r5,0(sp)
  80761c:	d9800115 	stw	r6,4(sp)
  807620:	d9c00215 	stw	r7,8(sp)
  807624:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  807628:	d9400017 	ldw	r5,0(sp)
  80762c:	d9800117 	ldw	r6,4(sp)
  807630:	d9c00217 	ldw	r7,8(sp)
  807634:	10001d26 	beq	r2,zero,8076ac <__register_exitproc+0x110>
  807638:	81000017 	ldw	r4,0(r16)
  80763c:	10000115 	stw	zero,4(r2)
  807640:	02000044 	movi	r8,1
  807644:	22405217 	ldw	r9,328(r4)
  807648:	0007883a 	mov	r3,zero
  80764c:	12400015 	stw	r9,0(r2)
  807650:	20805215 	stw	r2,328(r4)
  807654:	10006215 	stw	zero,392(r2)
  807658:	10006315 	stw	zero,396(r2)
  80765c:	883fde26 	beq	r17,zero,8075d8 <__alt_mem_onchip_mem+0xff7ff5d8>
  807660:	18c9883a 	add	r4,r3,r3
  807664:	2109883a 	add	r4,r4,r4
  807668:	1109883a 	add	r4,r2,r4
  80766c:	21802215 	stw	r6,136(r4)
  807670:	01800044 	movi	r6,1
  807674:	12406217 	ldw	r9,392(r2)
  807678:	30cc983a 	sll	r6,r6,r3
  80767c:	4992b03a 	or	r9,r9,r6
  807680:	12406215 	stw	r9,392(r2)
  807684:	21c04215 	stw	r7,264(r4)
  807688:	01000084 	movi	r4,2
  80768c:	893fd21e 	bne	r17,r4,8075d8 <__alt_mem_onchip_mem+0xff7ff5d8>
  807690:	11006317 	ldw	r4,396(r2)
  807694:	218cb03a 	or	r6,r4,r6
  807698:	11806315 	stw	r6,396(r2)
  80769c:	003fce06 	br	8075d8 <__alt_mem_onchip_mem+0xff7ff5d8>
  8076a0:	18805304 	addi	r2,r3,332
  8076a4:	18805215 	stw	r2,328(r3)
  8076a8:	003fc606 	br	8075c4 <__alt_mem_onchip_mem+0xff7ff5c4>
  8076ac:	00bfffc4 	movi	r2,-1
  8076b0:	003fd006 	br	8075f4 <__alt_mem_onchip_mem+0xff7ff5f4>

008076b4 <__call_exitprocs>:
  8076b4:	defff504 	addi	sp,sp,-44
  8076b8:	df000915 	stw	fp,36(sp)
  8076bc:	dd400615 	stw	r21,24(sp)
  8076c0:	dc800315 	stw	r18,12(sp)
  8076c4:	dfc00a15 	stw	ra,40(sp)
  8076c8:	ddc00815 	stw	r23,32(sp)
  8076cc:	dd800715 	stw	r22,28(sp)
  8076d0:	dd000515 	stw	r20,20(sp)
  8076d4:	dcc00415 	stw	r19,16(sp)
  8076d8:	dc400215 	stw	r17,8(sp)
  8076dc:	dc000115 	stw	r16,4(sp)
  8076e0:	d9000015 	stw	r4,0(sp)
  8076e4:	2839883a 	mov	fp,r5
  8076e8:	04800044 	movi	r18,1
  8076ec:	057fffc4 	movi	r21,-1
  8076f0:	00802074 	movhi	r2,129
  8076f4:	10a5d504 	addi	r2,r2,-26796
  8076f8:	12000017 	ldw	r8,0(r2)
  8076fc:	45005217 	ldw	r20,328(r8)
  807700:	44c05204 	addi	r19,r8,328
  807704:	a0001c26 	beq	r20,zero,807778 <__call_exitprocs+0xc4>
  807708:	a0800117 	ldw	r2,4(r20)
  80770c:	15ffffc4 	addi	r23,r2,-1
  807710:	b8000d16 	blt	r23,zero,807748 <__call_exitprocs+0x94>
  807714:	14000044 	addi	r16,r2,1
  807718:	8421883a 	add	r16,r16,r16
  80771c:	8421883a 	add	r16,r16,r16
  807720:	84402004 	addi	r17,r16,128
  807724:	a463883a 	add	r17,r20,r17
  807728:	a421883a 	add	r16,r20,r16
  80772c:	e0001e26 	beq	fp,zero,8077a8 <__call_exitprocs+0xf4>
  807730:	80804017 	ldw	r2,256(r16)
  807734:	e0801c26 	beq	fp,r2,8077a8 <__call_exitprocs+0xf4>
  807738:	bdffffc4 	addi	r23,r23,-1
  80773c:	843fff04 	addi	r16,r16,-4
  807740:	8c7fff04 	addi	r17,r17,-4
  807744:	bd7ff91e 	bne	r23,r21,80772c <__alt_mem_onchip_mem+0xff7ff72c>
  807748:	00800034 	movhi	r2,0
  80774c:	10800004 	addi	r2,r2,0
  807750:	10000926 	beq	r2,zero,807778 <__call_exitprocs+0xc4>
  807754:	a0800117 	ldw	r2,4(r20)
  807758:	1000301e 	bne	r2,zero,80781c <__call_exitprocs+0x168>
  80775c:	a0800017 	ldw	r2,0(r20)
  807760:	10003226 	beq	r2,zero,80782c <__call_exitprocs+0x178>
  807764:	a009883a 	mov	r4,r20
  807768:	98800015 	stw	r2,0(r19)
  80776c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  807770:	9d000017 	ldw	r20,0(r19)
  807774:	a03fe41e 	bne	r20,zero,807708 <__alt_mem_onchip_mem+0xff7ff708>
  807778:	dfc00a17 	ldw	ra,40(sp)
  80777c:	df000917 	ldw	fp,36(sp)
  807780:	ddc00817 	ldw	r23,32(sp)
  807784:	dd800717 	ldw	r22,28(sp)
  807788:	dd400617 	ldw	r21,24(sp)
  80778c:	dd000517 	ldw	r20,20(sp)
  807790:	dcc00417 	ldw	r19,16(sp)
  807794:	dc800317 	ldw	r18,12(sp)
  807798:	dc400217 	ldw	r17,8(sp)
  80779c:	dc000117 	ldw	r16,4(sp)
  8077a0:	dec00b04 	addi	sp,sp,44
  8077a4:	f800283a 	ret
  8077a8:	a0800117 	ldw	r2,4(r20)
  8077ac:	80c00017 	ldw	r3,0(r16)
  8077b0:	10bfffc4 	addi	r2,r2,-1
  8077b4:	15c01426 	beq	r2,r23,807808 <__call_exitprocs+0x154>
  8077b8:	80000015 	stw	zero,0(r16)
  8077bc:	183fde26 	beq	r3,zero,807738 <__alt_mem_onchip_mem+0xff7ff738>
  8077c0:	95c8983a 	sll	r4,r18,r23
  8077c4:	a0806217 	ldw	r2,392(r20)
  8077c8:	a5800117 	ldw	r22,4(r20)
  8077cc:	2084703a 	and	r2,r4,r2
  8077d0:	10000b26 	beq	r2,zero,807800 <__call_exitprocs+0x14c>
  8077d4:	a0806317 	ldw	r2,396(r20)
  8077d8:	2088703a 	and	r4,r4,r2
  8077dc:	20000c1e 	bne	r4,zero,807810 <__call_exitprocs+0x15c>
  8077e0:	89400017 	ldw	r5,0(r17)
  8077e4:	d9000017 	ldw	r4,0(sp)
  8077e8:	183ee83a 	callr	r3
  8077ec:	a0800117 	ldw	r2,4(r20)
  8077f0:	15bfbf1e 	bne	r2,r22,8076f0 <__alt_mem_onchip_mem+0xff7ff6f0>
  8077f4:	98800017 	ldw	r2,0(r19)
  8077f8:	153fcf26 	beq	r2,r20,807738 <__alt_mem_onchip_mem+0xff7ff738>
  8077fc:	003fbc06 	br	8076f0 <__alt_mem_onchip_mem+0xff7ff6f0>
  807800:	183ee83a 	callr	r3
  807804:	003ff906 	br	8077ec <__alt_mem_onchip_mem+0xff7ff7ec>
  807808:	a5c00115 	stw	r23,4(r20)
  80780c:	003feb06 	br	8077bc <__alt_mem_onchip_mem+0xff7ff7bc>
  807810:	89000017 	ldw	r4,0(r17)
  807814:	183ee83a 	callr	r3
  807818:	003ff406 	br	8077ec <__alt_mem_onchip_mem+0xff7ff7ec>
  80781c:	a0800017 	ldw	r2,0(r20)
  807820:	a027883a 	mov	r19,r20
  807824:	1029883a 	mov	r20,r2
  807828:	003fb606 	br	807704 <__alt_mem_onchip_mem+0xff7ff704>
  80782c:	0005883a 	mov	r2,zero
  807830:	003ffb06 	br	807820 <__alt_mem_onchip_mem+0xff7ff820>

00807834 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  807834:	defffd04 	addi	sp,sp,-12
  807838:	df000215 	stw	fp,8(sp)
  80783c:	df000204 	addi	fp,sp,8
  807840:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  807844:	0001883a 	nop
  807848:	e0bfff17 	ldw	r2,-4(fp)
  80784c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  807850:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  807854:	10000226 	beq	r2,zero,807860 <_exit+0x2c>
    ALT_SIM_FAIL();
  807858:	002af070 	cmpltui	zero,zero,43969
  80785c:	00000106 	br	807864 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  807860:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  807864:	003fff06 	br	807864 <__alt_mem_onchip_mem+0xff7ff864>
