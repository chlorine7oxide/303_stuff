
303_real_real.elf:     file format elf32-littlenios2
303_real_real.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000187a0 memsz 0x000187a0 flags r-x
    LOAD off    0x000197c0 vaddr 0x008187c0 paddr 0x0081a49c align 2**12
         filesz 0x00001cdc memsz 0x00001cdc flags rw-
    LOAD off    0x0001c178 vaddr 0x0081c178 paddr 0x0081c178 align 2**12
         filesz 0x00000000 memsz 0x000001c8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017fec  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000590  00818230  00818230  00019230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cdc  008187c0  0081a49c  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001c8  0081c178  0081c178  0001c178  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081c340  0081c340  0001b49c  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0001b49c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b49c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001008  00000000  00000000  0001b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000270df  00000000  00000000  0001c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009aae  00000000  00000000  000435a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000de75  00000000  00000000  0004d055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002658  00000000  00000000  0005aecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004925  00000000  00000000  0005d524  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017751  00000000  00000000  00061e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007959c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a8  00000000  00000000  00079600  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007e701  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007e704  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e707  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e708  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0007e709  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0007e712  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0007e71b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0007e724  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001d  00000000  00000000  0007e730  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  0007e74d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00818230 l    d  .rodata	00000000 .rodata
008187c0 l    d  .rwdata	00000000 .rwdata
0081c178 l    d  .bss	00000000 .bss
0081c340 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../303_real_real_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 c_heart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 scchart_heart.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00818376 l     O .rodata	00000010 zeroes.4404
0080affc l     F .text	000000bc __sbprintf
00818386 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080b20c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080cd3c l     F .text	00000008 __fp_unlock
0080cd50 l     F .text	0000019c __sinit.part.1
0080ceec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008187c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00818c04 l     O .rwdata	00000020 lc_ctype_charset
00818be4 l     O .rwdata	00000020 lc_message_charset
00818c24 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008183b8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080f804 l     F .text	000000fc __sprint_r.part.0
008184ec l     O .rodata	00000010 blanks.4348
008184dc l     O .rodata	00000010 zeroes.4349
00810d90 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0081423c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00814348 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00814374 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00814460 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00814540 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081462c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00814800 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081a484 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00814bf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00814d24 l     F .text	00000034 alt_dev_reg
0081920c l     O .rwdata	00001060 jtag_uart
0081a26c l     O .rwdata	00000120 lcd
0081a38c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081504c l     F .text	0000020c altera_avalon_jtag_uart_irq
00815258 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081a490 l     O .rwdata	00000004 colstart
00815890 l     F .text	000000b8 lcd_write_command
00815948 l     F .text	000000d8 lcd_write_data
00815a20 l     F .text	000000d0 lcd_clear_screen
00815af0 l     F .text	000001ec lcd_repaint_screen
00815cdc l     F .text	000000cc lcd_scroll_up
00815da8 l     F .text	000002ac lcd_handle_escape
0081652c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081676c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00816a1c l     F .text	0000009c altera_avalon_uart_irq
00816ab8 l     F .text	000000e4 altera_avalon_uart_rxirq
00816b9c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00816d38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00816f50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00817180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008175f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00817734 l     F .text	0000003c alt_get_errno
00817770 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081863f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081c1b4 g     O .bss	00000004 alt_instruction_exception_handler
0080f314 g     F .text	00000074 _mprec_log10
0080f400 g     F .text	0000008c __any_on
008117e8 g     F .text	00000054 _isatty_r
008183c4 g     O .rodata	00000028 __mprec_tinytens
0081473c g     F .text	0000007c alt_main
0081c240 g     O .bss	00000100 alt_irq
0081183c g     F .text	00000060 _lseek_r
0081a49c g       *ABS*	00000000 __flash_rwdata_start
00813848 g     F .text	00000088 .hidden __eqdf2
0081c340 g       *ABS*	00000000 __alt_heap_start
00808dac g     F .text	0000003c printf
00812114 g     F .text	0000009c _wcrtomb_r
0080f62c g     F .text	0000005c __sseek
0080d08c g     F .text	00000010 __sinit
00811fbc g     F .text	00000140 __swbuf_r
0080d698 g     F .text	0000007c _setlocale_r
0080cef4 g     F .text	00000068 __sfmoreglue
008147dc g     F .text	00000024 __malloc_unlock
0081189c g     F .text	0000015c memmove
0080d074 g     F .text	00000018 _cleanup
0080e490 g     F .text	000000a8 _Balloc
00808170 g     F .text	000000dc .hidden __gtdf2
008179b8 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008112d0 g     F .text	0000005c _fstat_r
0081c198 g     O .bss	00000004 errno
0080f5a8 g     F .text	00000008 __seofread
0081c1a0 g     O .bss	00000004 alt_argv
0081a451 g     O .rwdata	00000001 ignore_a
00822450 g       *ABS*	00000000 _gp
00817988 g     F .text	00000030 usleep
00807370 g     F .text	00000220 reset
0081908c g     O .rwdata	00000180 alt_fd_list
00817b34 g     F .text	00000090 alt_find_dev
0080e220 g     F .text	00000148 memcpy
0080cd44 g     F .text	0000000c _cleanup_r
00808c3c g     F .text	000000dc .hidden __floatsidf
008176b8 g     F .text	0000007c alt_io_redirect
0080824c g     F .text	000000f4 .hidden __ltdf2
00818230 g       *ABS*	00000000 __DTOR_END__
00800388 g     F .text	00000024 PVARP_interrupt
00817e00 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080f48c g     F .text	00000074 __fpclassifyd
0080f270 g     F .text	000000a4 __ratio
00810d74 g     F .text	0000001c __vfiprintf_internal
00815450 g     F .text	0000021c altera_avalon_jtag_uart_read
00808d7c g     F .text	00000030 _printf_r
00812ea4 g     F .text	00000064 .hidden __udivsi3
0081449c g     F .text	000000a4 isatty
00818414 g     O .rodata	000000c8 __mprec_tens
0081c17b g     O .bss	00000001 need_v_pulse
0080d714 g     F .text	0000000c __locale_charset
00817d70 g     F .text	00000090 alt_icache_flush
0081c194 g     O .bss	00000004 __malloc_top_pad
0081a45c g     O .rwdata	00000004 __mb_cur_max
0080d744 g     F .text	0000000c _localeconv_r
0081132c g     F .text	000004bc __sfvwrite_r
0080e89c g     F .text	0000003c __i2b
0080f500 g     F .text	00000054 _sbrk_r
0081c17f g     O .bss	00000001 char_recieve
008119f8 g     F .text	00000060 _read_r
0081a47c g     O .rwdata	00000004 alt_max_fd
00810fc4 g     F .text	000000f0 _fclose_r
0080cd0c g     F .text	00000030 fflush
0081c190 g     O .bss	00000004 __malloc_max_sbrked_mem
0081c17e g     O .bss	00000001 ap
008078c4 g     F .text	000008ac .hidden __adddf3
0080f018 g     F .text	0000010c __b2d
00812874 g     F .text	00000538 .hidden __umoddi3
00814668 g     F .text	000000d4 lseek
0081a454 g     O .rwdata	00000004 _global_impure_ptr
00811a58 g     F .text	00000564 _realloc_r
0081c340 g       *ABS*	00000000 __bss_end
00817504 g     F .text	000000f0 alt_iic_isr_register
00814ae8 g     F .text	00000108 alt_tick
008122fc g     F .text	00000578 .hidden __udivdi3
0081122c g     F .text	00000024 _fputwc_r
008183ec g     O .rodata	00000028 __mprec_bigtens
0080e680 g     F .text	00000104 __s2b
00814068 g     F .text	000000a8 .hidden __floatunsidf
0080ed58 g     F .text	00000060 __mcmp
00816970 g     F .text	000000ac altera_avalon_uart_init
0080d0ac g     F .text	00000018 __fp_lock_all
008174b8 g     F .text	0000004c alt_ic_irq_enabled
00814a4c g     F .text	0000009c alt_alarm_stop
0081c1b0 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00819064 g     O .rwdata	00000028 alt_dev_null
0081c17c g     O .bss	00000001 started
00817138 g     F .text	00000048 alt_dcache_flush_all
0080e784 g     F .text	00000068 __hi0bits
00813fe8 g     F .text	00000080 .hidden __fixdfsi
0081c178 g     O .bss	00000001 can_vpulse
0081a49c g       *ABS*	00000000 __ram_rwdata_end
0081a474 g     O .rwdata	00000008 alt_dev_list
00814c2c g     F .text	000000f8 write
008187c0 g       *ABS*	00000000 __ram_rodata_end
008143b0 g     F .text	000000b0 fstat
0080824c g     F .text	000000f4 .hidden __ledf2
0080781c g     F .text	00000050 uart_tx
0080ead0 g     F .text	00000140 __pow5mult
0080f918 g     F .text	0000145c ___vfiprintf_internal_r
0081c188 g     O .bss	00000004 __nlocale_changed
00812f08 g     F .text	00000058 .hidden __umodsi3
00800290 g     F .text	000000f8 start_cycle
0081c340 g       *ABS*	00000000 end
00816054 g     F .text	000004d8 altera_avalon_lcd_16207_write
00816f8c g     F .text	000001ac altera_avalon_uart_write
00814f8c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00818230 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008167e4 g     F .text	0000007c alt_avalon_timer_sc_init
008168c0 g     F .text	00000060 altera_avalon_uart_write_fd
00808d18 g     F .text	00000064 .hidden __clzsi2
00816920 g     F .text	00000050 altera_avalon_uart_close_fd
0081566c g     F .text	00000224 altera_avalon_jtag_uart_write
0080d09c g     F .text	00000004 __sfp_lock_acquire
0080e13c g     F .text	000000e4 memchr
00808de8 g     F .text	000021f8 ___vfprintf_internal_r
0080d200 g     F .text	00000310 _free_r
0080d720 g     F .text	00000010 __locale_mb_cur_max
0081807c g     F .text	00000180 __call_exitprocs
0081c184 g     O .bss	00000004 __mlocale_changed
0081a460 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081c1a8 g     O .bss	00000004 _alt_tick_rate
0080ec10 g     F .text	00000148 __lshift
0081c1ac g     O .bss	00000004 _alt_nticks
0081483c g     F .text	000000fc read
00814d90 g     F .text	00000098 alt_sys_init
0081c1e0 g     O .bss	00000018 URI_LRI
00817f64 g     F .text	00000118 __register_exitproc
0080e8d8 g     F .text	000001f8 __multiply
008152f8 g     F .text	00000068 altera_avalon_jtag_uart_close
008187c0 g       *ABS*	00000000 __ram_rwdata_start
00818230 g       *ABS*	00000000 __ram_rodata_start
0081c1b8 g     O .bss	00000028 __malloc_current_mallinfo
0080786c g     F .text	00000058 uart_rx
0080f124 g     F .text	0000014c __d2b
00814e28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00817ccc g     F .text	000000a4 alt_get_fd
008179dc g     F .text	00000158 alt_busy_sleep
00810eac g     F .text	00000054 _close_r
008003ac g     F .text	00000034 VRP_interrupt
00817ee8 g     F .text	0000007c memcmp
00814ee8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081c340 g       *ABS*	00000000 __alt_stack_base
00814f38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080b0b8 g     F .text	00000154 __swsetup_r
00807590 g     F .text	0000028c tick
00812f60 g     F .text	000008e8 .hidden __divdf3
0080cf5c g     F .text	00000118 __sfp
0080f388 g     F .text	00000078 __copybits
00818c5c g     O .rwdata	00000408 __malloc_av_
0080d0a8 g     F .text	00000004 __sinit_lock_release
008138d0 g     F .text	00000718 .hidden __muldf3
0080f554 g     F .text	00000054 __sread
00817bc4 g     F .text	00000108 alt_find_file
0081a450 g     O .rwdata	00000001 ignore_v
008171bc g     F .text	000000a4 alt_dev_llist_insert
008147b8 g     F .text	00000024 __malloc_lock
0081499c g     F .text	000000b0 sbrk
0080ccb0 g     F .text	0000005c _fflush_r
00810f00 g     F .text	000000c4 _calloc_r
0081c178 g       *ABS*	00000000 __bss_start
0080e368 g     F .text	00000128 memset
00800544 g     F .text	0000024c main
0081c1f8 g     O .bss	00000018 VRP
0081c1a4 g     O .bss	00000004 alt_envp
0081c18c g     O .bss	00000004 __malloc_max_total_mem
00814e88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008120fc g     F .text	00000018 __swbuf
008165d8 g     F .text	00000134 altera_avalon_lcd_16207_init
0080f688 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008110b4 g     F .text	00000014 fclose
0080b40c g     F .text	00001688 _dtoa_r
0080d930 g     F .text	0000080c _malloc_r
00812270 g     F .text	00000030 __ascii_wctomb
0081a480 g     O .rwdata	00000004 alt_errno
0081c17d g     O .bss	00000001 vp
0080d510 g     F .text	000000c4 _fwalk
00812dac g     F .text	00000084 .hidden __divsi3
0080d0dc g     F .text	00000124 _malloc_trim_r
00818230 g       *ABS*	00000000 __CTOR_END__
0080f690 g     F .text	000000dc strcmp
00818230 g       *ABS*	00000000 __flash_rodata_start
00818230 g       *ABS*	00000000 __DTOR_LIST__
00813848 g     F .text	00000088 .hidden __nedf2
00814d58 g     F .text	00000038 alt_irq_init
00814938 g     F .text	00000064 alt_release_fd
008003e0 g     F .text	00000054 URI_LRI_interrupt
00818233 g     O .rodata	00000100 .hidden __clz_tab
0081c180 g     O .bss	00000004 _PathLocale
00817e9c g     F .text	00000014 atexit
00800434 g     F .text	00000070 AEI_AVI_interrupt
00810e4c g     F .text	00000060 _write_r
0080d750 g     F .text	00000018 setlocale
0081a458 g     O .rwdata	00000004 _impure_ptr
0081c19c g     O .bss	00000004 alt_argc
0080ca94 g     F .text	0000021c __sflush_r
008172c0 g     F .text	00000060 _do_dtors
0080d73c g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
0080efb4 g     F .text	00000064 __ulp
0080d0c4 g     F .text	00000018 __fp_unlock_all
0081c17a g     O .bss	00000001 is_recent_a
0081670c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0081a46c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080d768 g     F .text	0000000c localeconv
0081c210 g     O .bss	00000018 AEI_AVI
00817354 g     F .text	00000050 alt_ic_isr_register
0081a49c g       *ABS*	00000000 _edata
00816860 g     F .text	00000060 altera_avalon_uart_read_fd
0081c340 g       *ABS*	00000000 _end
008110c8 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00815360 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008004a4 g     F .text	0000003c extern_v_interrupt
0081742c g     F .text	0000008c alt_ic_irq_disable
0080f5b0 g     F .text	0000007c __swrite
0081a464 g     O .rwdata	00000004 __malloc_trim_threshold
0080d730 g     F .text	0000000c __locale_msgcharset
00817eb0 g     F .text	00000038 exit
0081c228 g     O .bss	00000018 PVARP
0080d5d4 g     F .text	000000c4 _fwalk_reent
0080edb8 g     F .text	000001fc __mdiff
00812e30 g     F .text	00000074 .hidden __modsi3
00800790 g     F .text	00006be0 logic
0081a498 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080d0a0 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081c179 g     O .bss	00000001 reset_cycle
0081853e g     O .rodata	00000101 _ctype_
00816ce4 g     F .text	00000054 altera_avalon_uart_close
008181fc g     F .text	00000034 _exit
00814110 g     F .text	0000012c alt_alarm_start
0080d774 g     F .text	000001bc __smakebuf_r
0080f76c g     F .text	00000098 strlen
00817834 g     F .text	00000154 open
00808170 g     F .text	000000dc .hidden __gedf2
0081a468 g     O .rwdata	00000004 __wctomb
0080f900 g     F .text	00000018 __sprint_r
00817320 g     F .text	00000034 alt_icache_flush_all
0081a494 g     O .rwdata	00000004 alt_priority_mask
008173a4 g     F .text	00000088 alt_ic_irq_enable
0080afe0 g     F .text	0000001c __vfprintf_internal
00816d74 g     F .text	000001dc altera_avalon_uart_read
008122a0 g     F .text	0000005c _wctomb_r
00808340 g     F .text	000008fc .hidden __subdf3
0080e7ec g     F .text	000000b0 __lo0bits
0081a488 g     O .rwdata	00000008 alt_alarm_list
00817260 g     F .text	00000060 _do_ctors
008121b0 g     F .text	000000c0 wcrtomb
00814278 g     F .text	000000d0 close
008145a8 g     F .text	00000084 alt_load
008004e0 g     F .text	00000064 extern_a_interrupt
00811250 g     F .text	00000080 fputwc
0080d0a4 g     F .text	00000004 __sinit_lock_acquire
0080e560 g     F .text	00000120 __multadd
0080e538 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10b09004 	addi	r2,r2,-15808
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10b09004 	addi	r2,r2,-15808
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a75917 	ldw	r2,-25244(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a75917 	ldw	r2,-25244(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d6891414 	ori	gp,gp,9296
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10b05e14 	ori	r2,r2,49528

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18f0d014 	ori	r3,r3,49984

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08145a80 	call	8145a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	081473c0 	call	81473c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <start_cycle>:
volatile alt_u8 need_v_pulse = 0;
volatile alt_u8 started = 0;

volatile alt_u8 vp = 0, ap = 0;

void start_cycle(){
  800290:	defffe04 	addi	sp,sp,-8
  800294:	dfc00115 	stw	ra,4(sp)
  800298:	df000015 	stw	fp,0(sp)
  80029c:	d839883a 	mov	fp,sp
	if (started){
  8002a0:	d0a74b03 	ldbu	r2,-25300(gp)
  8002a4:	10803fcc 	andi	r2,r2,255
  8002a8:	10000c26 	beq	r2,zero,8002dc <start_cycle+0x4c>
		alt_alarm_stop(&URI_LRI);
  8002ac:	010020b4 	movhi	r4,130
  8002b0:	21307804 	addi	r4,r4,-15904
  8002b4:	0814a4c0 	call	814a4c <alt_alarm_stop>
		alt_alarm_stop(&PVARP);
  8002b8:	010020b4 	movhi	r4,130
  8002bc:	21308a04 	addi	r4,r4,-15832
  8002c0:	0814a4c0 	call	814a4c <alt_alarm_stop>
		alt_alarm_stop(&VRP);
  8002c4:	010020b4 	movhi	r4,130
  8002c8:	21307e04 	addi	r4,r4,-15880
  8002cc:	0814a4c0 	call	814a4c <alt_alarm_stop>
		alt_alarm_stop(&AEI_AVI);
  8002d0:	010020b4 	movhi	r4,130
  8002d4:	21308404 	addi	r4,r4,-15856
  8002d8:	0814a4c0 	call	814a4c <alt_alarm_stop>
	}
	started = 1;
  8002dc:	00800044 	movi	r2,1
  8002e0:	d0a74b05 	stb	r2,-25300(gp)
	alt_alarm_start(&URI_LRI, URI_VALUE, URI_LRI_interrupt, NULL);
  8002e4:	000f883a 	mov	r7,zero
  8002e8:	01802034 	movhi	r6,128
  8002ec:	3180f804 	addi	r6,r6,992
  8002f0:	0140e104 	movi	r5,900
  8002f4:	010020b4 	movhi	r4,130
  8002f8:	21307804 	addi	r4,r4,-15904
  8002fc:	08141100 	call	814110 <alt_alarm_start>
	alt_alarm_start(&PVARP, PVARP_VALUE, PVARP_interrupt, NULL);
  800300:	000f883a 	mov	r7,zero
  800304:	01802034 	movhi	r6,128
  800308:	3180e204 	addi	r6,r6,904
  80030c:	01400c84 	movi	r5,50
  800310:	010020b4 	movhi	r4,130
  800314:	21308a04 	addi	r4,r4,-15832
  800318:	08141100 	call	814110 <alt_alarm_start>
	alt_alarm_start(&VRP, VRP_VALUE, VRP_interrupt, NULL);
  80031c:	000f883a 	mov	r7,zero
  800320:	01802034 	movhi	r6,128
  800324:	3180eb04 	addi	r6,r6,940
  800328:	01402584 	movi	r5,150
  80032c:	010020b4 	movhi	r4,130
  800330:	21307e04 	addi	r4,r4,-15880
  800334:	08141100 	call	814110 <alt_alarm_start>
	alt_alarm_start(&AEI_AVI, AEI_VALUE, AEI_AVI_interrupt, NULL);
  800338:	000f883a 	mov	r7,zero
  80033c:	01802034 	movhi	r6,128
  800340:	31810d04 	addi	r6,r6,1076
  800344:	0140c804 	movi	r5,800
  800348:	010020b4 	movhi	r4,130
  80034c:	21308404 	addi	r4,r4,-15856
  800350:	08141100 	call	814110 <alt_alarm_start>
	ignore_a = 1;
  800354:	00800044 	movi	r2,1
  800358:	d0a00045 	stb	r2,-32767(gp)
	ignore_v = 1;
  80035c:	00800044 	movi	r2,1
  800360:	d0a00005 	stb	r2,-32768(gp)
	can_vpulse = 0;
  800364:	d0274a05 	stb	zero,-25304(gp)
	need_v_pulse = 0;
  800368:	d0274ac5 	stb	zero,-25301(gp)
	is_recent_a = 0;
  80036c:	d0274a85 	stb	zero,-25302(gp)
}
  800370:	0001883a 	nop
  800374:	e037883a 	mov	sp,fp
  800378:	dfc00117 	ldw	ra,4(sp)
  80037c:	df000017 	ldw	fp,0(sp)
  800380:	dec00204 	addi	sp,sp,8
  800384:	f800283a 	ret

00800388 <PVARP_interrupt>:

alt_u32 PVARP_interrupt(){
  800388:	deffff04 	addi	sp,sp,-4
  80038c:	df000015 	stw	fp,0(sp)
  800390:	d839883a 	mov	fp,sp
	ignore_a = 0;
  800394:	d0200045 	stb	zero,-32767(gp)
	return LRI_VALUE; // value so it does not trigger when unwanted
  800398:	0080ed84 	movi	r2,950
}
  80039c:	e037883a 	mov	sp,fp
  8003a0:	df000017 	ldw	fp,0(sp)
  8003a4:	dec00104 	addi	sp,sp,4
  8003a8:	f800283a 	ret

008003ac <VRP_interrupt>:

alt_u32 VRP_interrupt(){
  8003ac:	deffff04 	addi	sp,sp,-4
  8003b0:	df000015 	stw	fp,0(sp)
  8003b4:	d839883a 	mov	fp,sp
	ignore_v = 0;
  8003b8:	d0200005 	stb	zero,-32768(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  8003bc:	0007883a 	mov	r3,zero
  8003c0:	00804074 	movhi	r2,257
  8003c4:	10841c04 	addi	r2,r2,4208
  8003c8:	10c00035 	stwio	r3,0(r2)
	return LRI_VALUE; // value so it does not trigger when unwanted
  8003cc:	0080ed84 	movi	r2,950
}
  8003d0:	e037883a 	mov	sp,fp
  8003d4:	df000017 	ldw	fp,0(sp)
  8003d8:	dec00104 	addi	sp,sp,4
  8003dc:	f800283a 	ret

008003e0 <URI_LRI_interrupt>:

alt_u32 URI_LRI_interrupt(){
  8003e0:	deffff04 	addi	sp,sp,-4
  8003e4:	df000015 	stw	fp,0(sp)
  8003e8:	d839883a 	mov	fp,sp
	if (!can_vpulse){ // URI timeout
  8003ec:	d0a74a03 	ldbu	r2,-25304(gp)
  8003f0:	10803fcc 	andi	r2,r2,255
  8003f4:	1000041e 	bne	r2,zero,800408 <URI_LRI_interrupt+0x28>
		can_vpulse = 1;
  8003f8:	00800044 	movi	r2,1
  8003fc:	d0a74a05 	stb	r2,-25304(gp)
		return LRI_VALUE - URI_VALUE;
  800400:	00800c84 	movi	r2,50
  800404:	00000706 	br	800424 <URI_LRI_interrupt+0x44>
	} else { // LRI timeout
		vp = 1;
  800408:	00800044 	movi	r2,1
  80040c:	d0a74b45 	stb	r2,-25299(gp)
		is_recent_a = 0;
  800410:	d0274a85 	stb	zero,-25302(gp)
		reset_cycle = 1;
  800414:	00800044 	movi	r2,1
  800418:	d0a74a45 	stb	r2,-25303(gp)
		can_vpulse = 0;
  80041c:	d0274a05 	stb	zero,-25304(gp)
		return URI_VALUE;
  800420:	0080e104 	movi	r2,900
	}
}
  800424:	e037883a 	mov	sp,fp
  800428:	df000017 	ldw	fp,0(sp)
  80042c:	dec00104 	addi	sp,sp,4
  800430:	f800283a 	ret

00800434 <AEI_AVI_interrupt>:

alt_u32 AEI_AVI_interrupt(){
  800434:	deffff04 	addi	sp,sp,-4
  800438:	df000015 	stw	fp,0(sp)
  80043c:	d839883a 	mov	fp,sp
	if (is_recent_a){ // most recent is a a
  800440:	d0a74a83 	ldbu	r2,-25302(gp)
  800444:	10803fcc 	andi	r2,r2,255
  800448:	10000d26 	beq	r2,zero,800480 <AEI_AVI_interrupt+0x4c>
		if (can_vpulse){
  80044c:	d0a74a03 	ldbu	r2,-25304(gp)
  800450:	10803fcc 	andi	r2,r2,255
  800454:	10000626 	beq	r2,zero,800470 <AEI_AVI_interrupt+0x3c>
			vp = 1;
  800458:	00800044 	movi	r2,1
  80045c:	d0a74b45 	stb	r2,-25299(gp)
			is_recent_a = 0;
  800460:	d0274a85 	stb	zero,-25302(gp)
			reset_cycle = 1;
  800464:	00800044 	movi	r2,1
  800468:	d0a74a45 	stb	r2,-25303(gp)
  80046c:	00000206 	br	800478 <AEI_AVI_interrupt+0x44>
		} else {
			need_v_pulse = 1;
  800470:	00800044 	movi	r2,1
  800474:	d0a74ac5 	stb	r2,-25301(gp)
		}
		return LRI_VALUE; // large value
  800478:	0080ed84 	movi	r2,950
  80047c:	00000506 	br	800494 <AEI_AVI_interrupt+0x60>
	} else { // most recent is a v
		ap = 1;
  800480:	00800044 	movi	r2,1
  800484:	d0a74b85 	stb	r2,-25298(gp)
		is_recent_a = 1;
  800488:	00800044 	movi	r2,1
  80048c:	d0a74a85 	stb	r2,-25302(gp)
		return AVI_VALUE;
  800490:	00804b04 	movi	r2,300
	}
}
  800494:	e037883a 	mov	sp,fp
  800498:	df000017 	ldw	fp,0(sp)
  80049c:	dec00104 	addi	sp,sp,4
  8004a0:	f800283a 	ret

008004a4 <extern_v_interrupt>:

void extern_v_interrupt(){
  8004a4:	deffff04 	addi	sp,sp,-4
  8004a8:	df000015 	stw	fp,0(sp)
  8004ac:	d839883a 	mov	fp,sp
	if (!ignore_v){
  8004b0:	d0a00003 	ldbu	r2,-32768(gp)
  8004b4:	10803fcc 	andi	r2,r2,255
  8004b8:	1000041e 	bne	r2,zero,8004cc <extern_v_interrupt+0x28>
		can_vpulse = 0;
  8004bc:	d0274a05 	stb	zero,-25304(gp)
		reset_cycle = 1;
  8004c0:	00800044 	movi	r2,1
  8004c4:	d0a74a45 	stb	r2,-25303(gp)
		is_recent_a = 0;
  8004c8:	d0274a85 	stb	zero,-25302(gp)
	}

}
  8004cc:	0001883a 	nop
  8004d0:	e037883a 	mov	sp,fp
  8004d4:	df000017 	ldw	fp,0(sp)
  8004d8:	dec00104 	addi	sp,sp,4
  8004dc:	f800283a 	ret

008004e0 <extern_a_interrupt>:

void extern_a_interrupt(){
  8004e0:	defffe04 	addi	sp,sp,-8
  8004e4:	dfc00115 	stw	ra,4(sp)
  8004e8:	df000015 	stw	fp,0(sp)
  8004ec:	d839883a 	mov	fp,sp
	if (!ignore_a){
  8004f0:	d0a00043 	ldbu	r2,-32767(gp)
  8004f4:	10803fcc 	andi	r2,r2,255
  8004f8:	10000c1e 	bne	r2,zero,80052c <extern_a_interrupt+0x4c>
		alt_alarm_stop(&AEI_AVI);
  8004fc:	010020b4 	movhi	r4,130
  800500:	21308404 	addi	r4,r4,-15856
  800504:	0814a4c0 	call	814a4c <alt_alarm_stop>
		alt_alarm_start(&AEI_AVI, AVI_VALUE, AEI_AVI_interrupt, NULL);
  800508:	000f883a 	mov	r7,zero
  80050c:	01802034 	movhi	r6,128
  800510:	31810d04 	addi	r6,r6,1076
  800514:	01404b04 	movi	r5,300
  800518:	010020b4 	movhi	r4,130
  80051c:	21308404 	addi	r4,r4,-15856
  800520:	08141100 	call	814110 <alt_alarm_start>
		is_recent_a = 1;
  800524:	00800044 	movi	r2,1
  800528:	d0a74a85 	stb	r2,-25302(gp)
	}
}
  80052c:	0001883a 	nop
  800530:	e037883a 	mov	sp,fp
  800534:	dfc00117 	ldw	ra,4(sp)
  800538:	df000017 	ldw	fp,0(sp)
  80053c:	dec00204 	addi	sp,sp,8
  800540:	f800283a 	ret

00800544 <main>:

extern volatile alt_u8 vp, ap;

volatile char char_recieve;

int main() {
  800544:	deff9004 	addi	sp,sp,-448
  800548:	dfc06f15 	stw	ra,444(sp)
  80054c:	df006e15 	stw	fp,440(sp)
  800550:	df006e04 	addi	fp,sp,440
	// initialise the uart
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, 0);
  800554:	0007883a 	mov	r3,zero
  800558:	00804074 	movhi	r2,257
  80055c:	10841304 	addi	r2,r2,4172
  800560:	10c00035 	stwio	r3,0(r2)

    // initialisaiton for sccharts mode
    TickData t;
    reset( & t);
  800564:	e0bf9304 	addi	r2,fp,-436
  800568:	1009883a 	mov	r4,r2
  80056c:	08073700 	call	807370 <reset>

    // keys and previous values
    alt_u8 key, key0_pre, key1_pre;

    // initialisation for C mode
    start_cycle();
  800570:	08002900 	call	800290 <start_cycle>

    while (1) {

    	// sw 0: uart mode if off, buttons mode if on
        if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 1) {
  800574:	00804074 	movhi	r2,257
  800578:	10842404 	addi	r2,r2,4240
  80057c:	10800037 	ldwio	r2,0(r2)
  800580:	1080004c 	andi	r2,r2,1
  800584:	10004726 	beq	r2,zero,8006a4 <main+0x160>

            key = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  800588:	00804074 	movhi	r2,257
  80058c:	10842804 	addi	r2,r2,4256
  800590:	10800037 	ldwio	r2,0(r2)
  800594:	e0bf9285 	stb	r2,-438(fp)
            t.VS = 0;
  800598:	e03faa45 	stb	zero,-343(fp)
            t.AS = 0;
  80059c:	e03faa05 	stb	zero,-344(fp)

            if ((~key & 0x01) == 1 && key0_pre == 0) { // key 0 rising : a V pulse is detected
  8005a0:	e0bf9283 	ldbu	r2,-438(fp)
  8005a4:	1080004c 	andi	r2,r2,1
  8005a8:	10000b1e 	bne	r2,zero,8005d8 <main+0x94>
  8005ac:	e0bf9203 	ldbu	r2,-440(fp)
  8005b0:	1000091e 	bne	r2,zero,8005d8 <main+0x94>
                if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2) {
  8005b4:	00804074 	movhi	r2,257
  8005b8:	10842404 	addi	r2,r2,4240
  8005bc:	10800037 	ldwio	r2,0(r2)
  8005c0:	1080008c 	andi	r2,r2,2
  8005c4:	10000326 	beq	r2,zero,8005d4 <main+0x90>
                    t.VS = 1;
  8005c8:	00800044 	movi	r2,1
  8005cc:	e0bfaa45 	stb	r2,-343(fp)
  8005d0:	00000106 	br	8005d8 <main+0x94>
                } else {
                    extern_v_interrupt();
  8005d4:	08004a40 	call	8004a4 <extern_v_interrupt>
                }
            }
            key0_pre = ~key & 0x01;
  8005d8:	e0bf9283 	ldbu	r2,-438(fp)
  8005dc:	1080004c 	andi	r2,r2,1
  8005e0:	1005003a 	cmpeq	r2,r2,zero
  8005e4:	e0bf9205 	stb	r2,-440(fp)

            if ((~key & 0x02) >> 1 == 1 && key1_pre == 0) { // key 1 rising : a A pulse is detected
  8005e8:	e0bf9283 	ldbu	r2,-438(fp)
  8005ec:	0084303a 	nor	r2,zero,r2
  8005f0:	1080008c 	andi	r2,r2,2
  8005f4:	1005d07a 	srai	r2,r2,1
  8005f8:	10800058 	cmpnei	r2,r2,1
  8005fc:	10000e1e 	bne	r2,zero,800638 <main+0xf4>
  800600:	e0bf9243 	ldbu	r2,-439(fp)
  800604:	10000c1e 	bne	r2,zero,800638 <main+0xf4>

            	printf("AS");
  800608:	010020b4 	movhi	r4,130
  80060c:	21208c04 	addi	r4,r4,-32208
  800610:	0808dac0 	call	808dac <printf>
                if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2) {
  800614:	00804074 	movhi	r2,257
  800618:	10842404 	addi	r2,r2,4240
  80061c:	10800037 	ldwio	r2,0(r2)
  800620:	1080008c 	andi	r2,r2,2
  800624:	10000326 	beq	r2,zero,800634 <main+0xf0>
                    t.AS = 1;
  800628:	00800044 	movi	r2,1
  80062c:	e0bfaa05 	stb	r2,-344(fp)
  800630:	00000106 	br	800638 <main+0xf4>
                } else {
                    extern_a_interrupt();
  800634:	08004e00 	call	8004e0 <extern_a_interrupt>
                }
            }
            key1_pre = ~key & 0x02;
  800638:	e0bf9283 	ldbu	r2,-438(fp)
  80063c:	0084303a 	nor	r2,zero,r2
  800640:	1080008c 	andi	r2,r2,2
  800644:	e0bf9245 	stb	r2,-439(fp)

            // make the pulses short, and control leds
            if (vp) {
  800648:	d0a74b43 	ldbu	r2,-25299(gp)
  80064c:	10803fcc 	andi	r2,r2,255
  800650:	10000826 	beq	r2,zero,800674 <main+0x130>
                vp = 0;
  800654:	d0274b45 	stb	zero,-25299(gp)
                IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 0x0F); // upper 4 if VP
  800658:	00804074 	movhi	r2,257
  80065c:	10841c04 	addi	r2,r2,4208
  800660:	10800037 	ldwio	r2,0(r2)
  800664:	10c003d4 	ori	r3,r2,15
  800668:	00804074 	movhi	r2,257
  80066c:	10841c04 	addi	r2,r2,4208
  800670:	10c00035 	stwio	r3,0(r2)
            }
            if (ap) {
  800674:	d0a74b83 	ldbu	r2,-25298(gp)
  800678:	10803fcc 	andi	r2,r2,255
  80067c:	10002626 	beq	r2,zero,800718 <main+0x1d4>
                ap = 0;
  800680:	d0274b85 	stb	zero,-25298(gp)
                IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 0xF0); // lower 4 if AP
  800684:	00804074 	movhi	r2,257
  800688:	10841c04 	addi	r2,r2,4208
  80068c:	10800037 	ldwio	r2,0(r2)
  800690:	10c03c14 	ori	r3,r2,240
  800694:	00804074 	movhi	r2,257
  800698:	10841c04 	addi	r2,r2,4208
  80069c:	10c00035 	stwio	r3,0(r2)
  8006a0:	00001d06 	br	800718 <main+0x1d4>
            }


        } else {
        	// uart control, tx and rx
            uart_rx( & char_recieve);
  8006a4:	d1274bc4 	addi	r4,gp,-25297
  8006a8:	080786c0 	call	80786c <uart_rx>
            if (char_recieve == 'A') {
  8006ac:	d0a74bc3 	ldbu	r2,-25297(gp)
  8006b0:	10803fcc 	andi	r2,r2,255
  8006b4:	1080201c 	xori	r2,r2,128
  8006b8:	10bfe004 	addi	r2,r2,-128
  8006bc:	10801058 	cmpnei	r2,r2,65
  8006c0:	1000011e 	bne	r2,zero,8006c8 <main+0x184>
                extern_a_interrupt();
  8006c4:	08004e00 	call	8004e0 <extern_a_interrupt>
            }
            if (char_recieve == 'V') {
  8006c8:	d0a74bc3 	ldbu	r2,-25297(gp)
  8006cc:	10803fcc 	andi	r2,r2,255
  8006d0:	1080201c 	xori	r2,r2,128
  8006d4:	10bfe004 	addi	r2,r2,-128
  8006d8:	10801598 	cmpnei	r2,r2,86
  8006dc:	1000011e 	bne	r2,zero,8006e4 <main+0x1a0>
                extern_v_interrupt();
  8006e0:	08004a40 	call	8004a4 <extern_v_interrupt>
            }

            if (vp) {
  8006e4:	d0a74b43 	ldbu	r2,-25299(gp)
  8006e8:	10803fcc 	andi	r2,r2,255
  8006ec:	10000326 	beq	r2,zero,8006fc <main+0x1b8>
                vp = 0;
  8006f0:	d0274b45 	stb	zero,-25299(gp)
                uart_tx('V');
  8006f4:	01001584 	movi	r4,86
  8006f8:	080781c0 	call	80781c <uart_tx>
            }
            if (ap) {
  8006fc:	d0a74b83 	ldbu	r2,-25298(gp)
  800700:	10803fcc 	andi	r2,r2,255
  800704:	10000326 	beq	r2,zero,800714 <main+0x1d0>
                ap = 0;
  800708:	d0274b85 	stb	zero,-25298(gp)
                uart_tx('A');
  80070c:	01001044 	movi	r4,65
  800710:	080781c0 	call	80781c <uart_tx>
            }
            char_recieve = '\0';
  800714:	d0274bc5 	stb	zero,-25297(gp)

        }

        if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2) { // if its on then sccharts
  800718:	00804074 	movhi	r2,257
  80071c:	10842404 	addi	r2,r2,4240
  800720:	10800037 	ldwio	r2,0(r2)
  800724:	1080008c 	andi	r2,r2,2
  800728:	10000826 	beq	r2,zero,80074c <main+0x208>
            tick( & t);
  80072c:	e0bf9304 	addi	r2,fp,-436
  800730:	1009883a 	mov	r4,r2
  800734:	08075900 	call	807590 <tick>
            ap = t.AP;
  800738:	e0bfaa83 	ldbu	r2,-342(fp)
  80073c:	d0a74b85 	stb	r2,-25298(gp)
            vp = t.VP;
  800740:	e0bfaac3 	ldbu	r2,-341(fp)
  800744:	d0a74b45 	stb	r2,-25299(gp)
  800748:	003f8a06 	br	800574 <__alt_mem_onchip_mem+0xff7f8574>
        } else { // c mode
            if (reset_cycle) { // a v event has occurred and timers must be reset
  80074c:	d0a74a43 	ldbu	r2,-25303(gp)
  800750:	10803fcc 	andi	r2,r2,255
  800754:	10000226 	beq	r2,zero,800760 <main+0x21c>
                reset_cycle = 0; // reset everything
  800758:	d0274a45 	stb	zero,-25303(gp)
                start_cycle();
  80075c:	08002900 	call	800290 <start_cycle>
            }
            if (can_vpulse && need_v_pulse) {
  800760:	d0a74a03 	ldbu	r2,-25304(gp)
  800764:	10803fcc 	andi	r2,r2,255
  800768:	103f8226 	beq	r2,zero,800574 <__alt_mem_onchip_mem+0xff7f8574>
  80076c:	d0a74ac3 	ldbu	r2,-25301(gp)
  800770:	10803fcc 	andi	r2,r2,255
  800774:	103f7f26 	beq	r2,zero,800574 <__alt_mem_onchip_mem+0xff7f8574>
                need_v_pulse = 0;
  800778:	d0274ac5 	stb	zero,-25301(gp)
                vp = 1;
  80077c:	00800044 	movi	r2,1
  800780:	d0a74b45 	stb	r2,-25299(gp)
                reset_cycle = 1;
  800784:	00800044 	movi	r2,1
  800788:	d0a74a45 	stb	r2,-25303(gp)
            }
        }

    }
  80078c:	003f7906 	br	800574 <__alt_mem_onchip_mem+0xff7f8574>

00800790 <logic>:
#include "timing.h"
#include <stdio.h>

#include "scchart_heart.h"

void logic(TickData* d) {
  800790:	defffa04 	addi	sp,sp,-24
  800794:	dfc00515 	stw	ra,20(sp)
  800798:	df000415 	stw	fp,16(sp)
  80079c:	dc800315 	stw	r18,12(sp)
  8007a0:	dc400215 	stw	r17,8(sp)
  8007a4:	dc000115 	stw	r16,4(sp)
  8007a8:	df000404 	addi	fp,sp,16
  8007ac:	e13ffc15 	stw	r4,-16(fp)
  d->_g30 = d->_pg9;
  8007b0:	e0bffc17 	ldw	r2,-16(fp)
  8007b4:	10c063c3 	ldbu	r3,399(r2)
  8007b8:	e0bffc17 	ldw	r2,-16(fp)
  8007bc:	10c023c5 	stb	r3,143(r2)
  if (d->_g30) {
  8007c0:	e0bffc17 	ldw	r2,-16(fp)
  8007c4:	108023c3 	ldbu	r2,143(r2)
  8007c8:	10803fcc 	andi	r2,r2,255
  8007cc:	1080201c 	xori	r2,r2,128
  8007d0:	10bfe004 	addi	r2,r2,-128
  8007d4:	10001226 	beq	r2,zero,800820 <logic+0x90>
    d->_region0_null_URI += d->deltaT;
  8007d8:	e13ffc17 	ldw	r4,-16(fp)
  8007dc:	20800717 	ldw	r2,28(r4)
  8007e0:	20c00817 	ldw	r3,32(r4)
  8007e4:	e1bffc17 	ldw	r6,-16(fp)
  8007e8:	31001317 	ldw	r4,76(r6)
  8007ec:	31401417 	ldw	r5,80(r6)
  8007f0:	200d883a 	mov	r6,r4
  8007f4:	280f883a 	mov	r7,r5
  8007f8:	1009883a 	mov	r4,r2
  8007fc:	180b883a 	mov	r5,r3
  800800:	08078c40 	call	8078c4 <__adddf3>
  800804:	1009883a 	mov	r4,r2
  800808:	180b883a 	mov	r5,r3
  80080c:	2005883a 	mov	r2,r4
  800810:	2807883a 	mov	r3,r5
  800814:	e13ffc17 	ldw	r4,-16(fp)
  800818:	20800715 	stw	r2,28(r4)
  80081c:	20c00815 	stw	r3,32(r4)
  }
  d->_g31_e1 = !d->_g30;
  800820:	e0bffc17 	ldw	r2,-16(fp)
  800824:	108023c3 	ldbu	r2,143(r2)
  800828:	10803fcc 	andi	r2,r2,255
  80082c:	1080201c 	xori	r2,r2,128
  800830:	10bfe004 	addi	r2,r2,-128
  800834:	1005003a 	cmpeq	r2,r2,zero
  800838:	1007883a 	mov	r3,r2
  80083c:	e0bffc17 	ldw	r2,-16(fp)
  800840:	10c05cc5 	stb	r3,371(r2)
  d->AP = 0;
  800844:	e0bffc17 	ldw	r2,-16(fp)
  800848:	10001785 	stb	zero,94(r2)
  d->VP = 0;
  80084c:	e0bffc17 	ldw	r2,-16(fp)
  800850:	100017c5 	stb	zero,95(r2)
  d->VR = 0;
  800854:	e0bffc17 	ldw	r2,-16(fp)
  800858:	10001805 	stb	zero,96(r2)
  d->AR = 0;
  80085c:	e0bffc17 	ldw	r2,-16(fp)
  800860:	10001845 	stb	zero,97(r2)
  d->a = 0;
  800864:	e0bffc17 	ldw	r2,-16(fp)
  800868:	10001885 	stb	zero,98(r2)
  d->v = 0;
  80086c:	e0bffc17 	ldw	r2,-16(fp)
  800870:	100018c5 	stb	zero,99(r2)
  d->VS_i = 0;
  800874:	e0bffc17 	ldw	r2,-16(fp)
  800878:	10001905 	stb	zero,100(r2)
  d->_pre_VS_i = d->_reg_VS_i;
  80087c:	e0bffc17 	ldw	r2,-16(fp)
  800880:	10c019c3 	ldbu	r3,103(r2)
  800884:	e0bffc17 	ldw	r2,-16(fp)
  800888:	10c01a05 	stb	r3,104(r2)
  d->_g235 = d->_pg217;
  80088c:	e0bffc17 	ldw	r2,-16(fp)
  800890:	10c06403 	ldbu	r3,400(r2)
  800894:	e0bffc17 	ldw	r2,-16(fp)
  800898:	10c04485 	stb	r3,274(r2)
  d->_cg235 = d->_pre_VS_i;
  80089c:	e0bffc17 	ldw	r2,-16(fp)
  8008a0:	10c01a03 	ldbu	r3,104(r2)
  8008a4:	e0bffc17 	ldw	r2,-16(fp)
  8008a8:	10c05bc5 	stb	r3,367(r2)
  d->_g236 = d->_g235 && d->_cg235;
  8008ac:	e0bffc17 	ldw	r2,-16(fp)
  8008b0:	10804483 	ldbu	r2,274(r2)
  8008b4:	10803fcc 	andi	r2,r2,255
  8008b8:	1080201c 	xori	r2,r2,128
  8008bc:	10bfe004 	addi	r2,r2,-128
  8008c0:	10000826 	beq	r2,zero,8008e4 <logic+0x154>
  8008c4:	e0bffc17 	ldw	r2,-16(fp)
  8008c8:	10805bc3 	ldbu	r2,367(r2)
  8008cc:	10803fcc 	andi	r2,r2,255
  8008d0:	1080201c 	xori	r2,r2,128
  8008d4:	10bfe004 	addi	r2,r2,-128
  8008d8:	10000226 	beq	r2,zero,8008e4 <logic+0x154>
  8008dc:	00800044 	movi	r2,1
  8008e0:	00000106 	br	8008e8 <logic+0x158>
  8008e4:	0005883a 	mov	r2,zero
  8008e8:	1007883a 	mov	r3,r2
  8008ec:	e0bffc17 	ldw	r2,-16(fp)
  8008f0:	10c044c5 	stb	r3,275(r2)
  if (d->_g236) {
  8008f4:	e0bffc17 	ldw	r2,-16(fp)
  8008f8:	108044c3 	ldbu	r2,275(r2)
  8008fc:	10803fcc 	andi	r2,r2,255
  800900:	1080201c 	xori	r2,r2,128
  800904:	10bfe004 	addi	r2,r2,-128
  800908:	10000626 	beq	r2,zero,800924 <logic+0x194>
    d->v |= 1;
  80090c:	e0bffc17 	ldw	r2,-16(fp)
  800910:	108018c3 	ldbu	r2,99(r2)
  800914:	10800054 	ori	r2,r2,1
  800918:	1007883a 	mov	r3,r2
  80091c:	e0bffc17 	ldw	r2,-16(fp)
  800920:	10c018c5 	stb	r3,99(r2)
  }
  d->_pre_VP = d->_reg_VP;
  800924:	e0bffc17 	ldw	r2,-16(fp)
  800928:	10c01943 	ldbu	r3,101(r2)
  80092c:	e0bffc17 	ldw	r2,-16(fp)
  800930:	10c01985 	stb	r3,102(r2)
  d->_g235 = d->_g235 && !d->_cg235;
  800934:	e0bffc17 	ldw	r2,-16(fp)
  800938:	10804483 	ldbu	r2,274(r2)
  80093c:	10803fcc 	andi	r2,r2,255
  800940:	1080201c 	xori	r2,r2,128
  800944:	10bfe004 	addi	r2,r2,-128
  800948:	10000826 	beq	r2,zero,80096c <logic+0x1dc>
  80094c:	e0bffc17 	ldw	r2,-16(fp)
  800950:	10805bc3 	ldbu	r2,367(r2)
  800954:	10803fcc 	andi	r2,r2,255
  800958:	1080201c 	xori	r2,r2,128
  80095c:	10bfe004 	addi	r2,r2,-128
  800960:	1000021e 	bne	r2,zero,80096c <logic+0x1dc>
  800964:	00800044 	movi	r2,1
  800968:	00000106 	br	800970 <logic+0x1e0>
  80096c:	0005883a 	mov	r2,zero
  800970:	1007883a 	mov	r3,r2
  800974:	e0bffc17 	ldw	r2,-16(fp)
  800978:	10c04485 	stb	r3,274(r2)
  d->_cg237 = d->_pre_VP;
  80097c:	e0bffc17 	ldw	r2,-16(fp)
  800980:	10c01983 	ldbu	r3,102(r2)
  800984:	e0bffc17 	ldw	r2,-16(fp)
  800988:	10c05b85 	stb	r3,366(r2)
  d->_g238 = d->_g235 && d->_cg237;
  80098c:	e0bffc17 	ldw	r2,-16(fp)
  800990:	10804483 	ldbu	r2,274(r2)
  800994:	10803fcc 	andi	r2,r2,255
  800998:	1080201c 	xori	r2,r2,128
  80099c:	10bfe004 	addi	r2,r2,-128
  8009a0:	10000826 	beq	r2,zero,8009c4 <logic+0x234>
  8009a4:	e0bffc17 	ldw	r2,-16(fp)
  8009a8:	10805b83 	ldbu	r2,366(r2)
  8009ac:	10803fcc 	andi	r2,r2,255
  8009b0:	1080201c 	xori	r2,r2,128
  8009b4:	10bfe004 	addi	r2,r2,-128
  8009b8:	10000226 	beq	r2,zero,8009c4 <logic+0x234>
  8009bc:	00800044 	movi	r2,1
  8009c0:	00000106 	br	8009c8 <logic+0x238>
  8009c4:	0005883a 	mov	r2,zero
  8009c8:	1007883a 	mov	r3,r2
  8009cc:	e0bffc17 	ldw	r2,-16(fp)
  8009d0:	10c04505 	stb	r3,276(r2)
  if (d->_g238) {
  8009d4:	e0bffc17 	ldw	r2,-16(fp)
  8009d8:	10804503 	ldbu	r2,276(r2)
  8009dc:	10803fcc 	andi	r2,r2,255
  8009e0:	1080201c 	xori	r2,r2,128
  8009e4:	10bfe004 	addi	r2,r2,-128
  8009e8:	10000626 	beq	r2,zero,800a04 <logic+0x274>
    d->v |= 1;
  8009ec:	e0bffc17 	ldw	r2,-16(fp)
  8009f0:	108018c3 	ldbu	r2,99(r2)
  8009f4:	10800054 	ori	r2,r2,1
  8009f8:	1007883a 	mov	r3,r2
  8009fc:	e0bffc17 	ldw	r2,-16(fp)
  800a00:	10c018c5 	stb	r3,99(r2)
  }
  d->_g34 = d->_pg13;
  800a04:	e0bffc17 	ldw	r2,-16(fp)
  800a08:	10c06443 	ldbu	r3,401(r2)
  800a0c:	e0bffc17 	ldw	r2,-16(fp)
  800a10:	10c02445 	stb	r3,145(r2)
  d->_cg34 = d->v;
  800a14:	e0bffc17 	ldw	r2,-16(fp)
  800a18:	10c018c3 	ldbu	r3,99(r2)
  800a1c:	e0bffc17 	ldw	r2,-16(fp)
  800a20:	10c048c5 	stb	r3,291(r2)
  d->_g35 = d->_g34 && d->_cg34;
  800a24:	e0bffc17 	ldw	r2,-16(fp)
  800a28:	10802443 	ldbu	r2,145(r2)
  800a2c:	10803fcc 	andi	r2,r2,255
  800a30:	1080201c 	xori	r2,r2,128
  800a34:	10bfe004 	addi	r2,r2,-128
  800a38:	10000826 	beq	r2,zero,800a5c <logic+0x2cc>
  800a3c:	e0bffc17 	ldw	r2,-16(fp)
  800a40:	108048c3 	ldbu	r2,291(r2)
  800a44:	10803fcc 	andi	r2,r2,255
  800a48:	1080201c 	xori	r2,r2,128
  800a4c:	10bfe004 	addi	r2,r2,-128
  800a50:	10000226 	beq	r2,zero,800a5c <logic+0x2cc>
  800a54:	00800044 	movi	r2,1
  800a58:	00000106 	br	800a60 <logic+0x2d0>
  800a5c:	0005883a 	mov	r2,zero
  800a60:	1007883a 	mov	r3,r2
  800a64:	e0bffc17 	ldw	r2,-16(fp)
  800a68:	10c02485 	stb	r3,146(r2)
  if (d->_g35) {
  800a6c:	e0bffc17 	ldw	r2,-16(fp)
  800a70:	10802483 	ldbu	r2,146(r2)
  800a74:	10803fcc 	andi	r2,r2,255
  800a78:	1080201c 	xori	r2,r2,128
  800a7c:	10bfe004 	addi	r2,r2,-128
  800a80:	10000326 	beq	r2,zero,800a90 <logic+0x300>
    d->_heart2_local__Atrig2 = 1;
  800a84:	e0bffc17 	ldw	r2,-16(fp)
  800a88:	00c00044 	movi	r3,1
  800a8c:	10c01ac5 	stb	r3,107(r2)
  }
  d->_cg30 = d->_heart2_local__Atrig2;
  800a90:	e0bffc17 	ldw	r2,-16(fp)
  800a94:	10c01ac3 	ldbu	r3,107(r2)
  800a98:	e0bffc17 	ldw	r2,-16(fp)
  800a9c:	10c04885 	stb	r3,290(r2)
  d->_g31 = d->_g30 && d->_cg30;
  800aa0:	e0bffc17 	ldw	r2,-16(fp)
  800aa4:	108023c3 	ldbu	r2,143(r2)
  800aa8:	10803fcc 	andi	r2,r2,255
  800aac:	1080201c 	xori	r2,r2,128
  800ab0:	10bfe004 	addi	r2,r2,-128
  800ab4:	10000826 	beq	r2,zero,800ad8 <logic+0x348>
  800ab8:	e0bffc17 	ldw	r2,-16(fp)
  800abc:	10804883 	ldbu	r2,290(r2)
  800ac0:	10803fcc 	andi	r2,r2,255
  800ac4:	1080201c 	xori	r2,r2,128
  800ac8:	10bfe004 	addi	r2,r2,-128
  800acc:	10000226 	beq	r2,zero,800ad8 <logic+0x348>
  800ad0:	00800044 	movi	r2,1
  800ad4:	00000106 	br	800adc <logic+0x34c>
  800ad8:	0005883a 	mov	r2,zero
  800adc:	1007883a 	mov	r3,r2
  800ae0:	e0bffc17 	ldw	r2,-16(fp)
  800ae4:	10c02405 	stb	r3,144(r2)
  d->_g35_e2 = !d->_g34;
  800ae8:	e0bffc17 	ldw	r2,-16(fp)
  800aec:	10802443 	ldbu	r2,145(r2)
  800af0:	10803fcc 	andi	r2,r2,255
  800af4:	1080201c 	xori	r2,r2,128
  800af8:	10bfe004 	addi	r2,r2,-128
  800afc:	1005003a 	cmpeq	r2,r2,zero
  800b00:	1007883a 	mov	r3,r2
  800b04:	e0bffc17 	ldw	r2,-16(fp)
  800b08:	10c05d05 	stb	r3,372(r2)
  d->_g35_e2 = (d->_g31_e1 || d->_g31) && (d->_g35_e2 || d->_g35) && (d->_g31 || d->_g35);
  800b0c:	e0bffc17 	ldw	r2,-16(fp)
  800b10:	10805cc3 	ldbu	r2,371(r2)
  800b14:	10803fcc 	andi	r2,r2,255
  800b18:	1080201c 	xori	r2,r2,128
  800b1c:	10bfe004 	addi	r2,r2,-128
  800b20:	1000061e 	bne	r2,zero,800b3c <logic+0x3ac>
  800b24:	e0bffc17 	ldw	r2,-16(fp)
  800b28:	10802403 	ldbu	r2,144(r2)
  800b2c:	10803fcc 	andi	r2,r2,255
  800b30:	1080201c 	xori	r2,r2,128
  800b34:	10bfe004 	addi	r2,r2,-128
  800b38:	10001a26 	beq	r2,zero,800ba4 <logic+0x414>
  800b3c:	e0bffc17 	ldw	r2,-16(fp)
  800b40:	10805d03 	ldbu	r2,372(r2)
  800b44:	10803fcc 	andi	r2,r2,255
  800b48:	1080201c 	xori	r2,r2,128
  800b4c:	10bfe004 	addi	r2,r2,-128
  800b50:	1000061e 	bne	r2,zero,800b6c <logic+0x3dc>
  800b54:	e0bffc17 	ldw	r2,-16(fp)
  800b58:	10802483 	ldbu	r2,146(r2)
  800b5c:	10803fcc 	andi	r2,r2,255
  800b60:	1080201c 	xori	r2,r2,128
  800b64:	10bfe004 	addi	r2,r2,-128
  800b68:	10000e26 	beq	r2,zero,800ba4 <logic+0x414>
  800b6c:	e0bffc17 	ldw	r2,-16(fp)
  800b70:	10802403 	ldbu	r2,144(r2)
  800b74:	10803fcc 	andi	r2,r2,255
  800b78:	1080201c 	xori	r2,r2,128
  800b7c:	10bfe004 	addi	r2,r2,-128
  800b80:	1000061e 	bne	r2,zero,800b9c <logic+0x40c>
  800b84:	e0bffc17 	ldw	r2,-16(fp)
  800b88:	10802483 	ldbu	r2,146(r2)
  800b8c:	10803fcc 	andi	r2,r2,255
  800b90:	1080201c 	xori	r2,r2,128
  800b94:	10bfe004 	addi	r2,r2,-128
  800b98:	10000226 	beq	r2,zero,800ba4 <logic+0x414>
  800b9c:	00800044 	movi	r2,1
  800ba0:	00000106 	br	800ba8 <logic+0x418>
  800ba4:	0005883a 	mov	r2,zero
  800ba8:	1007883a 	mov	r3,r2
  800bac:	e0bffc17 	ldw	r2,-16(fp)
  800bb0:	10c05d05 	stb	r3,372(r2)
  if (d->_g35_e2) {
  800bb4:	e0bffc17 	ldw	r2,-16(fp)
  800bb8:	10805d03 	ldbu	r2,372(r2)
  800bbc:	10803fcc 	andi	r2,r2,255
  800bc0:	1080201c 	xori	r2,r2,128
  800bc4:	10bfe004 	addi	r2,r2,-128
  800bc8:	10000526 	beq	r2,zero,800be0 <logic+0x450>
    d->_region0_null_URI = 0;
  800bcc:	e0bffc17 	ldw	r2,-16(fp)
  800bd0:	10000715 	stw	zero,28(r2)
  800bd4:	10000815 	stw	zero,32(r2)
    d->ready = 0;
  800bd8:	e0bffc17 	ldw	r2,-16(fp)
  800bdc:	10000605 	stb	zero,24(r2)
  }
  d->_g31 = d->_pg7_e1;
  800be0:	e0bffc17 	ldw	r2,-16(fp)
  800be4:	10c06483 	ldbu	r3,402(r2)
  800be8:	e0bffc17 	ldw	r2,-16(fp)
  800bec:	10c02405 	stb	r3,144(r2)
  if (d->_g31) {
  800bf0:	e0bffc17 	ldw	r2,-16(fp)
  800bf4:	10802403 	ldbu	r2,144(r2)
  800bf8:	10803fcc 	andi	r2,r2,255
  800bfc:	1080201c 	xori	r2,r2,128
  800c00:	10bfe004 	addi	r2,r2,-128
  800c04:	10001226 	beq	r2,zero,800c50 <logic+0x4c0>
    d->_region0_null_URI += d->deltaT;
  800c08:	e13ffc17 	ldw	r4,-16(fp)
  800c0c:	20800717 	ldw	r2,28(r4)
  800c10:	20c00817 	ldw	r3,32(r4)
  800c14:	e1bffc17 	ldw	r6,-16(fp)
  800c18:	31001317 	ldw	r4,76(r6)
  800c1c:	31401417 	ldw	r5,80(r6)
  800c20:	200d883a 	mov	r6,r4
  800c24:	280f883a 	mov	r7,r5
  800c28:	1009883a 	mov	r4,r2
  800c2c:	180b883a 	mov	r5,r3
  800c30:	08078c40 	call	8078c4 <__adddf3>
  800c34:	1009883a 	mov	r4,r2
  800c38:	180b883a 	mov	r5,r3
  800c3c:	2005883a 	mov	r2,r4
  800c40:	2807883a 	mov	r3,r5
  800c44:	e13ffc17 	ldw	r4,-16(fp)
  800c48:	20800715 	stw	r2,28(r4)
  800c4c:	20c00815 	stw	r3,32(r4)
  }
  d->_g31_e1 = !d->_g31;
  800c50:	e0bffc17 	ldw	r2,-16(fp)
  800c54:	10802403 	ldbu	r2,144(r2)
  800c58:	10803fcc 	andi	r2,r2,255
  800c5c:	1080201c 	xori	r2,r2,128
  800c60:	10bfe004 	addi	r2,r2,-128
  800c64:	1005003a 	cmpeq	r2,r2,zero
  800c68:	1007883a 	mov	r3,r2
  800c6c:	e0bffc17 	ldw	r2,-16(fp)
  800c70:	10c05cc5 	stb	r3,371(r2)
  d->_g35 = d->_pg36;
  800c74:	e0bffc17 	ldw	r2,-16(fp)
  800c78:	10c064c3 	ldbu	r3,403(r2)
  800c7c:	e0bffc17 	ldw	r2,-16(fp)
  800c80:	10c02485 	stb	r3,146(r2)
  d->_cg21 = d->_region0_null_URI >= d->URI_time;
  800c84:	e0bffc17 	ldw	r2,-16(fp)
  800c88:	14000717 	ldw	r16,28(r2)
  800c8c:	14400817 	ldw	r17,32(r2)
  800c90:	e0bffc17 	ldw	r2,-16(fp)
  800c94:	10800217 	ldw	r2,8(r2)
  800c98:	1009883a 	mov	r4,r2
  800c9c:	0808c3c0 	call	808c3c <__floatsidf>
  800ca0:	1009883a 	mov	r4,r2
  800ca4:	180b883a 	mov	r5,r3
  800ca8:	04800044 	movi	r18,1
  800cac:	200d883a 	mov	r6,r4
  800cb0:	280f883a 	mov	r7,r5
  800cb4:	8009883a 	mov	r4,r16
  800cb8:	880b883a 	mov	r5,r17
  800cbc:	08081700 	call	808170 <__gedf2>
  800cc0:	1000010e 	bge	r2,zero,800cc8 <logic+0x538>
  800cc4:	0025883a 	mov	r18,zero
  800cc8:	9007883a 	mov	r3,r18
  800ccc:	e0bffc17 	ldw	r2,-16(fp)
  800cd0:	10c047c5 	stb	r3,287(r2)
  d->_g22 = d->_g35 && d->_cg21;
  800cd4:	e0bffc17 	ldw	r2,-16(fp)
  800cd8:	10802483 	ldbu	r2,146(r2)
  800cdc:	10803fcc 	andi	r2,r2,255
  800ce0:	1080201c 	xori	r2,r2,128
  800ce4:	10bfe004 	addi	r2,r2,-128
  800ce8:	10000826 	beq	r2,zero,800d0c <logic+0x57c>
  800cec:	e0bffc17 	ldw	r2,-16(fp)
  800cf0:	108047c3 	ldbu	r2,287(r2)
  800cf4:	10803fcc 	andi	r2,r2,255
  800cf8:	1080201c 	xori	r2,r2,128
  800cfc:	10bfe004 	addi	r2,r2,-128
  800d00:	10000226 	beq	r2,zero,800d0c <logic+0x57c>
  800d04:	00800044 	movi	r2,1
  800d08:	00000106 	br	800d10 <logic+0x580>
  800d0c:	0005883a 	mov	r2,zero
  800d10:	1007883a 	mov	r3,r2
  800d14:	e0bffc17 	ldw	r2,-16(fp)
  800d18:	10c02245 	stb	r3,137(r2)
  if (d->_g22) {
  800d1c:	e0bffc17 	ldw	r2,-16(fp)
  800d20:	10802243 	ldbu	r2,137(r2)
  800d24:	10803fcc 	andi	r2,r2,255
  800d28:	1080201c 	xori	r2,r2,128
  800d2c:	10bfe004 	addi	r2,r2,-128
  800d30:	10000326 	beq	r2,zero,800d40 <logic+0x5b0>
    d->_heart2_local__Atrig = 1;
  800d34:	e0bffc17 	ldw	r2,-16(fp)
  800d38:	00c00044 	movi	r3,1
  800d3c:	10c01a45 	stb	r3,105(r2)
  }
  d->_g24 = d->_g35 && !d->_cg21;
  800d40:	e0bffc17 	ldw	r2,-16(fp)
  800d44:	10802483 	ldbu	r2,146(r2)
  800d48:	10803fcc 	andi	r2,r2,255
  800d4c:	1080201c 	xori	r2,r2,128
  800d50:	10bfe004 	addi	r2,r2,-128
  800d54:	10000826 	beq	r2,zero,800d78 <logic+0x5e8>
  800d58:	e0bffc17 	ldw	r2,-16(fp)
  800d5c:	108047c3 	ldbu	r2,287(r2)
  800d60:	10803fcc 	andi	r2,r2,255
  800d64:	1080201c 	xori	r2,r2,128
  800d68:	10bfe004 	addi	r2,r2,-128
  800d6c:	1000021e 	bne	r2,zero,800d78 <logic+0x5e8>
  800d70:	00800044 	movi	r2,1
  800d74:	00000106 	br	800d7c <logic+0x5ec>
  800d78:	0005883a 	mov	r2,zero
  800d7c:	1007883a 	mov	r3,r2
  800d80:	e0bffc17 	ldw	r2,-16(fp)
  800d84:	10c022c5 	stb	r3,139(r2)
  d->_cg24 = d->v;
  800d88:	e0bffc17 	ldw	r2,-16(fp)
  800d8c:	10c018c3 	ldbu	r3,99(r2)
  800d90:	e0bffc17 	ldw	r2,-16(fp)
  800d94:	10c04785 	stb	r3,286(r2)
  d->_g25 = d->_g24 && d->_cg24;
  800d98:	e0bffc17 	ldw	r2,-16(fp)
  800d9c:	108022c3 	ldbu	r2,139(r2)
  800da0:	10803fcc 	andi	r2,r2,255
  800da4:	1080201c 	xori	r2,r2,128
  800da8:	10bfe004 	addi	r2,r2,-128
  800dac:	10000826 	beq	r2,zero,800dd0 <logic+0x640>
  800db0:	e0bffc17 	ldw	r2,-16(fp)
  800db4:	10804783 	ldbu	r2,286(r2)
  800db8:	10803fcc 	andi	r2,r2,255
  800dbc:	1080201c 	xori	r2,r2,128
  800dc0:	10bfe004 	addi	r2,r2,-128
  800dc4:	10000226 	beq	r2,zero,800dd0 <logic+0x640>
  800dc8:	00800044 	movi	r2,1
  800dcc:	00000106 	br	800dd4 <logic+0x644>
  800dd0:	0005883a 	mov	r2,zero
  800dd4:	1007883a 	mov	r3,r2
  800dd8:	e0bffc17 	ldw	r2,-16(fp)
  800ddc:	10c02305 	stb	r3,140(r2)
  if (d->_g25) {
  800de0:	e0bffc17 	ldw	r2,-16(fp)
  800de4:	10802303 	ldbu	r2,140(r2)
  800de8:	10803fcc 	andi	r2,r2,255
  800dec:	1080201c 	xori	r2,r2,128
  800df0:	10bfe004 	addi	r2,r2,-128
  800df4:	10000326 	beq	r2,zero,800e04 <logic+0x674>
    d->_heart2_local__Atrig1 = 1;
  800df8:	e0bffc17 	ldw	r2,-16(fp)
  800dfc:	00c00044 	movi	r3,1
  800e00:	10c01a85 	stb	r3,106(r2)
  }
  d->_cg6 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  800e04:	e0bffc17 	ldw	r2,-16(fp)
  800e08:	10801a43 	ldbu	r2,105(r2)
  800e0c:	10803fcc 	andi	r2,r2,255
  800e10:	1080201c 	xori	r2,r2,128
  800e14:	10bfe004 	addi	r2,r2,-128
  800e18:	1000061e 	bne	r2,zero,800e34 <logic+0x6a4>
  800e1c:	e0bffc17 	ldw	r2,-16(fp)
  800e20:	10801a83 	ldbu	r2,106(r2)
  800e24:	10803fcc 	andi	r2,r2,255
  800e28:	1080201c 	xori	r2,r2,128
  800e2c:	10bfe004 	addi	r2,r2,-128
  800e30:	10000226 	beq	r2,zero,800e3c <logic+0x6ac>
  800e34:	00800044 	movi	r2,1
  800e38:	00000106 	br	800e40 <logic+0x6b0>
  800e3c:	0005883a 	mov	r2,zero
  800e40:	1007883a 	mov	r3,r2
  800e44:	e0bffc17 	ldw	r2,-16(fp)
  800e48:	10c045c5 	stb	r3,279(r2)
  d->_g7 = d->_g31 && d->_cg6;
  800e4c:	e0bffc17 	ldw	r2,-16(fp)
  800e50:	10802403 	ldbu	r2,144(r2)
  800e54:	10803fcc 	andi	r2,r2,255
  800e58:	1080201c 	xori	r2,r2,128
  800e5c:	10bfe004 	addi	r2,r2,-128
  800e60:	10000826 	beq	r2,zero,800e84 <logic+0x6f4>
  800e64:	e0bffc17 	ldw	r2,-16(fp)
  800e68:	108045c3 	ldbu	r2,279(r2)
  800e6c:	10803fcc 	andi	r2,r2,255
  800e70:	1080201c 	xori	r2,r2,128
  800e74:	10bfe004 	addi	r2,r2,-128
  800e78:	10000226 	beq	r2,zero,800e84 <logic+0x6f4>
  800e7c:	00800044 	movi	r2,1
  800e80:	00000106 	br	800e88 <logic+0x6f8>
  800e84:	0005883a 	mov	r2,zero
  800e88:	1007883a 	mov	r3,r2
  800e8c:	e0bffc17 	ldw	r2,-16(fp)
  800e90:	10c01fc5 	stb	r3,127(r2)
  d->_g17 = d->_pg37;
  800e94:	e0bffc17 	ldw	r2,-16(fp)
  800e98:	10c06503 	ldbu	r3,404(r2)
  800e9c:	e0bffc17 	ldw	r2,-16(fp)
  800ea0:	10c02185 	stb	r3,134(r2)
  d->_g11 = d->_pg14;
  800ea4:	e0bffc17 	ldw	r2,-16(fp)
  800ea8:	10c06543 	ldbu	r3,405(r2)
  800eac:	e0bffc17 	ldw	r2,-16(fp)
  800eb0:	10c02045 	stb	r3,129(r2)
  d->_g14_e2 = !(d->_g17 || d->_g11);
  800eb4:	e0bffc17 	ldw	r2,-16(fp)
  800eb8:	10802183 	ldbu	r2,134(r2)
  800ebc:	10803fcc 	andi	r2,r2,255
  800ec0:	1080201c 	xori	r2,r2,128
  800ec4:	10bfe004 	addi	r2,r2,-128
  800ec8:	1000081e 	bne	r2,zero,800eec <logic+0x75c>
  800ecc:	e0bffc17 	ldw	r2,-16(fp)
  800ed0:	10802043 	ldbu	r2,129(r2)
  800ed4:	10803fcc 	andi	r2,r2,255
  800ed8:	1080201c 	xori	r2,r2,128
  800edc:	10bfe004 	addi	r2,r2,-128
  800ee0:	1000021e 	bne	r2,zero,800eec <logic+0x75c>
  800ee4:	00800044 	movi	r2,1
  800ee8:	00000106 	br	800ef0 <logic+0x760>
  800eec:	0005883a 	mov	r2,zero
  800ef0:	1007883a 	mov	r3,r2
  800ef4:	e0bffc17 	ldw	r2,-16(fp)
  800ef8:	10c05c45 	stb	r3,369(r2)
  d->sleepT = 1000.0;
  800efc:	e0fffc17 	ldw	r3,-16(fp)
  800f00:	18001515 	stw	zero,84(r3)
  800f04:	009023f4 	movhi	r2,16527
  800f08:	10900004 	addi	r2,r2,16384
  800f0c:	18801615 	stw	r2,88(r3)
  d->_g11 = d->_g11 || d->_g17;
  800f10:	e0bffc17 	ldw	r2,-16(fp)
  800f14:	10802043 	ldbu	r2,129(r2)
  800f18:	10803fcc 	andi	r2,r2,255
  800f1c:	1080201c 	xori	r2,r2,128
  800f20:	10bfe004 	addi	r2,r2,-128
  800f24:	1000061e 	bne	r2,zero,800f40 <logic+0x7b0>
  800f28:	e0bffc17 	ldw	r2,-16(fp)
  800f2c:	10802183 	ldbu	r2,134(r2)
  800f30:	10803fcc 	andi	r2,r2,255
  800f34:	1080201c 	xori	r2,r2,128
  800f38:	10bfe004 	addi	r2,r2,-128
  800f3c:	10000226 	beq	r2,zero,800f48 <logic+0x7b8>
  800f40:	00800044 	movi	r2,1
  800f44:	00000106 	br	800f4c <logic+0x7bc>
  800f48:	0005883a 	mov	r2,zero
  800f4c:	1007883a 	mov	r3,r2
  800f50:	e0bffc17 	ldw	r2,-16(fp)
  800f54:	10c02045 	stb	r3,129(r2)
  d->_cg12 = d->_region0_null_URI < d->URI_time;
  800f58:	e0bffc17 	ldw	r2,-16(fp)
  800f5c:	14000717 	ldw	r16,28(r2)
  800f60:	14400817 	ldw	r17,32(r2)
  800f64:	e0bffc17 	ldw	r2,-16(fp)
  800f68:	10800217 	ldw	r2,8(r2)
  800f6c:	1009883a 	mov	r4,r2
  800f70:	0808c3c0 	call	808c3c <__floatsidf>
  800f74:	1009883a 	mov	r4,r2
  800f78:	180b883a 	mov	r5,r3
  800f7c:	04800044 	movi	r18,1
  800f80:	200d883a 	mov	r6,r4
  800f84:	280f883a 	mov	r7,r5
  800f88:	8009883a 	mov	r4,r16
  800f8c:	880b883a 	mov	r5,r17
  800f90:	080824c0 	call	80824c <__ledf2>
  800f94:	10000116 	blt	r2,zero,800f9c <logic+0x80c>
  800f98:	0025883a 	mov	r18,zero
  800f9c:	9007883a 	mov	r3,r18
  800fa0:	e0bffc17 	ldw	r2,-16(fp)
  800fa4:	10c046c5 	stb	r3,283(r2)
  d->_g17 = d->_g11 && d->_cg12;
  800fa8:	e0bffc17 	ldw	r2,-16(fp)
  800fac:	10802043 	ldbu	r2,129(r2)
  800fb0:	10803fcc 	andi	r2,r2,255
  800fb4:	1080201c 	xori	r2,r2,128
  800fb8:	10bfe004 	addi	r2,r2,-128
  800fbc:	10000826 	beq	r2,zero,800fe0 <logic+0x850>
  800fc0:	e0bffc17 	ldw	r2,-16(fp)
  800fc4:	108046c3 	ldbu	r2,283(r2)
  800fc8:	10803fcc 	andi	r2,r2,255
  800fcc:	1080201c 	xori	r2,r2,128
  800fd0:	10bfe004 	addi	r2,r2,-128
  800fd4:	10000226 	beq	r2,zero,800fe0 <logic+0x850>
  800fd8:	00800044 	movi	r2,1
  800fdc:	00000106 	br	800fe4 <logic+0x854>
  800fe0:	0005883a 	mov	r2,zero
  800fe4:	1007883a 	mov	r3,r2
  800fe8:	e0bffc17 	ldw	r2,-16(fp)
  800fec:	10c02185 	stb	r3,134(r2)
  if (d->_g17) {
  800ff0:	e0bffc17 	ldw	r2,-16(fp)
  800ff4:	10802183 	ldbu	r2,134(r2)
  800ff8:	10803fcc 	andi	r2,r2,255
  800ffc:	1080201c 	xori	r2,r2,128
  801000:	10bfe004 	addi	r2,r2,-128
  801004:	10003426 	beq	r2,zero,8010d8 <logic+0x948>
    d->sleepT = (d->sleepT < (d->URI_time - d->_region0_null_URI)) ? d->sleepT : (d->URI_time - d->_region0_null_URI);
  801008:	e0bffc17 	ldw	r2,-16(fp)
  80100c:	14001517 	ldw	r16,84(r2)
  801010:	14401617 	ldw	r17,88(r2)
  801014:	e0bffc17 	ldw	r2,-16(fp)
  801018:	10800217 	ldw	r2,8(r2)
  80101c:	1009883a 	mov	r4,r2
  801020:	0808c3c0 	call	808c3c <__floatsidf>
  801024:	1011883a 	mov	r8,r2
  801028:	1813883a 	mov	r9,r3
  80102c:	e13ffc17 	ldw	r4,-16(fp)
  801030:	20800717 	ldw	r2,28(r4)
  801034:	20c00817 	ldw	r3,32(r4)
  801038:	100d883a 	mov	r6,r2
  80103c:	180f883a 	mov	r7,r3
  801040:	4009883a 	mov	r4,r8
  801044:	480b883a 	mov	r5,r9
  801048:	08083400 	call	808340 <__subdf3>
  80104c:	1009883a 	mov	r4,r2
  801050:	180b883a 	mov	r5,r3
  801054:	2005883a 	mov	r2,r4
  801058:	2807883a 	mov	r3,r5
  80105c:	100d883a 	mov	r6,r2
  801060:	180f883a 	mov	r7,r3
  801064:	8009883a 	mov	r4,r16
  801068:	880b883a 	mov	r5,r17
  80106c:	080824c0 	call	80824c <__ledf2>
  801070:	1000040e 	bge	r2,zero,801084 <logic+0x8f4>
  801074:	e13ffc17 	ldw	r4,-16(fp)
  801078:	20801517 	ldw	r2,84(r4)
  80107c:	20c01617 	ldw	r3,88(r4)
  801080:	00001206 	br	8010cc <logic+0x93c>
  801084:	e0bffc17 	ldw	r2,-16(fp)
  801088:	10800217 	ldw	r2,8(r2)
  80108c:	1009883a 	mov	r4,r2
  801090:	0808c3c0 	call	808c3c <__floatsidf>
  801094:	1011883a 	mov	r8,r2
  801098:	1813883a 	mov	r9,r3
  80109c:	e13ffc17 	ldw	r4,-16(fp)
  8010a0:	20800717 	ldw	r2,28(r4)
  8010a4:	20c00817 	ldw	r3,32(r4)
  8010a8:	100d883a 	mov	r6,r2
  8010ac:	180f883a 	mov	r7,r3
  8010b0:	4009883a 	mov	r4,r8
  8010b4:	480b883a 	mov	r5,r9
  8010b8:	08083400 	call	808340 <__subdf3>
  8010bc:	1009883a 	mov	r4,r2
  8010c0:	180b883a 	mov	r5,r3
  8010c4:	2005883a 	mov	r2,r4
  8010c8:	2807883a 	mov	r3,r5
  8010cc:	e13ffc17 	ldw	r4,-16(fp)
  8010d0:	20801515 	stw	r2,84(r4)
  8010d4:	20c01615 	stw	r3,88(r4)
  }
  d->_cg13 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  8010d8:	e0bffc17 	ldw	r2,-16(fp)
  8010dc:	10801a43 	ldbu	r2,105(r2)
  8010e0:	10803fcc 	andi	r2,r2,255
  8010e4:	1080201c 	xori	r2,r2,128
  8010e8:	10bfe004 	addi	r2,r2,-128
  8010ec:	1000061e 	bne	r2,zero,801108 <logic+0x978>
  8010f0:	e0bffc17 	ldw	r2,-16(fp)
  8010f4:	10801a83 	ldbu	r2,106(r2)
  8010f8:	10803fcc 	andi	r2,r2,255
  8010fc:	1080201c 	xori	r2,r2,128
  801100:	10bfe004 	addi	r2,r2,-128
  801104:	10000226 	beq	r2,zero,801110 <logic+0x980>
  801108:	00800044 	movi	r2,1
  80110c:	00000106 	br	801114 <logic+0x984>
  801110:	0005883a 	mov	r2,zero
  801114:	1007883a 	mov	r3,r2
  801118:	e0bffc17 	ldw	r2,-16(fp)
  80111c:	10c04685 	stb	r3,282(r2)
  d->_g12 = d->_g11 && !d->_cg12;
  801120:	e0bffc17 	ldw	r2,-16(fp)
  801124:	10802043 	ldbu	r2,129(r2)
  801128:	10803fcc 	andi	r2,r2,255
  80112c:	1080201c 	xori	r2,r2,128
  801130:	10bfe004 	addi	r2,r2,-128
  801134:	10000826 	beq	r2,zero,801158 <logic+0x9c8>
  801138:	e0bffc17 	ldw	r2,-16(fp)
  80113c:	108046c3 	ldbu	r2,283(r2)
  801140:	10803fcc 	andi	r2,r2,255
  801144:	1080201c 	xori	r2,r2,128
  801148:	10bfe004 	addi	r2,r2,-128
  80114c:	1000021e 	bne	r2,zero,801158 <logic+0x9c8>
  801150:	00800044 	movi	r2,1
  801154:	00000106 	br	80115c <logic+0x9cc>
  801158:	0005883a 	mov	r2,zero
  80115c:	1007883a 	mov	r3,r2
  801160:	e0bffc17 	ldw	r2,-16(fp)
  801164:	10c02085 	stb	r3,130(r2)
  d->_cg15 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  801168:	e0bffc17 	ldw	r2,-16(fp)
  80116c:	10801a43 	ldbu	r2,105(r2)
  801170:	10803fcc 	andi	r2,r2,255
  801174:	1080201c 	xori	r2,r2,128
  801178:	10bfe004 	addi	r2,r2,-128
  80117c:	1000061e 	bne	r2,zero,801198 <logic+0xa08>
  801180:	e0bffc17 	ldw	r2,-16(fp)
  801184:	10801a83 	ldbu	r2,106(r2)
  801188:	10803fcc 	andi	r2,r2,255
  80118c:	1080201c 	xori	r2,r2,128
  801190:	10bfe004 	addi	r2,r2,-128
  801194:	10000226 	beq	r2,zero,8011a0 <logic+0xa10>
  801198:	00800044 	movi	r2,1
  80119c:	00000106 	br	8011a4 <logic+0xa14>
  8011a0:	0005883a 	mov	r2,zero
  8011a4:	1007883a 	mov	r3,r2
  8011a8:	e0bffc17 	ldw	r2,-16(fp)
  8011ac:	10c04705 	stb	r3,284(r2)
  d->_g14 = d->_g17 && d->_cg13 || d->_g12 && d->_cg15;
  8011b0:	e0bffc17 	ldw	r2,-16(fp)
  8011b4:	10802183 	ldbu	r2,134(r2)
  8011b8:	10803fcc 	andi	r2,r2,255
  8011bc:	1080201c 	xori	r2,r2,128
  8011c0:	10bfe004 	addi	r2,r2,-128
  8011c4:	10000626 	beq	r2,zero,8011e0 <logic+0xa50>
  8011c8:	e0bffc17 	ldw	r2,-16(fp)
  8011cc:	10804683 	ldbu	r2,282(r2)
  8011d0:	10803fcc 	andi	r2,r2,255
  8011d4:	1080201c 	xori	r2,r2,128
  8011d8:	10bfe004 	addi	r2,r2,-128
  8011dc:	10000c1e 	bne	r2,zero,801210 <logic+0xa80>
  8011e0:	e0bffc17 	ldw	r2,-16(fp)
  8011e4:	10802083 	ldbu	r2,130(r2)
  8011e8:	10803fcc 	andi	r2,r2,255
  8011ec:	1080201c 	xori	r2,r2,128
  8011f0:	10bfe004 	addi	r2,r2,-128
  8011f4:	10000826 	beq	r2,zero,801218 <logic+0xa88>
  8011f8:	e0bffc17 	ldw	r2,-16(fp)
  8011fc:	10804703 	ldbu	r2,284(r2)
  801200:	10803fcc 	andi	r2,r2,255
  801204:	1080201c 	xori	r2,r2,128
  801208:	10bfe004 	addi	r2,r2,-128
  80120c:	10000226 	beq	r2,zero,801218 <logic+0xa88>
  801210:	00800044 	movi	r2,1
  801214:	00000106 	br	80121c <logic+0xa8c>
  801218:	0005883a 	mov	r2,zero
  80121c:	1007883a 	mov	r3,r2
  801220:	e0bffc17 	ldw	r2,-16(fp)
  801224:	10c02105 	stb	r3,132(r2)
  d->_g21 = !d->_g35;
  801228:	e0bffc17 	ldw	r2,-16(fp)
  80122c:	10802483 	ldbu	r2,146(r2)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	1080201c 	xori	r2,r2,128
  801238:	10bfe004 	addi	r2,r2,-128
  80123c:	1005003a 	cmpeq	r2,r2,zero
  801240:	1007883a 	mov	r3,r2
  801244:	e0bffc17 	ldw	r2,-16(fp)
  801248:	10c02205 	stb	r3,136(r2)
  d->_g22 = d->_g22 || d->_g25;
  80124c:	e0bffc17 	ldw	r2,-16(fp)
  801250:	10802243 	ldbu	r2,137(r2)
  801254:	10803fcc 	andi	r2,r2,255
  801258:	1080201c 	xori	r2,r2,128
  80125c:	10bfe004 	addi	r2,r2,-128
  801260:	1000061e 	bne	r2,zero,80127c <logic+0xaec>
  801264:	e0bffc17 	ldw	r2,-16(fp)
  801268:	10802303 	ldbu	r2,140(r2)
  80126c:	10803fcc 	andi	r2,r2,255
  801270:	1080201c 	xori	r2,r2,128
  801274:	10bfe004 	addi	r2,r2,-128
  801278:	10000226 	beq	r2,zero,801284 <logic+0xaf4>
  80127c:	00800044 	movi	r2,1
  801280:	00000106 	br	801288 <logic+0xaf8>
  801284:	0005883a 	mov	r2,zero
  801288:	1007883a 	mov	r3,r2
  80128c:	e0bffc17 	ldw	r2,-16(fp)
  801290:	10c02245 	stb	r3,137(r2)
  d->_g25 = (d->_g31_e1 || d->_g7) && (d->_g14_e2 || d->_g14) && (d->_g21 || d->_g22) && (d->_g7 || d->_g14 || d->_g22);
  801294:	e0bffc17 	ldw	r2,-16(fp)
  801298:	10805cc3 	ldbu	r2,371(r2)
  80129c:	10803fcc 	andi	r2,r2,255
  8012a0:	1080201c 	xori	r2,r2,128
  8012a4:	10bfe004 	addi	r2,r2,-128
  8012a8:	1000061e 	bne	r2,zero,8012c4 <logic+0xb34>
  8012ac:	e0bffc17 	ldw	r2,-16(fp)
  8012b0:	10801fc3 	ldbu	r2,127(r2)
  8012b4:	10803fcc 	andi	r2,r2,255
  8012b8:	1080201c 	xori	r2,r2,128
  8012bc:	10bfe004 	addi	r2,r2,-128
  8012c0:	10002c26 	beq	r2,zero,801374 <logic+0xbe4>
  8012c4:	e0bffc17 	ldw	r2,-16(fp)
  8012c8:	10805c43 	ldbu	r2,369(r2)
  8012cc:	10803fcc 	andi	r2,r2,255
  8012d0:	1080201c 	xori	r2,r2,128
  8012d4:	10bfe004 	addi	r2,r2,-128
  8012d8:	1000061e 	bne	r2,zero,8012f4 <logic+0xb64>
  8012dc:	e0bffc17 	ldw	r2,-16(fp)
  8012e0:	10802103 	ldbu	r2,132(r2)
  8012e4:	10803fcc 	andi	r2,r2,255
  8012e8:	1080201c 	xori	r2,r2,128
  8012ec:	10bfe004 	addi	r2,r2,-128
  8012f0:	10002026 	beq	r2,zero,801374 <logic+0xbe4>
  8012f4:	e0bffc17 	ldw	r2,-16(fp)
  8012f8:	10802203 	ldbu	r2,136(r2)
  8012fc:	10803fcc 	andi	r2,r2,255
  801300:	1080201c 	xori	r2,r2,128
  801304:	10bfe004 	addi	r2,r2,-128
  801308:	1000061e 	bne	r2,zero,801324 <logic+0xb94>
  80130c:	e0bffc17 	ldw	r2,-16(fp)
  801310:	10802243 	ldbu	r2,137(r2)
  801314:	10803fcc 	andi	r2,r2,255
  801318:	1080201c 	xori	r2,r2,128
  80131c:	10bfe004 	addi	r2,r2,-128
  801320:	10001426 	beq	r2,zero,801374 <logic+0xbe4>
  801324:	e0bffc17 	ldw	r2,-16(fp)
  801328:	10801fc3 	ldbu	r2,127(r2)
  80132c:	10803fcc 	andi	r2,r2,255
  801330:	1080201c 	xori	r2,r2,128
  801334:	10bfe004 	addi	r2,r2,-128
  801338:	10000c1e 	bne	r2,zero,80136c <logic+0xbdc>
  80133c:	e0bffc17 	ldw	r2,-16(fp)
  801340:	10802103 	ldbu	r2,132(r2)
  801344:	10803fcc 	andi	r2,r2,255
  801348:	1080201c 	xori	r2,r2,128
  80134c:	10bfe004 	addi	r2,r2,-128
  801350:	1000061e 	bne	r2,zero,80136c <logic+0xbdc>
  801354:	e0bffc17 	ldw	r2,-16(fp)
  801358:	10802243 	ldbu	r2,137(r2)
  80135c:	10803fcc 	andi	r2,r2,255
  801360:	1080201c 	xori	r2,r2,128
  801364:	10bfe004 	addi	r2,r2,-128
  801368:	10000226 	beq	r2,zero,801374 <logic+0xbe4>
  80136c:	00800044 	movi	r2,1
  801370:	00000106 	br	801378 <logic+0xbe8>
  801374:	0005883a 	mov	r2,zero
  801378:	1007883a 	mov	r3,r2
  80137c:	e0bffc17 	ldw	r2,-16(fp)
  801380:	10c02305 	stb	r3,140(r2)
  d->_cg26 = d->_heart2_local__Atrig;
  801384:	e0bffc17 	ldw	r2,-16(fp)
  801388:	10c01a43 	ldbu	r3,105(r2)
  80138c:	e0bffc17 	ldw	r2,-16(fp)
  801390:	10c04805 	stb	r3,288(r2)
  d->_g23_e3 = d->_g25 && !d->_cg26;
  801394:	e0bffc17 	ldw	r2,-16(fp)
  801398:	10802303 	ldbu	r2,140(r2)
  80139c:	10803fcc 	andi	r2,r2,255
  8013a0:	1080201c 	xori	r2,r2,128
  8013a4:	10bfe004 	addi	r2,r2,-128
  8013a8:	10000826 	beq	r2,zero,8013cc <logic+0xc3c>
  8013ac:	e0bffc17 	ldw	r2,-16(fp)
  8013b0:	10804803 	ldbu	r2,288(r2)
  8013b4:	10803fcc 	andi	r2,r2,255
  8013b8:	1080201c 	xori	r2,r2,128
  8013bc:	10bfe004 	addi	r2,r2,-128
  8013c0:	1000021e 	bne	r2,zero,8013cc <logic+0xc3c>
  8013c4:	00800044 	movi	r2,1
  8013c8:	00000106 	br	8013d0 <logic+0xc40>
  8013cc:	0005883a 	mov	r2,zero
  8013d0:	1007883a 	mov	r3,r2
  8013d4:	e0bffc17 	ldw	r2,-16(fp)
  8013d8:	10c05c85 	stb	r3,370(r2)
  if (d->_g23_e3) {
  8013dc:	e0bffc17 	ldw	r2,-16(fp)
  8013e0:	10805c83 	ldbu	r2,370(r2)
  8013e4:	10803fcc 	andi	r2,r2,255
  8013e8:	1080201c 	xori	r2,r2,128
  8013ec:	10bfe004 	addi	r2,r2,-128
  8013f0:	10000326 	beq	r2,zero,801400 <logic+0xc70>
    d->_region0_null_URI = 0;
  8013f4:	e0bffc17 	ldw	r2,-16(fp)
  8013f8:	10000715 	stw	zero,28(r2)
  8013fc:	10000815 	stw	zero,32(r2)
  }
  d->_g23 = d->_GO || d->_g35_e2 || d->_g23_e3;
  801400:	e0bffc17 	ldw	r2,-16(fp)
  801404:	10804543 	ldbu	r2,277(r2)
  801408:	10803fcc 	andi	r2,r2,255
  80140c:	1080201c 	xori	r2,r2,128
  801410:	10bfe004 	addi	r2,r2,-128
  801414:	10000c1e 	bne	r2,zero,801448 <logic+0xcb8>
  801418:	e0bffc17 	ldw	r2,-16(fp)
  80141c:	10805d03 	ldbu	r2,372(r2)
  801420:	10803fcc 	andi	r2,r2,255
  801424:	1080201c 	xori	r2,r2,128
  801428:	10bfe004 	addi	r2,r2,-128
  80142c:	1000061e 	bne	r2,zero,801448 <logic+0xcb8>
  801430:	e0bffc17 	ldw	r2,-16(fp)
  801434:	10805c83 	ldbu	r2,370(r2)
  801438:	10803fcc 	andi	r2,r2,255
  80143c:	1080201c 	xori	r2,r2,128
  801440:	10bfe004 	addi	r2,r2,-128
  801444:	10000226 	beq	r2,zero,801450 <logic+0xcc0>
  801448:	00800044 	movi	r2,1
  80144c:	00000106 	br	801454 <logic+0xcc4>
  801450:	0005883a 	mov	r2,zero
  801454:	1007883a 	mov	r3,r2
  801458:	e0bffc17 	ldw	r2,-16(fp)
  80145c:	10c02285 	stb	r3,138(r2)
  if (d->_g23) {
  801460:	e0bffc17 	ldw	r2,-16(fp)
  801464:	10802283 	ldbu	r2,138(r2)
  801468:	10803fcc 	andi	r2,r2,255
  80146c:	1080201c 	xori	r2,r2,128
  801470:	10bfe004 	addi	r2,r2,-128
  801474:	10000426 	beq	r2,zero,801488 <logic+0xcf8>
    d->_heart2_local__Atrig = 0;
  801478:	e0bffc17 	ldw	r2,-16(fp)
  80147c:	10001a45 	stb	zero,105(r2)
    d->_heart2_local__Atrig1 = 0;
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	10001a85 	stb	zero,106(r2)
  }
  d->_cg4 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  801488:	e0bffc17 	ldw	r2,-16(fp)
  80148c:	10801a43 	ldbu	r2,105(r2)
  801490:	10803fcc 	andi	r2,r2,255
  801494:	1080201c 	xori	r2,r2,128
  801498:	10bfe004 	addi	r2,r2,-128
  80149c:	1000061e 	bne	r2,zero,8014b8 <logic+0xd28>
  8014a0:	e0bffc17 	ldw	r2,-16(fp)
  8014a4:	10801a83 	ldbu	r2,106(r2)
  8014a8:	10803fcc 	andi	r2,r2,255
  8014ac:	1080201c 	xori	r2,r2,128
  8014b0:	10bfe004 	addi	r2,r2,-128
  8014b4:	10000226 	beq	r2,zero,8014c0 <logic+0xd30>
  8014b8:	00800044 	movi	r2,1
  8014bc:	00000106 	br	8014c4 <logic+0xd34>
  8014c0:	0005883a 	mov	r2,zero
  8014c4:	1007883a 	mov	r3,r2
  8014c8:	e0bffc17 	ldw	r2,-16(fp)
  8014cc:	10c04585 	stb	r3,278(r2)
  d->_g7_e1 = d->_g23 && !d->_cg4 || d->_g31 && !d->_cg6;
  8014d0:	e0bffc17 	ldw	r2,-16(fp)
  8014d4:	10802283 	ldbu	r2,138(r2)
  8014d8:	10803fcc 	andi	r2,r2,255
  8014dc:	1080201c 	xori	r2,r2,128
  8014e0:	10bfe004 	addi	r2,r2,-128
  8014e4:	10000626 	beq	r2,zero,801500 <logic+0xd70>
  8014e8:	e0bffc17 	ldw	r2,-16(fp)
  8014ec:	10804583 	ldbu	r2,278(r2)
  8014f0:	10803fcc 	andi	r2,r2,255
  8014f4:	1080201c 	xori	r2,r2,128
  8014f8:	10bfe004 	addi	r2,r2,-128
  8014fc:	10000c26 	beq	r2,zero,801530 <logic+0xda0>
  801500:	e0bffc17 	ldw	r2,-16(fp)
  801504:	10802403 	ldbu	r2,144(r2)
  801508:	10803fcc 	andi	r2,r2,255
  80150c:	1080201c 	xori	r2,r2,128
  801510:	10bfe004 	addi	r2,r2,-128
  801514:	10000826 	beq	r2,zero,801538 <logic+0xda8>
  801518:	e0bffc17 	ldw	r2,-16(fp)
  80151c:	108045c3 	ldbu	r2,279(r2)
  801520:	10803fcc 	andi	r2,r2,255
  801524:	1080201c 	xori	r2,r2,128
  801528:	10bfe004 	addi	r2,r2,-128
  80152c:	1000021e 	bne	r2,zero,801538 <logic+0xda8>
  801530:	00800044 	movi	r2,1
  801534:	00000106 	br	80153c <logic+0xdac>
  801538:	0005883a 	mov	r2,zero
  80153c:	1007883a 	mov	r3,r2
  801540:	e0bffc17 	ldw	r2,-16(fp)
  801544:	10c05c05 	stb	r3,368(r2)
  d->_cg8 = d->_region0_null_URI < d->URI_time;
  801548:	e0bffc17 	ldw	r2,-16(fp)
  80154c:	14000717 	ldw	r16,28(r2)
  801550:	14400817 	ldw	r17,32(r2)
  801554:	e0bffc17 	ldw	r2,-16(fp)
  801558:	10800217 	ldw	r2,8(r2)
  80155c:	1009883a 	mov	r4,r2
  801560:	0808c3c0 	call	808c3c <__floatsidf>
  801564:	1009883a 	mov	r4,r2
  801568:	180b883a 	mov	r5,r3
  80156c:	04800044 	movi	r18,1
  801570:	200d883a 	mov	r6,r4
  801574:	280f883a 	mov	r7,r5
  801578:	8009883a 	mov	r4,r16
  80157c:	880b883a 	mov	r5,r17
  801580:	080824c0 	call	80824c <__ledf2>
  801584:	10000116 	blt	r2,zero,80158c <logic+0xdfc>
  801588:	0025883a 	mov	r18,zero
  80158c:	9007883a 	mov	r3,r18
  801590:	e0bffc17 	ldw	r2,-16(fp)
  801594:	10c04605 	stb	r3,280(r2)
  d->_g7 = d->_g23 && d->_cg8;
  801598:	e0bffc17 	ldw	r2,-16(fp)
  80159c:	10802283 	ldbu	r2,138(r2)
  8015a0:	10803fcc 	andi	r2,r2,255
  8015a4:	1080201c 	xori	r2,r2,128
  8015a8:	10bfe004 	addi	r2,r2,-128
  8015ac:	10000826 	beq	r2,zero,8015d0 <logic+0xe40>
  8015b0:	e0bffc17 	ldw	r2,-16(fp)
  8015b4:	10804603 	ldbu	r2,280(r2)
  8015b8:	10803fcc 	andi	r2,r2,255
  8015bc:	1080201c 	xori	r2,r2,128
  8015c0:	10bfe004 	addi	r2,r2,-128
  8015c4:	10000226 	beq	r2,zero,8015d0 <logic+0xe40>
  8015c8:	00800044 	movi	r2,1
  8015cc:	00000106 	br	8015d4 <logic+0xe44>
  8015d0:	0005883a 	mov	r2,zero
  8015d4:	1007883a 	mov	r3,r2
  8015d8:	e0bffc17 	ldw	r2,-16(fp)
  8015dc:	10c01fc5 	stb	r3,127(r2)
  if (d->_g7) {
  8015e0:	e0bffc17 	ldw	r2,-16(fp)
  8015e4:	10801fc3 	ldbu	r2,127(r2)
  8015e8:	10803fcc 	andi	r2,r2,255
  8015ec:	1080201c 	xori	r2,r2,128
  8015f0:	10bfe004 	addi	r2,r2,-128
  8015f4:	10003426 	beq	r2,zero,8016c8 <logic+0xf38>
    d->sleepT = (d->sleepT < (d->URI_time - d->_region0_null_URI)) ? d->sleepT : (d->URI_time - d->_region0_null_URI);
  8015f8:	e0bffc17 	ldw	r2,-16(fp)
  8015fc:	14001517 	ldw	r16,84(r2)
  801600:	14401617 	ldw	r17,88(r2)
  801604:	e0bffc17 	ldw	r2,-16(fp)
  801608:	10800217 	ldw	r2,8(r2)
  80160c:	1009883a 	mov	r4,r2
  801610:	0808c3c0 	call	808c3c <__floatsidf>
  801614:	1011883a 	mov	r8,r2
  801618:	1813883a 	mov	r9,r3
  80161c:	e13ffc17 	ldw	r4,-16(fp)
  801620:	20800717 	ldw	r2,28(r4)
  801624:	20c00817 	ldw	r3,32(r4)
  801628:	100d883a 	mov	r6,r2
  80162c:	180f883a 	mov	r7,r3
  801630:	4009883a 	mov	r4,r8
  801634:	480b883a 	mov	r5,r9
  801638:	08083400 	call	808340 <__subdf3>
  80163c:	1009883a 	mov	r4,r2
  801640:	180b883a 	mov	r5,r3
  801644:	2005883a 	mov	r2,r4
  801648:	2807883a 	mov	r3,r5
  80164c:	100d883a 	mov	r6,r2
  801650:	180f883a 	mov	r7,r3
  801654:	8009883a 	mov	r4,r16
  801658:	880b883a 	mov	r5,r17
  80165c:	080824c0 	call	80824c <__ledf2>
  801660:	1000040e 	bge	r2,zero,801674 <logic+0xee4>
  801664:	e13ffc17 	ldw	r4,-16(fp)
  801668:	20801517 	ldw	r2,84(r4)
  80166c:	20c01617 	ldw	r3,88(r4)
  801670:	00001206 	br	8016bc <logic+0xf2c>
  801674:	e0bffc17 	ldw	r2,-16(fp)
  801678:	10800217 	ldw	r2,8(r2)
  80167c:	1009883a 	mov	r4,r2
  801680:	0808c3c0 	call	808c3c <__floatsidf>
  801684:	1011883a 	mov	r8,r2
  801688:	1813883a 	mov	r9,r3
  80168c:	e13ffc17 	ldw	r4,-16(fp)
  801690:	20800717 	ldw	r2,28(r4)
  801694:	20c00817 	ldw	r3,32(r4)
  801698:	100d883a 	mov	r6,r2
  80169c:	180f883a 	mov	r7,r3
  8016a0:	4009883a 	mov	r4,r8
  8016a4:	480b883a 	mov	r5,r9
  8016a8:	08083400 	call	808340 <__subdf3>
  8016ac:	1009883a 	mov	r4,r2
  8016b0:	180b883a 	mov	r5,r3
  8016b4:	2005883a 	mov	r2,r4
  8016b8:	2807883a 	mov	r3,r5
  8016bc:	e13ffc17 	ldw	r4,-16(fp)
  8016c0:	20801515 	stw	r2,84(r4)
  8016c4:	20c01615 	stw	r3,88(r4)
  }
  d->_cg9 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  8016c8:	e0bffc17 	ldw	r2,-16(fp)
  8016cc:	10801a43 	ldbu	r2,105(r2)
  8016d0:	10803fcc 	andi	r2,r2,255
  8016d4:	1080201c 	xori	r2,r2,128
  8016d8:	10bfe004 	addi	r2,r2,-128
  8016dc:	1000061e 	bne	r2,zero,8016f8 <logic+0xf68>
  8016e0:	e0bffc17 	ldw	r2,-16(fp)
  8016e4:	10801a83 	ldbu	r2,106(r2)
  8016e8:	10803fcc 	andi	r2,r2,255
  8016ec:	1080201c 	xori	r2,r2,128
  8016f0:	10bfe004 	addi	r2,r2,-128
  8016f4:	10000226 	beq	r2,zero,801700 <logic+0xf70>
  8016f8:	00800044 	movi	r2,1
  8016fc:	00000106 	br	801704 <logic+0xf74>
  801700:	0005883a 	mov	r2,zero
  801704:	1007883a 	mov	r3,r2
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	10c04645 	stb	r3,281(r2)
  d->_g14 = d->_g7 && !d->_cg9 || d->_g17 && !d->_cg13;
  801710:	e0bffc17 	ldw	r2,-16(fp)
  801714:	10801fc3 	ldbu	r2,127(r2)
  801718:	10803fcc 	andi	r2,r2,255
  80171c:	1080201c 	xori	r2,r2,128
  801720:	10bfe004 	addi	r2,r2,-128
  801724:	10000626 	beq	r2,zero,801740 <logic+0xfb0>
  801728:	e0bffc17 	ldw	r2,-16(fp)
  80172c:	10804643 	ldbu	r2,281(r2)
  801730:	10803fcc 	andi	r2,r2,255
  801734:	1080201c 	xori	r2,r2,128
  801738:	10bfe004 	addi	r2,r2,-128
  80173c:	10000c26 	beq	r2,zero,801770 <logic+0xfe0>
  801740:	e0bffc17 	ldw	r2,-16(fp)
  801744:	10802183 	ldbu	r2,134(r2)
  801748:	10803fcc 	andi	r2,r2,255
  80174c:	1080201c 	xori	r2,r2,128
  801750:	10bfe004 	addi	r2,r2,-128
  801754:	10000826 	beq	r2,zero,801778 <logic+0xfe8>
  801758:	e0bffc17 	ldw	r2,-16(fp)
  80175c:	10804683 	ldbu	r2,282(r2)
  801760:	10803fcc 	andi	r2,r2,255
  801764:	1080201c 	xori	r2,r2,128
  801768:	10bfe004 	addi	r2,r2,-128
  80176c:	1000021e 	bne	r2,zero,801778 <logic+0xfe8>
  801770:	00800044 	movi	r2,1
  801774:	00000106 	br	80177c <logic+0xfec>
  801778:	0005883a 	mov	r2,zero
  80177c:	1007883a 	mov	r3,r2
  801780:	e0bffc17 	ldw	r2,-16(fp)
  801784:	10c02105 	stb	r3,132(r2)
  d->_g14_e2 = d->_g23 && !d->_cg8;
  801788:	e0bffc17 	ldw	r2,-16(fp)
  80178c:	10802283 	ldbu	r2,138(r2)
  801790:	10803fcc 	andi	r2,r2,255
  801794:	1080201c 	xori	r2,r2,128
  801798:	10bfe004 	addi	r2,r2,-128
  80179c:	10000826 	beq	r2,zero,8017c0 <logic+0x1030>
  8017a0:	e0bffc17 	ldw	r2,-16(fp)
  8017a4:	10804603 	ldbu	r2,280(r2)
  8017a8:	10803fcc 	andi	r2,r2,255
  8017ac:	1080201c 	xori	r2,r2,128
  8017b0:	10bfe004 	addi	r2,r2,-128
  8017b4:	1000021e 	bne	r2,zero,8017c0 <logic+0x1030>
  8017b8:	00800044 	movi	r2,1
  8017bc:	00000106 	br	8017c4 <logic+0x1034>
  8017c0:	0005883a 	mov	r2,zero
  8017c4:	1007883a 	mov	r3,r2
  8017c8:	e0bffc17 	ldw	r2,-16(fp)
  8017cc:	10c05c45 	stb	r3,369(r2)
  d->_cg18 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  8017d0:	e0bffc17 	ldw	r2,-16(fp)
  8017d4:	10801a43 	ldbu	r2,105(r2)
  8017d8:	10803fcc 	andi	r2,r2,255
  8017dc:	1080201c 	xori	r2,r2,128
  8017e0:	10bfe004 	addi	r2,r2,-128
  8017e4:	1000061e 	bne	r2,zero,801800 <logic+0x1070>
  8017e8:	e0bffc17 	ldw	r2,-16(fp)
  8017ec:	10801a83 	ldbu	r2,106(r2)
  8017f0:	10803fcc 	andi	r2,r2,255
  8017f4:	1080201c 	xori	r2,r2,128
  8017f8:	10bfe004 	addi	r2,r2,-128
  8017fc:	10000226 	beq	r2,zero,801808 <logic+0x1078>
  801800:	00800044 	movi	r2,1
  801804:	00000106 	br	80180c <logic+0x107c>
  801808:	0005883a 	mov	r2,zero
  80180c:	1007883a 	mov	r3,r2
  801810:	e0bffc17 	ldw	r2,-16(fp)
  801814:	10c04745 	stb	r3,285(r2)
  d->_g37 = d->_g12 && !d->_cg15 || d->_g14_e2 && !d->_cg18;
  801818:	e0bffc17 	ldw	r2,-16(fp)
  80181c:	10802083 	ldbu	r2,130(r2)
  801820:	10803fcc 	andi	r2,r2,255
  801824:	1080201c 	xori	r2,r2,128
  801828:	10bfe004 	addi	r2,r2,-128
  80182c:	10000626 	beq	r2,zero,801848 <logic+0x10b8>
  801830:	e0bffc17 	ldw	r2,-16(fp)
  801834:	10804703 	ldbu	r2,284(r2)
  801838:	10803fcc 	andi	r2,r2,255
  80183c:	1080201c 	xori	r2,r2,128
  801840:	10bfe004 	addi	r2,r2,-128
  801844:	10000c26 	beq	r2,zero,801878 <logic+0x10e8>
  801848:	e0bffc17 	ldw	r2,-16(fp)
  80184c:	10805c43 	ldbu	r2,369(r2)
  801850:	10803fcc 	andi	r2,r2,255
  801854:	1080201c 	xori	r2,r2,128
  801858:	10bfe004 	addi	r2,r2,-128
  80185c:	10000826 	beq	r2,zero,801880 <logic+0x10f0>
  801860:	e0bffc17 	ldw	r2,-16(fp)
  801864:	10804743 	ldbu	r2,285(r2)
  801868:	10803fcc 	andi	r2,r2,255
  80186c:	1080201c 	xori	r2,r2,128
  801870:	10bfe004 	addi	r2,r2,-128
  801874:	1000021e 	bne	r2,zero,801880 <logic+0x10f0>
  801878:	00800044 	movi	r2,1
  80187c:	00000106 	br	801884 <logic+0x10f4>
  801880:	0005883a 	mov	r2,zero
  801884:	1007883a 	mov	r3,r2
  801888:	e0bffc17 	ldw	r2,-16(fp)
  80188c:	10c02505 	stb	r3,148(r2)
  d->_g36 = d->_g23 || d->_g24 && !d->_cg24;
  801890:	e0bffc17 	ldw	r2,-16(fp)
  801894:	10802283 	ldbu	r2,138(r2)
  801898:	10803fcc 	andi	r2,r2,255
  80189c:	1080201c 	xori	r2,r2,128
  8018a0:	10bfe004 	addi	r2,r2,-128
  8018a4:	10000c1e 	bne	r2,zero,8018d8 <logic+0x1148>
  8018a8:	e0bffc17 	ldw	r2,-16(fp)
  8018ac:	108022c3 	ldbu	r2,139(r2)
  8018b0:	10803fcc 	andi	r2,r2,255
  8018b4:	1080201c 	xori	r2,r2,128
  8018b8:	10bfe004 	addi	r2,r2,-128
  8018bc:	10000826 	beq	r2,zero,8018e0 <logic+0x1150>
  8018c0:	e0bffc17 	ldw	r2,-16(fp)
  8018c4:	10804783 	ldbu	r2,286(r2)
  8018c8:	10803fcc 	andi	r2,r2,255
  8018cc:	1080201c 	xori	r2,r2,128
  8018d0:	10bfe004 	addi	r2,r2,-128
  8018d4:	1000021e 	bne	r2,zero,8018e0 <logic+0x1150>
  8018d8:	00800044 	movi	r2,1
  8018dc:	00000106 	br	8018e4 <logic+0x1154>
  8018e0:	0005883a 	mov	r2,zero
  8018e4:	1007883a 	mov	r3,r2
  8018e8:	e0bffc17 	ldw	r2,-16(fp)
  8018ec:	10c024c5 	stb	r3,147(r2)
  d->_g6 = d->_g25 && d->_cg26;
  8018f0:	e0bffc17 	ldw	r2,-16(fp)
  8018f4:	10802303 	ldbu	r2,140(r2)
  8018f8:	10803fcc 	andi	r2,r2,255
  8018fc:	1080201c 	xori	r2,r2,128
  801900:	10bfe004 	addi	r2,r2,-128
  801904:	10000826 	beq	r2,zero,801928 <logic+0x1198>
  801908:	e0bffc17 	ldw	r2,-16(fp)
  80190c:	10804803 	ldbu	r2,288(r2)
  801910:	10803fcc 	andi	r2,r2,255
  801914:	1080201c 	xori	r2,r2,128
  801918:	10bfe004 	addi	r2,r2,-128
  80191c:	10000226 	beq	r2,zero,801928 <logic+0x1198>
  801920:	00800044 	movi	r2,1
  801924:	00000106 	br	80192c <logic+0x119c>
  801928:	0005883a 	mov	r2,zero
  80192c:	1007883a 	mov	r3,r2
  801930:	e0bffc17 	ldw	r2,-16(fp)
  801934:	10c01f85 	stb	r3,126(r2)
  if (d->_g6) {
  801938:	e0bffc17 	ldw	r2,-16(fp)
  80193c:	10801f83 	ldbu	r2,126(r2)
  801940:	10803fcc 	andi	r2,r2,255
  801944:	1080201c 	xori	r2,r2,128
  801948:	10bfe004 	addi	r2,r2,-128
  80194c:	10000526 	beq	r2,zero,801964 <logic+0x11d4>
    d->ready = 1;
  801950:	e0bffc17 	ldw	r2,-16(fp)
  801954:	00c00044 	movi	r3,1
  801958:	10c00605 	stb	r3,24(r2)
    d->_heart2_local__Atrig2 = 0;
  80195c:	e0bffc17 	ldw	r2,-16(fp)
  801960:	10001ac5 	stb	zero,107(r2)
  }
  d->_cg28 = d->_heart2_local__Atrig2;
  801964:	e0bffc17 	ldw	r2,-16(fp)
  801968:	10c01ac3 	ldbu	r3,107(r2)
  80196c:	e0bffc17 	ldw	r2,-16(fp)
  801970:	10c04845 	stb	r3,289(r2)
  d->_g9 = d->_g6 && !d->_cg28 || d->_g30 && !d->_cg30;
  801974:	e0bffc17 	ldw	r2,-16(fp)
  801978:	10801f83 	ldbu	r2,126(r2)
  80197c:	10803fcc 	andi	r2,r2,255
  801980:	1080201c 	xori	r2,r2,128
  801984:	10bfe004 	addi	r2,r2,-128
  801988:	10000626 	beq	r2,zero,8019a4 <logic+0x1214>
  80198c:	e0bffc17 	ldw	r2,-16(fp)
  801990:	10804843 	ldbu	r2,289(r2)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	1080201c 	xori	r2,r2,128
  80199c:	10bfe004 	addi	r2,r2,-128
  8019a0:	10000c26 	beq	r2,zero,8019d4 <logic+0x1244>
  8019a4:	e0bffc17 	ldw	r2,-16(fp)
  8019a8:	108023c3 	ldbu	r2,143(r2)
  8019ac:	10803fcc 	andi	r2,r2,255
  8019b0:	1080201c 	xori	r2,r2,128
  8019b4:	10bfe004 	addi	r2,r2,-128
  8019b8:	10000826 	beq	r2,zero,8019dc <logic+0x124c>
  8019bc:	e0bffc17 	ldw	r2,-16(fp)
  8019c0:	10804883 	ldbu	r2,290(r2)
  8019c4:	10803fcc 	andi	r2,r2,255
  8019c8:	1080201c 	xori	r2,r2,128
  8019cc:	10bfe004 	addi	r2,r2,-128
  8019d0:	1000021e 	bne	r2,zero,8019dc <logic+0x124c>
  8019d4:	00800044 	movi	r2,1
  8019d8:	00000106 	br	8019e0 <logic+0x1250>
  8019dc:	0005883a 	mov	r2,zero
  8019e0:	1007883a 	mov	r3,r2
  8019e4:	e0bffc17 	ldw	r2,-16(fp)
  8019e8:	10c02005 	stb	r3,128(r2)
  d->_g13 = d->_g6 || d->_g34 && !d->_cg34;
  8019ec:	e0bffc17 	ldw	r2,-16(fp)
  8019f0:	10801f83 	ldbu	r2,126(r2)
  8019f4:	10803fcc 	andi	r2,r2,255
  8019f8:	1080201c 	xori	r2,r2,128
  8019fc:	10bfe004 	addi	r2,r2,-128
  801a00:	10000c1e 	bne	r2,zero,801a34 <logic+0x12a4>
  801a04:	e0bffc17 	ldw	r2,-16(fp)
  801a08:	10802443 	ldbu	r2,145(r2)
  801a0c:	10803fcc 	andi	r2,r2,255
  801a10:	1080201c 	xori	r2,r2,128
  801a14:	10bfe004 	addi	r2,r2,-128
  801a18:	10000826 	beq	r2,zero,801a3c <logic+0x12ac>
  801a1c:	e0bffc17 	ldw	r2,-16(fp)
  801a20:	108048c3 	ldbu	r2,291(r2)
  801a24:	10803fcc 	andi	r2,r2,255
  801a28:	1080201c 	xori	r2,r2,128
  801a2c:	10bfe004 	addi	r2,r2,-128
  801a30:	1000021e 	bne	r2,zero,801a3c <logic+0x12ac>
  801a34:	00800044 	movi	r2,1
  801a38:	00000106 	br	801a40 <logic+0x12b0>
  801a3c:	0005883a 	mov	r2,zero
  801a40:	1007883a 	mov	r3,r2
  801a44:	e0bffc17 	ldw	r2,-16(fp)
  801a48:	10c020c5 	stb	r3,131(r2)
  d->_g15 = d->_pg46;
  801a4c:	e0bffc17 	ldw	r2,-16(fp)
  801a50:	10c06583 	ldbu	r3,406(r2)
  801a54:	e0bffc17 	ldw	r2,-16(fp)
  801a58:	10c02145 	stb	r3,133(r2)
  if (d->_g15) {
  801a5c:	e0bffc17 	ldw	r2,-16(fp)
  801a60:	10802143 	ldbu	r2,133(r2)
  801a64:	10803fcc 	andi	r2,r2,255
  801a68:	1080201c 	xori	r2,r2,128
  801a6c:	10bfe004 	addi	r2,r2,-128
  801a70:	10001226 	beq	r2,zero,801abc <logic+0x132c>
    d->_region1_null_LRI += d->deltaT;
  801a74:	e13ffc17 	ldw	r4,-16(fp)
  801a78:	20800917 	ldw	r2,36(r4)
  801a7c:	20c00a17 	ldw	r3,40(r4)
  801a80:	e1bffc17 	ldw	r6,-16(fp)
  801a84:	31001317 	ldw	r4,76(r6)
  801a88:	31401417 	ldw	r5,80(r6)
  801a8c:	200d883a 	mov	r6,r4
  801a90:	280f883a 	mov	r7,r5
  801a94:	1009883a 	mov	r4,r2
  801a98:	180b883a 	mov	r5,r3
  801a9c:	08078c40 	call	8078c4 <__adddf3>
  801aa0:	1009883a 	mov	r4,r2
  801aa4:	180b883a 	mov	r5,r3
  801aa8:	2005883a 	mov	r2,r4
  801aac:	2807883a 	mov	r3,r5
  801ab0:	e13ffc17 	ldw	r4,-16(fp)
  801ab4:	20800915 	stw	r2,36(r4)
  801ab8:	20c00a15 	stw	r3,40(r4)
  }
  d->_g18 = !d->_g15;
  801abc:	e0bffc17 	ldw	r2,-16(fp)
  801ac0:	10802143 	ldbu	r2,133(r2)
  801ac4:	10803fcc 	andi	r2,r2,255
  801ac8:	1080201c 	xori	r2,r2,128
  801acc:	10bfe004 	addi	r2,r2,-128
  801ad0:	1005003a 	cmpeq	r2,r2,zero
  801ad4:	1007883a 	mov	r3,r2
  801ad8:	e0bffc17 	ldw	r2,-16(fp)
  801adc:	10c021c5 	stb	r3,135(r2)
  d->_g24 = d->_pg50;
  801ae0:	e0bffc17 	ldw	r2,-16(fp)
  801ae4:	10c065c3 	ldbu	r3,407(r2)
  801ae8:	e0bffc17 	ldw	r2,-16(fp)
  801aec:	10c022c5 	stb	r3,139(r2)
  d->_cg71 = d->v;
  801af0:	e0bffc17 	ldw	r2,-16(fp)
  801af4:	10c018c3 	ldbu	r3,99(r2)
  801af8:	e0bffc17 	ldw	r2,-16(fp)
  801afc:	10c04c45 	stb	r3,305(r2)
  d->_g3 = d->_g24 && d->_cg71;
  801b00:	e0bffc17 	ldw	r2,-16(fp)
  801b04:	108022c3 	ldbu	r2,139(r2)
  801b08:	10803fcc 	andi	r2,r2,255
  801b0c:	1080201c 	xori	r2,r2,128
  801b10:	10bfe004 	addi	r2,r2,-128
  801b14:	10000826 	beq	r2,zero,801b38 <logic+0x13a8>
  801b18:	e0bffc17 	ldw	r2,-16(fp)
  801b1c:	10804c43 	ldbu	r2,305(r2)
  801b20:	10803fcc 	andi	r2,r2,255
  801b24:	1080201c 	xori	r2,r2,128
  801b28:	10bfe004 	addi	r2,r2,-128
  801b2c:	10000226 	beq	r2,zero,801b38 <logic+0x13a8>
  801b30:	00800044 	movi	r2,1
  801b34:	00000106 	br	801b3c <logic+0x13ac>
  801b38:	0005883a 	mov	r2,zero
  801b3c:	1007883a 	mov	r3,r2
  801b40:	e0bffc17 	ldw	r2,-16(fp)
  801b44:	10c01f45 	stb	r3,125(r2)
  if (d->_g3) {
  801b48:	e0bffc17 	ldw	r2,-16(fp)
  801b4c:	10801f43 	ldbu	r2,125(r2)
  801b50:	10803fcc 	andi	r2,r2,255
  801b54:	1080201c 	xori	r2,r2,128
  801b58:	10bfe004 	addi	r2,r2,-128
  801b5c:	10000326 	beq	r2,zero,801b6c <logic+0x13dc>
    d->_heart2_local__Atrig5 = 1;
  801b60:	e0bffc17 	ldw	r2,-16(fp)
  801b64:	00c00044 	movi	r3,1
  801b68:	10c01b85 	stb	r3,110(r2)
  }
  d->_cg67 = d->_heart2_local__Atrig5;
  801b6c:	e0bffc17 	ldw	r2,-16(fp)
  801b70:	10c01b83 	ldbu	r3,110(r2)
  801b74:	e0bffc17 	ldw	r2,-16(fp)
  801b78:	10c04c05 	stb	r3,304(r2)
  d->_g26 = d->_g15 && d->_cg67;
  801b7c:	e0bffc17 	ldw	r2,-16(fp)
  801b80:	10802143 	ldbu	r2,133(r2)
  801b84:	10803fcc 	andi	r2,r2,255
  801b88:	1080201c 	xori	r2,r2,128
  801b8c:	10bfe004 	addi	r2,r2,-128
  801b90:	10000826 	beq	r2,zero,801bb4 <logic+0x1424>
  801b94:	e0bffc17 	ldw	r2,-16(fp)
  801b98:	10804c03 	ldbu	r2,304(r2)
  801b9c:	10803fcc 	andi	r2,r2,255
  801ba0:	1080201c 	xori	r2,r2,128
  801ba4:	10bfe004 	addi	r2,r2,-128
  801ba8:	10000226 	beq	r2,zero,801bb4 <logic+0x1424>
  801bac:	00800044 	movi	r2,1
  801bb0:	00000106 	br	801bb8 <logic+0x1428>
  801bb4:	0005883a 	mov	r2,zero
  801bb8:	1007883a 	mov	r3,r2
  801bbc:	e0bffc17 	ldw	r2,-16(fp)
  801bc0:	10c02345 	stb	r3,141(r2)
  d->_g30 = !d->_g24;
  801bc4:	e0bffc17 	ldw	r2,-16(fp)
  801bc8:	108022c3 	ldbu	r2,139(r2)
  801bcc:	10803fcc 	andi	r2,r2,255
  801bd0:	1080201c 	xori	r2,r2,128
  801bd4:	10bfe004 	addi	r2,r2,-128
  801bd8:	1005003a 	cmpeq	r2,r2,zero
  801bdc:	1007883a 	mov	r3,r2
  801be0:	e0bffc17 	ldw	r2,-16(fp)
  801be4:	10c023c5 	stb	r3,143(r2)
  d->_g27 = (d->_g18 || d->_g26) && (d->_g30 || d->_g3) && (d->_g26 || d->_g3);
  801be8:	e0bffc17 	ldw	r2,-16(fp)
  801bec:	108021c3 	ldbu	r2,135(r2)
  801bf0:	10803fcc 	andi	r2,r2,255
  801bf4:	1080201c 	xori	r2,r2,128
  801bf8:	10bfe004 	addi	r2,r2,-128
  801bfc:	1000061e 	bne	r2,zero,801c18 <logic+0x1488>
  801c00:	e0bffc17 	ldw	r2,-16(fp)
  801c04:	10802343 	ldbu	r2,141(r2)
  801c08:	10803fcc 	andi	r2,r2,255
  801c0c:	1080201c 	xori	r2,r2,128
  801c10:	10bfe004 	addi	r2,r2,-128
  801c14:	10001a26 	beq	r2,zero,801c80 <logic+0x14f0>
  801c18:	e0bffc17 	ldw	r2,-16(fp)
  801c1c:	108023c3 	ldbu	r2,143(r2)
  801c20:	10803fcc 	andi	r2,r2,255
  801c24:	1080201c 	xori	r2,r2,128
  801c28:	10bfe004 	addi	r2,r2,-128
  801c2c:	1000061e 	bne	r2,zero,801c48 <logic+0x14b8>
  801c30:	e0bffc17 	ldw	r2,-16(fp)
  801c34:	10801f43 	ldbu	r2,125(r2)
  801c38:	10803fcc 	andi	r2,r2,255
  801c3c:	1080201c 	xori	r2,r2,128
  801c40:	10bfe004 	addi	r2,r2,-128
  801c44:	10000e26 	beq	r2,zero,801c80 <logic+0x14f0>
  801c48:	e0bffc17 	ldw	r2,-16(fp)
  801c4c:	10802343 	ldbu	r2,141(r2)
  801c50:	10803fcc 	andi	r2,r2,255
  801c54:	1080201c 	xori	r2,r2,128
  801c58:	10bfe004 	addi	r2,r2,-128
  801c5c:	1000061e 	bne	r2,zero,801c78 <logic+0x14e8>
  801c60:	e0bffc17 	ldw	r2,-16(fp)
  801c64:	10801f43 	ldbu	r2,125(r2)
  801c68:	10803fcc 	andi	r2,r2,255
  801c6c:	1080201c 	xori	r2,r2,128
  801c70:	10bfe004 	addi	r2,r2,-128
  801c74:	10000226 	beq	r2,zero,801c80 <logic+0x14f0>
  801c78:	00800044 	movi	r2,1
  801c7c:	00000106 	br	801c84 <logic+0x14f4>
  801c80:	0005883a 	mov	r2,zero
  801c84:	1007883a 	mov	r3,r2
  801c88:	e0bffc17 	ldw	r2,-16(fp)
  801c8c:	10c02385 	stb	r3,142(r2)
  if (d->_g27) {
  801c90:	e0bffc17 	ldw	r2,-16(fp)
  801c94:	10802383 	ldbu	r2,142(r2)
  801c98:	10803fcc 	andi	r2,r2,255
  801c9c:	1080201c 	xori	r2,r2,128
  801ca0:	10bfe004 	addi	r2,r2,-128
  801ca4:	10000326 	beq	r2,zero,801cb4 <logic+0x1524>
    d->_region1_null_LRI = 0;
  801ca8:	e0bffc17 	ldw	r2,-16(fp)
  801cac:	10000915 	stw	zero,36(r2)
  801cb0:	10000a15 	stw	zero,40(r2)
  }
  d->_g34 = d->_pg44_e1;
  801cb4:	e0bffc17 	ldw	r2,-16(fp)
  801cb8:	10c06603 	ldbu	r3,408(r2)
  801cbc:	e0bffc17 	ldw	r2,-16(fp)
  801cc0:	10c02445 	stb	r3,145(r2)
  if (d->_g34) {
  801cc4:	e0bffc17 	ldw	r2,-16(fp)
  801cc8:	10802443 	ldbu	r2,145(r2)
  801ccc:	10803fcc 	andi	r2,r2,255
  801cd0:	1080201c 	xori	r2,r2,128
  801cd4:	10bfe004 	addi	r2,r2,-128
  801cd8:	10001226 	beq	r2,zero,801d24 <logic+0x1594>
    d->_region1_null_LRI += d->deltaT;
  801cdc:	e13ffc17 	ldw	r4,-16(fp)
  801ce0:	20800917 	ldw	r2,36(r4)
  801ce4:	20c00a17 	ldw	r3,40(r4)
  801ce8:	e1bffc17 	ldw	r6,-16(fp)
  801cec:	31001317 	ldw	r4,76(r6)
  801cf0:	31401417 	ldw	r5,80(r6)
  801cf4:	200d883a 	mov	r6,r4
  801cf8:	280f883a 	mov	r7,r5
  801cfc:	1009883a 	mov	r4,r2
  801d00:	180b883a 	mov	r5,r3
  801d04:	08078c40 	call	8078c4 <__adddf3>
  801d08:	1009883a 	mov	r4,r2
  801d0c:	180b883a 	mov	r5,r3
  801d10:	2005883a 	mov	r2,r4
  801d14:	2807883a 	mov	r3,r5
  801d18:	e13ffc17 	ldw	r4,-16(fp)
  801d1c:	20800915 	stw	r2,36(r4)
  801d20:	20c00a15 	stw	r3,40(r4)
  }
  d->_g72_e2 = !d->_g34;
  801d24:	e0bffc17 	ldw	r2,-16(fp)
  801d28:	10802443 	ldbu	r2,145(r2)
  801d2c:	10803fcc 	andi	r2,r2,255
  801d30:	1080201c 	xori	r2,r2,128
  801d34:	10bfe004 	addi	r2,r2,-128
  801d38:	1005003a 	cmpeq	r2,r2,zero
  801d3c:	1007883a 	mov	r3,r2
  801d40:	e0bffc17 	ldw	r2,-16(fp)
  801d44:	10c05e45 	stb	r3,377(r2)
  d->_g68_e1 = d->_pg74;
  801d48:	e0bffc17 	ldw	r2,-16(fp)
  801d4c:	10c06643 	ldbu	r3,409(r2)
  801d50:	e0bffc17 	ldw	r2,-16(fp)
  801d54:	10c05e05 	stb	r3,376(r2)
  d->_cg58 = d->_region1_null_LRI >= d->LRI_time;
  801d58:	e0bffc17 	ldw	r2,-16(fp)
  801d5c:	14000917 	ldw	r16,36(r2)
  801d60:	14400a17 	ldw	r17,40(r2)
  801d64:	e0bffc17 	ldw	r2,-16(fp)
  801d68:	10800317 	ldw	r2,12(r2)
  801d6c:	1009883a 	mov	r4,r2
  801d70:	0808c3c0 	call	808c3c <__floatsidf>
  801d74:	1009883a 	mov	r4,r2
  801d78:	180b883a 	mov	r5,r3
  801d7c:	04800044 	movi	r18,1
  801d80:	200d883a 	mov	r6,r4
  801d84:	280f883a 	mov	r7,r5
  801d88:	8009883a 	mov	r4,r16
  801d8c:	880b883a 	mov	r5,r17
  801d90:	08081700 	call	808170 <__gedf2>
  801d94:	1000010e 	bge	r2,zero,801d9c <logic+0x160c>
  801d98:	0025883a 	mov	r18,zero
  801d9c:	9007883a 	mov	r3,r18
  801da0:	e0bffc17 	ldw	r2,-16(fp)
  801da4:	10c04b45 	stb	r3,301(r2)
  d->_g68 = d->_g68_e1 && d->_cg58;
  801da8:	e0bffc17 	ldw	r2,-16(fp)
  801dac:	10805e03 	ldbu	r2,376(r2)
  801db0:	10803fcc 	andi	r2,r2,255
  801db4:	1080201c 	xori	r2,r2,128
  801db8:	10bfe004 	addi	r2,r2,-128
  801dbc:	10000826 	beq	r2,zero,801de0 <logic+0x1650>
  801dc0:	e0bffc17 	ldw	r2,-16(fp)
  801dc4:	10804b43 	ldbu	r2,301(r2)
  801dc8:	10803fcc 	andi	r2,r2,255
  801dcc:	1080201c 	xori	r2,r2,128
  801dd0:	10bfe004 	addi	r2,r2,-128
  801dd4:	10000226 	beq	r2,zero,801de0 <logic+0x1650>
  801dd8:	00800044 	movi	r2,1
  801ddc:	00000106 	br	801de4 <logic+0x1654>
  801de0:	0005883a 	mov	r2,zero
  801de4:	1007883a 	mov	r3,r2
  801de8:	e0bffc17 	ldw	r2,-16(fp)
  801dec:	10c02a05 	stb	r3,168(r2)
  if (d->_g68) {
  801df0:	e0bffc17 	ldw	r2,-16(fp)
  801df4:	10802a03 	ldbu	r2,168(r2)
  801df8:	10803fcc 	andi	r2,r2,255
  801dfc:	1080201c 	xori	r2,r2,128
  801e00:	10bfe004 	addi	r2,r2,-128
  801e04:	10000326 	beq	r2,zero,801e14 <logic+0x1684>
    d->_heart2_local__Atrig3 = 1;
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	00c00044 	movi	r3,1
  801e10:	10c01b05 	stb	r3,108(r2)
  }
  d->_g72 = d->_g68_e1 && !d->_cg58;
  801e14:	e0bffc17 	ldw	r2,-16(fp)
  801e18:	10805e03 	ldbu	r2,376(r2)
  801e1c:	10803fcc 	andi	r2,r2,255
  801e20:	1080201c 	xori	r2,r2,128
  801e24:	10bfe004 	addi	r2,r2,-128
  801e28:	10000826 	beq	r2,zero,801e4c <logic+0x16bc>
  801e2c:	e0bffc17 	ldw	r2,-16(fp)
  801e30:	10804b43 	ldbu	r2,301(r2)
  801e34:	10803fcc 	andi	r2,r2,255
  801e38:	1080201c 	xori	r2,r2,128
  801e3c:	10bfe004 	addi	r2,r2,-128
  801e40:	1000021e 	bne	r2,zero,801e4c <logic+0x16bc>
  801e44:	00800044 	movi	r2,1
  801e48:	00000106 	br	801e50 <logic+0x16c0>
  801e4c:	0005883a 	mov	r2,zero
  801e50:	1007883a 	mov	r3,r2
  801e54:	e0bffc17 	ldw	r2,-16(fp)
  801e58:	10c02a85 	stb	r3,170(r2)
  d->_cg61 = d->v;
  801e5c:	e0bffc17 	ldw	r2,-16(fp)
  801e60:	10c018c3 	ldbu	r3,99(r2)
  801e64:	e0bffc17 	ldw	r2,-16(fp)
  801e68:	10c04b05 	stb	r3,300(r2)
  d->_g62 = d->_g72 && d->_cg61;
  801e6c:	e0bffc17 	ldw	r2,-16(fp)
  801e70:	10802a83 	ldbu	r2,170(r2)
  801e74:	10803fcc 	andi	r2,r2,255
  801e78:	1080201c 	xori	r2,r2,128
  801e7c:	10bfe004 	addi	r2,r2,-128
  801e80:	10000826 	beq	r2,zero,801ea4 <logic+0x1714>
  801e84:	e0bffc17 	ldw	r2,-16(fp)
  801e88:	10804b03 	ldbu	r2,300(r2)
  801e8c:	10803fcc 	andi	r2,r2,255
  801e90:	1080201c 	xori	r2,r2,128
  801e94:	10bfe004 	addi	r2,r2,-128
  801e98:	10000226 	beq	r2,zero,801ea4 <logic+0x1714>
  801e9c:	00800044 	movi	r2,1
  801ea0:	00000106 	br	801ea8 <logic+0x1718>
  801ea4:	0005883a 	mov	r2,zero
  801ea8:	1007883a 	mov	r3,r2
  801eac:	e0bffc17 	ldw	r2,-16(fp)
  801eb0:	10c02905 	stb	r3,164(r2)
  if (d->_g62) {
  801eb4:	e0bffc17 	ldw	r2,-16(fp)
  801eb8:	10802903 	ldbu	r2,164(r2)
  801ebc:	10803fcc 	andi	r2,r2,255
  801ec0:	1080201c 	xori	r2,r2,128
  801ec4:	10bfe004 	addi	r2,r2,-128
  801ec8:	10000326 	beq	r2,zero,801ed8 <logic+0x1748>
    d->_heart2_local__Atrig4 = 1;
  801ecc:	e0bffc17 	ldw	r2,-16(fp)
  801ed0:	00c00044 	movi	r3,1
  801ed4:	10c01b45 	stb	r3,109(r2)
  }
  d->_cg43 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  801ed8:	e0bffc17 	ldw	r2,-16(fp)
  801edc:	10801b03 	ldbu	r2,108(r2)
  801ee0:	10803fcc 	andi	r2,r2,255
  801ee4:	1080201c 	xori	r2,r2,128
  801ee8:	10bfe004 	addi	r2,r2,-128
  801eec:	1000061e 	bne	r2,zero,801f08 <logic+0x1778>
  801ef0:	e0bffc17 	ldw	r2,-16(fp)
  801ef4:	10801b43 	ldbu	r2,109(r2)
  801ef8:	10803fcc 	andi	r2,r2,255
  801efc:	1080201c 	xori	r2,r2,128
  801f00:	10bfe004 	addi	r2,r2,-128
  801f04:	10000226 	beq	r2,zero,801f10 <logic+0x1780>
  801f08:	00800044 	movi	r2,1
  801f0c:	00000106 	br	801f14 <logic+0x1784>
  801f10:	0005883a 	mov	r2,zero
  801f14:	1007883a 	mov	r3,r2
  801f18:	e0bffc17 	ldw	r2,-16(fp)
  801f1c:	10c04945 	stb	r3,293(r2)
  d->_g44 = d->_g34 && d->_cg43;
  801f20:	e0bffc17 	ldw	r2,-16(fp)
  801f24:	10802443 	ldbu	r2,145(r2)
  801f28:	10803fcc 	andi	r2,r2,255
  801f2c:	1080201c 	xori	r2,r2,128
  801f30:	10bfe004 	addi	r2,r2,-128
  801f34:	10000826 	beq	r2,zero,801f58 <logic+0x17c8>
  801f38:	e0bffc17 	ldw	r2,-16(fp)
  801f3c:	10804943 	ldbu	r2,293(r2)
  801f40:	10803fcc 	andi	r2,r2,255
  801f44:	1080201c 	xori	r2,r2,128
  801f48:	10bfe004 	addi	r2,r2,-128
  801f4c:	10000226 	beq	r2,zero,801f58 <logic+0x17c8>
  801f50:	00800044 	movi	r2,1
  801f54:	00000106 	br	801f5c <logic+0x17cc>
  801f58:	0005883a 	mov	r2,zero
  801f5c:	1007883a 	mov	r3,r2
  801f60:	e0bffc17 	ldw	r2,-16(fp)
  801f64:	10c025c5 	stb	r3,151(r2)
  d->_g54 = d->_pg73;
  801f68:	e0bffc17 	ldw	r2,-16(fp)
  801f6c:	10c06683 	ldbu	r3,410(r2)
  801f70:	e0bffc17 	ldw	r2,-16(fp)
  801f74:	10c02785 	stb	r3,158(r2)
  d->_g48 = d->_pg51_e2;
  801f78:	e0bffc17 	ldw	r2,-16(fp)
  801f7c:	10c066c3 	ldbu	r3,411(r2)
  801f80:	e0bffc17 	ldw	r2,-16(fp)
  801f84:	10c02645 	stb	r3,153(r2)
  d->_g51_e2 = !(d->_g54 || d->_g48);
  801f88:	e0bffc17 	ldw	r2,-16(fp)
  801f8c:	10802783 	ldbu	r2,158(r2)
  801f90:	10803fcc 	andi	r2,r2,255
  801f94:	1080201c 	xori	r2,r2,128
  801f98:	10bfe004 	addi	r2,r2,-128
  801f9c:	1000081e 	bne	r2,zero,801fc0 <logic+0x1830>
  801fa0:	e0bffc17 	ldw	r2,-16(fp)
  801fa4:	10802643 	ldbu	r2,153(r2)
  801fa8:	10803fcc 	andi	r2,r2,255
  801fac:	1080201c 	xori	r2,r2,128
  801fb0:	10bfe004 	addi	r2,r2,-128
  801fb4:	1000021e 	bne	r2,zero,801fc0 <logic+0x1830>
  801fb8:	00800044 	movi	r2,1
  801fbc:	00000106 	br	801fc4 <logic+0x1834>
  801fc0:	0005883a 	mov	r2,zero
  801fc4:	1007883a 	mov	r3,r2
  801fc8:	e0bffc17 	ldw	r2,-16(fp)
  801fcc:	10c05d85 	stb	r3,374(r2)
  d->_g48 = d->_g48 || d->_g54;
  801fd0:	e0bffc17 	ldw	r2,-16(fp)
  801fd4:	10802643 	ldbu	r2,153(r2)
  801fd8:	10803fcc 	andi	r2,r2,255
  801fdc:	1080201c 	xori	r2,r2,128
  801fe0:	10bfe004 	addi	r2,r2,-128
  801fe4:	1000061e 	bne	r2,zero,802000 <logic+0x1870>
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10802783 	ldbu	r2,158(r2)
  801ff0:	10803fcc 	andi	r2,r2,255
  801ff4:	1080201c 	xori	r2,r2,128
  801ff8:	10bfe004 	addi	r2,r2,-128
  801ffc:	10000226 	beq	r2,zero,802008 <logic+0x1878>
  802000:	00800044 	movi	r2,1
  802004:	00000106 	br	80200c <logic+0x187c>
  802008:	0005883a 	mov	r2,zero
  80200c:	1007883a 	mov	r3,r2
  802010:	e0bffc17 	ldw	r2,-16(fp)
  802014:	10c02645 	stb	r3,153(r2)
  d->_cg49 = d->_region1_null_LRI < d->LRI_time;
  802018:	e0bffc17 	ldw	r2,-16(fp)
  80201c:	14000917 	ldw	r16,36(r2)
  802020:	14400a17 	ldw	r17,40(r2)
  802024:	e0bffc17 	ldw	r2,-16(fp)
  802028:	10800317 	ldw	r2,12(r2)
  80202c:	1009883a 	mov	r4,r2
  802030:	0808c3c0 	call	808c3c <__floatsidf>
  802034:	1009883a 	mov	r4,r2
  802038:	180b883a 	mov	r5,r3
  80203c:	04800044 	movi	r18,1
  802040:	200d883a 	mov	r6,r4
  802044:	280f883a 	mov	r7,r5
  802048:	8009883a 	mov	r4,r16
  80204c:	880b883a 	mov	r5,r17
  802050:	080824c0 	call	80824c <__ledf2>
  802054:	10000116 	blt	r2,zero,80205c <logic+0x18cc>
  802058:	0025883a 	mov	r18,zero
  80205c:	9007883a 	mov	r3,r18
  802060:	e0bffc17 	ldw	r2,-16(fp)
  802064:	10c04a45 	stb	r3,297(r2)
  d->_g54 = d->_g48 && d->_cg49;
  802068:	e0bffc17 	ldw	r2,-16(fp)
  80206c:	10802643 	ldbu	r2,153(r2)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1080201c 	xori	r2,r2,128
  802078:	10bfe004 	addi	r2,r2,-128
  80207c:	10000826 	beq	r2,zero,8020a0 <logic+0x1910>
  802080:	e0bffc17 	ldw	r2,-16(fp)
  802084:	10804a43 	ldbu	r2,297(r2)
  802088:	10803fcc 	andi	r2,r2,255
  80208c:	1080201c 	xori	r2,r2,128
  802090:	10bfe004 	addi	r2,r2,-128
  802094:	10000226 	beq	r2,zero,8020a0 <logic+0x1910>
  802098:	00800044 	movi	r2,1
  80209c:	00000106 	br	8020a4 <logic+0x1914>
  8020a0:	0005883a 	mov	r2,zero
  8020a4:	1007883a 	mov	r3,r2
  8020a8:	e0bffc17 	ldw	r2,-16(fp)
  8020ac:	10c02785 	stb	r3,158(r2)
  if (d->_g54) {
  8020b0:	e0bffc17 	ldw	r2,-16(fp)
  8020b4:	10802783 	ldbu	r2,158(r2)
  8020b8:	10803fcc 	andi	r2,r2,255
  8020bc:	1080201c 	xori	r2,r2,128
  8020c0:	10bfe004 	addi	r2,r2,-128
  8020c4:	10003426 	beq	r2,zero,802198 <logic+0x1a08>
    d->sleepT = (d->sleepT < (d->LRI_time - d->_region1_null_LRI)) ? d->sleepT : (d->LRI_time - d->_region1_null_LRI);
  8020c8:	e0bffc17 	ldw	r2,-16(fp)
  8020cc:	14001517 	ldw	r16,84(r2)
  8020d0:	14401617 	ldw	r17,88(r2)
  8020d4:	e0bffc17 	ldw	r2,-16(fp)
  8020d8:	10800317 	ldw	r2,12(r2)
  8020dc:	1009883a 	mov	r4,r2
  8020e0:	0808c3c0 	call	808c3c <__floatsidf>
  8020e4:	1011883a 	mov	r8,r2
  8020e8:	1813883a 	mov	r9,r3
  8020ec:	e13ffc17 	ldw	r4,-16(fp)
  8020f0:	20800917 	ldw	r2,36(r4)
  8020f4:	20c00a17 	ldw	r3,40(r4)
  8020f8:	100d883a 	mov	r6,r2
  8020fc:	180f883a 	mov	r7,r3
  802100:	4009883a 	mov	r4,r8
  802104:	480b883a 	mov	r5,r9
  802108:	08083400 	call	808340 <__subdf3>
  80210c:	1009883a 	mov	r4,r2
  802110:	180b883a 	mov	r5,r3
  802114:	2005883a 	mov	r2,r4
  802118:	2807883a 	mov	r3,r5
  80211c:	100d883a 	mov	r6,r2
  802120:	180f883a 	mov	r7,r3
  802124:	8009883a 	mov	r4,r16
  802128:	880b883a 	mov	r5,r17
  80212c:	080824c0 	call	80824c <__ledf2>
  802130:	1000040e 	bge	r2,zero,802144 <logic+0x19b4>
  802134:	e13ffc17 	ldw	r4,-16(fp)
  802138:	20801517 	ldw	r2,84(r4)
  80213c:	20c01617 	ldw	r3,88(r4)
  802140:	00001206 	br	80218c <logic+0x19fc>
  802144:	e0bffc17 	ldw	r2,-16(fp)
  802148:	10800317 	ldw	r2,12(r2)
  80214c:	1009883a 	mov	r4,r2
  802150:	0808c3c0 	call	808c3c <__floatsidf>
  802154:	1011883a 	mov	r8,r2
  802158:	1813883a 	mov	r9,r3
  80215c:	e13ffc17 	ldw	r4,-16(fp)
  802160:	20800917 	ldw	r2,36(r4)
  802164:	20c00a17 	ldw	r3,40(r4)
  802168:	100d883a 	mov	r6,r2
  80216c:	180f883a 	mov	r7,r3
  802170:	4009883a 	mov	r4,r8
  802174:	480b883a 	mov	r5,r9
  802178:	08083400 	call	808340 <__subdf3>
  80217c:	1009883a 	mov	r4,r2
  802180:	180b883a 	mov	r5,r3
  802184:	2005883a 	mov	r2,r4
  802188:	2807883a 	mov	r3,r5
  80218c:	e13ffc17 	ldw	r4,-16(fp)
  802190:	20801515 	stw	r2,84(r4)
  802194:	20c01615 	stw	r3,88(r4)
  }
  d->_cg50 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802198:	e0bffc17 	ldw	r2,-16(fp)
  80219c:	10801b03 	ldbu	r2,108(r2)
  8021a0:	10803fcc 	andi	r2,r2,255
  8021a4:	1080201c 	xori	r2,r2,128
  8021a8:	10bfe004 	addi	r2,r2,-128
  8021ac:	1000061e 	bne	r2,zero,8021c8 <logic+0x1a38>
  8021b0:	e0bffc17 	ldw	r2,-16(fp)
  8021b4:	10801b43 	ldbu	r2,109(r2)
  8021b8:	10803fcc 	andi	r2,r2,255
  8021bc:	1080201c 	xori	r2,r2,128
  8021c0:	10bfe004 	addi	r2,r2,-128
  8021c4:	10000226 	beq	r2,zero,8021d0 <logic+0x1a40>
  8021c8:	00800044 	movi	r2,1
  8021cc:	00000106 	br	8021d4 <logic+0x1a44>
  8021d0:	0005883a 	mov	r2,zero
  8021d4:	1007883a 	mov	r3,r2
  8021d8:	e0bffc17 	ldw	r2,-16(fp)
  8021dc:	10c04a05 	stb	r3,296(r2)
  d->_g49 = d->_g48 && !d->_cg49;
  8021e0:	e0bffc17 	ldw	r2,-16(fp)
  8021e4:	10802643 	ldbu	r2,153(r2)
  8021e8:	10803fcc 	andi	r2,r2,255
  8021ec:	1080201c 	xori	r2,r2,128
  8021f0:	10bfe004 	addi	r2,r2,-128
  8021f4:	10000826 	beq	r2,zero,802218 <logic+0x1a88>
  8021f8:	e0bffc17 	ldw	r2,-16(fp)
  8021fc:	10804a43 	ldbu	r2,297(r2)
  802200:	10803fcc 	andi	r2,r2,255
  802204:	1080201c 	xori	r2,r2,128
  802208:	10bfe004 	addi	r2,r2,-128
  80220c:	1000021e 	bne	r2,zero,802218 <logic+0x1a88>
  802210:	00800044 	movi	r2,1
  802214:	00000106 	br	80221c <logic+0x1a8c>
  802218:	0005883a 	mov	r2,zero
  80221c:	1007883a 	mov	r3,r2
  802220:	e0bffc17 	ldw	r2,-16(fp)
  802224:	10c02685 	stb	r3,154(r2)
  d->_cg52 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802228:	e0bffc17 	ldw	r2,-16(fp)
  80222c:	10801b03 	ldbu	r2,108(r2)
  802230:	10803fcc 	andi	r2,r2,255
  802234:	1080201c 	xori	r2,r2,128
  802238:	10bfe004 	addi	r2,r2,-128
  80223c:	1000061e 	bne	r2,zero,802258 <logic+0x1ac8>
  802240:	e0bffc17 	ldw	r2,-16(fp)
  802244:	10801b43 	ldbu	r2,109(r2)
  802248:	10803fcc 	andi	r2,r2,255
  80224c:	1080201c 	xori	r2,r2,128
  802250:	10bfe004 	addi	r2,r2,-128
  802254:	10000226 	beq	r2,zero,802260 <logic+0x1ad0>
  802258:	00800044 	movi	r2,1
  80225c:	00000106 	br	802264 <logic+0x1ad4>
  802260:	0005883a 	mov	r2,zero
  802264:	1007883a 	mov	r3,r2
  802268:	e0bffc17 	ldw	r2,-16(fp)
  80226c:	10c04a85 	stb	r3,298(r2)
  d->_g51 = d->_g54 && d->_cg50 || d->_g49 && d->_cg52;
  802270:	e0bffc17 	ldw	r2,-16(fp)
  802274:	10802783 	ldbu	r2,158(r2)
  802278:	10803fcc 	andi	r2,r2,255
  80227c:	1080201c 	xori	r2,r2,128
  802280:	10bfe004 	addi	r2,r2,-128
  802284:	10000626 	beq	r2,zero,8022a0 <logic+0x1b10>
  802288:	e0bffc17 	ldw	r2,-16(fp)
  80228c:	10804a03 	ldbu	r2,296(r2)
  802290:	10803fcc 	andi	r2,r2,255
  802294:	1080201c 	xori	r2,r2,128
  802298:	10bfe004 	addi	r2,r2,-128
  80229c:	10000c1e 	bne	r2,zero,8022d0 <logic+0x1b40>
  8022a0:	e0bffc17 	ldw	r2,-16(fp)
  8022a4:	10802683 	ldbu	r2,154(r2)
  8022a8:	10803fcc 	andi	r2,r2,255
  8022ac:	1080201c 	xori	r2,r2,128
  8022b0:	10bfe004 	addi	r2,r2,-128
  8022b4:	10000826 	beq	r2,zero,8022d8 <logic+0x1b48>
  8022b8:	e0bffc17 	ldw	r2,-16(fp)
  8022bc:	10804a83 	ldbu	r2,298(r2)
  8022c0:	10803fcc 	andi	r2,r2,255
  8022c4:	1080201c 	xori	r2,r2,128
  8022c8:	10bfe004 	addi	r2,r2,-128
  8022cc:	10000226 	beq	r2,zero,8022d8 <logic+0x1b48>
  8022d0:	00800044 	movi	r2,1
  8022d4:	00000106 	br	8022dc <logic+0x1b4c>
  8022d8:	0005883a 	mov	r2,zero
  8022dc:	1007883a 	mov	r3,r2
  8022e0:	e0bffc17 	ldw	r2,-16(fp)
  8022e4:	10c02705 	stb	r3,156(r2)
  d->_g58 = !d->_g68_e1;
  8022e8:	e0bffc17 	ldw	r2,-16(fp)
  8022ec:	10805e03 	ldbu	r2,376(r2)
  8022f0:	10803fcc 	andi	r2,r2,255
  8022f4:	1080201c 	xori	r2,r2,128
  8022f8:	10bfe004 	addi	r2,r2,-128
  8022fc:	1005003a 	cmpeq	r2,r2,zero
  802300:	1007883a 	mov	r3,r2
  802304:	e0bffc17 	ldw	r2,-16(fp)
  802308:	10c02805 	stb	r3,160(r2)
  d->_g62 = d->_g68 || d->_g62;
  80230c:	e0bffc17 	ldw	r2,-16(fp)
  802310:	10802a03 	ldbu	r2,168(r2)
  802314:	10803fcc 	andi	r2,r2,255
  802318:	1080201c 	xori	r2,r2,128
  80231c:	10bfe004 	addi	r2,r2,-128
  802320:	1000061e 	bne	r2,zero,80233c <logic+0x1bac>
  802324:	e0bffc17 	ldw	r2,-16(fp)
  802328:	10802903 	ldbu	r2,164(r2)
  80232c:	10803fcc 	andi	r2,r2,255
  802330:	1080201c 	xori	r2,r2,128
  802334:	10bfe004 	addi	r2,r2,-128
  802338:	10000226 	beq	r2,zero,802344 <logic+0x1bb4>
  80233c:	00800044 	movi	r2,1
  802340:	00000106 	br	802348 <logic+0x1bb8>
  802344:	0005883a 	mov	r2,zero
  802348:	1007883a 	mov	r3,r2
  80234c:	e0bffc17 	ldw	r2,-16(fp)
  802350:	10c02905 	stb	r3,164(r2)
  d->_g59 = (d->_g72_e2 || d->_g44) && (d->_g51_e2 || d->_g51) && (d->_g58 || d->_g62) && (d->_g44 || d->_g51 || d->_g62);
  802354:	e0bffc17 	ldw	r2,-16(fp)
  802358:	10805e43 	ldbu	r2,377(r2)
  80235c:	10803fcc 	andi	r2,r2,255
  802360:	1080201c 	xori	r2,r2,128
  802364:	10bfe004 	addi	r2,r2,-128
  802368:	1000061e 	bne	r2,zero,802384 <logic+0x1bf4>
  80236c:	e0bffc17 	ldw	r2,-16(fp)
  802370:	108025c3 	ldbu	r2,151(r2)
  802374:	10803fcc 	andi	r2,r2,255
  802378:	1080201c 	xori	r2,r2,128
  80237c:	10bfe004 	addi	r2,r2,-128
  802380:	10002c26 	beq	r2,zero,802434 <logic+0x1ca4>
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	10805d83 	ldbu	r2,374(r2)
  80238c:	10803fcc 	andi	r2,r2,255
  802390:	1080201c 	xori	r2,r2,128
  802394:	10bfe004 	addi	r2,r2,-128
  802398:	1000061e 	bne	r2,zero,8023b4 <logic+0x1c24>
  80239c:	e0bffc17 	ldw	r2,-16(fp)
  8023a0:	10802703 	ldbu	r2,156(r2)
  8023a4:	10803fcc 	andi	r2,r2,255
  8023a8:	1080201c 	xori	r2,r2,128
  8023ac:	10bfe004 	addi	r2,r2,-128
  8023b0:	10002026 	beq	r2,zero,802434 <logic+0x1ca4>
  8023b4:	e0bffc17 	ldw	r2,-16(fp)
  8023b8:	10802803 	ldbu	r2,160(r2)
  8023bc:	10803fcc 	andi	r2,r2,255
  8023c0:	1080201c 	xori	r2,r2,128
  8023c4:	10bfe004 	addi	r2,r2,-128
  8023c8:	1000061e 	bne	r2,zero,8023e4 <logic+0x1c54>
  8023cc:	e0bffc17 	ldw	r2,-16(fp)
  8023d0:	10802903 	ldbu	r2,164(r2)
  8023d4:	10803fcc 	andi	r2,r2,255
  8023d8:	1080201c 	xori	r2,r2,128
  8023dc:	10bfe004 	addi	r2,r2,-128
  8023e0:	10001426 	beq	r2,zero,802434 <logic+0x1ca4>
  8023e4:	e0bffc17 	ldw	r2,-16(fp)
  8023e8:	108025c3 	ldbu	r2,151(r2)
  8023ec:	10803fcc 	andi	r2,r2,255
  8023f0:	1080201c 	xori	r2,r2,128
  8023f4:	10bfe004 	addi	r2,r2,-128
  8023f8:	10000c1e 	bne	r2,zero,80242c <logic+0x1c9c>
  8023fc:	e0bffc17 	ldw	r2,-16(fp)
  802400:	10802703 	ldbu	r2,156(r2)
  802404:	10803fcc 	andi	r2,r2,255
  802408:	1080201c 	xori	r2,r2,128
  80240c:	10bfe004 	addi	r2,r2,-128
  802410:	1000061e 	bne	r2,zero,80242c <logic+0x1c9c>
  802414:	e0bffc17 	ldw	r2,-16(fp)
  802418:	10802903 	ldbu	r2,164(r2)
  80241c:	10803fcc 	andi	r2,r2,255
  802420:	1080201c 	xori	r2,r2,128
  802424:	10bfe004 	addi	r2,r2,-128
  802428:	10000226 	beq	r2,zero,802434 <logic+0x1ca4>
  80242c:	00800044 	movi	r2,1
  802430:	00000106 	br	802438 <logic+0x1ca8>
  802434:	0005883a 	mov	r2,zero
  802438:	1007883a 	mov	r3,r2
  80243c:	e0bffc17 	ldw	r2,-16(fp)
  802440:	10c02845 	stb	r3,161(r2)
  d->_cg63 = d->_heart2_local__Atrig3;
  802444:	e0bffc17 	ldw	r2,-16(fp)
  802448:	10c01b03 	ldbu	r3,108(r2)
  80244c:	e0bffc17 	ldw	r2,-16(fp)
  802450:	10c04b85 	stb	r3,302(r2)
  d->_g51 = d->_g59 && !d->_cg63;
  802454:	e0bffc17 	ldw	r2,-16(fp)
  802458:	10802843 	ldbu	r2,161(r2)
  80245c:	10803fcc 	andi	r2,r2,255
  802460:	1080201c 	xori	r2,r2,128
  802464:	10bfe004 	addi	r2,r2,-128
  802468:	10000826 	beq	r2,zero,80248c <logic+0x1cfc>
  80246c:	e0bffc17 	ldw	r2,-16(fp)
  802470:	10804b83 	ldbu	r2,302(r2)
  802474:	10803fcc 	andi	r2,r2,255
  802478:	1080201c 	xori	r2,r2,128
  80247c:	10bfe004 	addi	r2,r2,-128
  802480:	1000021e 	bne	r2,zero,80248c <logic+0x1cfc>
  802484:	00800044 	movi	r2,1
  802488:	00000106 	br	802490 <logic+0x1d00>
  80248c:	0005883a 	mov	r2,zero
  802490:	1007883a 	mov	r3,r2
  802494:	e0bffc17 	ldw	r2,-16(fp)
  802498:	10c02705 	stb	r3,156(r2)
  if (d->_g51) {
  80249c:	e0bffc17 	ldw	r2,-16(fp)
  8024a0:	10802703 	ldbu	r2,156(r2)
  8024a4:	10803fcc 	andi	r2,r2,255
  8024a8:	1080201c 	xori	r2,r2,128
  8024ac:	10bfe004 	addi	r2,r2,-128
  8024b0:	10000326 	beq	r2,zero,8024c0 <logic+0x1d30>
    d->_region1_null_LRI = 0;
  8024b4:	e0bffc17 	ldw	r2,-16(fp)
  8024b8:	10000915 	stw	zero,36(r2)
  8024bc:	10000a15 	stw	zero,40(r2)
  }
  d->_g60_e3 = d->_GO || d->_g27 || d->_g51;
  8024c0:	e0bffc17 	ldw	r2,-16(fp)
  8024c4:	10804543 	ldbu	r2,277(r2)
  8024c8:	10803fcc 	andi	r2,r2,255
  8024cc:	1080201c 	xori	r2,r2,128
  8024d0:	10bfe004 	addi	r2,r2,-128
  8024d4:	10000c1e 	bne	r2,zero,802508 <logic+0x1d78>
  8024d8:	e0bffc17 	ldw	r2,-16(fp)
  8024dc:	10802383 	ldbu	r2,142(r2)
  8024e0:	10803fcc 	andi	r2,r2,255
  8024e4:	1080201c 	xori	r2,r2,128
  8024e8:	10bfe004 	addi	r2,r2,-128
  8024ec:	1000061e 	bne	r2,zero,802508 <logic+0x1d78>
  8024f0:	e0bffc17 	ldw	r2,-16(fp)
  8024f4:	10802703 	ldbu	r2,156(r2)
  8024f8:	10803fcc 	andi	r2,r2,255
  8024fc:	1080201c 	xori	r2,r2,128
  802500:	10bfe004 	addi	r2,r2,-128
  802504:	10000226 	beq	r2,zero,802510 <logic+0x1d80>
  802508:	00800044 	movi	r2,1
  80250c:	00000106 	br	802514 <logic+0x1d84>
  802510:	0005883a 	mov	r2,zero
  802514:	1007883a 	mov	r3,r2
  802518:	e0bffc17 	ldw	r2,-16(fp)
  80251c:	10c05dc5 	stb	r3,375(r2)
  if (d->_g60_e3) {
  802520:	e0bffc17 	ldw	r2,-16(fp)
  802524:	10805dc3 	ldbu	r2,375(r2)
  802528:	10803fcc 	andi	r2,r2,255
  80252c:	1080201c 	xori	r2,r2,128
  802530:	10bfe004 	addi	r2,r2,-128
  802534:	10000426 	beq	r2,zero,802548 <logic+0x1db8>
    d->_heart2_local__Atrig3 = 0;
  802538:	e0bffc17 	ldw	r2,-16(fp)
  80253c:	10001b05 	stb	zero,108(r2)
    d->_heart2_local__Atrig4 = 0;
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10001b45 	stb	zero,109(r2)
  }
  d->_cg41 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802548:	e0bffc17 	ldw	r2,-16(fp)
  80254c:	10801b03 	ldbu	r2,108(r2)
  802550:	10803fcc 	andi	r2,r2,255
  802554:	1080201c 	xori	r2,r2,128
  802558:	10bfe004 	addi	r2,r2,-128
  80255c:	1000061e 	bne	r2,zero,802578 <logic+0x1de8>
  802560:	e0bffc17 	ldw	r2,-16(fp)
  802564:	10801b43 	ldbu	r2,109(r2)
  802568:	10803fcc 	andi	r2,r2,255
  80256c:	1080201c 	xori	r2,r2,128
  802570:	10bfe004 	addi	r2,r2,-128
  802574:	10000226 	beq	r2,zero,802580 <logic+0x1df0>
  802578:	00800044 	movi	r2,1
  80257c:	00000106 	br	802584 <logic+0x1df4>
  802580:	0005883a 	mov	r2,zero
  802584:	1007883a 	mov	r3,r2
  802588:	e0bffc17 	ldw	r2,-16(fp)
  80258c:	10c04905 	stb	r3,292(r2)
  d->_g44_e1 = d->_g60_e3 && !d->_cg41 || d->_g34 && !d->_cg43;
  802590:	e0bffc17 	ldw	r2,-16(fp)
  802594:	10805dc3 	ldbu	r2,375(r2)
  802598:	10803fcc 	andi	r2,r2,255
  80259c:	1080201c 	xori	r2,r2,128
  8025a0:	10bfe004 	addi	r2,r2,-128
  8025a4:	10000626 	beq	r2,zero,8025c0 <logic+0x1e30>
  8025a8:	e0bffc17 	ldw	r2,-16(fp)
  8025ac:	10804903 	ldbu	r2,292(r2)
  8025b0:	10803fcc 	andi	r2,r2,255
  8025b4:	1080201c 	xori	r2,r2,128
  8025b8:	10bfe004 	addi	r2,r2,-128
  8025bc:	10000c26 	beq	r2,zero,8025f0 <logic+0x1e60>
  8025c0:	e0bffc17 	ldw	r2,-16(fp)
  8025c4:	10802443 	ldbu	r2,145(r2)
  8025c8:	10803fcc 	andi	r2,r2,255
  8025cc:	1080201c 	xori	r2,r2,128
  8025d0:	10bfe004 	addi	r2,r2,-128
  8025d4:	10000826 	beq	r2,zero,8025f8 <logic+0x1e68>
  8025d8:	e0bffc17 	ldw	r2,-16(fp)
  8025dc:	10804943 	ldbu	r2,293(r2)
  8025e0:	10803fcc 	andi	r2,r2,255
  8025e4:	1080201c 	xori	r2,r2,128
  8025e8:	10bfe004 	addi	r2,r2,-128
  8025ec:	1000021e 	bne	r2,zero,8025f8 <logic+0x1e68>
  8025f0:	00800044 	movi	r2,1
  8025f4:	00000106 	br	8025fc <logic+0x1e6c>
  8025f8:	0005883a 	mov	r2,zero
  8025fc:	1007883a 	mov	r3,r2
  802600:	e0bffc17 	ldw	r2,-16(fp)
  802604:	10c05d45 	stb	r3,373(r2)
  d->_cg45 = d->_region1_null_LRI < d->LRI_time;
  802608:	e0bffc17 	ldw	r2,-16(fp)
  80260c:	14000917 	ldw	r16,36(r2)
  802610:	14400a17 	ldw	r17,40(r2)
  802614:	e0bffc17 	ldw	r2,-16(fp)
  802618:	10800317 	ldw	r2,12(r2)
  80261c:	1009883a 	mov	r4,r2
  802620:	0808c3c0 	call	808c3c <__floatsidf>
  802624:	1009883a 	mov	r4,r2
  802628:	180b883a 	mov	r5,r3
  80262c:	04800044 	movi	r18,1
  802630:	200d883a 	mov	r6,r4
  802634:	280f883a 	mov	r7,r5
  802638:	8009883a 	mov	r4,r16
  80263c:	880b883a 	mov	r5,r17
  802640:	080824c0 	call	80824c <__ledf2>
  802644:	10000116 	blt	r2,zero,80264c <logic+0x1ebc>
  802648:	0025883a 	mov	r18,zero
  80264c:	9007883a 	mov	r3,r18
  802650:	e0bffc17 	ldw	r2,-16(fp)
  802654:	10c04985 	stb	r3,294(r2)
  d->_g44 = d->_g60_e3 && d->_cg45;
  802658:	e0bffc17 	ldw	r2,-16(fp)
  80265c:	10805dc3 	ldbu	r2,375(r2)
  802660:	10803fcc 	andi	r2,r2,255
  802664:	1080201c 	xori	r2,r2,128
  802668:	10bfe004 	addi	r2,r2,-128
  80266c:	10000826 	beq	r2,zero,802690 <logic+0x1f00>
  802670:	e0bffc17 	ldw	r2,-16(fp)
  802674:	10804983 	ldbu	r2,294(r2)
  802678:	10803fcc 	andi	r2,r2,255
  80267c:	1080201c 	xori	r2,r2,128
  802680:	10bfe004 	addi	r2,r2,-128
  802684:	10000226 	beq	r2,zero,802690 <logic+0x1f00>
  802688:	00800044 	movi	r2,1
  80268c:	00000106 	br	802694 <logic+0x1f04>
  802690:	0005883a 	mov	r2,zero
  802694:	1007883a 	mov	r3,r2
  802698:	e0bffc17 	ldw	r2,-16(fp)
  80269c:	10c025c5 	stb	r3,151(r2)
  if (d->_g44) {
  8026a0:	e0bffc17 	ldw	r2,-16(fp)
  8026a4:	108025c3 	ldbu	r2,151(r2)
  8026a8:	10803fcc 	andi	r2,r2,255
  8026ac:	1080201c 	xori	r2,r2,128
  8026b0:	10bfe004 	addi	r2,r2,-128
  8026b4:	10003426 	beq	r2,zero,802788 <logic+0x1ff8>
    d->sleepT = (d->sleepT < (d->LRI_time - d->_region1_null_LRI)) ? d->sleepT : (d->LRI_time - d->_region1_null_LRI);
  8026b8:	e0bffc17 	ldw	r2,-16(fp)
  8026bc:	14001517 	ldw	r16,84(r2)
  8026c0:	14401617 	ldw	r17,88(r2)
  8026c4:	e0bffc17 	ldw	r2,-16(fp)
  8026c8:	10800317 	ldw	r2,12(r2)
  8026cc:	1009883a 	mov	r4,r2
  8026d0:	0808c3c0 	call	808c3c <__floatsidf>
  8026d4:	1011883a 	mov	r8,r2
  8026d8:	1813883a 	mov	r9,r3
  8026dc:	e13ffc17 	ldw	r4,-16(fp)
  8026e0:	20800917 	ldw	r2,36(r4)
  8026e4:	20c00a17 	ldw	r3,40(r4)
  8026e8:	100d883a 	mov	r6,r2
  8026ec:	180f883a 	mov	r7,r3
  8026f0:	4009883a 	mov	r4,r8
  8026f4:	480b883a 	mov	r5,r9
  8026f8:	08083400 	call	808340 <__subdf3>
  8026fc:	1009883a 	mov	r4,r2
  802700:	180b883a 	mov	r5,r3
  802704:	2005883a 	mov	r2,r4
  802708:	2807883a 	mov	r3,r5
  80270c:	100d883a 	mov	r6,r2
  802710:	180f883a 	mov	r7,r3
  802714:	8009883a 	mov	r4,r16
  802718:	880b883a 	mov	r5,r17
  80271c:	080824c0 	call	80824c <__ledf2>
  802720:	1000040e 	bge	r2,zero,802734 <logic+0x1fa4>
  802724:	e13ffc17 	ldw	r4,-16(fp)
  802728:	20801517 	ldw	r2,84(r4)
  80272c:	20c01617 	ldw	r3,88(r4)
  802730:	00001206 	br	80277c <logic+0x1fec>
  802734:	e0bffc17 	ldw	r2,-16(fp)
  802738:	10800317 	ldw	r2,12(r2)
  80273c:	1009883a 	mov	r4,r2
  802740:	0808c3c0 	call	808c3c <__floatsidf>
  802744:	1011883a 	mov	r8,r2
  802748:	1813883a 	mov	r9,r3
  80274c:	e13ffc17 	ldw	r4,-16(fp)
  802750:	20800917 	ldw	r2,36(r4)
  802754:	20c00a17 	ldw	r3,40(r4)
  802758:	100d883a 	mov	r6,r2
  80275c:	180f883a 	mov	r7,r3
  802760:	4009883a 	mov	r4,r8
  802764:	480b883a 	mov	r5,r9
  802768:	08083400 	call	808340 <__subdf3>
  80276c:	1009883a 	mov	r4,r2
  802770:	180b883a 	mov	r5,r3
  802774:	2005883a 	mov	r2,r4
  802778:	2807883a 	mov	r3,r5
  80277c:	e13ffc17 	ldw	r4,-16(fp)
  802780:	20801515 	stw	r2,84(r4)
  802784:	20c01615 	stw	r3,88(r4)
  }
  d->_cg46 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802788:	e0bffc17 	ldw	r2,-16(fp)
  80278c:	10801b03 	ldbu	r2,108(r2)
  802790:	10803fcc 	andi	r2,r2,255
  802794:	1080201c 	xori	r2,r2,128
  802798:	10bfe004 	addi	r2,r2,-128
  80279c:	1000061e 	bne	r2,zero,8027b8 <logic+0x2028>
  8027a0:	e0bffc17 	ldw	r2,-16(fp)
  8027a4:	10801b43 	ldbu	r2,109(r2)
  8027a8:	10803fcc 	andi	r2,r2,255
  8027ac:	1080201c 	xori	r2,r2,128
  8027b0:	10bfe004 	addi	r2,r2,-128
  8027b4:	10000226 	beq	r2,zero,8027c0 <logic+0x2030>
  8027b8:	00800044 	movi	r2,1
  8027bc:	00000106 	br	8027c4 <logic+0x2034>
  8027c0:	0005883a 	mov	r2,zero
  8027c4:	1007883a 	mov	r3,r2
  8027c8:	e0bffc17 	ldw	r2,-16(fp)
  8027cc:	10c049c5 	stb	r3,295(r2)
  d->_g51_e2 = d->_g44 && !d->_cg46 || d->_g54 && !d->_cg50;
  8027d0:	e0bffc17 	ldw	r2,-16(fp)
  8027d4:	108025c3 	ldbu	r2,151(r2)
  8027d8:	10803fcc 	andi	r2,r2,255
  8027dc:	1080201c 	xori	r2,r2,128
  8027e0:	10bfe004 	addi	r2,r2,-128
  8027e4:	10000626 	beq	r2,zero,802800 <logic+0x2070>
  8027e8:	e0bffc17 	ldw	r2,-16(fp)
  8027ec:	108049c3 	ldbu	r2,295(r2)
  8027f0:	10803fcc 	andi	r2,r2,255
  8027f4:	1080201c 	xori	r2,r2,128
  8027f8:	10bfe004 	addi	r2,r2,-128
  8027fc:	10000c26 	beq	r2,zero,802830 <logic+0x20a0>
  802800:	e0bffc17 	ldw	r2,-16(fp)
  802804:	10802783 	ldbu	r2,158(r2)
  802808:	10803fcc 	andi	r2,r2,255
  80280c:	1080201c 	xori	r2,r2,128
  802810:	10bfe004 	addi	r2,r2,-128
  802814:	10000826 	beq	r2,zero,802838 <logic+0x20a8>
  802818:	e0bffc17 	ldw	r2,-16(fp)
  80281c:	10804a03 	ldbu	r2,296(r2)
  802820:	10803fcc 	andi	r2,r2,255
  802824:	1080201c 	xori	r2,r2,128
  802828:	10bfe004 	addi	r2,r2,-128
  80282c:	1000021e 	bne	r2,zero,802838 <logic+0x20a8>
  802830:	00800044 	movi	r2,1
  802834:	00000106 	br	80283c <logic+0x20ac>
  802838:	0005883a 	mov	r2,zero
  80283c:	1007883a 	mov	r3,r2
  802840:	e0bffc17 	ldw	r2,-16(fp)
  802844:	10c05d85 	stb	r3,374(r2)
  d->_g60 = d->_g60_e3 && !d->_cg45;
  802848:	e0bffc17 	ldw	r2,-16(fp)
  80284c:	10805dc3 	ldbu	r2,375(r2)
  802850:	10803fcc 	andi	r2,r2,255
  802854:	1080201c 	xori	r2,r2,128
  802858:	10bfe004 	addi	r2,r2,-128
  80285c:	10000826 	beq	r2,zero,802880 <logic+0x20f0>
  802860:	e0bffc17 	ldw	r2,-16(fp)
  802864:	10804983 	ldbu	r2,294(r2)
  802868:	10803fcc 	andi	r2,r2,255
  80286c:	1080201c 	xori	r2,r2,128
  802870:	10bfe004 	addi	r2,r2,-128
  802874:	1000021e 	bne	r2,zero,802880 <logic+0x20f0>
  802878:	00800044 	movi	r2,1
  80287c:	00000106 	br	802884 <logic+0x20f4>
  802880:	0005883a 	mov	r2,zero
  802884:	1007883a 	mov	r3,r2
  802888:	e0bffc17 	ldw	r2,-16(fp)
  80288c:	10c02885 	stb	r3,162(r2)
  d->_cg55 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802890:	e0bffc17 	ldw	r2,-16(fp)
  802894:	10801b03 	ldbu	r2,108(r2)
  802898:	10803fcc 	andi	r2,r2,255
  80289c:	1080201c 	xori	r2,r2,128
  8028a0:	10bfe004 	addi	r2,r2,-128
  8028a4:	1000061e 	bne	r2,zero,8028c0 <logic+0x2130>
  8028a8:	e0bffc17 	ldw	r2,-16(fp)
  8028ac:	10801b43 	ldbu	r2,109(r2)
  8028b0:	10803fcc 	andi	r2,r2,255
  8028b4:	1080201c 	xori	r2,r2,128
  8028b8:	10bfe004 	addi	r2,r2,-128
  8028bc:	10000226 	beq	r2,zero,8028c8 <logic+0x2138>
  8028c0:	00800044 	movi	r2,1
  8028c4:	00000106 	br	8028cc <logic+0x213c>
  8028c8:	0005883a 	mov	r2,zero
  8028cc:	1007883a 	mov	r3,r2
  8028d0:	e0bffc17 	ldw	r2,-16(fp)
  8028d4:	10c04ac5 	stb	r3,299(r2)
  d->_g73 = d->_g49 && !d->_cg52 || d->_g60 && !d->_cg55;
  8028d8:	e0bffc17 	ldw	r2,-16(fp)
  8028dc:	10802683 	ldbu	r2,154(r2)
  8028e0:	10803fcc 	andi	r2,r2,255
  8028e4:	1080201c 	xori	r2,r2,128
  8028e8:	10bfe004 	addi	r2,r2,-128
  8028ec:	10000626 	beq	r2,zero,802908 <logic+0x2178>
  8028f0:	e0bffc17 	ldw	r2,-16(fp)
  8028f4:	10804a83 	ldbu	r2,298(r2)
  8028f8:	10803fcc 	andi	r2,r2,255
  8028fc:	1080201c 	xori	r2,r2,128
  802900:	10bfe004 	addi	r2,r2,-128
  802904:	10000c26 	beq	r2,zero,802938 <logic+0x21a8>
  802908:	e0bffc17 	ldw	r2,-16(fp)
  80290c:	10802883 	ldbu	r2,162(r2)
  802910:	10803fcc 	andi	r2,r2,255
  802914:	1080201c 	xori	r2,r2,128
  802918:	10bfe004 	addi	r2,r2,-128
  80291c:	10000826 	beq	r2,zero,802940 <logic+0x21b0>
  802920:	e0bffc17 	ldw	r2,-16(fp)
  802924:	10804ac3 	ldbu	r2,299(r2)
  802928:	10803fcc 	andi	r2,r2,255
  80292c:	1080201c 	xori	r2,r2,128
  802930:	10bfe004 	addi	r2,r2,-128
  802934:	1000021e 	bne	r2,zero,802940 <logic+0x21b0>
  802938:	00800044 	movi	r2,1
  80293c:	00000106 	br	802944 <logic+0x21b4>
  802940:	0005883a 	mov	r2,zero
  802944:	1007883a 	mov	r3,r2
  802948:	e0bffc17 	ldw	r2,-16(fp)
  80294c:	10c02ac5 	stb	r3,171(r2)
  d->_g74 = d->_g60_e3 || d->_g72 && !d->_cg61;
  802950:	e0bffc17 	ldw	r2,-16(fp)
  802954:	10805dc3 	ldbu	r2,375(r2)
  802958:	10803fcc 	andi	r2,r2,255
  80295c:	1080201c 	xori	r2,r2,128
  802960:	10bfe004 	addi	r2,r2,-128
  802964:	10000c1e 	bne	r2,zero,802998 <logic+0x2208>
  802968:	e0bffc17 	ldw	r2,-16(fp)
  80296c:	10802a83 	ldbu	r2,170(r2)
  802970:	10803fcc 	andi	r2,r2,255
  802974:	1080201c 	xori	r2,r2,128
  802978:	10bfe004 	addi	r2,r2,-128
  80297c:	10000826 	beq	r2,zero,8029a0 <logic+0x2210>
  802980:	e0bffc17 	ldw	r2,-16(fp)
  802984:	10804b03 	ldbu	r2,300(r2)
  802988:	10803fcc 	andi	r2,r2,255
  80298c:	1080201c 	xori	r2,r2,128
  802990:	10bfe004 	addi	r2,r2,-128
  802994:	1000021e 	bne	r2,zero,8029a0 <logic+0x2210>
  802998:	00800044 	movi	r2,1
  80299c:	00000106 	br	8029a4 <logic+0x2214>
  8029a0:	0005883a 	mov	r2,zero
  8029a4:	1007883a 	mov	r3,r2
  8029a8:	e0bffc17 	ldw	r2,-16(fp)
  8029ac:	10c02b05 	stb	r3,172(r2)
  d->_g43 = d->_g59 && d->_cg63;
  8029b0:	e0bffc17 	ldw	r2,-16(fp)
  8029b4:	10802843 	ldbu	r2,161(r2)
  8029b8:	10803fcc 	andi	r2,r2,255
  8029bc:	1080201c 	xori	r2,r2,128
  8029c0:	10bfe004 	addi	r2,r2,-128
  8029c4:	10000826 	beq	r2,zero,8029e8 <logic+0x2258>
  8029c8:	e0bffc17 	ldw	r2,-16(fp)
  8029cc:	10804b83 	ldbu	r2,302(r2)
  8029d0:	10803fcc 	andi	r2,r2,255
  8029d4:	1080201c 	xori	r2,r2,128
  8029d8:	10bfe004 	addi	r2,r2,-128
  8029dc:	10000226 	beq	r2,zero,8029e8 <logic+0x2258>
  8029e0:	00800044 	movi	r2,1
  8029e4:	00000106 	br	8029ec <logic+0x225c>
  8029e8:	0005883a 	mov	r2,zero
  8029ec:	1007883a 	mov	r3,r2
  8029f0:	e0bffc17 	ldw	r2,-16(fp)
  8029f4:	10c02585 	stb	r3,150(r2)
  if (d->_g43) {
  8029f8:	e0bffc17 	ldw	r2,-16(fp)
  8029fc:	10802583 	ldbu	r2,150(r2)
  802a00:	10803fcc 	andi	r2,r2,255
  802a04:	1080201c 	xori	r2,r2,128
  802a08:	10bfe004 	addi	r2,r2,-128
  802a0c:	10000826 	beq	r2,zero,802a30 <logic+0x22a0>
    d->VP |= 1;
  802a10:	e0bffc17 	ldw	r2,-16(fp)
  802a14:	108017c3 	ldbu	r2,95(r2)
  802a18:	10800054 	ori	r2,r2,1
  802a1c:	1007883a 	mov	r3,r2
  802a20:	e0bffc17 	ldw	r2,-16(fp)
  802a24:	10c017c5 	stb	r3,95(r2)
    d->_heart2_local__Atrig5 = 0;
  802a28:	e0bffc17 	ldw	r2,-16(fp)
  802a2c:	10001b85 	stb	zero,110(r2)
  }
  d->_cg65 = d->_heart2_local__Atrig5;
  802a30:	e0bffc17 	ldw	r2,-16(fp)
  802a34:	10c01b83 	ldbu	r3,110(r2)
  802a38:	e0bffc17 	ldw	r2,-16(fp)
  802a3c:	10c04bc5 	stb	r3,303(r2)
  d->_g46 = d->_g43 && !d->_cg65 || d->_g15 && !d->_cg67;
  802a40:	e0bffc17 	ldw	r2,-16(fp)
  802a44:	10802583 	ldbu	r2,150(r2)
  802a48:	10803fcc 	andi	r2,r2,255
  802a4c:	1080201c 	xori	r2,r2,128
  802a50:	10bfe004 	addi	r2,r2,-128
  802a54:	10000626 	beq	r2,zero,802a70 <logic+0x22e0>
  802a58:	e0bffc17 	ldw	r2,-16(fp)
  802a5c:	10804bc3 	ldbu	r2,303(r2)
  802a60:	10803fcc 	andi	r2,r2,255
  802a64:	1080201c 	xori	r2,r2,128
  802a68:	10bfe004 	addi	r2,r2,-128
  802a6c:	10000c26 	beq	r2,zero,802aa0 <logic+0x2310>
  802a70:	e0bffc17 	ldw	r2,-16(fp)
  802a74:	10802143 	ldbu	r2,133(r2)
  802a78:	10803fcc 	andi	r2,r2,255
  802a7c:	1080201c 	xori	r2,r2,128
  802a80:	10bfe004 	addi	r2,r2,-128
  802a84:	10000826 	beq	r2,zero,802aa8 <logic+0x2318>
  802a88:	e0bffc17 	ldw	r2,-16(fp)
  802a8c:	10804c03 	ldbu	r2,304(r2)
  802a90:	10803fcc 	andi	r2,r2,255
  802a94:	1080201c 	xori	r2,r2,128
  802a98:	10bfe004 	addi	r2,r2,-128
  802a9c:	1000021e 	bne	r2,zero,802aa8 <logic+0x2318>
  802aa0:	00800044 	movi	r2,1
  802aa4:	00000106 	br	802aac <logic+0x231c>
  802aa8:	0005883a 	mov	r2,zero
  802aac:	1007883a 	mov	r3,r2
  802ab0:	e0bffc17 	ldw	r2,-16(fp)
  802ab4:	10c02605 	stb	r3,152(r2)
  d->_g50 = d->_g43 || d->_g24 && !d->_cg71;
  802ab8:	e0bffc17 	ldw	r2,-16(fp)
  802abc:	10802583 	ldbu	r2,150(r2)
  802ac0:	10803fcc 	andi	r2,r2,255
  802ac4:	1080201c 	xori	r2,r2,128
  802ac8:	10bfe004 	addi	r2,r2,-128
  802acc:	10000c1e 	bne	r2,zero,802b00 <logic+0x2370>
  802ad0:	e0bffc17 	ldw	r2,-16(fp)
  802ad4:	108022c3 	ldbu	r2,139(r2)
  802ad8:	10803fcc 	andi	r2,r2,255
  802adc:	1080201c 	xori	r2,r2,128
  802ae0:	10bfe004 	addi	r2,r2,-128
  802ae4:	10000826 	beq	r2,zero,802b08 <logic+0x2378>
  802ae8:	e0bffc17 	ldw	r2,-16(fp)
  802aec:	10804c43 	ldbu	r2,305(r2)
  802af0:	10803fcc 	andi	r2,r2,255
  802af4:	1080201c 	xori	r2,r2,128
  802af8:	10bfe004 	addi	r2,r2,-128
  802afc:	1000021e 	bne	r2,zero,802b08 <logic+0x2378>
  802b00:	00800044 	movi	r2,1
  802b04:	00000106 	br	802b0c <logic+0x237c>
  802b08:	0005883a 	mov	r2,zero
  802b0c:	1007883a 	mov	r3,r2
  802b10:	e0bffc17 	ldw	r2,-16(fp)
  802b14:	10c026c5 	stb	r3,155(r2)
  d->_g55 = d->_pg83;
  802b18:	e0bffc17 	ldw	r2,-16(fp)
  802b1c:	10c06703 	ldbu	r3,412(r2)
  802b20:	e0bffc17 	ldw	r2,-16(fp)
  802b24:	10c027c5 	stb	r3,159(r2)
  if (d->_g55) {
  802b28:	e0bffc17 	ldw	r2,-16(fp)
  802b2c:	108027c3 	ldbu	r2,159(r2)
  802b30:	10803fcc 	andi	r2,r2,255
  802b34:	1080201c 	xori	r2,r2,128
  802b38:	10bfe004 	addi	r2,r2,-128
  802b3c:	10001226 	beq	r2,zero,802b88 <logic+0x23f8>
    d->_region2_null_VRP += d->deltaT;
  802b40:	e13ffc17 	ldw	r4,-16(fp)
  802b44:	20800b17 	ldw	r2,44(r4)
  802b48:	20c00c17 	ldw	r3,48(r4)
  802b4c:	e1bffc17 	ldw	r6,-16(fp)
  802b50:	31001317 	ldw	r4,76(r6)
  802b54:	31401417 	ldw	r5,80(r6)
  802b58:	200d883a 	mov	r6,r4
  802b5c:	280f883a 	mov	r7,r5
  802b60:	1009883a 	mov	r4,r2
  802b64:	180b883a 	mov	r5,r3
  802b68:	08078c40 	call	8078c4 <__adddf3>
  802b6c:	1009883a 	mov	r4,r2
  802b70:	180b883a 	mov	r5,r3
  802b74:	2005883a 	mov	r2,r4
  802b78:	2807883a 	mov	r3,r5
  802b7c:	e13ffc17 	ldw	r4,-16(fp)
  802b80:	20800b15 	stw	r2,44(r4)
  802b84:	20c00c15 	stw	r3,48(r4)
  }
  d->_g52 = !d->_g55;
  802b88:	e0bffc17 	ldw	r2,-16(fp)
  802b8c:	108027c3 	ldbu	r2,159(r2)
  802b90:	10803fcc 	andi	r2,r2,255
  802b94:	1080201c 	xori	r2,r2,128
  802b98:	10bfe004 	addi	r2,r2,-128
  802b9c:	1005003a 	cmpeq	r2,r2,zero
  802ba0:	1007883a 	mov	r3,r2
  802ba4:	e0bffc17 	ldw	r2,-16(fp)
  802ba8:	10c02745 	stb	r3,157(r2)
  d->_g40 = d->_pg89;
  802bac:	e0bffc17 	ldw	r2,-16(fp)
  802bb0:	10c06743 	ldbu	r3,413(r2)
  802bb4:	e0bffc17 	ldw	r2,-16(fp)
  802bb8:	10c02545 	stb	r3,149(r2)
  d->_cg108 = d->v;
  802bbc:	e0bffc17 	ldw	r2,-16(fp)
  802bc0:	10c018c3 	ldbu	r3,99(r2)
  802bc4:	e0bffc17 	ldw	r2,-16(fp)
  802bc8:	10c05005 	stb	r3,320(r2)
  d->_g61 = d->_g40 && d->_cg108;
  802bcc:	e0bffc17 	ldw	r2,-16(fp)
  802bd0:	10802543 	ldbu	r2,149(r2)
  802bd4:	10803fcc 	andi	r2,r2,255
  802bd8:	1080201c 	xori	r2,r2,128
  802bdc:	10bfe004 	addi	r2,r2,-128
  802be0:	10000826 	beq	r2,zero,802c04 <logic+0x2474>
  802be4:	e0bffc17 	ldw	r2,-16(fp)
  802be8:	10805003 	ldbu	r2,320(r2)
  802bec:	10803fcc 	andi	r2,r2,255
  802bf0:	1080201c 	xori	r2,r2,128
  802bf4:	10bfe004 	addi	r2,r2,-128
  802bf8:	10000226 	beq	r2,zero,802c04 <logic+0x2474>
  802bfc:	00800044 	movi	r2,1
  802c00:	00000106 	br	802c08 <logic+0x2478>
  802c04:	0005883a 	mov	r2,zero
  802c08:	1007883a 	mov	r3,r2
  802c0c:	e0bffc17 	ldw	r2,-16(fp)
  802c10:	10c028c5 	stb	r3,163(r2)
  if (d->_g61) {
  802c14:	e0bffc17 	ldw	r2,-16(fp)
  802c18:	108028c3 	ldbu	r2,163(r2)
  802c1c:	10803fcc 	andi	r2,r2,255
  802c20:	1080201c 	xori	r2,r2,128
  802c24:	10bfe004 	addi	r2,r2,-128
  802c28:	10000326 	beq	r2,zero,802c38 <logic+0x24a8>
    d->_heart2_local__Atrig8 = 1;
  802c2c:	e0bffc17 	ldw	r2,-16(fp)
  802c30:	00c00044 	movi	r3,1
  802c34:	10c01c45 	stb	r3,113(r2)
  }
  d->_g63 = d->_g40 && !d->_cg108;
  802c38:	e0bffc17 	ldw	r2,-16(fp)
  802c3c:	10802543 	ldbu	r2,149(r2)
  802c40:	10803fcc 	andi	r2,r2,255
  802c44:	1080201c 	xori	r2,r2,128
  802c48:	10bfe004 	addi	r2,r2,-128
  802c4c:	10000826 	beq	r2,zero,802c70 <logic+0x24e0>
  802c50:	e0bffc17 	ldw	r2,-16(fp)
  802c54:	10805003 	ldbu	r2,320(r2)
  802c58:	10803fcc 	andi	r2,r2,255
  802c5c:	1080201c 	xori	r2,r2,128
  802c60:	10bfe004 	addi	r2,r2,-128
  802c64:	1000021e 	bne	r2,zero,802c70 <logic+0x24e0>
  802c68:	00800044 	movi	r2,1
  802c6c:	00000106 	br	802c74 <logic+0x24e4>
  802c70:	0005883a 	mov	r2,zero
  802c74:	1007883a 	mov	r3,r2
  802c78:	e0bffc17 	ldw	r2,-16(fp)
  802c7c:	10c02945 	stb	r3,165(r2)
  d->_g67 = d->_g63 && d->VS;
  802c80:	e0bffc17 	ldw	r2,-16(fp)
  802c84:	10802943 	ldbu	r2,165(r2)
  802c88:	10803fcc 	andi	r2,r2,255
  802c8c:	1080201c 	xori	r2,r2,128
  802c90:	10bfe004 	addi	r2,r2,-128
  802c94:	10000826 	beq	r2,zero,802cb8 <logic+0x2528>
  802c98:	e0bffc17 	ldw	r2,-16(fp)
  802c9c:	10801743 	ldbu	r2,93(r2)
  802ca0:	10803fcc 	andi	r2,r2,255
  802ca4:	1080201c 	xori	r2,r2,128
  802ca8:	10bfe004 	addi	r2,r2,-128
  802cac:	10000226 	beq	r2,zero,802cb8 <logic+0x2528>
  802cb0:	00800044 	movi	r2,1
  802cb4:	00000106 	br	802cbc <logic+0x252c>
  802cb8:	0005883a 	mov	r2,zero
  802cbc:	1007883a 	mov	r3,r2
  802cc0:	e0bffc17 	ldw	r2,-16(fp)
  802cc4:	10c029c5 	stb	r3,167(r2)
  if (d->_g67) {
  802cc8:	e0bffc17 	ldw	r2,-16(fp)
  802ccc:	108029c3 	ldbu	r2,167(r2)
  802cd0:	10803fcc 	andi	r2,r2,255
  802cd4:	1080201c 	xori	r2,r2,128
  802cd8:	10bfe004 	addi	r2,r2,-128
  802cdc:	10000326 	beq	r2,zero,802cec <logic+0x255c>
    d->_heart2_local__Atrig9 = 1;
  802ce0:	e0bffc17 	ldw	r2,-16(fp)
  802ce4:	00c00044 	movi	r3,1
  802ce8:	10c01c85 	stb	r3,114(r2)
  }
  d->_cg104 = d->_heart2_local__Atrig8 || d->_heart2_local__Atrig9;
  802cec:	e0bffc17 	ldw	r2,-16(fp)
  802cf0:	10801c43 	ldbu	r2,113(r2)
  802cf4:	10803fcc 	andi	r2,r2,255
  802cf8:	1080201c 	xori	r2,r2,128
  802cfc:	10bfe004 	addi	r2,r2,-128
  802d00:	1000061e 	bne	r2,zero,802d1c <logic+0x258c>
  802d04:	e0bffc17 	ldw	r2,-16(fp)
  802d08:	10801c83 	ldbu	r2,114(r2)
  802d0c:	10803fcc 	andi	r2,r2,255
  802d10:	1080201c 	xori	r2,r2,128
  802d14:	10bfe004 	addi	r2,r2,-128
  802d18:	10000226 	beq	r2,zero,802d24 <logic+0x2594>
  802d1c:	00800044 	movi	r2,1
  802d20:	00000106 	br	802d28 <logic+0x2598>
  802d24:	0005883a 	mov	r2,zero
  802d28:	1007883a 	mov	r3,r2
  802d2c:	e0bffc17 	ldw	r2,-16(fp)
  802d30:	10c04f85 	stb	r3,318(r2)
  d->_g64 = d->_g55 && d->_cg104;
  802d34:	e0bffc17 	ldw	r2,-16(fp)
  802d38:	108027c3 	ldbu	r2,159(r2)
  802d3c:	10803fcc 	andi	r2,r2,255
  802d40:	1080201c 	xori	r2,r2,128
  802d44:	10bfe004 	addi	r2,r2,-128
  802d48:	10000826 	beq	r2,zero,802d6c <logic+0x25dc>
  802d4c:	e0bffc17 	ldw	r2,-16(fp)
  802d50:	10804f83 	ldbu	r2,318(r2)
  802d54:	10803fcc 	andi	r2,r2,255
  802d58:	1080201c 	xori	r2,r2,128
  802d5c:	10bfe004 	addi	r2,r2,-128
  802d60:	10000226 	beq	r2,zero,802d6c <logic+0x25dc>
  802d64:	00800044 	movi	r2,1
  802d68:	00000106 	br	802d70 <logic+0x25e0>
  802d6c:	0005883a 	mov	r2,zero
  802d70:	1007883a 	mov	r3,r2
  802d74:	e0bffc17 	ldw	r2,-16(fp)
  802d78:	10c02985 	stb	r3,166(r2)
  d->_g71 = !d->_g40;
  802d7c:	e0bffc17 	ldw	r2,-16(fp)
  802d80:	10802543 	ldbu	r2,149(r2)
  802d84:	10803fcc 	andi	r2,r2,255
  802d88:	1080201c 	xori	r2,r2,128
  802d8c:	10bfe004 	addi	r2,r2,-128
  802d90:	1005003a 	cmpeq	r2,r2,zero
  802d94:	1007883a 	mov	r3,r2
  802d98:	e0bffc17 	ldw	r2,-16(fp)
  802d9c:	10c02a45 	stb	r3,169(r2)
  d->_g108 = d->_g61 || d->_g67;
  802da0:	e0bffc17 	ldw	r2,-16(fp)
  802da4:	108028c3 	ldbu	r2,163(r2)
  802da8:	10803fcc 	andi	r2,r2,255
  802dac:	1080201c 	xori	r2,r2,128
  802db0:	10bfe004 	addi	r2,r2,-128
  802db4:	1000061e 	bne	r2,zero,802dd0 <logic+0x2640>
  802db8:	e0bffc17 	ldw	r2,-16(fp)
  802dbc:	108029c3 	ldbu	r2,167(r2)
  802dc0:	10803fcc 	andi	r2,r2,255
  802dc4:	1080201c 	xori	r2,r2,128
  802dc8:	10bfe004 	addi	r2,r2,-128
  802dcc:	10000226 	beq	r2,zero,802dd8 <logic+0x2648>
  802dd0:	00800044 	movi	r2,1
  802dd4:	00000106 	br	802ddc <logic+0x264c>
  802dd8:	0005883a 	mov	r2,zero
  802ddc:	1007883a 	mov	r3,r2
  802de0:	e0bffc17 	ldw	r2,-16(fp)
  802de4:	10c03045 	stb	r3,193(r2)
  d->_g112 = (d->_g52 || d->_g64) && (d->_g71 || d->_g108) && (d->_g64 || d->_g108);
  802de8:	e0bffc17 	ldw	r2,-16(fp)
  802dec:	10802743 	ldbu	r2,157(r2)
  802df0:	10803fcc 	andi	r2,r2,255
  802df4:	1080201c 	xori	r2,r2,128
  802df8:	10bfe004 	addi	r2,r2,-128
  802dfc:	1000061e 	bne	r2,zero,802e18 <logic+0x2688>
  802e00:	e0bffc17 	ldw	r2,-16(fp)
  802e04:	10802983 	ldbu	r2,166(r2)
  802e08:	10803fcc 	andi	r2,r2,255
  802e0c:	1080201c 	xori	r2,r2,128
  802e10:	10bfe004 	addi	r2,r2,-128
  802e14:	10001a26 	beq	r2,zero,802e80 <logic+0x26f0>
  802e18:	e0bffc17 	ldw	r2,-16(fp)
  802e1c:	10802a43 	ldbu	r2,169(r2)
  802e20:	10803fcc 	andi	r2,r2,255
  802e24:	1080201c 	xori	r2,r2,128
  802e28:	10bfe004 	addi	r2,r2,-128
  802e2c:	1000061e 	bne	r2,zero,802e48 <logic+0x26b8>
  802e30:	e0bffc17 	ldw	r2,-16(fp)
  802e34:	10803043 	ldbu	r2,193(r2)
  802e38:	10803fcc 	andi	r2,r2,255
  802e3c:	1080201c 	xori	r2,r2,128
  802e40:	10bfe004 	addi	r2,r2,-128
  802e44:	10000e26 	beq	r2,zero,802e80 <logic+0x26f0>
  802e48:	e0bffc17 	ldw	r2,-16(fp)
  802e4c:	10802983 	ldbu	r2,166(r2)
  802e50:	10803fcc 	andi	r2,r2,255
  802e54:	1080201c 	xori	r2,r2,128
  802e58:	10bfe004 	addi	r2,r2,-128
  802e5c:	1000061e 	bne	r2,zero,802e78 <logic+0x26e8>
  802e60:	e0bffc17 	ldw	r2,-16(fp)
  802e64:	10803043 	ldbu	r2,193(r2)
  802e68:	10803fcc 	andi	r2,r2,255
  802e6c:	1080201c 	xori	r2,r2,128
  802e70:	10bfe004 	addi	r2,r2,-128
  802e74:	10000226 	beq	r2,zero,802e80 <logic+0x26f0>
  802e78:	00800044 	movi	r2,1
  802e7c:	00000106 	br	802e84 <logic+0x26f4>
  802e80:	0005883a 	mov	r2,zero
  802e84:	1007883a 	mov	r3,r2
  802e88:	e0bffc17 	ldw	r2,-16(fp)
  802e8c:	10c03145 	stb	r3,197(r2)
  d->_cg113 = d->_heart2_local__Atrig8;
  802e90:	e0bffc17 	ldw	r2,-16(fp)
  802e94:	10c01c43 	ldbu	r3,113(r2)
  802e98:	e0bffc17 	ldw	r2,-16(fp)
  802e9c:	10c05045 	stb	r3,321(r2)
  d->_g109 = d->_g112 && d->_cg113;
  802ea0:	e0bffc17 	ldw	r2,-16(fp)
  802ea4:	10803143 	ldbu	r2,197(r2)
  802ea8:	10803fcc 	andi	r2,r2,255
  802eac:	1080201c 	xori	r2,r2,128
  802eb0:	10bfe004 	addi	r2,r2,-128
  802eb4:	10000826 	beq	r2,zero,802ed8 <logic+0x2748>
  802eb8:	e0bffc17 	ldw	r2,-16(fp)
  802ebc:	10805043 	ldbu	r2,321(r2)
  802ec0:	10803fcc 	andi	r2,r2,255
  802ec4:	1080201c 	xori	r2,r2,128
  802ec8:	10bfe004 	addi	r2,r2,-128
  802ecc:	10000226 	beq	r2,zero,802ed8 <logic+0x2748>
  802ed0:	00800044 	movi	r2,1
  802ed4:	00000106 	br	802edc <logic+0x274c>
  802ed8:	0005883a 	mov	r2,zero
  802edc:	1007883a 	mov	r3,r2
  802ee0:	e0bffc17 	ldw	r2,-16(fp)
  802ee4:	10c03085 	stb	r3,194(r2)
  if (d->_g109) {
  802ee8:	e0bffc17 	ldw	r2,-16(fp)
  802eec:	10803083 	ldbu	r2,194(r2)
  802ef0:	10803fcc 	andi	r2,r2,255
  802ef4:	1080201c 	xori	r2,r2,128
  802ef8:	10bfe004 	addi	r2,r2,-128
  802efc:	10000326 	beq	r2,zero,802f0c <logic+0x277c>
    d->_region2_null_VRP = 0;
  802f00:	e0bffc17 	ldw	r2,-16(fp)
  802f04:	10000b15 	stw	zero,44(r2)
  802f08:	10000c15 	stw	zero,48(r2)
  }
  d->_g105_e1 = d->_pg88;
  802f0c:	e0bffc17 	ldw	r2,-16(fp)
  802f10:	10c06783 	ldbu	r3,414(r2)
  802f14:	e0bffc17 	ldw	r2,-16(fp)
  802f18:	10c05f45 	stb	r3,381(r2)
  if (d->_g105_e1) {
  802f1c:	e0bffc17 	ldw	r2,-16(fp)
  802f20:	10805f43 	ldbu	r2,381(r2)
  802f24:	10803fcc 	andi	r2,r2,255
  802f28:	1080201c 	xori	r2,r2,128
  802f2c:	10bfe004 	addi	r2,r2,-128
  802f30:	10001226 	beq	r2,zero,802f7c <logic+0x27ec>
    d->_region2_null_VRP += d->deltaT;
  802f34:	e13ffc17 	ldw	r4,-16(fp)
  802f38:	20800b17 	ldw	r2,44(r4)
  802f3c:	20c00c17 	ldw	r3,48(r4)
  802f40:	e1bffc17 	ldw	r6,-16(fp)
  802f44:	31001317 	ldw	r4,76(r6)
  802f48:	31401417 	ldw	r5,80(r6)
  802f4c:	200d883a 	mov	r6,r4
  802f50:	280f883a 	mov	r7,r5
  802f54:	1009883a 	mov	r4,r2
  802f58:	180b883a 	mov	r5,r3
  802f5c:	08078c40 	call	8078c4 <__adddf3>
  802f60:	1009883a 	mov	r4,r2
  802f64:	180b883a 	mov	r5,r3
  802f68:	2005883a 	mov	r2,r4
  802f6c:	2807883a 	mov	r3,r5
  802f70:	e13ffc17 	ldw	r4,-16(fp)
  802f74:	20800b15 	stw	r2,44(r4)
  802f78:	20c00c15 	stw	r3,48(r4)
  }
  d->_g110 = !d->_g105_e1;
  802f7c:	e0bffc17 	ldw	r2,-16(fp)
  802f80:	10805f43 	ldbu	r2,381(r2)
  802f84:	10803fcc 	andi	r2,r2,255
  802f88:	1080201c 	xori	r2,r2,128
  802f8c:	10bfe004 	addi	r2,r2,-128
  802f90:	1005003a 	cmpeq	r2,r2,zero
  802f94:	1007883a 	mov	r3,r2
  802f98:	e0bffc17 	ldw	r2,-16(fp)
  802f9c:	10c030c5 	stb	r3,195(r2)
  d->_g105 = d->_pg114;
  802fa0:	e0bffc17 	ldw	r2,-16(fp)
  802fa4:	10c067c3 	ldbu	r3,415(r2)
  802fa8:	e0bffc17 	ldw	r2,-16(fp)
  802fac:	10c03005 	stb	r3,192(r2)
  d->_cg95 = d->_region2_null_VRP >= d->VRP_time;
  802fb0:	e0bffc17 	ldw	r2,-16(fp)
  802fb4:	14000b17 	ldw	r16,44(r2)
  802fb8:	14400c17 	ldw	r17,48(r2)
  802fbc:	e0bffc17 	ldw	r2,-16(fp)
  802fc0:	10800017 	ldw	r2,0(r2)
  802fc4:	1009883a 	mov	r4,r2
  802fc8:	0808c3c0 	call	808c3c <__floatsidf>
  802fcc:	1009883a 	mov	r4,r2
  802fd0:	180b883a 	mov	r5,r3
  802fd4:	04800044 	movi	r18,1
  802fd8:	200d883a 	mov	r6,r4
  802fdc:	280f883a 	mov	r7,r5
  802fe0:	8009883a 	mov	r4,r16
  802fe4:	880b883a 	mov	r5,r17
  802fe8:	08081700 	call	808170 <__gedf2>
  802fec:	1000010e 	bge	r2,zero,802ff4 <logic+0x2864>
  802ff0:	0025883a 	mov	r18,zero
  802ff4:	9007883a 	mov	r3,r18
  802ff8:	e0bffc17 	ldw	r2,-16(fp)
  802ffc:	10c04ec5 	stb	r3,315(r2)
  d->_g110_e2 = d->_g105 && d->_cg95;
  803000:	e0bffc17 	ldw	r2,-16(fp)
  803004:	10803003 	ldbu	r2,192(r2)
  803008:	10803fcc 	andi	r2,r2,255
  80300c:	1080201c 	xori	r2,r2,128
  803010:	10bfe004 	addi	r2,r2,-128
  803014:	10000826 	beq	r2,zero,803038 <logic+0x28a8>
  803018:	e0bffc17 	ldw	r2,-16(fp)
  80301c:	10804ec3 	ldbu	r2,315(r2)
  803020:	10803fcc 	andi	r2,r2,255
  803024:	1080201c 	xori	r2,r2,128
  803028:	10bfe004 	addi	r2,r2,-128
  80302c:	10000226 	beq	r2,zero,803038 <logic+0x28a8>
  803030:	00800044 	movi	r2,1
  803034:	00000106 	br	80303c <logic+0x28ac>
  803038:	0005883a 	mov	r2,zero
  80303c:	1007883a 	mov	r3,r2
  803040:	e0bffc17 	ldw	r2,-16(fp)
  803044:	10c05f85 	stb	r3,382(r2)
  if (d->_g110_e2) {
  803048:	e0bffc17 	ldw	r2,-16(fp)
  80304c:	10805f83 	ldbu	r2,382(r2)
  803050:	10803fcc 	andi	r2,r2,255
  803054:	1080201c 	xori	r2,r2,128
  803058:	10bfe004 	addi	r2,r2,-128
  80305c:	10000326 	beq	r2,zero,80306c <logic+0x28dc>
    d->_heart2_local__Atrig6 = 1;
  803060:	e0bffc17 	ldw	r2,-16(fp)
  803064:	00c00044 	movi	r3,1
  803068:	10c01bc5 	stb	r3,111(r2)
  }
  d->_g98 = d->_g105 && !d->_cg95;
  80306c:	e0bffc17 	ldw	r2,-16(fp)
  803070:	10803003 	ldbu	r2,192(r2)
  803074:	10803fcc 	andi	r2,r2,255
  803078:	1080201c 	xori	r2,r2,128
  80307c:	10bfe004 	addi	r2,r2,-128
  803080:	10000826 	beq	r2,zero,8030a4 <logic+0x2914>
  803084:	e0bffc17 	ldw	r2,-16(fp)
  803088:	10804ec3 	ldbu	r2,315(r2)
  80308c:	10803fcc 	andi	r2,r2,255
  803090:	1080201c 	xori	r2,r2,128
  803094:	10bfe004 	addi	r2,r2,-128
  803098:	1000021e 	bne	r2,zero,8030a4 <logic+0x2914>
  80309c:	00800044 	movi	r2,1
  8030a0:	00000106 	br	8030a8 <logic+0x2918>
  8030a4:	0005883a 	mov	r2,zero
  8030a8:	1007883a 	mov	r3,r2
  8030ac:	e0bffc17 	ldw	r2,-16(fp)
  8030b0:	10c02ec5 	stb	r3,187(r2)
  d->_g99 = d->_g98 && d->VS;
  8030b4:	e0bffc17 	ldw	r2,-16(fp)
  8030b8:	10802ec3 	ldbu	r2,187(r2)
  8030bc:	10803fcc 	andi	r2,r2,255
  8030c0:	1080201c 	xori	r2,r2,128
  8030c4:	10bfe004 	addi	r2,r2,-128
  8030c8:	10000826 	beq	r2,zero,8030ec <logic+0x295c>
  8030cc:	e0bffc17 	ldw	r2,-16(fp)
  8030d0:	10801743 	ldbu	r2,93(r2)
  8030d4:	10803fcc 	andi	r2,r2,255
  8030d8:	1080201c 	xori	r2,r2,128
  8030dc:	10bfe004 	addi	r2,r2,-128
  8030e0:	10000226 	beq	r2,zero,8030ec <logic+0x295c>
  8030e4:	00800044 	movi	r2,1
  8030e8:	00000106 	br	8030f0 <logic+0x2960>
  8030ec:	0005883a 	mov	r2,zero
  8030f0:	1007883a 	mov	r3,r2
  8030f4:	e0bffc17 	ldw	r2,-16(fp)
  8030f8:	10c02f05 	stb	r3,188(r2)
  if (d->_g99) {
  8030fc:	e0bffc17 	ldw	r2,-16(fp)
  803100:	10802f03 	ldbu	r2,188(r2)
  803104:	10803fcc 	andi	r2,r2,255
  803108:	1080201c 	xori	r2,r2,128
  80310c:	10bfe004 	addi	r2,r2,-128
  803110:	10000326 	beq	r2,zero,803120 <logic+0x2990>
    d->_heart2_local__Atrig7 = 1;
  803114:	e0bffc17 	ldw	r2,-16(fp)
  803118:	00c00044 	movi	r3,1
  80311c:	10c01c05 	stb	r3,112(r2)
  }
  d->_cg80 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803120:	e0bffc17 	ldw	r2,-16(fp)
  803124:	10801bc3 	ldbu	r2,111(r2)
  803128:	10803fcc 	andi	r2,r2,255
  80312c:	1080201c 	xori	r2,r2,128
  803130:	10bfe004 	addi	r2,r2,-128
  803134:	1000061e 	bne	r2,zero,803150 <logic+0x29c0>
  803138:	e0bffc17 	ldw	r2,-16(fp)
  80313c:	10801c03 	ldbu	r2,112(r2)
  803140:	10803fcc 	andi	r2,r2,255
  803144:	1080201c 	xori	r2,r2,128
  803148:	10bfe004 	addi	r2,r2,-128
  80314c:	10000226 	beq	r2,zero,803158 <logic+0x29c8>
  803150:	00800044 	movi	r2,1
  803154:	00000106 	br	80315c <logic+0x29cc>
  803158:	0005883a 	mov	r2,zero
  80315c:	1007883a 	mov	r3,r2
  803160:	e0bffc17 	ldw	r2,-16(fp)
  803164:	10c04cc5 	stb	r3,307(r2)
  d->_g81 = d->_g105_e1 && d->_cg80;
  803168:	e0bffc17 	ldw	r2,-16(fp)
  80316c:	10805f43 	ldbu	r2,381(r2)
  803170:	10803fcc 	andi	r2,r2,255
  803174:	1080201c 	xori	r2,r2,128
  803178:	10bfe004 	addi	r2,r2,-128
  80317c:	10000826 	beq	r2,zero,8031a0 <logic+0x2a10>
  803180:	e0bffc17 	ldw	r2,-16(fp)
  803184:	10804cc3 	ldbu	r2,307(r2)
  803188:	10803fcc 	andi	r2,r2,255
  80318c:	1080201c 	xori	r2,r2,128
  803190:	10bfe004 	addi	r2,r2,-128
  803194:	10000226 	beq	r2,zero,8031a0 <logic+0x2a10>
  803198:	00800044 	movi	r2,1
  80319c:	00000106 	br	8031a4 <logic+0x2a14>
  8031a0:	0005883a 	mov	r2,zero
  8031a4:	1007883a 	mov	r3,r2
  8031a8:	e0bffc17 	ldw	r2,-16(fp)
  8031ac:	10c02bc5 	stb	r3,175(r2)
  d->_g91 = d->_pg116;
  8031b0:	e0bffc17 	ldw	r2,-16(fp)
  8031b4:	10c06803 	ldbu	r3,416(r2)
  8031b8:	e0bffc17 	ldw	r2,-16(fp)
  8031bc:	10c02d85 	stb	r3,182(r2)
  d->_g85 = d->_pg97_e3;
  8031c0:	e0bffc17 	ldw	r2,-16(fp)
  8031c4:	10c06843 	ldbu	r3,417(r2)
  8031c8:	e0bffc17 	ldw	r2,-16(fp)
  8031cc:	10c02c45 	stb	r3,177(r2)
  d->_g88_e2 = !(d->_g91 || d->_g85);
  8031d0:	e0bffc17 	ldw	r2,-16(fp)
  8031d4:	10802d83 	ldbu	r2,182(r2)
  8031d8:	10803fcc 	andi	r2,r2,255
  8031dc:	1080201c 	xori	r2,r2,128
  8031e0:	10bfe004 	addi	r2,r2,-128
  8031e4:	1000081e 	bne	r2,zero,803208 <logic+0x2a78>
  8031e8:	e0bffc17 	ldw	r2,-16(fp)
  8031ec:	10802c43 	ldbu	r2,177(r2)
  8031f0:	10803fcc 	andi	r2,r2,255
  8031f4:	1080201c 	xori	r2,r2,128
  8031f8:	10bfe004 	addi	r2,r2,-128
  8031fc:	1000021e 	bne	r2,zero,803208 <logic+0x2a78>
  803200:	00800044 	movi	r2,1
  803204:	00000106 	br	80320c <logic+0x2a7c>
  803208:	0005883a 	mov	r2,zero
  80320c:	1007883a 	mov	r3,r2
  803210:	e0bffc17 	ldw	r2,-16(fp)
  803214:	10c05ec5 	stb	r3,379(r2)
  d->_g91 = d->_g85 || d->_g91;
  803218:	e0bffc17 	ldw	r2,-16(fp)
  80321c:	10802c43 	ldbu	r2,177(r2)
  803220:	10803fcc 	andi	r2,r2,255
  803224:	1080201c 	xori	r2,r2,128
  803228:	10bfe004 	addi	r2,r2,-128
  80322c:	1000061e 	bne	r2,zero,803248 <logic+0x2ab8>
  803230:	e0bffc17 	ldw	r2,-16(fp)
  803234:	10802d83 	ldbu	r2,182(r2)
  803238:	10803fcc 	andi	r2,r2,255
  80323c:	1080201c 	xori	r2,r2,128
  803240:	10bfe004 	addi	r2,r2,-128
  803244:	10000226 	beq	r2,zero,803250 <logic+0x2ac0>
  803248:	00800044 	movi	r2,1
  80324c:	00000106 	br	803254 <logic+0x2ac4>
  803250:	0005883a 	mov	r2,zero
  803254:	1007883a 	mov	r3,r2
  803258:	e0bffc17 	ldw	r2,-16(fp)
  80325c:	10c02d85 	stb	r3,182(r2)
  d->_cg86 = d->_region2_null_VRP < d->VRP_time;
  803260:	e0bffc17 	ldw	r2,-16(fp)
  803264:	14000b17 	ldw	r16,44(r2)
  803268:	14400c17 	ldw	r17,48(r2)
  80326c:	e0bffc17 	ldw	r2,-16(fp)
  803270:	10800017 	ldw	r2,0(r2)
  803274:	1009883a 	mov	r4,r2
  803278:	0808c3c0 	call	808c3c <__floatsidf>
  80327c:	1009883a 	mov	r4,r2
  803280:	180b883a 	mov	r5,r3
  803284:	04800044 	movi	r18,1
  803288:	200d883a 	mov	r6,r4
  80328c:	280f883a 	mov	r7,r5
  803290:	8009883a 	mov	r4,r16
  803294:	880b883a 	mov	r5,r17
  803298:	080824c0 	call	80824c <__ledf2>
  80329c:	10000116 	blt	r2,zero,8032a4 <logic+0x2b14>
  8032a0:	0025883a 	mov	r18,zero
  8032a4:	9007883a 	mov	r3,r18
  8032a8:	e0bffc17 	ldw	r2,-16(fp)
  8032ac:	10c04dc5 	stb	r3,311(r2)
  d->_g85 = d->_g91 && d->_cg86;
  8032b0:	e0bffc17 	ldw	r2,-16(fp)
  8032b4:	10802d83 	ldbu	r2,182(r2)
  8032b8:	10803fcc 	andi	r2,r2,255
  8032bc:	1080201c 	xori	r2,r2,128
  8032c0:	10bfe004 	addi	r2,r2,-128
  8032c4:	10000826 	beq	r2,zero,8032e8 <logic+0x2b58>
  8032c8:	e0bffc17 	ldw	r2,-16(fp)
  8032cc:	10804dc3 	ldbu	r2,311(r2)
  8032d0:	10803fcc 	andi	r2,r2,255
  8032d4:	1080201c 	xori	r2,r2,128
  8032d8:	10bfe004 	addi	r2,r2,-128
  8032dc:	10000226 	beq	r2,zero,8032e8 <logic+0x2b58>
  8032e0:	00800044 	movi	r2,1
  8032e4:	00000106 	br	8032ec <logic+0x2b5c>
  8032e8:	0005883a 	mov	r2,zero
  8032ec:	1007883a 	mov	r3,r2
  8032f0:	e0bffc17 	ldw	r2,-16(fp)
  8032f4:	10c02c45 	stb	r3,177(r2)
  if (d->_g85) {
  8032f8:	e0bffc17 	ldw	r2,-16(fp)
  8032fc:	10802c43 	ldbu	r2,177(r2)
  803300:	10803fcc 	andi	r2,r2,255
  803304:	1080201c 	xori	r2,r2,128
  803308:	10bfe004 	addi	r2,r2,-128
  80330c:	10003426 	beq	r2,zero,8033e0 <logic+0x2c50>
    d->sleepT = (d->sleepT < (d->VRP_time - d->_region2_null_VRP)) ? d->sleepT : (d->VRP_time - d->_region2_null_VRP);
  803310:	e0bffc17 	ldw	r2,-16(fp)
  803314:	14001517 	ldw	r16,84(r2)
  803318:	14401617 	ldw	r17,88(r2)
  80331c:	e0bffc17 	ldw	r2,-16(fp)
  803320:	10800017 	ldw	r2,0(r2)
  803324:	1009883a 	mov	r4,r2
  803328:	0808c3c0 	call	808c3c <__floatsidf>
  80332c:	1011883a 	mov	r8,r2
  803330:	1813883a 	mov	r9,r3
  803334:	e13ffc17 	ldw	r4,-16(fp)
  803338:	20800b17 	ldw	r2,44(r4)
  80333c:	20c00c17 	ldw	r3,48(r4)
  803340:	100d883a 	mov	r6,r2
  803344:	180f883a 	mov	r7,r3
  803348:	4009883a 	mov	r4,r8
  80334c:	480b883a 	mov	r5,r9
  803350:	08083400 	call	808340 <__subdf3>
  803354:	1009883a 	mov	r4,r2
  803358:	180b883a 	mov	r5,r3
  80335c:	2005883a 	mov	r2,r4
  803360:	2807883a 	mov	r3,r5
  803364:	100d883a 	mov	r6,r2
  803368:	180f883a 	mov	r7,r3
  80336c:	8009883a 	mov	r4,r16
  803370:	880b883a 	mov	r5,r17
  803374:	080824c0 	call	80824c <__ledf2>
  803378:	1000040e 	bge	r2,zero,80338c <logic+0x2bfc>
  80337c:	e13ffc17 	ldw	r4,-16(fp)
  803380:	20801517 	ldw	r2,84(r4)
  803384:	20c01617 	ldw	r3,88(r4)
  803388:	00001206 	br	8033d4 <logic+0x2c44>
  80338c:	e0bffc17 	ldw	r2,-16(fp)
  803390:	10800017 	ldw	r2,0(r2)
  803394:	1009883a 	mov	r4,r2
  803398:	0808c3c0 	call	808c3c <__floatsidf>
  80339c:	1011883a 	mov	r8,r2
  8033a0:	1813883a 	mov	r9,r3
  8033a4:	e13ffc17 	ldw	r4,-16(fp)
  8033a8:	20800b17 	ldw	r2,44(r4)
  8033ac:	20c00c17 	ldw	r3,48(r4)
  8033b0:	100d883a 	mov	r6,r2
  8033b4:	180f883a 	mov	r7,r3
  8033b8:	4009883a 	mov	r4,r8
  8033bc:	480b883a 	mov	r5,r9
  8033c0:	08083400 	call	808340 <__subdf3>
  8033c4:	1009883a 	mov	r4,r2
  8033c8:	180b883a 	mov	r5,r3
  8033cc:	2005883a 	mov	r2,r4
  8033d0:	2807883a 	mov	r3,r5
  8033d4:	e13ffc17 	ldw	r4,-16(fp)
  8033d8:	20801515 	stw	r2,84(r4)
  8033dc:	20c01615 	stw	r3,88(r4)
  }
  d->_cg87 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  8033e0:	e0bffc17 	ldw	r2,-16(fp)
  8033e4:	10801bc3 	ldbu	r2,111(r2)
  8033e8:	10803fcc 	andi	r2,r2,255
  8033ec:	1080201c 	xori	r2,r2,128
  8033f0:	10bfe004 	addi	r2,r2,-128
  8033f4:	1000061e 	bne	r2,zero,803410 <logic+0x2c80>
  8033f8:	e0bffc17 	ldw	r2,-16(fp)
  8033fc:	10801c03 	ldbu	r2,112(r2)
  803400:	10803fcc 	andi	r2,r2,255
  803404:	1080201c 	xori	r2,r2,128
  803408:	10bfe004 	addi	r2,r2,-128
  80340c:	10000226 	beq	r2,zero,803418 <logic+0x2c88>
  803410:	00800044 	movi	r2,1
  803414:	00000106 	br	80341c <logic+0x2c8c>
  803418:	0005883a 	mov	r2,zero
  80341c:	1007883a 	mov	r3,r2
  803420:	e0bffc17 	ldw	r2,-16(fp)
  803424:	10c04d85 	stb	r3,310(r2)
  d->_g86 = d->_g91 && !d->_cg86;
  803428:	e0bffc17 	ldw	r2,-16(fp)
  80342c:	10802d83 	ldbu	r2,182(r2)
  803430:	10803fcc 	andi	r2,r2,255
  803434:	1080201c 	xori	r2,r2,128
  803438:	10bfe004 	addi	r2,r2,-128
  80343c:	10000826 	beq	r2,zero,803460 <logic+0x2cd0>
  803440:	e0bffc17 	ldw	r2,-16(fp)
  803444:	10804dc3 	ldbu	r2,311(r2)
  803448:	10803fcc 	andi	r2,r2,255
  80344c:	1080201c 	xori	r2,r2,128
  803450:	10bfe004 	addi	r2,r2,-128
  803454:	1000021e 	bne	r2,zero,803460 <logic+0x2cd0>
  803458:	00800044 	movi	r2,1
  80345c:	00000106 	br	803464 <logic+0x2cd4>
  803460:	0005883a 	mov	r2,zero
  803464:	1007883a 	mov	r3,r2
  803468:	e0bffc17 	ldw	r2,-16(fp)
  80346c:	10c02c85 	stb	r3,178(r2)
  d->_cg89 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803470:	e0bffc17 	ldw	r2,-16(fp)
  803474:	10801bc3 	ldbu	r2,111(r2)
  803478:	10803fcc 	andi	r2,r2,255
  80347c:	1080201c 	xori	r2,r2,128
  803480:	10bfe004 	addi	r2,r2,-128
  803484:	1000061e 	bne	r2,zero,8034a0 <logic+0x2d10>
  803488:	e0bffc17 	ldw	r2,-16(fp)
  80348c:	10801c03 	ldbu	r2,112(r2)
  803490:	10803fcc 	andi	r2,r2,255
  803494:	1080201c 	xori	r2,r2,128
  803498:	10bfe004 	addi	r2,r2,-128
  80349c:	10000226 	beq	r2,zero,8034a8 <logic+0x2d18>
  8034a0:	00800044 	movi	r2,1
  8034a4:	00000106 	br	8034ac <logic+0x2d1c>
  8034a8:	0005883a 	mov	r2,zero
  8034ac:	1007883a 	mov	r3,r2
  8034b0:	e0bffc17 	ldw	r2,-16(fp)
  8034b4:	10c04e05 	stb	r3,312(r2)
  d->_g88 = d->_g85 && d->_cg87 || d->_g86 && d->_cg89;
  8034b8:	e0bffc17 	ldw	r2,-16(fp)
  8034bc:	10802c43 	ldbu	r2,177(r2)
  8034c0:	10803fcc 	andi	r2,r2,255
  8034c4:	1080201c 	xori	r2,r2,128
  8034c8:	10bfe004 	addi	r2,r2,-128
  8034cc:	10000626 	beq	r2,zero,8034e8 <logic+0x2d58>
  8034d0:	e0bffc17 	ldw	r2,-16(fp)
  8034d4:	10804d83 	ldbu	r2,310(r2)
  8034d8:	10803fcc 	andi	r2,r2,255
  8034dc:	1080201c 	xori	r2,r2,128
  8034e0:	10bfe004 	addi	r2,r2,-128
  8034e4:	10000c1e 	bne	r2,zero,803518 <logic+0x2d88>
  8034e8:	e0bffc17 	ldw	r2,-16(fp)
  8034ec:	10802c83 	ldbu	r2,178(r2)
  8034f0:	10803fcc 	andi	r2,r2,255
  8034f4:	1080201c 	xori	r2,r2,128
  8034f8:	10bfe004 	addi	r2,r2,-128
  8034fc:	10000826 	beq	r2,zero,803520 <logic+0x2d90>
  803500:	e0bffc17 	ldw	r2,-16(fp)
  803504:	10804e03 	ldbu	r2,312(r2)
  803508:	10803fcc 	andi	r2,r2,255
  80350c:	1080201c 	xori	r2,r2,128
  803510:	10bfe004 	addi	r2,r2,-128
  803514:	10000226 	beq	r2,zero,803520 <logic+0x2d90>
  803518:	00800044 	movi	r2,1
  80351c:	00000106 	br	803524 <logic+0x2d94>
  803520:	0005883a 	mov	r2,zero
  803524:	1007883a 	mov	r3,r2
  803528:	e0bffc17 	ldw	r2,-16(fp)
  80352c:	10c02d05 	stb	r3,180(r2)
  d->_g95 = !d->_g105;
  803530:	e0bffc17 	ldw	r2,-16(fp)
  803534:	10803003 	ldbu	r2,192(r2)
  803538:	10803fcc 	andi	r2,r2,255
  80353c:	1080201c 	xori	r2,r2,128
  803540:	10bfe004 	addi	r2,r2,-128
  803544:	1005003a 	cmpeq	r2,r2,zero
  803548:	1007883a 	mov	r3,r2
  80354c:	e0bffc17 	ldw	r2,-16(fp)
  803550:	10c02e05 	stb	r3,184(r2)
  d->_g99 = d->_g110_e2 || d->_g99;
  803554:	e0bffc17 	ldw	r2,-16(fp)
  803558:	10805f83 	ldbu	r2,382(r2)
  80355c:	10803fcc 	andi	r2,r2,255
  803560:	1080201c 	xori	r2,r2,128
  803564:	10bfe004 	addi	r2,r2,-128
  803568:	1000061e 	bne	r2,zero,803584 <logic+0x2df4>
  80356c:	e0bffc17 	ldw	r2,-16(fp)
  803570:	10802f03 	ldbu	r2,188(r2)
  803574:	10803fcc 	andi	r2,r2,255
  803578:	1080201c 	xori	r2,r2,128
  80357c:	10bfe004 	addi	r2,r2,-128
  803580:	10000226 	beq	r2,zero,80358c <logic+0x2dfc>
  803584:	00800044 	movi	r2,1
  803588:	00000106 	br	803590 <logic+0x2e00>
  80358c:	0005883a 	mov	r2,zero
  803590:	1007883a 	mov	r3,r2
  803594:	e0bffc17 	ldw	r2,-16(fp)
  803598:	10c02f05 	stb	r3,188(r2)
  d->_g96 = (d->_g110 || d->_g81) && (d->_g88_e2 || d->_g88) && (d->_g95 || d->_g99) && (d->_g81 || d->_g88 || d->_g99);
  80359c:	e0bffc17 	ldw	r2,-16(fp)
  8035a0:	108030c3 	ldbu	r2,195(r2)
  8035a4:	10803fcc 	andi	r2,r2,255
  8035a8:	1080201c 	xori	r2,r2,128
  8035ac:	10bfe004 	addi	r2,r2,-128
  8035b0:	1000061e 	bne	r2,zero,8035cc <logic+0x2e3c>
  8035b4:	e0bffc17 	ldw	r2,-16(fp)
  8035b8:	10802bc3 	ldbu	r2,175(r2)
  8035bc:	10803fcc 	andi	r2,r2,255
  8035c0:	1080201c 	xori	r2,r2,128
  8035c4:	10bfe004 	addi	r2,r2,-128
  8035c8:	10002c26 	beq	r2,zero,80367c <logic+0x2eec>
  8035cc:	e0bffc17 	ldw	r2,-16(fp)
  8035d0:	10805ec3 	ldbu	r2,379(r2)
  8035d4:	10803fcc 	andi	r2,r2,255
  8035d8:	1080201c 	xori	r2,r2,128
  8035dc:	10bfe004 	addi	r2,r2,-128
  8035e0:	1000061e 	bne	r2,zero,8035fc <logic+0x2e6c>
  8035e4:	e0bffc17 	ldw	r2,-16(fp)
  8035e8:	10802d03 	ldbu	r2,180(r2)
  8035ec:	10803fcc 	andi	r2,r2,255
  8035f0:	1080201c 	xori	r2,r2,128
  8035f4:	10bfe004 	addi	r2,r2,-128
  8035f8:	10002026 	beq	r2,zero,80367c <logic+0x2eec>
  8035fc:	e0bffc17 	ldw	r2,-16(fp)
  803600:	10802e03 	ldbu	r2,184(r2)
  803604:	10803fcc 	andi	r2,r2,255
  803608:	1080201c 	xori	r2,r2,128
  80360c:	10bfe004 	addi	r2,r2,-128
  803610:	1000061e 	bne	r2,zero,80362c <logic+0x2e9c>
  803614:	e0bffc17 	ldw	r2,-16(fp)
  803618:	10802f03 	ldbu	r2,188(r2)
  80361c:	10803fcc 	andi	r2,r2,255
  803620:	1080201c 	xori	r2,r2,128
  803624:	10bfe004 	addi	r2,r2,-128
  803628:	10001426 	beq	r2,zero,80367c <logic+0x2eec>
  80362c:	e0bffc17 	ldw	r2,-16(fp)
  803630:	10802bc3 	ldbu	r2,175(r2)
  803634:	10803fcc 	andi	r2,r2,255
  803638:	1080201c 	xori	r2,r2,128
  80363c:	10bfe004 	addi	r2,r2,-128
  803640:	10000c1e 	bne	r2,zero,803674 <logic+0x2ee4>
  803644:	e0bffc17 	ldw	r2,-16(fp)
  803648:	10802d03 	ldbu	r2,180(r2)
  80364c:	10803fcc 	andi	r2,r2,255
  803650:	1080201c 	xori	r2,r2,128
  803654:	10bfe004 	addi	r2,r2,-128
  803658:	1000061e 	bne	r2,zero,803674 <logic+0x2ee4>
  80365c:	e0bffc17 	ldw	r2,-16(fp)
  803660:	10802f03 	ldbu	r2,188(r2)
  803664:	10803fcc 	andi	r2,r2,255
  803668:	1080201c 	xori	r2,r2,128
  80366c:	10bfe004 	addi	r2,r2,-128
  803670:	10000226 	beq	r2,zero,80367c <logic+0x2eec>
  803674:	00800044 	movi	r2,1
  803678:	00000106 	br	803680 <logic+0x2ef0>
  80367c:	0005883a 	mov	r2,zero
  803680:	1007883a 	mov	r3,r2
  803684:	e0bffc17 	ldw	r2,-16(fp)
  803688:	10c02e45 	stb	r3,185(r2)
  d->_cg100 = d->_heart2_local__Atrig6;
  80368c:	e0bffc17 	ldw	r2,-16(fp)
  803690:	10c01bc3 	ldbu	r3,111(r2)
  803694:	e0bffc17 	ldw	r2,-16(fp)
  803698:	10c04f05 	stb	r3,316(r2)
  d->_g81_e1 = d->_g96 && !d->_cg100;
  80369c:	e0bffc17 	ldw	r2,-16(fp)
  8036a0:	10802e43 	ldbu	r2,185(r2)
  8036a4:	10803fcc 	andi	r2,r2,255
  8036a8:	1080201c 	xori	r2,r2,128
  8036ac:	10bfe004 	addi	r2,r2,-128
  8036b0:	10000826 	beq	r2,zero,8036d4 <logic+0x2f44>
  8036b4:	e0bffc17 	ldw	r2,-16(fp)
  8036b8:	10804f03 	ldbu	r2,316(r2)
  8036bc:	10803fcc 	andi	r2,r2,255
  8036c0:	1080201c 	xori	r2,r2,128
  8036c4:	10bfe004 	addi	r2,r2,-128
  8036c8:	1000021e 	bne	r2,zero,8036d4 <logic+0x2f44>
  8036cc:	00800044 	movi	r2,1
  8036d0:	00000106 	br	8036d8 <logic+0x2f48>
  8036d4:	0005883a 	mov	r2,zero
  8036d8:	1007883a 	mov	r3,r2
  8036dc:	e0bffc17 	ldw	r2,-16(fp)
  8036e0:	10c05e85 	stb	r3,378(r2)
  if (d->_g81_e1) {
  8036e4:	e0bffc17 	ldw	r2,-16(fp)
  8036e8:	10805e83 	ldbu	r2,378(r2)
  8036ec:	10803fcc 	andi	r2,r2,255
  8036f0:	1080201c 	xori	r2,r2,128
  8036f4:	10bfe004 	addi	r2,r2,-128
  8036f8:	10000626 	beq	r2,zero,803714 <logic+0x2f84>
    d->VR |= 1;
  8036fc:	e0bffc17 	ldw	r2,-16(fp)
  803700:	10801803 	ldbu	r2,96(r2)
  803704:	10800054 	ori	r2,r2,1
  803708:	1007883a 	mov	r3,r2
  80370c:	e0bffc17 	ldw	r2,-16(fp)
  803710:	10c01805 	stb	r3,96(r2)
  }
  d->_g97 = d->_GO || d->_g109 || d->_g81_e1;
  803714:	e0bffc17 	ldw	r2,-16(fp)
  803718:	10804543 	ldbu	r2,277(r2)
  80371c:	10803fcc 	andi	r2,r2,255
  803720:	1080201c 	xori	r2,r2,128
  803724:	10bfe004 	addi	r2,r2,-128
  803728:	10000c1e 	bne	r2,zero,80375c <logic+0x2fcc>
  80372c:	e0bffc17 	ldw	r2,-16(fp)
  803730:	10803083 	ldbu	r2,194(r2)
  803734:	10803fcc 	andi	r2,r2,255
  803738:	1080201c 	xori	r2,r2,128
  80373c:	10bfe004 	addi	r2,r2,-128
  803740:	1000061e 	bne	r2,zero,80375c <logic+0x2fcc>
  803744:	e0bffc17 	ldw	r2,-16(fp)
  803748:	10805e83 	ldbu	r2,378(r2)
  80374c:	10803fcc 	andi	r2,r2,255
  803750:	1080201c 	xori	r2,r2,128
  803754:	10bfe004 	addi	r2,r2,-128
  803758:	10000226 	beq	r2,zero,803764 <logic+0x2fd4>
  80375c:	00800044 	movi	r2,1
  803760:	00000106 	br	803768 <logic+0x2fd8>
  803764:	0005883a 	mov	r2,zero
  803768:	1007883a 	mov	r3,r2
  80376c:	e0bffc17 	ldw	r2,-16(fp)
  803770:	10c02e85 	stb	r3,186(r2)
  if (d->_g97) {
  803774:	e0bffc17 	ldw	r2,-16(fp)
  803778:	10802e83 	ldbu	r2,186(r2)
  80377c:	10803fcc 	andi	r2,r2,255
  803780:	1080201c 	xori	r2,r2,128
  803784:	10bfe004 	addi	r2,r2,-128
  803788:	10000426 	beq	r2,zero,80379c <logic+0x300c>
    d->_heart2_local__Atrig6 = 0;
  80378c:	e0bffc17 	ldw	r2,-16(fp)
  803790:	10001bc5 	stb	zero,111(r2)
    d->_heart2_local__Atrig7 = 0;
  803794:	e0bffc17 	ldw	r2,-16(fp)
  803798:	10001c05 	stb	zero,112(r2)
  }
  d->_cg78 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  80379c:	e0bffc17 	ldw	r2,-16(fp)
  8037a0:	10801bc3 	ldbu	r2,111(r2)
  8037a4:	10803fcc 	andi	r2,r2,255
  8037a8:	1080201c 	xori	r2,r2,128
  8037ac:	10bfe004 	addi	r2,r2,-128
  8037b0:	1000061e 	bne	r2,zero,8037cc <logic+0x303c>
  8037b4:	e0bffc17 	ldw	r2,-16(fp)
  8037b8:	10801c03 	ldbu	r2,112(r2)
  8037bc:	10803fcc 	andi	r2,r2,255
  8037c0:	1080201c 	xori	r2,r2,128
  8037c4:	10bfe004 	addi	r2,r2,-128
  8037c8:	10000226 	beq	r2,zero,8037d4 <logic+0x3044>
  8037cc:	00800044 	movi	r2,1
  8037d0:	00000106 	br	8037d8 <logic+0x3048>
  8037d4:	0005883a 	mov	r2,zero
  8037d8:	1007883a 	mov	r3,r2
  8037dc:	e0bffc17 	ldw	r2,-16(fp)
  8037e0:	10c04c85 	stb	r3,306(r2)
  d->_g88 = d->_g97 && !d->_cg78 || d->_g105_e1 && !d->_cg80;
  8037e4:	e0bffc17 	ldw	r2,-16(fp)
  8037e8:	10802e83 	ldbu	r2,186(r2)
  8037ec:	10803fcc 	andi	r2,r2,255
  8037f0:	1080201c 	xori	r2,r2,128
  8037f4:	10bfe004 	addi	r2,r2,-128
  8037f8:	10000626 	beq	r2,zero,803814 <logic+0x3084>
  8037fc:	e0bffc17 	ldw	r2,-16(fp)
  803800:	10804c83 	ldbu	r2,306(r2)
  803804:	10803fcc 	andi	r2,r2,255
  803808:	1080201c 	xori	r2,r2,128
  80380c:	10bfe004 	addi	r2,r2,-128
  803810:	10000c26 	beq	r2,zero,803844 <logic+0x30b4>
  803814:	e0bffc17 	ldw	r2,-16(fp)
  803818:	10805f43 	ldbu	r2,381(r2)
  80381c:	10803fcc 	andi	r2,r2,255
  803820:	1080201c 	xori	r2,r2,128
  803824:	10bfe004 	addi	r2,r2,-128
  803828:	10000826 	beq	r2,zero,80384c <logic+0x30bc>
  80382c:	e0bffc17 	ldw	r2,-16(fp)
  803830:	10804cc3 	ldbu	r2,307(r2)
  803834:	10803fcc 	andi	r2,r2,255
  803838:	1080201c 	xori	r2,r2,128
  80383c:	10bfe004 	addi	r2,r2,-128
  803840:	1000021e 	bne	r2,zero,80384c <logic+0x30bc>
  803844:	00800044 	movi	r2,1
  803848:	00000106 	br	803850 <logic+0x30c0>
  80384c:	0005883a 	mov	r2,zero
  803850:	1007883a 	mov	r3,r2
  803854:	e0bffc17 	ldw	r2,-16(fp)
  803858:	10c02d05 	stb	r3,180(r2)
  d->_cg82 = d->_region2_null_VRP < d->VRP_time;
  80385c:	e0bffc17 	ldw	r2,-16(fp)
  803860:	14000b17 	ldw	r16,44(r2)
  803864:	14400c17 	ldw	r17,48(r2)
  803868:	e0bffc17 	ldw	r2,-16(fp)
  80386c:	10800017 	ldw	r2,0(r2)
  803870:	1009883a 	mov	r4,r2
  803874:	0808c3c0 	call	808c3c <__floatsidf>
  803878:	1009883a 	mov	r4,r2
  80387c:	180b883a 	mov	r5,r3
  803880:	04800044 	movi	r18,1
  803884:	200d883a 	mov	r6,r4
  803888:	280f883a 	mov	r7,r5
  80388c:	8009883a 	mov	r4,r16
  803890:	880b883a 	mov	r5,r17
  803894:	080824c0 	call	80824c <__ledf2>
  803898:	10000116 	blt	r2,zero,8038a0 <logic+0x3110>
  80389c:	0025883a 	mov	r18,zero
  8038a0:	9007883a 	mov	r3,r18
  8038a4:	e0bffc17 	ldw	r2,-16(fp)
  8038a8:	10c04d05 	stb	r3,308(r2)
  d->_g81 = d->_g97 && d->_cg82;
  8038ac:	e0bffc17 	ldw	r2,-16(fp)
  8038b0:	10802e83 	ldbu	r2,186(r2)
  8038b4:	10803fcc 	andi	r2,r2,255
  8038b8:	1080201c 	xori	r2,r2,128
  8038bc:	10bfe004 	addi	r2,r2,-128
  8038c0:	10000826 	beq	r2,zero,8038e4 <logic+0x3154>
  8038c4:	e0bffc17 	ldw	r2,-16(fp)
  8038c8:	10804d03 	ldbu	r2,308(r2)
  8038cc:	10803fcc 	andi	r2,r2,255
  8038d0:	1080201c 	xori	r2,r2,128
  8038d4:	10bfe004 	addi	r2,r2,-128
  8038d8:	10000226 	beq	r2,zero,8038e4 <logic+0x3154>
  8038dc:	00800044 	movi	r2,1
  8038e0:	00000106 	br	8038e8 <logic+0x3158>
  8038e4:	0005883a 	mov	r2,zero
  8038e8:	1007883a 	mov	r3,r2
  8038ec:	e0bffc17 	ldw	r2,-16(fp)
  8038f0:	10c02bc5 	stb	r3,175(r2)
  if (d->_g81) {
  8038f4:	e0bffc17 	ldw	r2,-16(fp)
  8038f8:	10802bc3 	ldbu	r2,175(r2)
  8038fc:	10803fcc 	andi	r2,r2,255
  803900:	1080201c 	xori	r2,r2,128
  803904:	10bfe004 	addi	r2,r2,-128
  803908:	10003426 	beq	r2,zero,8039dc <logic+0x324c>
    d->sleepT = (d->sleepT < (d->VRP_time - d->_region2_null_VRP)) ? d->sleepT : (d->VRP_time - d->_region2_null_VRP);
  80390c:	e0bffc17 	ldw	r2,-16(fp)
  803910:	14001517 	ldw	r16,84(r2)
  803914:	14401617 	ldw	r17,88(r2)
  803918:	e0bffc17 	ldw	r2,-16(fp)
  80391c:	10800017 	ldw	r2,0(r2)
  803920:	1009883a 	mov	r4,r2
  803924:	0808c3c0 	call	808c3c <__floatsidf>
  803928:	1011883a 	mov	r8,r2
  80392c:	1813883a 	mov	r9,r3
  803930:	e13ffc17 	ldw	r4,-16(fp)
  803934:	20800b17 	ldw	r2,44(r4)
  803938:	20c00c17 	ldw	r3,48(r4)
  80393c:	100d883a 	mov	r6,r2
  803940:	180f883a 	mov	r7,r3
  803944:	4009883a 	mov	r4,r8
  803948:	480b883a 	mov	r5,r9
  80394c:	08083400 	call	808340 <__subdf3>
  803950:	1009883a 	mov	r4,r2
  803954:	180b883a 	mov	r5,r3
  803958:	2005883a 	mov	r2,r4
  80395c:	2807883a 	mov	r3,r5
  803960:	100d883a 	mov	r6,r2
  803964:	180f883a 	mov	r7,r3
  803968:	8009883a 	mov	r4,r16
  80396c:	880b883a 	mov	r5,r17
  803970:	080824c0 	call	80824c <__ledf2>
  803974:	1000040e 	bge	r2,zero,803988 <logic+0x31f8>
  803978:	e13ffc17 	ldw	r4,-16(fp)
  80397c:	20801517 	ldw	r2,84(r4)
  803980:	20c01617 	ldw	r3,88(r4)
  803984:	00001206 	br	8039d0 <logic+0x3240>
  803988:	e0bffc17 	ldw	r2,-16(fp)
  80398c:	10800017 	ldw	r2,0(r2)
  803990:	1009883a 	mov	r4,r2
  803994:	0808c3c0 	call	808c3c <__floatsidf>
  803998:	1011883a 	mov	r8,r2
  80399c:	1813883a 	mov	r9,r3
  8039a0:	e13ffc17 	ldw	r4,-16(fp)
  8039a4:	20800b17 	ldw	r2,44(r4)
  8039a8:	20c00c17 	ldw	r3,48(r4)
  8039ac:	100d883a 	mov	r6,r2
  8039b0:	180f883a 	mov	r7,r3
  8039b4:	4009883a 	mov	r4,r8
  8039b8:	480b883a 	mov	r5,r9
  8039bc:	08083400 	call	808340 <__subdf3>
  8039c0:	1009883a 	mov	r4,r2
  8039c4:	180b883a 	mov	r5,r3
  8039c8:	2005883a 	mov	r2,r4
  8039cc:	2807883a 	mov	r3,r5
  8039d0:	e13ffc17 	ldw	r4,-16(fp)
  8039d4:	20801515 	stw	r2,84(r4)
  8039d8:	20c01615 	stw	r3,88(r4)
  }
  d->_cg83 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  8039dc:	e0bffc17 	ldw	r2,-16(fp)
  8039e0:	10801bc3 	ldbu	r2,111(r2)
  8039e4:	10803fcc 	andi	r2,r2,255
  8039e8:	1080201c 	xori	r2,r2,128
  8039ec:	10bfe004 	addi	r2,r2,-128
  8039f0:	1000061e 	bne	r2,zero,803a0c <logic+0x327c>
  8039f4:	e0bffc17 	ldw	r2,-16(fp)
  8039f8:	10801c03 	ldbu	r2,112(r2)
  8039fc:	10803fcc 	andi	r2,r2,255
  803a00:	1080201c 	xori	r2,r2,128
  803a04:	10bfe004 	addi	r2,r2,-128
  803a08:	10000226 	beq	r2,zero,803a14 <logic+0x3284>
  803a0c:	00800044 	movi	r2,1
  803a10:	00000106 	br	803a18 <logic+0x3288>
  803a14:	0005883a 	mov	r2,zero
  803a18:	1007883a 	mov	r3,r2
  803a1c:	e0bffc17 	ldw	r2,-16(fp)
  803a20:	10c04d45 	stb	r3,309(r2)
  d->_g97_e3 = d->_g81 && !d->_cg83 || d->_g85 && !d->_cg87;
  803a24:	e0bffc17 	ldw	r2,-16(fp)
  803a28:	10802bc3 	ldbu	r2,175(r2)
  803a2c:	10803fcc 	andi	r2,r2,255
  803a30:	1080201c 	xori	r2,r2,128
  803a34:	10bfe004 	addi	r2,r2,-128
  803a38:	10000626 	beq	r2,zero,803a54 <logic+0x32c4>
  803a3c:	e0bffc17 	ldw	r2,-16(fp)
  803a40:	10804d43 	ldbu	r2,309(r2)
  803a44:	10803fcc 	andi	r2,r2,255
  803a48:	1080201c 	xori	r2,r2,128
  803a4c:	10bfe004 	addi	r2,r2,-128
  803a50:	10000c26 	beq	r2,zero,803a84 <logic+0x32f4>
  803a54:	e0bffc17 	ldw	r2,-16(fp)
  803a58:	10802c43 	ldbu	r2,177(r2)
  803a5c:	10803fcc 	andi	r2,r2,255
  803a60:	1080201c 	xori	r2,r2,128
  803a64:	10bfe004 	addi	r2,r2,-128
  803a68:	10000826 	beq	r2,zero,803a8c <logic+0x32fc>
  803a6c:	e0bffc17 	ldw	r2,-16(fp)
  803a70:	10804d83 	ldbu	r2,310(r2)
  803a74:	10803fcc 	andi	r2,r2,255
  803a78:	1080201c 	xori	r2,r2,128
  803a7c:	10bfe004 	addi	r2,r2,-128
  803a80:	1000021e 	bne	r2,zero,803a8c <logic+0x32fc>
  803a84:	00800044 	movi	r2,1
  803a88:	00000106 	br	803a90 <logic+0x3300>
  803a8c:	0005883a 	mov	r2,zero
  803a90:	1007883a 	mov	r3,r2
  803a94:	e0bffc17 	ldw	r2,-16(fp)
  803a98:	10c05f05 	stb	r3,380(r2)
  d->_g88_e2 = d->_g97 && !d->_cg82;
  803a9c:	e0bffc17 	ldw	r2,-16(fp)
  803aa0:	10802e83 	ldbu	r2,186(r2)
  803aa4:	10803fcc 	andi	r2,r2,255
  803aa8:	1080201c 	xori	r2,r2,128
  803aac:	10bfe004 	addi	r2,r2,-128
  803ab0:	10000826 	beq	r2,zero,803ad4 <logic+0x3344>
  803ab4:	e0bffc17 	ldw	r2,-16(fp)
  803ab8:	10804d03 	ldbu	r2,308(r2)
  803abc:	10803fcc 	andi	r2,r2,255
  803ac0:	1080201c 	xori	r2,r2,128
  803ac4:	10bfe004 	addi	r2,r2,-128
  803ac8:	1000021e 	bne	r2,zero,803ad4 <logic+0x3344>
  803acc:	00800044 	movi	r2,1
  803ad0:	00000106 	br	803ad8 <logic+0x3348>
  803ad4:	0005883a 	mov	r2,zero
  803ad8:	1007883a 	mov	r3,r2
  803adc:	e0bffc17 	ldw	r2,-16(fp)
  803ae0:	10c05ec5 	stb	r3,379(r2)
  d->_cg92 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803ae4:	e0bffc17 	ldw	r2,-16(fp)
  803ae8:	10801bc3 	ldbu	r2,111(r2)
  803aec:	10803fcc 	andi	r2,r2,255
  803af0:	1080201c 	xori	r2,r2,128
  803af4:	10bfe004 	addi	r2,r2,-128
  803af8:	1000061e 	bne	r2,zero,803b14 <logic+0x3384>
  803afc:	e0bffc17 	ldw	r2,-16(fp)
  803b00:	10801c03 	ldbu	r2,112(r2)
  803b04:	10803fcc 	andi	r2,r2,255
  803b08:	1080201c 	xori	r2,r2,128
  803b0c:	10bfe004 	addi	r2,r2,-128
  803b10:	10000226 	beq	r2,zero,803b1c <logic+0x338c>
  803b14:	00800044 	movi	r2,1
  803b18:	00000106 	br	803b20 <logic+0x3390>
  803b1c:	0005883a 	mov	r2,zero
  803b20:	1007883a 	mov	r3,r2
  803b24:	e0bffc17 	ldw	r2,-16(fp)
  803b28:	10c04e45 	stb	r3,313(r2)
  d->_g116 = d->_g86 && !d->_cg89 || d->_g88_e2 && !d->_cg92;
  803b2c:	e0bffc17 	ldw	r2,-16(fp)
  803b30:	10802c83 	ldbu	r2,178(r2)
  803b34:	10803fcc 	andi	r2,r2,255
  803b38:	1080201c 	xori	r2,r2,128
  803b3c:	10bfe004 	addi	r2,r2,-128
  803b40:	10000626 	beq	r2,zero,803b5c <logic+0x33cc>
  803b44:	e0bffc17 	ldw	r2,-16(fp)
  803b48:	10804e03 	ldbu	r2,312(r2)
  803b4c:	10803fcc 	andi	r2,r2,255
  803b50:	1080201c 	xori	r2,r2,128
  803b54:	10bfe004 	addi	r2,r2,-128
  803b58:	10000c26 	beq	r2,zero,803b8c <logic+0x33fc>
  803b5c:	e0bffc17 	ldw	r2,-16(fp)
  803b60:	10805ec3 	ldbu	r2,379(r2)
  803b64:	10803fcc 	andi	r2,r2,255
  803b68:	1080201c 	xori	r2,r2,128
  803b6c:	10bfe004 	addi	r2,r2,-128
  803b70:	10000826 	beq	r2,zero,803b94 <logic+0x3404>
  803b74:	e0bffc17 	ldw	r2,-16(fp)
  803b78:	10804e43 	ldbu	r2,313(r2)
  803b7c:	10803fcc 	andi	r2,r2,255
  803b80:	1080201c 	xori	r2,r2,128
  803b84:	10bfe004 	addi	r2,r2,-128
  803b88:	1000021e 	bne	r2,zero,803b94 <logic+0x3404>
  803b8c:	00800044 	movi	r2,1
  803b90:	00000106 	br	803b98 <logic+0x3408>
  803b94:	0005883a 	mov	r2,zero
  803b98:	1007883a 	mov	r3,r2
  803b9c:	e0bffc17 	ldw	r2,-16(fp)
  803ba0:	10c03245 	stb	r3,201(r2)
  d->_g114 = d->_g97 || d->_g98 && !d->VS;
  803ba4:	e0bffc17 	ldw	r2,-16(fp)
  803ba8:	10802e83 	ldbu	r2,186(r2)
  803bac:	10803fcc 	andi	r2,r2,255
  803bb0:	1080201c 	xori	r2,r2,128
  803bb4:	10bfe004 	addi	r2,r2,-128
  803bb8:	10000c1e 	bne	r2,zero,803bec <logic+0x345c>
  803bbc:	e0bffc17 	ldw	r2,-16(fp)
  803bc0:	10802ec3 	ldbu	r2,187(r2)
  803bc4:	10803fcc 	andi	r2,r2,255
  803bc8:	1080201c 	xori	r2,r2,128
  803bcc:	10bfe004 	addi	r2,r2,-128
  803bd0:	10000826 	beq	r2,zero,803bf4 <logic+0x3464>
  803bd4:	e0bffc17 	ldw	r2,-16(fp)
  803bd8:	10801743 	ldbu	r2,93(r2)
  803bdc:	10803fcc 	andi	r2,r2,255
  803be0:	1080201c 	xori	r2,r2,128
  803be4:	10bfe004 	addi	r2,r2,-128
  803be8:	1000021e 	bne	r2,zero,803bf4 <logic+0x3464>
  803bec:	00800044 	movi	r2,1
  803bf0:	00000106 	br	803bf8 <logic+0x3468>
  803bf4:	0005883a 	mov	r2,zero
  803bf8:	1007883a 	mov	r3,r2
  803bfc:	e0bffc17 	ldw	r2,-16(fp)
  803c00:	10c031c5 	stb	r3,199(r2)
  d->_g80 = d->_g112 && !d->_cg113;
  803c04:	e0bffc17 	ldw	r2,-16(fp)
  803c08:	10803143 	ldbu	r2,197(r2)
  803c0c:	10803fcc 	andi	r2,r2,255
  803c10:	1080201c 	xori	r2,r2,128
  803c14:	10bfe004 	addi	r2,r2,-128
  803c18:	10000826 	beq	r2,zero,803c3c <logic+0x34ac>
  803c1c:	e0bffc17 	ldw	r2,-16(fp)
  803c20:	10805043 	ldbu	r2,321(r2)
  803c24:	10803fcc 	andi	r2,r2,255
  803c28:	1080201c 	xori	r2,r2,128
  803c2c:	10bfe004 	addi	r2,r2,-128
  803c30:	1000021e 	bne	r2,zero,803c3c <logic+0x34ac>
  803c34:	00800044 	movi	r2,1
  803c38:	00000106 	br	803c40 <logic+0x34b0>
  803c3c:	0005883a 	mov	r2,zero
  803c40:	1007883a 	mov	r3,r2
  803c44:	e0bffc17 	ldw	r2,-16(fp)
  803c48:	10c02b85 	stb	r3,174(r2)
  if (d->_g80) {
  803c4c:	e0bffc17 	ldw	r2,-16(fp)
  803c50:	10802b83 	ldbu	r2,174(r2)
  803c54:	10803fcc 	andi	r2,r2,255
  803c58:	1080201c 	xori	r2,r2,128
  803c5c:	10bfe004 	addi	r2,r2,-128
  803c60:	10000626 	beq	r2,zero,803c7c <logic+0x34ec>
    d->VS_i |= 1;
  803c64:	e0bffc17 	ldw	r2,-16(fp)
  803c68:	10801903 	ldbu	r2,100(r2)
  803c6c:	10800054 	ori	r2,r2,1
  803c70:	1007883a 	mov	r3,r2
  803c74:	e0bffc17 	ldw	r2,-16(fp)
  803c78:	10c01905 	stb	r3,100(r2)
  }
  d->_g87 = d->_g96 && d->_cg100 || d->_g80;
  803c7c:	e0bffc17 	ldw	r2,-16(fp)
  803c80:	10802e43 	ldbu	r2,185(r2)
  803c84:	10803fcc 	andi	r2,r2,255
  803c88:	1080201c 	xori	r2,r2,128
  803c8c:	10bfe004 	addi	r2,r2,-128
  803c90:	10000626 	beq	r2,zero,803cac <logic+0x351c>
  803c94:	e0bffc17 	ldw	r2,-16(fp)
  803c98:	10804f03 	ldbu	r2,316(r2)
  803c9c:	10803fcc 	andi	r2,r2,255
  803ca0:	1080201c 	xori	r2,r2,128
  803ca4:	10bfe004 	addi	r2,r2,-128
  803ca8:	1000061e 	bne	r2,zero,803cc4 <logic+0x3534>
  803cac:	e0bffc17 	ldw	r2,-16(fp)
  803cb0:	10802b83 	ldbu	r2,174(r2)
  803cb4:	10803fcc 	andi	r2,r2,255
  803cb8:	1080201c 	xori	r2,r2,128
  803cbc:	10bfe004 	addi	r2,r2,-128
  803cc0:	10000226 	beq	r2,zero,803ccc <logic+0x353c>
  803cc4:	00800044 	movi	r2,1
  803cc8:	00000106 	br	803cd0 <logic+0x3540>
  803ccc:	0005883a 	mov	r2,zero
  803cd0:	1007883a 	mov	r3,r2
  803cd4:	e0bffc17 	ldw	r2,-16(fp)
  803cd8:	10c02cc5 	stb	r3,179(r2)
  if (d->_g87) {
  803cdc:	e0bffc17 	ldw	r2,-16(fp)
  803ce0:	10802cc3 	ldbu	r2,179(r2)
  803ce4:	10803fcc 	andi	r2,r2,255
  803ce8:	1080201c 	xori	r2,r2,128
  803cec:	10bfe004 	addi	r2,r2,-128
  803cf0:	10000426 	beq	r2,zero,803d04 <logic+0x3574>
    d->_heart2_local__Atrig8 = 0;
  803cf4:	e0bffc17 	ldw	r2,-16(fp)
  803cf8:	10001c45 	stb	zero,113(r2)
    d->_heart2_local__Atrig9 = 0;
  803cfc:	e0bffc17 	ldw	r2,-16(fp)
  803d00:	10001c85 	stb	zero,114(r2)
  }
  d->_cg102 = d->_heart2_local__Atrig8 || d->_heart2_local__Atrig9;
  803d04:	e0bffc17 	ldw	r2,-16(fp)
  803d08:	10801c43 	ldbu	r2,113(r2)
  803d0c:	10803fcc 	andi	r2,r2,255
  803d10:	1080201c 	xori	r2,r2,128
  803d14:	10bfe004 	addi	r2,r2,-128
  803d18:	1000061e 	bne	r2,zero,803d34 <logic+0x35a4>
  803d1c:	e0bffc17 	ldw	r2,-16(fp)
  803d20:	10801c83 	ldbu	r2,114(r2)
  803d24:	10803fcc 	andi	r2,r2,255
  803d28:	1080201c 	xori	r2,r2,128
  803d2c:	10bfe004 	addi	r2,r2,-128
  803d30:	10000226 	beq	r2,zero,803d3c <logic+0x35ac>
  803d34:	00800044 	movi	r2,1
  803d38:	00000106 	br	803d40 <logic+0x35b0>
  803d3c:	0005883a 	mov	r2,zero
  803d40:	1007883a 	mov	r3,r2
  803d44:	e0bffc17 	ldw	r2,-16(fp)
  803d48:	10c04f45 	stb	r3,317(r2)
  d->_g83 = d->_g87 && !d->_cg102 || d->_g55 && !d->_cg104;
  803d4c:	e0bffc17 	ldw	r2,-16(fp)
  803d50:	10802cc3 	ldbu	r2,179(r2)
  803d54:	10803fcc 	andi	r2,r2,255
  803d58:	1080201c 	xori	r2,r2,128
  803d5c:	10bfe004 	addi	r2,r2,-128
  803d60:	10000626 	beq	r2,zero,803d7c <logic+0x35ec>
  803d64:	e0bffc17 	ldw	r2,-16(fp)
  803d68:	10804f43 	ldbu	r2,317(r2)
  803d6c:	10803fcc 	andi	r2,r2,255
  803d70:	1080201c 	xori	r2,r2,128
  803d74:	10bfe004 	addi	r2,r2,-128
  803d78:	10000c26 	beq	r2,zero,803dac <logic+0x361c>
  803d7c:	e0bffc17 	ldw	r2,-16(fp)
  803d80:	108027c3 	ldbu	r2,159(r2)
  803d84:	10803fcc 	andi	r2,r2,255
  803d88:	1080201c 	xori	r2,r2,128
  803d8c:	10bfe004 	addi	r2,r2,-128
  803d90:	10000826 	beq	r2,zero,803db4 <logic+0x3624>
  803d94:	e0bffc17 	ldw	r2,-16(fp)
  803d98:	10804f83 	ldbu	r2,318(r2)
  803d9c:	10803fcc 	andi	r2,r2,255
  803da0:	1080201c 	xori	r2,r2,128
  803da4:	10bfe004 	addi	r2,r2,-128
  803da8:	1000021e 	bne	r2,zero,803db4 <logic+0x3624>
  803dac:	00800044 	movi	r2,1
  803db0:	00000106 	br	803db8 <logic+0x3628>
  803db4:	0005883a 	mov	r2,zero
  803db8:	1007883a 	mov	r3,r2
  803dbc:	e0bffc17 	ldw	r2,-16(fp)
  803dc0:	10c02c05 	stb	r3,176(r2)
  d->_g89 = d->_g87 || d->_g63 && !d->VS;
  803dc4:	e0bffc17 	ldw	r2,-16(fp)
  803dc8:	10802cc3 	ldbu	r2,179(r2)
  803dcc:	10803fcc 	andi	r2,r2,255
  803dd0:	1080201c 	xori	r2,r2,128
  803dd4:	10bfe004 	addi	r2,r2,-128
  803dd8:	10000c1e 	bne	r2,zero,803e0c <logic+0x367c>
  803ddc:	e0bffc17 	ldw	r2,-16(fp)
  803de0:	10802943 	ldbu	r2,165(r2)
  803de4:	10803fcc 	andi	r2,r2,255
  803de8:	1080201c 	xori	r2,r2,128
  803dec:	10bfe004 	addi	r2,r2,-128
  803df0:	10000826 	beq	r2,zero,803e14 <logic+0x3684>
  803df4:	e0bffc17 	ldw	r2,-16(fp)
  803df8:	10801743 	ldbu	r2,93(r2)
  803dfc:	10803fcc 	andi	r2,r2,255
  803e00:	1080201c 	xori	r2,r2,128
  803e04:	10bfe004 	addi	r2,r2,-128
  803e08:	1000021e 	bne	r2,zero,803e14 <logic+0x3684>
  803e0c:	00800044 	movi	r2,1
  803e10:	00000106 	br	803e18 <logic+0x3688>
  803e14:	0005883a 	mov	r2,zero
  803e18:	1007883a 	mov	r3,r2
  803e1c:	e0bffc17 	ldw	r2,-16(fp)
  803e20:	10c02d45 	stb	r3,181(r2)
  d->_g92 = d->_pg129;
  803e24:	e0bffc17 	ldw	r2,-16(fp)
  803e28:	10c06883 	ldbu	r3,418(r2)
  803e2c:	e0bffc17 	ldw	r2,-16(fp)
  803e30:	10c02dc5 	stb	r3,183(r2)
  if (d->_g92) {
  803e34:	e0bffc17 	ldw	r2,-16(fp)
  803e38:	10802dc3 	ldbu	r2,183(r2)
  803e3c:	10803fcc 	andi	r2,r2,255
  803e40:	1080201c 	xori	r2,r2,128
  803e44:	10bfe004 	addi	r2,r2,-128
  803e48:	10001226 	beq	r2,zero,803e94 <logic+0x3704>
    d->_region3_null_PVARP += d->deltaT;
  803e4c:	e13ffc17 	ldw	r4,-16(fp)
  803e50:	20800d17 	ldw	r2,52(r4)
  803e54:	20c00e17 	ldw	r3,56(r4)
  803e58:	e1bffc17 	ldw	r6,-16(fp)
  803e5c:	31001317 	ldw	r4,76(r6)
  803e60:	31401417 	ldw	r5,80(r6)
  803e64:	200d883a 	mov	r6,r4
  803e68:	280f883a 	mov	r7,r5
  803e6c:	1009883a 	mov	r4,r2
  803e70:	180b883a 	mov	r5,r3
  803e74:	08078c40 	call	8078c4 <__adddf3>
  803e78:	1009883a 	mov	r4,r2
  803e7c:	180b883a 	mov	r5,r3
  803e80:	2005883a 	mov	r2,r4
  803e84:	2807883a 	mov	r3,r5
  803e88:	e13ffc17 	ldw	r4,-16(fp)
  803e8c:	20800d15 	stw	r2,52(r4)
  803e90:	20c00e15 	stw	r3,56(r4)
  }
  d->_g77 = !d->_g92;
  803e94:	e0bffc17 	ldw	r2,-16(fp)
  803e98:	10802dc3 	ldbu	r2,183(r2)
  803e9c:	10803fcc 	andi	r2,r2,255
  803ea0:	1080201c 	xori	r2,r2,128
  803ea4:	10bfe004 	addi	r2,r2,-128
  803ea8:	1005003a 	cmpeq	r2,r2,zero
  803eac:	1007883a 	mov	r3,r2
  803eb0:	e0bffc17 	ldw	r2,-16(fp)
  803eb4:	10c02b45 	stb	r3,173(r2)
  d->_g98 = d->_pg134;
  803eb8:	e0bffc17 	ldw	r2,-16(fp)
  803ebc:	10c068c3 	ldbu	r3,419(r2)
  803ec0:	e0bffc17 	ldw	r2,-16(fp)
  803ec4:	10c02ec5 	stb	r3,187(r2)
  d->_cg150 = d->v;
  803ec8:	e0bffc17 	ldw	r2,-16(fp)
  803ecc:	10c018c3 	ldbu	r3,99(r2)
  803ed0:	e0bffc17 	ldw	r2,-16(fp)
  803ed4:	10c05405 	stb	r3,336(r2)
  d->_g113 = d->_g98 && d->_cg150;
  803ed8:	e0bffc17 	ldw	r2,-16(fp)
  803edc:	10802ec3 	ldbu	r2,187(r2)
  803ee0:	10803fcc 	andi	r2,r2,255
  803ee4:	1080201c 	xori	r2,r2,128
  803ee8:	10bfe004 	addi	r2,r2,-128
  803eec:	10000826 	beq	r2,zero,803f10 <logic+0x3780>
  803ef0:	e0bffc17 	ldw	r2,-16(fp)
  803ef4:	10805403 	ldbu	r2,336(r2)
  803ef8:	10803fcc 	andi	r2,r2,255
  803efc:	1080201c 	xori	r2,r2,128
  803f00:	10bfe004 	addi	r2,r2,-128
  803f04:	10000226 	beq	r2,zero,803f10 <logic+0x3780>
  803f08:	00800044 	movi	r2,1
  803f0c:	00000106 	br	803f14 <logic+0x3784>
  803f10:	0005883a 	mov	r2,zero
  803f14:	1007883a 	mov	r3,r2
  803f18:	e0bffc17 	ldw	r2,-16(fp)
  803f1c:	10c03185 	stb	r3,198(r2)
  if (d->_g113) {
  803f20:	e0bffc17 	ldw	r2,-16(fp)
  803f24:	10803183 	ldbu	r2,198(r2)
  803f28:	10803fcc 	andi	r2,r2,255
  803f2c:	1080201c 	xori	r2,r2,128
  803f30:	10bfe004 	addi	r2,r2,-128
  803f34:	10000326 	beq	r2,zero,803f44 <logic+0x37b4>
    d->_heart2_local__Atrig12 = 1;
  803f38:	e0bffc17 	ldw	r2,-16(fp)
  803f3c:	00c00044 	movi	r3,1
  803f40:	10c01d45 	stb	r3,117(r2)
  }
  d->_g115 = d->_g98 && !d->_cg150;
  803f44:	e0bffc17 	ldw	r2,-16(fp)
  803f48:	10802ec3 	ldbu	r2,187(r2)
  803f4c:	10803fcc 	andi	r2,r2,255
  803f50:	1080201c 	xori	r2,r2,128
  803f54:	10bfe004 	addi	r2,r2,-128
  803f58:	10000826 	beq	r2,zero,803f7c <logic+0x37ec>
  803f5c:	e0bffc17 	ldw	r2,-16(fp)
  803f60:	10805403 	ldbu	r2,336(r2)
  803f64:	10803fcc 	andi	r2,r2,255
  803f68:	1080201c 	xori	r2,r2,128
  803f6c:	10bfe004 	addi	r2,r2,-128
  803f70:	1000021e 	bne	r2,zero,803f7c <logic+0x37ec>
  803f74:	00800044 	movi	r2,1
  803f78:	00000106 	br	803f80 <logic+0x37f0>
  803f7c:	0005883a 	mov	r2,zero
  803f80:	1007883a 	mov	r3,r2
  803f84:	e0bffc17 	ldw	r2,-16(fp)
  803f88:	10c03205 	stb	r3,200(r2)
  d->_g100 = d->_g115 && d->AS;
  803f8c:	e0bffc17 	ldw	r2,-16(fp)
  803f90:	10803203 	ldbu	r2,200(r2)
  803f94:	10803fcc 	andi	r2,r2,255
  803f98:	1080201c 	xori	r2,r2,128
  803f9c:	10bfe004 	addi	r2,r2,-128
  803fa0:	10000826 	beq	r2,zero,803fc4 <logic+0x3834>
  803fa4:	e0bffc17 	ldw	r2,-16(fp)
  803fa8:	10801703 	ldbu	r2,92(r2)
  803fac:	10803fcc 	andi	r2,r2,255
  803fb0:	1080201c 	xori	r2,r2,128
  803fb4:	10bfe004 	addi	r2,r2,-128
  803fb8:	10000226 	beq	r2,zero,803fc4 <logic+0x3834>
  803fbc:	00800044 	movi	r2,1
  803fc0:	00000106 	br	803fc8 <logic+0x3838>
  803fc4:	0005883a 	mov	r2,zero
  803fc8:	1007883a 	mov	r3,r2
  803fcc:	e0bffc17 	ldw	r2,-16(fp)
  803fd0:	10c02f45 	stb	r3,189(r2)
  if (d->_g100) {
  803fd4:	e0bffc17 	ldw	r2,-16(fp)
  803fd8:	10802f43 	ldbu	r2,189(r2)
  803fdc:	10803fcc 	andi	r2,r2,255
  803fe0:	1080201c 	xori	r2,r2,128
  803fe4:	10bfe004 	addi	r2,r2,-128
  803fe8:	10000326 	beq	r2,zero,803ff8 <logic+0x3868>
    d->_heart2_local__Atrig13 = 1;
  803fec:	e0bffc17 	ldw	r2,-16(fp)
  803ff0:	00c00044 	movi	r3,1
  803ff4:	10c01d85 	stb	r3,118(r2)
  }
  d->_cg146 = d->_heart2_local__Atrig12 || d->_heart2_local__Atrig13;
  803ff8:	e0bffc17 	ldw	r2,-16(fp)
  803ffc:	10801d43 	ldbu	r2,117(r2)
  804000:	10803fcc 	andi	r2,r2,255
  804004:	1080201c 	xori	r2,r2,128
  804008:	10bfe004 	addi	r2,r2,-128
  80400c:	1000061e 	bne	r2,zero,804028 <logic+0x3898>
  804010:	e0bffc17 	ldw	r2,-16(fp)
  804014:	10801d83 	ldbu	r2,118(r2)
  804018:	10803fcc 	andi	r2,r2,255
  80401c:	1080201c 	xori	r2,r2,128
  804020:	10bfe004 	addi	r2,r2,-128
  804024:	10000226 	beq	r2,zero,804030 <logic+0x38a0>
  804028:	00800044 	movi	r2,1
  80402c:	00000106 	br	804034 <logic+0x38a4>
  804030:	0005883a 	mov	r2,zero
  804034:	1007883a 	mov	r3,r2
  804038:	e0bffc17 	ldw	r2,-16(fp)
  80403c:	10c05385 	stb	r3,334(r2)
  d->_g104 = d->_g92 && d->_cg146;
  804040:	e0bffc17 	ldw	r2,-16(fp)
  804044:	10802dc3 	ldbu	r2,183(r2)
  804048:	10803fcc 	andi	r2,r2,255
  80404c:	1080201c 	xori	r2,r2,128
  804050:	10bfe004 	addi	r2,r2,-128
  804054:	10000826 	beq	r2,zero,804078 <logic+0x38e8>
  804058:	e0bffc17 	ldw	r2,-16(fp)
  80405c:	10805383 	ldbu	r2,334(r2)
  804060:	10803fcc 	andi	r2,r2,255
  804064:	1080201c 	xori	r2,r2,128
  804068:	10bfe004 	addi	r2,r2,-128
  80406c:	10000226 	beq	r2,zero,804078 <logic+0x38e8>
  804070:	00800044 	movi	r2,1
  804074:	00000106 	br	80407c <logic+0x38ec>
  804078:	0005883a 	mov	r2,zero
  80407c:	1007883a 	mov	r3,r2
  804080:	e0bffc17 	ldw	r2,-16(fp)
  804084:	10c02fc5 	stb	r3,191(r2)
  d->_g101 = !d->_g98;
  804088:	e0bffc17 	ldw	r2,-16(fp)
  80408c:	10802ec3 	ldbu	r2,187(r2)
  804090:	10803fcc 	andi	r2,r2,255
  804094:	1080201c 	xori	r2,r2,128
  804098:	10bfe004 	addi	r2,r2,-128
  80409c:	1005003a 	cmpeq	r2,r2,zero
  8040a0:	1007883a 	mov	r3,r2
  8040a4:	e0bffc17 	ldw	r2,-16(fp)
  8040a8:	10c02f85 	stb	r3,190(r2)
  d->_g111 = d->_g113 || d->_g100;
  8040ac:	e0bffc17 	ldw	r2,-16(fp)
  8040b0:	10803183 	ldbu	r2,198(r2)
  8040b4:	10803fcc 	andi	r2,r2,255
  8040b8:	1080201c 	xori	r2,r2,128
  8040bc:	10bfe004 	addi	r2,r2,-128
  8040c0:	1000061e 	bne	r2,zero,8040dc <logic+0x394c>
  8040c4:	e0bffc17 	ldw	r2,-16(fp)
  8040c8:	10802f43 	ldbu	r2,189(r2)
  8040cc:	10803fcc 	andi	r2,r2,255
  8040d0:	1080201c 	xori	r2,r2,128
  8040d4:	10bfe004 	addi	r2,r2,-128
  8040d8:	10000226 	beq	r2,zero,8040e4 <logic+0x3954>
  8040dc:	00800044 	movi	r2,1
  8040e0:	00000106 	br	8040e8 <logic+0x3958>
  8040e4:	0005883a 	mov	r2,zero
  8040e8:	1007883a 	mov	r3,r2
  8040ec:	e0bffc17 	ldw	r2,-16(fp)
  8040f0:	10c03105 	stb	r3,196(r2)
  d->_g150 = (d->_g77 || d->_g104) && (d->_g101 || d->_g111) && (d->_g104 || d->_g111);
  8040f4:	e0bffc17 	ldw	r2,-16(fp)
  8040f8:	10802b43 	ldbu	r2,173(r2)
  8040fc:	10803fcc 	andi	r2,r2,255
  804100:	1080201c 	xori	r2,r2,128
  804104:	10bfe004 	addi	r2,r2,-128
  804108:	1000061e 	bne	r2,zero,804124 <logic+0x3994>
  80410c:	e0bffc17 	ldw	r2,-16(fp)
  804110:	10802fc3 	ldbu	r2,191(r2)
  804114:	10803fcc 	andi	r2,r2,255
  804118:	1080201c 	xori	r2,r2,128
  80411c:	10bfe004 	addi	r2,r2,-128
  804120:	10001a26 	beq	r2,zero,80418c <logic+0x39fc>
  804124:	e0bffc17 	ldw	r2,-16(fp)
  804128:	10802f83 	ldbu	r2,190(r2)
  80412c:	10803fcc 	andi	r2,r2,255
  804130:	1080201c 	xori	r2,r2,128
  804134:	10bfe004 	addi	r2,r2,-128
  804138:	1000061e 	bne	r2,zero,804154 <logic+0x39c4>
  80413c:	e0bffc17 	ldw	r2,-16(fp)
  804140:	10803103 	ldbu	r2,196(r2)
  804144:	10803fcc 	andi	r2,r2,255
  804148:	1080201c 	xori	r2,r2,128
  80414c:	10bfe004 	addi	r2,r2,-128
  804150:	10000e26 	beq	r2,zero,80418c <logic+0x39fc>
  804154:	e0bffc17 	ldw	r2,-16(fp)
  804158:	10802fc3 	ldbu	r2,191(r2)
  80415c:	10803fcc 	andi	r2,r2,255
  804160:	1080201c 	xori	r2,r2,128
  804164:	10bfe004 	addi	r2,r2,-128
  804168:	1000061e 	bne	r2,zero,804184 <logic+0x39f4>
  80416c:	e0bffc17 	ldw	r2,-16(fp)
  804170:	10803103 	ldbu	r2,196(r2)
  804174:	10803fcc 	andi	r2,r2,255
  804178:	1080201c 	xori	r2,r2,128
  80417c:	10bfe004 	addi	r2,r2,-128
  804180:	10000226 	beq	r2,zero,80418c <logic+0x39fc>
  804184:	00800044 	movi	r2,1
  804188:	00000106 	br	804190 <logic+0x3a00>
  80418c:	0005883a 	mov	r2,zero
  804190:	1007883a 	mov	r3,r2
  804194:	e0bffc17 	ldw	r2,-16(fp)
  804198:	10c03785 	stb	r3,222(r2)
  d->_cg155 = d->_heart2_local__Atrig12;
  80419c:	e0bffc17 	ldw	r2,-16(fp)
  8041a0:	10c01d43 	ldbu	r3,117(r2)
  8041a4:	e0bffc17 	ldw	r2,-16(fp)
  8041a8:	10c05445 	stb	r3,337(r2)
  d->_g154 = d->_g150 && d->_cg155;
  8041ac:	e0bffc17 	ldw	r2,-16(fp)
  8041b0:	10803783 	ldbu	r2,222(r2)
  8041b4:	10803fcc 	andi	r2,r2,255
  8041b8:	1080201c 	xori	r2,r2,128
  8041bc:	10bfe004 	addi	r2,r2,-128
  8041c0:	10000826 	beq	r2,zero,8041e4 <logic+0x3a54>
  8041c4:	e0bffc17 	ldw	r2,-16(fp)
  8041c8:	10805443 	ldbu	r2,337(r2)
  8041cc:	10803fcc 	andi	r2,r2,255
  8041d0:	1080201c 	xori	r2,r2,128
  8041d4:	10bfe004 	addi	r2,r2,-128
  8041d8:	10000226 	beq	r2,zero,8041e4 <logic+0x3a54>
  8041dc:	00800044 	movi	r2,1
  8041e0:	00000106 	br	8041e8 <logic+0x3a58>
  8041e4:	0005883a 	mov	r2,zero
  8041e8:	1007883a 	mov	r3,r2
  8041ec:	e0bffc17 	ldw	r2,-16(fp)
  8041f0:	10c03885 	stb	r3,226(r2)
  if (d->_g154) {
  8041f4:	e0bffc17 	ldw	r2,-16(fp)
  8041f8:	10803883 	ldbu	r2,226(r2)
  8041fc:	10803fcc 	andi	r2,r2,255
  804200:	1080201c 	xori	r2,r2,128
  804204:	10bfe004 	addi	r2,r2,-128
  804208:	10000326 	beq	r2,zero,804218 <logic+0x3a88>
    d->_region3_null_PVARP = 0;
  80420c:	e0bffc17 	ldw	r2,-16(fp)
  804210:	10000d15 	stw	zero,52(r2)
  804214:	10000e15 	stw	zero,56(r2)
  }
  d->_g151 = d->_pg130_e2;
  804218:	e0bffc17 	ldw	r2,-16(fp)
  80421c:	10c06903 	ldbu	r3,420(r2)
  804220:	e0bffc17 	ldw	r2,-16(fp)
  804224:	10c037c5 	stb	r3,223(r2)
  if (d->_g151) {
  804228:	e0bffc17 	ldw	r2,-16(fp)
  80422c:	108037c3 	ldbu	r2,223(r2)
  804230:	10803fcc 	andi	r2,r2,255
  804234:	1080201c 	xori	r2,r2,128
  804238:	10bfe004 	addi	r2,r2,-128
  80423c:	10001226 	beq	r2,zero,804288 <logic+0x3af8>
    d->_region3_null_PVARP += d->deltaT;
  804240:	e13ffc17 	ldw	r4,-16(fp)
  804244:	20800d17 	ldw	r2,52(r4)
  804248:	20c00e17 	ldw	r3,56(r4)
  80424c:	e1bffc17 	ldw	r6,-16(fp)
  804250:	31001317 	ldw	r4,76(r6)
  804254:	31401417 	ldw	r5,80(r6)
  804258:	200d883a 	mov	r6,r4
  80425c:	280f883a 	mov	r7,r5
  804260:	1009883a 	mov	r4,r2
  804264:	180b883a 	mov	r5,r3
  804268:	08078c40 	call	8078c4 <__adddf3>
  80426c:	1009883a 	mov	r4,r2
  804270:	180b883a 	mov	r5,r3
  804274:	2005883a 	mov	r2,r4
  804278:	2807883a 	mov	r3,r5
  80427c:	e13ffc17 	ldw	r4,-16(fp)
  804280:	20800d15 	stw	r2,52(r4)
  804284:	20c00e15 	stw	r3,56(r4)
  }
  d->_g147_e1 = !d->_g151;
  804288:	e0bffc17 	ldw	r2,-16(fp)
  80428c:	108037c3 	ldbu	r2,223(r2)
  804290:	10803fcc 	andi	r2,r2,255
  804294:	1080201c 	xori	r2,r2,128
  804298:	10bfe004 	addi	r2,r2,-128
  80429c:	1005003a 	cmpeq	r2,r2,zero
  8042a0:	1007883a 	mov	r3,r2
  8042a4:	e0bffc17 	ldw	r2,-16(fp)
  8042a8:	10c06085 	stb	r3,386(r2)
  d->_g152 = d->_pg158;
  8042ac:	e0bffc17 	ldw	r2,-16(fp)
  8042b0:	10c06943 	ldbu	r3,421(r2)
  8042b4:	e0bffc17 	ldw	r2,-16(fp)
  8042b8:	10c03805 	stb	r3,224(r2)
  d->_cg137 = d->_region3_null_PVARP >= d->PVARP_time;
  8042bc:	e0bffc17 	ldw	r2,-16(fp)
  8042c0:	14000d17 	ldw	r16,52(r2)
  8042c4:	14400e17 	ldw	r17,56(r2)
  8042c8:	e0bffc17 	ldw	r2,-16(fp)
  8042cc:	10800117 	ldw	r2,4(r2)
  8042d0:	1009883a 	mov	r4,r2
  8042d4:	0808c3c0 	call	808c3c <__floatsidf>
  8042d8:	1009883a 	mov	r4,r2
  8042dc:	180b883a 	mov	r5,r3
  8042e0:	04800044 	movi	r18,1
  8042e4:	200d883a 	mov	r6,r4
  8042e8:	280f883a 	mov	r7,r5
  8042ec:	8009883a 	mov	r4,r16
  8042f0:	880b883a 	mov	r5,r17
  8042f4:	08081700 	call	808170 <__gedf2>
  8042f8:	1000010e 	bge	r2,zero,804300 <logic+0x3b70>
  8042fc:	0025883a 	mov	r18,zero
  804300:	9007883a 	mov	r3,r18
  804304:	e0bffc17 	ldw	r2,-16(fp)
  804308:	10c052c5 	stb	r3,331(r2)
  d->_g147 = d->_g152 && d->_cg137;
  80430c:	e0bffc17 	ldw	r2,-16(fp)
  804310:	10803803 	ldbu	r2,224(r2)
  804314:	10803fcc 	andi	r2,r2,255
  804318:	1080201c 	xori	r2,r2,128
  80431c:	10bfe004 	addi	r2,r2,-128
  804320:	10000826 	beq	r2,zero,804344 <logic+0x3bb4>
  804324:	e0bffc17 	ldw	r2,-16(fp)
  804328:	108052c3 	ldbu	r2,331(r2)
  80432c:	10803fcc 	andi	r2,r2,255
  804330:	1080201c 	xori	r2,r2,128
  804334:	10bfe004 	addi	r2,r2,-128
  804338:	10000226 	beq	r2,zero,804344 <logic+0x3bb4>
  80433c:	00800044 	movi	r2,1
  804340:	00000106 	br	804348 <logic+0x3bb8>
  804344:	0005883a 	mov	r2,zero
  804348:	1007883a 	mov	r3,r2
  80434c:	e0bffc17 	ldw	r2,-16(fp)
  804350:	10c03745 	stb	r3,221(r2)
  if (d->_g147) {
  804354:	e0bffc17 	ldw	r2,-16(fp)
  804358:	10803743 	ldbu	r2,221(r2)
  80435c:	10803fcc 	andi	r2,r2,255
  804360:	1080201c 	xori	r2,r2,128
  804364:	10bfe004 	addi	r2,r2,-128
  804368:	10000326 	beq	r2,zero,804378 <logic+0x3be8>
    d->_heart2_local__Atrig10 = 1;
  80436c:	e0bffc17 	ldw	r2,-16(fp)
  804370:	00c00044 	movi	r3,1
  804374:	10c01cc5 	stb	r3,115(r2)
  }
  d->_g152_e2 = d->_g152 && !d->_cg137;
  804378:	e0bffc17 	ldw	r2,-16(fp)
  80437c:	10803803 	ldbu	r2,224(r2)
  804380:	10803fcc 	andi	r2,r2,255
  804384:	1080201c 	xori	r2,r2,128
  804388:	10bfe004 	addi	r2,r2,-128
  80438c:	10000826 	beq	r2,zero,8043b0 <logic+0x3c20>
  804390:	e0bffc17 	ldw	r2,-16(fp)
  804394:	108052c3 	ldbu	r2,331(r2)
  804398:	10803fcc 	andi	r2,r2,255
  80439c:	1080201c 	xori	r2,r2,128
  8043a0:	10bfe004 	addi	r2,r2,-128
  8043a4:	1000021e 	bne	r2,zero,8043b0 <logic+0x3c20>
  8043a8:	00800044 	movi	r2,1
  8043ac:	00000106 	br	8043b4 <logic+0x3c24>
  8043b0:	0005883a 	mov	r2,zero
  8043b4:	1007883a 	mov	r3,r2
  8043b8:	e0bffc17 	ldw	r2,-16(fp)
  8043bc:	10c060c5 	stb	r3,387(r2)
  d->_g141 = d->_g152_e2 && d->AS;
  8043c0:	e0bffc17 	ldw	r2,-16(fp)
  8043c4:	108060c3 	ldbu	r2,387(r2)
  8043c8:	10803fcc 	andi	r2,r2,255
  8043cc:	1080201c 	xori	r2,r2,128
  8043d0:	10bfe004 	addi	r2,r2,-128
  8043d4:	10000826 	beq	r2,zero,8043f8 <logic+0x3c68>
  8043d8:	e0bffc17 	ldw	r2,-16(fp)
  8043dc:	10801703 	ldbu	r2,92(r2)
  8043e0:	10803fcc 	andi	r2,r2,255
  8043e4:	1080201c 	xori	r2,r2,128
  8043e8:	10bfe004 	addi	r2,r2,-128
  8043ec:	10000226 	beq	r2,zero,8043f8 <logic+0x3c68>
  8043f0:	00800044 	movi	r2,1
  8043f4:	00000106 	br	8043fc <logic+0x3c6c>
  8043f8:	0005883a 	mov	r2,zero
  8043fc:	1007883a 	mov	r3,r2
  804400:	e0bffc17 	ldw	r2,-16(fp)
  804404:	10c03645 	stb	r3,217(r2)
  if (d->_g141) {
  804408:	e0bffc17 	ldw	r2,-16(fp)
  80440c:	10803643 	ldbu	r2,217(r2)
  804410:	10803fcc 	andi	r2,r2,255
  804414:	1080201c 	xori	r2,r2,128
  804418:	10bfe004 	addi	r2,r2,-128
  80441c:	10000326 	beq	r2,zero,80442c <logic+0x3c9c>
    d->_heart2_local__Atrig11 = 1;
  804420:	e0bffc17 	ldw	r2,-16(fp)
  804424:	00c00044 	movi	r3,1
  804428:	10c01d05 	stb	r3,116(r2)
  }
  d->_cg122 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  80442c:	e0bffc17 	ldw	r2,-16(fp)
  804430:	10801cc3 	ldbu	r2,115(r2)
  804434:	10803fcc 	andi	r2,r2,255
  804438:	1080201c 	xori	r2,r2,128
  80443c:	10bfe004 	addi	r2,r2,-128
  804440:	1000061e 	bne	r2,zero,80445c <logic+0x3ccc>
  804444:	e0bffc17 	ldw	r2,-16(fp)
  804448:	10801d03 	ldbu	r2,116(r2)
  80444c:	10803fcc 	andi	r2,r2,255
  804450:	1080201c 	xori	r2,r2,128
  804454:	10bfe004 	addi	r2,r2,-128
  804458:	10000226 	beq	r2,zero,804464 <logic+0x3cd4>
  80445c:	00800044 	movi	r2,1
  804460:	00000106 	br	804468 <logic+0x3cd8>
  804464:	0005883a 	mov	r2,zero
  804468:	1007883a 	mov	r3,r2
  80446c:	e0bffc17 	ldw	r2,-16(fp)
  804470:	10c050c5 	stb	r3,323(r2)
  d->_g123 = d->_g151 && d->_cg122;
  804474:	e0bffc17 	ldw	r2,-16(fp)
  804478:	108037c3 	ldbu	r2,223(r2)
  80447c:	10803fcc 	andi	r2,r2,255
  804480:	1080201c 	xori	r2,r2,128
  804484:	10bfe004 	addi	r2,r2,-128
  804488:	10000826 	beq	r2,zero,8044ac <logic+0x3d1c>
  80448c:	e0bffc17 	ldw	r2,-16(fp)
  804490:	108050c3 	ldbu	r2,323(r2)
  804494:	10803fcc 	andi	r2,r2,255
  804498:	1080201c 	xori	r2,r2,128
  80449c:	10bfe004 	addi	r2,r2,-128
  8044a0:	10000226 	beq	r2,zero,8044ac <logic+0x3d1c>
  8044a4:	00800044 	movi	r2,1
  8044a8:	00000106 	br	8044b0 <logic+0x3d20>
  8044ac:	0005883a 	mov	r2,zero
  8044b0:	1007883a 	mov	r3,r2
  8044b4:	e0bffc17 	ldw	r2,-16(fp)
  8044b8:	10c03305 	stb	r3,204(r2)
  d->_g133 = d->_pg156;
  8044bc:	e0bffc17 	ldw	r2,-16(fp)
  8044c0:	10c06983 	ldbu	r3,422(r2)
  8044c4:	e0bffc17 	ldw	r2,-16(fp)
  8044c8:	10c034c5 	stb	r3,211(r2)
  d->_g127 = d->_pg139;
  8044cc:	e0bffc17 	ldw	r2,-16(fp)
  8044d0:	10c069c3 	ldbu	r3,423(r2)
  8044d4:	e0bffc17 	ldw	r2,-16(fp)
  8044d8:	10c03385 	stb	r3,206(r2)
  d->_g130_e2 = !(d->_g133 || d->_g127);
  8044dc:	e0bffc17 	ldw	r2,-16(fp)
  8044e0:	108034c3 	ldbu	r2,211(r2)
  8044e4:	10803fcc 	andi	r2,r2,255
  8044e8:	1080201c 	xori	r2,r2,128
  8044ec:	10bfe004 	addi	r2,r2,-128
  8044f0:	1000081e 	bne	r2,zero,804514 <logic+0x3d84>
  8044f4:	e0bffc17 	ldw	r2,-16(fp)
  8044f8:	10803383 	ldbu	r2,206(r2)
  8044fc:	10803fcc 	andi	r2,r2,255
  804500:	1080201c 	xori	r2,r2,128
  804504:	10bfe004 	addi	r2,r2,-128
  804508:	1000021e 	bne	r2,zero,804514 <logic+0x3d84>
  80450c:	00800044 	movi	r2,1
  804510:	00000106 	br	804518 <logic+0x3d88>
  804514:	0005883a 	mov	r2,zero
  804518:	1007883a 	mov	r3,r2
  80451c:	e0bffc17 	ldw	r2,-16(fp)
  804520:	10c06005 	stb	r3,384(r2)
  d->_g127 = d->_g127 || d->_g133;
  804524:	e0bffc17 	ldw	r2,-16(fp)
  804528:	10803383 	ldbu	r2,206(r2)
  80452c:	10803fcc 	andi	r2,r2,255
  804530:	1080201c 	xori	r2,r2,128
  804534:	10bfe004 	addi	r2,r2,-128
  804538:	1000061e 	bne	r2,zero,804554 <logic+0x3dc4>
  80453c:	e0bffc17 	ldw	r2,-16(fp)
  804540:	108034c3 	ldbu	r2,211(r2)
  804544:	10803fcc 	andi	r2,r2,255
  804548:	1080201c 	xori	r2,r2,128
  80454c:	10bfe004 	addi	r2,r2,-128
  804550:	10000226 	beq	r2,zero,80455c <logic+0x3dcc>
  804554:	00800044 	movi	r2,1
  804558:	00000106 	br	804560 <logic+0x3dd0>
  80455c:	0005883a 	mov	r2,zero
  804560:	1007883a 	mov	r3,r2
  804564:	e0bffc17 	ldw	r2,-16(fp)
  804568:	10c03385 	stb	r3,206(r2)
  d->_cg128 = d->_region3_null_PVARP < d->PVARP_time;
  80456c:	e0bffc17 	ldw	r2,-16(fp)
  804570:	14000d17 	ldw	r16,52(r2)
  804574:	14400e17 	ldw	r17,56(r2)
  804578:	e0bffc17 	ldw	r2,-16(fp)
  80457c:	10800117 	ldw	r2,4(r2)
  804580:	1009883a 	mov	r4,r2
  804584:	0808c3c0 	call	808c3c <__floatsidf>
  804588:	1009883a 	mov	r4,r2
  80458c:	180b883a 	mov	r5,r3
  804590:	04800044 	movi	r18,1
  804594:	200d883a 	mov	r6,r4
  804598:	280f883a 	mov	r7,r5
  80459c:	8009883a 	mov	r4,r16
  8045a0:	880b883a 	mov	r5,r17
  8045a4:	080824c0 	call	80824c <__ledf2>
  8045a8:	10000116 	blt	r2,zero,8045b0 <logic+0x3e20>
  8045ac:	0025883a 	mov	r18,zero
  8045b0:	9007883a 	mov	r3,r18
  8045b4:	e0bffc17 	ldw	r2,-16(fp)
  8045b8:	10c051c5 	stb	r3,327(r2)
  d->_g133 = d->_g127 && d->_cg128;
  8045bc:	e0bffc17 	ldw	r2,-16(fp)
  8045c0:	10803383 	ldbu	r2,206(r2)
  8045c4:	10803fcc 	andi	r2,r2,255
  8045c8:	1080201c 	xori	r2,r2,128
  8045cc:	10bfe004 	addi	r2,r2,-128
  8045d0:	10000826 	beq	r2,zero,8045f4 <logic+0x3e64>
  8045d4:	e0bffc17 	ldw	r2,-16(fp)
  8045d8:	108051c3 	ldbu	r2,327(r2)
  8045dc:	10803fcc 	andi	r2,r2,255
  8045e0:	1080201c 	xori	r2,r2,128
  8045e4:	10bfe004 	addi	r2,r2,-128
  8045e8:	10000226 	beq	r2,zero,8045f4 <logic+0x3e64>
  8045ec:	00800044 	movi	r2,1
  8045f0:	00000106 	br	8045f8 <logic+0x3e68>
  8045f4:	0005883a 	mov	r2,zero
  8045f8:	1007883a 	mov	r3,r2
  8045fc:	e0bffc17 	ldw	r2,-16(fp)
  804600:	10c034c5 	stb	r3,211(r2)
  if (d->_g133) {
  804604:	e0bffc17 	ldw	r2,-16(fp)
  804608:	108034c3 	ldbu	r2,211(r2)
  80460c:	10803fcc 	andi	r2,r2,255
  804610:	1080201c 	xori	r2,r2,128
  804614:	10bfe004 	addi	r2,r2,-128
  804618:	10003426 	beq	r2,zero,8046ec <logic+0x3f5c>
    d->sleepT = (d->sleepT < (d->PVARP_time - d->_region3_null_PVARP)) ? d->sleepT : (d->PVARP_time - d->_region3_null_PVARP);
  80461c:	e0bffc17 	ldw	r2,-16(fp)
  804620:	14001517 	ldw	r16,84(r2)
  804624:	14401617 	ldw	r17,88(r2)
  804628:	e0bffc17 	ldw	r2,-16(fp)
  80462c:	10800117 	ldw	r2,4(r2)
  804630:	1009883a 	mov	r4,r2
  804634:	0808c3c0 	call	808c3c <__floatsidf>
  804638:	1011883a 	mov	r8,r2
  80463c:	1813883a 	mov	r9,r3
  804640:	e13ffc17 	ldw	r4,-16(fp)
  804644:	20800d17 	ldw	r2,52(r4)
  804648:	20c00e17 	ldw	r3,56(r4)
  80464c:	100d883a 	mov	r6,r2
  804650:	180f883a 	mov	r7,r3
  804654:	4009883a 	mov	r4,r8
  804658:	480b883a 	mov	r5,r9
  80465c:	08083400 	call	808340 <__subdf3>
  804660:	1009883a 	mov	r4,r2
  804664:	180b883a 	mov	r5,r3
  804668:	2005883a 	mov	r2,r4
  80466c:	2807883a 	mov	r3,r5
  804670:	100d883a 	mov	r6,r2
  804674:	180f883a 	mov	r7,r3
  804678:	8009883a 	mov	r4,r16
  80467c:	880b883a 	mov	r5,r17
  804680:	080824c0 	call	80824c <__ledf2>
  804684:	1000040e 	bge	r2,zero,804698 <logic+0x3f08>
  804688:	e13ffc17 	ldw	r4,-16(fp)
  80468c:	20801517 	ldw	r2,84(r4)
  804690:	20c01617 	ldw	r3,88(r4)
  804694:	00001206 	br	8046e0 <logic+0x3f50>
  804698:	e0bffc17 	ldw	r2,-16(fp)
  80469c:	10800117 	ldw	r2,4(r2)
  8046a0:	1009883a 	mov	r4,r2
  8046a4:	0808c3c0 	call	808c3c <__floatsidf>
  8046a8:	1011883a 	mov	r8,r2
  8046ac:	1813883a 	mov	r9,r3
  8046b0:	e13ffc17 	ldw	r4,-16(fp)
  8046b4:	20800d17 	ldw	r2,52(r4)
  8046b8:	20c00e17 	ldw	r3,56(r4)
  8046bc:	100d883a 	mov	r6,r2
  8046c0:	180f883a 	mov	r7,r3
  8046c4:	4009883a 	mov	r4,r8
  8046c8:	480b883a 	mov	r5,r9
  8046cc:	08083400 	call	808340 <__subdf3>
  8046d0:	1009883a 	mov	r4,r2
  8046d4:	180b883a 	mov	r5,r3
  8046d8:	2005883a 	mov	r2,r4
  8046dc:	2807883a 	mov	r3,r5
  8046e0:	e13ffc17 	ldw	r4,-16(fp)
  8046e4:	20801515 	stw	r2,84(r4)
  8046e8:	20c01615 	stw	r3,88(r4)
  }
  d->_cg129 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  8046ec:	e0bffc17 	ldw	r2,-16(fp)
  8046f0:	10801cc3 	ldbu	r2,115(r2)
  8046f4:	10803fcc 	andi	r2,r2,255
  8046f8:	1080201c 	xori	r2,r2,128
  8046fc:	10bfe004 	addi	r2,r2,-128
  804700:	1000061e 	bne	r2,zero,80471c <logic+0x3f8c>
  804704:	e0bffc17 	ldw	r2,-16(fp)
  804708:	10801d03 	ldbu	r2,116(r2)
  80470c:	10803fcc 	andi	r2,r2,255
  804710:	1080201c 	xori	r2,r2,128
  804714:	10bfe004 	addi	r2,r2,-128
  804718:	10000226 	beq	r2,zero,804724 <logic+0x3f94>
  80471c:	00800044 	movi	r2,1
  804720:	00000106 	br	804728 <logic+0x3f98>
  804724:	0005883a 	mov	r2,zero
  804728:	1007883a 	mov	r3,r2
  80472c:	e0bffc17 	ldw	r2,-16(fp)
  804730:	10c05185 	stb	r3,326(r2)
  d->_g128 = d->_g127 && !d->_cg128;
  804734:	e0bffc17 	ldw	r2,-16(fp)
  804738:	10803383 	ldbu	r2,206(r2)
  80473c:	10803fcc 	andi	r2,r2,255
  804740:	1080201c 	xori	r2,r2,128
  804744:	10bfe004 	addi	r2,r2,-128
  804748:	10000826 	beq	r2,zero,80476c <logic+0x3fdc>
  80474c:	e0bffc17 	ldw	r2,-16(fp)
  804750:	108051c3 	ldbu	r2,327(r2)
  804754:	10803fcc 	andi	r2,r2,255
  804758:	1080201c 	xori	r2,r2,128
  80475c:	10bfe004 	addi	r2,r2,-128
  804760:	1000021e 	bne	r2,zero,80476c <logic+0x3fdc>
  804764:	00800044 	movi	r2,1
  804768:	00000106 	br	804770 <logic+0x3fe0>
  80476c:	0005883a 	mov	r2,zero
  804770:	1007883a 	mov	r3,r2
  804774:	e0bffc17 	ldw	r2,-16(fp)
  804778:	10c033c5 	stb	r3,207(r2)
  d->_cg131 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  80477c:	e0bffc17 	ldw	r2,-16(fp)
  804780:	10801cc3 	ldbu	r2,115(r2)
  804784:	10803fcc 	andi	r2,r2,255
  804788:	1080201c 	xori	r2,r2,128
  80478c:	10bfe004 	addi	r2,r2,-128
  804790:	1000061e 	bne	r2,zero,8047ac <logic+0x401c>
  804794:	e0bffc17 	ldw	r2,-16(fp)
  804798:	10801d03 	ldbu	r2,116(r2)
  80479c:	10803fcc 	andi	r2,r2,255
  8047a0:	1080201c 	xori	r2,r2,128
  8047a4:	10bfe004 	addi	r2,r2,-128
  8047a8:	10000226 	beq	r2,zero,8047b4 <logic+0x4024>
  8047ac:	00800044 	movi	r2,1
  8047b0:	00000106 	br	8047b8 <logic+0x4028>
  8047b4:	0005883a 	mov	r2,zero
  8047b8:	1007883a 	mov	r3,r2
  8047bc:	e0bffc17 	ldw	r2,-16(fp)
  8047c0:	10c05205 	stb	r3,328(r2)
  d->_g130 = d->_g133 && d->_cg129 || d->_g128 && d->_cg131;
  8047c4:	e0bffc17 	ldw	r2,-16(fp)
  8047c8:	108034c3 	ldbu	r2,211(r2)
  8047cc:	10803fcc 	andi	r2,r2,255
  8047d0:	1080201c 	xori	r2,r2,128
  8047d4:	10bfe004 	addi	r2,r2,-128
  8047d8:	10000626 	beq	r2,zero,8047f4 <logic+0x4064>
  8047dc:	e0bffc17 	ldw	r2,-16(fp)
  8047e0:	10805183 	ldbu	r2,326(r2)
  8047e4:	10803fcc 	andi	r2,r2,255
  8047e8:	1080201c 	xori	r2,r2,128
  8047ec:	10bfe004 	addi	r2,r2,-128
  8047f0:	10000c1e 	bne	r2,zero,804824 <logic+0x4094>
  8047f4:	e0bffc17 	ldw	r2,-16(fp)
  8047f8:	108033c3 	ldbu	r2,207(r2)
  8047fc:	10803fcc 	andi	r2,r2,255
  804800:	1080201c 	xori	r2,r2,128
  804804:	10bfe004 	addi	r2,r2,-128
  804808:	10000826 	beq	r2,zero,80482c <logic+0x409c>
  80480c:	e0bffc17 	ldw	r2,-16(fp)
  804810:	10805203 	ldbu	r2,328(r2)
  804814:	10803fcc 	andi	r2,r2,255
  804818:	1080201c 	xori	r2,r2,128
  80481c:	10bfe004 	addi	r2,r2,-128
  804820:	10000226 	beq	r2,zero,80482c <logic+0x409c>
  804824:	00800044 	movi	r2,1
  804828:	00000106 	br	804830 <logic+0x40a0>
  80482c:	0005883a 	mov	r2,zero
  804830:	1007883a 	mov	r3,r2
  804834:	e0bffc17 	ldw	r2,-16(fp)
  804838:	10c03445 	stb	r3,209(r2)
  d->_g137 = !d->_g152;
  80483c:	e0bffc17 	ldw	r2,-16(fp)
  804840:	10803803 	ldbu	r2,224(r2)
  804844:	10803fcc 	andi	r2,r2,255
  804848:	1080201c 	xori	r2,r2,128
  80484c:	10bfe004 	addi	r2,r2,-128
  804850:	1005003a 	cmpeq	r2,r2,zero
  804854:	1007883a 	mov	r3,r2
  804858:	e0bffc17 	ldw	r2,-16(fp)
  80485c:	10c03545 	stb	r3,213(r2)
  d->_g138 = d->_g147 || d->_g141;
  804860:	e0bffc17 	ldw	r2,-16(fp)
  804864:	10803743 	ldbu	r2,221(r2)
  804868:	10803fcc 	andi	r2,r2,255
  80486c:	1080201c 	xori	r2,r2,128
  804870:	10bfe004 	addi	r2,r2,-128
  804874:	1000061e 	bne	r2,zero,804890 <logic+0x4100>
  804878:	e0bffc17 	ldw	r2,-16(fp)
  80487c:	10803643 	ldbu	r2,217(r2)
  804880:	10803fcc 	andi	r2,r2,255
  804884:	1080201c 	xori	r2,r2,128
  804888:	10bfe004 	addi	r2,r2,-128
  80488c:	10000226 	beq	r2,zero,804898 <logic+0x4108>
  804890:	00800044 	movi	r2,1
  804894:	00000106 	br	80489c <logic+0x410c>
  804898:	0005883a 	mov	r2,zero
  80489c:	1007883a 	mov	r3,r2
  8048a0:	e0bffc17 	ldw	r2,-16(fp)
  8048a4:	10c03585 	stb	r3,214(r2)
  d->_g141 = (d->_g147_e1 || d->_g123) && (d->_g130_e2 || d->_g130) && (d->_g137 || d->_g138) && (d->_g123 || d->_g130 || d->_g138);
  8048a8:	e0bffc17 	ldw	r2,-16(fp)
  8048ac:	10806083 	ldbu	r2,386(r2)
  8048b0:	10803fcc 	andi	r2,r2,255
  8048b4:	1080201c 	xori	r2,r2,128
  8048b8:	10bfe004 	addi	r2,r2,-128
  8048bc:	1000061e 	bne	r2,zero,8048d8 <logic+0x4148>
  8048c0:	e0bffc17 	ldw	r2,-16(fp)
  8048c4:	10803303 	ldbu	r2,204(r2)
  8048c8:	10803fcc 	andi	r2,r2,255
  8048cc:	1080201c 	xori	r2,r2,128
  8048d0:	10bfe004 	addi	r2,r2,-128
  8048d4:	10002c26 	beq	r2,zero,804988 <logic+0x41f8>
  8048d8:	e0bffc17 	ldw	r2,-16(fp)
  8048dc:	10806003 	ldbu	r2,384(r2)
  8048e0:	10803fcc 	andi	r2,r2,255
  8048e4:	1080201c 	xori	r2,r2,128
  8048e8:	10bfe004 	addi	r2,r2,-128
  8048ec:	1000061e 	bne	r2,zero,804908 <logic+0x4178>
  8048f0:	e0bffc17 	ldw	r2,-16(fp)
  8048f4:	10803443 	ldbu	r2,209(r2)
  8048f8:	10803fcc 	andi	r2,r2,255
  8048fc:	1080201c 	xori	r2,r2,128
  804900:	10bfe004 	addi	r2,r2,-128
  804904:	10002026 	beq	r2,zero,804988 <logic+0x41f8>
  804908:	e0bffc17 	ldw	r2,-16(fp)
  80490c:	10803543 	ldbu	r2,213(r2)
  804910:	10803fcc 	andi	r2,r2,255
  804914:	1080201c 	xori	r2,r2,128
  804918:	10bfe004 	addi	r2,r2,-128
  80491c:	1000061e 	bne	r2,zero,804938 <logic+0x41a8>
  804920:	e0bffc17 	ldw	r2,-16(fp)
  804924:	10803583 	ldbu	r2,214(r2)
  804928:	10803fcc 	andi	r2,r2,255
  80492c:	1080201c 	xori	r2,r2,128
  804930:	10bfe004 	addi	r2,r2,-128
  804934:	10001426 	beq	r2,zero,804988 <logic+0x41f8>
  804938:	e0bffc17 	ldw	r2,-16(fp)
  80493c:	10803303 	ldbu	r2,204(r2)
  804940:	10803fcc 	andi	r2,r2,255
  804944:	1080201c 	xori	r2,r2,128
  804948:	10bfe004 	addi	r2,r2,-128
  80494c:	10000c1e 	bne	r2,zero,804980 <logic+0x41f0>
  804950:	e0bffc17 	ldw	r2,-16(fp)
  804954:	10803443 	ldbu	r2,209(r2)
  804958:	10803fcc 	andi	r2,r2,255
  80495c:	1080201c 	xori	r2,r2,128
  804960:	10bfe004 	addi	r2,r2,-128
  804964:	1000061e 	bne	r2,zero,804980 <logic+0x41f0>
  804968:	e0bffc17 	ldw	r2,-16(fp)
  80496c:	10803583 	ldbu	r2,214(r2)
  804970:	10803fcc 	andi	r2,r2,255
  804974:	1080201c 	xori	r2,r2,128
  804978:	10bfe004 	addi	r2,r2,-128
  80497c:	10000226 	beq	r2,zero,804988 <logic+0x41f8>
  804980:	00800044 	movi	r2,1
  804984:	00000106 	br	80498c <logic+0x41fc>
  804988:	0005883a 	mov	r2,zero
  80498c:	1007883a 	mov	r3,r2
  804990:	e0bffc17 	ldw	r2,-16(fp)
  804994:	10c03645 	stb	r3,217(r2)
  d->_cg142 = d->_heart2_local__Atrig10;
  804998:	e0bffc17 	ldw	r2,-16(fp)
  80499c:	10c01cc3 	ldbu	r3,115(r2)
  8049a0:	e0bffc17 	ldw	r2,-16(fp)
  8049a4:	10c05305 	stb	r3,332(r2)
  d->_g123 = d->_g141 && !d->_cg142;
  8049a8:	e0bffc17 	ldw	r2,-16(fp)
  8049ac:	10803643 	ldbu	r2,217(r2)
  8049b0:	10803fcc 	andi	r2,r2,255
  8049b4:	1080201c 	xori	r2,r2,128
  8049b8:	10bfe004 	addi	r2,r2,-128
  8049bc:	10000826 	beq	r2,zero,8049e0 <logic+0x4250>
  8049c0:	e0bffc17 	ldw	r2,-16(fp)
  8049c4:	10805303 	ldbu	r2,332(r2)
  8049c8:	10803fcc 	andi	r2,r2,255
  8049cc:	1080201c 	xori	r2,r2,128
  8049d0:	10bfe004 	addi	r2,r2,-128
  8049d4:	1000021e 	bne	r2,zero,8049e0 <logic+0x4250>
  8049d8:	00800044 	movi	r2,1
  8049dc:	00000106 	br	8049e4 <logic+0x4254>
  8049e0:	0005883a 	mov	r2,zero
  8049e4:	1007883a 	mov	r3,r2
  8049e8:	e0bffc17 	ldw	r2,-16(fp)
  8049ec:	10c03305 	stb	r3,204(r2)
  if (d->_g123) {
  8049f0:	e0bffc17 	ldw	r2,-16(fp)
  8049f4:	10803303 	ldbu	r2,204(r2)
  8049f8:	10803fcc 	andi	r2,r2,255
  8049fc:	1080201c 	xori	r2,r2,128
  804a00:	10bfe004 	addi	r2,r2,-128
  804a04:	10000626 	beq	r2,zero,804a20 <logic+0x4290>
    d->AR |= 1;
  804a08:	e0bffc17 	ldw	r2,-16(fp)
  804a0c:	10801843 	ldbu	r2,97(r2)
  804a10:	10800054 	ori	r2,r2,1
  804a14:	1007883a 	mov	r3,r2
  804a18:	e0bffc17 	ldw	r2,-16(fp)
  804a1c:	10c01845 	stb	r3,97(r2)
  }
  d->_g123_e1 = d->_GO || d->_g154 || d->_g123;
  804a20:	e0bffc17 	ldw	r2,-16(fp)
  804a24:	10804543 	ldbu	r2,277(r2)
  804a28:	10803fcc 	andi	r2,r2,255
  804a2c:	1080201c 	xori	r2,r2,128
  804a30:	10bfe004 	addi	r2,r2,-128
  804a34:	10000c1e 	bne	r2,zero,804a68 <logic+0x42d8>
  804a38:	e0bffc17 	ldw	r2,-16(fp)
  804a3c:	10803883 	ldbu	r2,226(r2)
  804a40:	10803fcc 	andi	r2,r2,255
  804a44:	1080201c 	xori	r2,r2,128
  804a48:	10bfe004 	addi	r2,r2,-128
  804a4c:	1000061e 	bne	r2,zero,804a68 <logic+0x42d8>
  804a50:	e0bffc17 	ldw	r2,-16(fp)
  804a54:	10803303 	ldbu	r2,204(r2)
  804a58:	10803fcc 	andi	r2,r2,255
  804a5c:	1080201c 	xori	r2,r2,128
  804a60:	10bfe004 	addi	r2,r2,-128
  804a64:	10000226 	beq	r2,zero,804a70 <logic+0x42e0>
  804a68:	00800044 	movi	r2,1
  804a6c:	00000106 	br	804a74 <logic+0x42e4>
  804a70:	0005883a 	mov	r2,zero
  804a74:	1007883a 	mov	r3,r2
  804a78:	e0bffc17 	ldw	r2,-16(fp)
  804a7c:	10c05fc5 	stb	r3,383(r2)
  if (d->_g123_e1) {
  804a80:	e0bffc17 	ldw	r2,-16(fp)
  804a84:	10805fc3 	ldbu	r2,383(r2)
  804a88:	10803fcc 	andi	r2,r2,255
  804a8c:	1080201c 	xori	r2,r2,128
  804a90:	10bfe004 	addi	r2,r2,-128
  804a94:	10000426 	beq	r2,zero,804aa8 <logic+0x4318>
    d->_heart2_local__Atrig10 = 0;
  804a98:	e0bffc17 	ldw	r2,-16(fp)
  804a9c:	10001cc5 	stb	zero,115(r2)
    d->_heart2_local__Atrig11 = 0;
  804aa0:	e0bffc17 	ldw	r2,-16(fp)
  804aa4:	10001d05 	stb	zero,116(r2)
  }
  d->_cg120 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804aa8:	e0bffc17 	ldw	r2,-16(fp)
  804aac:	10801cc3 	ldbu	r2,115(r2)
  804ab0:	10803fcc 	andi	r2,r2,255
  804ab4:	1080201c 	xori	r2,r2,128
  804ab8:	10bfe004 	addi	r2,r2,-128
  804abc:	1000061e 	bne	r2,zero,804ad8 <logic+0x4348>
  804ac0:	e0bffc17 	ldw	r2,-16(fp)
  804ac4:	10801d03 	ldbu	r2,116(r2)
  804ac8:	10803fcc 	andi	r2,r2,255
  804acc:	1080201c 	xori	r2,r2,128
  804ad0:	10bfe004 	addi	r2,r2,-128
  804ad4:	10000226 	beq	r2,zero,804ae0 <logic+0x4350>
  804ad8:	00800044 	movi	r2,1
  804adc:	00000106 	br	804ae4 <logic+0x4354>
  804ae0:	0005883a 	mov	r2,zero
  804ae4:	1007883a 	mov	r3,r2
  804ae8:	e0bffc17 	ldw	r2,-16(fp)
  804aec:	10c05085 	stb	r3,322(r2)
  d->_g130_e2 = d->_g123_e1 && !d->_cg120 || d->_g151 && !d->_cg122;
  804af0:	e0bffc17 	ldw	r2,-16(fp)
  804af4:	10805fc3 	ldbu	r2,383(r2)
  804af8:	10803fcc 	andi	r2,r2,255
  804afc:	1080201c 	xori	r2,r2,128
  804b00:	10bfe004 	addi	r2,r2,-128
  804b04:	10000626 	beq	r2,zero,804b20 <logic+0x4390>
  804b08:	e0bffc17 	ldw	r2,-16(fp)
  804b0c:	10805083 	ldbu	r2,322(r2)
  804b10:	10803fcc 	andi	r2,r2,255
  804b14:	1080201c 	xori	r2,r2,128
  804b18:	10bfe004 	addi	r2,r2,-128
  804b1c:	10000c26 	beq	r2,zero,804b50 <logic+0x43c0>
  804b20:	e0bffc17 	ldw	r2,-16(fp)
  804b24:	108037c3 	ldbu	r2,223(r2)
  804b28:	10803fcc 	andi	r2,r2,255
  804b2c:	1080201c 	xori	r2,r2,128
  804b30:	10bfe004 	addi	r2,r2,-128
  804b34:	10000826 	beq	r2,zero,804b58 <logic+0x43c8>
  804b38:	e0bffc17 	ldw	r2,-16(fp)
  804b3c:	108050c3 	ldbu	r2,323(r2)
  804b40:	10803fcc 	andi	r2,r2,255
  804b44:	1080201c 	xori	r2,r2,128
  804b48:	10bfe004 	addi	r2,r2,-128
  804b4c:	1000021e 	bne	r2,zero,804b58 <logic+0x43c8>
  804b50:	00800044 	movi	r2,1
  804b54:	00000106 	br	804b5c <logic+0x43cc>
  804b58:	0005883a 	mov	r2,zero
  804b5c:	1007883a 	mov	r3,r2
  804b60:	e0bffc17 	ldw	r2,-16(fp)
  804b64:	10c06005 	stb	r3,384(r2)
  d->_cg124 = d->_region3_null_PVARP < d->PVARP_time;
  804b68:	e0bffc17 	ldw	r2,-16(fp)
  804b6c:	14000d17 	ldw	r16,52(r2)
  804b70:	14400e17 	ldw	r17,56(r2)
  804b74:	e0bffc17 	ldw	r2,-16(fp)
  804b78:	10800117 	ldw	r2,4(r2)
  804b7c:	1009883a 	mov	r4,r2
  804b80:	0808c3c0 	call	808c3c <__floatsidf>
  804b84:	1009883a 	mov	r4,r2
  804b88:	180b883a 	mov	r5,r3
  804b8c:	04800044 	movi	r18,1
  804b90:	200d883a 	mov	r6,r4
  804b94:	280f883a 	mov	r7,r5
  804b98:	8009883a 	mov	r4,r16
  804b9c:	880b883a 	mov	r5,r17
  804ba0:	080824c0 	call	80824c <__ledf2>
  804ba4:	10000116 	blt	r2,zero,804bac <logic+0x441c>
  804ba8:	0025883a 	mov	r18,zero
  804bac:	9007883a 	mov	r3,r18
  804bb0:	e0bffc17 	ldw	r2,-16(fp)
  804bb4:	10c05105 	stb	r3,324(r2)
  d->_g130 = d->_g123_e1 && d->_cg124;
  804bb8:	e0bffc17 	ldw	r2,-16(fp)
  804bbc:	10805fc3 	ldbu	r2,383(r2)
  804bc0:	10803fcc 	andi	r2,r2,255
  804bc4:	1080201c 	xori	r2,r2,128
  804bc8:	10bfe004 	addi	r2,r2,-128
  804bcc:	10000826 	beq	r2,zero,804bf0 <logic+0x4460>
  804bd0:	e0bffc17 	ldw	r2,-16(fp)
  804bd4:	10805103 	ldbu	r2,324(r2)
  804bd8:	10803fcc 	andi	r2,r2,255
  804bdc:	1080201c 	xori	r2,r2,128
  804be0:	10bfe004 	addi	r2,r2,-128
  804be4:	10000226 	beq	r2,zero,804bf0 <logic+0x4460>
  804be8:	00800044 	movi	r2,1
  804bec:	00000106 	br	804bf4 <logic+0x4464>
  804bf0:	0005883a 	mov	r2,zero
  804bf4:	1007883a 	mov	r3,r2
  804bf8:	e0bffc17 	ldw	r2,-16(fp)
  804bfc:	10c03445 	stb	r3,209(r2)
  if (d->_g130) {
  804c00:	e0bffc17 	ldw	r2,-16(fp)
  804c04:	10803443 	ldbu	r2,209(r2)
  804c08:	10803fcc 	andi	r2,r2,255
  804c0c:	1080201c 	xori	r2,r2,128
  804c10:	10bfe004 	addi	r2,r2,-128
  804c14:	10003426 	beq	r2,zero,804ce8 <logic+0x4558>
    d->sleepT = (d->sleepT < (d->PVARP_time - d->_region3_null_PVARP)) ? d->sleepT : (d->PVARP_time - d->_region3_null_PVARP);
  804c18:	e0bffc17 	ldw	r2,-16(fp)
  804c1c:	14001517 	ldw	r16,84(r2)
  804c20:	14401617 	ldw	r17,88(r2)
  804c24:	e0bffc17 	ldw	r2,-16(fp)
  804c28:	10800117 	ldw	r2,4(r2)
  804c2c:	1009883a 	mov	r4,r2
  804c30:	0808c3c0 	call	808c3c <__floatsidf>
  804c34:	1011883a 	mov	r8,r2
  804c38:	1813883a 	mov	r9,r3
  804c3c:	e13ffc17 	ldw	r4,-16(fp)
  804c40:	20800d17 	ldw	r2,52(r4)
  804c44:	20c00e17 	ldw	r3,56(r4)
  804c48:	100d883a 	mov	r6,r2
  804c4c:	180f883a 	mov	r7,r3
  804c50:	4009883a 	mov	r4,r8
  804c54:	480b883a 	mov	r5,r9
  804c58:	08083400 	call	808340 <__subdf3>
  804c5c:	1009883a 	mov	r4,r2
  804c60:	180b883a 	mov	r5,r3
  804c64:	2005883a 	mov	r2,r4
  804c68:	2807883a 	mov	r3,r5
  804c6c:	100d883a 	mov	r6,r2
  804c70:	180f883a 	mov	r7,r3
  804c74:	8009883a 	mov	r4,r16
  804c78:	880b883a 	mov	r5,r17
  804c7c:	080824c0 	call	80824c <__ledf2>
  804c80:	1000040e 	bge	r2,zero,804c94 <logic+0x4504>
  804c84:	e13ffc17 	ldw	r4,-16(fp)
  804c88:	20801517 	ldw	r2,84(r4)
  804c8c:	20c01617 	ldw	r3,88(r4)
  804c90:	00001206 	br	804cdc <logic+0x454c>
  804c94:	e0bffc17 	ldw	r2,-16(fp)
  804c98:	10800117 	ldw	r2,4(r2)
  804c9c:	1009883a 	mov	r4,r2
  804ca0:	0808c3c0 	call	808c3c <__floatsidf>
  804ca4:	1011883a 	mov	r8,r2
  804ca8:	1813883a 	mov	r9,r3
  804cac:	e13ffc17 	ldw	r4,-16(fp)
  804cb0:	20800d17 	ldw	r2,52(r4)
  804cb4:	20c00e17 	ldw	r3,56(r4)
  804cb8:	100d883a 	mov	r6,r2
  804cbc:	180f883a 	mov	r7,r3
  804cc0:	4009883a 	mov	r4,r8
  804cc4:	480b883a 	mov	r5,r9
  804cc8:	08083400 	call	808340 <__subdf3>
  804ccc:	1009883a 	mov	r4,r2
  804cd0:	180b883a 	mov	r5,r3
  804cd4:	2005883a 	mov	r2,r4
  804cd8:	2807883a 	mov	r3,r5
  804cdc:	e13ffc17 	ldw	r4,-16(fp)
  804ce0:	20801515 	stw	r2,84(r4)
  804ce4:	20c01615 	stw	r3,88(r4)
  }
  d->_cg125 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804ce8:	e0bffc17 	ldw	r2,-16(fp)
  804cec:	10801cc3 	ldbu	r2,115(r2)
  804cf0:	10803fcc 	andi	r2,r2,255
  804cf4:	1080201c 	xori	r2,r2,128
  804cf8:	10bfe004 	addi	r2,r2,-128
  804cfc:	1000061e 	bne	r2,zero,804d18 <logic+0x4588>
  804d00:	e0bffc17 	ldw	r2,-16(fp)
  804d04:	10801d03 	ldbu	r2,116(r2)
  804d08:	10803fcc 	andi	r2,r2,255
  804d0c:	1080201c 	xori	r2,r2,128
  804d10:	10bfe004 	addi	r2,r2,-128
  804d14:	10000226 	beq	r2,zero,804d20 <logic+0x4590>
  804d18:	00800044 	movi	r2,1
  804d1c:	00000106 	br	804d24 <logic+0x4594>
  804d20:	0005883a 	mov	r2,zero
  804d24:	1007883a 	mov	r3,r2
  804d28:	e0bffc17 	ldw	r2,-16(fp)
  804d2c:	10c05145 	stb	r3,325(r2)
  d->_g139 = d->_g130 && !d->_cg125 || d->_g133 && !d->_cg129;
  804d30:	e0bffc17 	ldw	r2,-16(fp)
  804d34:	10803443 	ldbu	r2,209(r2)
  804d38:	10803fcc 	andi	r2,r2,255
  804d3c:	1080201c 	xori	r2,r2,128
  804d40:	10bfe004 	addi	r2,r2,-128
  804d44:	10000626 	beq	r2,zero,804d60 <logic+0x45d0>
  804d48:	e0bffc17 	ldw	r2,-16(fp)
  804d4c:	10805143 	ldbu	r2,325(r2)
  804d50:	10803fcc 	andi	r2,r2,255
  804d54:	1080201c 	xori	r2,r2,128
  804d58:	10bfe004 	addi	r2,r2,-128
  804d5c:	10000c26 	beq	r2,zero,804d90 <logic+0x4600>
  804d60:	e0bffc17 	ldw	r2,-16(fp)
  804d64:	108034c3 	ldbu	r2,211(r2)
  804d68:	10803fcc 	andi	r2,r2,255
  804d6c:	1080201c 	xori	r2,r2,128
  804d70:	10bfe004 	addi	r2,r2,-128
  804d74:	10000826 	beq	r2,zero,804d98 <logic+0x4608>
  804d78:	e0bffc17 	ldw	r2,-16(fp)
  804d7c:	10805183 	ldbu	r2,326(r2)
  804d80:	10803fcc 	andi	r2,r2,255
  804d84:	1080201c 	xori	r2,r2,128
  804d88:	10bfe004 	addi	r2,r2,-128
  804d8c:	1000021e 	bne	r2,zero,804d98 <logic+0x4608>
  804d90:	00800044 	movi	r2,1
  804d94:	00000106 	br	804d9c <logic+0x460c>
  804d98:	0005883a 	mov	r2,zero
  804d9c:	1007883a 	mov	r3,r2
  804da0:	e0bffc17 	ldw	r2,-16(fp)
  804da4:	10c035c5 	stb	r3,215(r2)
  d->_g139_e3 = d->_g123_e1 && !d->_cg124;
  804da8:	e0bffc17 	ldw	r2,-16(fp)
  804dac:	10805fc3 	ldbu	r2,383(r2)
  804db0:	10803fcc 	andi	r2,r2,255
  804db4:	1080201c 	xori	r2,r2,128
  804db8:	10bfe004 	addi	r2,r2,-128
  804dbc:	10000826 	beq	r2,zero,804de0 <logic+0x4650>
  804dc0:	e0bffc17 	ldw	r2,-16(fp)
  804dc4:	10805103 	ldbu	r2,324(r2)
  804dc8:	10803fcc 	andi	r2,r2,255
  804dcc:	1080201c 	xori	r2,r2,128
  804dd0:	10bfe004 	addi	r2,r2,-128
  804dd4:	1000021e 	bne	r2,zero,804de0 <logic+0x4650>
  804dd8:	00800044 	movi	r2,1
  804ddc:	00000106 	br	804de4 <logic+0x4654>
  804de0:	0005883a 	mov	r2,zero
  804de4:	1007883a 	mov	r3,r2
  804de8:	e0bffc17 	ldw	r2,-16(fp)
  804dec:	10c06045 	stb	r3,385(r2)
  d->_cg134 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804df0:	e0bffc17 	ldw	r2,-16(fp)
  804df4:	10801cc3 	ldbu	r2,115(r2)
  804df8:	10803fcc 	andi	r2,r2,255
  804dfc:	1080201c 	xori	r2,r2,128
  804e00:	10bfe004 	addi	r2,r2,-128
  804e04:	1000061e 	bne	r2,zero,804e20 <logic+0x4690>
  804e08:	e0bffc17 	ldw	r2,-16(fp)
  804e0c:	10801d03 	ldbu	r2,116(r2)
  804e10:	10803fcc 	andi	r2,r2,255
  804e14:	1080201c 	xori	r2,r2,128
  804e18:	10bfe004 	addi	r2,r2,-128
  804e1c:	10000226 	beq	r2,zero,804e28 <logic+0x4698>
  804e20:	00800044 	movi	r2,1
  804e24:	00000106 	br	804e2c <logic+0x469c>
  804e28:	0005883a 	mov	r2,zero
  804e2c:	1007883a 	mov	r3,r2
  804e30:	e0bffc17 	ldw	r2,-16(fp)
  804e34:	10c05245 	stb	r3,329(r2)
  d->_g156 = d->_g128 && !d->_cg131 || d->_g139_e3 && !d->_cg134;
  804e38:	e0bffc17 	ldw	r2,-16(fp)
  804e3c:	108033c3 	ldbu	r2,207(r2)
  804e40:	10803fcc 	andi	r2,r2,255
  804e44:	1080201c 	xori	r2,r2,128
  804e48:	10bfe004 	addi	r2,r2,-128
  804e4c:	10000626 	beq	r2,zero,804e68 <logic+0x46d8>
  804e50:	e0bffc17 	ldw	r2,-16(fp)
  804e54:	10805203 	ldbu	r2,328(r2)
  804e58:	10803fcc 	andi	r2,r2,255
  804e5c:	1080201c 	xori	r2,r2,128
  804e60:	10bfe004 	addi	r2,r2,-128
  804e64:	10000c26 	beq	r2,zero,804e98 <logic+0x4708>
  804e68:	e0bffc17 	ldw	r2,-16(fp)
  804e6c:	10806043 	ldbu	r2,385(r2)
  804e70:	10803fcc 	andi	r2,r2,255
  804e74:	1080201c 	xori	r2,r2,128
  804e78:	10bfe004 	addi	r2,r2,-128
  804e7c:	10000826 	beq	r2,zero,804ea0 <logic+0x4710>
  804e80:	e0bffc17 	ldw	r2,-16(fp)
  804e84:	10805243 	ldbu	r2,329(r2)
  804e88:	10803fcc 	andi	r2,r2,255
  804e8c:	1080201c 	xori	r2,r2,128
  804e90:	10bfe004 	addi	r2,r2,-128
  804e94:	1000021e 	bne	r2,zero,804ea0 <logic+0x4710>
  804e98:	00800044 	movi	r2,1
  804e9c:	00000106 	br	804ea4 <logic+0x4714>
  804ea0:	0005883a 	mov	r2,zero
  804ea4:	1007883a 	mov	r3,r2
  804ea8:	e0bffc17 	ldw	r2,-16(fp)
  804eac:	10c03905 	stb	r3,228(r2)
  d->_g158 = d->_g123_e1 || d->_g152_e2 && !d->AS;
  804eb0:	e0bffc17 	ldw	r2,-16(fp)
  804eb4:	10805fc3 	ldbu	r2,383(r2)
  804eb8:	10803fcc 	andi	r2,r2,255
  804ebc:	1080201c 	xori	r2,r2,128
  804ec0:	10bfe004 	addi	r2,r2,-128
  804ec4:	10000c1e 	bne	r2,zero,804ef8 <logic+0x4768>
  804ec8:	e0bffc17 	ldw	r2,-16(fp)
  804ecc:	108060c3 	ldbu	r2,387(r2)
  804ed0:	10803fcc 	andi	r2,r2,255
  804ed4:	1080201c 	xori	r2,r2,128
  804ed8:	10bfe004 	addi	r2,r2,-128
  804edc:	10000826 	beq	r2,zero,804f00 <logic+0x4770>
  804ee0:	e0bffc17 	ldw	r2,-16(fp)
  804ee4:	10801703 	ldbu	r2,92(r2)
  804ee8:	10803fcc 	andi	r2,r2,255
  804eec:	1080201c 	xori	r2,r2,128
  804ef0:	10bfe004 	addi	r2,r2,-128
  804ef4:	1000021e 	bne	r2,zero,804f00 <logic+0x4770>
  804ef8:	00800044 	movi	r2,1
  804efc:	00000106 	br	804f04 <logic+0x4774>
  804f00:	0005883a 	mov	r2,zero
  804f04:	1007883a 	mov	r3,r2
  804f08:	e0bffc17 	ldw	r2,-16(fp)
  804f0c:	10c03985 	stb	r3,230(r2)
  d->_g122 = d->_g150 && !d->_cg155;
  804f10:	e0bffc17 	ldw	r2,-16(fp)
  804f14:	10803783 	ldbu	r2,222(r2)
  804f18:	10803fcc 	andi	r2,r2,255
  804f1c:	1080201c 	xori	r2,r2,128
  804f20:	10bfe004 	addi	r2,r2,-128
  804f24:	10000826 	beq	r2,zero,804f48 <logic+0x47b8>
  804f28:	e0bffc17 	ldw	r2,-16(fp)
  804f2c:	10805443 	ldbu	r2,337(r2)
  804f30:	10803fcc 	andi	r2,r2,255
  804f34:	1080201c 	xori	r2,r2,128
  804f38:	10bfe004 	addi	r2,r2,-128
  804f3c:	1000021e 	bne	r2,zero,804f48 <logic+0x47b8>
  804f40:	00800044 	movi	r2,1
  804f44:	00000106 	br	804f4c <logic+0x47bc>
  804f48:	0005883a 	mov	r2,zero
  804f4c:	1007883a 	mov	r3,r2
  804f50:	e0bffc17 	ldw	r2,-16(fp)
  804f54:	10c032c5 	stb	r3,203(r2)
  if (d->_g122) {
  804f58:	e0bffc17 	ldw	r2,-16(fp)
  804f5c:	108032c3 	ldbu	r2,203(r2)
  804f60:	10803fcc 	andi	r2,r2,255
  804f64:	1080201c 	xori	r2,r2,128
  804f68:	10bfe004 	addi	r2,r2,-128
  804f6c:	10000626 	beq	r2,zero,804f88 <logic+0x47f8>
    d->a |= 1;
  804f70:	e0bffc17 	ldw	r2,-16(fp)
  804f74:	10801883 	ldbu	r2,98(r2)
  804f78:	10800054 	ori	r2,r2,1
  804f7c:	1007883a 	mov	r3,r2
  804f80:	e0bffc17 	ldw	r2,-16(fp)
  804f84:	10c01885 	stb	r3,98(r2)
  }
  d->_g125 = d->_g141 && d->_cg142 || d->_g122;
  804f88:	e0bffc17 	ldw	r2,-16(fp)
  804f8c:	10803643 	ldbu	r2,217(r2)
  804f90:	10803fcc 	andi	r2,r2,255
  804f94:	1080201c 	xori	r2,r2,128
  804f98:	10bfe004 	addi	r2,r2,-128
  804f9c:	10000626 	beq	r2,zero,804fb8 <logic+0x4828>
  804fa0:	e0bffc17 	ldw	r2,-16(fp)
  804fa4:	10805303 	ldbu	r2,332(r2)
  804fa8:	10803fcc 	andi	r2,r2,255
  804fac:	1080201c 	xori	r2,r2,128
  804fb0:	10bfe004 	addi	r2,r2,-128
  804fb4:	1000061e 	bne	r2,zero,804fd0 <logic+0x4840>
  804fb8:	e0bffc17 	ldw	r2,-16(fp)
  804fbc:	108032c3 	ldbu	r2,203(r2)
  804fc0:	10803fcc 	andi	r2,r2,255
  804fc4:	1080201c 	xori	r2,r2,128
  804fc8:	10bfe004 	addi	r2,r2,-128
  804fcc:	10000226 	beq	r2,zero,804fd8 <logic+0x4848>
  804fd0:	00800044 	movi	r2,1
  804fd4:	00000106 	br	804fdc <logic+0x484c>
  804fd8:	0005883a 	mov	r2,zero
  804fdc:	1007883a 	mov	r3,r2
  804fe0:	e0bffc17 	ldw	r2,-16(fp)
  804fe4:	10c03345 	stb	r3,205(r2)
  if (d->_g125) {
  804fe8:	e0bffc17 	ldw	r2,-16(fp)
  804fec:	10803343 	ldbu	r2,205(r2)
  804ff0:	10803fcc 	andi	r2,r2,255
  804ff4:	1080201c 	xori	r2,r2,128
  804ff8:	10bfe004 	addi	r2,r2,-128
  804ffc:	10000426 	beq	r2,zero,805010 <logic+0x4880>
    d->_heart2_local__Atrig12 = 0;
  805000:	e0bffc17 	ldw	r2,-16(fp)
  805004:	10001d45 	stb	zero,117(r2)
    d->_heart2_local__Atrig13 = 0;
  805008:	e0bffc17 	ldw	r2,-16(fp)
  80500c:	10001d85 	stb	zero,118(r2)
  }
  d->_cg144 = d->_heart2_local__Atrig12 || d->_heart2_local__Atrig13;
  805010:	e0bffc17 	ldw	r2,-16(fp)
  805014:	10801d43 	ldbu	r2,117(r2)
  805018:	10803fcc 	andi	r2,r2,255
  80501c:	1080201c 	xori	r2,r2,128
  805020:	10bfe004 	addi	r2,r2,-128
  805024:	1000061e 	bne	r2,zero,805040 <logic+0x48b0>
  805028:	e0bffc17 	ldw	r2,-16(fp)
  80502c:	10801d83 	ldbu	r2,118(r2)
  805030:	10803fcc 	andi	r2,r2,255
  805034:	1080201c 	xori	r2,r2,128
  805038:	10bfe004 	addi	r2,r2,-128
  80503c:	10000226 	beq	r2,zero,805048 <logic+0x48b8>
  805040:	00800044 	movi	r2,1
  805044:	00000106 	br	80504c <logic+0x48bc>
  805048:	0005883a 	mov	r2,zero
  80504c:	1007883a 	mov	r3,r2
  805050:	e0bffc17 	ldw	r2,-16(fp)
  805054:	10c05345 	stb	r3,333(r2)
  d->_g129 = d->_g125 && !d->_cg144 || d->_g92 && !d->_cg146;
  805058:	e0bffc17 	ldw	r2,-16(fp)
  80505c:	10803343 	ldbu	r2,205(r2)
  805060:	10803fcc 	andi	r2,r2,255
  805064:	1080201c 	xori	r2,r2,128
  805068:	10bfe004 	addi	r2,r2,-128
  80506c:	10000626 	beq	r2,zero,805088 <logic+0x48f8>
  805070:	e0bffc17 	ldw	r2,-16(fp)
  805074:	10805343 	ldbu	r2,333(r2)
  805078:	10803fcc 	andi	r2,r2,255
  80507c:	1080201c 	xori	r2,r2,128
  805080:	10bfe004 	addi	r2,r2,-128
  805084:	10000c26 	beq	r2,zero,8050b8 <logic+0x4928>
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	10802dc3 	ldbu	r2,183(r2)
  805090:	10803fcc 	andi	r2,r2,255
  805094:	1080201c 	xori	r2,r2,128
  805098:	10bfe004 	addi	r2,r2,-128
  80509c:	10000826 	beq	r2,zero,8050c0 <logic+0x4930>
  8050a0:	e0bffc17 	ldw	r2,-16(fp)
  8050a4:	10805383 	ldbu	r2,334(r2)
  8050a8:	10803fcc 	andi	r2,r2,255
  8050ac:	1080201c 	xori	r2,r2,128
  8050b0:	10bfe004 	addi	r2,r2,-128
  8050b4:	1000021e 	bne	r2,zero,8050c0 <logic+0x4930>
  8050b8:	00800044 	movi	r2,1
  8050bc:	00000106 	br	8050c4 <logic+0x4934>
  8050c0:	0005883a 	mov	r2,zero
  8050c4:	1007883a 	mov	r3,r2
  8050c8:	e0bffc17 	ldw	r2,-16(fp)
  8050cc:	10c03405 	stb	r3,208(r2)
  d->_g134 = d->_g125 || d->_g115 && !d->AS;
  8050d0:	e0bffc17 	ldw	r2,-16(fp)
  8050d4:	10803343 	ldbu	r2,205(r2)
  8050d8:	10803fcc 	andi	r2,r2,255
  8050dc:	1080201c 	xori	r2,r2,128
  8050e0:	10bfe004 	addi	r2,r2,-128
  8050e4:	10000c1e 	bne	r2,zero,805118 <logic+0x4988>
  8050e8:	e0bffc17 	ldw	r2,-16(fp)
  8050ec:	10803203 	ldbu	r2,200(r2)
  8050f0:	10803fcc 	andi	r2,r2,255
  8050f4:	1080201c 	xori	r2,r2,128
  8050f8:	10bfe004 	addi	r2,r2,-128
  8050fc:	10000826 	beq	r2,zero,805120 <logic+0x4990>
  805100:	e0bffc17 	ldw	r2,-16(fp)
  805104:	10801703 	ldbu	r2,92(r2)
  805108:	10803fcc 	andi	r2,r2,255
  80510c:	1080201c 	xori	r2,r2,128
  805110:	10bfe004 	addi	r2,r2,-128
  805114:	1000021e 	bne	r2,zero,805120 <logic+0x4990>
  805118:	00800044 	movi	r2,1
  80511c:	00000106 	br	805124 <logic+0x4994>
  805120:	0005883a 	mov	r2,zero
  805124:	1007883a 	mov	r3,r2
  805128:	e0bffc17 	ldw	r2,-16(fp)
  80512c:	10c03505 	stb	r3,212(r2)
  d->_g131 = d->_pg179;
  805130:	e0bffc17 	ldw	r2,-16(fp)
  805134:	10c06a03 	ldbu	r3,424(r2)
  805138:	e0bffc17 	ldw	r2,-16(fp)
  80513c:	10c03485 	stb	r3,210(r2)
  if (d->_g131) {
  805140:	e0bffc17 	ldw	r2,-16(fp)
  805144:	10803483 	ldbu	r2,210(r2)
  805148:	10803fcc 	andi	r2,r2,255
  80514c:	1080201c 	xori	r2,r2,128
  805150:	10bfe004 	addi	r2,r2,-128
  805154:	10001226 	beq	r2,zero,8051a0 <logic+0x4a10>
    d->_region4_null_AEI += d->deltaT;
  805158:	e13ffc17 	ldw	r4,-16(fp)
  80515c:	20800f17 	ldw	r2,60(r4)
  805160:	20c01017 	ldw	r3,64(r4)
  805164:	e1bffc17 	ldw	r6,-16(fp)
  805168:	31001317 	ldw	r4,76(r6)
  80516c:	31401417 	ldw	r5,80(r6)
  805170:	200d883a 	mov	r6,r4
  805174:	280f883a 	mov	r7,r5
  805178:	1009883a 	mov	r4,r2
  80517c:	180b883a 	mov	r5,r3
  805180:	08078c40 	call	8078c4 <__adddf3>
  805184:	1009883a 	mov	r4,r2
  805188:	180b883a 	mov	r5,r3
  80518c:	2005883a 	mov	r2,r4
  805190:	2807883a 	mov	r3,r5
  805194:	e13ffc17 	ldw	r4,-16(fp)
  805198:	20800f15 	stw	r2,60(r4)
  80519c:	20c01015 	stw	r3,64(r4)
  }
  d->_g119 = !d->_g131;
  8051a0:	e0bffc17 	ldw	r2,-16(fp)
  8051a4:	10803483 	ldbu	r2,210(r2)
  8051a8:	10803fcc 	andi	r2,r2,255
  8051ac:	1080201c 	xori	r2,r2,128
  8051b0:	10bfe004 	addi	r2,r2,-128
  8051b4:	1005003a 	cmpeq	r2,r2,zero
  8051b8:	1007883a 	mov	r3,r2
  8051bc:	e0bffc17 	ldw	r2,-16(fp)
  8051c0:	10c03285 	stb	r3,202(r2)
  d->_g140 = d->_pg181_e3;
  8051c4:	e0bffc17 	ldw	r2,-16(fp)
  8051c8:	10c06a43 	ldbu	r3,425(r2)
  8051cc:	e0bffc17 	ldw	r2,-16(fp)
  8051d0:	10c03605 	stb	r3,216(r2)
  d->_cg193 = d->v;
  8051d4:	e0bffc17 	ldw	r2,-16(fp)
  8051d8:	10c018c3 	ldbu	r3,99(r2)
  8051dc:	e0bffc17 	ldw	r2,-16(fp)
  8051e0:	10c057c5 	stb	r3,351(r2)
  d->_g155 = d->_g140 && d->_cg193;
  8051e4:	e0bffc17 	ldw	r2,-16(fp)
  8051e8:	10803603 	ldbu	r2,216(r2)
  8051ec:	10803fcc 	andi	r2,r2,255
  8051f0:	1080201c 	xori	r2,r2,128
  8051f4:	10bfe004 	addi	r2,r2,-128
  8051f8:	10000826 	beq	r2,zero,80521c <logic+0x4a8c>
  8051fc:	e0bffc17 	ldw	r2,-16(fp)
  805200:	108057c3 	ldbu	r2,351(r2)
  805204:	10803fcc 	andi	r2,r2,255
  805208:	1080201c 	xori	r2,r2,128
  80520c:	10bfe004 	addi	r2,r2,-128
  805210:	10000226 	beq	r2,zero,80521c <logic+0x4a8c>
  805214:	00800044 	movi	r2,1
  805218:	00000106 	br	805220 <logic+0x4a90>
  80521c:	0005883a 	mov	r2,zero
  805220:	1007883a 	mov	r3,r2
  805224:	e0bffc17 	ldw	r2,-16(fp)
  805228:	10c038c5 	stb	r3,227(r2)
  if (d->_g155) {
  80522c:	e0bffc17 	ldw	r2,-16(fp)
  805230:	108038c3 	ldbu	r2,227(r2)
  805234:	10803fcc 	andi	r2,r2,255
  805238:	1080201c 	xori	r2,r2,128
  80523c:	10bfe004 	addi	r2,r2,-128
  805240:	10000326 	beq	r2,zero,805250 <logic+0x4ac0>
    d->_heart2_local__Atrig16 = 1;
  805244:	e0bffc17 	ldw	r2,-16(fp)
  805248:	00c00044 	movi	r3,1
  80524c:	10c01e45 	stb	r3,121(r2)
  }
  d->_cg189 = d->_heart2_local__Atrig16;
  805250:	e0bffc17 	ldw	r2,-16(fp)
  805254:	10c01e43 	ldbu	r3,121(r2)
  805258:	e0bffc17 	ldw	r2,-16(fp)
  80525c:	10c05785 	stb	r3,350(r2)
  d->_g157 = d->_g131 && d->_cg189;
  805260:	e0bffc17 	ldw	r2,-16(fp)
  805264:	10803483 	ldbu	r2,210(r2)
  805268:	10803fcc 	andi	r2,r2,255
  80526c:	1080201c 	xori	r2,r2,128
  805270:	10bfe004 	addi	r2,r2,-128
  805274:	10000826 	beq	r2,zero,805298 <logic+0x4b08>
  805278:	e0bffc17 	ldw	r2,-16(fp)
  80527c:	10805783 	ldbu	r2,350(r2)
  805280:	10803fcc 	andi	r2,r2,255
  805284:	1080201c 	xori	r2,r2,128
  805288:	10bfe004 	addi	r2,r2,-128
  80528c:	10000226 	beq	r2,zero,805298 <logic+0x4b08>
  805290:	00800044 	movi	r2,1
  805294:	00000106 	br	80529c <logic+0x4b0c>
  805298:	0005883a 	mov	r2,zero
  80529c:	1007883a 	mov	r3,r2
  8052a0:	e0bffc17 	ldw	r2,-16(fp)
  8052a4:	10c03945 	stb	r3,229(r2)
  d->_g142 = !d->_g140;
  8052a8:	e0bffc17 	ldw	r2,-16(fp)
  8052ac:	10803603 	ldbu	r2,216(r2)
  8052b0:	10803fcc 	andi	r2,r2,255
  8052b4:	1080201c 	xori	r2,r2,128
  8052b8:	10bfe004 	addi	r2,r2,-128
  8052bc:	1005003a 	cmpeq	r2,r2,zero
  8052c0:	1007883a 	mov	r3,r2
  8052c4:	e0bffc17 	ldw	r2,-16(fp)
  8052c8:	10c03685 	stb	r3,218(r2)
  d->_g146 = (d->_g119 || d->_g157) && (d->_g142 || d->_g155) && (d->_g157 || d->_g155);
  8052cc:	e0bffc17 	ldw	r2,-16(fp)
  8052d0:	10803283 	ldbu	r2,202(r2)
  8052d4:	10803fcc 	andi	r2,r2,255
  8052d8:	1080201c 	xori	r2,r2,128
  8052dc:	10bfe004 	addi	r2,r2,-128
  8052e0:	1000061e 	bne	r2,zero,8052fc <logic+0x4b6c>
  8052e4:	e0bffc17 	ldw	r2,-16(fp)
  8052e8:	10803943 	ldbu	r2,229(r2)
  8052ec:	10803fcc 	andi	r2,r2,255
  8052f0:	1080201c 	xori	r2,r2,128
  8052f4:	10bfe004 	addi	r2,r2,-128
  8052f8:	10001a26 	beq	r2,zero,805364 <logic+0x4bd4>
  8052fc:	e0bffc17 	ldw	r2,-16(fp)
  805300:	10803683 	ldbu	r2,218(r2)
  805304:	10803fcc 	andi	r2,r2,255
  805308:	1080201c 	xori	r2,r2,128
  80530c:	10bfe004 	addi	r2,r2,-128
  805310:	1000061e 	bne	r2,zero,80532c <logic+0x4b9c>
  805314:	e0bffc17 	ldw	r2,-16(fp)
  805318:	108038c3 	ldbu	r2,227(r2)
  80531c:	10803fcc 	andi	r2,r2,255
  805320:	1080201c 	xori	r2,r2,128
  805324:	10bfe004 	addi	r2,r2,-128
  805328:	10000e26 	beq	r2,zero,805364 <logic+0x4bd4>
  80532c:	e0bffc17 	ldw	r2,-16(fp)
  805330:	10803943 	ldbu	r2,229(r2)
  805334:	10803fcc 	andi	r2,r2,255
  805338:	1080201c 	xori	r2,r2,128
  80533c:	10bfe004 	addi	r2,r2,-128
  805340:	1000061e 	bne	r2,zero,80535c <logic+0x4bcc>
  805344:	e0bffc17 	ldw	r2,-16(fp)
  805348:	108038c3 	ldbu	r2,227(r2)
  80534c:	10803fcc 	andi	r2,r2,255
  805350:	1080201c 	xori	r2,r2,128
  805354:	10bfe004 	addi	r2,r2,-128
  805358:	10000226 	beq	r2,zero,805364 <logic+0x4bd4>
  80535c:	00800044 	movi	r2,1
  805360:	00000106 	br	805368 <logic+0x4bd8>
  805364:	0005883a 	mov	r2,zero
  805368:	1007883a 	mov	r3,r2
  80536c:	e0bffc17 	ldw	r2,-16(fp)
  805370:	10c03705 	stb	r3,220(r2)
  if (d->_g146) {
  805374:	e0bffc17 	ldw	r2,-16(fp)
  805378:	10803703 	ldbu	r2,220(r2)
  80537c:	10803fcc 	andi	r2,r2,255
  805380:	1080201c 	xori	r2,r2,128
  805384:	10bfe004 	addi	r2,r2,-128
  805388:	10000326 	beq	r2,zero,805398 <logic+0x4c08>
    d->_region4_null_AEI = 0;
  80538c:	e0bffc17 	ldw	r2,-16(fp)
  805390:	10000f15 	stw	zero,60(r2)
  805394:	10001015 	stw	zero,64(r2)
  }
  d->_g153 = d->_GO || d->_g146;
  805398:	e0bffc17 	ldw	r2,-16(fp)
  80539c:	10804543 	ldbu	r2,277(r2)
  8053a0:	10803fcc 	andi	r2,r2,255
  8053a4:	1080201c 	xori	r2,r2,128
  8053a8:	10bfe004 	addi	r2,r2,-128
  8053ac:	1000061e 	bne	r2,zero,8053c8 <logic+0x4c38>
  8053b0:	e0bffc17 	ldw	r2,-16(fp)
  8053b4:	10803703 	ldbu	r2,220(r2)
  8053b8:	10803fcc 	andi	r2,r2,255
  8053bc:	1080201c 	xori	r2,r2,128
  8053c0:	10bfe004 	addi	r2,r2,-128
  8053c4:	10000226 	beq	r2,zero,8053d0 <logic+0x4c40>
  8053c8:	00800044 	movi	r2,1
  8053cc:	00000106 	br	8053d4 <logic+0x4c44>
  8053d0:	0005883a 	mov	r2,zero
  8053d4:	1007883a 	mov	r3,r2
  8053d8:	e0bffc17 	ldw	r2,-16(fp)
  8053dc:	10c03845 	stb	r3,225(r2)
  if (d->_g153) {
  8053e0:	e0bffc17 	ldw	r2,-16(fp)
  8053e4:	10803843 	ldbu	r2,225(r2)
  8053e8:	10803fcc 	andi	r2,r2,255
  8053ec:	1080201c 	xori	r2,r2,128
  8053f0:	10bfe004 	addi	r2,r2,-128
  8053f4:	10000426 	beq	r2,zero,805408 <logic+0x4c78>
    d->_heart2_local__Atrig14 = 0;
  8053f8:	e0bffc17 	ldw	r2,-16(fp)
  8053fc:	10001dc5 	stb	zero,119(r2)
    d->_heart2_local__Atrig15 = 0;
  805400:	e0bffc17 	ldw	r2,-16(fp)
  805404:	10001e05 	stb	zero,120(r2)
  }
  d->_cg162 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805408:	e0bffc17 	ldw	r2,-16(fp)
  80540c:	10801dc3 	ldbu	r2,119(r2)
  805410:	10803fcc 	andi	r2,r2,255
  805414:	1080201c 	xori	r2,r2,128
  805418:	10bfe004 	addi	r2,r2,-128
  80541c:	1000061e 	bne	r2,zero,805438 <logic+0x4ca8>
  805420:	e0bffc17 	ldw	r2,-16(fp)
  805424:	10801e03 	ldbu	r2,120(r2)
  805428:	10803fcc 	andi	r2,r2,255
  80542c:	1080201c 	xori	r2,r2,128
  805430:	10bfe004 	addi	r2,r2,-128
  805434:	10000226 	beq	r2,zero,805440 <logic+0x4cb0>
  805438:	00800044 	movi	r2,1
  80543c:	00000106 	br	805444 <logic+0x4cb4>
  805440:	0005883a 	mov	r2,zero
  805444:	1007883a 	mov	r3,r2
  805448:	e0bffc17 	ldw	r2,-16(fp)
  80544c:	10c05485 	stb	r3,338(r2)
  d->_g143 = d->_pg195;
  805450:	e0bffc17 	ldw	r2,-16(fp)
  805454:	10c06a83 	ldbu	r3,426(r2)
  805458:	e0bffc17 	ldw	r2,-16(fp)
  80545c:	10c036c5 	stb	r3,219(r2)
  if (d->_g143) {
  805460:	e0bffc17 	ldw	r2,-16(fp)
  805464:	108036c3 	ldbu	r2,219(r2)
  805468:	10803fcc 	andi	r2,r2,255
  80546c:	1080201c 	xori	r2,r2,128
  805470:	10bfe004 	addi	r2,r2,-128
  805474:	10001226 	beq	r2,zero,8054c0 <logic+0x4d30>
    d->_region4_null_AEI += d->deltaT;
  805478:	e13ffc17 	ldw	r4,-16(fp)
  80547c:	20800f17 	ldw	r2,60(r4)
  805480:	20c01017 	ldw	r3,64(r4)
  805484:	e1bffc17 	ldw	r6,-16(fp)
  805488:	31001317 	ldw	r4,76(r6)
  80548c:	31401417 	ldw	r5,80(r6)
  805490:	200d883a 	mov	r6,r4
  805494:	280f883a 	mov	r7,r5
  805498:	1009883a 	mov	r4,r2
  80549c:	180b883a 	mov	r5,r3
  8054a0:	08078c40 	call	8078c4 <__adddf3>
  8054a4:	1009883a 	mov	r4,r2
  8054a8:	180b883a 	mov	r5,r3
  8054ac:	2005883a 	mov	r2,r4
  8054b0:	2807883a 	mov	r3,r5
  8054b4:	e13ffc17 	ldw	r4,-16(fp)
  8054b8:	20800f15 	stw	r2,60(r4)
  8054bc:	20c01015 	stw	r3,64(r4)
  }
  d->_g190_e1 = d->_pg173;
  8054c0:	e0bffc17 	ldw	r2,-16(fp)
  8054c4:	10c06ac3 	ldbu	r3,427(r2)
  8054c8:	e0bffc17 	ldw	r2,-16(fp)
  8054cc:	10c061c5 	stb	r3,391(r2)
  d->_cg179 = d->_region4_null_AEI >= d->AEI_time;
  8054d0:	e0bffc17 	ldw	r2,-16(fp)
  8054d4:	14000f17 	ldw	r16,60(r2)
  8054d8:	14401017 	ldw	r17,64(r2)
  8054dc:	e0bffc17 	ldw	r2,-16(fp)
  8054e0:	10800417 	ldw	r2,16(r2)
  8054e4:	1009883a 	mov	r4,r2
  8054e8:	0808c3c0 	call	808c3c <__floatsidf>
  8054ec:	1009883a 	mov	r4,r2
  8054f0:	180b883a 	mov	r5,r3
  8054f4:	04800044 	movi	r18,1
  8054f8:	200d883a 	mov	r6,r4
  8054fc:	280f883a 	mov	r7,r5
  805500:	8009883a 	mov	r4,r16
  805504:	880b883a 	mov	r5,r17
  805508:	08081700 	call	808170 <__gedf2>
  80550c:	1000010e 	bge	r2,zero,805514 <logic+0x4d84>
  805510:	0025883a 	mov	r18,zero
  805514:	9007883a 	mov	r3,r18
  805518:	e0bffc17 	ldw	r2,-16(fp)
  80551c:	10c056c5 	stb	r3,347(r2)
  d->_g190 = d->_g190_e1 && d->_cg179;
  805520:	e0bffc17 	ldw	r2,-16(fp)
  805524:	108061c3 	ldbu	r2,391(r2)
  805528:	10803fcc 	andi	r2,r2,255
  80552c:	1080201c 	xori	r2,r2,128
  805530:	10bfe004 	addi	r2,r2,-128
  805534:	10000826 	beq	r2,zero,805558 <logic+0x4dc8>
  805538:	e0bffc17 	ldw	r2,-16(fp)
  80553c:	108056c3 	ldbu	r2,347(r2)
  805540:	10803fcc 	andi	r2,r2,255
  805544:	1080201c 	xori	r2,r2,128
  805548:	10bfe004 	addi	r2,r2,-128
  80554c:	10000226 	beq	r2,zero,805558 <logic+0x4dc8>
  805550:	00800044 	movi	r2,1
  805554:	00000106 	br	80555c <logic+0x4dcc>
  805558:	0005883a 	mov	r2,zero
  80555c:	1007883a 	mov	r3,r2
  805560:	e0bffc17 	ldw	r2,-16(fp)
  805564:	10c03ec5 	stb	r3,251(r2)
  if (d->_g190) {
  805568:	e0bffc17 	ldw	r2,-16(fp)
  80556c:	10803ec3 	ldbu	r2,251(r2)
  805570:	10803fcc 	andi	r2,r2,255
  805574:	1080201c 	xori	r2,r2,128
  805578:	10bfe004 	addi	r2,r2,-128
  80557c:	10000326 	beq	r2,zero,80558c <logic+0x4dfc>
    d->_heart2_local__Atrig14 = 1;
  805580:	e0bffc17 	ldw	r2,-16(fp)
  805584:	00c00044 	movi	r3,1
  805588:	10c01dc5 	stb	r3,119(r2)
  }
  d->_g194_e2 = d->_g190_e1 && !d->_cg179;
  80558c:	e0bffc17 	ldw	r2,-16(fp)
  805590:	108061c3 	ldbu	r2,391(r2)
  805594:	10803fcc 	andi	r2,r2,255
  805598:	1080201c 	xori	r2,r2,128
  80559c:	10bfe004 	addi	r2,r2,-128
  8055a0:	10000826 	beq	r2,zero,8055c4 <logic+0x4e34>
  8055a4:	e0bffc17 	ldw	r2,-16(fp)
  8055a8:	108056c3 	ldbu	r2,347(r2)
  8055ac:	10803fcc 	andi	r2,r2,255
  8055b0:	1080201c 	xori	r2,r2,128
  8055b4:	10bfe004 	addi	r2,r2,-128
  8055b8:	1000021e 	bne	r2,zero,8055c4 <logic+0x4e34>
  8055bc:	00800044 	movi	r2,1
  8055c0:	00000106 	br	8055c8 <logic+0x4e38>
  8055c4:	0005883a 	mov	r2,zero
  8055c8:	1007883a 	mov	r3,r2
  8055cc:	e0bffc17 	ldw	r2,-16(fp)
  8055d0:	10c06205 	stb	r3,392(r2)
  d->_cg182 = d->a;
  8055d4:	e0bffc17 	ldw	r2,-16(fp)
  8055d8:	10c01883 	ldbu	r3,98(r2)
  8055dc:	e0bffc17 	ldw	r2,-16(fp)
  8055e0:	10c05685 	stb	r3,346(r2)
  d->_g194 = d->_g194_e2 && d->_cg182;
  8055e4:	e0bffc17 	ldw	r2,-16(fp)
  8055e8:	10806203 	ldbu	r2,392(r2)
  8055ec:	10803fcc 	andi	r2,r2,255
  8055f0:	1080201c 	xori	r2,r2,128
  8055f4:	10bfe004 	addi	r2,r2,-128
  8055f8:	10000826 	beq	r2,zero,80561c <logic+0x4e8c>
  8055fc:	e0bffc17 	ldw	r2,-16(fp)
  805600:	10805683 	ldbu	r2,346(r2)
  805604:	10803fcc 	andi	r2,r2,255
  805608:	1080201c 	xori	r2,r2,128
  80560c:	10bfe004 	addi	r2,r2,-128
  805610:	10000226 	beq	r2,zero,80561c <logic+0x4e8c>
  805614:	00800044 	movi	r2,1
  805618:	00000106 	br	805620 <logic+0x4e90>
  80561c:	0005883a 	mov	r2,zero
  805620:	1007883a 	mov	r3,r2
  805624:	e0bffc17 	ldw	r2,-16(fp)
  805628:	10c03f45 	stb	r3,253(r2)
  if (d->_g194) {
  80562c:	e0bffc17 	ldw	r2,-16(fp)
  805630:	10803f43 	ldbu	r2,253(r2)
  805634:	10803fcc 	andi	r2,r2,255
  805638:	1080201c 	xori	r2,r2,128
  80563c:	10bfe004 	addi	r2,r2,-128
  805640:	10000326 	beq	r2,zero,805650 <logic+0x4ec0>
    d->_heart2_local__Atrig15 = 1;
  805644:	e0bffc17 	ldw	r2,-16(fp)
  805648:	00c00044 	movi	r3,1
  80564c:	10c01e05 	stb	r3,120(r2)
  }
  d->_cg164 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805650:	e0bffc17 	ldw	r2,-16(fp)
  805654:	10801dc3 	ldbu	r2,119(r2)
  805658:	10803fcc 	andi	r2,r2,255
  80565c:	1080201c 	xori	r2,r2,128
  805660:	10bfe004 	addi	r2,r2,-128
  805664:	1000061e 	bne	r2,zero,805680 <logic+0x4ef0>
  805668:	e0bffc17 	ldw	r2,-16(fp)
  80566c:	10801e03 	ldbu	r2,120(r2)
  805670:	10803fcc 	andi	r2,r2,255
  805674:	1080201c 	xori	r2,r2,128
  805678:	10bfe004 	addi	r2,r2,-128
  80567c:	10000226 	beq	r2,zero,805688 <logic+0x4ef8>
  805680:	00800044 	movi	r2,1
  805684:	00000106 	br	80568c <logic+0x4efc>
  805688:	0005883a 	mov	r2,zero
  80568c:	1007883a 	mov	r3,r2
  805690:	e0bffc17 	ldw	r2,-16(fp)
  805694:	10c054c5 	stb	r3,339(r2)
  d->_g195 = d->_g153 && !d->_cg162 || d->_g143 && !d->_cg164;
  805698:	e0bffc17 	ldw	r2,-16(fp)
  80569c:	10803843 	ldbu	r2,225(r2)
  8056a0:	10803fcc 	andi	r2,r2,255
  8056a4:	1080201c 	xori	r2,r2,128
  8056a8:	10bfe004 	addi	r2,r2,-128
  8056ac:	10000626 	beq	r2,zero,8056c8 <logic+0x4f38>
  8056b0:	e0bffc17 	ldw	r2,-16(fp)
  8056b4:	10805483 	ldbu	r2,338(r2)
  8056b8:	10803fcc 	andi	r2,r2,255
  8056bc:	1080201c 	xori	r2,r2,128
  8056c0:	10bfe004 	addi	r2,r2,-128
  8056c4:	10000c26 	beq	r2,zero,8056f8 <logic+0x4f68>
  8056c8:	e0bffc17 	ldw	r2,-16(fp)
  8056cc:	108036c3 	ldbu	r2,219(r2)
  8056d0:	10803fcc 	andi	r2,r2,255
  8056d4:	1080201c 	xori	r2,r2,128
  8056d8:	10bfe004 	addi	r2,r2,-128
  8056dc:	10000826 	beq	r2,zero,805700 <logic+0x4f70>
  8056e0:	e0bffc17 	ldw	r2,-16(fp)
  8056e4:	108054c3 	ldbu	r2,339(r2)
  8056e8:	10803fcc 	andi	r2,r2,255
  8056ec:	1080201c 	xori	r2,r2,128
  8056f0:	10bfe004 	addi	r2,r2,-128
  8056f4:	1000021e 	bne	r2,zero,805700 <logic+0x4f70>
  8056f8:	00800044 	movi	r2,1
  8056fc:	00000106 	br	805704 <logic+0x4f74>
  805700:	0005883a 	mov	r2,zero
  805704:	1007883a 	mov	r3,r2
  805708:	e0bffc17 	ldw	r2,-16(fp)
  80570c:	10c03f85 	stb	r3,254(r2)
  d->_g165 = d->_g143 && d->_cg164;
  805710:	e0bffc17 	ldw	r2,-16(fp)
  805714:	108036c3 	ldbu	r2,219(r2)
  805718:	10803fcc 	andi	r2,r2,255
  80571c:	1080201c 	xori	r2,r2,128
  805720:	10bfe004 	addi	r2,r2,-128
  805724:	10000826 	beq	r2,zero,805748 <logic+0x4fb8>
  805728:	e0bffc17 	ldw	r2,-16(fp)
  80572c:	108054c3 	ldbu	r2,339(r2)
  805730:	10803fcc 	andi	r2,r2,255
  805734:	1080201c 	xori	r2,r2,128
  805738:	10bfe004 	addi	r2,r2,-128
  80573c:	10000226 	beq	r2,zero,805748 <logic+0x4fb8>
  805740:	00800044 	movi	r2,1
  805744:	00000106 	br	80574c <logic+0x4fbc>
  805748:	0005883a 	mov	r2,zero
  80574c:	1007883a 	mov	r3,r2
  805750:	e0bffc17 	ldw	r2,-16(fp)
  805754:	10c03a45 	stb	r3,233(r2)
  d->_cg166 = d->_region4_null_AEI < d->AEI_time;
  805758:	e0bffc17 	ldw	r2,-16(fp)
  80575c:	14000f17 	ldw	r16,60(r2)
  805760:	14401017 	ldw	r17,64(r2)
  805764:	e0bffc17 	ldw	r2,-16(fp)
  805768:	10800417 	ldw	r2,16(r2)
  80576c:	1009883a 	mov	r4,r2
  805770:	0808c3c0 	call	808c3c <__floatsidf>
  805774:	1009883a 	mov	r4,r2
  805778:	180b883a 	mov	r5,r3
  80577c:	04800044 	movi	r18,1
  805780:	200d883a 	mov	r6,r4
  805784:	280f883a 	mov	r7,r5
  805788:	8009883a 	mov	r4,r16
  80578c:	880b883a 	mov	r5,r17
  805790:	080824c0 	call	80824c <__ledf2>
  805794:	10000116 	blt	r2,zero,80579c <logic+0x500c>
  805798:	0025883a 	mov	r18,zero
  80579c:	9007883a 	mov	r3,r18
  8057a0:	e0bffc17 	ldw	r2,-16(fp)
  8057a4:	10c05505 	stb	r3,340(r2)
  d->_g167 = d->_g153 && d->_cg166;
  8057a8:	e0bffc17 	ldw	r2,-16(fp)
  8057ac:	10803843 	ldbu	r2,225(r2)
  8057b0:	10803fcc 	andi	r2,r2,255
  8057b4:	1080201c 	xori	r2,r2,128
  8057b8:	10bfe004 	addi	r2,r2,-128
  8057bc:	10000826 	beq	r2,zero,8057e0 <logic+0x5050>
  8057c0:	e0bffc17 	ldw	r2,-16(fp)
  8057c4:	10805503 	ldbu	r2,340(r2)
  8057c8:	10803fcc 	andi	r2,r2,255
  8057cc:	1080201c 	xori	r2,r2,128
  8057d0:	10bfe004 	addi	r2,r2,-128
  8057d4:	10000226 	beq	r2,zero,8057e0 <logic+0x5050>
  8057d8:	00800044 	movi	r2,1
  8057dc:	00000106 	br	8057e4 <logic+0x5054>
  8057e0:	0005883a 	mov	r2,zero
  8057e4:	1007883a 	mov	r3,r2
  8057e8:	e0bffc17 	ldw	r2,-16(fp)
  8057ec:	10c03a85 	stb	r3,234(r2)
  if (d->_g167) {
  8057f0:	e0bffc17 	ldw	r2,-16(fp)
  8057f4:	10803a83 	ldbu	r2,234(r2)
  8057f8:	10803fcc 	andi	r2,r2,255
  8057fc:	1080201c 	xori	r2,r2,128
  805800:	10bfe004 	addi	r2,r2,-128
  805804:	10003426 	beq	r2,zero,8058d8 <logic+0x5148>
    d->sleepT = (d->sleepT < (d->AEI_time - d->_region4_null_AEI)) ? d->sleepT : (d->AEI_time - d->_region4_null_AEI);
  805808:	e0bffc17 	ldw	r2,-16(fp)
  80580c:	14001517 	ldw	r16,84(r2)
  805810:	14401617 	ldw	r17,88(r2)
  805814:	e0bffc17 	ldw	r2,-16(fp)
  805818:	10800417 	ldw	r2,16(r2)
  80581c:	1009883a 	mov	r4,r2
  805820:	0808c3c0 	call	808c3c <__floatsidf>
  805824:	1011883a 	mov	r8,r2
  805828:	1813883a 	mov	r9,r3
  80582c:	e13ffc17 	ldw	r4,-16(fp)
  805830:	20800f17 	ldw	r2,60(r4)
  805834:	20c01017 	ldw	r3,64(r4)
  805838:	100d883a 	mov	r6,r2
  80583c:	180f883a 	mov	r7,r3
  805840:	4009883a 	mov	r4,r8
  805844:	480b883a 	mov	r5,r9
  805848:	08083400 	call	808340 <__subdf3>
  80584c:	1009883a 	mov	r4,r2
  805850:	180b883a 	mov	r5,r3
  805854:	2005883a 	mov	r2,r4
  805858:	2807883a 	mov	r3,r5
  80585c:	100d883a 	mov	r6,r2
  805860:	180f883a 	mov	r7,r3
  805864:	8009883a 	mov	r4,r16
  805868:	880b883a 	mov	r5,r17
  80586c:	080824c0 	call	80824c <__ledf2>
  805870:	1000040e 	bge	r2,zero,805884 <logic+0x50f4>
  805874:	e13ffc17 	ldw	r4,-16(fp)
  805878:	20801517 	ldw	r2,84(r4)
  80587c:	20c01617 	ldw	r3,88(r4)
  805880:	00001206 	br	8058cc <logic+0x513c>
  805884:	e0bffc17 	ldw	r2,-16(fp)
  805888:	10800417 	ldw	r2,16(r2)
  80588c:	1009883a 	mov	r4,r2
  805890:	0808c3c0 	call	808c3c <__floatsidf>
  805894:	1011883a 	mov	r8,r2
  805898:	1813883a 	mov	r9,r3
  80589c:	e13ffc17 	ldw	r4,-16(fp)
  8058a0:	20800f17 	ldw	r2,60(r4)
  8058a4:	20c01017 	ldw	r3,64(r4)
  8058a8:	100d883a 	mov	r6,r2
  8058ac:	180f883a 	mov	r7,r3
  8058b0:	4009883a 	mov	r4,r8
  8058b4:	480b883a 	mov	r5,r9
  8058b8:	08083400 	call	808340 <__subdf3>
  8058bc:	1009883a 	mov	r4,r2
  8058c0:	180b883a 	mov	r5,r3
  8058c4:	2005883a 	mov	r2,r4
  8058c8:	2807883a 	mov	r3,r5
  8058cc:	e13ffc17 	ldw	r4,-16(fp)
  8058d0:	20801515 	stw	r2,84(r4)
  8058d4:	20c01615 	stw	r3,88(r4)
  }
  d->_cg167 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  8058d8:	e0bffc17 	ldw	r2,-16(fp)
  8058dc:	10801dc3 	ldbu	r2,119(r2)
  8058e0:	10803fcc 	andi	r2,r2,255
  8058e4:	1080201c 	xori	r2,r2,128
  8058e8:	10bfe004 	addi	r2,r2,-128
  8058ec:	1000061e 	bne	r2,zero,805908 <logic+0x5178>
  8058f0:	e0bffc17 	ldw	r2,-16(fp)
  8058f4:	10801e03 	ldbu	r2,120(r2)
  8058f8:	10803fcc 	andi	r2,r2,255
  8058fc:	1080201c 	xori	r2,r2,128
  805900:	10bfe004 	addi	r2,r2,-128
  805904:	10000226 	beq	r2,zero,805910 <logic+0x5180>
  805908:	00800044 	movi	r2,1
  80590c:	00000106 	br	805914 <logic+0x5184>
  805910:	0005883a 	mov	r2,zero
  805914:	1007883a 	mov	r3,r2
  805918:	e0bffc17 	ldw	r2,-16(fp)
  80591c:	10c05545 	stb	r3,341(r2)
  d->_g169 = d->_pg167;
  805920:	e0bffc17 	ldw	r2,-16(fp)
  805924:	10c06b03 	ldbu	r3,428(r2)
  805928:	e0bffc17 	ldw	r2,-16(fp)
  80592c:	10c03ac5 	stb	r3,235(r2)
  d->_g175 = d->_pg176;
  805930:	e0bffc17 	ldw	r2,-16(fp)
  805934:	10c06b43 	ldbu	r3,429(r2)
  805938:	e0bffc17 	ldw	r2,-16(fp)
  80593c:	10c03c05 	stb	r3,240(r2)
  d->_g170 = d->_g169 || d->_g175;
  805940:	e0bffc17 	ldw	r2,-16(fp)
  805944:	10803ac3 	ldbu	r2,235(r2)
  805948:	10803fcc 	andi	r2,r2,255
  80594c:	1080201c 	xori	r2,r2,128
  805950:	10bfe004 	addi	r2,r2,-128
  805954:	1000061e 	bne	r2,zero,805970 <logic+0x51e0>
  805958:	e0bffc17 	ldw	r2,-16(fp)
  80595c:	10803c03 	ldbu	r2,240(r2)
  805960:	10803fcc 	andi	r2,r2,255
  805964:	1080201c 	xori	r2,r2,128
  805968:	10bfe004 	addi	r2,r2,-128
  80596c:	10000226 	beq	r2,zero,805978 <logic+0x51e8>
  805970:	00800044 	movi	r2,1
  805974:	00000106 	br	80597c <logic+0x51ec>
  805978:	0005883a 	mov	r2,zero
  80597c:	1007883a 	mov	r3,r2
  805980:	e0bffc17 	ldw	r2,-16(fp)
  805984:	10c03b05 	stb	r3,236(r2)
  d->_cg170 = d->_region4_null_AEI < d->AEI_time;
  805988:	e0bffc17 	ldw	r2,-16(fp)
  80598c:	14000f17 	ldw	r16,60(r2)
  805990:	14401017 	ldw	r17,64(r2)
  805994:	e0bffc17 	ldw	r2,-16(fp)
  805998:	10800417 	ldw	r2,16(r2)
  80599c:	1009883a 	mov	r4,r2
  8059a0:	0808c3c0 	call	808c3c <__floatsidf>
  8059a4:	1009883a 	mov	r4,r2
  8059a8:	180b883a 	mov	r5,r3
  8059ac:	04800044 	movi	r18,1
  8059b0:	200d883a 	mov	r6,r4
  8059b4:	280f883a 	mov	r7,r5
  8059b8:	8009883a 	mov	r4,r16
  8059bc:	880b883a 	mov	r5,r17
  8059c0:	080824c0 	call	80824c <__ledf2>
  8059c4:	10000116 	blt	r2,zero,8059cc <logic+0x523c>
  8059c8:	0025883a 	mov	r18,zero
  8059cc:	9007883a 	mov	r3,r18
  8059d0:	e0bffc17 	ldw	r2,-16(fp)
  8059d4:	10c055c5 	stb	r3,343(r2)
  d->_g171 = d->_g170 && d->_cg170;
  8059d8:	e0bffc17 	ldw	r2,-16(fp)
  8059dc:	10803b03 	ldbu	r2,236(r2)
  8059e0:	10803fcc 	andi	r2,r2,255
  8059e4:	1080201c 	xori	r2,r2,128
  8059e8:	10bfe004 	addi	r2,r2,-128
  8059ec:	10000826 	beq	r2,zero,805a10 <logic+0x5280>
  8059f0:	e0bffc17 	ldw	r2,-16(fp)
  8059f4:	108055c3 	ldbu	r2,343(r2)
  8059f8:	10803fcc 	andi	r2,r2,255
  8059fc:	1080201c 	xori	r2,r2,128
  805a00:	10bfe004 	addi	r2,r2,-128
  805a04:	10000226 	beq	r2,zero,805a10 <logic+0x5280>
  805a08:	00800044 	movi	r2,1
  805a0c:	00000106 	br	805a14 <logic+0x5284>
  805a10:	0005883a 	mov	r2,zero
  805a14:	1007883a 	mov	r3,r2
  805a18:	e0bffc17 	ldw	r2,-16(fp)
  805a1c:	10c03b45 	stb	r3,237(r2)
  if (d->_g171) {
  805a20:	e0bffc17 	ldw	r2,-16(fp)
  805a24:	10803b43 	ldbu	r2,237(r2)
  805a28:	10803fcc 	andi	r2,r2,255
  805a2c:	1080201c 	xori	r2,r2,128
  805a30:	10bfe004 	addi	r2,r2,-128
  805a34:	10003426 	beq	r2,zero,805b08 <logic+0x5378>
    d->sleepT = (d->sleepT < (d->AEI_time - d->_region4_null_AEI)) ? d->sleepT : (d->AEI_time - d->_region4_null_AEI);
  805a38:	e0bffc17 	ldw	r2,-16(fp)
  805a3c:	14001517 	ldw	r16,84(r2)
  805a40:	14401617 	ldw	r17,88(r2)
  805a44:	e0bffc17 	ldw	r2,-16(fp)
  805a48:	10800417 	ldw	r2,16(r2)
  805a4c:	1009883a 	mov	r4,r2
  805a50:	0808c3c0 	call	808c3c <__floatsidf>
  805a54:	1011883a 	mov	r8,r2
  805a58:	1813883a 	mov	r9,r3
  805a5c:	e13ffc17 	ldw	r4,-16(fp)
  805a60:	20800f17 	ldw	r2,60(r4)
  805a64:	20c01017 	ldw	r3,64(r4)
  805a68:	100d883a 	mov	r6,r2
  805a6c:	180f883a 	mov	r7,r3
  805a70:	4009883a 	mov	r4,r8
  805a74:	480b883a 	mov	r5,r9
  805a78:	08083400 	call	808340 <__subdf3>
  805a7c:	1009883a 	mov	r4,r2
  805a80:	180b883a 	mov	r5,r3
  805a84:	2005883a 	mov	r2,r4
  805a88:	2807883a 	mov	r3,r5
  805a8c:	100d883a 	mov	r6,r2
  805a90:	180f883a 	mov	r7,r3
  805a94:	8009883a 	mov	r4,r16
  805a98:	880b883a 	mov	r5,r17
  805a9c:	080824c0 	call	80824c <__ledf2>
  805aa0:	1000040e 	bge	r2,zero,805ab4 <logic+0x5324>
  805aa4:	e13ffc17 	ldw	r4,-16(fp)
  805aa8:	20801517 	ldw	r2,84(r4)
  805aac:	20c01617 	ldw	r3,88(r4)
  805ab0:	00001206 	br	805afc <logic+0x536c>
  805ab4:	e0bffc17 	ldw	r2,-16(fp)
  805ab8:	10800417 	ldw	r2,16(r2)
  805abc:	1009883a 	mov	r4,r2
  805ac0:	0808c3c0 	call	808c3c <__floatsidf>
  805ac4:	1011883a 	mov	r8,r2
  805ac8:	1813883a 	mov	r9,r3
  805acc:	e13ffc17 	ldw	r4,-16(fp)
  805ad0:	20800f17 	ldw	r2,60(r4)
  805ad4:	20c01017 	ldw	r3,64(r4)
  805ad8:	100d883a 	mov	r6,r2
  805adc:	180f883a 	mov	r7,r3
  805ae0:	4009883a 	mov	r4,r8
  805ae4:	480b883a 	mov	r5,r9
  805ae8:	08083400 	call	808340 <__subdf3>
  805aec:	1009883a 	mov	r4,r2
  805af0:	180b883a 	mov	r5,r3
  805af4:	2005883a 	mov	r2,r4
  805af8:	2807883a 	mov	r3,r5
  805afc:	e13ffc17 	ldw	r4,-16(fp)
  805b00:	20801515 	stw	r2,84(r4)
  805b04:	20c01615 	stw	r3,88(r4)
  }
  d->_cg171 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805b08:	e0bffc17 	ldw	r2,-16(fp)
  805b0c:	10801dc3 	ldbu	r2,119(r2)
  805b10:	10803fcc 	andi	r2,r2,255
  805b14:	1080201c 	xori	r2,r2,128
  805b18:	10bfe004 	addi	r2,r2,-128
  805b1c:	1000061e 	bne	r2,zero,805b38 <logic+0x53a8>
  805b20:	e0bffc17 	ldw	r2,-16(fp)
  805b24:	10801e03 	ldbu	r2,120(r2)
  805b28:	10803fcc 	andi	r2,r2,255
  805b2c:	1080201c 	xori	r2,r2,128
  805b30:	10bfe004 	addi	r2,r2,-128
  805b34:	10000226 	beq	r2,zero,805b40 <logic+0x53b0>
  805b38:	00800044 	movi	r2,1
  805b3c:	00000106 	br	805b44 <logic+0x53b4>
  805b40:	0005883a 	mov	r2,zero
  805b44:	1007883a 	mov	r3,r2
  805b48:	e0bffc17 	ldw	r2,-16(fp)
  805b4c:	10c05585 	stb	r3,342(r2)
  d->_g167 = d->_g167 && !d->_cg167 || d->_g171 && !d->_cg171;
  805b50:	e0bffc17 	ldw	r2,-16(fp)
  805b54:	10803a83 	ldbu	r2,234(r2)
  805b58:	10803fcc 	andi	r2,r2,255
  805b5c:	1080201c 	xori	r2,r2,128
  805b60:	10bfe004 	addi	r2,r2,-128
  805b64:	10000626 	beq	r2,zero,805b80 <logic+0x53f0>
  805b68:	e0bffc17 	ldw	r2,-16(fp)
  805b6c:	10805543 	ldbu	r2,341(r2)
  805b70:	10803fcc 	andi	r2,r2,255
  805b74:	1080201c 	xori	r2,r2,128
  805b78:	10bfe004 	addi	r2,r2,-128
  805b7c:	10000c26 	beq	r2,zero,805bb0 <logic+0x5420>
  805b80:	e0bffc17 	ldw	r2,-16(fp)
  805b84:	10803b43 	ldbu	r2,237(r2)
  805b88:	10803fcc 	andi	r2,r2,255
  805b8c:	1080201c 	xori	r2,r2,128
  805b90:	10bfe004 	addi	r2,r2,-128
  805b94:	10000826 	beq	r2,zero,805bb8 <logic+0x5428>
  805b98:	e0bffc17 	ldw	r2,-16(fp)
  805b9c:	10805583 	ldbu	r2,342(r2)
  805ba0:	10803fcc 	andi	r2,r2,255
  805ba4:	1080201c 	xori	r2,r2,128
  805ba8:	10bfe004 	addi	r2,r2,-128
  805bac:	1000021e 	bne	r2,zero,805bb8 <logic+0x5428>
  805bb0:	00800044 	movi	r2,1
  805bb4:	00000106 	br	805bbc <logic+0x542c>
  805bb8:	0005883a 	mov	r2,zero
  805bbc:	1007883a 	mov	r3,r2
  805bc0:	e0bffc17 	ldw	r2,-16(fp)
  805bc4:	10c03a85 	stb	r3,234(r2)
  d->_g170 = d->_g170 && !d->_cg170;
  805bc8:	e0bffc17 	ldw	r2,-16(fp)
  805bcc:	10803b03 	ldbu	r2,236(r2)
  805bd0:	10803fcc 	andi	r2,r2,255
  805bd4:	1080201c 	xori	r2,r2,128
  805bd8:	10bfe004 	addi	r2,r2,-128
  805bdc:	10000826 	beq	r2,zero,805c00 <logic+0x5470>
  805be0:	e0bffc17 	ldw	r2,-16(fp)
  805be4:	108055c3 	ldbu	r2,343(r2)
  805be8:	10803fcc 	andi	r2,r2,255
  805bec:	1080201c 	xori	r2,r2,128
  805bf0:	10bfe004 	addi	r2,r2,-128
  805bf4:	1000021e 	bne	r2,zero,805c00 <logic+0x5470>
  805bf8:	00800044 	movi	r2,1
  805bfc:	00000106 	br	805c04 <logic+0x5474>
  805c00:	0005883a 	mov	r2,zero
  805c04:	1007883a 	mov	r3,r2
  805c08:	e0bffc17 	ldw	r2,-16(fp)
  805c0c:	10c03b05 	stb	r3,236(r2)
  d->_cg173 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805c10:	e0bffc17 	ldw	r2,-16(fp)
  805c14:	10801dc3 	ldbu	r2,119(r2)
  805c18:	10803fcc 	andi	r2,r2,255
  805c1c:	1080201c 	xori	r2,r2,128
  805c20:	10bfe004 	addi	r2,r2,-128
  805c24:	1000061e 	bne	r2,zero,805c40 <logic+0x54b0>
  805c28:	e0bffc17 	ldw	r2,-16(fp)
  805c2c:	10801e03 	ldbu	r2,120(r2)
  805c30:	10803fcc 	andi	r2,r2,255
  805c34:	1080201c 	xori	r2,r2,128
  805c38:	10bfe004 	addi	r2,r2,-128
  805c3c:	10000226 	beq	r2,zero,805c48 <logic+0x54b8>
  805c40:	00800044 	movi	r2,1
  805c44:	00000106 	br	805c4c <logic+0x54bc>
  805c48:	0005883a 	mov	r2,zero
  805c4c:	1007883a 	mov	r3,r2
  805c50:	e0bffc17 	ldw	r2,-16(fp)
  805c54:	10c05605 	stb	r3,344(r2)
  d->_g171 = d->_g171 && d->_cg171 || d->_g170 && d->_cg173;
  805c58:	e0bffc17 	ldw	r2,-16(fp)
  805c5c:	10803b43 	ldbu	r2,237(r2)
  805c60:	10803fcc 	andi	r2,r2,255
  805c64:	1080201c 	xori	r2,r2,128
  805c68:	10bfe004 	addi	r2,r2,-128
  805c6c:	10000626 	beq	r2,zero,805c88 <logic+0x54f8>
  805c70:	e0bffc17 	ldw	r2,-16(fp)
  805c74:	10805583 	ldbu	r2,342(r2)
  805c78:	10803fcc 	andi	r2,r2,255
  805c7c:	1080201c 	xori	r2,r2,128
  805c80:	10bfe004 	addi	r2,r2,-128
  805c84:	10000c1e 	bne	r2,zero,805cb8 <logic+0x5528>
  805c88:	e0bffc17 	ldw	r2,-16(fp)
  805c8c:	10803b03 	ldbu	r2,236(r2)
  805c90:	10803fcc 	andi	r2,r2,255
  805c94:	1080201c 	xori	r2,r2,128
  805c98:	10bfe004 	addi	r2,r2,-128
  805c9c:	10000826 	beq	r2,zero,805cc0 <logic+0x5530>
  805ca0:	e0bffc17 	ldw	r2,-16(fp)
  805ca4:	10805603 	ldbu	r2,344(r2)
  805ca8:	10803fcc 	andi	r2,r2,255
  805cac:	1080201c 	xori	r2,r2,128
  805cb0:	10bfe004 	addi	r2,r2,-128
  805cb4:	10000226 	beq	r2,zero,805cc0 <logic+0x5530>
  805cb8:	00800044 	movi	r2,1
  805cbc:	00000106 	br	805cc4 <logic+0x5534>
  805cc0:	0005883a 	mov	r2,zero
  805cc4:	1007883a 	mov	r3,r2
  805cc8:	e0bffc17 	ldw	r2,-16(fp)
  805ccc:	10c03b45 	stb	r3,237(r2)
  d->_g176 = d->_g153 && !d->_cg166;
  805cd0:	e0bffc17 	ldw	r2,-16(fp)
  805cd4:	10803843 	ldbu	r2,225(r2)
  805cd8:	10803fcc 	andi	r2,r2,255
  805cdc:	1080201c 	xori	r2,r2,128
  805ce0:	10bfe004 	addi	r2,r2,-128
  805ce4:	10000826 	beq	r2,zero,805d08 <logic+0x5578>
  805ce8:	e0bffc17 	ldw	r2,-16(fp)
  805cec:	10805503 	ldbu	r2,340(r2)
  805cf0:	10803fcc 	andi	r2,r2,255
  805cf4:	1080201c 	xori	r2,r2,128
  805cf8:	10bfe004 	addi	r2,r2,-128
  805cfc:	1000021e 	bne	r2,zero,805d08 <logic+0x5578>
  805d00:	00800044 	movi	r2,1
  805d04:	00000106 	br	805d0c <logic+0x557c>
  805d08:	0005883a 	mov	r2,zero
  805d0c:	1007883a 	mov	r3,r2
  805d10:	e0bffc17 	ldw	r2,-16(fp)
  805d14:	10c03c45 	stb	r3,241(r2)
  d->_cg176 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805d18:	e0bffc17 	ldw	r2,-16(fp)
  805d1c:	10801dc3 	ldbu	r2,119(r2)
  805d20:	10803fcc 	andi	r2,r2,255
  805d24:	1080201c 	xori	r2,r2,128
  805d28:	10bfe004 	addi	r2,r2,-128
  805d2c:	1000061e 	bne	r2,zero,805d48 <logic+0x55b8>
  805d30:	e0bffc17 	ldw	r2,-16(fp)
  805d34:	10801e03 	ldbu	r2,120(r2)
  805d38:	10803fcc 	andi	r2,r2,255
  805d3c:	1080201c 	xori	r2,r2,128
  805d40:	10bfe004 	addi	r2,r2,-128
  805d44:	10000226 	beq	r2,zero,805d50 <logic+0x55c0>
  805d48:	00800044 	movi	r2,1
  805d4c:	00000106 	br	805d54 <logic+0x55c4>
  805d50:	0005883a 	mov	r2,zero
  805d54:	1007883a 	mov	r3,r2
  805d58:	e0bffc17 	ldw	r2,-16(fp)
  805d5c:	10c05645 	stb	r3,345(r2)
  d->_g176 = d->_g170 && !d->_cg173 || d->_g176 && !d->_cg176;
  805d60:	e0bffc17 	ldw	r2,-16(fp)
  805d64:	10803b03 	ldbu	r2,236(r2)
  805d68:	10803fcc 	andi	r2,r2,255
  805d6c:	1080201c 	xori	r2,r2,128
  805d70:	10bfe004 	addi	r2,r2,-128
  805d74:	10000626 	beq	r2,zero,805d90 <logic+0x5600>
  805d78:	e0bffc17 	ldw	r2,-16(fp)
  805d7c:	10805603 	ldbu	r2,344(r2)
  805d80:	10803fcc 	andi	r2,r2,255
  805d84:	1080201c 	xori	r2,r2,128
  805d88:	10bfe004 	addi	r2,r2,-128
  805d8c:	10000c26 	beq	r2,zero,805dc0 <logic+0x5630>
  805d90:	e0bffc17 	ldw	r2,-16(fp)
  805d94:	10803c43 	ldbu	r2,241(r2)
  805d98:	10803fcc 	andi	r2,r2,255
  805d9c:	1080201c 	xori	r2,r2,128
  805da0:	10bfe004 	addi	r2,r2,-128
  805da4:	10000826 	beq	r2,zero,805dc8 <logic+0x5638>
  805da8:	e0bffc17 	ldw	r2,-16(fp)
  805dac:	10805643 	ldbu	r2,345(r2)
  805db0:	10803fcc 	andi	r2,r2,255
  805db4:	1080201c 	xori	r2,r2,128
  805db8:	10bfe004 	addi	r2,r2,-128
  805dbc:	1000021e 	bne	r2,zero,805dc8 <logic+0x5638>
  805dc0:	00800044 	movi	r2,1
  805dc4:	00000106 	br	805dcc <logic+0x563c>
  805dc8:	0005883a 	mov	r2,zero
  805dcc:	1007883a 	mov	r3,r2
  805dd0:	e0bffc17 	ldw	r2,-16(fp)
  805dd4:	10c03c45 	stb	r3,241(r2)
  d->_g173 = d->_g153 || d->_g194_e2 && !d->_cg182;
  805dd8:	e0bffc17 	ldw	r2,-16(fp)
  805ddc:	10803843 	ldbu	r2,225(r2)
  805de0:	10803fcc 	andi	r2,r2,255
  805de4:	1080201c 	xori	r2,r2,128
  805de8:	10bfe004 	addi	r2,r2,-128
  805dec:	10000c1e 	bne	r2,zero,805e20 <logic+0x5690>
  805df0:	e0bffc17 	ldw	r2,-16(fp)
  805df4:	10806203 	ldbu	r2,392(r2)
  805df8:	10803fcc 	andi	r2,r2,255
  805dfc:	1080201c 	xori	r2,r2,128
  805e00:	10bfe004 	addi	r2,r2,-128
  805e04:	10000826 	beq	r2,zero,805e28 <logic+0x5698>
  805e08:	e0bffc17 	ldw	r2,-16(fp)
  805e0c:	10805683 	ldbu	r2,346(r2)
  805e10:	10803fcc 	andi	r2,r2,255
  805e14:	1080201c 	xori	r2,r2,128
  805e18:	10bfe004 	addi	r2,r2,-128
  805e1c:	1000021e 	bne	r2,zero,805e28 <logic+0x5698>
  805e20:	00800044 	movi	r2,1
  805e24:	00000106 	br	805e2c <logic+0x569c>
  805e28:	0005883a 	mov	r2,zero
  805e2c:	1007883a 	mov	r3,r2
  805e30:	e0bffc17 	ldw	r2,-16(fp)
  805e34:	10c03bc5 	stb	r3,239(r2)
  d->_g182 = d->_g190 || d->_g194;
  805e38:	e0bffc17 	ldw	r2,-16(fp)
  805e3c:	10803ec3 	ldbu	r2,251(r2)
  805e40:	10803fcc 	andi	r2,r2,255
  805e44:	1080201c 	xori	r2,r2,128
  805e48:	10bfe004 	addi	r2,r2,-128
  805e4c:	1000061e 	bne	r2,zero,805e68 <logic+0x56d8>
  805e50:	e0bffc17 	ldw	r2,-16(fp)
  805e54:	10803f43 	ldbu	r2,253(r2)
  805e58:	10803fcc 	andi	r2,r2,255
  805e5c:	1080201c 	xori	r2,r2,128
  805e60:	10bfe004 	addi	r2,r2,-128
  805e64:	10000226 	beq	r2,zero,805e70 <logic+0x56e0>
  805e68:	00800044 	movi	r2,1
  805e6c:	00000106 	br	805e74 <logic+0x56e4>
  805e70:	0005883a 	mov	r2,zero
  805e74:	1007883a 	mov	r3,r2
  805e78:	e0bffc17 	ldw	r2,-16(fp)
  805e7c:	10c03d45 	stb	r3,245(r2)
  d->_g161 = !d->_g143;
  805e80:	e0bffc17 	ldw	r2,-16(fp)
  805e84:	108036c3 	ldbu	r2,219(r2)
  805e88:	10803fcc 	andi	r2,r2,255
  805e8c:	1080201c 	xori	r2,r2,128
  805e90:	10bfe004 	addi	r2,r2,-128
  805e94:	1005003a 	cmpeq	r2,r2,zero
  805e98:	1007883a 	mov	r3,r2
  805e9c:	e0bffc17 	ldw	r2,-16(fp)
  805ea0:	10c039c5 	stb	r3,231(r2)
  d->_g183 = !(d->_g175 || d->_g169);
  805ea4:	e0bffc17 	ldw	r2,-16(fp)
  805ea8:	10803c03 	ldbu	r2,240(r2)
  805eac:	10803fcc 	andi	r2,r2,255
  805eb0:	1080201c 	xori	r2,r2,128
  805eb4:	10bfe004 	addi	r2,r2,-128
  805eb8:	1000081e 	bne	r2,zero,805edc <logic+0x574c>
  805ebc:	e0bffc17 	ldw	r2,-16(fp)
  805ec0:	10803ac3 	ldbu	r2,235(r2)
  805ec4:	10803fcc 	andi	r2,r2,255
  805ec8:	1080201c 	xori	r2,r2,128
  805ecc:	10bfe004 	addi	r2,r2,-128
  805ed0:	1000021e 	bne	r2,zero,805edc <logic+0x574c>
  805ed4:	00800044 	movi	r2,1
  805ed8:	00000106 	br	805ee0 <logic+0x5750>
  805edc:	0005883a 	mov	r2,zero
  805ee0:	1007883a 	mov	r3,r2
  805ee4:	e0bffc17 	ldw	r2,-16(fp)
  805ee8:	10c03d85 	stb	r3,246(r2)
  d->_g180 = !d->_g190_e1;
  805eec:	e0bffc17 	ldw	r2,-16(fp)
  805ef0:	108061c3 	ldbu	r2,391(r2)
  805ef4:	10803fcc 	andi	r2,r2,255
  805ef8:	1080201c 	xori	r2,r2,128
  805efc:	10bfe004 	addi	r2,r2,-128
  805f00:	1005003a 	cmpeq	r2,r2,zero
  805f04:	1007883a 	mov	r3,r2
  805f08:	e0bffc17 	ldw	r2,-16(fp)
  805f0c:	10c03cc5 	stb	r3,243(r2)
  d->_g164 = (d->_g161 || d->_g165) && (d->_g183 || d->_g171) && (d->_g180 || d->_g182) && (d->_g165 || d->_g171 || d->_g182);
  805f10:	e0bffc17 	ldw	r2,-16(fp)
  805f14:	108039c3 	ldbu	r2,231(r2)
  805f18:	10803fcc 	andi	r2,r2,255
  805f1c:	1080201c 	xori	r2,r2,128
  805f20:	10bfe004 	addi	r2,r2,-128
  805f24:	1000061e 	bne	r2,zero,805f40 <logic+0x57b0>
  805f28:	e0bffc17 	ldw	r2,-16(fp)
  805f2c:	10803a43 	ldbu	r2,233(r2)
  805f30:	10803fcc 	andi	r2,r2,255
  805f34:	1080201c 	xori	r2,r2,128
  805f38:	10bfe004 	addi	r2,r2,-128
  805f3c:	10002c26 	beq	r2,zero,805ff0 <logic+0x5860>
  805f40:	e0bffc17 	ldw	r2,-16(fp)
  805f44:	10803d83 	ldbu	r2,246(r2)
  805f48:	10803fcc 	andi	r2,r2,255
  805f4c:	1080201c 	xori	r2,r2,128
  805f50:	10bfe004 	addi	r2,r2,-128
  805f54:	1000061e 	bne	r2,zero,805f70 <logic+0x57e0>
  805f58:	e0bffc17 	ldw	r2,-16(fp)
  805f5c:	10803b43 	ldbu	r2,237(r2)
  805f60:	10803fcc 	andi	r2,r2,255
  805f64:	1080201c 	xori	r2,r2,128
  805f68:	10bfe004 	addi	r2,r2,-128
  805f6c:	10002026 	beq	r2,zero,805ff0 <logic+0x5860>
  805f70:	e0bffc17 	ldw	r2,-16(fp)
  805f74:	10803cc3 	ldbu	r2,243(r2)
  805f78:	10803fcc 	andi	r2,r2,255
  805f7c:	1080201c 	xori	r2,r2,128
  805f80:	10bfe004 	addi	r2,r2,-128
  805f84:	1000061e 	bne	r2,zero,805fa0 <logic+0x5810>
  805f88:	e0bffc17 	ldw	r2,-16(fp)
  805f8c:	10803d43 	ldbu	r2,245(r2)
  805f90:	10803fcc 	andi	r2,r2,255
  805f94:	1080201c 	xori	r2,r2,128
  805f98:	10bfe004 	addi	r2,r2,-128
  805f9c:	10001426 	beq	r2,zero,805ff0 <logic+0x5860>
  805fa0:	e0bffc17 	ldw	r2,-16(fp)
  805fa4:	10803a43 	ldbu	r2,233(r2)
  805fa8:	10803fcc 	andi	r2,r2,255
  805fac:	1080201c 	xori	r2,r2,128
  805fb0:	10bfe004 	addi	r2,r2,-128
  805fb4:	10000c1e 	bne	r2,zero,805fe8 <logic+0x5858>
  805fb8:	e0bffc17 	ldw	r2,-16(fp)
  805fbc:	10803b43 	ldbu	r2,237(r2)
  805fc0:	10803fcc 	andi	r2,r2,255
  805fc4:	1080201c 	xori	r2,r2,128
  805fc8:	10bfe004 	addi	r2,r2,-128
  805fcc:	1000061e 	bne	r2,zero,805fe8 <logic+0x5858>
  805fd0:	e0bffc17 	ldw	r2,-16(fp)
  805fd4:	10803d43 	ldbu	r2,245(r2)
  805fd8:	10803fcc 	andi	r2,r2,255
  805fdc:	1080201c 	xori	r2,r2,128
  805fe0:	10bfe004 	addi	r2,r2,-128
  805fe4:	10000226 	beq	r2,zero,805ff0 <logic+0x5860>
  805fe8:	00800044 	movi	r2,1
  805fec:	00000106 	br	805ff4 <logic+0x5864>
  805ff0:	0005883a 	mov	r2,zero
  805ff4:	1007883a 	mov	r3,r2
  805ff8:	e0bffc17 	ldw	r2,-16(fp)
  805ffc:	10c03a05 	stb	r3,232(r2)
  d->_cg184 = d->_heart2_local__Atrig14;
  806000:	e0bffc17 	ldw	r2,-16(fp)
  806004:	10c01dc3 	ldbu	r3,119(r2)
  806008:	e0bffc17 	ldw	r2,-16(fp)
  80600c:	10c05705 	stb	r3,348(r2)
  d->_g175 = d->_g164 && d->_cg184;
  806010:	e0bffc17 	ldw	r2,-16(fp)
  806014:	10803a03 	ldbu	r2,232(r2)
  806018:	10803fcc 	andi	r2,r2,255
  80601c:	1080201c 	xori	r2,r2,128
  806020:	10bfe004 	addi	r2,r2,-128
  806024:	10000826 	beq	r2,zero,806048 <logic+0x58b8>
  806028:	e0bffc17 	ldw	r2,-16(fp)
  80602c:	10805703 	ldbu	r2,348(r2)
  806030:	10803fcc 	andi	r2,r2,255
  806034:	1080201c 	xori	r2,r2,128
  806038:	10bfe004 	addi	r2,r2,-128
  80603c:	10000226 	beq	r2,zero,806048 <logic+0x58b8>
  806040:	00800044 	movi	r2,1
  806044:	00000106 	br	80604c <logic+0x58bc>
  806048:	0005883a 	mov	r2,zero
  80604c:	1007883a 	mov	r3,r2
  806050:	e0bffc17 	ldw	r2,-16(fp)
  806054:	10c03c05 	stb	r3,240(r2)
  if (d->_g175) {
  806058:	e0bffc17 	ldw	r2,-16(fp)
  80605c:	10803c03 	ldbu	r2,240(r2)
  806060:	10803fcc 	andi	r2,r2,255
  806064:	1080201c 	xori	r2,r2,128
  806068:	10bfe004 	addi	r2,r2,-128
  80606c:	10000c26 	beq	r2,zero,8060a0 <logic+0x5910>
    d->AP |= 1;
  806070:	e0bffc17 	ldw	r2,-16(fp)
  806074:	10801783 	ldbu	r2,94(r2)
  806078:	10800054 	ori	r2,r2,1
  80607c:	1007883a 	mov	r3,r2
  806080:	e0bffc17 	ldw	r2,-16(fp)
  806084:	10c01785 	stb	r3,94(r2)
    d->a |= 1;
  806088:	e0bffc17 	ldw	r2,-16(fp)
  80608c:	10801883 	ldbu	r2,98(r2)
  806090:	10800054 	ori	r2,r2,1
  806094:	1007883a 	mov	r3,r2
  806098:	e0bffc17 	ldw	r2,-16(fp)
  80609c:	10c01885 	stb	r3,98(r2)
  }
  d->_g169 = d->_g175 || d->_g164 && !d->_cg184;
  8060a0:	e0bffc17 	ldw	r2,-16(fp)
  8060a4:	10803c03 	ldbu	r2,240(r2)
  8060a8:	10803fcc 	andi	r2,r2,255
  8060ac:	1080201c 	xori	r2,r2,128
  8060b0:	10bfe004 	addi	r2,r2,-128
  8060b4:	10000c1e 	bne	r2,zero,8060e8 <logic+0x5958>
  8060b8:	e0bffc17 	ldw	r2,-16(fp)
  8060bc:	10803a03 	ldbu	r2,232(r2)
  8060c0:	10803fcc 	andi	r2,r2,255
  8060c4:	1080201c 	xori	r2,r2,128
  8060c8:	10bfe004 	addi	r2,r2,-128
  8060cc:	10000826 	beq	r2,zero,8060f0 <logic+0x5960>
  8060d0:	e0bffc17 	ldw	r2,-16(fp)
  8060d4:	10805703 	ldbu	r2,348(r2)
  8060d8:	10803fcc 	andi	r2,r2,255
  8060dc:	1080201c 	xori	r2,r2,128
  8060e0:	10bfe004 	addi	r2,r2,-128
  8060e4:	1000021e 	bne	r2,zero,8060f0 <logic+0x5960>
  8060e8:	00800044 	movi	r2,1
  8060ec:	00000106 	br	8060f4 <logic+0x5964>
  8060f0:	0005883a 	mov	r2,zero
  8060f4:	1007883a 	mov	r3,r2
  8060f8:	e0bffc17 	ldw	r2,-16(fp)
  8060fc:	10c03ac5 	stb	r3,235(r2)
  if (d->_g169) {
  806100:	e0bffc17 	ldw	r2,-16(fp)
  806104:	10803ac3 	ldbu	r2,235(r2)
  806108:	10803fcc 	andi	r2,r2,255
  80610c:	1080201c 	xori	r2,r2,128
  806110:	10bfe004 	addi	r2,r2,-128
  806114:	10000226 	beq	r2,zero,806120 <logic+0x5990>
    d->_heart2_local__Atrig16 = 0;
  806118:	e0bffc17 	ldw	r2,-16(fp)
  80611c:	10001e45 	stb	zero,121(r2)
  }
  d->_cg187 = d->_heart2_local__Atrig16;
  806120:	e0bffc17 	ldw	r2,-16(fp)
  806124:	10c01e43 	ldbu	r3,121(r2)
  806128:	e0bffc17 	ldw	r2,-16(fp)
  80612c:	10c05745 	stb	r3,349(r2)
  d->_g179 = d->_g169 && !d->_cg187 || d->_g131 && !d->_cg189;
  806130:	e0bffc17 	ldw	r2,-16(fp)
  806134:	10803ac3 	ldbu	r2,235(r2)
  806138:	10803fcc 	andi	r2,r2,255
  80613c:	1080201c 	xori	r2,r2,128
  806140:	10bfe004 	addi	r2,r2,-128
  806144:	10000626 	beq	r2,zero,806160 <logic+0x59d0>
  806148:	e0bffc17 	ldw	r2,-16(fp)
  80614c:	10805743 	ldbu	r2,349(r2)
  806150:	10803fcc 	andi	r2,r2,255
  806154:	1080201c 	xori	r2,r2,128
  806158:	10bfe004 	addi	r2,r2,-128
  80615c:	10000c26 	beq	r2,zero,806190 <logic+0x5a00>
  806160:	e0bffc17 	ldw	r2,-16(fp)
  806164:	10803483 	ldbu	r2,210(r2)
  806168:	10803fcc 	andi	r2,r2,255
  80616c:	1080201c 	xori	r2,r2,128
  806170:	10bfe004 	addi	r2,r2,-128
  806174:	10000826 	beq	r2,zero,806198 <logic+0x5a08>
  806178:	e0bffc17 	ldw	r2,-16(fp)
  80617c:	10805783 	ldbu	r2,350(r2)
  806180:	10803fcc 	andi	r2,r2,255
  806184:	1080201c 	xori	r2,r2,128
  806188:	10bfe004 	addi	r2,r2,-128
  80618c:	1000021e 	bne	r2,zero,806198 <logic+0x5a08>
  806190:	00800044 	movi	r2,1
  806194:	00000106 	br	80619c <logic+0x5a0c>
  806198:	0005883a 	mov	r2,zero
  80619c:	1007883a 	mov	r3,r2
  8061a0:	e0bffc17 	ldw	r2,-16(fp)
  8061a4:	10c03c85 	stb	r3,242(r2)
  d->_g181_e3 = d->_g169 || d->_g140 && !d->_cg193;
  8061a8:	e0bffc17 	ldw	r2,-16(fp)
  8061ac:	10803ac3 	ldbu	r2,235(r2)
  8061b0:	10803fcc 	andi	r2,r2,255
  8061b4:	1080201c 	xori	r2,r2,128
  8061b8:	10bfe004 	addi	r2,r2,-128
  8061bc:	10000c1e 	bne	r2,zero,8061f0 <logic+0x5a60>
  8061c0:	e0bffc17 	ldw	r2,-16(fp)
  8061c4:	10803603 	ldbu	r2,216(r2)
  8061c8:	10803fcc 	andi	r2,r2,255
  8061cc:	1080201c 	xori	r2,r2,128
  8061d0:	10bfe004 	addi	r2,r2,-128
  8061d4:	10000826 	beq	r2,zero,8061f8 <logic+0x5a68>
  8061d8:	e0bffc17 	ldw	r2,-16(fp)
  8061dc:	108057c3 	ldbu	r2,351(r2)
  8061e0:	10803fcc 	andi	r2,r2,255
  8061e4:	1080201c 	xori	r2,r2,128
  8061e8:	10bfe004 	addi	r2,r2,-128
  8061ec:	1000021e 	bne	r2,zero,8061f8 <logic+0x5a68>
  8061f0:	00800044 	movi	r2,1
  8061f4:	00000106 	br	8061fc <logic+0x5a6c>
  8061f8:	0005883a 	mov	r2,zero
  8061fc:	1007883a 	mov	r3,r2
  806200:	e0bffc17 	ldw	r2,-16(fp)
  806204:	10c06185 	stb	r3,390(r2)
  d->_g181 = d->_pg206;
  806208:	e0bffc17 	ldw	r2,-16(fp)
  80620c:	10c06b83 	ldbu	r3,430(r2)
  806210:	e0bffc17 	ldw	r2,-16(fp)
  806214:	10c03d05 	stb	r3,244(r2)
  if (d->_g181) {
  806218:	e0bffc17 	ldw	r2,-16(fp)
  80621c:	10803d03 	ldbu	r2,244(r2)
  806220:	10803fcc 	andi	r2,r2,255
  806224:	1080201c 	xori	r2,r2,128
  806228:	10bfe004 	addi	r2,r2,-128
  80622c:	10001226 	beq	r2,zero,806278 <logic+0x5ae8>
    d->_region5_null_AVI += d->deltaT;
  806230:	e13ffc17 	ldw	r4,-16(fp)
  806234:	20801117 	ldw	r2,68(r4)
  806238:	20c01217 	ldw	r3,72(r4)
  80623c:	e1bffc17 	ldw	r6,-16(fp)
  806240:	31001317 	ldw	r4,76(r6)
  806244:	31401417 	ldw	r5,80(r6)
  806248:	200d883a 	mov	r6,r4
  80624c:	280f883a 	mov	r7,r5
  806250:	1009883a 	mov	r4,r2
  806254:	180b883a 	mov	r5,r3
  806258:	08078c40 	call	8078c4 <__adddf3>
  80625c:	1009883a 	mov	r4,r2
  806260:	180b883a 	mov	r5,r3
  806264:	2005883a 	mov	r2,r4
  806268:	2807883a 	mov	r3,r5
  80626c:	e13ffc17 	ldw	r4,-16(fp)
  806270:	20801115 	stw	r2,68(r4)
  806274:	20c01215 	stw	r3,72(r4)
  }
  d->_g165 = !d->_g181;
  806278:	e0bffc17 	ldw	r2,-16(fp)
  80627c:	10803d03 	ldbu	r2,244(r2)
  806280:	10803fcc 	andi	r2,r2,255
  806284:	1080201c 	xori	r2,r2,128
  806288:	10bfe004 	addi	r2,r2,-128
  80628c:	1005003a 	cmpeq	r2,r2,zero
  806290:	1007883a 	mov	r3,r2
  806294:	e0bffc17 	ldw	r2,-16(fp)
  806298:	10c03a45 	stb	r3,233(r2)
  d->_g165_e1 = d->_pg213;
  80629c:	e0bffc17 	ldw	r2,-16(fp)
  8062a0:	10c06bc3 	ldbu	r3,431(r2)
  8062a4:	e0bffc17 	ldw	r2,-16(fp)
  8062a8:	10c06105 	stb	r3,388(r2)
  d->_cg225 = d->v;
  8062ac:	e0bffc17 	ldw	r2,-16(fp)
  8062b0:	10c018c3 	ldbu	r3,99(r2)
  8062b4:	e0bffc17 	ldw	r2,-16(fp)
  8062b8:	10c05b45 	stb	r3,365(r2)
  d->_g172 = d->_g165_e1 && d->_cg225;
  8062bc:	e0bffc17 	ldw	r2,-16(fp)
  8062c0:	10806103 	ldbu	r2,388(r2)
  8062c4:	10803fcc 	andi	r2,r2,255
  8062c8:	1080201c 	xori	r2,r2,128
  8062cc:	10bfe004 	addi	r2,r2,-128
  8062d0:	10000826 	beq	r2,zero,8062f4 <logic+0x5b64>
  8062d4:	e0bffc17 	ldw	r2,-16(fp)
  8062d8:	10805b43 	ldbu	r2,365(r2)
  8062dc:	10803fcc 	andi	r2,r2,255
  8062e0:	1080201c 	xori	r2,r2,128
  8062e4:	10bfe004 	addi	r2,r2,-128
  8062e8:	10000226 	beq	r2,zero,8062f4 <logic+0x5b64>
  8062ec:	00800044 	movi	r2,1
  8062f0:	00000106 	br	8062f8 <logic+0x5b68>
  8062f4:	0005883a 	mov	r2,zero
  8062f8:	1007883a 	mov	r3,r2
  8062fc:	e0bffc17 	ldw	r2,-16(fp)
  806300:	10c03b85 	stb	r3,238(r2)
  if (d->_g172) {
  806304:	e0bffc17 	ldw	r2,-16(fp)
  806308:	10803b83 	ldbu	r2,238(r2)
  80630c:	10803fcc 	andi	r2,r2,255
  806310:	1080201c 	xori	r2,r2,128
  806314:	10bfe004 	addi	r2,r2,-128
  806318:	10000326 	beq	r2,zero,806328 <logic+0x5b98>
    d->_heart2_local__Atrig18 = 1;
  80631c:	e0bffc17 	ldw	r2,-16(fp)
  806320:	00c00044 	movi	r3,1
  806324:	10c01ec5 	stb	r3,123(r2)
  }
  d->_g172_e2 = d->_g165_e1 && !d->_cg225;
  806328:	e0bffc17 	ldw	r2,-16(fp)
  80632c:	10806103 	ldbu	r2,388(r2)
  806330:	10803fcc 	andi	r2,r2,255
  806334:	1080201c 	xori	r2,r2,128
  806338:	10bfe004 	addi	r2,r2,-128
  80633c:	10000826 	beq	r2,zero,806360 <logic+0x5bd0>
  806340:	e0bffc17 	ldw	r2,-16(fp)
  806344:	10805b43 	ldbu	r2,365(r2)
  806348:	10803fcc 	andi	r2,r2,255
  80634c:	1080201c 	xori	r2,r2,128
  806350:	10bfe004 	addi	r2,r2,-128
  806354:	1000021e 	bne	r2,zero,806360 <logic+0x5bd0>
  806358:	00800044 	movi	r2,1
  80635c:	00000106 	br	806364 <logic+0x5bd4>
  806360:	0005883a 	mov	r2,zero
  806364:	1007883a 	mov	r3,r2
  806368:	e0bffc17 	ldw	r2,-16(fp)
  80636c:	10c06145 	stb	r3,389(r2)
  d->_cg228 = d->ready && d->_region5_null_AVI >= d->AVI_time;
  806370:	e0bffc17 	ldw	r2,-16(fp)
  806374:	10800603 	ldbu	r2,24(r2)
  806378:	10803fcc 	andi	r2,r2,255
  80637c:	1080201c 	xori	r2,r2,128
  806380:	10bfe004 	addi	r2,r2,-128
  806384:	10001126 	beq	r2,zero,8063cc <logic+0x5c3c>
  806388:	e0bffc17 	ldw	r2,-16(fp)
  80638c:	14001117 	ldw	r16,68(r2)
  806390:	14401217 	ldw	r17,72(r2)
  806394:	e0bffc17 	ldw	r2,-16(fp)
  806398:	10800517 	ldw	r2,20(r2)
  80639c:	1009883a 	mov	r4,r2
  8063a0:	0808c3c0 	call	808c3c <__floatsidf>
  8063a4:	1009883a 	mov	r4,r2
  8063a8:	180b883a 	mov	r5,r3
  8063ac:	200d883a 	mov	r6,r4
  8063b0:	280f883a 	mov	r7,r5
  8063b4:	8009883a 	mov	r4,r16
  8063b8:	880b883a 	mov	r5,r17
  8063bc:	08081700 	call	808170 <__gedf2>
  8063c0:	10000216 	blt	r2,zero,8063cc <logic+0x5c3c>
  8063c4:	00800044 	movi	r2,1
  8063c8:	00000106 	br	8063d0 <logic+0x5c40>
  8063cc:	0005883a 	mov	r2,zero
  8063d0:	1007883a 	mov	r3,r2
  8063d4:	e0bffc17 	ldw	r2,-16(fp)
  8063d8:	10c05b05 	stb	r3,364(r2)
  d->_g185 = d->_g172_e2 && d->_cg228;
  8063dc:	e0bffc17 	ldw	r2,-16(fp)
  8063e0:	10806143 	ldbu	r2,389(r2)
  8063e4:	10803fcc 	andi	r2,r2,255
  8063e8:	1080201c 	xori	r2,r2,128
  8063ec:	10bfe004 	addi	r2,r2,-128
  8063f0:	10000826 	beq	r2,zero,806414 <logic+0x5c84>
  8063f4:	e0bffc17 	ldw	r2,-16(fp)
  8063f8:	10805b03 	ldbu	r2,364(r2)
  8063fc:	10803fcc 	andi	r2,r2,255
  806400:	1080201c 	xori	r2,r2,128
  806404:	10bfe004 	addi	r2,r2,-128
  806408:	10000226 	beq	r2,zero,806414 <logic+0x5c84>
  80640c:	00800044 	movi	r2,1
  806410:	00000106 	br	806418 <logic+0x5c88>
  806414:	0005883a 	mov	r2,zero
  806418:	1007883a 	mov	r3,r2
  80641c:	e0bffc17 	ldw	r2,-16(fp)
  806420:	10c03e05 	stb	r3,248(r2)
  if (d->_g185) {
  806424:	e0bffc17 	ldw	r2,-16(fp)
  806428:	10803e03 	ldbu	r2,248(r2)
  80642c:	10803fcc 	andi	r2,r2,255
  806430:	1080201c 	xori	r2,r2,128
  806434:	10bfe004 	addi	r2,r2,-128
  806438:	10000326 	beq	r2,zero,806448 <logic+0x5cb8>
    d->_heart2_local__Atrig19 = 1;
  80643c:	e0bffc17 	ldw	r2,-16(fp)
  806440:	00c00044 	movi	r3,1
  806444:	10c01f05 	stb	r3,124(r2)
  }
  d->_cg210 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  806448:	e0bffc17 	ldw	r2,-16(fp)
  80644c:	10801ec3 	ldbu	r2,123(r2)
  806450:	10803fcc 	andi	r2,r2,255
  806454:	1080201c 	xori	r2,r2,128
  806458:	10bfe004 	addi	r2,r2,-128
  80645c:	1000061e 	bne	r2,zero,806478 <logic+0x5ce8>
  806460:	e0bffc17 	ldw	r2,-16(fp)
  806464:	10801f03 	ldbu	r2,124(r2)
  806468:	10803fcc 	andi	r2,r2,255
  80646c:	1080201c 	xori	r2,r2,128
  806470:	10bfe004 	addi	r2,r2,-128
  806474:	10000226 	beq	r2,zero,806480 <logic+0x5cf0>
  806478:	00800044 	movi	r2,1
  80647c:	00000106 	br	806484 <logic+0x5cf4>
  806480:	0005883a 	mov	r2,zero
  806484:	1007883a 	mov	r3,r2
  806488:	e0bffc17 	ldw	r2,-16(fp)
  80648c:	10c05945 	stb	r3,357(r2)
  d->_g184 = d->_g181 && d->_cg210;
  806490:	e0bffc17 	ldw	r2,-16(fp)
  806494:	10803d03 	ldbu	r2,244(r2)
  806498:	10803fcc 	andi	r2,r2,255
  80649c:	1080201c 	xori	r2,r2,128
  8064a0:	10bfe004 	addi	r2,r2,-128
  8064a4:	10000826 	beq	r2,zero,8064c8 <logic+0x5d38>
  8064a8:	e0bffc17 	ldw	r2,-16(fp)
  8064ac:	10805943 	ldbu	r2,357(r2)
  8064b0:	10803fcc 	andi	r2,r2,255
  8064b4:	1080201c 	xori	r2,r2,128
  8064b8:	10bfe004 	addi	r2,r2,-128
  8064bc:	10000226 	beq	r2,zero,8064c8 <logic+0x5d38>
  8064c0:	00800044 	movi	r2,1
  8064c4:	00000106 	br	8064cc <logic+0x5d3c>
  8064c8:	0005883a 	mov	r2,zero
  8064cc:	1007883a 	mov	r3,r2
  8064d0:	e0bffc17 	ldw	r2,-16(fp)
  8064d4:	10c03dc5 	stb	r3,247(r2)
  d->_g189 = d->_pg210;
  8064d8:	e0bffc17 	ldw	r2,-16(fp)
  8064dc:	10c06c03 	ldbu	r3,432(r2)
  8064e0:	e0bffc17 	ldw	r2,-16(fp)
  8064e4:	10c03e85 	stb	r3,250(r2)
  d->_g193 = d->_pg202;
  8064e8:	e0bffc17 	ldw	r2,-16(fp)
  8064ec:	10c06c43 	ldbu	r3,433(r2)
  8064f0:	e0bffc17 	ldw	r2,-16(fp)
  8064f4:	10c03f05 	stb	r3,252(r2)
  d->_g186 = !(d->_g189 || d->_g193);
  8064f8:	e0bffc17 	ldw	r2,-16(fp)
  8064fc:	10803e83 	ldbu	r2,250(r2)
  806500:	10803fcc 	andi	r2,r2,255
  806504:	1080201c 	xori	r2,r2,128
  806508:	10bfe004 	addi	r2,r2,-128
  80650c:	1000081e 	bne	r2,zero,806530 <logic+0x5da0>
  806510:	e0bffc17 	ldw	r2,-16(fp)
  806514:	10803f03 	ldbu	r2,252(r2)
  806518:	10803fcc 	andi	r2,r2,255
  80651c:	1080201c 	xori	r2,r2,128
  806520:	10bfe004 	addi	r2,r2,-128
  806524:	1000021e 	bne	r2,zero,806530 <logic+0x5da0>
  806528:	00800044 	movi	r2,1
  80652c:	00000106 	br	806534 <logic+0x5da4>
  806530:	0005883a 	mov	r2,zero
  806534:	1007883a 	mov	r3,r2
  806538:	e0bffc17 	ldw	r2,-16(fp)
  80653c:	10c03e45 	stb	r3,249(r2)
  d->_g215 = d->_g193 || d->_g189;
  806540:	e0bffc17 	ldw	r2,-16(fp)
  806544:	10803f03 	ldbu	r2,252(r2)
  806548:	10803fcc 	andi	r2,r2,255
  80654c:	1080201c 	xori	r2,r2,128
  806550:	10bfe004 	addi	r2,r2,-128
  806554:	1000061e 	bne	r2,zero,806570 <logic+0x5de0>
  806558:	e0bffc17 	ldw	r2,-16(fp)
  80655c:	10803e83 	ldbu	r2,250(r2)
  806560:	10803fcc 	andi	r2,r2,255
  806564:	1080201c 	xori	r2,r2,128
  806568:	10bfe004 	addi	r2,r2,-128
  80656c:	10000226 	beq	r2,zero,806578 <logic+0x5de8>
  806570:	00800044 	movi	r2,1
  806574:	00000106 	br	80657c <logic+0x5dec>
  806578:	0005883a 	mov	r2,zero
  80657c:	1007883a 	mov	r3,r2
  806580:	e0bffc17 	ldw	r2,-16(fp)
  806584:	10c041c5 	stb	r3,263(r2)
  d->_cg216 = d->_region5_null_AVI < d->AVI_time;
  806588:	e0bffc17 	ldw	r2,-16(fp)
  80658c:	14001117 	ldw	r16,68(r2)
  806590:	14401217 	ldw	r17,72(r2)
  806594:	e0bffc17 	ldw	r2,-16(fp)
  806598:	10800517 	ldw	r2,20(r2)
  80659c:	1009883a 	mov	r4,r2
  8065a0:	0808c3c0 	call	808c3c <__floatsidf>
  8065a4:	1009883a 	mov	r4,r2
  8065a8:	180b883a 	mov	r5,r3
  8065ac:	04800044 	movi	r18,1
  8065b0:	200d883a 	mov	r6,r4
  8065b4:	280f883a 	mov	r7,r5
  8065b8:	8009883a 	mov	r4,r16
  8065bc:	880b883a 	mov	r5,r17
  8065c0:	080824c0 	call	80824c <__ledf2>
  8065c4:	10000116 	blt	r2,zero,8065cc <logic+0x5e3c>
  8065c8:	0025883a 	mov	r18,zero
  8065cc:	9007883a 	mov	r3,r18
  8065d0:	e0bffc17 	ldw	r2,-16(fp)
  8065d4:	10c05a45 	stb	r3,361(r2)
  d->_g221 = d->_g215 && d->_cg216;
  8065d8:	e0bffc17 	ldw	r2,-16(fp)
  8065dc:	108041c3 	ldbu	r2,263(r2)
  8065e0:	10803fcc 	andi	r2,r2,255
  8065e4:	1080201c 	xori	r2,r2,128
  8065e8:	10bfe004 	addi	r2,r2,-128
  8065ec:	10000826 	beq	r2,zero,806610 <logic+0x5e80>
  8065f0:	e0bffc17 	ldw	r2,-16(fp)
  8065f4:	10805a43 	ldbu	r2,361(r2)
  8065f8:	10803fcc 	andi	r2,r2,255
  8065fc:	1080201c 	xori	r2,r2,128
  806600:	10bfe004 	addi	r2,r2,-128
  806604:	10000226 	beq	r2,zero,806610 <logic+0x5e80>
  806608:	00800044 	movi	r2,1
  80660c:	00000106 	br	806614 <logic+0x5e84>
  806610:	0005883a 	mov	r2,zero
  806614:	1007883a 	mov	r3,r2
  806618:	e0bffc17 	ldw	r2,-16(fp)
  80661c:	10c042c5 	stb	r3,267(r2)
  if (d->_g221) {
  806620:	e0bffc17 	ldw	r2,-16(fp)
  806624:	108042c3 	ldbu	r2,267(r2)
  806628:	10803fcc 	andi	r2,r2,255
  80662c:	1080201c 	xori	r2,r2,128
  806630:	10bfe004 	addi	r2,r2,-128
  806634:	10003426 	beq	r2,zero,806708 <logic+0x5f78>
    d->sleepT = (d->sleepT < (d->AVI_time - d->_region5_null_AVI)) ? d->sleepT : (d->AVI_time - d->_region5_null_AVI);
  806638:	e0bffc17 	ldw	r2,-16(fp)
  80663c:	14001517 	ldw	r16,84(r2)
  806640:	14401617 	ldw	r17,88(r2)
  806644:	e0bffc17 	ldw	r2,-16(fp)
  806648:	10800517 	ldw	r2,20(r2)
  80664c:	1009883a 	mov	r4,r2
  806650:	0808c3c0 	call	808c3c <__floatsidf>
  806654:	1011883a 	mov	r8,r2
  806658:	1813883a 	mov	r9,r3
  80665c:	e13ffc17 	ldw	r4,-16(fp)
  806660:	20801117 	ldw	r2,68(r4)
  806664:	20c01217 	ldw	r3,72(r4)
  806668:	100d883a 	mov	r6,r2
  80666c:	180f883a 	mov	r7,r3
  806670:	4009883a 	mov	r4,r8
  806674:	480b883a 	mov	r5,r9
  806678:	08083400 	call	808340 <__subdf3>
  80667c:	1009883a 	mov	r4,r2
  806680:	180b883a 	mov	r5,r3
  806684:	2005883a 	mov	r2,r4
  806688:	2807883a 	mov	r3,r5
  80668c:	100d883a 	mov	r6,r2
  806690:	180f883a 	mov	r7,r3
  806694:	8009883a 	mov	r4,r16
  806698:	880b883a 	mov	r5,r17
  80669c:	080824c0 	call	80824c <__ledf2>
  8066a0:	1000040e 	bge	r2,zero,8066b4 <logic+0x5f24>
  8066a4:	e13ffc17 	ldw	r4,-16(fp)
  8066a8:	20801517 	ldw	r2,84(r4)
  8066ac:	20c01617 	ldw	r3,88(r4)
  8066b0:	00001206 	br	8066fc <logic+0x5f6c>
  8066b4:	e0bffc17 	ldw	r2,-16(fp)
  8066b8:	10800517 	ldw	r2,20(r2)
  8066bc:	1009883a 	mov	r4,r2
  8066c0:	0808c3c0 	call	808c3c <__floatsidf>
  8066c4:	1011883a 	mov	r8,r2
  8066c8:	1813883a 	mov	r9,r3
  8066cc:	e13ffc17 	ldw	r4,-16(fp)
  8066d0:	20801117 	ldw	r2,68(r4)
  8066d4:	20c01217 	ldw	r3,72(r4)
  8066d8:	100d883a 	mov	r6,r2
  8066dc:	180f883a 	mov	r7,r3
  8066e0:	4009883a 	mov	r4,r8
  8066e4:	480b883a 	mov	r5,r9
  8066e8:	08083400 	call	808340 <__subdf3>
  8066ec:	1009883a 	mov	r4,r2
  8066f0:	180b883a 	mov	r5,r3
  8066f4:	2005883a 	mov	r2,r4
  8066f8:	2807883a 	mov	r3,r5
  8066fc:	e13ffc17 	ldw	r4,-16(fp)
  806700:	20801515 	stw	r2,84(r4)
  806704:	20c01615 	stw	r3,88(r4)
  }
  d->_cg217 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  806708:	e0bffc17 	ldw	r2,-16(fp)
  80670c:	10801ec3 	ldbu	r2,123(r2)
  806710:	10803fcc 	andi	r2,r2,255
  806714:	1080201c 	xori	r2,r2,128
  806718:	10bfe004 	addi	r2,r2,-128
  80671c:	1000061e 	bne	r2,zero,806738 <logic+0x5fa8>
  806720:	e0bffc17 	ldw	r2,-16(fp)
  806724:	10801f03 	ldbu	r2,124(r2)
  806728:	10803fcc 	andi	r2,r2,255
  80672c:	1080201c 	xori	r2,r2,128
  806730:	10bfe004 	addi	r2,r2,-128
  806734:	10000226 	beq	r2,zero,806740 <logic+0x5fb0>
  806738:	00800044 	movi	r2,1
  80673c:	00000106 	br	806744 <logic+0x5fb4>
  806740:	0005883a 	mov	r2,zero
  806744:	1007883a 	mov	r3,r2
  806748:	e0bffc17 	ldw	r2,-16(fp)
  80674c:	10c05a05 	stb	r3,360(r2)
  d->_g216 = d->_g215 && !d->_cg216;
  806750:	e0bffc17 	ldw	r2,-16(fp)
  806754:	108041c3 	ldbu	r2,263(r2)
  806758:	10803fcc 	andi	r2,r2,255
  80675c:	1080201c 	xori	r2,r2,128
  806760:	10bfe004 	addi	r2,r2,-128
  806764:	10000826 	beq	r2,zero,806788 <logic+0x5ff8>
  806768:	e0bffc17 	ldw	r2,-16(fp)
  80676c:	10805a43 	ldbu	r2,361(r2)
  806770:	10803fcc 	andi	r2,r2,255
  806774:	1080201c 	xori	r2,r2,128
  806778:	10bfe004 	addi	r2,r2,-128
  80677c:	1000021e 	bne	r2,zero,806788 <logic+0x5ff8>
  806780:	00800044 	movi	r2,1
  806784:	00000106 	br	80678c <logic+0x5ffc>
  806788:	0005883a 	mov	r2,zero
  80678c:	1007883a 	mov	r3,r2
  806790:	e0bffc17 	ldw	r2,-16(fp)
  806794:	10c04205 	stb	r3,264(r2)
  d->_cg219 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  806798:	e0bffc17 	ldw	r2,-16(fp)
  80679c:	10801ec3 	ldbu	r2,123(r2)
  8067a0:	10803fcc 	andi	r2,r2,255
  8067a4:	1080201c 	xori	r2,r2,128
  8067a8:	10bfe004 	addi	r2,r2,-128
  8067ac:	1000061e 	bne	r2,zero,8067c8 <logic+0x6038>
  8067b0:	e0bffc17 	ldw	r2,-16(fp)
  8067b4:	10801f03 	ldbu	r2,124(r2)
  8067b8:	10803fcc 	andi	r2,r2,255
  8067bc:	1080201c 	xori	r2,r2,128
  8067c0:	10bfe004 	addi	r2,r2,-128
  8067c4:	10000226 	beq	r2,zero,8067d0 <logic+0x6040>
  8067c8:	00800044 	movi	r2,1
  8067cc:	00000106 	br	8067d4 <logic+0x6044>
  8067d0:	0005883a 	mov	r2,zero
  8067d4:	1007883a 	mov	r3,r2
  8067d8:	e0bffc17 	ldw	r2,-16(fp)
  8067dc:	10c05a85 	stb	r3,362(r2)
  d->_g218 = d->_g221 && d->_cg217 || d->_g216 && d->_cg219;
  8067e0:	e0bffc17 	ldw	r2,-16(fp)
  8067e4:	108042c3 	ldbu	r2,267(r2)
  8067e8:	10803fcc 	andi	r2,r2,255
  8067ec:	1080201c 	xori	r2,r2,128
  8067f0:	10bfe004 	addi	r2,r2,-128
  8067f4:	10000626 	beq	r2,zero,806810 <logic+0x6080>
  8067f8:	e0bffc17 	ldw	r2,-16(fp)
  8067fc:	10805a03 	ldbu	r2,360(r2)
  806800:	10803fcc 	andi	r2,r2,255
  806804:	1080201c 	xori	r2,r2,128
  806808:	10bfe004 	addi	r2,r2,-128
  80680c:	10000c1e 	bne	r2,zero,806840 <logic+0x60b0>
  806810:	e0bffc17 	ldw	r2,-16(fp)
  806814:	10804203 	ldbu	r2,264(r2)
  806818:	10803fcc 	andi	r2,r2,255
  80681c:	1080201c 	xori	r2,r2,128
  806820:	10bfe004 	addi	r2,r2,-128
  806824:	10000826 	beq	r2,zero,806848 <logic+0x60b8>
  806828:	e0bffc17 	ldw	r2,-16(fp)
  80682c:	10805a83 	ldbu	r2,362(r2)
  806830:	10803fcc 	andi	r2,r2,255
  806834:	1080201c 	xori	r2,r2,128
  806838:	10bfe004 	addi	r2,r2,-128
  80683c:	10000226 	beq	r2,zero,806848 <logic+0x60b8>
  806840:	00800044 	movi	r2,1
  806844:	00000106 	br	80684c <logic+0x60bc>
  806848:	0005883a 	mov	r2,zero
  80684c:	1007883a 	mov	r3,r2
  806850:	e0bffc17 	ldw	r2,-16(fp)
  806854:	10c04285 	stb	r3,266(r2)
  d->_g225 = !d->_g165_e1;
  806858:	e0bffc17 	ldw	r2,-16(fp)
  80685c:	10806103 	ldbu	r2,388(r2)
  806860:	10803fcc 	andi	r2,r2,255
  806864:	1080201c 	xori	r2,r2,128
  806868:	10bfe004 	addi	r2,r2,-128
  80686c:	1005003a 	cmpeq	r2,r2,zero
  806870:	1007883a 	mov	r3,r2
  806874:	e0bffc17 	ldw	r2,-16(fp)
  806878:	10c04305 	stb	r3,268(r2)
  d->_g226 = d->_g172 || d->_g185;
  80687c:	e0bffc17 	ldw	r2,-16(fp)
  806880:	10803b83 	ldbu	r2,238(r2)
  806884:	10803fcc 	andi	r2,r2,255
  806888:	1080201c 	xori	r2,r2,128
  80688c:	10bfe004 	addi	r2,r2,-128
  806890:	1000061e 	bne	r2,zero,8068ac <logic+0x611c>
  806894:	e0bffc17 	ldw	r2,-16(fp)
  806898:	10803e03 	ldbu	r2,248(r2)
  80689c:	10803fcc 	andi	r2,r2,255
  8068a0:	1080201c 	xori	r2,r2,128
  8068a4:	10bfe004 	addi	r2,r2,-128
  8068a8:	10000226 	beq	r2,zero,8068b4 <logic+0x6124>
  8068ac:	00800044 	movi	r2,1
  8068b0:	00000106 	br	8068b8 <logic+0x6128>
  8068b4:	0005883a 	mov	r2,zero
  8068b8:	1007883a 	mov	r3,r2
  8068bc:	e0bffc17 	ldw	r2,-16(fp)
  8068c0:	10c04345 	stb	r3,269(r2)
  d->_g229 = (d->_g165 || d->_g184) && (d->_g186 || d->_g218) && (d->_g225 || d->_g226) && (d->_g184 || d->_g218 || d->_g226);
  8068c4:	e0bffc17 	ldw	r2,-16(fp)
  8068c8:	10803a43 	ldbu	r2,233(r2)
  8068cc:	10803fcc 	andi	r2,r2,255
  8068d0:	1080201c 	xori	r2,r2,128
  8068d4:	10bfe004 	addi	r2,r2,-128
  8068d8:	1000061e 	bne	r2,zero,8068f4 <logic+0x6164>
  8068dc:	e0bffc17 	ldw	r2,-16(fp)
  8068e0:	10803dc3 	ldbu	r2,247(r2)
  8068e4:	10803fcc 	andi	r2,r2,255
  8068e8:	1080201c 	xori	r2,r2,128
  8068ec:	10bfe004 	addi	r2,r2,-128
  8068f0:	10002c26 	beq	r2,zero,8069a4 <logic+0x6214>
  8068f4:	e0bffc17 	ldw	r2,-16(fp)
  8068f8:	10803e43 	ldbu	r2,249(r2)
  8068fc:	10803fcc 	andi	r2,r2,255
  806900:	1080201c 	xori	r2,r2,128
  806904:	10bfe004 	addi	r2,r2,-128
  806908:	1000061e 	bne	r2,zero,806924 <logic+0x6194>
  80690c:	e0bffc17 	ldw	r2,-16(fp)
  806910:	10804283 	ldbu	r2,266(r2)
  806914:	10803fcc 	andi	r2,r2,255
  806918:	1080201c 	xori	r2,r2,128
  80691c:	10bfe004 	addi	r2,r2,-128
  806920:	10002026 	beq	r2,zero,8069a4 <logic+0x6214>
  806924:	e0bffc17 	ldw	r2,-16(fp)
  806928:	10804303 	ldbu	r2,268(r2)
  80692c:	10803fcc 	andi	r2,r2,255
  806930:	1080201c 	xori	r2,r2,128
  806934:	10bfe004 	addi	r2,r2,-128
  806938:	1000061e 	bne	r2,zero,806954 <logic+0x61c4>
  80693c:	e0bffc17 	ldw	r2,-16(fp)
  806940:	10804343 	ldbu	r2,269(r2)
  806944:	10803fcc 	andi	r2,r2,255
  806948:	1080201c 	xori	r2,r2,128
  80694c:	10bfe004 	addi	r2,r2,-128
  806950:	10001426 	beq	r2,zero,8069a4 <logic+0x6214>
  806954:	e0bffc17 	ldw	r2,-16(fp)
  806958:	10803dc3 	ldbu	r2,247(r2)
  80695c:	10803fcc 	andi	r2,r2,255
  806960:	1080201c 	xori	r2,r2,128
  806964:	10bfe004 	addi	r2,r2,-128
  806968:	10000c1e 	bne	r2,zero,80699c <logic+0x620c>
  80696c:	e0bffc17 	ldw	r2,-16(fp)
  806970:	10804283 	ldbu	r2,266(r2)
  806974:	10803fcc 	andi	r2,r2,255
  806978:	1080201c 	xori	r2,r2,128
  80697c:	10bfe004 	addi	r2,r2,-128
  806980:	1000061e 	bne	r2,zero,80699c <logic+0x620c>
  806984:	e0bffc17 	ldw	r2,-16(fp)
  806988:	10804343 	ldbu	r2,269(r2)
  80698c:	10803fcc 	andi	r2,r2,255
  806990:	1080201c 	xori	r2,r2,128
  806994:	10bfe004 	addi	r2,r2,-128
  806998:	10000226 	beq	r2,zero,8069a4 <logic+0x6214>
  80699c:	00800044 	movi	r2,1
  8069a0:	00000106 	br	8069a8 <logic+0x6218>
  8069a4:	0005883a 	mov	r2,zero
  8069a8:	1007883a 	mov	r3,r2
  8069ac:	e0bffc17 	ldw	r2,-16(fp)
  8069b0:	10c043c5 	stb	r3,271(r2)
  d->_cg230 = d->_heart2_local__Atrig18;
  8069b4:	e0bffc17 	ldw	r2,-16(fp)
  8069b8:	10c01ec3 	ldbu	r3,123(r2)
  8069bc:	e0bffc17 	ldw	r2,-16(fp)
  8069c0:	10c05805 	stb	r3,352(r2)
  d->_g227_e3 = d->_g229 && !d->_cg230;
  8069c4:	e0bffc17 	ldw	r2,-16(fp)
  8069c8:	108043c3 	ldbu	r2,271(r2)
  8069cc:	10803fcc 	andi	r2,r2,255
  8069d0:	1080201c 	xori	r2,r2,128
  8069d4:	10bfe004 	addi	r2,r2,-128
  8069d8:	10000826 	beq	r2,zero,8069fc <logic+0x626c>
  8069dc:	e0bffc17 	ldw	r2,-16(fp)
  8069e0:	10805803 	ldbu	r2,352(r2)
  8069e4:	10803fcc 	andi	r2,r2,255
  8069e8:	1080201c 	xori	r2,r2,128
  8069ec:	10bfe004 	addi	r2,r2,-128
  8069f0:	1000021e 	bne	r2,zero,8069fc <logic+0x626c>
  8069f4:	00800044 	movi	r2,1
  8069f8:	00000106 	br	806a00 <logic+0x6270>
  8069fc:	0005883a 	mov	r2,zero
  806a00:	1007883a 	mov	r3,r2
  806a04:	e0bffc17 	ldw	r2,-16(fp)
  806a08:	10c06345 	stb	r3,397(r2)
  if (d->_g227_e3) {
  806a0c:	e0bffc17 	ldw	r2,-16(fp)
  806a10:	10806343 	ldbu	r2,397(r2)
  806a14:	10803fcc 	andi	r2,r2,255
  806a18:	1080201c 	xori	r2,r2,128
  806a1c:	10bfe004 	addi	r2,r2,-128
  806a20:	10000626 	beq	r2,zero,806a3c <logic+0x62ac>
    d->VP |= 1;
  806a24:	e0bffc17 	ldw	r2,-16(fp)
  806a28:	108017c3 	ldbu	r2,95(r2)
  806a2c:	10800054 	ori	r2,r2,1
  806a30:	1007883a 	mov	r3,r2
  806a34:	e0bffc17 	ldw	r2,-16(fp)
  806a38:	10c017c5 	stb	r3,95(r2)
  }
  d->_g211 = d->_GO || d->_g229 && d->_cg230 || d->_g227_e3;
  806a3c:	e0bffc17 	ldw	r2,-16(fp)
  806a40:	10804543 	ldbu	r2,277(r2)
  806a44:	10803fcc 	andi	r2,r2,255
  806a48:	1080201c 	xori	r2,r2,128
  806a4c:	10bfe004 	addi	r2,r2,-128
  806a50:	1000121e 	bne	r2,zero,806a9c <logic+0x630c>
  806a54:	e0bffc17 	ldw	r2,-16(fp)
  806a58:	108043c3 	ldbu	r2,271(r2)
  806a5c:	10803fcc 	andi	r2,r2,255
  806a60:	1080201c 	xori	r2,r2,128
  806a64:	10bfe004 	addi	r2,r2,-128
  806a68:	10000626 	beq	r2,zero,806a84 <logic+0x62f4>
  806a6c:	e0bffc17 	ldw	r2,-16(fp)
  806a70:	10805803 	ldbu	r2,352(r2)
  806a74:	10803fcc 	andi	r2,r2,255
  806a78:	1080201c 	xori	r2,r2,128
  806a7c:	10bfe004 	addi	r2,r2,-128
  806a80:	1000061e 	bne	r2,zero,806a9c <logic+0x630c>
  806a84:	e0bffc17 	ldw	r2,-16(fp)
  806a88:	10806343 	ldbu	r2,397(r2)
  806a8c:	10803fcc 	andi	r2,r2,255
  806a90:	1080201c 	xori	r2,r2,128
  806a94:	10bfe004 	addi	r2,r2,-128
  806a98:	10000226 	beq	r2,zero,806aa4 <logic+0x6314>
  806a9c:	00800044 	movi	r2,1
  806aa0:	00000106 	br	806aa8 <logic+0x6318>
  806aa4:	0005883a 	mov	r2,zero
  806aa8:	1007883a 	mov	r3,r2
  806aac:	e0bffc17 	ldw	r2,-16(fp)
  806ab0:	10c04145 	stb	r3,261(r2)
  if (d->_g211) {
  806ab4:	e0bffc17 	ldw	r2,-16(fp)
  806ab8:	10804143 	ldbu	r2,261(r2)
  806abc:	10803fcc 	andi	r2,r2,255
  806ac0:	1080201c 	xori	r2,r2,128
  806ac4:	10bfe004 	addi	r2,r2,-128
  806ac8:	10000226 	beq	r2,zero,806ad4 <logic+0x6344>
    d->_heart2_local__Atrig17 = 0;
  806acc:	e0bffc17 	ldw	r2,-16(fp)
  806ad0:	10001e85 	stb	zero,122(r2)
  }
  d->_cg199 = d->_heart2_local__Atrig17;
  806ad4:	e0bffc17 	ldw	r2,-16(fp)
  806ad8:	10c01e83 	ldbu	r3,122(r2)
  806adc:	e0bffc17 	ldw	r2,-16(fp)
  806ae0:	10c05845 	stb	r3,353(r2)
  d->_g218_e2 = d->_pg231;
  806ae4:	e0bffc17 	ldw	r2,-16(fp)
  806ae8:	10c06c83 	ldbu	r3,434(r2)
  806aec:	e0bffc17 	ldw	r2,-16(fp)
  806af0:	10c06305 	stb	r3,396(r2)
  d->_cg205 = d->a;
  806af4:	e0bffc17 	ldw	r2,-16(fp)
  806af8:	10c01883 	ldbu	r3,98(r2)
  806afc:	e0bffc17 	ldw	r2,-16(fp)
  806b00:	10c058c5 	stb	r3,355(r2)
  d->_g218 = d->_g218_e2 && d->_cg205;
  806b04:	e0bffc17 	ldw	r2,-16(fp)
  806b08:	10806303 	ldbu	r2,396(r2)
  806b0c:	10803fcc 	andi	r2,r2,255
  806b10:	1080201c 	xori	r2,r2,128
  806b14:	10bfe004 	addi	r2,r2,-128
  806b18:	10000826 	beq	r2,zero,806b3c <logic+0x63ac>
  806b1c:	e0bffc17 	ldw	r2,-16(fp)
  806b20:	108058c3 	ldbu	r2,355(r2)
  806b24:	10803fcc 	andi	r2,r2,255
  806b28:	1080201c 	xori	r2,r2,128
  806b2c:	10bfe004 	addi	r2,r2,-128
  806b30:	10000226 	beq	r2,zero,806b3c <logic+0x63ac>
  806b34:	00800044 	movi	r2,1
  806b38:	00000106 	br	806b40 <logic+0x63b0>
  806b3c:	0005883a 	mov	r2,zero
  806b40:	1007883a 	mov	r3,r2
  806b44:	e0bffc17 	ldw	r2,-16(fp)
  806b48:	10c04285 	stb	r3,266(r2)
  if (d->_g218) {
  806b4c:	e0bffc17 	ldw	r2,-16(fp)
  806b50:	10804283 	ldbu	r2,266(r2)
  806b54:	10803fcc 	andi	r2,r2,255
  806b58:	1080201c 	xori	r2,r2,128
  806b5c:	10bfe004 	addi	r2,r2,-128
  806b60:	10000326 	beq	r2,zero,806b70 <logic+0x63e0>
    d->_heart2_local__Atrig17 = 1;
  806b64:	e0bffc17 	ldw	r2,-16(fp)
  806b68:	00c00044 	movi	r3,1
  806b6c:	10c01e85 	stb	r3,122(r2)
  }
  d->_g227 = d->_pg211_e1;
  806b70:	e0bffc17 	ldw	r2,-16(fp)
  806b74:	10c06cc3 	ldbu	r3,435(r2)
  806b78:	e0bffc17 	ldw	r2,-16(fp)
  806b7c:	10c04385 	stb	r3,270(r2)
  if (d->_g227) {
  806b80:	e0bffc17 	ldw	r2,-16(fp)
  806b84:	10804383 	ldbu	r2,270(r2)
  806b88:	10803fcc 	andi	r2,r2,255
  806b8c:	1080201c 	xori	r2,r2,128
  806b90:	10bfe004 	addi	r2,r2,-128
  806b94:	10001226 	beq	r2,zero,806be0 <logic+0x6450>
    d->_region5_null_AVI += d->deltaT;
  806b98:	e13ffc17 	ldw	r4,-16(fp)
  806b9c:	20801117 	ldw	r2,68(r4)
  806ba0:	20c01217 	ldw	r3,72(r4)
  806ba4:	e1bffc17 	ldw	r6,-16(fp)
  806ba8:	31001317 	ldw	r4,76(r6)
  806bac:	31401417 	ldw	r5,80(r6)
  806bb0:	200d883a 	mov	r6,r4
  806bb4:	280f883a 	mov	r7,r5
  806bb8:	1009883a 	mov	r4,r2
  806bbc:	180b883a 	mov	r5,r3
  806bc0:	08078c40 	call	8078c4 <__adddf3>
  806bc4:	1009883a 	mov	r4,r2
  806bc8:	180b883a 	mov	r5,r3
  806bcc:	2005883a 	mov	r2,r4
  806bd0:	2807883a 	mov	r3,r5
  806bd4:	e13ffc17 	ldw	r4,-16(fp)
  806bd8:	20801115 	stw	r2,68(r4)
  806bdc:	20c01215 	stw	r3,72(r4)
  }
  d->_cg201 = d->_heart2_local__Atrig17;
  806be0:	e0bffc17 	ldw	r2,-16(fp)
  806be4:	10c01e83 	ldbu	r3,122(r2)
  806be8:	e0bffc17 	ldw	r2,-16(fp)
  806bec:	10c05885 	stb	r3,354(r2)
  d->_g211_e1 = d->_g211 && !d->_cg199 || d->_g227 && !d->_cg201;
  806bf0:	e0bffc17 	ldw	r2,-16(fp)
  806bf4:	10804143 	ldbu	r2,261(r2)
  806bf8:	10803fcc 	andi	r2,r2,255
  806bfc:	1080201c 	xori	r2,r2,128
  806c00:	10bfe004 	addi	r2,r2,-128
  806c04:	10000626 	beq	r2,zero,806c20 <logic+0x6490>
  806c08:	e0bffc17 	ldw	r2,-16(fp)
  806c0c:	10805843 	ldbu	r2,353(r2)
  806c10:	10803fcc 	andi	r2,r2,255
  806c14:	1080201c 	xori	r2,r2,128
  806c18:	10bfe004 	addi	r2,r2,-128
  806c1c:	10000c26 	beq	r2,zero,806c50 <logic+0x64c0>
  806c20:	e0bffc17 	ldw	r2,-16(fp)
  806c24:	10804383 	ldbu	r2,270(r2)
  806c28:	10803fcc 	andi	r2,r2,255
  806c2c:	1080201c 	xori	r2,r2,128
  806c30:	10bfe004 	addi	r2,r2,-128
  806c34:	10000826 	beq	r2,zero,806c58 <logic+0x64c8>
  806c38:	e0bffc17 	ldw	r2,-16(fp)
  806c3c:	10805883 	ldbu	r2,354(r2)
  806c40:	10803fcc 	andi	r2,r2,255
  806c44:	1080201c 	xori	r2,r2,128
  806c48:	10bfe004 	addi	r2,r2,-128
  806c4c:	1000021e 	bne	r2,zero,806c58 <logic+0x64c8>
  806c50:	00800044 	movi	r2,1
  806c54:	00000106 	br	806c5c <logic+0x64cc>
  806c58:	0005883a 	mov	r2,zero
  806c5c:	1007883a 	mov	r3,r2
  806c60:	e0bffc17 	ldw	r2,-16(fp)
  806c64:	10c062c5 	stb	r3,395(r2)
  d->_g230 = d->_g227 && d->_cg201;
  806c68:	e0bffc17 	ldw	r2,-16(fp)
  806c6c:	10804383 	ldbu	r2,270(r2)
  806c70:	10803fcc 	andi	r2,r2,255
  806c74:	1080201c 	xori	r2,r2,128
  806c78:	10bfe004 	addi	r2,r2,-128
  806c7c:	10000826 	beq	r2,zero,806ca0 <logic+0x6510>
  806c80:	e0bffc17 	ldw	r2,-16(fp)
  806c84:	10805883 	ldbu	r2,354(r2)
  806c88:	10803fcc 	andi	r2,r2,255
  806c8c:	1080201c 	xori	r2,r2,128
  806c90:	10bfe004 	addi	r2,r2,-128
  806c94:	10000226 	beq	r2,zero,806ca0 <logic+0x6510>
  806c98:	00800044 	movi	r2,1
  806c9c:	00000106 	br	806ca4 <logic+0x6514>
  806ca0:	0005883a 	mov	r2,zero
  806ca4:	1007883a 	mov	r3,r2
  806ca8:	e0bffc17 	ldw	r2,-16(fp)
  806cac:	10c04405 	stb	r3,272(r2)
  d->_g231 = d->_g211 || d->_g218_e2 && !d->_cg205;
  806cb0:	e0bffc17 	ldw	r2,-16(fp)
  806cb4:	10804143 	ldbu	r2,261(r2)
  806cb8:	10803fcc 	andi	r2,r2,255
  806cbc:	1080201c 	xori	r2,r2,128
  806cc0:	10bfe004 	addi	r2,r2,-128
  806cc4:	10000c1e 	bne	r2,zero,806cf8 <logic+0x6568>
  806cc8:	e0bffc17 	ldw	r2,-16(fp)
  806ccc:	10806303 	ldbu	r2,396(r2)
  806cd0:	10803fcc 	andi	r2,r2,255
  806cd4:	1080201c 	xori	r2,r2,128
  806cd8:	10bfe004 	addi	r2,r2,-128
  806cdc:	10000826 	beq	r2,zero,806d00 <logic+0x6570>
  806ce0:	e0bffc17 	ldw	r2,-16(fp)
  806ce4:	108058c3 	ldbu	r2,355(r2)
  806ce8:	10803fcc 	andi	r2,r2,255
  806cec:	1080201c 	xori	r2,r2,128
  806cf0:	10bfe004 	addi	r2,r2,-128
  806cf4:	1000021e 	bne	r2,zero,806d00 <logic+0x6570>
  806cf8:	00800044 	movi	r2,1
  806cfc:	00000106 	br	806d04 <logic+0x6574>
  806d00:	0005883a 	mov	r2,zero
  806d04:	1007883a 	mov	r3,r2
  806d08:	e0bffc17 	ldw	r2,-16(fp)
  806d0c:	10c04445 	stb	r3,273(r2)
  d->_g198 = !d->_g227;
  806d10:	e0bffc17 	ldw	r2,-16(fp)
  806d14:	10804383 	ldbu	r2,270(r2)
  806d18:	10803fcc 	andi	r2,r2,255
  806d1c:	1080201c 	xori	r2,r2,128
  806d20:	10bfe004 	addi	r2,r2,-128
  806d24:	1005003a 	cmpeq	r2,r2,zero
  806d28:	1007883a 	mov	r3,r2
  806d2c:	e0bffc17 	ldw	r2,-16(fp)
  806d30:	10c03fc5 	stb	r3,255(r2)
  d->_g201 = !d->_g218_e2;
  806d34:	e0bffc17 	ldw	r2,-16(fp)
  806d38:	10806303 	ldbu	r2,396(r2)
  806d3c:	10803fcc 	andi	r2,r2,255
  806d40:	1080201c 	xori	r2,r2,128
  806d44:	10bfe004 	addi	r2,r2,-128
  806d48:	1005003a 	cmpeq	r2,r2,zero
  806d4c:	1007883a 	mov	r3,r2
  806d50:	e0bffc17 	ldw	r2,-16(fp)
  806d54:	10c04005 	stb	r3,256(r2)
  d->_g205 = (d->_g198 || d->_g230) && (d->_g201 || d->_g218) && (d->_g230 || d->_g218);
  806d58:	e0bffc17 	ldw	r2,-16(fp)
  806d5c:	10803fc3 	ldbu	r2,255(r2)
  806d60:	10803fcc 	andi	r2,r2,255
  806d64:	1080201c 	xori	r2,r2,128
  806d68:	10bfe004 	addi	r2,r2,-128
  806d6c:	1000061e 	bne	r2,zero,806d88 <logic+0x65f8>
  806d70:	e0bffc17 	ldw	r2,-16(fp)
  806d74:	10804403 	ldbu	r2,272(r2)
  806d78:	10803fcc 	andi	r2,r2,255
  806d7c:	1080201c 	xori	r2,r2,128
  806d80:	10bfe004 	addi	r2,r2,-128
  806d84:	10001a26 	beq	r2,zero,806df0 <logic+0x6660>
  806d88:	e0bffc17 	ldw	r2,-16(fp)
  806d8c:	10804003 	ldbu	r2,256(r2)
  806d90:	10803fcc 	andi	r2,r2,255
  806d94:	1080201c 	xori	r2,r2,128
  806d98:	10bfe004 	addi	r2,r2,-128
  806d9c:	1000061e 	bne	r2,zero,806db8 <logic+0x6628>
  806da0:	e0bffc17 	ldw	r2,-16(fp)
  806da4:	10804283 	ldbu	r2,266(r2)
  806da8:	10803fcc 	andi	r2,r2,255
  806dac:	1080201c 	xori	r2,r2,128
  806db0:	10bfe004 	addi	r2,r2,-128
  806db4:	10000e26 	beq	r2,zero,806df0 <logic+0x6660>
  806db8:	e0bffc17 	ldw	r2,-16(fp)
  806dbc:	10804403 	ldbu	r2,272(r2)
  806dc0:	10803fcc 	andi	r2,r2,255
  806dc4:	1080201c 	xori	r2,r2,128
  806dc8:	10bfe004 	addi	r2,r2,-128
  806dcc:	1000061e 	bne	r2,zero,806de8 <logic+0x6658>
  806dd0:	e0bffc17 	ldw	r2,-16(fp)
  806dd4:	10804283 	ldbu	r2,266(r2)
  806dd8:	10803fcc 	andi	r2,r2,255
  806ddc:	1080201c 	xori	r2,r2,128
  806de0:	10bfe004 	addi	r2,r2,-128
  806de4:	10000226 	beq	r2,zero,806df0 <logic+0x6660>
  806de8:	00800044 	movi	r2,1
  806dec:	00000106 	br	806df4 <logic+0x6664>
  806df0:	0005883a 	mov	r2,zero
  806df4:	1007883a 	mov	r3,r2
  806df8:	e0bffc17 	ldw	r2,-16(fp)
  806dfc:	10c04085 	stb	r3,258(r2)
  if (d->_g205) {
  806e00:	e0bffc17 	ldw	r2,-16(fp)
  806e04:	10804083 	ldbu	r2,258(r2)
  806e08:	10803fcc 	andi	r2,r2,255
  806e0c:	1080201c 	xori	r2,r2,128
  806e10:	10bfe004 	addi	r2,r2,-128
  806e14:	10000726 	beq	r2,zero,806e34 <logic+0x66a4>
    d->_region5_null_AVI = 0;
  806e18:	e0bffc17 	ldw	r2,-16(fp)
  806e1c:	10001115 	stw	zero,68(r2)
  806e20:	10001215 	stw	zero,72(r2)
    d->_heart2_local__Atrig18 = 0;
  806e24:	e0bffc17 	ldw	r2,-16(fp)
  806e28:	10001ec5 	stb	zero,123(r2)
    d->_heart2_local__Atrig19 = 0;
  806e2c:	e0bffc17 	ldw	r2,-16(fp)
  806e30:	10001f05 	stb	zero,124(r2)
  }
  d->_cg208 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  806e34:	e0bffc17 	ldw	r2,-16(fp)
  806e38:	10801ec3 	ldbu	r2,123(r2)
  806e3c:	10803fcc 	andi	r2,r2,255
  806e40:	1080201c 	xori	r2,r2,128
  806e44:	10bfe004 	addi	r2,r2,-128
  806e48:	1000061e 	bne	r2,zero,806e64 <logic+0x66d4>
  806e4c:	e0bffc17 	ldw	r2,-16(fp)
  806e50:	10801f03 	ldbu	r2,124(r2)
  806e54:	10803fcc 	andi	r2,r2,255
  806e58:	1080201c 	xori	r2,r2,128
  806e5c:	10bfe004 	addi	r2,r2,-128
  806e60:	10000226 	beq	r2,zero,806e6c <logic+0x66dc>
  806e64:	00800044 	movi	r2,1
  806e68:	00000106 	br	806e70 <logic+0x66e0>
  806e6c:	0005883a 	mov	r2,zero
  806e70:	1007883a 	mov	r3,r2
  806e74:	e0bffc17 	ldw	r2,-16(fp)
  806e78:	10c05905 	stb	r3,356(r2)
  d->_g206 = d->_g205 && !d->_cg208 || d->_g181 && !d->_cg210;
  806e7c:	e0bffc17 	ldw	r2,-16(fp)
  806e80:	10804083 	ldbu	r2,258(r2)
  806e84:	10803fcc 	andi	r2,r2,255
  806e88:	1080201c 	xori	r2,r2,128
  806e8c:	10bfe004 	addi	r2,r2,-128
  806e90:	10000626 	beq	r2,zero,806eac <logic+0x671c>
  806e94:	e0bffc17 	ldw	r2,-16(fp)
  806e98:	10805903 	ldbu	r2,356(r2)
  806e9c:	10803fcc 	andi	r2,r2,255
  806ea0:	1080201c 	xori	r2,r2,128
  806ea4:	10bfe004 	addi	r2,r2,-128
  806ea8:	10000c26 	beq	r2,zero,806edc <logic+0x674c>
  806eac:	e0bffc17 	ldw	r2,-16(fp)
  806eb0:	10803d03 	ldbu	r2,244(r2)
  806eb4:	10803fcc 	andi	r2,r2,255
  806eb8:	1080201c 	xori	r2,r2,128
  806ebc:	10bfe004 	addi	r2,r2,-128
  806ec0:	10000826 	beq	r2,zero,806ee4 <logic+0x6754>
  806ec4:	e0bffc17 	ldw	r2,-16(fp)
  806ec8:	10805943 	ldbu	r2,357(r2)
  806ecc:	10803fcc 	andi	r2,r2,255
  806ed0:	1080201c 	xori	r2,r2,128
  806ed4:	10bfe004 	addi	r2,r2,-128
  806ed8:	1000021e 	bne	r2,zero,806ee4 <logic+0x6754>
  806edc:	00800044 	movi	r2,1
  806ee0:	00000106 	br	806ee8 <logic+0x6758>
  806ee4:	0005883a 	mov	r2,zero
  806ee8:	1007883a 	mov	r3,r2
  806eec:	e0bffc17 	ldw	r2,-16(fp)
  806ef0:	10c040c5 	stb	r3,259(r2)
  d->_cg212 = d->_region5_null_AVI < d->AVI_time;
  806ef4:	e0bffc17 	ldw	r2,-16(fp)
  806ef8:	14001117 	ldw	r16,68(r2)
  806efc:	14401217 	ldw	r17,72(r2)
  806f00:	e0bffc17 	ldw	r2,-16(fp)
  806f04:	10800517 	ldw	r2,20(r2)
  806f08:	1009883a 	mov	r4,r2
  806f0c:	0808c3c0 	call	808c3c <__floatsidf>
  806f10:	1009883a 	mov	r4,r2
  806f14:	180b883a 	mov	r5,r3
  806f18:	04800044 	movi	r18,1
  806f1c:	200d883a 	mov	r6,r4
  806f20:	280f883a 	mov	r7,r5
  806f24:	8009883a 	mov	r4,r16
  806f28:	880b883a 	mov	r5,r17
  806f2c:	080824c0 	call	80824c <__ledf2>
  806f30:	10000116 	blt	r2,zero,806f38 <logic+0x67a8>
  806f34:	0025883a 	mov	r18,zero
  806f38:	9007883a 	mov	r3,r18
  806f3c:	e0bffc17 	ldw	r2,-16(fp)
  806f40:	10c05985 	stb	r3,358(r2)
  d->_g206_e2 = d->_g205 && d->_cg212;
  806f44:	e0bffc17 	ldw	r2,-16(fp)
  806f48:	10804083 	ldbu	r2,258(r2)
  806f4c:	10803fcc 	andi	r2,r2,255
  806f50:	1080201c 	xori	r2,r2,128
  806f54:	10bfe004 	addi	r2,r2,-128
  806f58:	10000826 	beq	r2,zero,806f7c <logic+0x67ec>
  806f5c:	e0bffc17 	ldw	r2,-16(fp)
  806f60:	10805983 	ldbu	r2,358(r2)
  806f64:	10803fcc 	andi	r2,r2,255
  806f68:	1080201c 	xori	r2,r2,128
  806f6c:	10bfe004 	addi	r2,r2,-128
  806f70:	10000226 	beq	r2,zero,806f7c <logic+0x67ec>
  806f74:	00800044 	movi	r2,1
  806f78:	00000106 	br	806f80 <logic+0x67f0>
  806f7c:	0005883a 	mov	r2,zero
  806f80:	1007883a 	mov	r3,r2
  806f84:	e0bffc17 	ldw	r2,-16(fp)
  806f88:	10c06285 	stb	r3,394(r2)
  if (d->_g206_e2) {
  806f8c:	e0bffc17 	ldw	r2,-16(fp)
  806f90:	10806283 	ldbu	r2,394(r2)
  806f94:	10803fcc 	andi	r2,r2,255
  806f98:	1080201c 	xori	r2,r2,128
  806f9c:	10bfe004 	addi	r2,r2,-128
  806fa0:	10003426 	beq	r2,zero,807074 <logic+0x68e4>
    d->sleepT = (d->sleepT < (d->AVI_time - d->_region5_null_AVI)) ? d->sleepT : (d->AVI_time - d->_region5_null_AVI);
  806fa4:	e0bffc17 	ldw	r2,-16(fp)
  806fa8:	14001517 	ldw	r16,84(r2)
  806fac:	14401617 	ldw	r17,88(r2)
  806fb0:	e0bffc17 	ldw	r2,-16(fp)
  806fb4:	10800517 	ldw	r2,20(r2)
  806fb8:	1009883a 	mov	r4,r2
  806fbc:	0808c3c0 	call	808c3c <__floatsidf>
  806fc0:	1011883a 	mov	r8,r2
  806fc4:	1813883a 	mov	r9,r3
  806fc8:	e13ffc17 	ldw	r4,-16(fp)
  806fcc:	20801117 	ldw	r2,68(r4)
  806fd0:	20c01217 	ldw	r3,72(r4)
  806fd4:	100d883a 	mov	r6,r2
  806fd8:	180f883a 	mov	r7,r3
  806fdc:	4009883a 	mov	r4,r8
  806fe0:	480b883a 	mov	r5,r9
  806fe4:	08083400 	call	808340 <__subdf3>
  806fe8:	1009883a 	mov	r4,r2
  806fec:	180b883a 	mov	r5,r3
  806ff0:	2005883a 	mov	r2,r4
  806ff4:	2807883a 	mov	r3,r5
  806ff8:	100d883a 	mov	r6,r2
  806ffc:	180f883a 	mov	r7,r3
  807000:	8009883a 	mov	r4,r16
  807004:	880b883a 	mov	r5,r17
  807008:	080824c0 	call	80824c <__ledf2>
  80700c:	1000040e 	bge	r2,zero,807020 <logic+0x6890>
  807010:	e13ffc17 	ldw	r4,-16(fp)
  807014:	20801517 	ldw	r2,84(r4)
  807018:	20c01617 	ldw	r3,88(r4)
  80701c:	00001206 	br	807068 <logic+0x68d8>
  807020:	e0bffc17 	ldw	r2,-16(fp)
  807024:	10800517 	ldw	r2,20(r2)
  807028:	1009883a 	mov	r4,r2
  80702c:	0808c3c0 	call	808c3c <__floatsidf>
  807030:	1011883a 	mov	r8,r2
  807034:	1813883a 	mov	r9,r3
  807038:	e13ffc17 	ldw	r4,-16(fp)
  80703c:	20801117 	ldw	r2,68(r4)
  807040:	20c01217 	ldw	r3,72(r4)
  807044:	100d883a 	mov	r6,r2
  807048:	180f883a 	mov	r7,r3
  80704c:	4009883a 	mov	r4,r8
  807050:	480b883a 	mov	r5,r9
  807054:	08083400 	call	808340 <__subdf3>
  807058:	1009883a 	mov	r4,r2
  80705c:	180b883a 	mov	r5,r3
  807060:	2005883a 	mov	r2,r4
  807064:	2807883a 	mov	r3,r5
  807068:	e13ffc17 	ldw	r4,-16(fp)
  80706c:	20801515 	stw	r2,84(r4)
  807070:	20c01615 	stw	r3,88(r4)
  }
  d->_cg213 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  807074:	e0bffc17 	ldw	r2,-16(fp)
  807078:	10801ec3 	ldbu	r2,123(r2)
  80707c:	10803fcc 	andi	r2,r2,255
  807080:	1080201c 	xori	r2,r2,128
  807084:	10bfe004 	addi	r2,r2,-128
  807088:	1000061e 	bne	r2,zero,8070a4 <logic+0x6914>
  80708c:	e0bffc17 	ldw	r2,-16(fp)
  807090:	10801f03 	ldbu	r2,124(r2)
  807094:	10803fcc 	andi	r2,r2,255
  807098:	1080201c 	xori	r2,r2,128
  80709c:	10bfe004 	addi	r2,r2,-128
  8070a0:	10000226 	beq	r2,zero,8070ac <logic+0x691c>
  8070a4:	00800044 	movi	r2,1
  8070a8:	00000106 	br	8070b0 <logic+0x6920>
  8070ac:	0005883a 	mov	r2,zero
  8070b0:	1007883a 	mov	r3,r2
  8070b4:	e0bffc17 	ldw	r2,-16(fp)
  8070b8:	10c059c5 	stb	r3,359(r2)
  d->_g202 = d->_g206_e2 && !d->_cg213 || d->_g221 && !d->_cg217;
  8070bc:	e0bffc17 	ldw	r2,-16(fp)
  8070c0:	10806283 	ldbu	r2,394(r2)
  8070c4:	10803fcc 	andi	r2,r2,255
  8070c8:	1080201c 	xori	r2,r2,128
  8070cc:	10bfe004 	addi	r2,r2,-128
  8070d0:	10000626 	beq	r2,zero,8070ec <logic+0x695c>
  8070d4:	e0bffc17 	ldw	r2,-16(fp)
  8070d8:	108059c3 	ldbu	r2,359(r2)
  8070dc:	10803fcc 	andi	r2,r2,255
  8070e0:	1080201c 	xori	r2,r2,128
  8070e4:	10bfe004 	addi	r2,r2,-128
  8070e8:	10000c26 	beq	r2,zero,80711c <logic+0x698c>
  8070ec:	e0bffc17 	ldw	r2,-16(fp)
  8070f0:	108042c3 	ldbu	r2,267(r2)
  8070f4:	10803fcc 	andi	r2,r2,255
  8070f8:	1080201c 	xori	r2,r2,128
  8070fc:	10bfe004 	addi	r2,r2,-128
  807100:	10000826 	beq	r2,zero,807124 <logic+0x6994>
  807104:	e0bffc17 	ldw	r2,-16(fp)
  807108:	10805a03 	ldbu	r2,360(r2)
  80710c:	10803fcc 	andi	r2,r2,255
  807110:	1080201c 	xori	r2,r2,128
  807114:	10bfe004 	addi	r2,r2,-128
  807118:	1000021e 	bne	r2,zero,807124 <logic+0x6994>
  80711c:	00800044 	movi	r2,1
  807120:	00000106 	br	807128 <logic+0x6998>
  807124:	0005883a 	mov	r2,zero
  807128:	1007883a 	mov	r3,r2
  80712c:	e0bffc17 	ldw	r2,-16(fp)
  807130:	10c04045 	stb	r3,257(r2)
  d->_g202_e1 = d->_g205 && !d->_cg212;
  807134:	e0bffc17 	ldw	r2,-16(fp)
  807138:	10804083 	ldbu	r2,258(r2)
  80713c:	10803fcc 	andi	r2,r2,255
  807140:	1080201c 	xori	r2,r2,128
  807144:	10bfe004 	addi	r2,r2,-128
  807148:	10000826 	beq	r2,zero,80716c <logic+0x69dc>
  80714c:	e0bffc17 	ldw	r2,-16(fp)
  807150:	10805983 	ldbu	r2,358(r2)
  807154:	10803fcc 	andi	r2,r2,255
  807158:	1080201c 	xori	r2,r2,128
  80715c:	10bfe004 	addi	r2,r2,-128
  807160:	1000021e 	bne	r2,zero,80716c <logic+0x69dc>
  807164:	00800044 	movi	r2,1
  807168:	00000106 	br	807170 <logic+0x69e0>
  80716c:	0005883a 	mov	r2,zero
  807170:	1007883a 	mov	r3,r2
  807174:	e0bffc17 	ldw	r2,-16(fp)
  807178:	10c06245 	stb	r3,393(r2)
  d->_cg222 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  80717c:	e0bffc17 	ldw	r2,-16(fp)
  807180:	10801ec3 	ldbu	r2,123(r2)
  807184:	10803fcc 	andi	r2,r2,255
  807188:	1080201c 	xori	r2,r2,128
  80718c:	10bfe004 	addi	r2,r2,-128
  807190:	1000061e 	bne	r2,zero,8071ac <logic+0x6a1c>
  807194:	e0bffc17 	ldw	r2,-16(fp)
  807198:	10801f03 	ldbu	r2,124(r2)
  80719c:	10803fcc 	andi	r2,r2,255
  8071a0:	1080201c 	xori	r2,r2,128
  8071a4:	10bfe004 	addi	r2,r2,-128
  8071a8:	10000226 	beq	r2,zero,8071b4 <logic+0x6a24>
  8071ac:	00800044 	movi	r2,1
  8071b0:	00000106 	br	8071b8 <logic+0x6a28>
  8071b4:	0005883a 	mov	r2,zero
  8071b8:	1007883a 	mov	r3,r2
  8071bc:	e0bffc17 	ldw	r2,-16(fp)
  8071c0:	10c05ac5 	stb	r3,363(r2)
  d->_g210 = d->_g216 && !d->_cg219 || d->_g202_e1 && !d->_cg222;
  8071c4:	e0bffc17 	ldw	r2,-16(fp)
  8071c8:	10804203 	ldbu	r2,264(r2)
  8071cc:	10803fcc 	andi	r2,r2,255
  8071d0:	1080201c 	xori	r2,r2,128
  8071d4:	10bfe004 	addi	r2,r2,-128
  8071d8:	10000626 	beq	r2,zero,8071f4 <logic+0x6a64>
  8071dc:	e0bffc17 	ldw	r2,-16(fp)
  8071e0:	10805a83 	ldbu	r2,362(r2)
  8071e4:	10803fcc 	andi	r2,r2,255
  8071e8:	1080201c 	xori	r2,r2,128
  8071ec:	10bfe004 	addi	r2,r2,-128
  8071f0:	10000c26 	beq	r2,zero,807224 <logic+0x6a94>
  8071f4:	e0bffc17 	ldw	r2,-16(fp)
  8071f8:	10806243 	ldbu	r2,393(r2)
  8071fc:	10803fcc 	andi	r2,r2,255
  807200:	1080201c 	xori	r2,r2,128
  807204:	10bfe004 	addi	r2,r2,-128
  807208:	10000826 	beq	r2,zero,80722c <logic+0x6a9c>
  80720c:	e0bffc17 	ldw	r2,-16(fp)
  807210:	10805ac3 	ldbu	r2,363(r2)
  807214:	10803fcc 	andi	r2,r2,255
  807218:	1080201c 	xori	r2,r2,128
  80721c:	10bfe004 	addi	r2,r2,-128
  807220:	1000021e 	bne	r2,zero,80722c <logic+0x6a9c>
  807224:	00800044 	movi	r2,1
  807228:	00000106 	br	807230 <logic+0x6aa0>
  80722c:	0005883a 	mov	r2,zero
  807230:	1007883a 	mov	r3,r2
  807234:	e0bffc17 	ldw	r2,-16(fp)
  807238:	10c04105 	stb	r3,260(r2)
  d->_g213 = d->_g205 || d->_g172_e2 && !d->_cg228;
  80723c:	e0bffc17 	ldw	r2,-16(fp)
  807240:	10804083 	ldbu	r2,258(r2)
  807244:	10803fcc 	andi	r2,r2,255
  807248:	1080201c 	xori	r2,r2,128
  80724c:	10bfe004 	addi	r2,r2,-128
  807250:	10000c1e 	bne	r2,zero,807284 <logic+0x6af4>
  807254:	e0bffc17 	ldw	r2,-16(fp)
  807258:	10806143 	ldbu	r2,389(r2)
  80725c:	10803fcc 	andi	r2,r2,255
  807260:	1080201c 	xori	r2,r2,128
  807264:	10bfe004 	addi	r2,r2,-128
  807268:	10000826 	beq	r2,zero,80728c <logic+0x6afc>
  80726c:	e0bffc17 	ldw	r2,-16(fp)
  807270:	10805b03 	ldbu	r2,364(r2)
  807274:	10803fcc 	andi	r2,r2,255
  807278:	1080201c 	xori	r2,r2,128
  80727c:	10bfe004 	addi	r2,r2,-128
  807280:	1000021e 	bne	r2,zero,80728c <logic+0x6afc>
  807284:	00800044 	movi	r2,1
  807288:	00000106 	br	807290 <logic+0x6b00>
  80728c:	0005883a 	mov	r2,zero
  807290:	1007883a 	mov	r3,r2
  807294:	e0bffc17 	ldw	r2,-16(fp)
  807298:	10c04185 	stb	r3,262(r2)
  d->_g217 = d->_GO || d->_g236 || d->_g238 || d->_g235 && !d->_cg237;
  80729c:	e0bffc17 	ldw	r2,-16(fp)
  8072a0:	10804543 	ldbu	r2,277(r2)
  8072a4:	10803fcc 	andi	r2,r2,255
  8072a8:	1080201c 	xori	r2,r2,128
  8072ac:	10bfe004 	addi	r2,r2,-128
  8072b0:	1000181e 	bne	r2,zero,807314 <logic+0x6b84>
  8072b4:	e0bffc17 	ldw	r2,-16(fp)
  8072b8:	108044c3 	ldbu	r2,275(r2)
  8072bc:	10803fcc 	andi	r2,r2,255
  8072c0:	1080201c 	xori	r2,r2,128
  8072c4:	10bfe004 	addi	r2,r2,-128
  8072c8:	1000121e 	bne	r2,zero,807314 <logic+0x6b84>
  8072cc:	e0bffc17 	ldw	r2,-16(fp)
  8072d0:	10804503 	ldbu	r2,276(r2)
  8072d4:	10803fcc 	andi	r2,r2,255
  8072d8:	1080201c 	xori	r2,r2,128
  8072dc:	10bfe004 	addi	r2,r2,-128
  8072e0:	10000c1e 	bne	r2,zero,807314 <logic+0x6b84>
  8072e4:	e0bffc17 	ldw	r2,-16(fp)
  8072e8:	10804483 	ldbu	r2,274(r2)
  8072ec:	10803fcc 	andi	r2,r2,255
  8072f0:	1080201c 	xori	r2,r2,128
  8072f4:	10bfe004 	addi	r2,r2,-128
  8072f8:	10000826 	beq	r2,zero,80731c <logic+0x6b8c>
  8072fc:	e0bffc17 	ldw	r2,-16(fp)
  807300:	10805b83 	ldbu	r2,366(r2)
  807304:	10803fcc 	andi	r2,r2,255
  807308:	1080201c 	xori	r2,r2,128
  80730c:	10bfe004 	addi	r2,r2,-128
  807310:	1000021e 	bne	r2,zero,80731c <logic+0x6b8c>
  807314:	00800044 	movi	r2,1
  807318:	00000106 	br	807320 <logic+0x6b90>
  80731c:	0005883a 	mov	r2,zero
  807320:	1007883a 	mov	r3,r2
  807324:	e0bffc17 	ldw	r2,-16(fp)
  807328:	10c04245 	stb	r3,265(r2)
  d->_reg_VP = d->VP;
  80732c:	e0bffc17 	ldw	r2,-16(fp)
  807330:	10c017c3 	ldbu	r3,95(r2)
  807334:	e0bffc17 	ldw	r2,-16(fp)
  807338:	10c01945 	stb	r3,101(r2)
  d->_reg_VS_i = d->VS_i;
  80733c:	e0bffc17 	ldw	r2,-16(fp)
  807340:	10c01903 	ldbu	r3,100(r2)
  807344:	e0bffc17 	ldw	r2,-16(fp)
  807348:	10c019c5 	stb	r3,103(r2)
}
  80734c:	0001883a 	nop
  807350:	e6fffd04 	addi	sp,fp,-12
  807354:	dfc00417 	ldw	ra,16(sp)
  807358:	df000317 	ldw	fp,12(sp)
  80735c:	dc800217 	ldw	r18,8(sp)
  807360:	dc400117 	ldw	r17,4(sp)
  807364:	dc000017 	ldw	r16,0(sp)
  807368:	dec00504 	addi	sp,sp,20
  80736c:	f800283a 	ret

00807370 <reset>:

void reset(TickData* d) {
  807370:	defffe04 	addi	sp,sp,-8
  807374:	df000115 	stw	fp,4(sp)
  807378:	df000104 	addi	fp,sp,4
  80737c:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  807380:	e0bfff17 	ldw	r2,-4(fp)
  807384:	00c00044 	movi	r3,1
  807388:	10c04545 	stb	r3,277(r2)
  d->_TERM = 0;
  80738c:	e0bfff17 	ldw	r2,-4(fp)
  807390:	10006385 	stb	zero,398(r2)
  d->VRP_time = VRP_VALUE;
  807394:	e0bfff17 	ldw	r2,-4(fp)
  807398:	00c02584 	movi	r3,150
  80739c:	10c00015 	stw	r3,0(r2)
  d->PVARP_time = PVARP_VALUE;
  8073a0:	e0bfff17 	ldw	r2,-4(fp)
  8073a4:	00c00c84 	movi	r3,50
  8073a8:	10c00115 	stw	r3,4(r2)
  d->URI_time = URI_VALUE;
  8073ac:	e0bfff17 	ldw	r2,-4(fp)
  8073b0:	00c0e104 	movi	r3,900
  8073b4:	10c00215 	stw	r3,8(r2)
  d->LRI_time = LRI_VALUE;
  8073b8:	e0bfff17 	ldw	r2,-4(fp)
  8073bc:	00c0ed84 	movi	r3,950
  8073c0:	10c00315 	stw	r3,12(r2)
  d->AEI_time = AEI_VALUE;
  8073c4:	e0bfff17 	ldw	r2,-4(fp)
  8073c8:	00c0c804 	movi	r3,800
  8073cc:	10c00415 	stw	r3,16(r2)
  d->AVI_time = AVI_VALUE;
  8073d0:	e0bfff17 	ldw	r2,-4(fp)
  8073d4:	00c04b04 	movi	r3,300
  8073d8:	10c00515 	stw	r3,20(r2)
  d->ready = 0;
  8073dc:	e0bfff17 	ldw	r2,-4(fp)
  8073e0:	10000605 	stb	zero,24(r2)
  d->_region0_null_URI = 0.0;
  8073e4:	e0bfff17 	ldw	r2,-4(fp)
  8073e8:	10000715 	stw	zero,28(r2)
  8073ec:	10000815 	stw	zero,32(r2)
  d->_region1_null_LRI = 0.0;
  8073f0:	e0bfff17 	ldw	r2,-4(fp)
  8073f4:	10000915 	stw	zero,36(r2)
  8073f8:	10000a15 	stw	zero,40(r2)
  d->_region2_null_VRP = 0.0;
  8073fc:	e0bfff17 	ldw	r2,-4(fp)
  807400:	10000b15 	stw	zero,44(r2)
  807404:	10000c15 	stw	zero,48(r2)
  d->_region3_null_PVARP = 0.0;
  807408:	e0bfff17 	ldw	r2,-4(fp)
  80740c:	10000d15 	stw	zero,52(r2)
  807410:	10000e15 	stw	zero,56(r2)
  d->_region4_null_AEI = 0.0;
  807414:	e0bfff17 	ldw	r2,-4(fp)
  807418:	10000f15 	stw	zero,60(r2)
  80741c:	10001015 	stw	zero,64(r2)
  d->_region5_null_AVI = 0.0;
  807420:	e0bfff17 	ldw	r2,-4(fp)
  807424:	10001115 	stw	zero,68(r2)
  807428:	10001215 	stw	zero,72(r2)
  d->deltaT = 0.0;
  80742c:	e0bfff17 	ldw	r2,-4(fp)
  807430:	10001315 	stw	zero,76(r2)
  807434:	10001415 	stw	zero,80(r2)
  d->sleepT = 0.0;
  807438:	e0bfff17 	ldw	r2,-4(fp)
  80743c:	10001515 	stw	zero,84(r2)
  807440:	10001615 	stw	zero,88(r2)
  d->_reg_VP = 0;
  807444:	e0bfff17 	ldw	r2,-4(fp)
  807448:	10001945 	stb	zero,101(r2)
  d->_reg_VS_i = 0;
  80744c:	e0bfff17 	ldw	r2,-4(fp)
  807450:	100019c5 	stb	zero,103(r2)
  d->_pg9 = 0;
  807454:	e0bfff17 	ldw	r2,-4(fp)
  807458:	100063c5 	stb	zero,399(r2)
  d->_pg217 = 0;
  80745c:	e0bfff17 	ldw	r2,-4(fp)
  807460:	10006405 	stb	zero,400(r2)
  d->_pg13 = 0;
  807464:	e0bfff17 	ldw	r2,-4(fp)
  807468:	10006445 	stb	zero,401(r2)
  d->_pg7_e1 = 0;
  80746c:	e0bfff17 	ldw	r2,-4(fp)
  807470:	10006485 	stb	zero,402(r2)
  d->_pg36 = 0;
  807474:	e0bfff17 	ldw	r2,-4(fp)
  807478:	100064c5 	stb	zero,403(r2)
  d->_pg37 = 0;
  80747c:	e0bfff17 	ldw	r2,-4(fp)
  807480:	10006505 	stb	zero,404(r2)
  d->_pg14 = 0;
  807484:	e0bfff17 	ldw	r2,-4(fp)
  807488:	10006545 	stb	zero,405(r2)
  d->_pg46 = 0;
  80748c:	e0bfff17 	ldw	r2,-4(fp)
  807490:	10006585 	stb	zero,406(r2)
  d->_pg50 = 0;
  807494:	e0bfff17 	ldw	r2,-4(fp)
  807498:	100065c5 	stb	zero,407(r2)
  d->_pg44_e1 = 0;
  80749c:	e0bfff17 	ldw	r2,-4(fp)
  8074a0:	10006605 	stb	zero,408(r2)
  d->_pg74 = 0;
  8074a4:	e0bfff17 	ldw	r2,-4(fp)
  8074a8:	10006645 	stb	zero,409(r2)
  d->_pg73 = 0;
  8074ac:	e0bfff17 	ldw	r2,-4(fp)
  8074b0:	10006685 	stb	zero,410(r2)
  d->_pg51_e2 = 0;
  8074b4:	e0bfff17 	ldw	r2,-4(fp)
  8074b8:	100066c5 	stb	zero,411(r2)
  d->_pg83 = 0;
  8074bc:	e0bfff17 	ldw	r2,-4(fp)
  8074c0:	10006705 	stb	zero,412(r2)
  d->_pg89 = 0;
  8074c4:	e0bfff17 	ldw	r2,-4(fp)
  8074c8:	10006745 	stb	zero,413(r2)
  d->_pg88 = 0;
  8074cc:	e0bfff17 	ldw	r2,-4(fp)
  8074d0:	10006785 	stb	zero,414(r2)
  d->_pg114 = 0;
  8074d4:	e0bfff17 	ldw	r2,-4(fp)
  8074d8:	100067c5 	stb	zero,415(r2)
  d->_pg116 = 0;
  8074dc:	e0bfff17 	ldw	r2,-4(fp)
  8074e0:	10006805 	stb	zero,416(r2)
  d->_pg97_e3 = 0;
  8074e4:	e0bfff17 	ldw	r2,-4(fp)
  8074e8:	10006845 	stb	zero,417(r2)
  d->_pg129 = 0;
  8074ec:	e0bfff17 	ldw	r2,-4(fp)
  8074f0:	10006885 	stb	zero,418(r2)
  d->_pg134 = 0;
  8074f4:	e0bfff17 	ldw	r2,-4(fp)
  8074f8:	100068c5 	stb	zero,419(r2)
  d->_pg130_e2 = 0;
  8074fc:	e0bfff17 	ldw	r2,-4(fp)
  807500:	10006905 	stb	zero,420(r2)
  d->_pg158 = 0;
  807504:	e0bfff17 	ldw	r2,-4(fp)
  807508:	10006945 	stb	zero,421(r2)
  d->_pg156 = 0;
  80750c:	e0bfff17 	ldw	r2,-4(fp)
  807510:	10006985 	stb	zero,422(r2)
  d->_pg139 = 0;
  807514:	e0bfff17 	ldw	r2,-4(fp)
  807518:	100069c5 	stb	zero,423(r2)
  d->_pg179 = 0;
  80751c:	e0bfff17 	ldw	r2,-4(fp)
  807520:	10006a05 	stb	zero,424(r2)
  d->_pg181_e3 = 0;
  807524:	e0bfff17 	ldw	r2,-4(fp)
  807528:	10006a45 	stb	zero,425(r2)
  d->_pg195 = 0;
  80752c:	e0bfff17 	ldw	r2,-4(fp)
  807530:	10006a85 	stb	zero,426(r2)
  d->_pg173 = 0;
  807534:	e0bfff17 	ldw	r2,-4(fp)
  807538:	10006ac5 	stb	zero,427(r2)
  d->_pg167 = 0;
  80753c:	e0bfff17 	ldw	r2,-4(fp)
  807540:	10006b05 	stb	zero,428(r2)
  d->_pg176 = 0;
  807544:	e0bfff17 	ldw	r2,-4(fp)
  807548:	10006b45 	stb	zero,429(r2)
  d->_pg206 = 0;
  80754c:	e0bfff17 	ldw	r2,-4(fp)
  807550:	10006b85 	stb	zero,430(r2)
  d->_pg213 = 0;
  807554:	e0bfff17 	ldw	r2,-4(fp)
  807558:	10006bc5 	stb	zero,431(r2)
  d->_pg210 = 0;
  80755c:	e0bfff17 	ldw	r2,-4(fp)
  807560:	10006c05 	stb	zero,432(r2)
  d->_pg202 = 0;
  807564:	e0bfff17 	ldw	r2,-4(fp)
  807568:	10006c45 	stb	zero,433(r2)
  d->_pg231 = 0;
  80756c:	e0bfff17 	ldw	r2,-4(fp)
  807570:	10006c85 	stb	zero,434(r2)
  d->_pg211_e1 = 0;
  807574:	e0bfff17 	ldw	r2,-4(fp)
  807578:	10006cc5 	stb	zero,435(r2)
}
  80757c:	0001883a 	nop
  807580:	e037883a 	mov	sp,fp
  807584:	df000017 	ldw	fp,0(sp)
  807588:	dec00104 	addi	sp,sp,4
  80758c:	f800283a 	ret

00807590 <tick>:

void tick(TickData* d) {
  807590:	defffd04 	addi	sp,sp,-12
  807594:	dfc00215 	stw	ra,8(sp)
  807598:	df000115 	stw	fp,4(sp)
  80759c:	df000104 	addi	fp,sp,4
  8075a0:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  8075a4:	e13fff17 	ldw	r4,-4(fp)
  8075a8:	08007900 	call	800790 <logic>

  d->_pg9 = d->_g9;
  8075ac:	e0bfff17 	ldw	r2,-4(fp)
  8075b0:	10c02003 	ldbu	r3,128(r2)
  8075b4:	e0bfff17 	ldw	r2,-4(fp)
  8075b8:	10c063c5 	stb	r3,399(r2)
  d->_pg217 = d->_g217;
  8075bc:	e0bfff17 	ldw	r2,-4(fp)
  8075c0:	10c04243 	ldbu	r3,265(r2)
  8075c4:	e0bfff17 	ldw	r2,-4(fp)
  8075c8:	10c06405 	stb	r3,400(r2)
  d->_pg13 = d->_g13;
  8075cc:	e0bfff17 	ldw	r2,-4(fp)
  8075d0:	10c020c3 	ldbu	r3,131(r2)
  8075d4:	e0bfff17 	ldw	r2,-4(fp)
  8075d8:	10c06445 	stb	r3,401(r2)
  d->_pg7_e1 = d->_g7_e1;
  8075dc:	e0bfff17 	ldw	r2,-4(fp)
  8075e0:	10c05c03 	ldbu	r3,368(r2)
  8075e4:	e0bfff17 	ldw	r2,-4(fp)
  8075e8:	10c06485 	stb	r3,402(r2)
  d->_pg36 = d->_g36;
  8075ec:	e0bfff17 	ldw	r2,-4(fp)
  8075f0:	10c024c3 	ldbu	r3,147(r2)
  8075f4:	e0bfff17 	ldw	r2,-4(fp)
  8075f8:	10c064c5 	stb	r3,403(r2)
  d->_pg37 = d->_g37;
  8075fc:	e0bfff17 	ldw	r2,-4(fp)
  807600:	10c02503 	ldbu	r3,148(r2)
  807604:	e0bfff17 	ldw	r2,-4(fp)
  807608:	10c06505 	stb	r3,404(r2)
  d->_pg14 = d->_g14;
  80760c:	e0bfff17 	ldw	r2,-4(fp)
  807610:	10c02103 	ldbu	r3,132(r2)
  807614:	e0bfff17 	ldw	r2,-4(fp)
  807618:	10c06545 	stb	r3,405(r2)
  d->_pg46 = d->_g46;
  80761c:	e0bfff17 	ldw	r2,-4(fp)
  807620:	10c02603 	ldbu	r3,152(r2)
  807624:	e0bfff17 	ldw	r2,-4(fp)
  807628:	10c06585 	stb	r3,406(r2)
  d->_pg50 = d->_g50;
  80762c:	e0bfff17 	ldw	r2,-4(fp)
  807630:	10c026c3 	ldbu	r3,155(r2)
  807634:	e0bfff17 	ldw	r2,-4(fp)
  807638:	10c065c5 	stb	r3,407(r2)
  d->_pg44_e1 = d->_g44_e1;
  80763c:	e0bfff17 	ldw	r2,-4(fp)
  807640:	10c05d43 	ldbu	r3,373(r2)
  807644:	e0bfff17 	ldw	r2,-4(fp)
  807648:	10c06605 	stb	r3,408(r2)
  d->_pg74 = d->_g74;
  80764c:	e0bfff17 	ldw	r2,-4(fp)
  807650:	10c02b03 	ldbu	r3,172(r2)
  807654:	e0bfff17 	ldw	r2,-4(fp)
  807658:	10c06645 	stb	r3,409(r2)
  d->_pg73 = d->_g73;
  80765c:	e0bfff17 	ldw	r2,-4(fp)
  807660:	10c02ac3 	ldbu	r3,171(r2)
  807664:	e0bfff17 	ldw	r2,-4(fp)
  807668:	10c06685 	stb	r3,410(r2)
  d->_pg51_e2 = d->_g51_e2;
  80766c:	e0bfff17 	ldw	r2,-4(fp)
  807670:	10c05d83 	ldbu	r3,374(r2)
  807674:	e0bfff17 	ldw	r2,-4(fp)
  807678:	10c066c5 	stb	r3,411(r2)
  d->_pg83 = d->_g83;
  80767c:	e0bfff17 	ldw	r2,-4(fp)
  807680:	10c02c03 	ldbu	r3,176(r2)
  807684:	e0bfff17 	ldw	r2,-4(fp)
  807688:	10c06705 	stb	r3,412(r2)
  d->_pg89 = d->_g89;
  80768c:	e0bfff17 	ldw	r2,-4(fp)
  807690:	10c02d43 	ldbu	r3,181(r2)
  807694:	e0bfff17 	ldw	r2,-4(fp)
  807698:	10c06745 	stb	r3,413(r2)
  d->_pg88 = d->_g88;
  80769c:	e0bfff17 	ldw	r2,-4(fp)
  8076a0:	10c02d03 	ldbu	r3,180(r2)
  8076a4:	e0bfff17 	ldw	r2,-4(fp)
  8076a8:	10c06785 	stb	r3,414(r2)
  d->_pg114 = d->_g114;
  8076ac:	e0bfff17 	ldw	r2,-4(fp)
  8076b0:	10c031c3 	ldbu	r3,199(r2)
  8076b4:	e0bfff17 	ldw	r2,-4(fp)
  8076b8:	10c067c5 	stb	r3,415(r2)
  d->_pg116 = d->_g116;
  8076bc:	e0bfff17 	ldw	r2,-4(fp)
  8076c0:	10c03243 	ldbu	r3,201(r2)
  8076c4:	e0bfff17 	ldw	r2,-4(fp)
  8076c8:	10c06805 	stb	r3,416(r2)
  d->_pg97_e3 = d->_g97_e3;
  8076cc:	e0bfff17 	ldw	r2,-4(fp)
  8076d0:	10c05f03 	ldbu	r3,380(r2)
  8076d4:	e0bfff17 	ldw	r2,-4(fp)
  8076d8:	10c06845 	stb	r3,417(r2)
  d->_pg129 = d->_g129;
  8076dc:	e0bfff17 	ldw	r2,-4(fp)
  8076e0:	10c03403 	ldbu	r3,208(r2)
  8076e4:	e0bfff17 	ldw	r2,-4(fp)
  8076e8:	10c06885 	stb	r3,418(r2)
  d->_pg134 = d->_g134;
  8076ec:	e0bfff17 	ldw	r2,-4(fp)
  8076f0:	10c03503 	ldbu	r3,212(r2)
  8076f4:	e0bfff17 	ldw	r2,-4(fp)
  8076f8:	10c068c5 	stb	r3,419(r2)
  d->_pg130_e2 = d->_g130_e2;
  8076fc:	e0bfff17 	ldw	r2,-4(fp)
  807700:	10c06003 	ldbu	r3,384(r2)
  807704:	e0bfff17 	ldw	r2,-4(fp)
  807708:	10c06905 	stb	r3,420(r2)
  d->_pg158 = d->_g158;
  80770c:	e0bfff17 	ldw	r2,-4(fp)
  807710:	10c03983 	ldbu	r3,230(r2)
  807714:	e0bfff17 	ldw	r2,-4(fp)
  807718:	10c06945 	stb	r3,421(r2)
  d->_pg156 = d->_g156;
  80771c:	e0bfff17 	ldw	r2,-4(fp)
  807720:	10c03903 	ldbu	r3,228(r2)
  807724:	e0bfff17 	ldw	r2,-4(fp)
  807728:	10c06985 	stb	r3,422(r2)
  d->_pg139 = d->_g139;
  80772c:	e0bfff17 	ldw	r2,-4(fp)
  807730:	10c035c3 	ldbu	r3,215(r2)
  807734:	e0bfff17 	ldw	r2,-4(fp)
  807738:	10c069c5 	stb	r3,423(r2)
  d->_pg179 = d->_g179;
  80773c:	e0bfff17 	ldw	r2,-4(fp)
  807740:	10c03c83 	ldbu	r3,242(r2)
  807744:	e0bfff17 	ldw	r2,-4(fp)
  807748:	10c06a05 	stb	r3,424(r2)
  d->_pg181_e3 = d->_g181_e3;
  80774c:	e0bfff17 	ldw	r2,-4(fp)
  807750:	10c06183 	ldbu	r3,390(r2)
  807754:	e0bfff17 	ldw	r2,-4(fp)
  807758:	10c06a45 	stb	r3,425(r2)
  d->_pg195 = d->_g195;
  80775c:	e0bfff17 	ldw	r2,-4(fp)
  807760:	10c03f83 	ldbu	r3,254(r2)
  807764:	e0bfff17 	ldw	r2,-4(fp)
  807768:	10c06a85 	stb	r3,426(r2)
  d->_pg173 = d->_g173;
  80776c:	e0bfff17 	ldw	r2,-4(fp)
  807770:	10c03bc3 	ldbu	r3,239(r2)
  807774:	e0bfff17 	ldw	r2,-4(fp)
  807778:	10c06ac5 	stb	r3,427(r2)
  d->_pg167 = d->_g167;
  80777c:	e0bfff17 	ldw	r2,-4(fp)
  807780:	10c03a83 	ldbu	r3,234(r2)
  807784:	e0bfff17 	ldw	r2,-4(fp)
  807788:	10c06b05 	stb	r3,428(r2)
  d->_pg176 = d->_g176;
  80778c:	e0bfff17 	ldw	r2,-4(fp)
  807790:	10c03c43 	ldbu	r3,241(r2)
  807794:	e0bfff17 	ldw	r2,-4(fp)
  807798:	10c06b45 	stb	r3,429(r2)
  d->_pg206 = d->_g206;
  80779c:	e0bfff17 	ldw	r2,-4(fp)
  8077a0:	10c040c3 	ldbu	r3,259(r2)
  8077a4:	e0bfff17 	ldw	r2,-4(fp)
  8077a8:	10c06b85 	stb	r3,430(r2)
  d->_pg213 = d->_g213;
  8077ac:	e0bfff17 	ldw	r2,-4(fp)
  8077b0:	10c04183 	ldbu	r3,262(r2)
  8077b4:	e0bfff17 	ldw	r2,-4(fp)
  8077b8:	10c06bc5 	stb	r3,431(r2)
  d->_pg210 = d->_g210;
  8077bc:	e0bfff17 	ldw	r2,-4(fp)
  8077c0:	10c04103 	ldbu	r3,260(r2)
  8077c4:	e0bfff17 	ldw	r2,-4(fp)
  8077c8:	10c06c05 	stb	r3,432(r2)
  d->_pg202 = d->_g202;
  8077cc:	e0bfff17 	ldw	r2,-4(fp)
  8077d0:	10c04043 	ldbu	r3,257(r2)
  8077d4:	e0bfff17 	ldw	r2,-4(fp)
  8077d8:	10c06c45 	stb	r3,433(r2)
  d->_pg231 = d->_g231;
  8077dc:	e0bfff17 	ldw	r2,-4(fp)
  8077e0:	10c04443 	ldbu	r3,273(r2)
  8077e4:	e0bfff17 	ldw	r2,-4(fp)
  8077e8:	10c06c85 	stb	r3,434(r2)
  d->_pg211_e1 = d->_g211_e1;
  8077ec:	e0bfff17 	ldw	r2,-4(fp)
  8077f0:	10c062c3 	ldbu	r3,395(r2)
  8077f4:	e0bfff17 	ldw	r2,-4(fp)
  8077f8:	10c06cc5 	stb	r3,435(r2)
  d->_GO = 0;
  8077fc:	e0bfff17 	ldw	r2,-4(fp)
  807800:	10004545 	stb	zero,277(r2)
}
  807804:	0001883a 	nop
  807808:	e037883a 	mov	sp,fp
  80780c:	dfc00117 	ldw	ra,4(sp)
  807810:	df000017 	ldw	fp,0(sp)
  807814:	dec00204 	addi	sp,sp,8
  807818:	f800283a 	ret

0080781c <uart_tx>:

#include "uart.h"
#include "system.h"
#include "altera_avalon_uart_regs.h"

void uart_tx(char character_to_send) {
  80781c:	defffe04 	addi	sp,sp,-8
  807820:	df000115 	stw	fp,4(sp)
  807824:	df000104 	addi	fp,sp,4
  807828:	2005883a 	mov	r2,r4
  80782c:	e0bfff05 	stb	r2,-4(fp)
    while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK)); //wait til ready to transmit
  807830:	0001883a 	nop
  807834:	00804074 	movhi	r2,257
  807838:	10841204 	addi	r2,r2,4168
  80783c:	10800037 	ldwio	r2,0(r2)
  807840:	1080100c 	andi	r2,r2,64
  807844:	103ffb26 	beq	r2,zero,807834 <__alt_mem_onchip_mem+0xff7ff834>
    IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, character_to_send);
  807848:	e0ffff07 	ldb	r3,-4(fp)
  80784c:	00804074 	movhi	r2,257
  807850:	10841104 	addi	r2,r2,4164
  807854:	10c00035 	stwio	r3,0(r2)
}
  807858:	0001883a 	nop
  80785c:	e037883a 	mov	sp,fp
  807860:	df000017 	ldw	fp,0(sp)
  807864:	dec00104 	addi	sp,sp,4
  807868:	f800283a 	ret

0080786c <uart_rx>:

int uart_rx(char * character_to_receive) {
  80786c:	defffe04 	addi	sp,sp,-8
  807870:	df000115 	stw	fp,4(sp)
  807874:	df000104 	addi	fp,sp,4
  807878:	e13fff15 	stw	r4,-4(fp)
    if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK) { //if data is available
  80787c:	00804074 	movhi	r2,257
  807880:	10841204 	addi	r2,r2,4168
  807884:	10800037 	ldwio	r2,0(r2)
  807888:	1080200c 	andi	r2,r2,128
  80788c:	10000826 	beq	r2,zero,8078b0 <uart_rx+0x44>
        * character_to_receive = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE); //store data
  807890:	00804074 	movhi	r2,257
  807894:	10841004 	addi	r2,r2,4160
  807898:	10800037 	ldwio	r2,0(r2)
  80789c:	1007883a 	mov	r3,r2
  8078a0:	e0bfff17 	ldw	r2,-4(fp)
  8078a4:	10c00005 	stb	r3,0(r2)
        return 1;
  8078a8:	00800044 	movi	r2,1
  8078ac:	00000106 	br	8078b4 <uart_rx+0x48>
    }
    return 0;
  8078b0:	0005883a 	mov	r2,zero
}
  8078b4:	e037883a 	mov	sp,fp
  8078b8:	df000017 	ldw	fp,0(sp)
  8078bc:	dec00104 	addi	sp,sp,4
  8078c0:	f800283a 	ret

008078c4 <__adddf3>:
  8078c4:	02c00434 	movhi	r11,16
  8078c8:	5affffc4 	addi	r11,r11,-1
  8078cc:	2806d7fa 	srli	r3,r5,31
  8078d0:	2ad4703a 	and	r10,r5,r11
  8078d4:	3ad2703a 	and	r9,r7,r11
  8078d8:	3804d53a 	srli	r2,r7,20
  8078dc:	3018d77a 	srli	r12,r6,29
  8078e0:	280ad53a 	srli	r5,r5,20
  8078e4:	501490fa 	slli	r10,r10,3
  8078e8:	2010d77a 	srli	r8,r4,29
  8078ec:	481290fa 	slli	r9,r9,3
  8078f0:	380ed7fa 	srli	r7,r7,31
  8078f4:	defffb04 	addi	sp,sp,-20
  8078f8:	dc800215 	stw	r18,8(sp)
  8078fc:	dc400115 	stw	r17,4(sp)
  807900:	dc000015 	stw	r16,0(sp)
  807904:	dfc00415 	stw	ra,16(sp)
  807908:	dcc00315 	stw	r19,12(sp)
  80790c:	1c803fcc 	andi	r18,r3,255
  807910:	2c01ffcc 	andi	r16,r5,2047
  807914:	5210b03a 	or	r8,r10,r8
  807918:	202290fa 	slli	r17,r4,3
  80791c:	1081ffcc 	andi	r2,r2,2047
  807920:	4b12b03a 	or	r9,r9,r12
  807924:	300c90fa 	slli	r6,r6,3
  807928:	91c07526 	beq	r18,r7,807b00 <__adddf3+0x23c>
  80792c:	8087c83a 	sub	r3,r16,r2
  807930:	00c0ab0e 	bge	zero,r3,807be0 <__adddf3+0x31c>
  807934:	10002a1e 	bne	r2,zero,8079e0 <__adddf3+0x11c>
  807938:	4984b03a 	or	r2,r9,r6
  80793c:	1000961e 	bne	r2,zero,807b98 <__adddf3+0x2d4>
  807940:	888001cc 	andi	r2,r17,7
  807944:	10000726 	beq	r2,zero,807964 <__adddf3+0xa0>
  807948:	888003cc 	andi	r2,r17,15
  80794c:	00c00104 	movi	r3,4
  807950:	10c00426 	beq	r2,r3,807964 <__adddf3+0xa0>
  807954:	88c7883a 	add	r3,r17,r3
  807958:	1c63803a 	cmpltu	r17,r3,r17
  80795c:	4451883a 	add	r8,r8,r17
  807960:	1823883a 	mov	r17,r3
  807964:	4080202c 	andhi	r2,r8,128
  807968:	10005926 	beq	r2,zero,807ad0 <__adddf3+0x20c>
  80796c:	84000044 	addi	r16,r16,1
  807970:	0081ffc4 	movi	r2,2047
  807974:	8080ba26 	beq	r16,r2,807c60 <__adddf3+0x39c>
  807978:	00bfe034 	movhi	r2,65408
  80797c:	10bfffc4 	addi	r2,r2,-1
  807980:	4090703a 	and	r8,r8,r2
  807984:	4004977a 	slli	r2,r8,29
  807988:	4010927a 	slli	r8,r8,9
  80798c:	8822d0fa 	srli	r17,r17,3
  807990:	8401ffcc 	andi	r16,r16,2047
  807994:	4010d33a 	srli	r8,r8,12
  807998:	9007883a 	mov	r3,r18
  80799c:	1444b03a 	or	r2,r2,r17
  8079a0:	8401ffcc 	andi	r16,r16,2047
  8079a4:	8020953a 	slli	r16,r16,20
  8079a8:	18c03fcc 	andi	r3,r3,255
  8079ac:	01000434 	movhi	r4,16
  8079b0:	213fffc4 	addi	r4,r4,-1
  8079b4:	180697fa 	slli	r3,r3,31
  8079b8:	4110703a 	and	r8,r8,r4
  8079bc:	4410b03a 	or	r8,r8,r16
  8079c0:	40c6b03a 	or	r3,r8,r3
  8079c4:	dfc00417 	ldw	ra,16(sp)
  8079c8:	dcc00317 	ldw	r19,12(sp)
  8079cc:	dc800217 	ldw	r18,8(sp)
  8079d0:	dc400117 	ldw	r17,4(sp)
  8079d4:	dc000017 	ldw	r16,0(sp)
  8079d8:	dec00504 	addi	sp,sp,20
  8079dc:	f800283a 	ret
  8079e0:	0081ffc4 	movi	r2,2047
  8079e4:	80bfd626 	beq	r16,r2,807940 <__alt_mem_onchip_mem+0xff7ff940>
  8079e8:	4a402034 	orhi	r9,r9,128
  8079ec:	00800e04 	movi	r2,56
  8079f0:	10c09f16 	blt	r2,r3,807c70 <__adddf3+0x3ac>
  8079f4:	008007c4 	movi	r2,31
  8079f8:	10c0c216 	blt	r2,r3,807d04 <__adddf3+0x440>
  8079fc:	00800804 	movi	r2,32
  807a00:	10c5c83a 	sub	r2,r2,r3
  807a04:	488a983a 	sll	r5,r9,r2
  807a08:	30c8d83a 	srl	r4,r6,r3
  807a0c:	3084983a 	sll	r2,r6,r2
  807a10:	48c6d83a 	srl	r3,r9,r3
  807a14:	290cb03a 	or	r6,r5,r4
  807a18:	1004c03a 	cmpne	r2,r2,zero
  807a1c:	308cb03a 	or	r6,r6,r2
  807a20:	898dc83a 	sub	r6,r17,r6
  807a24:	89a3803a 	cmpltu	r17,r17,r6
  807a28:	40d1c83a 	sub	r8,r8,r3
  807a2c:	4451c83a 	sub	r8,r8,r17
  807a30:	3023883a 	mov	r17,r6
  807a34:	4080202c 	andhi	r2,r8,128
  807a38:	10002326 	beq	r2,zero,807ac8 <__adddf3+0x204>
  807a3c:	04c02034 	movhi	r19,128
  807a40:	9cffffc4 	addi	r19,r19,-1
  807a44:	44e6703a 	and	r19,r8,r19
  807a48:	98007626 	beq	r19,zero,807c24 <__adddf3+0x360>
  807a4c:	9809883a 	mov	r4,r19
  807a50:	0808d180 	call	808d18 <__clzsi2>
  807a54:	10fffe04 	addi	r3,r2,-8
  807a58:	010007c4 	movi	r4,31
  807a5c:	20c07716 	blt	r4,r3,807c3c <__adddf3+0x378>
  807a60:	00800804 	movi	r2,32
  807a64:	10c5c83a 	sub	r2,r2,r3
  807a68:	8884d83a 	srl	r2,r17,r2
  807a6c:	98d0983a 	sll	r8,r19,r3
  807a70:	88e2983a 	sll	r17,r17,r3
  807a74:	1204b03a 	or	r2,r2,r8
  807a78:	1c007416 	blt	r3,r16,807c4c <__adddf3+0x388>
  807a7c:	1c21c83a 	sub	r16,r3,r16
  807a80:	82000044 	addi	r8,r16,1
  807a84:	00c007c4 	movi	r3,31
  807a88:	1a009116 	blt	r3,r8,807cd0 <__adddf3+0x40c>
  807a8c:	00c00804 	movi	r3,32
  807a90:	1a07c83a 	sub	r3,r3,r8
  807a94:	8a08d83a 	srl	r4,r17,r8
  807a98:	88e2983a 	sll	r17,r17,r3
  807a9c:	10c6983a 	sll	r3,r2,r3
  807aa0:	1210d83a 	srl	r8,r2,r8
  807aa4:	8804c03a 	cmpne	r2,r17,zero
  807aa8:	1906b03a 	or	r3,r3,r4
  807aac:	18a2b03a 	or	r17,r3,r2
  807ab0:	0021883a 	mov	r16,zero
  807ab4:	003fa206 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807ab8:	1890b03a 	or	r8,r3,r2
  807abc:	40017d26 	beq	r8,zero,8080b4 <__adddf3+0x7f0>
  807ac0:	1011883a 	mov	r8,r2
  807ac4:	1823883a 	mov	r17,r3
  807ac8:	888001cc 	andi	r2,r17,7
  807acc:	103f9e1e 	bne	r2,zero,807948 <__alt_mem_onchip_mem+0xff7ff948>
  807ad0:	4004977a 	slli	r2,r8,29
  807ad4:	8822d0fa 	srli	r17,r17,3
  807ad8:	4010d0fa 	srli	r8,r8,3
  807adc:	9007883a 	mov	r3,r18
  807ae0:	1444b03a 	or	r2,r2,r17
  807ae4:	0101ffc4 	movi	r4,2047
  807ae8:	81002426 	beq	r16,r4,807b7c <__adddf3+0x2b8>
  807aec:	8120703a 	and	r16,r16,r4
  807af0:	01000434 	movhi	r4,16
  807af4:	213fffc4 	addi	r4,r4,-1
  807af8:	4110703a 	and	r8,r8,r4
  807afc:	003fa806 	br	8079a0 <__alt_mem_onchip_mem+0xff7ff9a0>
  807b00:	8089c83a 	sub	r4,r16,r2
  807b04:	01005e0e 	bge	zero,r4,807c80 <__adddf3+0x3bc>
  807b08:	10002b26 	beq	r2,zero,807bb8 <__adddf3+0x2f4>
  807b0c:	0081ffc4 	movi	r2,2047
  807b10:	80bf8b26 	beq	r16,r2,807940 <__alt_mem_onchip_mem+0xff7ff940>
  807b14:	4a402034 	orhi	r9,r9,128
  807b18:	00800e04 	movi	r2,56
  807b1c:	1100a40e 	bge	r2,r4,807db0 <__adddf3+0x4ec>
  807b20:	498cb03a 	or	r6,r9,r6
  807b24:	300ac03a 	cmpne	r5,r6,zero
  807b28:	0013883a 	mov	r9,zero
  807b2c:	2c4b883a 	add	r5,r5,r17
  807b30:	2c63803a 	cmpltu	r17,r5,r17
  807b34:	4a11883a 	add	r8,r9,r8
  807b38:	8a11883a 	add	r8,r17,r8
  807b3c:	2823883a 	mov	r17,r5
  807b40:	4080202c 	andhi	r2,r8,128
  807b44:	103fe026 	beq	r2,zero,807ac8 <__alt_mem_onchip_mem+0xff7ffac8>
  807b48:	84000044 	addi	r16,r16,1
  807b4c:	0081ffc4 	movi	r2,2047
  807b50:	8080d226 	beq	r16,r2,807e9c <__adddf3+0x5d8>
  807b54:	00bfe034 	movhi	r2,65408
  807b58:	10bfffc4 	addi	r2,r2,-1
  807b5c:	4090703a 	and	r8,r8,r2
  807b60:	880ad07a 	srli	r5,r17,1
  807b64:	400897fa 	slli	r4,r8,31
  807b68:	88c0004c 	andi	r3,r17,1
  807b6c:	28e2b03a 	or	r17,r5,r3
  807b70:	4010d07a 	srli	r8,r8,1
  807b74:	2462b03a 	or	r17,r4,r17
  807b78:	003f7106 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807b7c:	4088b03a 	or	r4,r8,r2
  807b80:	20014526 	beq	r4,zero,808098 <__adddf3+0x7d4>
  807b84:	01000434 	movhi	r4,16
  807b88:	42000234 	orhi	r8,r8,8
  807b8c:	213fffc4 	addi	r4,r4,-1
  807b90:	4110703a 	and	r8,r8,r4
  807b94:	003f8206 	br	8079a0 <__alt_mem_onchip_mem+0xff7ff9a0>
  807b98:	18ffffc4 	addi	r3,r3,-1
  807b9c:	1800491e 	bne	r3,zero,807cc4 <__adddf3+0x400>
  807ba0:	898bc83a 	sub	r5,r17,r6
  807ba4:	8963803a 	cmpltu	r17,r17,r5
  807ba8:	4251c83a 	sub	r8,r8,r9
  807bac:	4451c83a 	sub	r8,r8,r17
  807bb0:	2823883a 	mov	r17,r5
  807bb4:	003f9f06 	br	807a34 <__alt_mem_onchip_mem+0xff7ffa34>
  807bb8:	4984b03a 	or	r2,r9,r6
  807bbc:	103f6026 	beq	r2,zero,807940 <__alt_mem_onchip_mem+0xff7ff940>
  807bc0:	213fffc4 	addi	r4,r4,-1
  807bc4:	2000931e 	bne	r4,zero,807e14 <__adddf3+0x550>
  807bc8:	898d883a 	add	r6,r17,r6
  807bcc:	3463803a 	cmpltu	r17,r6,r17
  807bd0:	4251883a 	add	r8,r8,r9
  807bd4:	8a11883a 	add	r8,r17,r8
  807bd8:	3023883a 	mov	r17,r6
  807bdc:	003fd806 	br	807b40 <__alt_mem_onchip_mem+0xff7ffb40>
  807be0:	1800541e 	bne	r3,zero,807d34 <__adddf3+0x470>
  807be4:	80800044 	addi	r2,r16,1
  807be8:	1081ffcc 	andi	r2,r2,2047
  807bec:	00c00044 	movi	r3,1
  807bf0:	1880a00e 	bge	r3,r2,807e74 <__adddf3+0x5b0>
  807bf4:	8989c83a 	sub	r4,r17,r6
  807bf8:	8905803a 	cmpltu	r2,r17,r4
  807bfc:	4267c83a 	sub	r19,r8,r9
  807c00:	98a7c83a 	sub	r19,r19,r2
  807c04:	9880202c 	andhi	r2,r19,128
  807c08:	10006326 	beq	r2,zero,807d98 <__adddf3+0x4d4>
  807c0c:	3463c83a 	sub	r17,r6,r17
  807c10:	4a07c83a 	sub	r3,r9,r8
  807c14:	344d803a 	cmpltu	r6,r6,r17
  807c18:	19a7c83a 	sub	r19,r3,r6
  807c1c:	3825883a 	mov	r18,r7
  807c20:	983f8a1e 	bne	r19,zero,807a4c <__alt_mem_onchip_mem+0xff7ffa4c>
  807c24:	8809883a 	mov	r4,r17
  807c28:	0808d180 	call	808d18 <__clzsi2>
  807c2c:	10800804 	addi	r2,r2,32
  807c30:	10fffe04 	addi	r3,r2,-8
  807c34:	010007c4 	movi	r4,31
  807c38:	20ff890e 	bge	r4,r3,807a60 <__alt_mem_onchip_mem+0xff7ffa60>
  807c3c:	10bff604 	addi	r2,r2,-40
  807c40:	8884983a 	sll	r2,r17,r2
  807c44:	0023883a 	mov	r17,zero
  807c48:	1c3f8c0e 	bge	r3,r16,807a7c <__alt_mem_onchip_mem+0xff7ffa7c>
  807c4c:	023fe034 	movhi	r8,65408
  807c50:	423fffc4 	addi	r8,r8,-1
  807c54:	80e1c83a 	sub	r16,r16,r3
  807c58:	1210703a 	and	r8,r2,r8
  807c5c:	003f3806 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807c60:	9007883a 	mov	r3,r18
  807c64:	0011883a 	mov	r8,zero
  807c68:	0005883a 	mov	r2,zero
  807c6c:	003f4c06 	br	8079a0 <__alt_mem_onchip_mem+0xff7ff9a0>
  807c70:	498cb03a 	or	r6,r9,r6
  807c74:	300cc03a 	cmpne	r6,r6,zero
  807c78:	0007883a 	mov	r3,zero
  807c7c:	003f6806 	br	807a20 <__alt_mem_onchip_mem+0xff7ffa20>
  807c80:	20009c1e 	bne	r4,zero,807ef4 <__adddf3+0x630>
  807c84:	80800044 	addi	r2,r16,1
  807c88:	1141ffcc 	andi	r5,r2,2047
  807c8c:	01000044 	movi	r4,1
  807c90:	2140670e 	bge	r4,r5,807e30 <__adddf3+0x56c>
  807c94:	0101ffc4 	movi	r4,2047
  807c98:	11007f26 	beq	r2,r4,807e98 <__adddf3+0x5d4>
  807c9c:	898d883a 	add	r6,r17,r6
  807ca0:	4247883a 	add	r3,r8,r9
  807ca4:	3451803a 	cmpltu	r8,r6,r17
  807ca8:	40d1883a 	add	r8,r8,r3
  807cac:	402297fa 	slli	r17,r8,31
  807cb0:	300cd07a 	srli	r6,r6,1
  807cb4:	4010d07a 	srli	r8,r8,1
  807cb8:	1021883a 	mov	r16,r2
  807cbc:	89a2b03a 	or	r17,r17,r6
  807cc0:	003f1f06 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807cc4:	0081ffc4 	movi	r2,2047
  807cc8:	80bf481e 	bne	r16,r2,8079ec <__alt_mem_onchip_mem+0xff7ff9ec>
  807ccc:	003f1c06 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807cd0:	843ff844 	addi	r16,r16,-31
  807cd4:	01000804 	movi	r4,32
  807cd8:	1406d83a 	srl	r3,r2,r16
  807cdc:	41005026 	beq	r8,r4,807e20 <__adddf3+0x55c>
  807ce0:	01001004 	movi	r4,64
  807ce4:	2211c83a 	sub	r8,r4,r8
  807ce8:	1204983a 	sll	r2,r2,r8
  807cec:	88a2b03a 	or	r17,r17,r2
  807cf0:	8822c03a 	cmpne	r17,r17,zero
  807cf4:	1c62b03a 	or	r17,r3,r17
  807cf8:	0011883a 	mov	r8,zero
  807cfc:	0021883a 	mov	r16,zero
  807d00:	003f7106 	br	807ac8 <__alt_mem_onchip_mem+0xff7ffac8>
  807d04:	193ff804 	addi	r4,r3,-32
  807d08:	00800804 	movi	r2,32
  807d0c:	4908d83a 	srl	r4,r9,r4
  807d10:	18804526 	beq	r3,r2,807e28 <__adddf3+0x564>
  807d14:	00801004 	movi	r2,64
  807d18:	10c5c83a 	sub	r2,r2,r3
  807d1c:	4886983a 	sll	r3,r9,r2
  807d20:	198cb03a 	or	r6,r3,r6
  807d24:	300cc03a 	cmpne	r6,r6,zero
  807d28:	218cb03a 	or	r6,r4,r6
  807d2c:	0007883a 	mov	r3,zero
  807d30:	003f3b06 	br	807a20 <__alt_mem_onchip_mem+0xff7ffa20>
  807d34:	80002a26 	beq	r16,zero,807de0 <__adddf3+0x51c>
  807d38:	0101ffc4 	movi	r4,2047
  807d3c:	11006826 	beq	r2,r4,807ee0 <__adddf3+0x61c>
  807d40:	00c7c83a 	sub	r3,zero,r3
  807d44:	42002034 	orhi	r8,r8,128
  807d48:	01000e04 	movi	r4,56
  807d4c:	20c07c16 	blt	r4,r3,807f40 <__adddf3+0x67c>
  807d50:	010007c4 	movi	r4,31
  807d54:	20c0da16 	blt	r4,r3,8080c0 <__adddf3+0x7fc>
  807d58:	01000804 	movi	r4,32
  807d5c:	20c9c83a 	sub	r4,r4,r3
  807d60:	4114983a 	sll	r10,r8,r4
  807d64:	88cad83a 	srl	r5,r17,r3
  807d68:	8908983a 	sll	r4,r17,r4
  807d6c:	40c6d83a 	srl	r3,r8,r3
  807d70:	5162b03a 	or	r17,r10,r5
  807d74:	2008c03a 	cmpne	r4,r4,zero
  807d78:	8922b03a 	or	r17,r17,r4
  807d7c:	3463c83a 	sub	r17,r6,r17
  807d80:	48c7c83a 	sub	r3,r9,r3
  807d84:	344d803a 	cmpltu	r6,r6,r17
  807d88:	1991c83a 	sub	r8,r3,r6
  807d8c:	1021883a 	mov	r16,r2
  807d90:	3825883a 	mov	r18,r7
  807d94:	003f2706 	br	807a34 <__alt_mem_onchip_mem+0xff7ffa34>
  807d98:	24d0b03a 	or	r8,r4,r19
  807d9c:	40001b1e 	bne	r8,zero,807e0c <__adddf3+0x548>
  807da0:	0005883a 	mov	r2,zero
  807da4:	0007883a 	mov	r3,zero
  807da8:	0021883a 	mov	r16,zero
  807dac:	003f4d06 	br	807ae4 <__alt_mem_onchip_mem+0xff7ffae4>
  807db0:	008007c4 	movi	r2,31
  807db4:	11003c16 	blt	r2,r4,807ea8 <__adddf3+0x5e4>
  807db8:	00800804 	movi	r2,32
  807dbc:	1105c83a 	sub	r2,r2,r4
  807dc0:	488e983a 	sll	r7,r9,r2
  807dc4:	310ad83a 	srl	r5,r6,r4
  807dc8:	3084983a 	sll	r2,r6,r2
  807dcc:	4912d83a 	srl	r9,r9,r4
  807dd0:	394ab03a 	or	r5,r7,r5
  807dd4:	1004c03a 	cmpne	r2,r2,zero
  807dd8:	288ab03a 	or	r5,r5,r2
  807ddc:	003f5306 	br	807b2c <__alt_mem_onchip_mem+0xff7ffb2c>
  807de0:	4448b03a 	or	r4,r8,r17
  807de4:	20003e26 	beq	r4,zero,807ee0 <__adddf3+0x61c>
  807de8:	00c6303a 	nor	r3,zero,r3
  807dec:	18003a1e 	bne	r3,zero,807ed8 <__adddf3+0x614>
  807df0:	3463c83a 	sub	r17,r6,r17
  807df4:	4a07c83a 	sub	r3,r9,r8
  807df8:	344d803a 	cmpltu	r6,r6,r17
  807dfc:	1991c83a 	sub	r8,r3,r6
  807e00:	1021883a 	mov	r16,r2
  807e04:	3825883a 	mov	r18,r7
  807e08:	003f0a06 	br	807a34 <__alt_mem_onchip_mem+0xff7ffa34>
  807e0c:	2023883a 	mov	r17,r4
  807e10:	003f0d06 	br	807a48 <__alt_mem_onchip_mem+0xff7ffa48>
  807e14:	0081ffc4 	movi	r2,2047
  807e18:	80bf3f1e 	bne	r16,r2,807b18 <__alt_mem_onchip_mem+0xff7ffb18>
  807e1c:	003ec806 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807e20:	0005883a 	mov	r2,zero
  807e24:	003fb106 	br	807cec <__alt_mem_onchip_mem+0xff7ffcec>
  807e28:	0007883a 	mov	r3,zero
  807e2c:	003fbc06 	br	807d20 <__alt_mem_onchip_mem+0xff7ffd20>
  807e30:	4444b03a 	or	r2,r8,r17
  807e34:	8000871e 	bne	r16,zero,808054 <__adddf3+0x790>
  807e38:	1000ba26 	beq	r2,zero,808124 <__adddf3+0x860>
  807e3c:	4984b03a 	or	r2,r9,r6
  807e40:	103ebf26 	beq	r2,zero,807940 <__alt_mem_onchip_mem+0xff7ff940>
  807e44:	8985883a 	add	r2,r17,r6
  807e48:	4247883a 	add	r3,r8,r9
  807e4c:	1451803a 	cmpltu	r8,r2,r17
  807e50:	40d1883a 	add	r8,r8,r3
  807e54:	40c0202c 	andhi	r3,r8,128
  807e58:	1023883a 	mov	r17,r2
  807e5c:	183f1a26 	beq	r3,zero,807ac8 <__alt_mem_onchip_mem+0xff7ffac8>
  807e60:	00bfe034 	movhi	r2,65408
  807e64:	10bfffc4 	addi	r2,r2,-1
  807e68:	2021883a 	mov	r16,r4
  807e6c:	4090703a 	and	r8,r8,r2
  807e70:	003eb306 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807e74:	4444b03a 	or	r2,r8,r17
  807e78:	8000291e 	bne	r16,zero,807f20 <__adddf3+0x65c>
  807e7c:	10004b1e 	bne	r2,zero,807fac <__adddf3+0x6e8>
  807e80:	4990b03a 	or	r8,r9,r6
  807e84:	40008b26 	beq	r8,zero,8080b4 <__adddf3+0x7f0>
  807e88:	4811883a 	mov	r8,r9
  807e8c:	3023883a 	mov	r17,r6
  807e90:	3825883a 	mov	r18,r7
  807e94:	003eaa06 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807e98:	1021883a 	mov	r16,r2
  807e9c:	0011883a 	mov	r8,zero
  807ea0:	0005883a 	mov	r2,zero
  807ea4:	003f0f06 	br	807ae4 <__alt_mem_onchip_mem+0xff7ffae4>
  807ea8:	217ff804 	addi	r5,r4,-32
  807eac:	00800804 	movi	r2,32
  807eb0:	494ad83a 	srl	r5,r9,r5
  807eb4:	20807d26 	beq	r4,r2,8080ac <__adddf3+0x7e8>
  807eb8:	00801004 	movi	r2,64
  807ebc:	1109c83a 	sub	r4,r2,r4
  807ec0:	4912983a 	sll	r9,r9,r4
  807ec4:	498cb03a 	or	r6,r9,r6
  807ec8:	300cc03a 	cmpne	r6,r6,zero
  807ecc:	298ab03a 	or	r5,r5,r6
  807ed0:	0013883a 	mov	r9,zero
  807ed4:	003f1506 	br	807b2c <__alt_mem_onchip_mem+0xff7ffb2c>
  807ed8:	0101ffc4 	movi	r4,2047
  807edc:	113f9a1e 	bne	r2,r4,807d48 <__alt_mem_onchip_mem+0xff7ffd48>
  807ee0:	4811883a 	mov	r8,r9
  807ee4:	3023883a 	mov	r17,r6
  807ee8:	1021883a 	mov	r16,r2
  807eec:	3825883a 	mov	r18,r7
  807ef0:	003e9306 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807ef4:	8000161e 	bne	r16,zero,807f50 <__adddf3+0x68c>
  807ef8:	444ab03a 	or	r5,r8,r17
  807efc:	28005126 	beq	r5,zero,808044 <__adddf3+0x780>
  807f00:	0108303a 	nor	r4,zero,r4
  807f04:	20004d1e 	bne	r4,zero,80803c <__adddf3+0x778>
  807f08:	89a3883a 	add	r17,r17,r6
  807f0c:	4253883a 	add	r9,r8,r9
  807f10:	898d803a 	cmpltu	r6,r17,r6
  807f14:	3251883a 	add	r8,r6,r9
  807f18:	1021883a 	mov	r16,r2
  807f1c:	003f0806 	br	807b40 <__alt_mem_onchip_mem+0xff7ffb40>
  807f20:	1000301e 	bne	r2,zero,807fe4 <__adddf3+0x720>
  807f24:	4984b03a 	or	r2,r9,r6
  807f28:	10007126 	beq	r2,zero,8080f0 <__adddf3+0x82c>
  807f2c:	4811883a 	mov	r8,r9
  807f30:	3023883a 	mov	r17,r6
  807f34:	3825883a 	mov	r18,r7
  807f38:	0401ffc4 	movi	r16,2047
  807f3c:	003e8006 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807f40:	4462b03a 	or	r17,r8,r17
  807f44:	8822c03a 	cmpne	r17,r17,zero
  807f48:	0007883a 	mov	r3,zero
  807f4c:	003f8b06 	br	807d7c <__alt_mem_onchip_mem+0xff7ffd7c>
  807f50:	0141ffc4 	movi	r5,2047
  807f54:	11403b26 	beq	r2,r5,808044 <__adddf3+0x780>
  807f58:	0109c83a 	sub	r4,zero,r4
  807f5c:	42002034 	orhi	r8,r8,128
  807f60:	01400e04 	movi	r5,56
  807f64:	29006716 	blt	r5,r4,808104 <__adddf3+0x840>
  807f68:	014007c4 	movi	r5,31
  807f6c:	29007016 	blt	r5,r4,808130 <__adddf3+0x86c>
  807f70:	01400804 	movi	r5,32
  807f74:	290bc83a 	sub	r5,r5,r4
  807f78:	4154983a 	sll	r10,r8,r5
  807f7c:	890ed83a 	srl	r7,r17,r4
  807f80:	894a983a 	sll	r5,r17,r5
  807f84:	4108d83a 	srl	r4,r8,r4
  807f88:	51e2b03a 	or	r17,r10,r7
  807f8c:	280ac03a 	cmpne	r5,r5,zero
  807f90:	8962b03a 	or	r17,r17,r5
  807f94:	89a3883a 	add	r17,r17,r6
  807f98:	2253883a 	add	r9,r4,r9
  807f9c:	898d803a 	cmpltu	r6,r17,r6
  807fa0:	3251883a 	add	r8,r6,r9
  807fa4:	1021883a 	mov	r16,r2
  807fa8:	003ee506 	br	807b40 <__alt_mem_onchip_mem+0xff7ffb40>
  807fac:	4984b03a 	or	r2,r9,r6
  807fb0:	103e6326 	beq	r2,zero,807940 <__alt_mem_onchip_mem+0xff7ff940>
  807fb4:	8987c83a 	sub	r3,r17,r6
  807fb8:	88c9803a 	cmpltu	r4,r17,r3
  807fbc:	4245c83a 	sub	r2,r8,r9
  807fc0:	1105c83a 	sub	r2,r2,r4
  807fc4:	1100202c 	andhi	r4,r2,128
  807fc8:	203ebb26 	beq	r4,zero,807ab8 <__alt_mem_onchip_mem+0xff7ffab8>
  807fcc:	3463c83a 	sub	r17,r6,r17
  807fd0:	4a07c83a 	sub	r3,r9,r8
  807fd4:	344d803a 	cmpltu	r6,r6,r17
  807fd8:	1991c83a 	sub	r8,r3,r6
  807fdc:	3825883a 	mov	r18,r7
  807fe0:	003e5706 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  807fe4:	4984b03a 	or	r2,r9,r6
  807fe8:	10002e26 	beq	r2,zero,8080a4 <__adddf3+0x7e0>
  807fec:	4004d0fa 	srli	r2,r8,3
  807ff0:	8822d0fa 	srli	r17,r17,3
  807ff4:	4010977a 	slli	r8,r8,29
  807ff8:	10c0022c 	andhi	r3,r2,8
  807ffc:	4462b03a 	or	r17,r8,r17
  808000:	18000826 	beq	r3,zero,808024 <__adddf3+0x760>
  808004:	4808d0fa 	srli	r4,r9,3
  808008:	20c0022c 	andhi	r3,r4,8
  80800c:	1800051e 	bne	r3,zero,808024 <__adddf3+0x760>
  808010:	300cd0fa 	srli	r6,r6,3
  808014:	4806977a 	slli	r3,r9,29
  808018:	2005883a 	mov	r2,r4
  80801c:	3825883a 	mov	r18,r7
  808020:	19a2b03a 	or	r17,r3,r6
  808024:	8810d77a 	srli	r8,r17,29
  808028:	100490fa 	slli	r2,r2,3
  80802c:	882290fa 	slli	r17,r17,3
  808030:	0401ffc4 	movi	r16,2047
  808034:	4090b03a 	or	r8,r8,r2
  808038:	003e4106 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  80803c:	0141ffc4 	movi	r5,2047
  808040:	117fc71e 	bne	r2,r5,807f60 <__alt_mem_onchip_mem+0xff7fff60>
  808044:	4811883a 	mov	r8,r9
  808048:	3023883a 	mov	r17,r6
  80804c:	1021883a 	mov	r16,r2
  808050:	003e3b06 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  808054:	10002f26 	beq	r2,zero,808114 <__adddf3+0x850>
  808058:	4984b03a 	or	r2,r9,r6
  80805c:	10001126 	beq	r2,zero,8080a4 <__adddf3+0x7e0>
  808060:	4004d0fa 	srli	r2,r8,3
  808064:	8822d0fa 	srli	r17,r17,3
  808068:	4010977a 	slli	r8,r8,29
  80806c:	10c0022c 	andhi	r3,r2,8
  808070:	4462b03a 	or	r17,r8,r17
  808074:	183feb26 	beq	r3,zero,808024 <__alt_mem_onchip_mem+0xff800024>
  808078:	4808d0fa 	srli	r4,r9,3
  80807c:	20c0022c 	andhi	r3,r4,8
  808080:	183fe81e 	bne	r3,zero,808024 <__alt_mem_onchip_mem+0xff800024>
  808084:	300cd0fa 	srli	r6,r6,3
  808088:	4806977a 	slli	r3,r9,29
  80808c:	2005883a 	mov	r2,r4
  808090:	19a2b03a 	or	r17,r3,r6
  808094:	003fe306 	br	808024 <__alt_mem_onchip_mem+0xff800024>
  808098:	0011883a 	mov	r8,zero
  80809c:	0005883a 	mov	r2,zero
  8080a0:	003e3f06 	br	8079a0 <__alt_mem_onchip_mem+0xff7ff9a0>
  8080a4:	0401ffc4 	movi	r16,2047
  8080a8:	003e2506 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  8080ac:	0013883a 	mov	r9,zero
  8080b0:	003f8406 	br	807ec4 <__alt_mem_onchip_mem+0xff7ffec4>
  8080b4:	0005883a 	mov	r2,zero
  8080b8:	0007883a 	mov	r3,zero
  8080bc:	003e8906 	br	807ae4 <__alt_mem_onchip_mem+0xff7ffae4>
  8080c0:	197ff804 	addi	r5,r3,-32
  8080c4:	01000804 	movi	r4,32
  8080c8:	414ad83a 	srl	r5,r8,r5
  8080cc:	19002426 	beq	r3,r4,808160 <__adddf3+0x89c>
  8080d0:	01001004 	movi	r4,64
  8080d4:	20c7c83a 	sub	r3,r4,r3
  8080d8:	40c6983a 	sll	r3,r8,r3
  8080dc:	1c46b03a 	or	r3,r3,r17
  8080e0:	1806c03a 	cmpne	r3,r3,zero
  8080e4:	28e2b03a 	or	r17,r5,r3
  8080e8:	0007883a 	mov	r3,zero
  8080ec:	003f2306 	br	807d7c <__alt_mem_onchip_mem+0xff7ffd7c>
  8080f0:	0007883a 	mov	r3,zero
  8080f4:	5811883a 	mov	r8,r11
  8080f8:	00bfffc4 	movi	r2,-1
  8080fc:	0401ffc4 	movi	r16,2047
  808100:	003e7806 	br	807ae4 <__alt_mem_onchip_mem+0xff7ffae4>
  808104:	4462b03a 	or	r17,r8,r17
  808108:	8822c03a 	cmpne	r17,r17,zero
  80810c:	0009883a 	mov	r4,zero
  808110:	003fa006 	br	807f94 <__alt_mem_onchip_mem+0xff7fff94>
  808114:	4811883a 	mov	r8,r9
  808118:	3023883a 	mov	r17,r6
  80811c:	0401ffc4 	movi	r16,2047
  808120:	003e0706 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  808124:	4811883a 	mov	r8,r9
  808128:	3023883a 	mov	r17,r6
  80812c:	003e0406 	br	807940 <__alt_mem_onchip_mem+0xff7ff940>
  808130:	21fff804 	addi	r7,r4,-32
  808134:	01400804 	movi	r5,32
  808138:	41ced83a 	srl	r7,r8,r7
  80813c:	21400a26 	beq	r4,r5,808168 <__adddf3+0x8a4>
  808140:	01401004 	movi	r5,64
  808144:	2909c83a 	sub	r4,r5,r4
  808148:	4108983a 	sll	r4,r8,r4
  80814c:	2448b03a 	or	r4,r4,r17
  808150:	2008c03a 	cmpne	r4,r4,zero
  808154:	3922b03a 	or	r17,r7,r4
  808158:	0009883a 	mov	r4,zero
  80815c:	003f8d06 	br	807f94 <__alt_mem_onchip_mem+0xff7fff94>
  808160:	0007883a 	mov	r3,zero
  808164:	003fdd06 	br	8080dc <__alt_mem_onchip_mem+0xff8000dc>
  808168:	0009883a 	mov	r4,zero
  80816c:	003ff706 	br	80814c <__alt_mem_onchip_mem+0xff80014c>

00808170 <__gedf2>:
  808170:	2804d53a 	srli	r2,r5,20
  808174:	3806d53a 	srli	r3,r7,20
  808178:	02000434 	movhi	r8,16
  80817c:	423fffc4 	addi	r8,r8,-1
  808180:	1081ffcc 	andi	r2,r2,2047
  808184:	0241ffc4 	movi	r9,2047
  808188:	2a14703a 	and	r10,r5,r8
  80818c:	18c1ffcc 	andi	r3,r3,2047
  808190:	3a10703a 	and	r8,r7,r8
  808194:	280ad7fa 	srli	r5,r5,31
  808198:	380ed7fa 	srli	r7,r7,31
  80819c:	12401d26 	beq	r2,r9,808214 <__gedf2+0xa4>
  8081a0:	0241ffc4 	movi	r9,2047
  8081a4:	1a401226 	beq	r3,r9,8081f0 <__gedf2+0x80>
  8081a8:	1000081e 	bne	r2,zero,8081cc <__gedf2+0x5c>
  8081ac:	2296b03a 	or	r11,r4,r10
  8081b0:	5813003a 	cmpeq	r9,r11,zero
  8081b4:	1800091e 	bne	r3,zero,8081dc <__gedf2+0x6c>
  8081b8:	3218b03a 	or	r12,r6,r8
  8081bc:	6000071e 	bne	r12,zero,8081dc <__gedf2+0x6c>
  8081c0:	0005883a 	mov	r2,zero
  8081c4:	5800101e 	bne	r11,zero,808208 <__gedf2+0x98>
  8081c8:	f800283a 	ret
  8081cc:	18000c1e 	bne	r3,zero,808200 <__gedf2+0x90>
  8081d0:	3212b03a 	or	r9,r6,r8
  8081d4:	48000c26 	beq	r9,zero,808208 <__gedf2+0x98>
  8081d8:	0013883a 	mov	r9,zero
  8081dc:	39c03fcc 	andi	r7,r7,255
  8081e0:	48000826 	beq	r9,zero,808204 <__gedf2+0x94>
  8081e4:	38000926 	beq	r7,zero,80820c <__gedf2+0x9c>
  8081e8:	00800044 	movi	r2,1
  8081ec:	f800283a 	ret
  8081f0:	3212b03a 	or	r9,r6,r8
  8081f4:	483fec26 	beq	r9,zero,8081a8 <__alt_mem_onchip_mem+0xff8001a8>
  8081f8:	00bfff84 	movi	r2,-2
  8081fc:	f800283a 	ret
  808200:	39c03fcc 	andi	r7,r7,255
  808204:	29c00626 	beq	r5,r7,808220 <__gedf2+0xb0>
  808208:	283ff726 	beq	r5,zero,8081e8 <__alt_mem_onchip_mem+0xff8001e8>
  80820c:	00bfffc4 	movi	r2,-1
  808210:	f800283a 	ret
  808214:	2292b03a 	or	r9,r4,r10
  808218:	483fe126 	beq	r9,zero,8081a0 <__alt_mem_onchip_mem+0xff8001a0>
  80821c:	003ff606 	br	8081f8 <__alt_mem_onchip_mem+0xff8001f8>
  808220:	18bff916 	blt	r3,r2,808208 <__alt_mem_onchip_mem+0xff800208>
  808224:	10c00316 	blt	r2,r3,808234 <__gedf2+0xc4>
  808228:	42bff736 	bltu	r8,r10,808208 <__alt_mem_onchip_mem+0xff800208>
  80822c:	52000326 	beq	r10,r8,80823c <__gedf2+0xcc>
  808230:	5200042e 	bgeu	r10,r8,808244 <__gedf2+0xd4>
  808234:	283fec1e 	bne	r5,zero,8081e8 <__alt_mem_onchip_mem+0xff8001e8>
  808238:	003ff406 	br	80820c <__alt_mem_onchip_mem+0xff80020c>
  80823c:	313ff236 	bltu	r6,r4,808208 <__alt_mem_onchip_mem+0xff800208>
  808240:	21bffc36 	bltu	r4,r6,808234 <__alt_mem_onchip_mem+0xff800234>
  808244:	0005883a 	mov	r2,zero
  808248:	f800283a 	ret

0080824c <__ledf2>:
  80824c:	2804d53a 	srli	r2,r5,20
  808250:	3810d53a 	srli	r8,r7,20
  808254:	00c00434 	movhi	r3,16
  808258:	18ffffc4 	addi	r3,r3,-1
  80825c:	1081ffcc 	andi	r2,r2,2047
  808260:	0241ffc4 	movi	r9,2047
  808264:	28d4703a 	and	r10,r5,r3
  808268:	4201ffcc 	andi	r8,r8,2047
  80826c:	38c6703a 	and	r3,r7,r3
  808270:	280ad7fa 	srli	r5,r5,31
  808274:	380ed7fa 	srli	r7,r7,31
  808278:	12401f26 	beq	r2,r9,8082f8 <__ledf2+0xac>
  80827c:	0241ffc4 	movi	r9,2047
  808280:	42401426 	beq	r8,r9,8082d4 <__ledf2+0x88>
  808284:	1000091e 	bne	r2,zero,8082ac <__ledf2+0x60>
  808288:	2296b03a 	or	r11,r4,r10
  80828c:	5813003a 	cmpeq	r9,r11,zero
  808290:	29403fcc 	andi	r5,r5,255
  808294:	40000a1e 	bne	r8,zero,8082c0 <__ledf2+0x74>
  808298:	30d8b03a 	or	r12,r6,r3
  80829c:	6000081e 	bne	r12,zero,8082c0 <__ledf2+0x74>
  8082a0:	0005883a 	mov	r2,zero
  8082a4:	5800111e 	bne	r11,zero,8082ec <__ledf2+0xa0>
  8082a8:	f800283a 	ret
  8082ac:	29403fcc 	andi	r5,r5,255
  8082b0:	40000c1e 	bne	r8,zero,8082e4 <__ledf2+0x98>
  8082b4:	30d2b03a 	or	r9,r6,r3
  8082b8:	48000c26 	beq	r9,zero,8082ec <__ledf2+0xa0>
  8082bc:	0013883a 	mov	r9,zero
  8082c0:	39c03fcc 	andi	r7,r7,255
  8082c4:	48000826 	beq	r9,zero,8082e8 <__ledf2+0x9c>
  8082c8:	38001126 	beq	r7,zero,808310 <__ledf2+0xc4>
  8082cc:	00800044 	movi	r2,1
  8082d0:	f800283a 	ret
  8082d4:	30d2b03a 	or	r9,r6,r3
  8082d8:	483fea26 	beq	r9,zero,808284 <__alt_mem_onchip_mem+0xff800284>
  8082dc:	00800084 	movi	r2,2
  8082e0:	f800283a 	ret
  8082e4:	39c03fcc 	andi	r7,r7,255
  8082e8:	39400726 	beq	r7,r5,808308 <__ledf2+0xbc>
  8082ec:	2800081e 	bne	r5,zero,808310 <__ledf2+0xc4>
  8082f0:	00800044 	movi	r2,1
  8082f4:	f800283a 	ret
  8082f8:	2292b03a 	or	r9,r4,r10
  8082fc:	483fdf26 	beq	r9,zero,80827c <__alt_mem_onchip_mem+0xff80027c>
  808300:	00800084 	movi	r2,2
  808304:	f800283a 	ret
  808308:	4080030e 	bge	r8,r2,808318 <__ledf2+0xcc>
  80830c:	383fef26 	beq	r7,zero,8082cc <__alt_mem_onchip_mem+0xff8002cc>
  808310:	00bfffc4 	movi	r2,-1
  808314:	f800283a 	ret
  808318:	123feb16 	blt	r2,r8,8082c8 <__alt_mem_onchip_mem+0xff8002c8>
  80831c:	1abff336 	bltu	r3,r10,8082ec <__alt_mem_onchip_mem+0xff8002ec>
  808320:	50c00326 	beq	r10,r3,808330 <__ledf2+0xe4>
  808324:	50c0042e 	bgeu	r10,r3,808338 <__ledf2+0xec>
  808328:	283fe81e 	bne	r5,zero,8082cc <__alt_mem_onchip_mem+0xff8002cc>
  80832c:	003ff806 	br	808310 <__alt_mem_onchip_mem+0xff800310>
  808330:	313fee36 	bltu	r6,r4,8082ec <__alt_mem_onchip_mem+0xff8002ec>
  808334:	21bffc36 	bltu	r4,r6,808328 <__alt_mem_onchip_mem+0xff800328>
  808338:	0005883a 	mov	r2,zero
  80833c:	f800283a 	ret

00808340 <__subdf3>:
  808340:	02000434 	movhi	r8,16
  808344:	423fffc4 	addi	r8,r8,-1
  808348:	defffb04 	addi	sp,sp,-20
  80834c:	2a14703a 	and	r10,r5,r8
  808350:	3812d53a 	srli	r9,r7,20
  808354:	3a10703a 	and	r8,r7,r8
  808358:	2006d77a 	srli	r3,r4,29
  80835c:	3004d77a 	srli	r2,r6,29
  808360:	dc000015 	stw	r16,0(sp)
  808364:	501490fa 	slli	r10,r10,3
  808368:	2820d53a 	srli	r16,r5,20
  80836c:	401090fa 	slli	r8,r8,3
  808370:	dc800215 	stw	r18,8(sp)
  808374:	dc400115 	stw	r17,4(sp)
  808378:	dfc00415 	stw	ra,16(sp)
  80837c:	202290fa 	slli	r17,r4,3
  808380:	dcc00315 	stw	r19,12(sp)
  808384:	4a41ffcc 	andi	r9,r9,2047
  808388:	0101ffc4 	movi	r4,2047
  80838c:	2824d7fa 	srli	r18,r5,31
  808390:	8401ffcc 	andi	r16,r16,2047
  808394:	50c6b03a 	or	r3,r10,r3
  808398:	380ed7fa 	srli	r7,r7,31
  80839c:	408ab03a 	or	r5,r8,r2
  8083a0:	300c90fa 	slli	r6,r6,3
  8083a4:	49009626 	beq	r9,r4,808600 <__subdf3+0x2c0>
  8083a8:	39c0005c 	xori	r7,r7,1
  8083ac:	8245c83a 	sub	r2,r16,r9
  8083b0:	3c807426 	beq	r7,r18,808584 <__subdf3+0x244>
  8083b4:	0080af0e 	bge	zero,r2,808674 <__subdf3+0x334>
  8083b8:	48002a1e 	bne	r9,zero,808464 <__subdf3+0x124>
  8083bc:	2988b03a 	or	r4,r5,r6
  8083c0:	20009a1e 	bne	r4,zero,80862c <__subdf3+0x2ec>
  8083c4:	888001cc 	andi	r2,r17,7
  8083c8:	10000726 	beq	r2,zero,8083e8 <__subdf3+0xa8>
  8083cc:	888003cc 	andi	r2,r17,15
  8083d0:	01000104 	movi	r4,4
  8083d4:	11000426 	beq	r2,r4,8083e8 <__subdf3+0xa8>
  8083d8:	890b883a 	add	r5,r17,r4
  8083dc:	2c63803a 	cmpltu	r17,r5,r17
  8083e0:	1c47883a 	add	r3,r3,r17
  8083e4:	2823883a 	mov	r17,r5
  8083e8:	1880202c 	andhi	r2,r3,128
  8083ec:	10005926 	beq	r2,zero,808554 <__subdf3+0x214>
  8083f0:	84000044 	addi	r16,r16,1
  8083f4:	0081ffc4 	movi	r2,2047
  8083f8:	8080be26 	beq	r16,r2,8086f4 <__subdf3+0x3b4>
  8083fc:	017fe034 	movhi	r5,65408
  808400:	297fffc4 	addi	r5,r5,-1
  808404:	1946703a 	and	r3,r3,r5
  808408:	1804977a 	slli	r2,r3,29
  80840c:	1806927a 	slli	r3,r3,9
  808410:	8822d0fa 	srli	r17,r17,3
  808414:	8401ffcc 	andi	r16,r16,2047
  808418:	180ad33a 	srli	r5,r3,12
  80841c:	9100004c 	andi	r4,r18,1
  808420:	1444b03a 	or	r2,r2,r17
  808424:	80c1ffcc 	andi	r3,r16,2047
  808428:	1820953a 	slli	r16,r3,20
  80842c:	20c03fcc 	andi	r3,r4,255
  808430:	180897fa 	slli	r4,r3,31
  808434:	00c00434 	movhi	r3,16
  808438:	18ffffc4 	addi	r3,r3,-1
  80843c:	28c6703a 	and	r3,r5,r3
  808440:	1c06b03a 	or	r3,r3,r16
  808444:	1906b03a 	or	r3,r3,r4
  808448:	dfc00417 	ldw	ra,16(sp)
  80844c:	dcc00317 	ldw	r19,12(sp)
  808450:	dc800217 	ldw	r18,8(sp)
  808454:	dc400117 	ldw	r17,4(sp)
  808458:	dc000017 	ldw	r16,0(sp)
  80845c:	dec00504 	addi	sp,sp,20
  808460:	f800283a 	ret
  808464:	0101ffc4 	movi	r4,2047
  808468:	813fd626 	beq	r16,r4,8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  80846c:	29402034 	orhi	r5,r5,128
  808470:	01000e04 	movi	r4,56
  808474:	2080a316 	blt	r4,r2,808704 <__subdf3+0x3c4>
  808478:	010007c4 	movi	r4,31
  80847c:	2080c616 	blt	r4,r2,808798 <__subdf3+0x458>
  808480:	01000804 	movi	r4,32
  808484:	2089c83a 	sub	r4,r4,r2
  808488:	2910983a 	sll	r8,r5,r4
  80848c:	308ed83a 	srl	r7,r6,r2
  808490:	3108983a 	sll	r4,r6,r4
  808494:	2884d83a 	srl	r2,r5,r2
  808498:	41ccb03a 	or	r6,r8,r7
  80849c:	2008c03a 	cmpne	r4,r4,zero
  8084a0:	310cb03a 	or	r6,r6,r4
  8084a4:	898dc83a 	sub	r6,r17,r6
  8084a8:	89a3803a 	cmpltu	r17,r17,r6
  8084ac:	1887c83a 	sub	r3,r3,r2
  8084b0:	1c47c83a 	sub	r3,r3,r17
  8084b4:	3023883a 	mov	r17,r6
  8084b8:	1880202c 	andhi	r2,r3,128
  8084bc:	10002326 	beq	r2,zero,80854c <__subdf3+0x20c>
  8084c0:	04c02034 	movhi	r19,128
  8084c4:	9cffffc4 	addi	r19,r19,-1
  8084c8:	1ce6703a 	and	r19,r3,r19
  8084cc:	98007a26 	beq	r19,zero,8086b8 <__subdf3+0x378>
  8084d0:	9809883a 	mov	r4,r19
  8084d4:	0808d180 	call	808d18 <__clzsi2>
  8084d8:	113ffe04 	addi	r4,r2,-8
  8084dc:	00c007c4 	movi	r3,31
  8084e0:	19007b16 	blt	r3,r4,8086d0 <__subdf3+0x390>
  8084e4:	00800804 	movi	r2,32
  8084e8:	1105c83a 	sub	r2,r2,r4
  8084ec:	8884d83a 	srl	r2,r17,r2
  8084f0:	9906983a 	sll	r3,r19,r4
  8084f4:	8922983a 	sll	r17,r17,r4
  8084f8:	10c4b03a 	or	r2,r2,r3
  8084fc:	24007816 	blt	r4,r16,8086e0 <__subdf3+0x3a0>
  808500:	2421c83a 	sub	r16,r4,r16
  808504:	80c00044 	addi	r3,r16,1
  808508:	010007c4 	movi	r4,31
  80850c:	20c09516 	blt	r4,r3,808764 <__subdf3+0x424>
  808510:	01400804 	movi	r5,32
  808514:	28cbc83a 	sub	r5,r5,r3
  808518:	88c8d83a 	srl	r4,r17,r3
  80851c:	8962983a 	sll	r17,r17,r5
  808520:	114a983a 	sll	r5,r2,r5
  808524:	10c6d83a 	srl	r3,r2,r3
  808528:	8804c03a 	cmpne	r2,r17,zero
  80852c:	290ab03a 	or	r5,r5,r4
  808530:	28a2b03a 	or	r17,r5,r2
  808534:	0021883a 	mov	r16,zero
  808538:	003fa206 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  80853c:	2090b03a 	or	r8,r4,r2
  808540:	40018e26 	beq	r8,zero,808b7c <__subdf3+0x83c>
  808544:	1007883a 	mov	r3,r2
  808548:	2023883a 	mov	r17,r4
  80854c:	888001cc 	andi	r2,r17,7
  808550:	103f9e1e 	bne	r2,zero,8083cc <__alt_mem_onchip_mem+0xff8003cc>
  808554:	1804977a 	slli	r2,r3,29
  808558:	8822d0fa 	srli	r17,r17,3
  80855c:	1810d0fa 	srli	r8,r3,3
  808560:	9100004c 	andi	r4,r18,1
  808564:	1444b03a 	or	r2,r2,r17
  808568:	00c1ffc4 	movi	r3,2047
  80856c:	80c02826 	beq	r16,r3,808610 <__subdf3+0x2d0>
  808570:	01400434 	movhi	r5,16
  808574:	297fffc4 	addi	r5,r5,-1
  808578:	80e0703a 	and	r16,r16,r3
  80857c:	414a703a 	and	r5,r8,r5
  808580:	003fa806 	br	808424 <__alt_mem_onchip_mem+0xff800424>
  808584:	0080630e 	bge	zero,r2,808714 <__subdf3+0x3d4>
  808588:	48003026 	beq	r9,zero,80864c <__subdf3+0x30c>
  80858c:	0101ffc4 	movi	r4,2047
  808590:	813f8c26 	beq	r16,r4,8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808594:	29402034 	orhi	r5,r5,128
  808598:	01000e04 	movi	r4,56
  80859c:	2080a90e 	bge	r4,r2,808844 <__subdf3+0x504>
  8085a0:	298cb03a 	or	r6,r5,r6
  8085a4:	3012c03a 	cmpne	r9,r6,zero
  8085a8:	0005883a 	mov	r2,zero
  8085ac:	4c53883a 	add	r9,r9,r17
  8085b0:	4c63803a 	cmpltu	r17,r9,r17
  8085b4:	10c7883a 	add	r3,r2,r3
  8085b8:	88c7883a 	add	r3,r17,r3
  8085bc:	4823883a 	mov	r17,r9
  8085c0:	1880202c 	andhi	r2,r3,128
  8085c4:	1000d026 	beq	r2,zero,808908 <__subdf3+0x5c8>
  8085c8:	84000044 	addi	r16,r16,1
  8085cc:	0081ffc4 	movi	r2,2047
  8085d0:	8080fe26 	beq	r16,r2,8089cc <__subdf3+0x68c>
  8085d4:	00bfe034 	movhi	r2,65408
  8085d8:	10bfffc4 	addi	r2,r2,-1
  8085dc:	1886703a 	and	r3,r3,r2
  8085e0:	880ad07a 	srli	r5,r17,1
  8085e4:	180497fa 	slli	r2,r3,31
  8085e8:	8900004c 	andi	r4,r17,1
  8085ec:	2922b03a 	or	r17,r5,r4
  8085f0:	1806d07a 	srli	r3,r3,1
  8085f4:	1462b03a 	or	r17,r2,r17
  8085f8:	3825883a 	mov	r18,r7
  8085fc:	003f7106 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808600:	2984b03a 	or	r2,r5,r6
  808604:	103f6826 	beq	r2,zero,8083a8 <__alt_mem_onchip_mem+0xff8003a8>
  808608:	39c03fcc 	andi	r7,r7,255
  80860c:	003f6706 	br	8083ac <__alt_mem_onchip_mem+0xff8003ac>
  808610:	4086b03a 	or	r3,r8,r2
  808614:	18015226 	beq	r3,zero,808b60 <__subdf3+0x820>
  808618:	00c00434 	movhi	r3,16
  80861c:	41400234 	orhi	r5,r8,8
  808620:	18ffffc4 	addi	r3,r3,-1
  808624:	28ca703a 	and	r5,r5,r3
  808628:	003f7e06 	br	808424 <__alt_mem_onchip_mem+0xff800424>
  80862c:	10bfffc4 	addi	r2,r2,-1
  808630:	1000491e 	bne	r2,zero,808758 <__subdf3+0x418>
  808634:	898fc83a 	sub	r7,r17,r6
  808638:	89e3803a 	cmpltu	r17,r17,r7
  80863c:	1947c83a 	sub	r3,r3,r5
  808640:	1c47c83a 	sub	r3,r3,r17
  808644:	3823883a 	mov	r17,r7
  808648:	003f9b06 	br	8084b8 <__alt_mem_onchip_mem+0xff8004b8>
  80864c:	2988b03a 	or	r4,r5,r6
  808650:	203f5c26 	beq	r4,zero,8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808654:	10bfffc4 	addi	r2,r2,-1
  808658:	1000931e 	bne	r2,zero,8088a8 <__subdf3+0x568>
  80865c:	898d883a 	add	r6,r17,r6
  808660:	3463803a 	cmpltu	r17,r6,r17
  808664:	1947883a 	add	r3,r3,r5
  808668:	88c7883a 	add	r3,r17,r3
  80866c:	3023883a 	mov	r17,r6
  808670:	003fd306 	br	8085c0 <__alt_mem_onchip_mem+0xff8005c0>
  808674:	1000541e 	bne	r2,zero,8087c8 <__subdf3+0x488>
  808678:	80800044 	addi	r2,r16,1
  80867c:	1081ffcc 	andi	r2,r2,2047
  808680:	01000044 	movi	r4,1
  808684:	2080a20e 	bge	r4,r2,808910 <__subdf3+0x5d0>
  808688:	8989c83a 	sub	r4,r17,r6
  80868c:	8905803a 	cmpltu	r2,r17,r4
  808690:	1967c83a 	sub	r19,r3,r5
  808694:	98a7c83a 	sub	r19,r19,r2
  808698:	9880202c 	andhi	r2,r19,128
  80869c:	10006326 	beq	r2,zero,80882c <__subdf3+0x4ec>
  8086a0:	3463c83a 	sub	r17,r6,r17
  8086a4:	28c7c83a 	sub	r3,r5,r3
  8086a8:	344d803a 	cmpltu	r6,r6,r17
  8086ac:	19a7c83a 	sub	r19,r3,r6
  8086b0:	3825883a 	mov	r18,r7
  8086b4:	983f861e 	bne	r19,zero,8084d0 <__alt_mem_onchip_mem+0xff8004d0>
  8086b8:	8809883a 	mov	r4,r17
  8086bc:	0808d180 	call	808d18 <__clzsi2>
  8086c0:	10800804 	addi	r2,r2,32
  8086c4:	113ffe04 	addi	r4,r2,-8
  8086c8:	00c007c4 	movi	r3,31
  8086cc:	193f850e 	bge	r3,r4,8084e4 <__alt_mem_onchip_mem+0xff8004e4>
  8086d0:	10bff604 	addi	r2,r2,-40
  8086d4:	8884983a 	sll	r2,r17,r2
  8086d8:	0023883a 	mov	r17,zero
  8086dc:	243f880e 	bge	r4,r16,808500 <__alt_mem_onchip_mem+0xff800500>
  8086e0:	00ffe034 	movhi	r3,65408
  8086e4:	18ffffc4 	addi	r3,r3,-1
  8086e8:	8121c83a 	sub	r16,r16,r4
  8086ec:	10c6703a 	and	r3,r2,r3
  8086f0:	003f3406 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  8086f4:	9100004c 	andi	r4,r18,1
  8086f8:	000b883a 	mov	r5,zero
  8086fc:	0005883a 	mov	r2,zero
  808700:	003f4806 	br	808424 <__alt_mem_onchip_mem+0xff800424>
  808704:	298cb03a 	or	r6,r5,r6
  808708:	300cc03a 	cmpne	r6,r6,zero
  80870c:	0005883a 	mov	r2,zero
  808710:	003f6406 	br	8084a4 <__alt_mem_onchip_mem+0xff8004a4>
  808714:	10009a1e 	bne	r2,zero,808980 <__subdf3+0x640>
  808718:	82400044 	addi	r9,r16,1
  80871c:	4881ffcc 	andi	r2,r9,2047
  808720:	02800044 	movi	r10,1
  808724:	5080670e 	bge	r10,r2,8088c4 <__subdf3+0x584>
  808728:	0081ffc4 	movi	r2,2047
  80872c:	4880af26 	beq	r9,r2,8089ec <__subdf3+0x6ac>
  808730:	898d883a 	add	r6,r17,r6
  808734:	1945883a 	add	r2,r3,r5
  808738:	3447803a 	cmpltu	r3,r6,r17
  80873c:	1887883a 	add	r3,r3,r2
  808740:	182297fa 	slli	r17,r3,31
  808744:	300cd07a 	srli	r6,r6,1
  808748:	1806d07a 	srli	r3,r3,1
  80874c:	4821883a 	mov	r16,r9
  808750:	89a2b03a 	or	r17,r17,r6
  808754:	003f1b06 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808758:	0101ffc4 	movi	r4,2047
  80875c:	813f441e 	bne	r16,r4,808470 <__alt_mem_onchip_mem+0xff800470>
  808760:	003f1806 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808764:	843ff844 	addi	r16,r16,-31
  808768:	01400804 	movi	r5,32
  80876c:	1408d83a 	srl	r4,r2,r16
  808770:	19405026 	beq	r3,r5,8088b4 <__subdf3+0x574>
  808774:	01401004 	movi	r5,64
  808778:	28c7c83a 	sub	r3,r5,r3
  80877c:	10c4983a 	sll	r2,r2,r3
  808780:	88a2b03a 	or	r17,r17,r2
  808784:	8822c03a 	cmpne	r17,r17,zero
  808788:	2462b03a 	or	r17,r4,r17
  80878c:	0007883a 	mov	r3,zero
  808790:	0021883a 	mov	r16,zero
  808794:	003f6d06 	br	80854c <__alt_mem_onchip_mem+0xff80054c>
  808798:	11fff804 	addi	r7,r2,-32
  80879c:	01000804 	movi	r4,32
  8087a0:	29ced83a 	srl	r7,r5,r7
  8087a4:	11004526 	beq	r2,r4,8088bc <__subdf3+0x57c>
  8087a8:	01001004 	movi	r4,64
  8087ac:	2089c83a 	sub	r4,r4,r2
  8087b0:	2904983a 	sll	r2,r5,r4
  8087b4:	118cb03a 	or	r6,r2,r6
  8087b8:	300cc03a 	cmpne	r6,r6,zero
  8087bc:	398cb03a 	or	r6,r7,r6
  8087c0:	0005883a 	mov	r2,zero
  8087c4:	003f3706 	br	8084a4 <__alt_mem_onchip_mem+0xff8004a4>
  8087c8:	80002a26 	beq	r16,zero,808874 <__subdf3+0x534>
  8087cc:	0101ffc4 	movi	r4,2047
  8087d0:	49006626 	beq	r9,r4,80896c <__subdf3+0x62c>
  8087d4:	0085c83a 	sub	r2,zero,r2
  8087d8:	18c02034 	orhi	r3,r3,128
  8087dc:	01000e04 	movi	r4,56
  8087e0:	20807e16 	blt	r4,r2,8089dc <__subdf3+0x69c>
  8087e4:	010007c4 	movi	r4,31
  8087e8:	2080e716 	blt	r4,r2,808b88 <__subdf3+0x848>
  8087ec:	01000804 	movi	r4,32
  8087f0:	2089c83a 	sub	r4,r4,r2
  8087f4:	1914983a 	sll	r10,r3,r4
  8087f8:	8890d83a 	srl	r8,r17,r2
  8087fc:	8908983a 	sll	r4,r17,r4
  808800:	1884d83a 	srl	r2,r3,r2
  808804:	5222b03a 	or	r17,r10,r8
  808808:	2006c03a 	cmpne	r3,r4,zero
  80880c:	88e2b03a 	or	r17,r17,r3
  808810:	3463c83a 	sub	r17,r6,r17
  808814:	2885c83a 	sub	r2,r5,r2
  808818:	344d803a 	cmpltu	r6,r6,r17
  80881c:	1187c83a 	sub	r3,r2,r6
  808820:	4821883a 	mov	r16,r9
  808824:	3825883a 	mov	r18,r7
  808828:	003f2306 	br	8084b8 <__alt_mem_onchip_mem+0xff8004b8>
  80882c:	24d0b03a 	or	r8,r4,r19
  808830:	40001b1e 	bne	r8,zero,8088a0 <__subdf3+0x560>
  808834:	0005883a 	mov	r2,zero
  808838:	0009883a 	mov	r4,zero
  80883c:	0021883a 	mov	r16,zero
  808840:	003f4906 	br	808568 <__alt_mem_onchip_mem+0xff800568>
  808844:	010007c4 	movi	r4,31
  808848:	20803a16 	blt	r4,r2,808934 <__subdf3+0x5f4>
  80884c:	01000804 	movi	r4,32
  808850:	2089c83a 	sub	r4,r4,r2
  808854:	2912983a 	sll	r9,r5,r4
  808858:	3090d83a 	srl	r8,r6,r2
  80885c:	3108983a 	sll	r4,r6,r4
  808860:	2884d83a 	srl	r2,r5,r2
  808864:	4a12b03a 	or	r9,r9,r8
  808868:	2008c03a 	cmpne	r4,r4,zero
  80886c:	4912b03a 	or	r9,r9,r4
  808870:	003f4e06 	br	8085ac <__alt_mem_onchip_mem+0xff8005ac>
  808874:	1c48b03a 	or	r4,r3,r17
  808878:	20003c26 	beq	r4,zero,80896c <__subdf3+0x62c>
  80887c:	0084303a 	nor	r2,zero,r2
  808880:	1000381e 	bne	r2,zero,808964 <__subdf3+0x624>
  808884:	3463c83a 	sub	r17,r6,r17
  808888:	28c5c83a 	sub	r2,r5,r3
  80888c:	344d803a 	cmpltu	r6,r6,r17
  808890:	1187c83a 	sub	r3,r2,r6
  808894:	4821883a 	mov	r16,r9
  808898:	3825883a 	mov	r18,r7
  80889c:	003f0606 	br	8084b8 <__alt_mem_onchip_mem+0xff8004b8>
  8088a0:	2023883a 	mov	r17,r4
  8088a4:	003f0906 	br	8084cc <__alt_mem_onchip_mem+0xff8004cc>
  8088a8:	0101ffc4 	movi	r4,2047
  8088ac:	813f3a1e 	bne	r16,r4,808598 <__alt_mem_onchip_mem+0xff800598>
  8088b0:	003ec406 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  8088b4:	0005883a 	mov	r2,zero
  8088b8:	003fb106 	br	808780 <__alt_mem_onchip_mem+0xff800780>
  8088bc:	0005883a 	mov	r2,zero
  8088c0:	003fbc06 	br	8087b4 <__alt_mem_onchip_mem+0xff8007b4>
  8088c4:	1c44b03a 	or	r2,r3,r17
  8088c8:	80008e1e 	bne	r16,zero,808b04 <__subdf3+0x7c4>
  8088cc:	1000c826 	beq	r2,zero,808bf0 <__subdf3+0x8b0>
  8088d0:	2984b03a 	or	r2,r5,r6
  8088d4:	103ebb26 	beq	r2,zero,8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  8088d8:	8989883a 	add	r4,r17,r6
  8088dc:	1945883a 	add	r2,r3,r5
  8088e0:	2447803a 	cmpltu	r3,r4,r17
  8088e4:	1887883a 	add	r3,r3,r2
  8088e8:	1880202c 	andhi	r2,r3,128
  8088ec:	2023883a 	mov	r17,r4
  8088f0:	103f1626 	beq	r2,zero,80854c <__alt_mem_onchip_mem+0xff80054c>
  8088f4:	00bfe034 	movhi	r2,65408
  8088f8:	10bfffc4 	addi	r2,r2,-1
  8088fc:	5021883a 	mov	r16,r10
  808900:	1886703a 	and	r3,r3,r2
  808904:	003eaf06 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808908:	3825883a 	mov	r18,r7
  80890c:	003f0f06 	br	80854c <__alt_mem_onchip_mem+0xff80054c>
  808910:	1c44b03a 	or	r2,r3,r17
  808914:	8000251e 	bne	r16,zero,8089ac <__subdf3+0x66c>
  808918:	1000661e 	bne	r2,zero,808ab4 <__subdf3+0x774>
  80891c:	2990b03a 	or	r8,r5,r6
  808920:	40009626 	beq	r8,zero,808b7c <__subdf3+0x83c>
  808924:	2807883a 	mov	r3,r5
  808928:	3023883a 	mov	r17,r6
  80892c:	3825883a 	mov	r18,r7
  808930:	003ea406 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808934:	127ff804 	addi	r9,r2,-32
  808938:	01000804 	movi	r4,32
  80893c:	2a52d83a 	srl	r9,r5,r9
  808940:	11008c26 	beq	r2,r4,808b74 <__subdf3+0x834>
  808944:	01001004 	movi	r4,64
  808948:	2085c83a 	sub	r2,r4,r2
  80894c:	2884983a 	sll	r2,r5,r2
  808950:	118cb03a 	or	r6,r2,r6
  808954:	300cc03a 	cmpne	r6,r6,zero
  808958:	4992b03a 	or	r9,r9,r6
  80895c:	0005883a 	mov	r2,zero
  808960:	003f1206 	br	8085ac <__alt_mem_onchip_mem+0xff8005ac>
  808964:	0101ffc4 	movi	r4,2047
  808968:	493f9c1e 	bne	r9,r4,8087dc <__alt_mem_onchip_mem+0xff8007dc>
  80896c:	2807883a 	mov	r3,r5
  808970:	3023883a 	mov	r17,r6
  808974:	4821883a 	mov	r16,r9
  808978:	3825883a 	mov	r18,r7
  80897c:	003e9106 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808980:	80001f1e 	bne	r16,zero,808a00 <__subdf3+0x6c0>
  808984:	1c48b03a 	or	r4,r3,r17
  808988:	20005a26 	beq	r4,zero,808af4 <__subdf3+0x7b4>
  80898c:	0084303a 	nor	r2,zero,r2
  808990:	1000561e 	bne	r2,zero,808aec <__subdf3+0x7ac>
  808994:	89a3883a 	add	r17,r17,r6
  808998:	1945883a 	add	r2,r3,r5
  80899c:	898d803a 	cmpltu	r6,r17,r6
  8089a0:	3087883a 	add	r3,r6,r2
  8089a4:	4821883a 	mov	r16,r9
  8089a8:	003f0506 	br	8085c0 <__alt_mem_onchip_mem+0xff8005c0>
  8089ac:	10002b1e 	bne	r2,zero,808a5c <__subdf3+0x71c>
  8089b0:	2984b03a 	or	r2,r5,r6
  8089b4:	10008026 	beq	r2,zero,808bb8 <__subdf3+0x878>
  8089b8:	2807883a 	mov	r3,r5
  8089bc:	3023883a 	mov	r17,r6
  8089c0:	3825883a 	mov	r18,r7
  8089c4:	0401ffc4 	movi	r16,2047
  8089c8:	003e7e06 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  8089cc:	3809883a 	mov	r4,r7
  8089d0:	0011883a 	mov	r8,zero
  8089d4:	0005883a 	mov	r2,zero
  8089d8:	003ee306 	br	808568 <__alt_mem_onchip_mem+0xff800568>
  8089dc:	1c62b03a 	or	r17,r3,r17
  8089e0:	8822c03a 	cmpne	r17,r17,zero
  8089e4:	0005883a 	mov	r2,zero
  8089e8:	003f8906 	br	808810 <__alt_mem_onchip_mem+0xff800810>
  8089ec:	3809883a 	mov	r4,r7
  8089f0:	4821883a 	mov	r16,r9
  8089f4:	0011883a 	mov	r8,zero
  8089f8:	0005883a 	mov	r2,zero
  8089fc:	003eda06 	br	808568 <__alt_mem_onchip_mem+0xff800568>
  808a00:	0101ffc4 	movi	r4,2047
  808a04:	49003b26 	beq	r9,r4,808af4 <__subdf3+0x7b4>
  808a08:	0085c83a 	sub	r2,zero,r2
  808a0c:	18c02034 	orhi	r3,r3,128
  808a10:	01000e04 	movi	r4,56
  808a14:	20806e16 	blt	r4,r2,808bd0 <__subdf3+0x890>
  808a18:	010007c4 	movi	r4,31
  808a1c:	20807716 	blt	r4,r2,808bfc <__subdf3+0x8bc>
  808a20:	01000804 	movi	r4,32
  808a24:	2089c83a 	sub	r4,r4,r2
  808a28:	1914983a 	sll	r10,r3,r4
  808a2c:	8890d83a 	srl	r8,r17,r2
  808a30:	8908983a 	sll	r4,r17,r4
  808a34:	1884d83a 	srl	r2,r3,r2
  808a38:	5222b03a 	or	r17,r10,r8
  808a3c:	2006c03a 	cmpne	r3,r4,zero
  808a40:	88e2b03a 	or	r17,r17,r3
  808a44:	89a3883a 	add	r17,r17,r6
  808a48:	1145883a 	add	r2,r2,r5
  808a4c:	898d803a 	cmpltu	r6,r17,r6
  808a50:	3087883a 	add	r3,r6,r2
  808a54:	4821883a 	mov	r16,r9
  808a58:	003ed906 	br	8085c0 <__alt_mem_onchip_mem+0xff8005c0>
  808a5c:	2984b03a 	or	r2,r5,r6
  808a60:	10004226 	beq	r2,zero,808b6c <__subdf3+0x82c>
  808a64:	1808d0fa 	srli	r4,r3,3
  808a68:	8822d0fa 	srli	r17,r17,3
  808a6c:	1806977a 	slli	r3,r3,29
  808a70:	2080022c 	andhi	r2,r4,8
  808a74:	1c62b03a 	or	r17,r3,r17
  808a78:	10000826 	beq	r2,zero,808a9c <__subdf3+0x75c>
  808a7c:	2812d0fa 	srli	r9,r5,3
  808a80:	4880022c 	andhi	r2,r9,8
  808a84:	1000051e 	bne	r2,zero,808a9c <__subdf3+0x75c>
  808a88:	300cd0fa 	srli	r6,r6,3
  808a8c:	2804977a 	slli	r2,r5,29
  808a90:	4809883a 	mov	r4,r9
  808a94:	3825883a 	mov	r18,r7
  808a98:	11a2b03a 	or	r17,r2,r6
  808a9c:	8806d77a 	srli	r3,r17,29
  808aa0:	200890fa 	slli	r4,r4,3
  808aa4:	882290fa 	slli	r17,r17,3
  808aa8:	0401ffc4 	movi	r16,2047
  808aac:	1906b03a 	or	r3,r3,r4
  808ab0:	003e4406 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808ab4:	2984b03a 	or	r2,r5,r6
  808ab8:	103e4226 	beq	r2,zero,8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808abc:	8989c83a 	sub	r4,r17,r6
  808ac0:	8911803a 	cmpltu	r8,r17,r4
  808ac4:	1945c83a 	sub	r2,r3,r5
  808ac8:	1205c83a 	sub	r2,r2,r8
  808acc:	1200202c 	andhi	r8,r2,128
  808ad0:	403e9a26 	beq	r8,zero,80853c <__alt_mem_onchip_mem+0xff80053c>
  808ad4:	3463c83a 	sub	r17,r6,r17
  808ad8:	28c5c83a 	sub	r2,r5,r3
  808adc:	344d803a 	cmpltu	r6,r6,r17
  808ae0:	1187c83a 	sub	r3,r2,r6
  808ae4:	3825883a 	mov	r18,r7
  808ae8:	003e3606 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808aec:	0101ffc4 	movi	r4,2047
  808af0:	493fc71e 	bne	r9,r4,808a10 <__alt_mem_onchip_mem+0xff800a10>
  808af4:	2807883a 	mov	r3,r5
  808af8:	3023883a 	mov	r17,r6
  808afc:	4821883a 	mov	r16,r9
  808b00:	003e3006 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808b04:	10003626 	beq	r2,zero,808be0 <__subdf3+0x8a0>
  808b08:	2984b03a 	or	r2,r5,r6
  808b0c:	10001726 	beq	r2,zero,808b6c <__subdf3+0x82c>
  808b10:	1808d0fa 	srli	r4,r3,3
  808b14:	8822d0fa 	srli	r17,r17,3
  808b18:	1806977a 	slli	r3,r3,29
  808b1c:	2080022c 	andhi	r2,r4,8
  808b20:	1c62b03a 	or	r17,r3,r17
  808b24:	10000726 	beq	r2,zero,808b44 <__subdf3+0x804>
  808b28:	2812d0fa 	srli	r9,r5,3
  808b2c:	4880022c 	andhi	r2,r9,8
  808b30:	1000041e 	bne	r2,zero,808b44 <__subdf3+0x804>
  808b34:	300cd0fa 	srli	r6,r6,3
  808b38:	2804977a 	slli	r2,r5,29
  808b3c:	4809883a 	mov	r4,r9
  808b40:	11a2b03a 	or	r17,r2,r6
  808b44:	8806d77a 	srli	r3,r17,29
  808b48:	200890fa 	slli	r4,r4,3
  808b4c:	882290fa 	slli	r17,r17,3
  808b50:	3825883a 	mov	r18,r7
  808b54:	1906b03a 	or	r3,r3,r4
  808b58:	0401ffc4 	movi	r16,2047
  808b5c:	003e1906 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808b60:	000b883a 	mov	r5,zero
  808b64:	0005883a 	mov	r2,zero
  808b68:	003e2e06 	br	808424 <__alt_mem_onchip_mem+0xff800424>
  808b6c:	0401ffc4 	movi	r16,2047
  808b70:	003e1406 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808b74:	0005883a 	mov	r2,zero
  808b78:	003f7506 	br	808950 <__alt_mem_onchip_mem+0xff800950>
  808b7c:	0005883a 	mov	r2,zero
  808b80:	0009883a 	mov	r4,zero
  808b84:	003e7806 	br	808568 <__alt_mem_onchip_mem+0xff800568>
  808b88:	123ff804 	addi	r8,r2,-32
  808b8c:	01000804 	movi	r4,32
  808b90:	1a10d83a 	srl	r8,r3,r8
  808b94:	11002526 	beq	r2,r4,808c2c <__subdf3+0x8ec>
  808b98:	01001004 	movi	r4,64
  808b9c:	2085c83a 	sub	r2,r4,r2
  808ba0:	1884983a 	sll	r2,r3,r2
  808ba4:	1444b03a 	or	r2,r2,r17
  808ba8:	1004c03a 	cmpne	r2,r2,zero
  808bac:	40a2b03a 	or	r17,r8,r2
  808bb0:	0005883a 	mov	r2,zero
  808bb4:	003f1606 	br	808810 <__alt_mem_onchip_mem+0xff800810>
  808bb8:	02000434 	movhi	r8,16
  808bbc:	0009883a 	mov	r4,zero
  808bc0:	423fffc4 	addi	r8,r8,-1
  808bc4:	00bfffc4 	movi	r2,-1
  808bc8:	0401ffc4 	movi	r16,2047
  808bcc:	003e6606 	br	808568 <__alt_mem_onchip_mem+0xff800568>
  808bd0:	1c62b03a 	or	r17,r3,r17
  808bd4:	8822c03a 	cmpne	r17,r17,zero
  808bd8:	0005883a 	mov	r2,zero
  808bdc:	003f9906 	br	808a44 <__alt_mem_onchip_mem+0xff800a44>
  808be0:	2807883a 	mov	r3,r5
  808be4:	3023883a 	mov	r17,r6
  808be8:	0401ffc4 	movi	r16,2047
  808bec:	003df506 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808bf0:	2807883a 	mov	r3,r5
  808bf4:	3023883a 	mov	r17,r6
  808bf8:	003df206 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  808bfc:	123ff804 	addi	r8,r2,-32
  808c00:	01000804 	movi	r4,32
  808c04:	1a10d83a 	srl	r8,r3,r8
  808c08:	11000a26 	beq	r2,r4,808c34 <__subdf3+0x8f4>
  808c0c:	01001004 	movi	r4,64
  808c10:	2085c83a 	sub	r2,r4,r2
  808c14:	1884983a 	sll	r2,r3,r2
  808c18:	1444b03a 	or	r2,r2,r17
  808c1c:	1004c03a 	cmpne	r2,r2,zero
  808c20:	40a2b03a 	or	r17,r8,r2
  808c24:	0005883a 	mov	r2,zero
  808c28:	003f8606 	br	808a44 <__alt_mem_onchip_mem+0xff800a44>
  808c2c:	0005883a 	mov	r2,zero
  808c30:	003fdc06 	br	808ba4 <__alt_mem_onchip_mem+0xff800ba4>
  808c34:	0005883a 	mov	r2,zero
  808c38:	003ff706 	br	808c18 <__alt_mem_onchip_mem+0xff800c18>

00808c3c <__floatsidf>:
  808c3c:	defffd04 	addi	sp,sp,-12
  808c40:	dfc00215 	stw	ra,8(sp)
  808c44:	dc400115 	stw	r17,4(sp)
  808c48:	dc000015 	stw	r16,0(sp)
  808c4c:	20002b26 	beq	r4,zero,808cfc <__floatsidf+0xc0>
  808c50:	2023883a 	mov	r17,r4
  808c54:	2020d7fa 	srli	r16,r4,31
  808c58:	20002d16 	blt	r4,zero,808d10 <__floatsidf+0xd4>
  808c5c:	8809883a 	mov	r4,r17
  808c60:	0808d180 	call	808d18 <__clzsi2>
  808c64:	01410784 	movi	r5,1054
  808c68:	288bc83a 	sub	r5,r5,r2
  808c6c:	01010cc4 	movi	r4,1075
  808c70:	2149c83a 	sub	r4,r4,r5
  808c74:	00c007c4 	movi	r3,31
  808c78:	1900160e 	bge	r3,r4,808cd4 <__floatsidf+0x98>
  808c7c:	00c104c4 	movi	r3,1043
  808c80:	1947c83a 	sub	r3,r3,r5
  808c84:	88c6983a 	sll	r3,r17,r3
  808c88:	00800434 	movhi	r2,16
  808c8c:	10bfffc4 	addi	r2,r2,-1
  808c90:	1886703a 	and	r3,r3,r2
  808c94:	2941ffcc 	andi	r5,r5,2047
  808c98:	800d883a 	mov	r6,r16
  808c9c:	0005883a 	mov	r2,zero
  808ca0:	280a953a 	slli	r5,r5,20
  808ca4:	31803fcc 	andi	r6,r6,255
  808ca8:	01000434 	movhi	r4,16
  808cac:	300c97fa 	slli	r6,r6,31
  808cb0:	213fffc4 	addi	r4,r4,-1
  808cb4:	1906703a 	and	r3,r3,r4
  808cb8:	1946b03a 	or	r3,r3,r5
  808cbc:	1986b03a 	or	r3,r3,r6
  808cc0:	dfc00217 	ldw	ra,8(sp)
  808cc4:	dc400117 	ldw	r17,4(sp)
  808cc8:	dc000017 	ldw	r16,0(sp)
  808ccc:	dec00304 	addi	sp,sp,12
  808cd0:	f800283a 	ret
  808cd4:	00c002c4 	movi	r3,11
  808cd8:	1887c83a 	sub	r3,r3,r2
  808cdc:	88c6d83a 	srl	r3,r17,r3
  808ce0:	8904983a 	sll	r2,r17,r4
  808ce4:	01000434 	movhi	r4,16
  808ce8:	213fffc4 	addi	r4,r4,-1
  808cec:	2941ffcc 	andi	r5,r5,2047
  808cf0:	1906703a 	and	r3,r3,r4
  808cf4:	800d883a 	mov	r6,r16
  808cf8:	003fe906 	br	808ca0 <__alt_mem_onchip_mem+0xff800ca0>
  808cfc:	000d883a 	mov	r6,zero
  808d00:	000b883a 	mov	r5,zero
  808d04:	0007883a 	mov	r3,zero
  808d08:	0005883a 	mov	r2,zero
  808d0c:	003fe406 	br	808ca0 <__alt_mem_onchip_mem+0xff800ca0>
  808d10:	0123c83a 	sub	r17,zero,r4
  808d14:	003fd106 	br	808c5c <__alt_mem_onchip_mem+0xff800c5c>

00808d18 <__clzsi2>:
  808d18:	00bfffd4 	movui	r2,65535
  808d1c:	11000536 	bltu	r2,r4,808d34 <__clzsi2+0x1c>
  808d20:	00803fc4 	movi	r2,255
  808d24:	11000f36 	bltu	r2,r4,808d64 <__clzsi2+0x4c>
  808d28:	00800804 	movi	r2,32
  808d2c:	0007883a 	mov	r3,zero
  808d30:	00000506 	br	808d48 <__clzsi2+0x30>
  808d34:	00804034 	movhi	r2,256
  808d38:	10bfffc4 	addi	r2,r2,-1
  808d3c:	11000c2e 	bgeu	r2,r4,808d70 <__clzsi2+0x58>
  808d40:	00800204 	movi	r2,8
  808d44:	00c00604 	movi	r3,24
  808d48:	20c8d83a 	srl	r4,r4,r3
  808d4c:	00c020b4 	movhi	r3,130
  808d50:	18e08cc4 	addi	r3,r3,-32205
  808d54:	1909883a 	add	r4,r3,r4
  808d58:	20c00003 	ldbu	r3,0(r4)
  808d5c:	10c5c83a 	sub	r2,r2,r3
  808d60:	f800283a 	ret
  808d64:	00800604 	movi	r2,24
  808d68:	00c00204 	movi	r3,8
  808d6c:	003ff606 	br	808d48 <__alt_mem_onchip_mem+0xff800d48>
  808d70:	00800404 	movi	r2,16
  808d74:	1007883a 	mov	r3,r2
  808d78:	003ff306 	br	808d48 <__alt_mem_onchip_mem+0xff800d48>

00808d7c <_printf_r>:
  808d7c:	defffd04 	addi	sp,sp,-12
  808d80:	2805883a 	mov	r2,r5
  808d84:	dfc00015 	stw	ra,0(sp)
  808d88:	d9800115 	stw	r6,4(sp)
  808d8c:	d9c00215 	stw	r7,8(sp)
  808d90:	21400217 	ldw	r5,8(r4)
  808d94:	d9c00104 	addi	r7,sp,4
  808d98:	100d883a 	mov	r6,r2
  808d9c:	0808de80 	call	808de8 <___vfprintf_internal_r>
  808da0:	dfc00017 	ldw	ra,0(sp)
  808da4:	dec00304 	addi	sp,sp,12
  808da8:	f800283a 	ret

00808dac <printf>:
  808dac:	defffc04 	addi	sp,sp,-16
  808db0:	dfc00015 	stw	ra,0(sp)
  808db4:	d9400115 	stw	r5,4(sp)
  808db8:	d9800215 	stw	r6,8(sp)
  808dbc:	d9c00315 	stw	r7,12(sp)
  808dc0:	008020b4 	movhi	r2,130
  808dc4:	10a91604 	addi	r2,r2,-23464
  808dc8:	10800017 	ldw	r2,0(r2)
  808dcc:	200b883a 	mov	r5,r4
  808dd0:	d9800104 	addi	r6,sp,4
  808dd4:	11000217 	ldw	r4,8(r2)
  808dd8:	080afe00 	call	80afe0 <__vfprintf_internal>
  808ddc:	dfc00017 	ldw	ra,0(sp)
  808de0:	dec00404 	addi	sp,sp,16
  808de4:	f800283a 	ret

00808de8 <___vfprintf_internal_r>:
  808de8:	deffb804 	addi	sp,sp,-288
  808dec:	dfc04715 	stw	ra,284(sp)
  808df0:	ddc04515 	stw	r23,276(sp)
  808df4:	dd404315 	stw	r21,268(sp)
  808df8:	d9002c15 	stw	r4,176(sp)
  808dfc:	282f883a 	mov	r23,r5
  808e00:	302b883a 	mov	r21,r6
  808e04:	d9c02d15 	stw	r7,180(sp)
  808e08:	df004615 	stw	fp,280(sp)
  808e0c:	dd804415 	stw	r22,272(sp)
  808e10:	dd004215 	stw	r20,264(sp)
  808e14:	dcc04115 	stw	r19,260(sp)
  808e18:	dc804015 	stw	r18,256(sp)
  808e1c:	dc403f15 	stw	r17,252(sp)
  808e20:	dc003e15 	stw	r16,248(sp)
  808e24:	080d7440 	call	80d744 <_localeconv_r>
  808e28:	10800017 	ldw	r2,0(r2)
  808e2c:	1009883a 	mov	r4,r2
  808e30:	d8803415 	stw	r2,208(sp)
  808e34:	080f76c0 	call	80f76c <strlen>
  808e38:	d8803715 	stw	r2,220(sp)
  808e3c:	d8802c17 	ldw	r2,176(sp)
  808e40:	10000226 	beq	r2,zero,808e4c <___vfprintf_internal_r+0x64>
  808e44:	10800e17 	ldw	r2,56(r2)
  808e48:	1000f926 	beq	r2,zero,809230 <___vfprintf_internal_r+0x448>
  808e4c:	b880030b 	ldhu	r2,12(r23)
  808e50:	10c8000c 	andi	r3,r2,8192
  808e54:	1800061e 	bne	r3,zero,808e70 <___vfprintf_internal_r+0x88>
  808e58:	b9001917 	ldw	r4,100(r23)
  808e5c:	00f7ffc4 	movi	r3,-8193
  808e60:	10880014 	ori	r2,r2,8192
  808e64:	20c6703a 	and	r3,r4,r3
  808e68:	b880030d 	sth	r2,12(r23)
  808e6c:	b8c01915 	stw	r3,100(r23)
  808e70:	10c0020c 	andi	r3,r2,8
  808e74:	1800c126 	beq	r3,zero,80917c <___vfprintf_internal_r+0x394>
  808e78:	b8c00417 	ldw	r3,16(r23)
  808e7c:	1800bf26 	beq	r3,zero,80917c <___vfprintf_internal_r+0x394>
  808e80:	1080068c 	andi	r2,r2,26
  808e84:	00c00284 	movi	r3,10
  808e88:	10c0c426 	beq	r2,r3,80919c <___vfprintf_internal_r+0x3b4>
  808e8c:	d8c00404 	addi	r3,sp,16
  808e90:	050020b4 	movhi	r20,130
  808e94:	d9001e04 	addi	r4,sp,120
  808e98:	a520dd84 	addi	r20,r20,-31882
  808e9c:	d8c01e15 	stw	r3,120(sp)
  808ea0:	d8002015 	stw	zero,128(sp)
  808ea4:	d8001f15 	stw	zero,124(sp)
  808ea8:	d8003315 	stw	zero,204(sp)
  808eac:	d8003615 	stw	zero,216(sp)
  808eb0:	d8003815 	stw	zero,224(sp)
  808eb4:	1811883a 	mov	r8,r3
  808eb8:	d8003915 	stw	zero,228(sp)
  808ebc:	d8003a15 	stw	zero,232(sp)
  808ec0:	d8002f15 	stw	zero,188(sp)
  808ec4:	d9002815 	stw	r4,160(sp)
  808ec8:	a8800007 	ldb	r2,0(r21)
  808ecc:	10027b26 	beq	r2,zero,8098bc <___vfprintf_internal_r+0xad4>
  808ed0:	00c00944 	movi	r3,37
  808ed4:	a821883a 	mov	r16,r21
  808ed8:	10c0021e 	bne	r2,r3,808ee4 <___vfprintf_internal_r+0xfc>
  808edc:	00001406 	br	808f30 <___vfprintf_internal_r+0x148>
  808ee0:	10c00326 	beq	r2,r3,808ef0 <___vfprintf_internal_r+0x108>
  808ee4:	84000044 	addi	r16,r16,1
  808ee8:	80800007 	ldb	r2,0(r16)
  808eec:	103ffc1e 	bne	r2,zero,808ee0 <__alt_mem_onchip_mem+0xff800ee0>
  808ef0:	8563c83a 	sub	r17,r16,r21
  808ef4:	88000e26 	beq	r17,zero,808f30 <___vfprintf_internal_r+0x148>
  808ef8:	d8c02017 	ldw	r3,128(sp)
  808efc:	d8801f17 	ldw	r2,124(sp)
  808f00:	45400015 	stw	r21,0(r8)
  808f04:	1c47883a 	add	r3,r3,r17
  808f08:	10800044 	addi	r2,r2,1
  808f0c:	d8c02015 	stw	r3,128(sp)
  808f10:	44400115 	stw	r17,4(r8)
  808f14:	d8801f15 	stw	r2,124(sp)
  808f18:	00c001c4 	movi	r3,7
  808f1c:	1880a716 	blt	r3,r2,8091bc <___vfprintf_internal_r+0x3d4>
  808f20:	42000204 	addi	r8,r8,8
  808f24:	d9402f17 	ldw	r5,188(sp)
  808f28:	2c4b883a 	add	r5,r5,r17
  808f2c:	d9402f15 	stw	r5,188(sp)
  808f30:	80800007 	ldb	r2,0(r16)
  808f34:	1000a826 	beq	r2,zero,8091d8 <___vfprintf_internal_r+0x3f0>
  808f38:	84400047 	ldb	r17,1(r16)
  808f3c:	00bfffc4 	movi	r2,-1
  808f40:	85400044 	addi	r21,r16,1
  808f44:	d8002785 	stb	zero,158(sp)
  808f48:	0007883a 	mov	r3,zero
  808f4c:	000f883a 	mov	r7,zero
  808f50:	d8802915 	stw	r2,164(sp)
  808f54:	d8003115 	stw	zero,196(sp)
  808f58:	0025883a 	mov	r18,zero
  808f5c:	01401604 	movi	r5,88
  808f60:	01800244 	movi	r6,9
  808f64:	02800a84 	movi	r10,42
  808f68:	02401b04 	movi	r9,108
  808f6c:	ad400044 	addi	r21,r21,1
  808f70:	88bff804 	addi	r2,r17,-32
  808f74:	28830436 	bltu	r5,r2,809b88 <___vfprintf_internal_r+0xda0>
  808f78:	100490ba 	slli	r2,r2,2
  808f7c:	01002074 	movhi	r4,129
  808f80:	2123e404 	addi	r4,r4,-28784
  808f84:	1105883a 	add	r2,r2,r4
  808f88:	10800017 	ldw	r2,0(r2)
  808f8c:	1000683a 	jmp	r2
  808f90:	00809aa8 	cmpgeui	r2,zero,618
  808f94:	00809b88 	cmpgei	r2,zero,622
  808f98:	00809b88 	cmpgei	r2,zero,622
  808f9c:	00809ac8 	cmpgei	r2,zero,619
  808fa0:	00809b88 	cmpgei	r2,zero,622
  808fa4:	00809b88 	cmpgei	r2,zero,622
  808fa8:	00809b88 	cmpgei	r2,zero,622
  808fac:	00809b88 	cmpgei	r2,zero,622
  808fb0:	00809b88 	cmpgei	r2,zero,622
  808fb4:	00809b88 	cmpgei	r2,zero,622
  808fb8:	0080923c 	xorhi	r2,zero,584
  808fbc:	008099e4 	muli	r2,zero,615
  808fc0:	00809b88 	cmpgei	r2,zero,622
  808fc4:	00809104 	movi	r2,580
  808fc8:	00809264 	muli	r2,zero,585
  808fcc:	00809b88 	cmpgei	r2,zero,622
  808fd0:	008092a4 	muli	r2,zero,586
  808fd4:	008092b0 	cmpltui	r2,zero,586
  808fd8:	008092b0 	cmpltui	r2,zero,586
  808fdc:	008092b0 	cmpltui	r2,zero,586
  808fe0:	008092b0 	cmpltui	r2,zero,586
  808fe4:	008092b0 	cmpltui	r2,zero,586
  808fe8:	008092b0 	cmpltui	r2,zero,586
  808fec:	008092b0 	cmpltui	r2,zero,586
  808ff0:	008092b0 	cmpltui	r2,zero,586
  808ff4:	008092b0 	cmpltui	r2,zero,586
  808ff8:	00809b88 	cmpgei	r2,zero,622
  808ffc:	00809b88 	cmpgei	r2,zero,622
  809000:	00809b88 	cmpgei	r2,zero,622
  809004:	00809b88 	cmpgei	r2,zero,622
  809008:	00809b88 	cmpgei	r2,zero,622
  80900c:	00809b88 	cmpgei	r2,zero,622
  809010:	00809b88 	cmpgei	r2,zero,622
  809014:	00809b88 	cmpgei	r2,zero,622
  809018:	00809b88 	cmpgei	r2,zero,622
  80901c:	00809b88 	cmpgei	r2,zero,622
  809020:	008092e4 	muli	r2,zero,587
  809024:	008093a0 	cmpeqi	r2,zero,590
  809028:	00809b88 	cmpgei	r2,zero,622
  80902c:	008093a0 	cmpeqi	r2,zero,590
  809030:	00809b88 	cmpgei	r2,zero,622
  809034:	00809b88 	cmpgei	r2,zero,622
  809038:	00809b88 	cmpgei	r2,zero,622
  80903c:	00809b88 	cmpgei	r2,zero,622
  809040:	00809440 	call	80944 <__alt_mem_sdram-0x77f6bc>
  809044:	00809b88 	cmpgei	r2,zero,622
  809048:	00809b88 	cmpgei	r2,zero,622
  80904c:	0080944c 	andi	r2,zero,593
  809050:	00809b88 	cmpgei	r2,zero,622
  809054:	00809b88 	cmpgei	r2,zero,622
  809058:	00809b88 	cmpgei	r2,zero,622
  80905c:	00809b88 	cmpgei	r2,zero,622
  809060:	00809b88 	cmpgei	r2,zero,622
  809064:	008098c4 	movi	r2,611
  809068:	00809b88 	cmpgei	r2,zero,622
  80906c:	00809b88 	cmpgei	r2,zero,622
  809070:	00809924 	muli	r2,zero,612
  809074:	00809b88 	cmpgei	r2,zero,622
  809078:	00809b88 	cmpgei	r2,zero,622
  80907c:	00809b88 	cmpgei	r2,zero,622
  809080:	00809b88 	cmpgei	r2,zero,622
  809084:	00809b88 	cmpgei	r2,zero,622
  809088:	00809b88 	cmpgei	r2,zero,622
  80908c:	00809b88 	cmpgei	r2,zero,622
  809090:	00809b88 	cmpgei	r2,zero,622
  809094:	00809b88 	cmpgei	r2,zero,622
  809098:	00809b88 	cmpgei	r2,zero,622
  80909c:	00809b34 	movhi	r2,620
  8090a0:	00809ad4 	movui	r2,619
  8090a4:	008093a0 	cmpeqi	r2,zero,590
  8090a8:	008093a0 	cmpeqi	r2,zero,590
  8090ac:	008093a0 	cmpeqi	r2,zero,590
  8090b0:	00809ae4 	muli	r2,zero,619
  8090b4:	00809ad4 	movui	r2,619
  8090b8:	00809b88 	cmpgei	r2,zero,622
  8090bc:	00809b88 	cmpgei	r2,zero,622
  8090c0:	00809af0 	cmpltui	r2,zero,619
  8090c4:	00809b88 	cmpgei	r2,zero,622
  8090c8:	00809b00 	call	809b0 <__alt_mem_sdram-0x77f650>
  8090cc:	008099d4 	movui	r2,615
  8090d0:	00809110 	cmplti	r2,zero,580
  8090d4:	008099f4 	movhi	r2,615
  8090d8:	00809b88 	cmpgei	r2,zero,622
  8090dc:	00809a00 	call	809a0 <__alt_mem_sdram-0x77f660>
  8090e0:	00809b88 	cmpgei	r2,zero,622
  8090e4:	00809a5c 	xori	r2,zero,617
  8090e8:	00809b88 	cmpgei	r2,zero,622
  8090ec:	00809b88 	cmpgei	r2,zero,622
  8090f0:	00809a6c 	andhi	r2,zero,617
  8090f4:	d9003117 	ldw	r4,196(sp)
  8090f8:	d8802d15 	stw	r2,180(sp)
  8090fc:	0109c83a 	sub	r4,zero,r4
  809100:	d9003115 	stw	r4,196(sp)
  809104:	94800114 	ori	r18,r18,4
  809108:	ac400007 	ldb	r17,0(r21)
  80910c:	003f9706 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  809110:	00800c04 	movi	r2,48
  809114:	d9002d17 	ldw	r4,180(sp)
  809118:	d9402917 	ldw	r5,164(sp)
  80911c:	d8802705 	stb	r2,156(sp)
  809120:	00801e04 	movi	r2,120
  809124:	d8802745 	stb	r2,157(sp)
  809128:	d8002785 	stb	zero,158(sp)
  80912c:	20c00104 	addi	r3,r4,4
  809130:	24c00017 	ldw	r19,0(r4)
  809134:	002d883a 	mov	r22,zero
  809138:	90800094 	ori	r2,r18,2
  80913c:	28029a16 	blt	r5,zero,809ba8 <___vfprintf_internal_r+0xdc0>
  809140:	00bfdfc4 	movi	r2,-129
  809144:	90a4703a 	and	r18,r18,r2
  809148:	d8c02d15 	stw	r3,180(sp)
  80914c:	94800094 	ori	r18,r18,2
  809150:	9802871e 	bne	r19,zero,809b70 <___vfprintf_internal_r+0xd88>
  809154:	008020b4 	movhi	r2,130
  809158:	10a0d604 	addi	r2,r2,-31912
  80915c:	d8803915 	stw	r2,228(sp)
  809160:	04401e04 	movi	r17,120
  809164:	d8802917 	ldw	r2,164(sp)
  809168:	0039883a 	mov	fp,zero
  80916c:	1001e926 	beq	r2,zero,809914 <___vfprintf_internal_r+0xb2c>
  809170:	0027883a 	mov	r19,zero
  809174:	002d883a 	mov	r22,zero
  809178:	00020506 	br	809990 <___vfprintf_internal_r+0xba8>
  80917c:	d9002c17 	ldw	r4,176(sp)
  809180:	b80b883a 	mov	r5,r23
  809184:	080b0b80 	call	80b0b8 <__swsetup_r>
  809188:	1005ac1e 	bne	r2,zero,80a83c <___vfprintf_internal_r+0x1a54>
  80918c:	b880030b 	ldhu	r2,12(r23)
  809190:	00c00284 	movi	r3,10
  809194:	1080068c 	andi	r2,r2,26
  809198:	10ff3c1e 	bne	r2,r3,808e8c <__alt_mem_onchip_mem+0xff800e8c>
  80919c:	b880038f 	ldh	r2,14(r23)
  8091a0:	103f3a16 	blt	r2,zero,808e8c <__alt_mem_onchip_mem+0xff800e8c>
  8091a4:	d9c02d17 	ldw	r7,180(sp)
  8091a8:	d9002c17 	ldw	r4,176(sp)
  8091ac:	a80d883a 	mov	r6,r21
  8091b0:	b80b883a 	mov	r5,r23
  8091b4:	080affc0 	call	80affc <__sbprintf>
  8091b8:	00001106 	br	809200 <___vfprintf_internal_r+0x418>
  8091bc:	d9002c17 	ldw	r4,176(sp)
  8091c0:	d9801e04 	addi	r6,sp,120
  8091c4:	b80b883a 	mov	r5,r23
  8091c8:	080f9000 	call	80f900 <__sprint_r>
  8091cc:	1000081e 	bne	r2,zero,8091f0 <___vfprintf_internal_r+0x408>
  8091d0:	da000404 	addi	r8,sp,16
  8091d4:	003f5306 	br	808f24 <__alt_mem_onchip_mem+0xff800f24>
  8091d8:	d8802017 	ldw	r2,128(sp)
  8091dc:	10000426 	beq	r2,zero,8091f0 <___vfprintf_internal_r+0x408>
  8091e0:	d9002c17 	ldw	r4,176(sp)
  8091e4:	d9801e04 	addi	r6,sp,120
  8091e8:	b80b883a 	mov	r5,r23
  8091ec:	080f9000 	call	80f900 <__sprint_r>
  8091f0:	b880030b 	ldhu	r2,12(r23)
  8091f4:	1080100c 	andi	r2,r2,64
  8091f8:	1005901e 	bne	r2,zero,80a83c <___vfprintf_internal_r+0x1a54>
  8091fc:	d8802f17 	ldw	r2,188(sp)
  809200:	dfc04717 	ldw	ra,284(sp)
  809204:	df004617 	ldw	fp,280(sp)
  809208:	ddc04517 	ldw	r23,276(sp)
  80920c:	dd804417 	ldw	r22,272(sp)
  809210:	dd404317 	ldw	r21,268(sp)
  809214:	dd004217 	ldw	r20,264(sp)
  809218:	dcc04117 	ldw	r19,260(sp)
  80921c:	dc804017 	ldw	r18,256(sp)
  809220:	dc403f17 	ldw	r17,252(sp)
  809224:	dc003e17 	ldw	r16,248(sp)
  809228:	dec04804 	addi	sp,sp,288
  80922c:	f800283a 	ret
  809230:	d9002c17 	ldw	r4,176(sp)
  809234:	080d08c0 	call	80d08c <__sinit>
  809238:	003f0406 	br	808e4c <__alt_mem_onchip_mem+0xff800e4c>
  80923c:	d8802d17 	ldw	r2,180(sp)
  809240:	d9002d17 	ldw	r4,180(sp)
  809244:	10800017 	ldw	r2,0(r2)
  809248:	d8803115 	stw	r2,196(sp)
  80924c:	20800104 	addi	r2,r4,4
  809250:	d9003117 	ldw	r4,196(sp)
  809254:	203fa716 	blt	r4,zero,8090f4 <__alt_mem_onchip_mem+0xff8010f4>
  809258:	d8802d15 	stw	r2,180(sp)
  80925c:	ac400007 	ldb	r17,0(r21)
  809260:	003f4206 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  809264:	ac400007 	ldb	r17,0(r21)
  809268:	aac00044 	addi	r11,r21,1
  80926c:	8a872826 	beq	r17,r10,80af10 <___vfprintf_internal_r+0x2128>
  809270:	88bff404 	addi	r2,r17,-48
  809274:	0009883a 	mov	r4,zero
  809278:	30867d36 	bltu	r6,r2,80ac70 <___vfprintf_internal_r+0x1e88>
  80927c:	5c400007 	ldb	r17,0(r11)
  809280:	210002a4 	muli	r4,r4,10
  809284:	5d400044 	addi	r21,r11,1
  809288:	a817883a 	mov	r11,r21
  80928c:	2089883a 	add	r4,r4,r2
  809290:	88bff404 	addi	r2,r17,-48
  809294:	30bff92e 	bgeu	r6,r2,80927c <__alt_mem_onchip_mem+0xff80127c>
  809298:	2005c916 	blt	r4,zero,80a9c0 <___vfprintf_internal_r+0x1bd8>
  80929c:	d9002915 	stw	r4,164(sp)
  8092a0:	003f3306 	br	808f70 <__alt_mem_onchip_mem+0xff800f70>
  8092a4:	94802014 	ori	r18,r18,128
  8092a8:	ac400007 	ldb	r17,0(r21)
  8092ac:	003f2f06 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  8092b0:	a809883a 	mov	r4,r21
  8092b4:	d8003115 	stw	zero,196(sp)
  8092b8:	88bff404 	addi	r2,r17,-48
  8092bc:	0017883a 	mov	r11,zero
  8092c0:	24400007 	ldb	r17,0(r4)
  8092c4:	5ac002a4 	muli	r11,r11,10
  8092c8:	ad400044 	addi	r21,r21,1
  8092cc:	a809883a 	mov	r4,r21
  8092d0:	12d7883a 	add	r11,r2,r11
  8092d4:	88bff404 	addi	r2,r17,-48
  8092d8:	30bff92e 	bgeu	r6,r2,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  8092dc:	dac03115 	stw	r11,196(sp)
  8092e0:	003f2306 	br	808f70 <__alt_mem_onchip_mem+0xff800f70>
  8092e4:	18c03fcc 	andi	r3,r3,255
  8092e8:	18072b1e 	bne	r3,zero,80af98 <___vfprintf_internal_r+0x21b0>
  8092ec:	94800414 	ori	r18,r18,16
  8092f0:	9080080c 	andi	r2,r18,32
  8092f4:	10037b26 	beq	r2,zero,80a0e4 <___vfprintf_internal_r+0x12fc>
  8092f8:	d9402d17 	ldw	r5,180(sp)
  8092fc:	28800117 	ldw	r2,4(r5)
  809300:	2cc00017 	ldw	r19,0(r5)
  809304:	29400204 	addi	r5,r5,8
  809308:	d9402d15 	stw	r5,180(sp)
  80930c:	102d883a 	mov	r22,r2
  809310:	10044b16 	blt	r2,zero,80a440 <___vfprintf_internal_r+0x1658>
  809314:	d9402917 	ldw	r5,164(sp)
  809318:	df002783 	ldbu	fp,158(sp)
  80931c:	2803bc16 	blt	r5,zero,80a210 <___vfprintf_internal_r+0x1428>
  809320:	00ffdfc4 	movi	r3,-129
  809324:	9d84b03a 	or	r2,r19,r22
  809328:	90e4703a 	and	r18,r18,r3
  80932c:	10017726 	beq	r2,zero,80990c <___vfprintf_internal_r+0xb24>
  809330:	b0038326 	beq	r22,zero,80a140 <___vfprintf_internal_r+0x1358>
  809334:	dc402a15 	stw	r17,168(sp)
  809338:	dc001e04 	addi	r16,sp,120
  80933c:	b023883a 	mov	r17,r22
  809340:	402d883a 	mov	r22,r8
  809344:	9809883a 	mov	r4,r19
  809348:	880b883a 	mov	r5,r17
  80934c:	01800284 	movi	r6,10
  809350:	000f883a 	mov	r7,zero
  809354:	08128740 	call	812874 <__umoddi3>
  809358:	10800c04 	addi	r2,r2,48
  80935c:	843fffc4 	addi	r16,r16,-1
  809360:	9809883a 	mov	r4,r19
  809364:	880b883a 	mov	r5,r17
  809368:	80800005 	stb	r2,0(r16)
  80936c:	01800284 	movi	r6,10
  809370:	000f883a 	mov	r7,zero
  809374:	08122fc0 	call	8122fc <__udivdi3>
  809378:	1027883a 	mov	r19,r2
  80937c:	10c4b03a 	or	r2,r2,r3
  809380:	1823883a 	mov	r17,r3
  809384:	103fef1e 	bne	r2,zero,809344 <__alt_mem_onchip_mem+0xff801344>
  809388:	d8c02817 	ldw	r3,160(sp)
  80938c:	dc402a17 	ldw	r17,168(sp)
  809390:	b011883a 	mov	r8,r22
  809394:	1c07c83a 	sub	r3,r3,r16
  809398:	d8c02e15 	stw	r3,184(sp)
  80939c:	00005906 	br	809504 <___vfprintf_internal_r+0x71c>
  8093a0:	18c03fcc 	andi	r3,r3,255
  8093a4:	1806fa1e 	bne	r3,zero,80af90 <___vfprintf_internal_r+0x21a8>
  8093a8:	9080020c 	andi	r2,r18,8
  8093ac:	10048a26 	beq	r2,zero,80a5d8 <___vfprintf_internal_r+0x17f0>
  8093b0:	d8c02d17 	ldw	r3,180(sp)
  8093b4:	d9002d17 	ldw	r4,180(sp)
  8093b8:	d9402d17 	ldw	r5,180(sp)
  8093bc:	18c00017 	ldw	r3,0(r3)
  8093c0:	21000117 	ldw	r4,4(r4)
  8093c4:	29400204 	addi	r5,r5,8
  8093c8:	d8c03615 	stw	r3,216(sp)
  8093cc:	d9003815 	stw	r4,224(sp)
  8093d0:	d9402d15 	stw	r5,180(sp)
  8093d4:	d9003617 	ldw	r4,216(sp)
  8093d8:	d9403817 	ldw	r5,224(sp)
  8093dc:	da003d15 	stw	r8,244(sp)
  8093e0:	04000044 	movi	r16,1
  8093e4:	080f48c0 	call	80f48c <__fpclassifyd>
  8093e8:	da003d17 	ldw	r8,244(sp)
  8093ec:	14041f1e 	bne	r2,r16,80a46c <___vfprintf_internal_r+0x1684>
  8093f0:	d9003617 	ldw	r4,216(sp)
  8093f4:	d9403817 	ldw	r5,224(sp)
  8093f8:	000d883a 	mov	r6,zero
  8093fc:	000f883a 	mov	r7,zero
  809400:	080824c0 	call	80824c <__ledf2>
  809404:	da003d17 	ldw	r8,244(sp)
  809408:	1005be16 	blt	r2,zero,80ab04 <___vfprintf_internal_r+0x1d1c>
  80940c:	df002783 	ldbu	fp,158(sp)
  809410:	008011c4 	movi	r2,71
  809414:	1445330e 	bge	r2,r17,80a8e4 <___vfprintf_internal_r+0x1afc>
  809418:	040020b4 	movhi	r16,130
  80941c:	8420ce04 	addi	r16,r16,-31944
  809420:	00c000c4 	movi	r3,3
  809424:	00bfdfc4 	movi	r2,-129
  809428:	d8c02a15 	stw	r3,168(sp)
  80942c:	90a4703a 	and	r18,r18,r2
  809430:	d8c02e15 	stw	r3,184(sp)
  809434:	d8002915 	stw	zero,164(sp)
  809438:	d8003215 	stw	zero,200(sp)
  80943c:	00003706 	br	80951c <___vfprintf_internal_r+0x734>
  809440:	94800214 	ori	r18,r18,8
  809444:	ac400007 	ldb	r17,0(r21)
  809448:	003ec806 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  80944c:	18c03fcc 	andi	r3,r3,255
  809450:	1806db1e 	bne	r3,zero,80afc0 <___vfprintf_internal_r+0x21d8>
  809454:	94800414 	ori	r18,r18,16
  809458:	9080080c 	andi	r2,r18,32
  80945c:	1002d826 	beq	r2,zero,809fc0 <___vfprintf_internal_r+0x11d8>
  809460:	d9402d17 	ldw	r5,180(sp)
  809464:	d8c02917 	ldw	r3,164(sp)
  809468:	d8002785 	stb	zero,158(sp)
  80946c:	28800204 	addi	r2,r5,8
  809470:	2cc00017 	ldw	r19,0(r5)
  809474:	2d800117 	ldw	r22,4(r5)
  809478:	18048f16 	blt	r3,zero,80a6b8 <___vfprintf_internal_r+0x18d0>
  80947c:	013fdfc4 	movi	r4,-129
  809480:	9d86b03a 	or	r3,r19,r22
  809484:	d8802d15 	stw	r2,180(sp)
  809488:	9124703a 	and	r18,r18,r4
  80948c:	1802d91e 	bne	r3,zero,809ff4 <___vfprintf_internal_r+0x120c>
  809490:	d8c02917 	ldw	r3,164(sp)
  809494:	0039883a 	mov	fp,zero
  809498:	1805c326 	beq	r3,zero,80aba8 <___vfprintf_internal_r+0x1dc0>
  80949c:	0027883a 	mov	r19,zero
  8094a0:	002d883a 	mov	r22,zero
  8094a4:	dc001e04 	addi	r16,sp,120
  8094a8:	9806d0fa 	srli	r3,r19,3
  8094ac:	b008977a 	slli	r4,r22,29
  8094b0:	b02cd0fa 	srli	r22,r22,3
  8094b4:	9cc001cc 	andi	r19,r19,7
  8094b8:	98800c04 	addi	r2,r19,48
  8094bc:	843fffc4 	addi	r16,r16,-1
  8094c0:	20e6b03a 	or	r19,r4,r3
  8094c4:	80800005 	stb	r2,0(r16)
  8094c8:	9d86b03a 	or	r3,r19,r22
  8094cc:	183ff61e 	bne	r3,zero,8094a8 <__alt_mem_onchip_mem+0xff8014a8>
  8094d0:	90c0004c 	andi	r3,r18,1
  8094d4:	18013b26 	beq	r3,zero,8099c4 <___vfprintf_internal_r+0xbdc>
  8094d8:	10803fcc 	andi	r2,r2,255
  8094dc:	1080201c 	xori	r2,r2,128
  8094e0:	10bfe004 	addi	r2,r2,-128
  8094e4:	00c00c04 	movi	r3,48
  8094e8:	10c13626 	beq	r2,r3,8099c4 <___vfprintf_internal_r+0xbdc>
  8094ec:	80ffffc5 	stb	r3,-1(r16)
  8094f0:	d8c02817 	ldw	r3,160(sp)
  8094f4:	80bfffc4 	addi	r2,r16,-1
  8094f8:	1021883a 	mov	r16,r2
  8094fc:	1887c83a 	sub	r3,r3,r2
  809500:	d8c02e15 	stw	r3,184(sp)
  809504:	d8802e17 	ldw	r2,184(sp)
  809508:	d9002917 	ldw	r4,164(sp)
  80950c:	1100010e 	bge	r2,r4,809514 <___vfprintf_internal_r+0x72c>
  809510:	2005883a 	mov	r2,r4
  809514:	d8802a15 	stw	r2,168(sp)
  809518:	d8003215 	stw	zero,200(sp)
  80951c:	e7003fcc 	andi	fp,fp,255
  809520:	e700201c 	xori	fp,fp,128
  809524:	e73fe004 	addi	fp,fp,-128
  809528:	e0000326 	beq	fp,zero,809538 <___vfprintf_internal_r+0x750>
  80952c:	d8c02a17 	ldw	r3,168(sp)
  809530:	18c00044 	addi	r3,r3,1
  809534:	d8c02a15 	stw	r3,168(sp)
  809538:	90c0008c 	andi	r3,r18,2
  80953c:	d8c02b15 	stw	r3,172(sp)
  809540:	18000326 	beq	r3,zero,809550 <___vfprintf_internal_r+0x768>
  809544:	d8c02a17 	ldw	r3,168(sp)
  809548:	18c00084 	addi	r3,r3,2
  80954c:	d8c02a15 	stw	r3,168(sp)
  809550:	90c0210c 	andi	r3,r18,132
  809554:	d8c03015 	stw	r3,192(sp)
  809558:	1801a31e 	bne	r3,zero,809be8 <___vfprintf_internal_r+0xe00>
  80955c:	d9003117 	ldw	r4,196(sp)
  809560:	d8c02a17 	ldw	r3,168(sp)
  809564:	20e7c83a 	sub	r19,r4,r3
  809568:	04c19f0e 	bge	zero,r19,809be8 <___vfprintf_internal_r+0xe00>
  80956c:	02400404 	movi	r9,16
  809570:	d8c02017 	ldw	r3,128(sp)
  809574:	d8801f17 	ldw	r2,124(sp)
  809578:	4cc50d0e 	bge	r9,r19,80a9b0 <___vfprintf_internal_r+0x1bc8>
  80957c:	014020b4 	movhi	r5,130
  809580:	2960e184 	addi	r5,r5,-31866
  809584:	dc403b15 	stw	r17,236(sp)
  809588:	d9403515 	stw	r5,212(sp)
  80958c:	9823883a 	mov	r17,r19
  809590:	482d883a 	mov	r22,r9
  809594:	9027883a 	mov	r19,r18
  809598:	070001c4 	movi	fp,7
  80959c:	8025883a 	mov	r18,r16
  8095a0:	dc002c17 	ldw	r16,176(sp)
  8095a4:	00000306 	br	8095b4 <___vfprintf_internal_r+0x7cc>
  8095a8:	8c7ffc04 	addi	r17,r17,-16
  8095ac:	42000204 	addi	r8,r8,8
  8095b0:	b440130e 	bge	r22,r17,809600 <___vfprintf_internal_r+0x818>
  8095b4:	010020b4 	movhi	r4,130
  8095b8:	18c00404 	addi	r3,r3,16
  8095bc:	10800044 	addi	r2,r2,1
  8095c0:	2120e184 	addi	r4,r4,-31866
  8095c4:	41000015 	stw	r4,0(r8)
  8095c8:	45800115 	stw	r22,4(r8)
  8095cc:	d8c02015 	stw	r3,128(sp)
  8095d0:	d8801f15 	stw	r2,124(sp)
  8095d4:	e0bff40e 	bge	fp,r2,8095a8 <__alt_mem_onchip_mem+0xff8015a8>
  8095d8:	d9801e04 	addi	r6,sp,120
  8095dc:	b80b883a 	mov	r5,r23
  8095e0:	8009883a 	mov	r4,r16
  8095e4:	080f9000 	call	80f900 <__sprint_r>
  8095e8:	103f011e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  8095ec:	8c7ffc04 	addi	r17,r17,-16
  8095f0:	d8c02017 	ldw	r3,128(sp)
  8095f4:	d8801f17 	ldw	r2,124(sp)
  8095f8:	da000404 	addi	r8,sp,16
  8095fc:	b47fed16 	blt	r22,r17,8095b4 <__alt_mem_onchip_mem+0xff8015b4>
  809600:	9021883a 	mov	r16,r18
  809604:	9825883a 	mov	r18,r19
  809608:	8827883a 	mov	r19,r17
  80960c:	dc403b17 	ldw	r17,236(sp)
  809610:	d9403517 	ldw	r5,212(sp)
  809614:	98c7883a 	add	r3,r19,r3
  809618:	10800044 	addi	r2,r2,1
  80961c:	41400015 	stw	r5,0(r8)
  809620:	44c00115 	stw	r19,4(r8)
  809624:	d8c02015 	stw	r3,128(sp)
  809628:	d8801f15 	stw	r2,124(sp)
  80962c:	010001c4 	movi	r4,7
  809630:	2082a316 	blt	r4,r2,80a0c0 <___vfprintf_internal_r+0x12d8>
  809634:	df002787 	ldb	fp,158(sp)
  809638:	42000204 	addi	r8,r8,8
  80963c:	e0000c26 	beq	fp,zero,809670 <___vfprintf_internal_r+0x888>
  809640:	d8801f17 	ldw	r2,124(sp)
  809644:	d9002784 	addi	r4,sp,158
  809648:	18c00044 	addi	r3,r3,1
  80964c:	10800044 	addi	r2,r2,1
  809650:	41000015 	stw	r4,0(r8)
  809654:	01000044 	movi	r4,1
  809658:	41000115 	stw	r4,4(r8)
  80965c:	d8c02015 	stw	r3,128(sp)
  809660:	d8801f15 	stw	r2,124(sp)
  809664:	010001c4 	movi	r4,7
  809668:	20823c16 	blt	r4,r2,809f5c <___vfprintf_internal_r+0x1174>
  80966c:	42000204 	addi	r8,r8,8
  809670:	d8802b17 	ldw	r2,172(sp)
  809674:	10000c26 	beq	r2,zero,8096a8 <___vfprintf_internal_r+0x8c0>
  809678:	d8801f17 	ldw	r2,124(sp)
  80967c:	d9002704 	addi	r4,sp,156
  809680:	18c00084 	addi	r3,r3,2
  809684:	10800044 	addi	r2,r2,1
  809688:	41000015 	stw	r4,0(r8)
  80968c:	01000084 	movi	r4,2
  809690:	41000115 	stw	r4,4(r8)
  809694:	d8c02015 	stw	r3,128(sp)
  809698:	d8801f15 	stw	r2,124(sp)
  80969c:	010001c4 	movi	r4,7
  8096a0:	20823616 	blt	r4,r2,809f7c <___vfprintf_internal_r+0x1194>
  8096a4:	42000204 	addi	r8,r8,8
  8096a8:	d9003017 	ldw	r4,192(sp)
  8096ac:	00802004 	movi	r2,128
  8096b0:	20819926 	beq	r4,r2,809d18 <___vfprintf_internal_r+0xf30>
  8096b4:	d9402917 	ldw	r5,164(sp)
  8096b8:	d8802e17 	ldw	r2,184(sp)
  8096bc:	28adc83a 	sub	r22,r5,r2
  8096c0:	0580310e 	bge	zero,r22,809788 <___vfprintf_internal_r+0x9a0>
  8096c4:	07000404 	movi	fp,16
  8096c8:	d8801f17 	ldw	r2,124(sp)
  8096cc:	e584140e 	bge	fp,r22,80a720 <___vfprintf_internal_r+0x1938>
  8096d0:	014020b4 	movhi	r5,130
  8096d4:	2960dd84 	addi	r5,r5,-31882
  8096d8:	dc402915 	stw	r17,164(sp)
  8096dc:	d9402b15 	stw	r5,172(sp)
  8096e0:	b023883a 	mov	r17,r22
  8096e4:	04c001c4 	movi	r19,7
  8096e8:	a82d883a 	mov	r22,r21
  8096ec:	902b883a 	mov	r21,r18
  8096f0:	8025883a 	mov	r18,r16
  8096f4:	dc002c17 	ldw	r16,176(sp)
  8096f8:	00000306 	br	809708 <___vfprintf_internal_r+0x920>
  8096fc:	8c7ffc04 	addi	r17,r17,-16
  809700:	42000204 	addi	r8,r8,8
  809704:	e440110e 	bge	fp,r17,80974c <___vfprintf_internal_r+0x964>
  809708:	18c00404 	addi	r3,r3,16
  80970c:	10800044 	addi	r2,r2,1
  809710:	45000015 	stw	r20,0(r8)
  809714:	47000115 	stw	fp,4(r8)
  809718:	d8c02015 	stw	r3,128(sp)
  80971c:	d8801f15 	stw	r2,124(sp)
  809720:	98bff60e 	bge	r19,r2,8096fc <__alt_mem_onchip_mem+0xff8016fc>
  809724:	d9801e04 	addi	r6,sp,120
  809728:	b80b883a 	mov	r5,r23
  80972c:	8009883a 	mov	r4,r16
  809730:	080f9000 	call	80f900 <__sprint_r>
  809734:	103eae1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809738:	8c7ffc04 	addi	r17,r17,-16
  80973c:	d8c02017 	ldw	r3,128(sp)
  809740:	d8801f17 	ldw	r2,124(sp)
  809744:	da000404 	addi	r8,sp,16
  809748:	e47fef16 	blt	fp,r17,809708 <__alt_mem_onchip_mem+0xff801708>
  80974c:	9021883a 	mov	r16,r18
  809750:	a825883a 	mov	r18,r21
  809754:	b02b883a 	mov	r21,r22
  809758:	882d883a 	mov	r22,r17
  80975c:	dc402917 	ldw	r17,164(sp)
  809760:	d9002b17 	ldw	r4,172(sp)
  809764:	1d87883a 	add	r3,r3,r22
  809768:	10800044 	addi	r2,r2,1
  80976c:	41000015 	stw	r4,0(r8)
  809770:	45800115 	stw	r22,4(r8)
  809774:	d8c02015 	stw	r3,128(sp)
  809778:	d8801f15 	stw	r2,124(sp)
  80977c:	010001c4 	movi	r4,7
  809780:	2081ee16 	blt	r4,r2,809f3c <___vfprintf_internal_r+0x1154>
  809784:	42000204 	addi	r8,r8,8
  809788:	9080400c 	andi	r2,r18,256
  80978c:	1001181e 	bne	r2,zero,809bf0 <___vfprintf_internal_r+0xe08>
  809790:	d9402e17 	ldw	r5,184(sp)
  809794:	d8801f17 	ldw	r2,124(sp)
  809798:	44000015 	stw	r16,0(r8)
  80979c:	1947883a 	add	r3,r3,r5
  8097a0:	10800044 	addi	r2,r2,1
  8097a4:	41400115 	stw	r5,4(r8)
  8097a8:	d8c02015 	stw	r3,128(sp)
  8097ac:	d8801f15 	stw	r2,124(sp)
  8097b0:	010001c4 	movi	r4,7
  8097b4:	2081d316 	blt	r4,r2,809f04 <___vfprintf_internal_r+0x111c>
  8097b8:	42000204 	addi	r8,r8,8
  8097bc:	9480010c 	andi	r18,r18,4
  8097c0:	90003226 	beq	r18,zero,80988c <___vfprintf_internal_r+0xaa4>
  8097c4:	d9403117 	ldw	r5,196(sp)
  8097c8:	d8802a17 	ldw	r2,168(sp)
  8097cc:	28a1c83a 	sub	r16,r5,r2
  8097d0:	04002e0e 	bge	zero,r16,80988c <___vfprintf_internal_r+0xaa4>
  8097d4:	04400404 	movi	r17,16
  8097d8:	d8801f17 	ldw	r2,124(sp)
  8097dc:	8c04a20e 	bge	r17,r16,80aa68 <___vfprintf_internal_r+0x1c80>
  8097e0:	014020b4 	movhi	r5,130
  8097e4:	2960e184 	addi	r5,r5,-31866
  8097e8:	d9403515 	stw	r5,212(sp)
  8097ec:	048001c4 	movi	r18,7
  8097f0:	dcc02c17 	ldw	r19,176(sp)
  8097f4:	00000306 	br	809804 <___vfprintf_internal_r+0xa1c>
  8097f8:	843ffc04 	addi	r16,r16,-16
  8097fc:	42000204 	addi	r8,r8,8
  809800:	8c00130e 	bge	r17,r16,809850 <___vfprintf_internal_r+0xa68>
  809804:	010020b4 	movhi	r4,130
  809808:	18c00404 	addi	r3,r3,16
  80980c:	10800044 	addi	r2,r2,1
  809810:	2120e184 	addi	r4,r4,-31866
  809814:	41000015 	stw	r4,0(r8)
  809818:	44400115 	stw	r17,4(r8)
  80981c:	d8c02015 	stw	r3,128(sp)
  809820:	d8801f15 	stw	r2,124(sp)
  809824:	90bff40e 	bge	r18,r2,8097f8 <__alt_mem_onchip_mem+0xff8017f8>
  809828:	d9801e04 	addi	r6,sp,120
  80982c:	b80b883a 	mov	r5,r23
  809830:	9809883a 	mov	r4,r19
  809834:	080f9000 	call	80f900 <__sprint_r>
  809838:	103e6d1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80983c:	843ffc04 	addi	r16,r16,-16
  809840:	d8c02017 	ldw	r3,128(sp)
  809844:	d8801f17 	ldw	r2,124(sp)
  809848:	da000404 	addi	r8,sp,16
  80984c:	8c3fed16 	blt	r17,r16,809804 <__alt_mem_onchip_mem+0xff801804>
  809850:	d9403517 	ldw	r5,212(sp)
  809854:	1c07883a 	add	r3,r3,r16
  809858:	10800044 	addi	r2,r2,1
  80985c:	41400015 	stw	r5,0(r8)
  809860:	44000115 	stw	r16,4(r8)
  809864:	d8c02015 	stw	r3,128(sp)
  809868:	d8801f15 	stw	r2,124(sp)
  80986c:	010001c4 	movi	r4,7
  809870:	2080060e 	bge	r4,r2,80988c <___vfprintf_internal_r+0xaa4>
  809874:	d9002c17 	ldw	r4,176(sp)
  809878:	d9801e04 	addi	r6,sp,120
  80987c:	b80b883a 	mov	r5,r23
  809880:	080f9000 	call	80f900 <__sprint_r>
  809884:	103e5a1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809888:	d8c02017 	ldw	r3,128(sp)
  80988c:	d8803117 	ldw	r2,196(sp)
  809890:	d9002a17 	ldw	r4,168(sp)
  809894:	1100010e 	bge	r2,r4,80989c <___vfprintf_internal_r+0xab4>
  809898:	2005883a 	mov	r2,r4
  80989c:	d9402f17 	ldw	r5,188(sp)
  8098a0:	288b883a 	add	r5,r5,r2
  8098a4:	d9402f15 	stw	r5,188(sp)
  8098a8:	18019e1e 	bne	r3,zero,809f24 <___vfprintf_internal_r+0x113c>
  8098ac:	a8800007 	ldb	r2,0(r21)
  8098b0:	d8001f15 	stw	zero,124(sp)
  8098b4:	da000404 	addi	r8,sp,16
  8098b8:	103d851e 	bne	r2,zero,808ed0 <__alt_mem_onchip_mem+0xff800ed0>
  8098bc:	a821883a 	mov	r16,r21
  8098c0:	003d9b06 	br	808f30 <__alt_mem_onchip_mem+0xff800f30>
  8098c4:	18c03fcc 	andi	r3,r3,255
  8098c8:	1805c11e 	bne	r3,zero,80afd0 <___vfprintf_internal_r+0x21e8>
  8098cc:	94800414 	ori	r18,r18,16
  8098d0:	9080080c 	andi	r2,r18,32
  8098d4:	10020c26 	beq	r2,zero,80a108 <___vfprintf_internal_r+0x1320>
  8098d8:	d8802d17 	ldw	r2,180(sp)
  8098dc:	d9002917 	ldw	r4,164(sp)
  8098e0:	d8002785 	stb	zero,158(sp)
  8098e4:	10c00204 	addi	r3,r2,8
  8098e8:	14c00017 	ldw	r19,0(r2)
  8098ec:	15800117 	ldw	r22,4(r2)
  8098f0:	20040f16 	blt	r4,zero,80a930 <___vfprintf_internal_r+0x1b48>
  8098f4:	013fdfc4 	movi	r4,-129
  8098f8:	9d84b03a 	or	r2,r19,r22
  8098fc:	d8c02d15 	stw	r3,180(sp)
  809900:	9124703a 	and	r18,r18,r4
  809904:	0039883a 	mov	fp,zero
  809908:	103e891e 	bne	r2,zero,809330 <__alt_mem_onchip_mem+0xff801330>
  80990c:	d9002917 	ldw	r4,164(sp)
  809910:	2002c11e 	bne	r4,zero,80a418 <___vfprintf_internal_r+0x1630>
  809914:	d8002915 	stw	zero,164(sp)
  809918:	d8002e15 	stw	zero,184(sp)
  80991c:	dc001e04 	addi	r16,sp,120
  809920:	003ef806 	br	809504 <__alt_mem_onchip_mem+0xff801504>
  809924:	18c03fcc 	andi	r3,r3,255
  809928:	18059d1e 	bne	r3,zero,80afa0 <___vfprintf_internal_r+0x21b8>
  80992c:	014020b4 	movhi	r5,130
  809930:	2960d104 	addi	r5,r5,-31932
  809934:	d9403915 	stw	r5,228(sp)
  809938:	9080080c 	andi	r2,r18,32
  80993c:	10005226 	beq	r2,zero,809a88 <___vfprintf_internal_r+0xca0>
  809940:	d8802d17 	ldw	r2,180(sp)
  809944:	14c00017 	ldw	r19,0(r2)
  809948:	15800117 	ldw	r22,4(r2)
  80994c:	10800204 	addi	r2,r2,8
  809950:	d8802d15 	stw	r2,180(sp)
  809954:	9080004c 	andi	r2,r18,1
  809958:	10019026 	beq	r2,zero,809f9c <___vfprintf_internal_r+0x11b4>
  80995c:	9d84b03a 	or	r2,r19,r22
  809960:	10036926 	beq	r2,zero,80a708 <___vfprintf_internal_r+0x1920>
  809964:	d8c02917 	ldw	r3,164(sp)
  809968:	00800c04 	movi	r2,48
  80996c:	d8802705 	stb	r2,156(sp)
  809970:	dc402745 	stb	r17,157(sp)
  809974:	d8002785 	stb	zero,158(sp)
  809978:	90800094 	ori	r2,r18,2
  80997c:	18045d16 	blt	r3,zero,80aaf4 <___vfprintf_internal_r+0x1d0c>
  809980:	00bfdfc4 	movi	r2,-129
  809984:	90a4703a 	and	r18,r18,r2
  809988:	94800094 	ori	r18,r18,2
  80998c:	0039883a 	mov	fp,zero
  809990:	d9003917 	ldw	r4,228(sp)
  809994:	dc001e04 	addi	r16,sp,120
  809998:	988003cc 	andi	r2,r19,15
  80999c:	b006973a 	slli	r3,r22,28
  8099a0:	2085883a 	add	r2,r4,r2
  8099a4:	9826d13a 	srli	r19,r19,4
  8099a8:	10800003 	ldbu	r2,0(r2)
  8099ac:	b02cd13a 	srli	r22,r22,4
  8099b0:	843fffc4 	addi	r16,r16,-1
  8099b4:	1ce6b03a 	or	r19,r3,r19
  8099b8:	80800005 	stb	r2,0(r16)
  8099bc:	9d84b03a 	or	r2,r19,r22
  8099c0:	103ff51e 	bne	r2,zero,809998 <__alt_mem_onchip_mem+0xff801998>
  8099c4:	d8c02817 	ldw	r3,160(sp)
  8099c8:	1c07c83a 	sub	r3,r3,r16
  8099cc:	d8c02e15 	stw	r3,184(sp)
  8099d0:	003ecc06 	br	809504 <__alt_mem_onchip_mem+0xff801504>
  8099d4:	18c03fcc 	andi	r3,r3,255
  8099d8:	183e9f26 	beq	r3,zero,809458 <__alt_mem_onchip_mem+0xff801458>
  8099dc:	d9c02785 	stb	r7,158(sp)
  8099e0:	003e9d06 	br	809458 <__alt_mem_onchip_mem+0xff801458>
  8099e4:	00c00044 	movi	r3,1
  8099e8:	01c00ac4 	movi	r7,43
  8099ec:	ac400007 	ldb	r17,0(r21)
  8099f0:	003d5e06 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  8099f4:	94800814 	ori	r18,r18,32
  8099f8:	ac400007 	ldb	r17,0(r21)
  8099fc:	003d5b06 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  809a00:	d8c02d17 	ldw	r3,180(sp)
  809a04:	d8002785 	stb	zero,158(sp)
  809a08:	1c000017 	ldw	r16,0(r3)
  809a0c:	1cc00104 	addi	r19,r3,4
  809a10:	80041926 	beq	r16,zero,80aa78 <___vfprintf_internal_r+0x1c90>
  809a14:	d9002917 	ldw	r4,164(sp)
  809a18:	2003d016 	blt	r4,zero,80a95c <___vfprintf_internal_r+0x1b74>
  809a1c:	200d883a 	mov	r6,r4
  809a20:	000b883a 	mov	r5,zero
  809a24:	8009883a 	mov	r4,r16
  809a28:	da003d15 	stw	r8,244(sp)
  809a2c:	080e13c0 	call	80e13c <memchr>
  809a30:	da003d17 	ldw	r8,244(sp)
  809a34:	10045426 	beq	r2,zero,80ab88 <___vfprintf_internal_r+0x1da0>
  809a38:	1405c83a 	sub	r2,r2,r16
  809a3c:	d8802e15 	stw	r2,184(sp)
  809a40:	1003cc16 	blt	r2,zero,80a974 <___vfprintf_internal_r+0x1b8c>
  809a44:	df002783 	ldbu	fp,158(sp)
  809a48:	d8802a15 	stw	r2,168(sp)
  809a4c:	dcc02d15 	stw	r19,180(sp)
  809a50:	d8002915 	stw	zero,164(sp)
  809a54:	d8003215 	stw	zero,200(sp)
  809a58:	003eb006 	br	80951c <__alt_mem_onchip_mem+0xff80151c>
  809a5c:	18c03fcc 	andi	r3,r3,255
  809a60:	183f9b26 	beq	r3,zero,8098d0 <__alt_mem_onchip_mem+0xff8018d0>
  809a64:	d9c02785 	stb	r7,158(sp)
  809a68:	003f9906 	br	8098d0 <__alt_mem_onchip_mem+0xff8018d0>
  809a6c:	18c03fcc 	andi	r3,r3,255
  809a70:	1805551e 	bne	r3,zero,80afc8 <___vfprintf_internal_r+0x21e0>
  809a74:	014020b4 	movhi	r5,130
  809a78:	2960d604 	addi	r5,r5,-31912
  809a7c:	d9403915 	stw	r5,228(sp)
  809a80:	9080080c 	andi	r2,r18,32
  809a84:	103fae1e 	bne	r2,zero,809940 <__alt_mem_onchip_mem+0xff801940>
  809a88:	9080040c 	andi	r2,r18,16
  809a8c:	1002de26 	beq	r2,zero,80a608 <___vfprintf_internal_r+0x1820>
  809a90:	d8c02d17 	ldw	r3,180(sp)
  809a94:	002d883a 	mov	r22,zero
  809a98:	1cc00017 	ldw	r19,0(r3)
  809a9c:	18c00104 	addi	r3,r3,4
  809aa0:	d8c02d15 	stw	r3,180(sp)
  809aa4:	003fab06 	br	809954 <__alt_mem_onchip_mem+0xff801954>
  809aa8:	38803fcc 	andi	r2,r7,255
  809aac:	1080201c 	xori	r2,r2,128
  809ab0:	10bfe004 	addi	r2,r2,-128
  809ab4:	1002d21e 	bne	r2,zero,80a600 <___vfprintf_internal_r+0x1818>
  809ab8:	00c00044 	movi	r3,1
  809abc:	01c00804 	movi	r7,32
  809ac0:	ac400007 	ldb	r17,0(r21)
  809ac4:	003d2906 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  809ac8:	94800054 	ori	r18,r18,1
  809acc:	ac400007 	ldb	r17,0(r21)
  809ad0:	003d2606 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  809ad4:	18c03fcc 	andi	r3,r3,255
  809ad8:	183e0526 	beq	r3,zero,8092f0 <__alt_mem_onchip_mem+0xff8012f0>
  809adc:	d9c02785 	stb	r7,158(sp)
  809ae0:	003e0306 	br	8092f0 <__alt_mem_onchip_mem+0xff8012f0>
  809ae4:	94801014 	ori	r18,r18,64
  809ae8:	ac400007 	ldb	r17,0(r21)
  809aec:	003d1f06 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  809af0:	ac400007 	ldb	r17,0(r21)
  809af4:	8a438726 	beq	r17,r9,80a914 <___vfprintf_internal_r+0x1b2c>
  809af8:	94800414 	ori	r18,r18,16
  809afc:	003d1b06 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  809b00:	18c03fcc 	andi	r3,r3,255
  809b04:	1805341e 	bne	r3,zero,80afd8 <___vfprintf_internal_r+0x21f0>
  809b08:	9080080c 	andi	r2,r18,32
  809b0c:	1002cd26 	beq	r2,zero,80a644 <___vfprintf_internal_r+0x185c>
  809b10:	d9402d17 	ldw	r5,180(sp)
  809b14:	d9002f17 	ldw	r4,188(sp)
  809b18:	28800017 	ldw	r2,0(r5)
  809b1c:	2007d7fa 	srai	r3,r4,31
  809b20:	29400104 	addi	r5,r5,4
  809b24:	d9402d15 	stw	r5,180(sp)
  809b28:	11000015 	stw	r4,0(r2)
  809b2c:	10c00115 	stw	r3,4(r2)
  809b30:	003ce506 	br	808ec8 <__alt_mem_onchip_mem+0xff800ec8>
  809b34:	d8c02d17 	ldw	r3,180(sp)
  809b38:	d9002d17 	ldw	r4,180(sp)
  809b3c:	d8002785 	stb	zero,158(sp)
  809b40:	18800017 	ldw	r2,0(r3)
  809b44:	21000104 	addi	r4,r4,4
  809b48:	00c00044 	movi	r3,1
  809b4c:	d8c02a15 	stw	r3,168(sp)
  809b50:	d8801405 	stb	r2,80(sp)
  809b54:	d9002d15 	stw	r4,180(sp)
  809b58:	d8c02e15 	stw	r3,184(sp)
  809b5c:	d8002915 	stw	zero,164(sp)
  809b60:	d8003215 	stw	zero,200(sp)
  809b64:	dc001404 	addi	r16,sp,80
  809b68:	0039883a 	mov	fp,zero
  809b6c:	003e7206 	br	809538 <__alt_mem_onchip_mem+0xff801538>
  809b70:	010020b4 	movhi	r4,130
  809b74:	2120d604 	addi	r4,r4,-31912
  809b78:	0039883a 	mov	fp,zero
  809b7c:	d9003915 	stw	r4,228(sp)
  809b80:	04401e04 	movi	r17,120
  809b84:	003f8206 	br	809990 <__alt_mem_onchip_mem+0xff801990>
  809b88:	18c03fcc 	andi	r3,r3,255
  809b8c:	1805061e 	bne	r3,zero,80afa8 <___vfprintf_internal_r+0x21c0>
  809b90:	883d9126 	beq	r17,zero,8091d8 <__alt_mem_onchip_mem+0xff8011d8>
  809b94:	00c00044 	movi	r3,1
  809b98:	d8c02a15 	stw	r3,168(sp)
  809b9c:	dc401405 	stb	r17,80(sp)
  809ba0:	d8002785 	stb	zero,158(sp)
  809ba4:	003fec06 	br	809b58 <__alt_mem_onchip_mem+0xff801b58>
  809ba8:	014020b4 	movhi	r5,130
  809bac:	2960d604 	addi	r5,r5,-31912
  809bb0:	d9403915 	stw	r5,228(sp)
  809bb4:	d8c02d15 	stw	r3,180(sp)
  809bb8:	1025883a 	mov	r18,r2
  809bbc:	04401e04 	movi	r17,120
  809bc0:	9d84b03a 	or	r2,r19,r22
  809bc4:	1000fc1e 	bne	r2,zero,809fb8 <___vfprintf_internal_r+0x11d0>
  809bc8:	0039883a 	mov	fp,zero
  809bcc:	00800084 	movi	r2,2
  809bd0:	10803fcc 	andi	r2,r2,255
  809bd4:	00c00044 	movi	r3,1
  809bd8:	10c20f26 	beq	r2,r3,80a418 <___vfprintf_internal_r+0x1630>
  809bdc:	00c00084 	movi	r3,2
  809be0:	10fd6326 	beq	r2,r3,809170 <__alt_mem_onchip_mem+0xff801170>
  809be4:	003e2d06 	br	80949c <__alt_mem_onchip_mem+0xff80149c>
  809be8:	d8c02017 	ldw	r3,128(sp)
  809bec:	003e9306 	br	80963c <__alt_mem_onchip_mem+0xff80163c>
  809bf0:	00801944 	movi	r2,101
  809bf4:	14407e0e 	bge	r2,r17,809df0 <___vfprintf_internal_r+0x1008>
  809bf8:	d9003617 	ldw	r4,216(sp)
  809bfc:	d9403817 	ldw	r5,224(sp)
  809c00:	000d883a 	mov	r6,zero
  809c04:	000f883a 	mov	r7,zero
  809c08:	d8c03c15 	stw	r3,240(sp)
  809c0c:	da003d15 	stw	r8,244(sp)
  809c10:	08138480 	call	813848 <__eqdf2>
  809c14:	d8c03c17 	ldw	r3,240(sp)
  809c18:	da003d17 	ldw	r8,244(sp)
  809c1c:	1000f71e 	bne	r2,zero,809ffc <___vfprintf_internal_r+0x1214>
  809c20:	d8801f17 	ldw	r2,124(sp)
  809c24:	010020b4 	movhi	r4,130
  809c28:	2120dd04 	addi	r4,r4,-31884
  809c2c:	18c00044 	addi	r3,r3,1
  809c30:	10800044 	addi	r2,r2,1
  809c34:	41000015 	stw	r4,0(r8)
  809c38:	01000044 	movi	r4,1
  809c3c:	41000115 	stw	r4,4(r8)
  809c40:	d8c02015 	stw	r3,128(sp)
  809c44:	d8801f15 	stw	r2,124(sp)
  809c48:	010001c4 	movi	r4,7
  809c4c:	2082b816 	blt	r4,r2,80a730 <___vfprintf_internal_r+0x1948>
  809c50:	42000204 	addi	r8,r8,8
  809c54:	d8802617 	ldw	r2,152(sp)
  809c58:	d9403317 	ldw	r5,204(sp)
  809c5c:	11400216 	blt	r2,r5,809c68 <___vfprintf_internal_r+0xe80>
  809c60:	9080004c 	andi	r2,r18,1
  809c64:	103ed526 	beq	r2,zero,8097bc <__alt_mem_onchip_mem+0xff8017bc>
  809c68:	d8803717 	ldw	r2,220(sp)
  809c6c:	d9003417 	ldw	r4,208(sp)
  809c70:	d9403717 	ldw	r5,220(sp)
  809c74:	1887883a 	add	r3,r3,r2
  809c78:	d8801f17 	ldw	r2,124(sp)
  809c7c:	41000015 	stw	r4,0(r8)
  809c80:	41400115 	stw	r5,4(r8)
  809c84:	10800044 	addi	r2,r2,1
  809c88:	d8c02015 	stw	r3,128(sp)
  809c8c:	d8801f15 	stw	r2,124(sp)
  809c90:	010001c4 	movi	r4,7
  809c94:	20832916 	blt	r4,r2,80a93c <___vfprintf_internal_r+0x1b54>
  809c98:	42000204 	addi	r8,r8,8
  809c9c:	d8803317 	ldw	r2,204(sp)
  809ca0:	143fffc4 	addi	r16,r2,-1
  809ca4:	043ec50e 	bge	zero,r16,8097bc <__alt_mem_onchip_mem+0xff8017bc>
  809ca8:	04400404 	movi	r17,16
  809cac:	d8801f17 	ldw	r2,124(sp)
  809cb0:	8c00880e 	bge	r17,r16,809ed4 <___vfprintf_internal_r+0x10ec>
  809cb4:	014020b4 	movhi	r5,130
  809cb8:	2960dd84 	addi	r5,r5,-31882
  809cbc:	d9402b15 	stw	r5,172(sp)
  809cc0:	058001c4 	movi	r22,7
  809cc4:	dcc02c17 	ldw	r19,176(sp)
  809cc8:	00000306 	br	809cd8 <___vfprintf_internal_r+0xef0>
  809ccc:	42000204 	addi	r8,r8,8
  809cd0:	843ffc04 	addi	r16,r16,-16
  809cd4:	8c00820e 	bge	r17,r16,809ee0 <___vfprintf_internal_r+0x10f8>
  809cd8:	18c00404 	addi	r3,r3,16
  809cdc:	10800044 	addi	r2,r2,1
  809ce0:	45000015 	stw	r20,0(r8)
  809ce4:	44400115 	stw	r17,4(r8)
  809ce8:	d8c02015 	stw	r3,128(sp)
  809cec:	d8801f15 	stw	r2,124(sp)
  809cf0:	b0bff60e 	bge	r22,r2,809ccc <__alt_mem_onchip_mem+0xff801ccc>
  809cf4:	d9801e04 	addi	r6,sp,120
  809cf8:	b80b883a 	mov	r5,r23
  809cfc:	9809883a 	mov	r4,r19
  809d00:	080f9000 	call	80f900 <__sprint_r>
  809d04:	103d3a1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809d08:	d8c02017 	ldw	r3,128(sp)
  809d0c:	d8801f17 	ldw	r2,124(sp)
  809d10:	da000404 	addi	r8,sp,16
  809d14:	003fee06 	br	809cd0 <__alt_mem_onchip_mem+0xff801cd0>
  809d18:	d9403117 	ldw	r5,196(sp)
  809d1c:	d8802a17 	ldw	r2,168(sp)
  809d20:	28adc83a 	sub	r22,r5,r2
  809d24:	05be630e 	bge	zero,r22,8096b4 <__alt_mem_onchip_mem+0xff8016b4>
  809d28:	07000404 	movi	fp,16
  809d2c:	d8801f17 	ldw	r2,124(sp)
  809d30:	e5838f0e 	bge	fp,r22,80ab70 <___vfprintf_internal_r+0x1d88>
  809d34:	014020b4 	movhi	r5,130
  809d38:	2960dd84 	addi	r5,r5,-31882
  809d3c:	dc403015 	stw	r17,192(sp)
  809d40:	d9402b15 	stw	r5,172(sp)
  809d44:	b023883a 	mov	r17,r22
  809d48:	04c001c4 	movi	r19,7
  809d4c:	a82d883a 	mov	r22,r21
  809d50:	902b883a 	mov	r21,r18
  809d54:	8025883a 	mov	r18,r16
  809d58:	dc002c17 	ldw	r16,176(sp)
  809d5c:	00000306 	br	809d6c <___vfprintf_internal_r+0xf84>
  809d60:	8c7ffc04 	addi	r17,r17,-16
  809d64:	42000204 	addi	r8,r8,8
  809d68:	e440110e 	bge	fp,r17,809db0 <___vfprintf_internal_r+0xfc8>
  809d6c:	18c00404 	addi	r3,r3,16
  809d70:	10800044 	addi	r2,r2,1
  809d74:	45000015 	stw	r20,0(r8)
  809d78:	47000115 	stw	fp,4(r8)
  809d7c:	d8c02015 	stw	r3,128(sp)
  809d80:	d8801f15 	stw	r2,124(sp)
  809d84:	98bff60e 	bge	r19,r2,809d60 <__alt_mem_onchip_mem+0xff801d60>
  809d88:	d9801e04 	addi	r6,sp,120
  809d8c:	b80b883a 	mov	r5,r23
  809d90:	8009883a 	mov	r4,r16
  809d94:	080f9000 	call	80f900 <__sprint_r>
  809d98:	103d151e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809d9c:	8c7ffc04 	addi	r17,r17,-16
  809da0:	d8c02017 	ldw	r3,128(sp)
  809da4:	d8801f17 	ldw	r2,124(sp)
  809da8:	da000404 	addi	r8,sp,16
  809dac:	e47fef16 	blt	fp,r17,809d6c <__alt_mem_onchip_mem+0xff801d6c>
  809db0:	9021883a 	mov	r16,r18
  809db4:	a825883a 	mov	r18,r21
  809db8:	b02b883a 	mov	r21,r22
  809dbc:	882d883a 	mov	r22,r17
  809dc0:	dc403017 	ldw	r17,192(sp)
  809dc4:	d9002b17 	ldw	r4,172(sp)
  809dc8:	1d87883a 	add	r3,r3,r22
  809dcc:	10800044 	addi	r2,r2,1
  809dd0:	41000015 	stw	r4,0(r8)
  809dd4:	45800115 	stw	r22,4(r8)
  809dd8:	d8c02015 	stw	r3,128(sp)
  809ddc:	d8801f15 	stw	r2,124(sp)
  809de0:	010001c4 	movi	r4,7
  809de4:	20818e16 	blt	r4,r2,80a420 <___vfprintf_internal_r+0x1638>
  809de8:	42000204 	addi	r8,r8,8
  809dec:	003e3106 	br	8096b4 <__alt_mem_onchip_mem+0xff8016b4>
  809df0:	d9403317 	ldw	r5,204(sp)
  809df4:	00800044 	movi	r2,1
  809df8:	18c00044 	addi	r3,r3,1
  809dfc:	1141530e 	bge	r2,r5,80a34c <___vfprintf_internal_r+0x1564>
  809e00:	dc401f17 	ldw	r17,124(sp)
  809e04:	00800044 	movi	r2,1
  809e08:	40800115 	stw	r2,4(r8)
  809e0c:	8c400044 	addi	r17,r17,1
  809e10:	44000015 	stw	r16,0(r8)
  809e14:	d8c02015 	stw	r3,128(sp)
  809e18:	dc401f15 	stw	r17,124(sp)
  809e1c:	008001c4 	movi	r2,7
  809e20:	14416b16 	blt	r2,r17,80a3d0 <___vfprintf_internal_r+0x15e8>
  809e24:	42000204 	addi	r8,r8,8
  809e28:	d8803717 	ldw	r2,220(sp)
  809e2c:	d9003417 	ldw	r4,208(sp)
  809e30:	8c400044 	addi	r17,r17,1
  809e34:	10c7883a 	add	r3,r2,r3
  809e38:	40800115 	stw	r2,4(r8)
  809e3c:	41000015 	stw	r4,0(r8)
  809e40:	d8c02015 	stw	r3,128(sp)
  809e44:	dc401f15 	stw	r17,124(sp)
  809e48:	008001c4 	movi	r2,7
  809e4c:	14416916 	blt	r2,r17,80a3f4 <___vfprintf_internal_r+0x160c>
  809e50:	45800204 	addi	r22,r8,8
  809e54:	d9003617 	ldw	r4,216(sp)
  809e58:	d9403817 	ldw	r5,224(sp)
  809e5c:	000d883a 	mov	r6,zero
  809e60:	000f883a 	mov	r7,zero
  809e64:	d8c03c15 	stw	r3,240(sp)
  809e68:	08138480 	call	813848 <__eqdf2>
  809e6c:	d8c03c17 	ldw	r3,240(sp)
  809e70:	1000bc26 	beq	r2,zero,80a164 <___vfprintf_internal_r+0x137c>
  809e74:	d9403317 	ldw	r5,204(sp)
  809e78:	84000044 	addi	r16,r16,1
  809e7c:	8c400044 	addi	r17,r17,1
  809e80:	28bfffc4 	addi	r2,r5,-1
  809e84:	1887883a 	add	r3,r3,r2
  809e88:	b0800115 	stw	r2,4(r22)
  809e8c:	b4000015 	stw	r16,0(r22)
  809e90:	d8c02015 	stw	r3,128(sp)
  809e94:	dc401f15 	stw	r17,124(sp)
  809e98:	008001c4 	movi	r2,7
  809e9c:	14414316 	blt	r2,r17,80a3ac <___vfprintf_internal_r+0x15c4>
  809ea0:	b5800204 	addi	r22,r22,8
  809ea4:	d9003a17 	ldw	r4,232(sp)
  809ea8:	df0022c4 	addi	fp,sp,139
  809eac:	8c400044 	addi	r17,r17,1
  809eb0:	20c7883a 	add	r3,r4,r3
  809eb4:	b7000015 	stw	fp,0(r22)
  809eb8:	b1000115 	stw	r4,4(r22)
  809ebc:	d8c02015 	stw	r3,128(sp)
  809ec0:	dc401f15 	stw	r17,124(sp)
  809ec4:	008001c4 	movi	r2,7
  809ec8:	14400e16 	blt	r2,r17,809f04 <___vfprintf_internal_r+0x111c>
  809ecc:	b2000204 	addi	r8,r22,8
  809ed0:	003e3a06 	br	8097bc <__alt_mem_onchip_mem+0xff8017bc>
  809ed4:	010020b4 	movhi	r4,130
  809ed8:	2120dd84 	addi	r4,r4,-31882
  809edc:	d9002b15 	stw	r4,172(sp)
  809ee0:	d9002b17 	ldw	r4,172(sp)
  809ee4:	1c07883a 	add	r3,r3,r16
  809ee8:	44000115 	stw	r16,4(r8)
  809eec:	41000015 	stw	r4,0(r8)
  809ef0:	10800044 	addi	r2,r2,1
  809ef4:	d8c02015 	stw	r3,128(sp)
  809ef8:	d8801f15 	stw	r2,124(sp)
  809efc:	010001c4 	movi	r4,7
  809f00:	20be2d0e 	bge	r4,r2,8097b8 <__alt_mem_onchip_mem+0xff8017b8>
  809f04:	d9002c17 	ldw	r4,176(sp)
  809f08:	d9801e04 	addi	r6,sp,120
  809f0c:	b80b883a 	mov	r5,r23
  809f10:	080f9000 	call	80f900 <__sprint_r>
  809f14:	103cb61e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809f18:	d8c02017 	ldw	r3,128(sp)
  809f1c:	da000404 	addi	r8,sp,16
  809f20:	003e2606 	br	8097bc <__alt_mem_onchip_mem+0xff8017bc>
  809f24:	d9002c17 	ldw	r4,176(sp)
  809f28:	d9801e04 	addi	r6,sp,120
  809f2c:	b80b883a 	mov	r5,r23
  809f30:	080f9000 	call	80f900 <__sprint_r>
  809f34:	103e5d26 	beq	r2,zero,8098ac <__alt_mem_onchip_mem+0xff8018ac>
  809f38:	003cad06 	br	8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809f3c:	d9002c17 	ldw	r4,176(sp)
  809f40:	d9801e04 	addi	r6,sp,120
  809f44:	b80b883a 	mov	r5,r23
  809f48:	080f9000 	call	80f900 <__sprint_r>
  809f4c:	103ca81e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809f50:	d8c02017 	ldw	r3,128(sp)
  809f54:	da000404 	addi	r8,sp,16
  809f58:	003e0b06 	br	809788 <__alt_mem_onchip_mem+0xff801788>
  809f5c:	d9002c17 	ldw	r4,176(sp)
  809f60:	d9801e04 	addi	r6,sp,120
  809f64:	b80b883a 	mov	r5,r23
  809f68:	080f9000 	call	80f900 <__sprint_r>
  809f6c:	103ca01e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809f70:	d8c02017 	ldw	r3,128(sp)
  809f74:	da000404 	addi	r8,sp,16
  809f78:	003dbd06 	br	809670 <__alt_mem_onchip_mem+0xff801670>
  809f7c:	d9002c17 	ldw	r4,176(sp)
  809f80:	d9801e04 	addi	r6,sp,120
  809f84:	b80b883a 	mov	r5,r23
  809f88:	080f9000 	call	80f900 <__sprint_r>
  809f8c:	103c981e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  809f90:	d8c02017 	ldw	r3,128(sp)
  809f94:	da000404 	addi	r8,sp,16
  809f98:	003dc306 	br	8096a8 <__alt_mem_onchip_mem+0xff8016a8>
  809f9c:	d8802917 	ldw	r2,164(sp)
  809fa0:	d8002785 	stb	zero,158(sp)
  809fa4:	103f0616 	blt	r2,zero,809bc0 <__alt_mem_onchip_mem+0xff801bc0>
  809fa8:	00ffdfc4 	movi	r3,-129
  809fac:	9d84b03a 	or	r2,r19,r22
  809fb0:	90e4703a 	and	r18,r18,r3
  809fb4:	103c6b26 	beq	r2,zero,809164 <__alt_mem_onchip_mem+0xff801164>
  809fb8:	0039883a 	mov	fp,zero
  809fbc:	003e7406 	br	809990 <__alt_mem_onchip_mem+0xff801990>
  809fc0:	9080040c 	andi	r2,r18,16
  809fc4:	1001b326 	beq	r2,zero,80a694 <___vfprintf_internal_r+0x18ac>
  809fc8:	d9002d17 	ldw	r4,180(sp)
  809fcc:	d9402917 	ldw	r5,164(sp)
  809fd0:	d8002785 	stb	zero,158(sp)
  809fd4:	20800104 	addi	r2,r4,4
  809fd8:	24c00017 	ldw	r19,0(r4)
  809fdc:	002d883a 	mov	r22,zero
  809fe0:	2801b516 	blt	r5,zero,80a6b8 <___vfprintf_internal_r+0x18d0>
  809fe4:	00ffdfc4 	movi	r3,-129
  809fe8:	d8802d15 	stw	r2,180(sp)
  809fec:	90e4703a 	and	r18,r18,r3
  809ff0:	983d2726 	beq	r19,zero,809490 <__alt_mem_onchip_mem+0xff801490>
  809ff4:	0039883a 	mov	fp,zero
  809ff8:	003d2a06 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  809ffc:	dc402617 	ldw	r17,152(sp)
  80a000:	0441d30e 	bge	zero,r17,80a750 <___vfprintf_internal_r+0x1968>
  80a004:	dc403217 	ldw	r17,200(sp)
  80a008:	d8803317 	ldw	r2,204(sp)
  80a00c:	1440010e 	bge	r2,r17,80a014 <___vfprintf_internal_r+0x122c>
  80a010:	1023883a 	mov	r17,r2
  80a014:	04400a0e 	bge	zero,r17,80a040 <___vfprintf_internal_r+0x1258>
  80a018:	d8801f17 	ldw	r2,124(sp)
  80a01c:	1c47883a 	add	r3,r3,r17
  80a020:	44000015 	stw	r16,0(r8)
  80a024:	10800044 	addi	r2,r2,1
  80a028:	44400115 	stw	r17,4(r8)
  80a02c:	d8c02015 	stw	r3,128(sp)
  80a030:	d8801f15 	stw	r2,124(sp)
  80a034:	010001c4 	movi	r4,7
  80a038:	20826516 	blt	r4,r2,80a9d0 <___vfprintf_internal_r+0x1be8>
  80a03c:	42000204 	addi	r8,r8,8
  80a040:	88026116 	blt	r17,zero,80a9c8 <___vfprintf_internal_r+0x1be0>
  80a044:	d9003217 	ldw	r4,200(sp)
  80a048:	2463c83a 	sub	r17,r4,r17
  80a04c:	04407b0e 	bge	zero,r17,80a23c <___vfprintf_internal_r+0x1454>
  80a050:	05800404 	movi	r22,16
  80a054:	d8801f17 	ldw	r2,124(sp)
  80a058:	b4419d0e 	bge	r22,r17,80a6d0 <___vfprintf_internal_r+0x18e8>
  80a05c:	010020b4 	movhi	r4,130
  80a060:	2120dd84 	addi	r4,r4,-31882
  80a064:	d9002b15 	stw	r4,172(sp)
  80a068:	070001c4 	movi	fp,7
  80a06c:	dcc02c17 	ldw	r19,176(sp)
  80a070:	00000306 	br	80a080 <___vfprintf_internal_r+0x1298>
  80a074:	42000204 	addi	r8,r8,8
  80a078:	8c7ffc04 	addi	r17,r17,-16
  80a07c:	b441970e 	bge	r22,r17,80a6dc <___vfprintf_internal_r+0x18f4>
  80a080:	18c00404 	addi	r3,r3,16
  80a084:	10800044 	addi	r2,r2,1
  80a088:	45000015 	stw	r20,0(r8)
  80a08c:	45800115 	stw	r22,4(r8)
  80a090:	d8c02015 	stw	r3,128(sp)
  80a094:	d8801f15 	stw	r2,124(sp)
  80a098:	e0bff60e 	bge	fp,r2,80a074 <__alt_mem_onchip_mem+0xff802074>
  80a09c:	d9801e04 	addi	r6,sp,120
  80a0a0:	b80b883a 	mov	r5,r23
  80a0a4:	9809883a 	mov	r4,r19
  80a0a8:	080f9000 	call	80f900 <__sprint_r>
  80a0ac:	103c501e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a0b0:	d8c02017 	ldw	r3,128(sp)
  80a0b4:	d8801f17 	ldw	r2,124(sp)
  80a0b8:	da000404 	addi	r8,sp,16
  80a0bc:	003fee06 	br	80a078 <__alt_mem_onchip_mem+0xff802078>
  80a0c0:	d9002c17 	ldw	r4,176(sp)
  80a0c4:	d9801e04 	addi	r6,sp,120
  80a0c8:	b80b883a 	mov	r5,r23
  80a0cc:	080f9000 	call	80f900 <__sprint_r>
  80a0d0:	103c471e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a0d4:	d8c02017 	ldw	r3,128(sp)
  80a0d8:	df002787 	ldb	fp,158(sp)
  80a0dc:	da000404 	addi	r8,sp,16
  80a0e0:	003d5606 	br	80963c <__alt_mem_onchip_mem+0xff80163c>
  80a0e4:	9080040c 	andi	r2,r18,16
  80a0e8:	10016126 	beq	r2,zero,80a670 <___vfprintf_internal_r+0x1888>
  80a0ec:	d8802d17 	ldw	r2,180(sp)
  80a0f0:	14c00017 	ldw	r19,0(r2)
  80a0f4:	10800104 	addi	r2,r2,4
  80a0f8:	d8802d15 	stw	r2,180(sp)
  80a0fc:	982dd7fa 	srai	r22,r19,31
  80a100:	b005883a 	mov	r2,r22
  80a104:	003c8206 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  80a108:	9080040c 	andi	r2,r18,16
  80a10c:	10003526 	beq	r2,zero,80a1e4 <___vfprintf_internal_r+0x13fc>
  80a110:	d9402d17 	ldw	r5,180(sp)
  80a114:	d8c02917 	ldw	r3,164(sp)
  80a118:	d8002785 	stb	zero,158(sp)
  80a11c:	28800104 	addi	r2,r5,4
  80a120:	2cc00017 	ldw	r19,0(r5)
  80a124:	002d883a 	mov	r22,zero
  80a128:	18003716 	blt	r3,zero,80a208 <___vfprintf_internal_r+0x1420>
  80a12c:	00ffdfc4 	movi	r3,-129
  80a130:	d8802d15 	stw	r2,180(sp)
  80a134:	90e4703a 	and	r18,r18,r3
  80a138:	0039883a 	mov	fp,zero
  80a13c:	983df326 	beq	r19,zero,80990c <__alt_mem_onchip_mem+0xff80190c>
  80a140:	00800244 	movi	r2,9
  80a144:	14fc7b36 	bltu	r2,r19,809334 <__alt_mem_onchip_mem+0xff801334>
  80a148:	d8c02817 	ldw	r3,160(sp)
  80a14c:	dc001dc4 	addi	r16,sp,119
  80a150:	9cc00c04 	addi	r19,r19,48
  80a154:	1c07c83a 	sub	r3,r3,r16
  80a158:	dcc01dc5 	stb	r19,119(sp)
  80a15c:	d8c02e15 	stw	r3,184(sp)
  80a160:	003ce806 	br	809504 <__alt_mem_onchip_mem+0xff801504>
  80a164:	d8803317 	ldw	r2,204(sp)
  80a168:	143fffc4 	addi	r16,r2,-1
  80a16c:	043f4d0e 	bge	zero,r16,809ea4 <__alt_mem_onchip_mem+0xff801ea4>
  80a170:	07000404 	movi	fp,16
  80a174:	e400810e 	bge	fp,r16,80a37c <___vfprintf_internal_r+0x1594>
  80a178:	014020b4 	movhi	r5,130
  80a17c:	2960dd84 	addi	r5,r5,-31882
  80a180:	d9402b15 	stw	r5,172(sp)
  80a184:	01c001c4 	movi	r7,7
  80a188:	dcc02c17 	ldw	r19,176(sp)
  80a18c:	00000306 	br	80a19c <___vfprintf_internal_r+0x13b4>
  80a190:	b5800204 	addi	r22,r22,8
  80a194:	843ffc04 	addi	r16,r16,-16
  80a198:	e4007b0e 	bge	fp,r16,80a388 <___vfprintf_internal_r+0x15a0>
  80a19c:	18c00404 	addi	r3,r3,16
  80a1a0:	8c400044 	addi	r17,r17,1
  80a1a4:	b5000015 	stw	r20,0(r22)
  80a1a8:	b7000115 	stw	fp,4(r22)
  80a1ac:	d8c02015 	stw	r3,128(sp)
  80a1b0:	dc401f15 	stw	r17,124(sp)
  80a1b4:	3c7ff60e 	bge	r7,r17,80a190 <__alt_mem_onchip_mem+0xff802190>
  80a1b8:	d9801e04 	addi	r6,sp,120
  80a1bc:	b80b883a 	mov	r5,r23
  80a1c0:	9809883a 	mov	r4,r19
  80a1c4:	d9c03c15 	stw	r7,240(sp)
  80a1c8:	080f9000 	call	80f900 <__sprint_r>
  80a1cc:	d9c03c17 	ldw	r7,240(sp)
  80a1d0:	103c071e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a1d4:	d8c02017 	ldw	r3,128(sp)
  80a1d8:	dc401f17 	ldw	r17,124(sp)
  80a1dc:	dd800404 	addi	r22,sp,16
  80a1e0:	003fec06 	br	80a194 <__alt_mem_onchip_mem+0xff802194>
  80a1e4:	9080100c 	andi	r2,r18,64
  80a1e8:	d8002785 	stb	zero,158(sp)
  80a1ec:	10010e26 	beq	r2,zero,80a628 <___vfprintf_internal_r+0x1840>
  80a1f0:	d9002d17 	ldw	r4,180(sp)
  80a1f4:	d9402917 	ldw	r5,164(sp)
  80a1f8:	002d883a 	mov	r22,zero
  80a1fc:	20800104 	addi	r2,r4,4
  80a200:	24c0000b 	ldhu	r19,0(r4)
  80a204:	283fc90e 	bge	r5,zero,80a12c <__alt_mem_onchip_mem+0xff80212c>
  80a208:	d8802d15 	stw	r2,180(sp)
  80a20c:	0039883a 	mov	fp,zero
  80a210:	9d84b03a 	or	r2,r19,r22
  80a214:	103c461e 	bne	r2,zero,809330 <__alt_mem_onchip_mem+0xff801330>
  80a218:	00800044 	movi	r2,1
  80a21c:	003e6c06 	br	809bd0 <__alt_mem_onchip_mem+0xff801bd0>
  80a220:	d9002c17 	ldw	r4,176(sp)
  80a224:	d9801e04 	addi	r6,sp,120
  80a228:	b80b883a 	mov	r5,r23
  80a22c:	080f9000 	call	80f900 <__sprint_r>
  80a230:	103bef1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a234:	d8c02017 	ldw	r3,128(sp)
  80a238:	da000404 	addi	r8,sp,16
  80a23c:	d9003217 	ldw	r4,200(sp)
  80a240:	d8802617 	ldw	r2,152(sp)
  80a244:	d9403317 	ldw	r5,204(sp)
  80a248:	8123883a 	add	r17,r16,r4
  80a24c:	11400216 	blt	r2,r5,80a258 <___vfprintf_internal_r+0x1470>
  80a250:	9100004c 	andi	r4,r18,1
  80a254:	20000d26 	beq	r4,zero,80a28c <___vfprintf_internal_r+0x14a4>
  80a258:	d9003717 	ldw	r4,220(sp)
  80a25c:	d9403417 	ldw	r5,208(sp)
  80a260:	1907883a 	add	r3,r3,r4
  80a264:	d9001f17 	ldw	r4,124(sp)
  80a268:	41400015 	stw	r5,0(r8)
  80a26c:	d9403717 	ldw	r5,220(sp)
  80a270:	21000044 	addi	r4,r4,1
  80a274:	d8c02015 	stw	r3,128(sp)
  80a278:	41400115 	stw	r5,4(r8)
  80a27c:	d9001f15 	stw	r4,124(sp)
  80a280:	014001c4 	movi	r5,7
  80a284:	2901e816 	blt	r5,r4,80aa28 <___vfprintf_internal_r+0x1c40>
  80a288:	42000204 	addi	r8,r8,8
  80a28c:	d9003317 	ldw	r4,204(sp)
  80a290:	8121883a 	add	r16,r16,r4
  80a294:	2085c83a 	sub	r2,r4,r2
  80a298:	8461c83a 	sub	r16,r16,r17
  80a29c:	1400010e 	bge	r2,r16,80a2a4 <___vfprintf_internal_r+0x14bc>
  80a2a0:	1021883a 	mov	r16,r2
  80a2a4:	04000a0e 	bge	zero,r16,80a2d0 <___vfprintf_internal_r+0x14e8>
  80a2a8:	d9001f17 	ldw	r4,124(sp)
  80a2ac:	1c07883a 	add	r3,r3,r16
  80a2b0:	44400015 	stw	r17,0(r8)
  80a2b4:	21000044 	addi	r4,r4,1
  80a2b8:	44000115 	stw	r16,4(r8)
  80a2bc:	d8c02015 	stw	r3,128(sp)
  80a2c0:	d9001f15 	stw	r4,124(sp)
  80a2c4:	014001c4 	movi	r5,7
  80a2c8:	2901fb16 	blt	r5,r4,80aab8 <___vfprintf_internal_r+0x1cd0>
  80a2cc:	42000204 	addi	r8,r8,8
  80a2d0:	8001f716 	blt	r16,zero,80aab0 <___vfprintf_internal_r+0x1cc8>
  80a2d4:	1421c83a 	sub	r16,r2,r16
  80a2d8:	043d380e 	bge	zero,r16,8097bc <__alt_mem_onchip_mem+0xff8017bc>
  80a2dc:	04400404 	movi	r17,16
  80a2e0:	d8801f17 	ldw	r2,124(sp)
  80a2e4:	8c3efb0e 	bge	r17,r16,809ed4 <__alt_mem_onchip_mem+0xff801ed4>
  80a2e8:	014020b4 	movhi	r5,130
  80a2ec:	2960dd84 	addi	r5,r5,-31882
  80a2f0:	d9402b15 	stw	r5,172(sp)
  80a2f4:	058001c4 	movi	r22,7
  80a2f8:	dcc02c17 	ldw	r19,176(sp)
  80a2fc:	00000306 	br	80a30c <___vfprintf_internal_r+0x1524>
  80a300:	42000204 	addi	r8,r8,8
  80a304:	843ffc04 	addi	r16,r16,-16
  80a308:	8c3ef50e 	bge	r17,r16,809ee0 <__alt_mem_onchip_mem+0xff801ee0>
  80a30c:	18c00404 	addi	r3,r3,16
  80a310:	10800044 	addi	r2,r2,1
  80a314:	45000015 	stw	r20,0(r8)
  80a318:	44400115 	stw	r17,4(r8)
  80a31c:	d8c02015 	stw	r3,128(sp)
  80a320:	d8801f15 	stw	r2,124(sp)
  80a324:	b0bff60e 	bge	r22,r2,80a300 <__alt_mem_onchip_mem+0xff802300>
  80a328:	d9801e04 	addi	r6,sp,120
  80a32c:	b80b883a 	mov	r5,r23
  80a330:	9809883a 	mov	r4,r19
  80a334:	080f9000 	call	80f900 <__sprint_r>
  80a338:	103bad1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a33c:	d8c02017 	ldw	r3,128(sp)
  80a340:	d8801f17 	ldw	r2,124(sp)
  80a344:	da000404 	addi	r8,sp,16
  80a348:	003fee06 	br	80a304 <__alt_mem_onchip_mem+0xff802304>
  80a34c:	9088703a 	and	r4,r18,r2
  80a350:	203eab1e 	bne	r4,zero,809e00 <__alt_mem_onchip_mem+0xff801e00>
  80a354:	dc401f17 	ldw	r17,124(sp)
  80a358:	40800115 	stw	r2,4(r8)
  80a35c:	44000015 	stw	r16,0(r8)
  80a360:	8c400044 	addi	r17,r17,1
  80a364:	d8c02015 	stw	r3,128(sp)
  80a368:	dc401f15 	stw	r17,124(sp)
  80a36c:	008001c4 	movi	r2,7
  80a370:	14400e16 	blt	r2,r17,80a3ac <___vfprintf_internal_r+0x15c4>
  80a374:	45800204 	addi	r22,r8,8
  80a378:	003eca06 	br	809ea4 <__alt_mem_onchip_mem+0xff801ea4>
  80a37c:	010020b4 	movhi	r4,130
  80a380:	2120dd84 	addi	r4,r4,-31882
  80a384:	d9002b15 	stw	r4,172(sp)
  80a388:	d8802b17 	ldw	r2,172(sp)
  80a38c:	1c07883a 	add	r3,r3,r16
  80a390:	8c400044 	addi	r17,r17,1
  80a394:	b0800015 	stw	r2,0(r22)
  80a398:	b4000115 	stw	r16,4(r22)
  80a39c:	d8c02015 	stw	r3,128(sp)
  80a3a0:	dc401f15 	stw	r17,124(sp)
  80a3a4:	008001c4 	movi	r2,7
  80a3a8:	147ebd0e 	bge	r2,r17,809ea0 <__alt_mem_onchip_mem+0xff801ea0>
  80a3ac:	d9002c17 	ldw	r4,176(sp)
  80a3b0:	d9801e04 	addi	r6,sp,120
  80a3b4:	b80b883a 	mov	r5,r23
  80a3b8:	080f9000 	call	80f900 <__sprint_r>
  80a3bc:	103b8c1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a3c0:	d8c02017 	ldw	r3,128(sp)
  80a3c4:	dc401f17 	ldw	r17,124(sp)
  80a3c8:	dd800404 	addi	r22,sp,16
  80a3cc:	003eb506 	br	809ea4 <__alt_mem_onchip_mem+0xff801ea4>
  80a3d0:	d9002c17 	ldw	r4,176(sp)
  80a3d4:	d9801e04 	addi	r6,sp,120
  80a3d8:	b80b883a 	mov	r5,r23
  80a3dc:	080f9000 	call	80f900 <__sprint_r>
  80a3e0:	103b831e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a3e4:	d8c02017 	ldw	r3,128(sp)
  80a3e8:	dc401f17 	ldw	r17,124(sp)
  80a3ec:	da000404 	addi	r8,sp,16
  80a3f0:	003e8d06 	br	809e28 <__alt_mem_onchip_mem+0xff801e28>
  80a3f4:	d9002c17 	ldw	r4,176(sp)
  80a3f8:	d9801e04 	addi	r6,sp,120
  80a3fc:	b80b883a 	mov	r5,r23
  80a400:	080f9000 	call	80f900 <__sprint_r>
  80a404:	103b7a1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a408:	d8c02017 	ldw	r3,128(sp)
  80a40c:	dc401f17 	ldw	r17,124(sp)
  80a410:	dd800404 	addi	r22,sp,16
  80a414:	003e8f06 	br	809e54 <__alt_mem_onchip_mem+0xff801e54>
  80a418:	0027883a 	mov	r19,zero
  80a41c:	003f4a06 	br	80a148 <__alt_mem_onchip_mem+0xff802148>
  80a420:	d9002c17 	ldw	r4,176(sp)
  80a424:	d9801e04 	addi	r6,sp,120
  80a428:	b80b883a 	mov	r5,r23
  80a42c:	080f9000 	call	80f900 <__sprint_r>
  80a430:	103b6f1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a434:	d8c02017 	ldw	r3,128(sp)
  80a438:	da000404 	addi	r8,sp,16
  80a43c:	003c9d06 	br	8096b4 <__alt_mem_onchip_mem+0xff8016b4>
  80a440:	04e7c83a 	sub	r19,zero,r19
  80a444:	9804c03a 	cmpne	r2,r19,zero
  80a448:	05adc83a 	sub	r22,zero,r22
  80a44c:	b0adc83a 	sub	r22,r22,r2
  80a450:	d8802917 	ldw	r2,164(sp)
  80a454:	07000b44 	movi	fp,45
  80a458:	df002785 	stb	fp,158(sp)
  80a45c:	10017b16 	blt	r2,zero,80aa4c <___vfprintf_internal_r+0x1c64>
  80a460:	00bfdfc4 	movi	r2,-129
  80a464:	90a4703a 	and	r18,r18,r2
  80a468:	003bb106 	br	809330 <__alt_mem_onchip_mem+0xff801330>
  80a46c:	d9003617 	ldw	r4,216(sp)
  80a470:	d9403817 	ldw	r5,224(sp)
  80a474:	da003d15 	stw	r8,244(sp)
  80a478:	080f48c0 	call	80f48c <__fpclassifyd>
  80a47c:	da003d17 	ldw	r8,244(sp)
  80a480:	1000f026 	beq	r2,zero,80a844 <___vfprintf_internal_r+0x1a5c>
  80a484:	d9002917 	ldw	r4,164(sp)
  80a488:	05bff7c4 	movi	r22,-33
  80a48c:	00bfffc4 	movi	r2,-1
  80a490:	8dac703a 	and	r22,r17,r22
  80a494:	20820026 	beq	r4,r2,80ac98 <___vfprintf_internal_r+0x1eb0>
  80a498:	008011c4 	movi	r2,71
  80a49c:	b081f726 	beq	r22,r2,80ac7c <___vfprintf_internal_r+0x1e94>
  80a4a0:	d9003817 	ldw	r4,224(sp)
  80a4a4:	90c04014 	ori	r3,r18,256
  80a4a8:	d8c02b15 	stw	r3,172(sp)
  80a4ac:	20021516 	blt	r4,zero,80ad04 <___vfprintf_internal_r+0x1f1c>
  80a4b0:	dcc03817 	ldw	r19,224(sp)
  80a4b4:	d8002a05 	stb	zero,168(sp)
  80a4b8:	00801984 	movi	r2,102
  80a4bc:	8881f926 	beq	r17,r2,80aca4 <___vfprintf_internal_r+0x1ebc>
  80a4c0:	00801184 	movi	r2,70
  80a4c4:	88821c26 	beq	r17,r2,80ad38 <___vfprintf_internal_r+0x1f50>
  80a4c8:	00801144 	movi	r2,69
  80a4cc:	b081ef26 	beq	r22,r2,80ac8c <___vfprintf_internal_r+0x1ea4>
  80a4d0:	d8c02917 	ldw	r3,164(sp)
  80a4d4:	d8802104 	addi	r2,sp,132
  80a4d8:	d8800315 	stw	r2,12(sp)
  80a4dc:	d9403617 	ldw	r5,216(sp)
  80a4e0:	d8802504 	addi	r2,sp,148
  80a4e4:	d9002c17 	ldw	r4,176(sp)
  80a4e8:	d8800215 	stw	r2,8(sp)
  80a4ec:	d8802604 	addi	r2,sp,152
  80a4f0:	d8c00015 	stw	r3,0(sp)
  80a4f4:	d8800115 	stw	r2,4(sp)
  80a4f8:	01c00084 	movi	r7,2
  80a4fc:	980d883a 	mov	r6,r19
  80a500:	d8c03c15 	stw	r3,240(sp)
  80a504:	da003d15 	stw	r8,244(sp)
  80a508:	080b40c0 	call	80b40c <_dtoa_r>
  80a50c:	1021883a 	mov	r16,r2
  80a510:	008019c4 	movi	r2,103
  80a514:	d8c03c17 	ldw	r3,240(sp)
  80a518:	da003d17 	ldw	r8,244(sp)
  80a51c:	88817126 	beq	r17,r2,80aae4 <___vfprintf_internal_r+0x1cfc>
  80a520:	008011c4 	movi	r2,71
  80a524:	88829226 	beq	r17,r2,80af70 <___vfprintf_internal_r+0x2188>
  80a528:	80f9883a 	add	fp,r16,r3
  80a52c:	d9003617 	ldw	r4,216(sp)
  80a530:	000d883a 	mov	r6,zero
  80a534:	000f883a 	mov	r7,zero
  80a538:	980b883a 	mov	r5,r19
  80a53c:	da003d15 	stw	r8,244(sp)
  80a540:	08138480 	call	813848 <__eqdf2>
  80a544:	da003d17 	ldw	r8,244(sp)
  80a548:	10018d26 	beq	r2,zero,80ab80 <___vfprintf_internal_r+0x1d98>
  80a54c:	d8802117 	ldw	r2,132(sp)
  80a550:	1700062e 	bgeu	r2,fp,80a56c <___vfprintf_internal_r+0x1784>
  80a554:	01000c04 	movi	r4,48
  80a558:	10c00044 	addi	r3,r2,1
  80a55c:	d8c02115 	stw	r3,132(sp)
  80a560:	11000005 	stb	r4,0(r2)
  80a564:	d8802117 	ldw	r2,132(sp)
  80a568:	173ffb36 	bltu	r2,fp,80a558 <__alt_mem_onchip_mem+0xff802558>
  80a56c:	1405c83a 	sub	r2,r2,r16
  80a570:	d8803315 	stw	r2,204(sp)
  80a574:	008011c4 	movi	r2,71
  80a578:	b0817626 	beq	r22,r2,80ab54 <___vfprintf_internal_r+0x1d6c>
  80a57c:	00801944 	movi	r2,101
  80a580:	1442810e 	bge	r2,r17,80af88 <___vfprintf_internal_r+0x21a0>
  80a584:	d8c02617 	ldw	r3,152(sp)
  80a588:	00801984 	movi	r2,102
  80a58c:	d8c03215 	stw	r3,200(sp)
  80a590:	8881fe26 	beq	r17,r2,80ad8c <___vfprintf_internal_r+0x1fa4>
  80a594:	d8c03217 	ldw	r3,200(sp)
  80a598:	d9003317 	ldw	r4,204(sp)
  80a59c:	1901dd16 	blt	r3,r4,80ad14 <___vfprintf_internal_r+0x1f2c>
  80a5a0:	9480004c 	andi	r18,r18,1
  80a5a4:	90022b1e 	bne	r18,zero,80ae54 <___vfprintf_internal_r+0x206c>
  80a5a8:	1805883a 	mov	r2,r3
  80a5ac:	18028016 	blt	r3,zero,80afb0 <___vfprintf_internal_r+0x21c8>
  80a5b0:	d8c03217 	ldw	r3,200(sp)
  80a5b4:	044019c4 	movi	r17,103
  80a5b8:	d8c02e15 	stw	r3,184(sp)
  80a5bc:	df002a07 	ldb	fp,168(sp)
  80a5c0:	e001531e 	bne	fp,zero,80ab10 <___vfprintf_internal_r+0x1d28>
  80a5c4:	df002783 	ldbu	fp,158(sp)
  80a5c8:	d8802a15 	stw	r2,168(sp)
  80a5cc:	dc802b17 	ldw	r18,172(sp)
  80a5d0:	d8002915 	stw	zero,164(sp)
  80a5d4:	003bd106 	br	80951c <__alt_mem_onchip_mem+0xff80151c>
  80a5d8:	d8802d17 	ldw	r2,180(sp)
  80a5dc:	d8c02d17 	ldw	r3,180(sp)
  80a5e0:	d9002d17 	ldw	r4,180(sp)
  80a5e4:	10800017 	ldw	r2,0(r2)
  80a5e8:	18c00117 	ldw	r3,4(r3)
  80a5ec:	21000204 	addi	r4,r4,8
  80a5f0:	d8803615 	stw	r2,216(sp)
  80a5f4:	d8c03815 	stw	r3,224(sp)
  80a5f8:	d9002d15 	stw	r4,180(sp)
  80a5fc:	003b7506 	br	8093d4 <__alt_mem_onchip_mem+0xff8013d4>
  80a600:	ac400007 	ldb	r17,0(r21)
  80a604:	003a5906 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  80a608:	9080100c 	andi	r2,r18,64
  80a60c:	1000a826 	beq	r2,zero,80a8b0 <___vfprintf_internal_r+0x1ac8>
  80a610:	d9002d17 	ldw	r4,180(sp)
  80a614:	002d883a 	mov	r22,zero
  80a618:	24c0000b 	ldhu	r19,0(r4)
  80a61c:	21000104 	addi	r4,r4,4
  80a620:	d9002d15 	stw	r4,180(sp)
  80a624:	003ccb06 	br	809954 <__alt_mem_onchip_mem+0xff801954>
  80a628:	d8c02d17 	ldw	r3,180(sp)
  80a62c:	d9002917 	ldw	r4,164(sp)
  80a630:	002d883a 	mov	r22,zero
  80a634:	18800104 	addi	r2,r3,4
  80a638:	1cc00017 	ldw	r19,0(r3)
  80a63c:	203ebb0e 	bge	r4,zero,80a12c <__alt_mem_onchip_mem+0xff80212c>
  80a640:	003ef106 	br	80a208 <__alt_mem_onchip_mem+0xff802208>
  80a644:	9080040c 	andi	r2,r18,16
  80a648:	1000921e 	bne	r2,zero,80a894 <___vfprintf_internal_r+0x1aac>
  80a64c:	9480100c 	andi	r18,r18,64
  80a650:	90013926 	beq	r18,zero,80ab38 <___vfprintf_internal_r+0x1d50>
  80a654:	d9002d17 	ldw	r4,180(sp)
  80a658:	d9402f17 	ldw	r5,188(sp)
  80a65c:	20800017 	ldw	r2,0(r4)
  80a660:	21000104 	addi	r4,r4,4
  80a664:	d9002d15 	stw	r4,180(sp)
  80a668:	1140000d 	sth	r5,0(r2)
  80a66c:	003a1606 	br	808ec8 <__alt_mem_onchip_mem+0xff800ec8>
  80a670:	9080100c 	andi	r2,r18,64
  80a674:	10008026 	beq	r2,zero,80a878 <___vfprintf_internal_r+0x1a90>
  80a678:	d8c02d17 	ldw	r3,180(sp)
  80a67c:	1cc0000f 	ldh	r19,0(r3)
  80a680:	18c00104 	addi	r3,r3,4
  80a684:	d8c02d15 	stw	r3,180(sp)
  80a688:	982dd7fa 	srai	r22,r19,31
  80a68c:	b005883a 	mov	r2,r22
  80a690:	003b1f06 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  80a694:	9080100c 	andi	r2,r18,64
  80a698:	d8002785 	stb	zero,158(sp)
  80a69c:	10008a1e 	bne	r2,zero,80a8c8 <___vfprintf_internal_r+0x1ae0>
  80a6a0:	d9402d17 	ldw	r5,180(sp)
  80a6a4:	d8c02917 	ldw	r3,164(sp)
  80a6a8:	002d883a 	mov	r22,zero
  80a6ac:	28800104 	addi	r2,r5,4
  80a6b0:	2cc00017 	ldw	r19,0(r5)
  80a6b4:	183e4b0e 	bge	r3,zero,809fe4 <__alt_mem_onchip_mem+0xff801fe4>
  80a6b8:	9d86b03a 	or	r3,r19,r22
  80a6bc:	d8802d15 	stw	r2,180(sp)
  80a6c0:	183e4c1e 	bne	r3,zero,809ff4 <__alt_mem_onchip_mem+0xff801ff4>
  80a6c4:	0039883a 	mov	fp,zero
  80a6c8:	0005883a 	mov	r2,zero
  80a6cc:	003d4006 	br	809bd0 <__alt_mem_onchip_mem+0xff801bd0>
  80a6d0:	014020b4 	movhi	r5,130
  80a6d4:	2960dd84 	addi	r5,r5,-31882
  80a6d8:	d9402b15 	stw	r5,172(sp)
  80a6dc:	d9402b17 	ldw	r5,172(sp)
  80a6e0:	1c47883a 	add	r3,r3,r17
  80a6e4:	10800044 	addi	r2,r2,1
  80a6e8:	41400015 	stw	r5,0(r8)
  80a6ec:	44400115 	stw	r17,4(r8)
  80a6f0:	d8c02015 	stw	r3,128(sp)
  80a6f4:	d8801f15 	stw	r2,124(sp)
  80a6f8:	010001c4 	movi	r4,7
  80a6fc:	20bec816 	blt	r4,r2,80a220 <__alt_mem_onchip_mem+0xff802220>
  80a700:	42000204 	addi	r8,r8,8
  80a704:	003ecd06 	br	80a23c <__alt_mem_onchip_mem+0xff80223c>
  80a708:	d9002917 	ldw	r4,164(sp)
  80a70c:	d8002785 	stb	zero,158(sp)
  80a710:	203d2d16 	blt	r4,zero,809bc8 <__alt_mem_onchip_mem+0xff801bc8>
  80a714:	00bfdfc4 	movi	r2,-129
  80a718:	90a4703a 	and	r18,r18,r2
  80a71c:	003a9106 	br	809164 <__alt_mem_onchip_mem+0xff801164>
  80a720:	010020b4 	movhi	r4,130
  80a724:	2120dd84 	addi	r4,r4,-31882
  80a728:	d9002b15 	stw	r4,172(sp)
  80a72c:	003c0c06 	br	809760 <__alt_mem_onchip_mem+0xff801760>
  80a730:	d9002c17 	ldw	r4,176(sp)
  80a734:	d9801e04 	addi	r6,sp,120
  80a738:	b80b883a 	mov	r5,r23
  80a73c:	080f9000 	call	80f900 <__sprint_r>
  80a740:	103aab1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a744:	d8c02017 	ldw	r3,128(sp)
  80a748:	da000404 	addi	r8,sp,16
  80a74c:	003d4106 	br	809c54 <__alt_mem_onchip_mem+0xff801c54>
  80a750:	d8801f17 	ldw	r2,124(sp)
  80a754:	014020b4 	movhi	r5,130
  80a758:	01000044 	movi	r4,1
  80a75c:	18c00044 	addi	r3,r3,1
  80a760:	10800044 	addi	r2,r2,1
  80a764:	2960dd04 	addi	r5,r5,-31884
  80a768:	41000115 	stw	r4,4(r8)
  80a76c:	41400015 	stw	r5,0(r8)
  80a770:	d8c02015 	stw	r3,128(sp)
  80a774:	d8801f15 	stw	r2,124(sp)
  80a778:	010001c4 	movi	r4,7
  80a77c:	20805c16 	blt	r4,r2,80a8f0 <___vfprintf_internal_r+0x1b08>
  80a780:	42000204 	addi	r8,r8,8
  80a784:	8800041e 	bne	r17,zero,80a798 <___vfprintf_internal_r+0x19b0>
  80a788:	d8803317 	ldw	r2,204(sp)
  80a78c:	1000021e 	bne	r2,zero,80a798 <___vfprintf_internal_r+0x19b0>
  80a790:	9080004c 	andi	r2,r18,1
  80a794:	103c0926 	beq	r2,zero,8097bc <__alt_mem_onchip_mem+0xff8017bc>
  80a798:	d9003717 	ldw	r4,220(sp)
  80a79c:	d8801f17 	ldw	r2,124(sp)
  80a7a0:	d9403417 	ldw	r5,208(sp)
  80a7a4:	20c7883a 	add	r3,r4,r3
  80a7a8:	10800044 	addi	r2,r2,1
  80a7ac:	41000115 	stw	r4,4(r8)
  80a7b0:	41400015 	stw	r5,0(r8)
  80a7b4:	d8c02015 	stw	r3,128(sp)
  80a7b8:	d8801f15 	stw	r2,124(sp)
  80a7bc:	010001c4 	movi	r4,7
  80a7c0:	20812116 	blt	r4,r2,80ac48 <___vfprintf_internal_r+0x1e60>
  80a7c4:	42000204 	addi	r8,r8,8
  80a7c8:	0463c83a 	sub	r17,zero,r17
  80a7cc:	0440730e 	bge	zero,r17,80a99c <___vfprintf_internal_r+0x1bb4>
  80a7d0:	05800404 	movi	r22,16
  80a7d4:	b440860e 	bge	r22,r17,80a9f0 <___vfprintf_internal_r+0x1c08>
  80a7d8:	014020b4 	movhi	r5,130
  80a7dc:	2960dd84 	addi	r5,r5,-31882
  80a7e0:	d9402b15 	stw	r5,172(sp)
  80a7e4:	070001c4 	movi	fp,7
  80a7e8:	dcc02c17 	ldw	r19,176(sp)
  80a7ec:	00000306 	br	80a7fc <___vfprintf_internal_r+0x1a14>
  80a7f0:	42000204 	addi	r8,r8,8
  80a7f4:	8c7ffc04 	addi	r17,r17,-16
  80a7f8:	b440800e 	bge	r22,r17,80a9fc <___vfprintf_internal_r+0x1c14>
  80a7fc:	18c00404 	addi	r3,r3,16
  80a800:	10800044 	addi	r2,r2,1
  80a804:	45000015 	stw	r20,0(r8)
  80a808:	45800115 	stw	r22,4(r8)
  80a80c:	d8c02015 	stw	r3,128(sp)
  80a810:	d8801f15 	stw	r2,124(sp)
  80a814:	e0bff60e 	bge	fp,r2,80a7f0 <__alt_mem_onchip_mem+0xff8027f0>
  80a818:	d9801e04 	addi	r6,sp,120
  80a81c:	b80b883a 	mov	r5,r23
  80a820:	9809883a 	mov	r4,r19
  80a824:	080f9000 	call	80f900 <__sprint_r>
  80a828:	103a711e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a82c:	d8c02017 	ldw	r3,128(sp)
  80a830:	d8801f17 	ldw	r2,124(sp)
  80a834:	da000404 	addi	r8,sp,16
  80a838:	003fee06 	br	80a7f4 <__alt_mem_onchip_mem+0xff8027f4>
  80a83c:	00bfffc4 	movi	r2,-1
  80a840:	003a6f06 	br	809200 <__alt_mem_onchip_mem+0xff801200>
  80a844:	008011c4 	movi	r2,71
  80a848:	1440b816 	blt	r2,r17,80ab2c <___vfprintf_internal_r+0x1d44>
  80a84c:	040020b4 	movhi	r16,130
  80a850:	8420cf04 	addi	r16,r16,-31940
  80a854:	00c000c4 	movi	r3,3
  80a858:	00bfdfc4 	movi	r2,-129
  80a85c:	d8c02a15 	stw	r3,168(sp)
  80a860:	90a4703a 	and	r18,r18,r2
  80a864:	df002783 	ldbu	fp,158(sp)
  80a868:	d8c02e15 	stw	r3,184(sp)
  80a86c:	d8002915 	stw	zero,164(sp)
  80a870:	d8003215 	stw	zero,200(sp)
  80a874:	003b2906 	br	80951c <__alt_mem_onchip_mem+0xff80151c>
  80a878:	d9002d17 	ldw	r4,180(sp)
  80a87c:	24c00017 	ldw	r19,0(r4)
  80a880:	21000104 	addi	r4,r4,4
  80a884:	d9002d15 	stw	r4,180(sp)
  80a888:	982dd7fa 	srai	r22,r19,31
  80a88c:	b005883a 	mov	r2,r22
  80a890:	003a9f06 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  80a894:	d9402d17 	ldw	r5,180(sp)
  80a898:	d8c02f17 	ldw	r3,188(sp)
  80a89c:	28800017 	ldw	r2,0(r5)
  80a8a0:	29400104 	addi	r5,r5,4
  80a8a4:	d9402d15 	stw	r5,180(sp)
  80a8a8:	10c00015 	stw	r3,0(r2)
  80a8ac:	00398606 	br	808ec8 <__alt_mem_onchip_mem+0xff800ec8>
  80a8b0:	d9402d17 	ldw	r5,180(sp)
  80a8b4:	002d883a 	mov	r22,zero
  80a8b8:	2cc00017 	ldw	r19,0(r5)
  80a8bc:	29400104 	addi	r5,r5,4
  80a8c0:	d9402d15 	stw	r5,180(sp)
  80a8c4:	003c2306 	br	809954 <__alt_mem_onchip_mem+0xff801954>
  80a8c8:	d8c02d17 	ldw	r3,180(sp)
  80a8cc:	d9002917 	ldw	r4,164(sp)
  80a8d0:	002d883a 	mov	r22,zero
  80a8d4:	18800104 	addi	r2,r3,4
  80a8d8:	1cc0000b 	ldhu	r19,0(r3)
  80a8dc:	203dc10e 	bge	r4,zero,809fe4 <__alt_mem_onchip_mem+0xff801fe4>
  80a8e0:	003f7506 	br	80a6b8 <__alt_mem_onchip_mem+0xff8026b8>
  80a8e4:	040020b4 	movhi	r16,130
  80a8e8:	8420cd04 	addi	r16,r16,-31948
  80a8ec:	003acc06 	br	809420 <__alt_mem_onchip_mem+0xff801420>
  80a8f0:	d9002c17 	ldw	r4,176(sp)
  80a8f4:	d9801e04 	addi	r6,sp,120
  80a8f8:	b80b883a 	mov	r5,r23
  80a8fc:	080f9000 	call	80f900 <__sprint_r>
  80a900:	103a3b1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a904:	dc402617 	ldw	r17,152(sp)
  80a908:	d8c02017 	ldw	r3,128(sp)
  80a90c:	da000404 	addi	r8,sp,16
  80a910:	003f9c06 	br	80a784 <__alt_mem_onchip_mem+0xff802784>
  80a914:	ac400043 	ldbu	r17,1(r21)
  80a918:	94800814 	ori	r18,r18,32
  80a91c:	ad400044 	addi	r21,r21,1
  80a920:	8c403fcc 	andi	r17,r17,255
  80a924:	8c40201c 	xori	r17,r17,128
  80a928:	8c7fe004 	addi	r17,r17,-128
  80a92c:	00398f06 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  80a930:	d8c02d15 	stw	r3,180(sp)
  80a934:	0039883a 	mov	fp,zero
  80a938:	003e3506 	br	80a210 <__alt_mem_onchip_mem+0xff802210>
  80a93c:	d9002c17 	ldw	r4,176(sp)
  80a940:	d9801e04 	addi	r6,sp,120
  80a944:	b80b883a 	mov	r5,r23
  80a948:	080f9000 	call	80f900 <__sprint_r>
  80a94c:	103a281e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a950:	d8c02017 	ldw	r3,128(sp)
  80a954:	da000404 	addi	r8,sp,16
  80a958:	003cd006 	br	809c9c <__alt_mem_onchip_mem+0xff801c9c>
  80a95c:	8009883a 	mov	r4,r16
  80a960:	da003d15 	stw	r8,244(sp)
  80a964:	080f76c0 	call	80f76c <strlen>
  80a968:	d8802e15 	stw	r2,184(sp)
  80a96c:	da003d17 	ldw	r8,244(sp)
  80a970:	103c340e 	bge	r2,zero,809a44 <__alt_mem_onchip_mem+0xff801a44>
  80a974:	0005883a 	mov	r2,zero
  80a978:	003c3206 	br	809a44 <__alt_mem_onchip_mem+0xff801a44>
  80a97c:	d9002c17 	ldw	r4,176(sp)
  80a980:	d9801e04 	addi	r6,sp,120
  80a984:	b80b883a 	mov	r5,r23
  80a988:	080f9000 	call	80f900 <__sprint_r>
  80a98c:	103a181e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a990:	d8c02017 	ldw	r3,128(sp)
  80a994:	d8801f17 	ldw	r2,124(sp)
  80a998:	da000404 	addi	r8,sp,16
  80a99c:	d9403317 	ldw	r5,204(sp)
  80a9a0:	10800044 	addi	r2,r2,1
  80a9a4:	44000015 	stw	r16,0(r8)
  80a9a8:	28c7883a 	add	r3,r5,r3
  80a9ac:	003b7d06 	br	8097a4 <__alt_mem_onchip_mem+0xff8017a4>
  80a9b0:	010020b4 	movhi	r4,130
  80a9b4:	2120e184 	addi	r4,r4,-31866
  80a9b8:	d9003515 	stw	r4,212(sp)
  80a9bc:	003b1406 	br	809610 <__alt_mem_onchip_mem+0xff801610>
  80a9c0:	013fffc4 	movi	r4,-1
  80a9c4:	003a3506 	br	80929c <__alt_mem_onchip_mem+0xff80129c>
  80a9c8:	0023883a 	mov	r17,zero
  80a9cc:	003d9d06 	br	80a044 <__alt_mem_onchip_mem+0xff802044>
  80a9d0:	d9002c17 	ldw	r4,176(sp)
  80a9d4:	d9801e04 	addi	r6,sp,120
  80a9d8:	b80b883a 	mov	r5,r23
  80a9dc:	080f9000 	call	80f900 <__sprint_r>
  80a9e0:	103a031e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80a9e4:	d8c02017 	ldw	r3,128(sp)
  80a9e8:	da000404 	addi	r8,sp,16
  80a9ec:	003d9406 	br	80a040 <__alt_mem_onchip_mem+0xff802040>
  80a9f0:	010020b4 	movhi	r4,130
  80a9f4:	2120dd84 	addi	r4,r4,-31882
  80a9f8:	d9002b15 	stw	r4,172(sp)
  80a9fc:	d9002b17 	ldw	r4,172(sp)
  80aa00:	1c47883a 	add	r3,r3,r17
  80aa04:	10800044 	addi	r2,r2,1
  80aa08:	41000015 	stw	r4,0(r8)
  80aa0c:	44400115 	stw	r17,4(r8)
  80aa10:	d8c02015 	stw	r3,128(sp)
  80aa14:	d8801f15 	stw	r2,124(sp)
  80aa18:	010001c4 	movi	r4,7
  80aa1c:	20bfd716 	blt	r4,r2,80a97c <__alt_mem_onchip_mem+0xff80297c>
  80aa20:	42000204 	addi	r8,r8,8
  80aa24:	003fdd06 	br	80a99c <__alt_mem_onchip_mem+0xff80299c>
  80aa28:	d9002c17 	ldw	r4,176(sp)
  80aa2c:	d9801e04 	addi	r6,sp,120
  80aa30:	b80b883a 	mov	r5,r23
  80aa34:	080f9000 	call	80f900 <__sprint_r>
  80aa38:	1039ed1e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80aa3c:	d8802617 	ldw	r2,152(sp)
  80aa40:	d8c02017 	ldw	r3,128(sp)
  80aa44:	da000404 	addi	r8,sp,16
  80aa48:	003e1006 	br	80a28c <__alt_mem_onchip_mem+0xff80228c>
  80aa4c:	00800044 	movi	r2,1
  80aa50:	10803fcc 	andi	r2,r2,255
  80aa54:	00c00044 	movi	r3,1
  80aa58:	10fa3526 	beq	r2,r3,809330 <__alt_mem_onchip_mem+0xff801330>
  80aa5c:	00c00084 	movi	r3,2
  80aa60:	10fbcb26 	beq	r2,r3,809990 <__alt_mem_onchip_mem+0xff801990>
  80aa64:	003a8f06 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  80aa68:	010020b4 	movhi	r4,130
  80aa6c:	2120e184 	addi	r4,r4,-31866
  80aa70:	d9003515 	stw	r4,212(sp)
  80aa74:	003b7606 	br	809850 <__alt_mem_onchip_mem+0xff801850>
  80aa78:	d8802917 	ldw	r2,164(sp)
  80aa7c:	00c00184 	movi	r3,6
  80aa80:	1880012e 	bgeu	r3,r2,80aa88 <___vfprintf_internal_r+0x1ca0>
  80aa84:	1805883a 	mov	r2,r3
  80aa88:	d8802e15 	stw	r2,184(sp)
  80aa8c:	1000ef16 	blt	r2,zero,80ae4c <___vfprintf_internal_r+0x2064>
  80aa90:	040020b4 	movhi	r16,130
  80aa94:	d8802a15 	stw	r2,168(sp)
  80aa98:	dcc02d15 	stw	r19,180(sp)
  80aa9c:	d8002915 	stw	zero,164(sp)
  80aaa0:	d8003215 	stw	zero,200(sp)
  80aaa4:	8420db04 	addi	r16,r16,-31892
  80aaa8:	0039883a 	mov	fp,zero
  80aaac:	003aa206 	br	809538 <__alt_mem_onchip_mem+0xff801538>
  80aab0:	0021883a 	mov	r16,zero
  80aab4:	003e0706 	br	80a2d4 <__alt_mem_onchip_mem+0xff8022d4>
  80aab8:	d9002c17 	ldw	r4,176(sp)
  80aabc:	d9801e04 	addi	r6,sp,120
  80aac0:	b80b883a 	mov	r5,r23
  80aac4:	080f9000 	call	80f900 <__sprint_r>
  80aac8:	1039c91e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80aacc:	d8802617 	ldw	r2,152(sp)
  80aad0:	d9403317 	ldw	r5,204(sp)
  80aad4:	d8c02017 	ldw	r3,128(sp)
  80aad8:	da000404 	addi	r8,sp,16
  80aadc:	2885c83a 	sub	r2,r5,r2
  80aae0:	003dfb06 	br	80a2d0 <__alt_mem_onchip_mem+0xff8022d0>
  80aae4:	9080004c 	andi	r2,r18,1
  80aae8:	103e8f1e 	bne	r2,zero,80a528 <__alt_mem_onchip_mem+0xff802528>
  80aaec:	d8802117 	ldw	r2,132(sp)
  80aaf0:	003e9e06 	br	80a56c <__alt_mem_onchip_mem+0xff80256c>
  80aaf4:	1025883a 	mov	r18,r2
  80aaf8:	0039883a 	mov	fp,zero
  80aafc:	00800084 	movi	r2,2
  80ab00:	003fd306 	br	80aa50 <__alt_mem_onchip_mem+0xff802a50>
  80ab04:	07000b44 	movi	fp,45
  80ab08:	df002785 	stb	fp,158(sp)
  80ab0c:	003a4006 	br	809410 <__alt_mem_onchip_mem+0xff801410>
  80ab10:	00c00b44 	movi	r3,45
  80ab14:	d8c02785 	stb	r3,158(sp)
  80ab18:	d8802a15 	stw	r2,168(sp)
  80ab1c:	dc802b17 	ldw	r18,172(sp)
  80ab20:	d8002915 	stw	zero,164(sp)
  80ab24:	07000b44 	movi	fp,45
  80ab28:	003a8006 	br	80952c <__alt_mem_onchip_mem+0xff80152c>
  80ab2c:	040020b4 	movhi	r16,130
  80ab30:	8420d004 	addi	r16,r16,-31936
  80ab34:	003f4706 	br	80a854 <__alt_mem_onchip_mem+0xff802854>
  80ab38:	d8c02d17 	ldw	r3,180(sp)
  80ab3c:	d9002f17 	ldw	r4,188(sp)
  80ab40:	18800017 	ldw	r2,0(r3)
  80ab44:	18c00104 	addi	r3,r3,4
  80ab48:	d8c02d15 	stw	r3,180(sp)
  80ab4c:	11000015 	stw	r4,0(r2)
  80ab50:	0038dd06 	br	808ec8 <__alt_mem_onchip_mem+0xff800ec8>
  80ab54:	dd802617 	ldw	r22,152(sp)
  80ab58:	00bfff44 	movi	r2,-3
  80ab5c:	b0801c16 	blt	r22,r2,80abd0 <___vfprintf_internal_r+0x1de8>
  80ab60:	d9402917 	ldw	r5,164(sp)
  80ab64:	2d801a16 	blt	r5,r22,80abd0 <___vfprintf_internal_r+0x1de8>
  80ab68:	dd803215 	stw	r22,200(sp)
  80ab6c:	003e8906 	br	80a594 <__alt_mem_onchip_mem+0xff802594>
  80ab70:	010020b4 	movhi	r4,130
  80ab74:	2120dd84 	addi	r4,r4,-31882
  80ab78:	d9002b15 	stw	r4,172(sp)
  80ab7c:	003c9106 	br	809dc4 <__alt_mem_onchip_mem+0xff801dc4>
  80ab80:	e005883a 	mov	r2,fp
  80ab84:	003e7906 	br	80a56c <__alt_mem_onchip_mem+0xff80256c>
  80ab88:	d9402917 	ldw	r5,164(sp)
  80ab8c:	df002783 	ldbu	fp,158(sp)
  80ab90:	dcc02d15 	stw	r19,180(sp)
  80ab94:	d9402a15 	stw	r5,168(sp)
  80ab98:	d9402e15 	stw	r5,184(sp)
  80ab9c:	d8002915 	stw	zero,164(sp)
  80aba0:	d8003215 	stw	zero,200(sp)
  80aba4:	003a5d06 	br	80951c <__alt_mem_onchip_mem+0xff80151c>
  80aba8:	9080004c 	andi	r2,r18,1
  80abac:	0039883a 	mov	fp,zero
  80abb0:	10000426 	beq	r2,zero,80abc4 <___vfprintf_internal_r+0x1ddc>
  80abb4:	00800c04 	movi	r2,48
  80abb8:	dc001dc4 	addi	r16,sp,119
  80abbc:	d8801dc5 	stb	r2,119(sp)
  80abc0:	003b8006 	br	8099c4 <__alt_mem_onchip_mem+0xff8019c4>
  80abc4:	d8002e15 	stw	zero,184(sp)
  80abc8:	dc001e04 	addi	r16,sp,120
  80abcc:	003a4d06 	br	809504 <__alt_mem_onchip_mem+0xff801504>
  80abd0:	8c7fff84 	addi	r17,r17,-2
  80abd4:	b5bfffc4 	addi	r22,r22,-1
  80abd8:	dd802615 	stw	r22,152(sp)
  80abdc:	dc4022c5 	stb	r17,139(sp)
  80abe0:	b000bf16 	blt	r22,zero,80aee0 <___vfprintf_internal_r+0x20f8>
  80abe4:	00800ac4 	movi	r2,43
  80abe8:	d8802305 	stb	r2,140(sp)
  80abec:	00800244 	movi	r2,9
  80abf0:	15807016 	blt	r2,r22,80adb4 <___vfprintf_internal_r+0x1fcc>
  80abf4:	00800c04 	movi	r2,48
  80abf8:	b5800c04 	addi	r22,r22,48
  80abfc:	d8802345 	stb	r2,141(sp)
  80ac00:	dd802385 	stb	r22,142(sp)
  80ac04:	d88023c4 	addi	r2,sp,143
  80ac08:	df0022c4 	addi	fp,sp,139
  80ac0c:	d8c03317 	ldw	r3,204(sp)
  80ac10:	1739c83a 	sub	fp,r2,fp
  80ac14:	d9003317 	ldw	r4,204(sp)
  80ac18:	e0c7883a 	add	r3,fp,r3
  80ac1c:	df003a15 	stw	fp,232(sp)
  80ac20:	d8c02e15 	stw	r3,184(sp)
  80ac24:	00800044 	movi	r2,1
  80ac28:	1100b30e 	bge	r2,r4,80aef8 <___vfprintf_internal_r+0x2110>
  80ac2c:	d8c02e17 	ldw	r3,184(sp)
  80ac30:	18c00044 	addi	r3,r3,1
  80ac34:	d8c02e15 	stw	r3,184(sp)
  80ac38:	1805883a 	mov	r2,r3
  80ac3c:	1800ac16 	blt	r3,zero,80aef0 <___vfprintf_internal_r+0x2108>
  80ac40:	d8003215 	stw	zero,200(sp)
  80ac44:	003e5d06 	br	80a5bc <__alt_mem_onchip_mem+0xff8025bc>
  80ac48:	d9002c17 	ldw	r4,176(sp)
  80ac4c:	d9801e04 	addi	r6,sp,120
  80ac50:	b80b883a 	mov	r5,r23
  80ac54:	080f9000 	call	80f900 <__sprint_r>
  80ac58:	1039651e 	bne	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff8011f0>
  80ac5c:	dc402617 	ldw	r17,152(sp)
  80ac60:	d8c02017 	ldw	r3,128(sp)
  80ac64:	d8801f17 	ldw	r2,124(sp)
  80ac68:	da000404 	addi	r8,sp,16
  80ac6c:	003ed606 	br	80a7c8 <__alt_mem_onchip_mem+0xff8027c8>
  80ac70:	582b883a 	mov	r21,r11
  80ac74:	d8002915 	stw	zero,164(sp)
  80ac78:	0038bd06 	br	808f70 <__alt_mem_onchip_mem+0xff800f70>
  80ac7c:	d8802917 	ldw	r2,164(sp)
  80ac80:	103e071e 	bne	r2,zero,80a4a0 <__alt_mem_onchip_mem+0xff8024a0>
  80ac84:	dc002915 	stw	r16,164(sp)
  80ac88:	003e0506 	br	80a4a0 <__alt_mem_onchip_mem+0xff8024a0>
  80ac8c:	d9002917 	ldw	r4,164(sp)
  80ac90:	20c00044 	addi	r3,r4,1
  80ac94:	003e0f06 	br	80a4d4 <__alt_mem_onchip_mem+0xff8024d4>
  80ac98:	01400184 	movi	r5,6
  80ac9c:	d9402915 	stw	r5,164(sp)
  80aca0:	003dff06 	br	80a4a0 <__alt_mem_onchip_mem+0xff8024a0>
  80aca4:	d8802104 	addi	r2,sp,132
  80aca8:	d8800315 	stw	r2,12(sp)
  80acac:	d8802504 	addi	r2,sp,148
  80acb0:	d8800215 	stw	r2,8(sp)
  80acb4:	d8802604 	addi	r2,sp,152
  80acb8:	d8800115 	stw	r2,4(sp)
  80acbc:	d8802917 	ldw	r2,164(sp)
  80acc0:	d9403617 	ldw	r5,216(sp)
  80acc4:	d9002c17 	ldw	r4,176(sp)
  80acc8:	d8800015 	stw	r2,0(sp)
  80accc:	01c000c4 	movi	r7,3
  80acd0:	980d883a 	mov	r6,r19
  80acd4:	da003d15 	stw	r8,244(sp)
  80acd8:	080b40c0 	call	80b40c <_dtoa_r>
  80acdc:	d8c02917 	ldw	r3,164(sp)
  80ace0:	da003d17 	ldw	r8,244(sp)
  80ace4:	1021883a 	mov	r16,r2
  80ace8:	10f9883a 	add	fp,r2,r3
  80acec:	81000007 	ldb	r4,0(r16)
  80acf0:	00800c04 	movi	r2,48
  80acf4:	20805e26 	beq	r4,r2,80ae70 <___vfprintf_internal_r+0x2088>
  80acf8:	d8c02617 	ldw	r3,152(sp)
  80acfc:	e0f9883a 	add	fp,fp,r3
  80ad00:	003e0a06 	br	80a52c <__alt_mem_onchip_mem+0xff80252c>
  80ad04:	00c00b44 	movi	r3,45
  80ad08:	24e0003c 	xorhi	r19,r4,32768
  80ad0c:	d8c02a05 	stb	r3,168(sp)
  80ad10:	003de906 	br	80a4b8 <__alt_mem_onchip_mem+0xff8024b8>
  80ad14:	d8c03217 	ldw	r3,200(sp)
  80ad18:	00c07a0e 	bge	zero,r3,80af04 <___vfprintf_internal_r+0x211c>
  80ad1c:	00800044 	movi	r2,1
  80ad20:	d9003317 	ldw	r4,204(sp)
  80ad24:	1105883a 	add	r2,r2,r4
  80ad28:	d8802e15 	stw	r2,184(sp)
  80ad2c:	10004e16 	blt	r2,zero,80ae68 <___vfprintf_internal_r+0x2080>
  80ad30:	044019c4 	movi	r17,103
  80ad34:	003e2106 	br	80a5bc <__alt_mem_onchip_mem+0xff8025bc>
  80ad38:	d9002917 	ldw	r4,164(sp)
  80ad3c:	d8802104 	addi	r2,sp,132
  80ad40:	d8800315 	stw	r2,12(sp)
  80ad44:	d9000015 	stw	r4,0(sp)
  80ad48:	d8802504 	addi	r2,sp,148
  80ad4c:	d9403617 	ldw	r5,216(sp)
  80ad50:	d9002c17 	ldw	r4,176(sp)
  80ad54:	d8800215 	stw	r2,8(sp)
  80ad58:	d8802604 	addi	r2,sp,152
  80ad5c:	d8800115 	stw	r2,4(sp)
  80ad60:	01c000c4 	movi	r7,3
  80ad64:	980d883a 	mov	r6,r19
  80ad68:	da003d15 	stw	r8,244(sp)
  80ad6c:	080b40c0 	call	80b40c <_dtoa_r>
  80ad70:	d8c02917 	ldw	r3,164(sp)
  80ad74:	da003d17 	ldw	r8,244(sp)
  80ad78:	1021883a 	mov	r16,r2
  80ad7c:	00801184 	movi	r2,70
  80ad80:	80f9883a 	add	fp,r16,r3
  80ad84:	88bfd926 	beq	r17,r2,80acec <__alt_mem_onchip_mem+0xff802cec>
  80ad88:	003de806 	br	80a52c <__alt_mem_onchip_mem+0xff80252c>
  80ad8c:	d9002917 	ldw	r4,164(sp)
  80ad90:	00c04d0e 	bge	zero,r3,80aec8 <___vfprintf_internal_r+0x20e0>
  80ad94:	2000441e 	bne	r4,zero,80aea8 <___vfprintf_internal_r+0x20c0>
  80ad98:	9480004c 	andi	r18,r18,1
  80ad9c:	9000421e 	bne	r18,zero,80aea8 <___vfprintf_internal_r+0x20c0>
  80ada0:	1805883a 	mov	r2,r3
  80ada4:	18007016 	blt	r3,zero,80af68 <___vfprintf_internal_r+0x2180>
  80ada8:	d8c03217 	ldw	r3,200(sp)
  80adac:	d8c02e15 	stw	r3,184(sp)
  80adb0:	003e0206 	br	80a5bc <__alt_mem_onchip_mem+0xff8025bc>
  80adb4:	df0022c4 	addi	fp,sp,139
  80adb8:	dc002915 	stw	r16,164(sp)
  80adbc:	4027883a 	mov	r19,r8
  80adc0:	e021883a 	mov	r16,fp
  80adc4:	b009883a 	mov	r4,r22
  80adc8:	01400284 	movi	r5,10
  80adcc:	0812e300 	call	812e30 <__modsi3>
  80add0:	10800c04 	addi	r2,r2,48
  80add4:	843fffc4 	addi	r16,r16,-1
  80add8:	b009883a 	mov	r4,r22
  80addc:	01400284 	movi	r5,10
  80ade0:	80800005 	stb	r2,0(r16)
  80ade4:	0812dac0 	call	812dac <__divsi3>
  80ade8:	102d883a 	mov	r22,r2
  80adec:	00800244 	movi	r2,9
  80adf0:	15bff416 	blt	r2,r22,80adc4 <__alt_mem_onchip_mem+0xff802dc4>
  80adf4:	9811883a 	mov	r8,r19
  80adf8:	b0800c04 	addi	r2,r22,48
  80adfc:	8027883a 	mov	r19,r16
  80ae00:	997fffc4 	addi	r5,r19,-1
  80ae04:	98bfffc5 	stb	r2,-1(r19)
  80ae08:	dc002917 	ldw	r16,164(sp)
  80ae0c:	2f006a2e 	bgeu	r5,fp,80afb8 <___vfprintf_internal_r+0x21d0>
  80ae10:	d9c02384 	addi	r7,sp,142
  80ae14:	3ccfc83a 	sub	r7,r7,r19
  80ae18:	d9002344 	addi	r4,sp,141
  80ae1c:	e1cf883a 	add	r7,fp,r7
  80ae20:	00000106 	br	80ae28 <___vfprintf_internal_r+0x2040>
  80ae24:	28800003 	ldbu	r2,0(r5)
  80ae28:	20800005 	stb	r2,0(r4)
  80ae2c:	21000044 	addi	r4,r4,1
  80ae30:	29400044 	addi	r5,r5,1
  80ae34:	393ffb1e 	bne	r7,r4,80ae24 <__alt_mem_onchip_mem+0xff802e24>
  80ae38:	d8802304 	addi	r2,sp,140
  80ae3c:	14c5c83a 	sub	r2,r2,r19
  80ae40:	d8c02344 	addi	r3,sp,141
  80ae44:	1885883a 	add	r2,r3,r2
  80ae48:	003f7006 	br	80ac0c <__alt_mem_onchip_mem+0xff802c0c>
  80ae4c:	0005883a 	mov	r2,zero
  80ae50:	003f0f06 	br	80aa90 <__alt_mem_onchip_mem+0xff802a90>
  80ae54:	d8c03217 	ldw	r3,200(sp)
  80ae58:	18c00044 	addi	r3,r3,1
  80ae5c:	d8c02e15 	stw	r3,184(sp)
  80ae60:	1805883a 	mov	r2,r3
  80ae64:	183fb20e 	bge	r3,zero,80ad30 <__alt_mem_onchip_mem+0xff802d30>
  80ae68:	0005883a 	mov	r2,zero
  80ae6c:	003fb006 	br	80ad30 <__alt_mem_onchip_mem+0xff802d30>
  80ae70:	d9003617 	ldw	r4,216(sp)
  80ae74:	000d883a 	mov	r6,zero
  80ae78:	000f883a 	mov	r7,zero
  80ae7c:	980b883a 	mov	r5,r19
  80ae80:	d8c03c15 	stw	r3,240(sp)
  80ae84:	da003d15 	stw	r8,244(sp)
  80ae88:	08138480 	call	813848 <__eqdf2>
  80ae8c:	d8c03c17 	ldw	r3,240(sp)
  80ae90:	da003d17 	ldw	r8,244(sp)
  80ae94:	103f9826 	beq	r2,zero,80acf8 <__alt_mem_onchip_mem+0xff802cf8>
  80ae98:	00800044 	movi	r2,1
  80ae9c:	10c7c83a 	sub	r3,r2,r3
  80aea0:	d8c02615 	stw	r3,152(sp)
  80aea4:	003f9506 	br	80acfc <__alt_mem_onchip_mem+0xff802cfc>
  80aea8:	d9002917 	ldw	r4,164(sp)
  80aeac:	d8c03217 	ldw	r3,200(sp)
  80aeb0:	20800044 	addi	r2,r4,1
  80aeb4:	1885883a 	add	r2,r3,r2
  80aeb8:	d8802e15 	stw	r2,184(sp)
  80aebc:	103dbf0e 	bge	r2,zero,80a5bc <__alt_mem_onchip_mem+0xff8025bc>
  80aec0:	0005883a 	mov	r2,zero
  80aec4:	003dbd06 	br	80a5bc <__alt_mem_onchip_mem+0xff8025bc>
  80aec8:	2000211e 	bne	r4,zero,80af50 <___vfprintf_internal_r+0x2168>
  80aecc:	9480004c 	andi	r18,r18,1
  80aed0:	90001f1e 	bne	r18,zero,80af50 <___vfprintf_internal_r+0x2168>
  80aed4:	00800044 	movi	r2,1
  80aed8:	d8802e15 	stw	r2,184(sp)
  80aedc:	003db706 	br	80a5bc <__alt_mem_onchip_mem+0xff8025bc>
  80aee0:	00800b44 	movi	r2,45
  80aee4:	05adc83a 	sub	r22,zero,r22
  80aee8:	d8802305 	stb	r2,140(sp)
  80aeec:	003f3f06 	br	80abec <__alt_mem_onchip_mem+0xff802bec>
  80aef0:	0005883a 	mov	r2,zero
  80aef4:	003f5206 	br	80ac40 <__alt_mem_onchip_mem+0xff802c40>
  80aef8:	90a4703a 	and	r18,r18,r2
  80aefc:	903f4e26 	beq	r18,zero,80ac38 <__alt_mem_onchip_mem+0xff802c38>
  80af00:	003f4a06 	br	80ac2c <__alt_mem_onchip_mem+0xff802c2c>
  80af04:	00800084 	movi	r2,2
  80af08:	10c5c83a 	sub	r2,r2,r3
  80af0c:	003f8406 	br	80ad20 <__alt_mem_onchip_mem+0xff802d20>
  80af10:	d8802d17 	ldw	r2,180(sp)
  80af14:	d9002d17 	ldw	r4,180(sp)
  80af18:	ac400043 	ldbu	r17,1(r21)
  80af1c:	10800017 	ldw	r2,0(r2)
  80af20:	582b883a 	mov	r21,r11
  80af24:	d8802915 	stw	r2,164(sp)
  80af28:	20800104 	addi	r2,r4,4
  80af2c:	d9002917 	ldw	r4,164(sp)
  80af30:	d8802d15 	stw	r2,180(sp)
  80af34:	203e7a0e 	bge	r4,zero,80a920 <__alt_mem_onchip_mem+0xff802920>
  80af38:	8c403fcc 	andi	r17,r17,255
  80af3c:	00bfffc4 	movi	r2,-1
  80af40:	8c40201c 	xori	r17,r17,128
  80af44:	d8802915 	stw	r2,164(sp)
  80af48:	8c7fe004 	addi	r17,r17,-128
  80af4c:	00380706 	br	808f6c <__alt_mem_onchip_mem+0xff800f6c>
  80af50:	d8c02917 	ldw	r3,164(sp)
  80af54:	18c00084 	addi	r3,r3,2
  80af58:	d8c02e15 	stw	r3,184(sp)
  80af5c:	1805883a 	mov	r2,r3
  80af60:	183d960e 	bge	r3,zero,80a5bc <__alt_mem_onchip_mem+0xff8025bc>
  80af64:	003fd606 	br	80aec0 <__alt_mem_onchip_mem+0xff802ec0>
  80af68:	0005883a 	mov	r2,zero
  80af6c:	003f8e06 	br	80ada8 <__alt_mem_onchip_mem+0xff802da8>
  80af70:	9080004c 	andi	r2,r18,1
  80af74:	103f811e 	bne	r2,zero,80ad7c <__alt_mem_onchip_mem+0xff802d7c>
  80af78:	d8802117 	ldw	r2,132(sp)
  80af7c:	1405c83a 	sub	r2,r2,r16
  80af80:	d8803315 	stw	r2,204(sp)
  80af84:	b47ef326 	beq	r22,r17,80ab54 <__alt_mem_onchip_mem+0xff802b54>
  80af88:	dd802617 	ldw	r22,152(sp)
  80af8c:	003f1106 	br	80abd4 <__alt_mem_onchip_mem+0xff802bd4>
  80af90:	d9c02785 	stb	r7,158(sp)
  80af94:	00390406 	br	8093a8 <__alt_mem_onchip_mem+0xff8013a8>
  80af98:	d9c02785 	stb	r7,158(sp)
  80af9c:	0038d306 	br	8092ec <__alt_mem_onchip_mem+0xff8012ec>
  80afa0:	d9c02785 	stb	r7,158(sp)
  80afa4:	003a6106 	br	80992c <__alt_mem_onchip_mem+0xff80192c>
  80afa8:	d9c02785 	stb	r7,158(sp)
  80afac:	003af806 	br	809b90 <__alt_mem_onchip_mem+0xff801b90>
  80afb0:	0005883a 	mov	r2,zero
  80afb4:	003d7e06 	br	80a5b0 <__alt_mem_onchip_mem+0xff8025b0>
  80afb8:	d8802344 	addi	r2,sp,141
  80afbc:	003f1306 	br	80ac0c <__alt_mem_onchip_mem+0xff802c0c>
  80afc0:	d9c02785 	stb	r7,158(sp)
  80afc4:	00392306 	br	809454 <__alt_mem_onchip_mem+0xff801454>
  80afc8:	d9c02785 	stb	r7,158(sp)
  80afcc:	003aa906 	br	809a74 <__alt_mem_onchip_mem+0xff801a74>
  80afd0:	d9c02785 	stb	r7,158(sp)
  80afd4:	003a3d06 	br	8098cc <__alt_mem_onchip_mem+0xff8018cc>
  80afd8:	d9c02785 	stb	r7,158(sp)
  80afdc:	003aca06 	br	809b08 <__alt_mem_onchip_mem+0xff801b08>

0080afe0 <__vfprintf_internal>:
  80afe0:	008020b4 	movhi	r2,130
  80afe4:	10a91604 	addi	r2,r2,-23464
  80afe8:	300f883a 	mov	r7,r6
  80afec:	280d883a 	mov	r6,r5
  80aff0:	200b883a 	mov	r5,r4
  80aff4:	11000017 	ldw	r4,0(r2)
  80aff8:	0808de81 	jmpi	808de8 <___vfprintf_internal_r>

0080affc <__sbprintf>:
  80affc:	2880030b 	ldhu	r2,12(r5)
  80b000:	2ac01917 	ldw	r11,100(r5)
  80b004:	2a80038b 	ldhu	r10,14(r5)
  80b008:	2a400717 	ldw	r9,28(r5)
  80b00c:	2a000917 	ldw	r8,36(r5)
  80b010:	defee204 	addi	sp,sp,-1144
  80b014:	00c10004 	movi	r3,1024
  80b018:	dc011a15 	stw	r16,1128(sp)
  80b01c:	10bfff4c 	andi	r2,r2,65533
  80b020:	2821883a 	mov	r16,r5
  80b024:	d8cb883a 	add	r5,sp,r3
  80b028:	dc811c15 	stw	r18,1136(sp)
  80b02c:	dc411b15 	stw	r17,1132(sp)
  80b030:	dfc11d15 	stw	ra,1140(sp)
  80b034:	2025883a 	mov	r18,r4
  80b038:	d881030d 	sth	r2,1036(sp)
  80b03c:	dac11915 	stw	r11,1124(sp)
  80b040:	da81038d 	sth	r10,1038(sp)
  80b044:	da410715 	stw	r9,1052(sp)
  80b048:	da010915 	stw	r8,1060(sp)
  80b04c:	dec10015 	stw	sp,1024(sp)
  80b050:	dec10415 	stw	sp,1040(sp)
  80b054:	d8c10215 	stw	r3,1032(sp)
  80b058:	d8c10515 	stw	r3,1044(sp)
  80b05c:	d8010615 	stw	zero,1048(sp)
  80b060:	0808de80 	call	808de8 <___vfprintf_internal_r>
  80b064:	1023883a 	mov	r17,r2
  80b068:	10000416 	blt	r2,zero,80b07c <__sbprintf+0x80>
  80b06c:	d9410004 	addi	r5,sp,1024
  80b070:	9009883a 	mov	r4,r18
  80b074:	080ccb00 	call	80ccb0 <_fflush_r>
  80b078:	10000d1e 	bne	r2,zero,80b0b0 <__sbprintf+0xb4>
  80b07c:	d881030b 	ldhu	r2,1036(sp)
  80b080:	1080100c 	andi	r2,r2,64
  80b084:	10000326 	beq	r2,zero,80b094 <__sbprintf+0x98>
  80b088:	8080030b 	ldhu	r2,12(r16)
  80b08c:	10801014 	ori	r2,r2,64
  80b090:	8080030d 	sth	r2,12(r16)
  80b094:	8805883a 	mov	r2,r17
  80b098:	dfc11d17 	ldw	ra,1140(sp)
  80b09c:	dc811c17 	ldw	r18,1136(sp)
  80b0a0:	dc411b17 	ldw	r17,1132(sp)
  80b0a4:	dc011a17 	ldw	r16,1128(sp)
  80b0a8:	dec11e04 	addi	sp,sp,1144
  80b0ac:	f800283a 	ret
  80b0b0:	047fffc4 	movi	r17,-1
  80b0b4:	003ff106 	br	80b07c <__alt_mem_onchip_mem+0xff80307c>

0080b0b8 <__swsetup_r>:
  80b0b8:	008020b4 	movhi	r2,130
  80b0bc:	defffd04 	addi	sp,sp,-12
  80b0c0:	10a91604 	addi	r2,r2,-23464
  80b0c4:	dc400115 	stw	r17,4(sp)
  80b0c8:	2023883a 	mov	r17,r4
  80b0cc:	11000017 	ldw	r4,0(r2)
  80b0d0:	dc000015 	stw	r16,0(sp)
  80b0d4:	dfc00215 	stw	ra,8(sp)
  80b0d8:	2821883a 	mov	r16,r5
  80b0dc:	20000226 	beq	r4,zero,80b0e8 <__swsetup_r+0x30>
  80b0e0:	20800e17 	ldw	r2,56(r4)
  80b0e4:	10003126 	beq	r2,zero,80b1ac <__swsetup_r+0xf4>
  80b0e8:	8080030b 	ldhu	r2,12(r16)
  80b0ec:	10c0020c 	andi	r3,r2,8
  80b0f0:	1009883a 	mov	r4,r2
  80b0f4:	18000f26 	beq	r3,zero,80b134 <__swsetup_r+0x7c>
  80b0f8:	80c00417 	ldw	r3,16(r16)
  80b0fc:	18001526 	beq	r3,zero,80b154 <__swsetup_r+0x9c>
  80b100:	1100004c 	andi	r4,r2,1
  80b104:	20001c1e 	bne	r4,zero,80b178 <__swsetup_r+0xc0>
  80b108:	1080008c 	andi	r2,r2,2
  80b10c:	1000291e 	bne	r2,zero,80b1b4 <__swsetup_r+0xfc>
  80b110:	80800517 	ldw	r2,20(r16)
  80b114:	80800215 	stw	r2,8(r16)
  80b118:	18001c26 	beq	r3,zero,80b18c <__swsetup_r+0xd4>
  80b11c:	0005883a 	mov	r2,zero
  80b120:	dfc00217 	ldw	ra,8(sp)
  80b124:	dc400117 	ldw	r17,4(sp)
  80b128:	dc000017 	ldw	r16,0(sp)
  80b12c:	dec00304 	addi	sp,sp,12
  80b130:	f800283a 	ret
  80b134:	2080040c 	andi	r2,r4,16
  80b138:	10002e26 	beq	r2,zero,80b1f4 <__swsetup_r+0x13c>
  80b13c:	2080010c 	andi	r2,r4,4
  80b140:	10001e1e 	bne	r2,zero,80b1bc <__swsetup_r+0x104>
  80b144:	80c00417 	ldw	r3,16(r16)
  80b148:	20800214 	ori	r2,r4,8
  80b14c:	8080030d 	sth	r2,12(r16)
  80b150:	183feb1e 	bne	r3,zero,80b100 <__alt_mem_onchip_mem+0xff803100>
  80b154:	1100a00c 	andi	r4,r2,640
  80b158:	01408004 	movi	r5,512
  80b15c:	217fe826 	beq	r4,r5,80b100 <__alt_mem_onchip_mem+0xff803100>
  80b160:	800b883a 	mov	r5,r16
  80b164:	8809883a 	mov	r4,r17
  80b168:	080d7740 	call	80d774 <__smakebuf_r>
  80b16c:	8080030b 	ldhu	r2,12(r16)
  80b170:	80c00417 	ldw	r3,16(r16)
  80b174:	003fe206 	br	80b100 <__alt_mem_onchip_mem+0xff803100>
  80b178:	80800517 	ldw	r2,20(r16)
  80b17c:	80000215 	stw	zero,8(r16)
  80b180:	0085c83a 	sub	r2,zero,r2
  80b184:	80800615 	stw	r2,24(r16)
  80b188:	183fe41e 	bne	r3,zero,80b11c <__alt_mem_onchip_mem+0xff80311c>
  80b18c:	80c0030b 	ldhu	r3,12(r16)
  80b190:	0005883a 	mov	r2,zero
  80b194:	1900200c 	andi	r4,r3,128
  80b198:	203fe126 	beq	r4,zero,80b120 <__alt_mem_onchip_mem+0xff803120>
  80b19c:	18c01014 	ori	r3,r3,64
  80b1a0:	80c0030d 	sth	r3,12(r16)
  80b1a4:	00bfffc4 	movi	r2,-1
  80b1a8:	003fdd06 	br	80b120 <__alt_mem_onchip_mem+0xff803120>
  80b1ac:	080d08c0 	call	80d08c <__sinit>
  80b1b0:	003fcd06 	br	80b0e8 <__alt_mem_onchip_mem+0xff8030e8>
  80b1b4:	0005883a 	mov	r2,zero
  80b1b8:	003fd606 	br	80b114 <__alt_mem_onchip_mem+0xff803114>
  80b1bc:	81400c17 	ldw	r5,48(r16)
  80b1c0:	28000626 	beq	r5,zero,80b1dc <__swsetup_r+0x124>
  80b1c4:	80801004 	addi	r2,r16,64
  80b1c8:	28800326 	beq	r5,r2,80b1d8 <__swsetup_r+0x120>
  80b1cc:	8809883a 	mov	r4,r17
  80b1d0:	080d2000 	call	80d200 <_free_r>
  80b1d4:	8100030b 	ldhu	r4,12(r16)
  80b1d8:	80000c15 	stw	zero,48(r16)
  80b1dc:	80c00417 	ldw	r3,16(r16)
  80b1e0:	00bff6c4 	movi	r2,-37
  80b1e4:	1108703a 	and	r4,r2,r4
  80b1e8:	80000115 	stw	zero,4(r16)
  80b1ec:	80c00015 	stw	r3,0(r16)
  80b1f0:	003fd506 	br	80b148 <__alt_mem_onchip_mem+0xff803148>
  80b1f4:	00800244 	movi	r2,9
  80b1f8:	88800015 	stw	r2,0(r17)
  80b1fc:	20801014 	ori	r2,r4,64
  80b200:	8080030d 	sth	r2,12(r16)
  80b204:	00bfffc4 	movi	r2,-1
  80b208:	003fc506 	br	80b120 <__alt_mem_onchip_mem+0xff803120>

0080b20c <quorem>:
  80b20c:	defff704 	addi	sp,sp,-36
  80b210:	dc800215 	stw	r18,8(sp)
  80b214:	20800417 	ldw	r2,16(r4)
  80b218:	2c800417 	ldw	r18,16(r5)
  80b21c:	dfc00815 	stw	ra,32(sp)
  80b220:	ddc00715 	stw	r23,28(sp)
  80b224:	dd800615 	stw	r22,24(sp)
  80b228:	dd400515 	stw	r21,20(sp)
  80b22c:	dd000415 	stw	r20,16(sp)
  80b230:	dcc00315 	stw	r19,12(sp)
  80b234:	dc400115 	stw	r17,4(sp)
  80b238:	dc000015 	stw	r16,0(sp)
  80b23c:	14807116 	blt	r2,r18,80b404 <quorem+0x1f8>
  80b240:	94bfffc4 	addi	r18,r18,-1
  80b244:	94ad883a 	add	r22,r18,r18
  80b248:	b5ad883a 	add	r22,r22,r22
  80b24c:	2c400504 	addi	r17,r5,20
  80b250:	8da9883a 	add	r20,r17,r22
  80b254:	25400504 	addi	r21,r4,20
  80b258:	282f883a 	mov	r23,r5
  80b25c:	adad883a 	add	r22,r21,r22
  80b260:	a1400017 	ldw	r5,0(r20)
  80b264:	2021883a 	mov	r16,r4
  80b268:	b1000017 	ldw	r4,0(r22)
  80b26c:	29400044 	addi	r5,r5,1
  80b270:	0812ea40 	call	812ea4 <__udivsi3>
  80b274:	1027883a 	mov	r19,r2
  80b278:	10002c26 	beq	r2,zero,80b32c <quorem+0x120>
  80b27c:	a813883a 	mov	r9,r21
  80b280:	880b883a 	mov	r5,r17
  80b284:	0009883a 	mov	r4,zero
  80b288:	000d883a 	mov	r6,zero
  80b28c:	2a000017 	ldw	r8,0(r5)
  80b290:	49c00017 	ldw	r7,0(r9)
  80b294:	29400104 	addi	r5,r5,4
  80b298:	40bfffcc 	andi	r2,r8,65535
  80b29c:	14c5383a 	mul	r2,r2,r19
  80b2a0:	4010d43a 	srli	r8,r8,16
  80b2a4:	38ffffcc 	andi	r3,r7,65535
  80b2a8:	1105883a 	add	r2,r2,r4
  80b2ac:	1008d43a 	srli	r4,r2,16
  80b2b0:	44d1383a 	mul	r8,r8,r19
  80b2b4:	198d883a 	add	r6,r3,r6
  80b2b8:	10ffffcc 	andi	r3,r2,65535
  80b2bc:	30c7c83a 	sub	r3,r6,r3
  80b2c0:	380ed43a 	srli	r7,r7,16
  80b2c4:	4105883a 	add	r2,r8,r4
  80b2c8:	180dd43a 	srai	r6,r3,16
  80b2cc:	113fffcc 	andi	r4,r2,65535
  80b2d0:	390fc83a 	sub	r7,r7,r4
  80b2d4:	398d883a 	add	r6,r7,r6
  80b2d8:	300e943a 	slli	r7,r6,16
  80b2dc:	18ffffcc 	andi	r3,r3,65535
  80b2e0:	1008d43a 	srli	r4,r2,16
  80b2e4:	38ceb03a 	or	r7,r7,r3
  80b2e8:	49c00015 	stw	r7,0(r9)
  80b2ec:	300dd43a 	srai	r6,r6,16
  80b2f0:	4a400104 	addi	r9,r9,4
  80b2f4:	a17fe52e 	bgeu	r20,r5,80b28c <__alt_mem_onchip_mem+0xff80328c>
  80b2f8:	b0800017 	ldw	r2,0(r22)
  80b2fc:	10000b1e 	bne	r2,zero,80b32c <quorem+0x120>
  80b300:	b0bfff04 	addi	r2,r22,-4
  80b304:	a880082e 	bgeu	r21,r2,80b328 <quorem+0x11c>
  80b308:	b0ffff17 	ldw	r3,-4(r22)
  80b30c:	18000326 	beq	r3,zero,80b31c <quorem+0x110>
  80b310:	00000506 	br	80b328 <quorem+0x11c>
  80b314:	10c00017 	ldw	r3,0(r2)
  80b318:	1800031e 	bne	r3,zero,80b328 <quorem+0x11c>
  80b31c:	10bfff04 	addi	r2,r2,-4
  80b320:	94bfffc4 	addi	r18,r18,-1
  80b324:	a8bffb36 	bltu	r21,r2,80b314 <__alt_mem_onchip_mem+0xff803314>
  80b328:	84800415 	stw	r18,16(r16)
  80b32c:	b80b883a 	mov	r5,r23
  80b330:	8009883a 	mov	r4,r16
  80b334:	080ed580 	call	80ed58 <__mcmp>
  80b338:	10002616 	blt	r2,zero,80b3d4 <quorem+0x1c8>
  80b33c:	9cc00044 	addi	r19,r19,1
  80b340:	a805883a 	mov	r2,r21
  80b344:	000b883a 	mov	r5,zero
  80b348:	11000017 	ldw	r4,0(r2)
  80b34c:	89800017 	ldw	r6,0(r17)
  80b350:	10800104 	addi	r2,r2,4
  80b354:	20ffffcc 	andi	r3,r4,65535
  80b358:	194b883a 	add	r5,r3,r5
  80b35c:	30ffffcc 	andi	r3,r6,65535
  80b360:	28c7c83a 	sub	r3,r5,r3
  80b364:	300cd43a 	srli	r6,r6,16
  80b368:	2008d43a 	srli	r4,r4,16
  80b36c:	180bd43a 	srai	r5,r3,16
  80b370:	18ffffcc 	andi	r3,r3,65535
  80b374:	2189c83a 	sub	r4,r4,r6
  80b378:	2149883a 	add	r4,r4,r5
  80b37c:	200c943a 	slli	r6,r4,16
  80b380:	8c400104 	addi	r17,r17,4
  80b384:	200bd43a 	srai	r5,r4,16
  80b388:	30c6b03a 	or	r3,r6,r3
  80b38c:	10ffff15 	stw	r3,-4(r2)
  80b390:	a47fed2e 	bgeu	r20,r17,80b348 <__alt_mem_onchip_mem+0xff803348>
  80b394:	9485883a 	add	r2,r18,r18
  80b398:	1085883a 	add	r2,r2,r2
  80b39c:	a887883a 	add	r3,r21,r2
  80b3a0:	18800017 	ldw	r2,0(r3)
  80b3a4:	10000b1e 	bne	r2,zero,80b3d4 <quorem+0x1c8>
  80b3a8:	18bfff04 	addi	r2,r3,-4
  80b3ac:	a880082e 	bgeu	r21,r2,80b3d0 <quorem+0x1c4>
  80b3b0:	18ffff17 	ldw	r3,-4(r3)
  80b3b4:	18000326 	beq	r3,zero,80b3c4 <quorem+0x1b8>
  80b3b8:	00000506 	br	80b3d0 <quorem+0x1c4>
  80b3bc:	10c00017 	ldw	r3,0(r2)
  80b3c0:	1800031e 	bne	r3,zero,80b3d0 <quorem+0x1c4>
  80b3c4:	10bfff04 	addi	r2,r2,-4
  80b3c8:	94bfffc4 	addi	r18,r18,-1
  80b3cc:	a8bffb36 	bltu	r21,r2,80b3bc <__alt_mem_onchip_mem+0xff8033bc>
  80b3d0:	84800415 	stw	r18,16(r16)
  80b3d4:	9805883a 	mov	r2,r19
  80b3d8:	dfc00817 	ldw	ra,32(sp)
  80b3dc:	ddc00717 	ldw	r23,28(sp)
  80b3e0:	dd800617 	ldw	r22,24(sp)
  80b3e4:	dd400517 	ldw	r21,20(sp)
  80b3e8:	dd000417 	ldw	r20,16(sp)
  80b3ec:	dcc00317 	ldw	r19,12(sp)
  80b3f0:	dc800217 	ldw	r18,8(sp)
  80b3f4:	dc400117 	ldw	r17,4(sp)
  80b3f8:	dc000017 	ldw	r16,0(sp)
  80b3fc:	dec00904 	addi	sp,sp,36
  80b400:	f800283a 	ret
  80b404:	0005883a 	mov	r2,zero
  80b408:	003ff306 	br	80b3d8 <__alt_mem_onchip_mem+0xff8033d8>

0080b40c <_dtoa_r>:
  80b40c:	20801017 	ldw	r2,64(r4)
  80b410:	deffde04 	addi	sp,sp,-136
  80b414:	df002015 	stw	fp,128(sp)
  80b418:	dcc01b15 	stw	r19,108(sp)
  80b41c:	dc801a15 	stw	r18,104(sp)
  80b420:	dc401915 	stw	r17,100(sp)
  80b424:	dc001815 	stw	r16,96(sp)
  80b428:	dfc02115 	stw	ra,132(sp)
  80b42c:	ddc01f15 	stw	r23,124(sp)
  80b430:	dd801e15 	stw	r22,120(sp)
  80b434:	dd401d15 	stw	r21,116(sp)
  80b438:	dd001c15 	stw	r20,112(sp)
  80b43c:	d9c00315 	stw	r7,12(sp)
  80b440:	2039883a 	mov	fp,r4
  80b444:	3023883a 	mov	r17,r6
  80b448:	2825883a 	mov	r18,r5
  80b44c:	dc002417 	ldw	r16,144(sp)
  80b450:	3027883a 	mov	r19,r6
  80b454:	10000826 	beq	r2,zero,80b478 <_dtoa_r+0x6c>
  80b458:	21801117 	ldw	r6,68(r4)
  80b45c:	00c00044 	movi	r3,1
  80b460:	100b883a 	mov	r5,r2
  80b464:	1986983a 	sll	r3,r3,r6
  80b468:	11800115 	stw	r6,4(r2)
  80b46c:	10c00215 	stw	r3,8(r2)
  80b470:	080e5380 	call	80e538 <_Bfree>
  80b474:	e0001015 	stw	zero,64(fp)
  80b478:	88002e16 	blt	r17,zero,80b534 <_dtoa_r+0x128>
  80b47c:	80000015 	stw	zero,0(r16)
  80b480:	889ffc2c 	andhi	r2,r17,32752
  80b484:	00dffc34 	movhi	r3,32752
  80b488:	10c01c26 	beq	r2,r3,80b4fc <_dtoa_r+0xf0>
  80b48c:	000d883a 	mov	r6,zero
  80b490:	000f883a 	mov	r7,zero
  80b494:	9009883a 	mov	r4,r18
  80b498:	980b883a 	mov	r5,r19
  80b49c:	08138480 	call	813848 <__eqdf2>
  80b4a0:	10002b1e 	bne	r2,zero,80b550 <_dtoa_r+0x144>
  80b4a4:	d9c02317 	ldw	r7,140(sp)
  80b4a8:	00800044 	movi	r2,1
  80b4ac:	38800015 	stw	r2,0(r7)
  80b4b0:	d8802517 	ldw	r2,148(sp)
  80b4b4:	10019e26 	beq	r2,zero,80bb30 <_dtoa_r+0x724>
  80b4b8:	d8c02517 	ldw	r3,148(sp)
  80b4bc:	008020b4 	movhi	r2,130
  80b4c0:	10a0dd44 	addi	r2,r2,-31883
  80b4c4:	18800015 	stw	r2,0(r3)
  80b4c8:	10bfffc4 	addi	r2,r2,-1
  80b4cc:	dfc02117 	ldw	ra,132(sp)
  80b4d0:	df002017 	ldw	fp,128(sp)
  80b4d4:	ddc01f17 	ldw	r23,124(sp)
  80b4d8:	dd801e17 	ldw	r22,120(sp)
  80b4dc:	dd401d17 	ldw	r21,116(sp)
  80b4e0:	dd001c17 	ldw	r20,112(sp)
  80b4e4:	dcc01b17 	ldw	r19,108(sp)
  80b4e8:	dc801a17 	ldw	r18,104(sp)
  80b4ec:	dc401917 	ldw	r17,100(sp)
  80b4f0:	dc001817 	ldw	r16,96(sp)
  80b4f4:	dec02204 	addi	sp,sp,136
  80b4f8:	f800283a 	ret
  80b4fc:	d8c02317 	ldw	r3,140(sp)
  80b500:	0089c3c4 	movi	r2,9999
  80b504:	18800015 	stw	r2,0(r3)
  80b508:	90017726 	beq	r18,zero,80bae8 <_dtoa_r+0x6dc>
  80b50c:	008020b4 	movhi	r2,130
  80b510:	10a0e904 	addi	r2,r2,-31836
  80b514:	d9002517 	ldw	r4,148(sp)
  80b518:	203fec26 	beq	r4,zero,80b4cc <__alt_mem_onchip_mem+0xff8034cc>
  80b51c:	10c000c7 	ldb	r3,3(r2)
  80b520:	1801781e 	bne	r3,zero,80bb04 <_dtoa_r+0x6f8>
  80b524:	10c000c4 	addi	r3,r2,3
  80b528:	d9802517 	ldw	r6,148(sp)
  80b52c:	30c00015 	stw	r3,0(r6)
  80b530:	003fe606 	br	80b4cc <__alt_mem_onchip_mem+0xff8034cc>
  80b534:	04e00034 	movhi	r19,32768
  80b538:	9cffffc4 	addi	r19,r19,-1
  80b53c:	00800044 	movi	r2,1
  80b540:	8ce6703a 	and	r19,r17,r19
  80b544:	80800015 	stw	r2,0(r16)
  80b548:	9823883a 	mov	r17,r19
  80b54c:	003fcc06 	br	80b480 <__alt_mem_onchip_mem+0xff803480>
  80b550:	d8800204 	addi	r2,sp,8
  80b554:	d8800015 	stw	r2,0(sp)
  80b558:	d9c00104 	addi	r7,sp,4
  80b55c:	900b883a 	mov	r5,r18
  80b560:	980d883a 	mov	r6,r19
  80b564:	e009883a 	mov	r4,fp
  80b568:	8820d53a 	srli	r16,r17,20
  80b56c:	080f1240 	call	80f124 <__d2b>
  80b570:	d8800915 	stw	r2,36(sp)
  80b574:	8001651e 	bne	r16,zero,80bb0c <_dtoa_r+0x700>
  80b578:	dd800217 	ldw	r22,8(sp)
  80b57c:	dc000117 	ldw	r16,4(sp)
  80b580:	00800804 	movi	r2,32
  80b584:	b421883a 	add	r16,r22,r16
  80b588:	80c10c84 	addi	r3,r16,1074
  80b58c:	10c2d10e 	bge	r2,r3,80c0d4 <_dtoa_r+0xcc8>
  80b590:	00801004 	movi	r2,64
  80b594:	81010484 	addi	r4,r16,1042
  80b598:	10c7c83a 	sub	r3,r2,r3
  80b59c:	9108d83a 	srl	r4,r18,r4
  80b5a0:	88e2983a 	sll	r17,r17,r3
  80b5a4:	2448b03a 	or	r4,r4,r17
  80b5a8:	08140680 	call	814068 <__floatunsidf>
  80b5ac:	017f8434 	movhi	r5,65040
  80b5b0:	01800044 	movi	r6,1
  80b5b4:	1009883a 	mov	r4,r2
  80b5b8:	194b883a 	add	r5,r3,r5
  80b5bc:	843fffc4 	addi	r16,r16,-1
  80b5c0:	d9801115 	stw	r6,68(sp)
  80b5c4:	000d883a 	mov	r6,zero
  80b5c8:	01cffe34 	movhi	r7,16376
  80b5cc:	08083400 	call	808340 <__subdf3>
  80b5d0:	0198dbf4 	movhi	r6,25455
  80b5d4:	01cff4f4 	movhi	r7,16339
  80b5d8:	3190d844 	addi	r6,r6,17249
  80b5dc:	39e1e9c4 	addi	r7,r7,-30809
  80b5e0:	1009883a 	mov	r4,r2
  80b5e4:	180b883a 	mov	r5,r3
  80b5e8:	08138d00 	call	8138d0 <__muldf3>
  80b5ec:	01a2d874 	movhi	r6,35681
  80b5f0:	01cff1f4 	movhi	r7,16327
  80b5f4:	31b22cc4 	addi	r6,r6,-14157
  80b5f8:	39e28a04 	addi	r7,r7,-30168
  80b5fc:	180b883a 	mov	r5,r3
  80b600:	1009883a 	mov	r4,r2
  80b604:	08078c40 	call	8078c4 <__adddf3>
  80b608:	8009883a 	mov	r4,r16
  80b60c:	1029883a 	mov	r20,r2
  80b610:	1823883a 	mov	r17,r3
  80b614:	0808c3c0 	call	808c3c <__floatsidf>
  80b618:	019427f4 	movhi	r6,20639
  80b61c:	01cff4f4 	movhi	r7,16339
  80b620:	319e7ec4 	addi	r6,r6,31227
  80b624:	39d104c4 	addi	r7,r7,17427
  80b628:	1009883a 	mov	r4,r2
  80b62c:	180b883a 	mov	r5,r3
  80b630:	08138d00 	call	8138d0 <__muldf3>
  80b634:	100d883a 	mov	r6,r2
  80b638:	180f883a 	mov	r7,r3
  80b63c:	a009883a 	mov	r4,r20
  80b640:	880b883a 	mov	r5,r17
  80b644:	08078c40 	call	8078c4 <__adddf3>
  80b648:	1009883a 	mov	r4,r2
  80b64c:	180b883a 	mov	r5,r3
  80b650:	1029883a 	mov	r20,r2
  80b654:	1823883a 	mov	r17,r3
  80b658:	0813fe80 	call	813fe8 <__fixdfsi>
  80b65c:	000d883a 	mov	r6,zero
  80b660:	000f883a 	mov	r7,zero
  80b664:	a009883a 	mov	r4,r20
  80b668:	880b883a 	mov	r5,r17
  80b66c:	d8800515 	stw	r2,20(sp)
  80b670:	080824c0 	call	80824c <__ledf2>
  80b674:	10028716 	blt	r2,zero,80c094 <_dtoa_r+0xc88>
  80b678:	d8c00517 	ldw	r3,20(sp)
  80b67c:	00800584 	movi	r2,22
  80b680:	10c27536 	bltu	r2,r3,80c058 <_dtoa_r+0xc4c>
  80b684:	180490fa 	slli	r2,r3,3
  80b688:	00c020b4 	movhi	r3,130
  80b68c:	18e10504 	addi	r3,r3,-31724
  80b690:	1885883a 	add	r2,r3,r2
  80b694:	11000017 	ldw	r4,0(r2)
  80b698:	11400117 	ldw	r5,4(r2)
  80b69c:	900d883a 	mov	r6,r18
  80b6a0:	980f883a 	mov	r7,r19
  80b6a4:	08081700 	call	808170 <__gedf2>
  80b6a8:	00828d0e 	bge	zero,r2,80c0e0 <_dtoa_r+0xcd4>
  80b6ac:	d9000517 	ldw	r4,20(sp)
  80b6b0:	d8000e15 	stw	zero,56(sp)
  80b6b4:	213fffc4 	addi	r4,r4,-1
  80b6b8:	d9000515 	stw	r4,20(sp)
  80b6bc:	b42dc83a 	sub	r22,r22,r16
  80b6c0:	b5bfffc4 	addi	r22,r22,-1
  80b6c4:	b0026f16 	blt	r22,zero,80c084 <_dtoa_r+0xc78>
  80b6c8:	d8000815 	stw	zero,32(sp)
  80b6cc:	d9c00517 	ldw	r7,20(sp)
  80b6d0:	38026416 	blt	r7,zero,80c064 <_dtoa_r+0xc58>
  80b6d4:	b1ed883a 	add	r22,r22,r7
  80b6d8:	d9c00d15 	stw	r7,52(sp)
  80b6dc:	d8000a15 	stw	zero,40(sp)
  80b6e0:	d9800317 	ldw	r6,12(sp)
  80b6e4:	00800244 	movi	r2,9
  80b6e8:	11811436 	bltu	r2,r6,80bb3c <_dtoa_r+0x730>
  80b6ec:	00800144 	movi	r2,5
  80b6f0:	1184e10e 	bge	r2,r6,80ca78 <_dtoa_r+0x166c>
  80b6f4:	31bfff04 	addi	r6,r6,-4
  80b6f8:	d9800315 	stw	r6,12(sp)
  80b6fc:	0023883a 	mov	r17,zero
  80b700:	d9800317 	ldw	r6,12(sp)
  80b704:	008000c4 	movi	r2,3
  80b708:	30836726 	beq	r6,r2,80c4a8 <_dtoa_r+0x109c>
  80b70c:	1183410e 	bge	r2,r6,80c414 <_dtoa_r+0x1008>
  80b710:	d9c00317 	ldw	r7,12(sp)
  80b714:	00800104 	movi	r2,4
  80b718:	38827c26 	beq	r7,r2,80c10c <_dtoa_r+0xd00>
  80b71c:	00800144 	movi	r2,5
  80b720:	3884c41e 	bne	r7,r2,80ca34 <_dtoa_r+0x1628>
  80b724:	00800044 	movi	r2,1
  80b728:	d8800b15 	stw	r2,44(sp)
  80b72c:	d8c00517 	ldw	r3,20(sp)
  80b730:	d9002217 	ldw	r4,136(sp)
  80b734:	1907883a 	add	r3,r3,r4
  80b738:	19800044 	addi	r6,r3,1
  80b73c:	d8c00c15 	stw	r3,48(sp)
  80b740:	d9800615 	stw	r6,24(sp)
  80b744:	0183a40e 	bge	zero,r6,80c5d8 <_dtoa_r+0x11cc>
  80b748:	d9800617 	ldw	r6,24(sp)
  80b74c:	3021883a 	mov	r16,r6
  80b750:	e0001115 	stw	zero,68(fp)
  80b754:	008005c4 	movi	r2,23
  80b758:	1184c92e 	bgeu	r2,r6,80ca80 <_dtoa_r+0x1674>
  80b75c:	00c00044 	movi	r3,1
  80b760:	00800104 	movi	r2,4
  80b764:	1085883a 	add	r2,r2,r2
  80b768:	11000504 	addi	r4,r2,20
  80b76c:	180b883a 	mov	r5,r3
  80b770:	18c00044 	addi	r3,r3,1
  80b774:	313ffb2e 	bgeu	r6,r4,80b764 <__alt_mem_onchip_mem+0xff803764>
  80b778:	e1401115 	stw	r5,68(fp)
  80b77c:	e009883a 	mov	r4,fp
  80b780:	080e4900 	call	80e490 <_Balloc>
  80b784:	d8800715 	stw	r2,28(sp)
  80b788:	e0801015 	stw	r2,64(fp)
  80b78c:	00800384 	movi	r2,14
  80b790:	1400f736 	bltu	r2,r16,80bb70 <_dtoa_r+0x764>
  80b794:	8800f626 	beq	r17,zero,80bb70 <_dtoa_r+0x764>
  80b798:	d9c00517 	ldw	r7,20(sp)
  80b79c:	01c39a0e 	bge	zero,r7,80c608 <_dtoa_r+0x11fc>
  80b7a0:	388003cc 	andi	r2,r7,15
  80b7a4:	100490fa 	slli	r2,r2,3
  80b7a8:	382bd13a 	srai	r21,r7,4
  80b7ac:	00c020b4 	movhi	r3,130
  80b7b0:	18e10504 	addi	r3,r3,-31724
  80b7b4:	1885883a 	add	r2,r3,r2
  80b7b8:	a8c0040c 	andi	r3,r21,16
  80b7bc:	12400017 	ldw	r9,0(r2)
  80b7c0:	12000117 	ldw	r8,4(r2)
  80b7c4:	18037926 	beq	r3,zero,80c5ac <_dtoa_r+0x11a0>
  80b7c8:	008020b4 	movhi	r2,130
  80b7cc:	10a0fb04 	addi	r2,r2,-31764
  80b7d0:	11800817 	ldw	r6,32(r2)
  80b7d4:	11c00917 	ldw	r7,36(r2)
  80b7d8:	9009883a 	mov	r4,r18
  80b7dc:	980b883a 	mov	r5,r19
  80b7e0:	da001715 	stw	r8,92(sp)
  80b7e4:	da401615 	stw	r9,88(sp)
  80b7e8:	0812f600 	call	812f60 <__divdf3>
  80b7ec:	da001717 	ldw	r8,92(sp)
  80b7f0:	da401617 	ldw	r9,88(sp)
  80b7f4:	ad4003cc 	andi	r21,r21,15
  80b7f8:	040000c4 	movi	r16,3
  80b7fc:	1023883a 	mov	r17,r2
  80b800:	1829883a 	mov	r20,r3
  80b804:	a8001126 	beq	r21,zero,80b84c <_dtoa_r+0x440>
  80b808:	05c020b4 	movhi	r23,130
  80b80c:	bde0fb04 	addi	r23,r23,-31764
  80b810:	4805883a 	mov	r2,r9
  80b814:	4007883a 	mov	r3,r8
  80b818:	a980004c 	andi	r6,r21,1
  80b81c:	1009883a 	mov	r4,r2
  80b820:	a82bd07a 	srai	r21,r21,1
  80b824:	180b883a 	mov	r5,r3
  80b828:	30000426 	beq	r6,zero,80b83c <_dtoa_r+0x430>
  80b82c:	b9800017 	ldw	r6,0(r23)
  80b830:	b9c00117 	ldw	r7,4(r23)
  80b834:	84000044 	addi	r16,r16,1
  80b838:	08138d00 	call	8138d0 <__muldf3>
  80b83c:	bdc00204 	addi	r23,r23,8
  80b840:	a83ff51e 	bne	r21,zero,80b818 <__alt_mem_onchip_mem+0xff803818>
  80b844:	1013883a 	mov	r9,r2
  80b848:	1811883a 	mov	r8,r3
  80b84c:	480d883a 	mov	r6,r9
  80b850:	400f883a 	mov	r7,r8
  80b854:	8809883a 	mov	r4,r17
  80b858:	a00b883a 	mov	r5,r20
  80b85c:	0812f600 	call	812f60 <__divdf3>
  80b860:	d8800f15 	stw	r2,60(sp)
  80b864:	d8c01015 	stw	r3,64(sp)
  80b868:	d8c00e17 	ldw	r3,56(sp)
  80b86c:	18000626 	beq	r3,zero,80b888 <_dtoa_r+0x47c>
  80b870:	d9000f17 	ldw	r4,60(sp)
  80b874:	d9401017 	ldw	r5,64(sp)
  80b878:	000d883a 	mov	r6,zero
  80b87c:	01cffc34 	movhi	r7,16368
  80b880:	080824c0 	call	80824c <__ledf2>
  80b884:	10040b16 	blt	r2,zero,80c8b4 <_dtoa_r+0x14a8>
  80b888:	8009883a 	mov	r4,r16
  80b88c:	0808c3c0 	call	808c3c <__floatsidf>
  80b890:	d9800f17 	ldw	r6,60(sp)
  80b894:	d9c01017 	ldw	r7,64(sp)
  80b898:	1009883a 	mov	r4,r2
  80b89c:	180b883a 	mov	r5,r3
  80b8a0:	08138d00 	call	8138d0 <__muldf3>
  80b8a4:	000d883a 	mov	r6,zero
  80b8a8:	01d00734 	movhi	r7,16412
  80b8ac:	1009883a 	mov	r4,r2
  80b8b0:	180b883a 	mov	r5,r3
  80b8b4:	08078c40 	call	8078c4 <__adddf3>
  80b8b8:	1021883a 	mov	r16,r2
  80b8bc:	d8800617 	ldw	r2,24(sp)
  80b8c0:	047f3034 	movhi	r17,64704
  80b8c4:	1c63883a 	add	r17,r3,r17
  80b8c8:	10031826 	beq	r2,zero,80c52c <_dtoa_r+0x1120>
  80b8cc:	d8c00517 	ldw	r3,20(sp)
  80b8d0:	db000617 	ldw	r12,24(sp)
  80b8d4:	d8c01315 	stw	r3,76(sp)
  80b8d8:	d9000b17 	ldw	r4,44(sp)
  80b8dc:	20038f26 	beq	r4,zero,80c71c <_dtoa_r+0x1310>
  80b8e0:	60bfffc4 	addi	r2,r12,-1
  80b8e4:	100490fa 	slli	r2,r2,3
  80b8e8:	00c020b4 	movhi	r3,130
  80b8ec:	18e10504 	addi	r3,r3,-31724
  80b8f0:	1885883a 	add	r2,r3,r2
  80b8f4:	11800017 	ldw	r6,0(r2)
  80b8f8:	11c00117 	ldw	r7,4(r2)
  80b8fc:	d8800717 	ldw	r2,28(sp)
  80b900:	0009883a 	mov	r4,zero
  80b904:	014ff834 	movhi	r5,16352
  80b908:	db001615 	stw	r12,88(sp)
  80b90c:	15c00044 	addi	r23,r2,1
  80b910:	0812f600 	call	812f60 <__divdf3>
  80b914:	800d883a 	mov	r6,r16
  80b918:	880f883a 	mov	r7,r17
  80b91c:	1009883a 	mov	r4,r2
  80b920:	180b883a 	mov	r5,r3
  80b924:	08083400 	call	808340 <__subdf3>
  80b928:	d9401017 	ldw	r5,64(sp)
  80b92c:	d9000f17 	ldw	r4,60(sp)
  80b930:	102b883a 	mov	r21,r2
  80b934:	d8c01215 	stw	r3,72(sp)
  80b938:	0813fe80 	call	813fe8 <__fixdfsi>
  80b93c:	1009883a 	mov	r4,r2
  80b940:	1029883a 	mov	r20,r2
  80b944:	0808c3c0 	call	808c3c <__floatsidf>
  80b948:	d9000f17 	ldw	r4,60(sp)
  80b94c:	d9401017 	ldw	r5,64(sp)
  80b950:	100d883a 	mov	r6,r2
  80b954:	180f883a 	mov	r7,r3
  80b958:	08083400 	call	808340 <__subdf3>
  80b95c:	1823883a 	mov	r17,r3
  80b960:	d8c00717 	ldw	r3,28(sp)
  80b964:	d9401217 	ldw	r5,72(sp)
  80b968:	a2000c04 	addi	r8,r20,48
  80b96c:	1021883a 	mov	r16,r2
  80b970:	1a000005 	stb	r8,0(r3)
  80b974:	800d883a 	mov	r6,r16
  80b978:	880f883a 	mov	r7,r17
  80b97c:	a809883a 	mov	r4,r21
  80b980:	4029883a 	mov	r20,r8
  80b984:	08081700 	call	808170 <__gedf2>
  80b988:	00841d16 	blt	zero,r2,80ca00 <_dtoa_r+0x15f4>
  80b98c:	800d883a 	mov	r6,r16
  80b990:	880f883a 	mov	r7,r17
  80b994:	0009883a 	mov	r4,zero
  80b998:	014ffc34 	movhi	r5,16368
  80b99c:	08083400 	call	808340 <__subdf3>
  80b9a0:	d9401217 	ldw	r5,72(sp)
  80b9a4:	100d883a 	mov	r6,r2
  80b9a8:	180f883a 	mov	r7,r3
  80b9ac:	a809883a 	mov	r4,r21
  80b9b0:	08081700 	call	808170 <__gedf2>
  80b9b4:	db001617 	ldw	r12,88(sp)
  80b9b8:	00840e16 	blt	zero,r2,80c9f4 <_dtoa_r+0x15e8>
  80b9bc:	00800044 	movi	r2,1
  80b9c0:	13006b0e 	bge	r2,r12,80bb70 <_dtoa_r+0x764>
  80b9c4:	d9000717 	ldw	r4,28(sp)
  80b9c8:	dd800f15 	stw	r22,60(sp)
  80b9cc:	dcc01015 	stw	r19,64(sp)
  80b9d0:	2319883a 	add	r12,r4,r12
  80b9d4:	dcc01217 	ldw	r19,72(sp)
  80b9d8:	602d883a 	mov	r22,r12
  80b9dc:	dc801215 	stw	r18,72(sp)
  80b9e0:	b825883a 	mov	r18,r23
  80b9e4:	00000906 	br	80ba0c <_dtoa_r+0x600>
  80b9e8:	08083400 	call	808340 <__subdf3>
  80b9ec:	a80d883a 	mov	r6,r21
  80b9f0:	980f883a 	mov	r7,r19
  80b9f4:	1009883a 	mov	r4,r2
  80b9f8:	180b883a 	mov	r5,r3
  80b9fc:	080824c0 	call	80824c <__ledf2>
  80ba00:	1003e816 	blt	r2,zero,80c9a4 <_dtoa_r+0x1598>
  80ba04:	b825883a 	mov	r18,r23
  80ba08:	bd83e926 	beq	r23,r22,80c9b0 <_dtoa_r+0x15a4>
  80ba0c:	a809883a 	mov	r4,r21
  80ba10:	980b883a 	mov	r5,r19
  80ba14:	000d883a 	mov	r6,zero
  80ba18:	01d00934 	movhi	r7,16420
  80ba1c:	08138d00 	call	8138d0 <__muldf3>
  80ba20:	000d883a 	mov	r6,zero
  80ba24:	01d00934 	movhi	r7,16420
  80ba28:	8009883a 	mov	r4,r16
  80ba2c:	880b883a 	mov	r5,r17
  80ba30:	102b883a 	mov	r21,r2
  80ba34:	1827883a 	mov	r19,r3
  80ba38:	08138d00 	call	8138d0 <__muldf3>
  80ba3c:	180b883a 	mov	r5,r3
  80ba40:	1009883a 	mov	r4,r2
  80ba44:	1821883a 	mov	r16,r3
  80ba48:	1023883a 	mov	r17,r2
  80ba4c:	0813fe80 	call	813fe8 <__fixdfsi>
  80ba50:	1009883a 	mov	r4,r2
  80ba54:	1029883a 	mov	r20,r2
  80ba58:	0808c3c0 	call	808c3c <__floatsidf>
  80ba5c:	8809883a 	mov	r4,r17
  80ba60:	800b883a 	mov	r5,r16
  80ba64:	100d883a 	mov	r6,r2
  80ba68:	180f883a 	mov	r7,r3
  80ba6c:	08083400 	call	808340 <__subdf3>
  80ba70:	a5000c04 	addi	r20,r20,48
  80ba74:	a80d883a 	mov	r6,r21
  80ba78:	980f883a 	mov	r7,r19
  80ba7c:	1009883a 	mov	r4,r2
  80ba80:	180b883a 	mov	r5,r3
  80ba84:	95000005 	stb	r20,0(r18)
  80ba88:	1021883a 	mov	r16,r2
  80ba8c:	1823883a 	mov	r17,r3
  80ba90:	080824c0 	call	80824c <__ledf2>
  80ba94:	bdc00044 	addi	r23,r23,1
  80ba98:	800d883a 	mov	r6,r16
  80ba9c:	880f883a 	mov	r7,r17
  80baa0:	0009883a 	mov	r4,zero
  80baa4:	014ffc34 	movhi	r5,16368
  80baa8:	103fcf0e 	bge	r2,zero,80b9e8 <__alt_mem_onchip_mem+0xff8039e8>
  80baac:	d8c01317 	ldw	r3,76(sp)
  80bab0:	d8c00515 	stw	r3,20(sp)
  80bab4:	d9400917 	ldw	r5,36(sp)
  80bab8:	e009883a 	mov	r4,fp
  80babc:	080e5380 	call	80e538 <_Bfree>
  80bac0:	d9000517 	ldw	r4,20(sp)
  80bac4:	d9802317 	ldw	r6,140(sp)
  80bac8:	d9c02517 	ldw	r7,148(sp)
  80bacc:	b8000005 	stb	zero,0(r23)
  80bad0:	20800044 	addi	r2,r4,1
  80bad4:	30800015 	stw	r2,0(r6)
  80bad8:	3802aa26 	beq	r7,zero,80c584 <_dtoa_r+0x1178>
  80badc:	3dc00015 	stw	r23,0(r7)
  80bae0:	d8800717 	ldw	r2,28(sp)
  80bae4:	003e7906 	br	80b4cc <__alt_mem_onchip_mem+0xff8034cc>
  80bae8:	00800434 	movhi	r2,16
  80baec:	10bfffc4 	addi	r2,r2,-1
  80baf0:	88a2703a 	and	r17,r17,r2
  80baf4:	883e851e 	bne	r17,zero,80b50c <__alt_mem_onchip_mem+0xff80350c>
  80baf8:	008020b4 	movhi	r2,130
  80bafc:	10a0e604 	addi	r2,r2,-31848
  80bb00:	003e8406 	br	80b514 <__alt_mem_onchip_mem+0xff803514>
  80bb04:	10c00204 	addi	r3,r2,8
  80bb08:	003e8706 	br	80b528 <__alt_mem_onchip_mem+0xff803528>
  80bb0c:	01400434 	movhi	r5,16
  80bb10:	297fffc4 	addi	r5,r5,-1
  80bb14:	994a703a 	and	r5,r19,r5
  80bb18:	9009883a 	mov	r4,r18
  80bb1c:	843f0044 	addi	r16,r16,-1023
  80bb20:	294ffc34 	orhi	r5,r5,16368
  80bb24:	dd800217 	ldw	r22,8(sp)
  80bb28:	d8001115 	stw	zero,68(sp)
  80bb2c:	003ea506 	br	80b5c4 <__alt_mem_onchip_mem+0xff8035c4>
  80bb30:	008020b4 	movhi	r2,130
  80bb34:	10a0dd04 	addi	r2,r2,-31884
  80bb38:	003e6406 	br	80b4cc <__alt_mem_onchip_mem+0xff8034cc>
  80bb3c:	e0001115 	stw	zero,68(fp)
  80bb40:	000b883a 	mov	r5,zero
  80bb44:	e009883a 	mov	r4,fp
  80bb48:	080e4900 	call	80e490 <_Balloc>
  80bb4c:	01bfffc4 	movi	r6,-1
  80bb50:	01c00044 	movi	r7,1
  80bb54:	d8800715 	stw	r2,28(sp)
  80bb58:	d9800c15 	stw	r6,48(sp)
  80bb5c:	e0801015 	stw	r2,64(fp)
  80bb60:	d8000315 	stw	zero,12(sp)
  80bb64:	d9c00b15 	stw	r7,44(sp)
  80bb68:	d9800615 	stw	r6,24(sp)
  80bb6c:	d8002215 	stw	zero,136(sp)
  80bb70:	d8800117 	ldw	r2,4(sp)
  80bb74:	10008916 	blt	r2,zero,80bd9c <_dtoa_r+0x990>
  80bb78:	d9000517 	ldw	r4,20(sp)
  80bb7c:	00c00384 	movi	r3,14
  80bb80:	19008616 	blt	r3,r4,80bd9c <_dtoa_r+0x990>
  80bb84:	200490fa 	slli	r2,r4,3
  80bb88:	00c020b4 	movhi	r3,130
  80bb8c:	d9802217 	ldw	r6,136(sp)
  80bb90:	18e10504 	addi	r3,r3,-31724
  80bb94:	1885883a 	add	r2,r3,r2
  80bb98:	14000017 	ldw	r16,0(r2)
  80bb9c:	14400117 	ldw	r17,4(r2)
  80bba0:	30016316 	blt	r6,zero,80c130 <_dtoa_r+0xd24>
  80bba4:	800d883a 	mov	r6,r16
  80bba8:	880f883a 	mov	r7,r17
  80bbac:	9009883a 	mov	r4,r18
  80bbb0:	980b883a 	mov	r5,r19
  80bbb4:	0812f600 	call	812f60 <__divdf3>
  80bbb8:	180b883a 	mov	r5,r3
  80bbbc:	1009883a 	mov	r4,r2
  80bbc0:	0813fe80 	call	813fe8 <__fixdfsi>
  80bbc4:	1009883a 	mov	r4,r2
  80bbc8:	102b883a 	mov	r21,r2
  80bbcc:	0808c3c0 	call	808c3c <__floatsidf>
  80bbd0:	800d883a 	mov	r6,r16
  80bbd4:	880f883a 	mov	r7,r17
  80bbd8:	1009883a 	mov	r4,r2
  80bbdc:	180b883a 	mov	r5,r3
  80bbe0:	08138d00 	call	8138d0 <__muldf3>
  80bbe4:	100d883a 	mov	r6,r2
  80bbe8:	180f883a 	mov	r7,r3
  80bbec:	9009883a 	mov	r4,r18
  80bbf0:	980b883a 	mov	r5,r19
  80bbf4:	08083400 	call	808340 <__subdf3>
  80bbf8:	d9c00717 	ldw	r7,28(sp)
  80bbfc:	1009883a 	mov	r4,r2
  80bc00:	a8800c04 	addi	r2,r21,48
  80bc04:	38800005 	stb	r2,0(r7)
  80bc08:	3dc00044 	addi	r23,r7,1
  80bc0c:	d9c00617 	ldw	r7,24(sp)
  80bc10:	01800044 	movi	r6,1
  80bc14:	180b883a 	mov	r5,r3
  80bc18:	2005883a 	mov	r2,r4
  80bc1c:	39803826 	beq	r7,r6,80bd00 <_dtoa_r+0x8f4>
  80bc20:	000d883a 	mov	r6,zero
  80bc24:	01d00934 	movhi	r7,16420
  80bc28:	08138d00 	call	8138d0 <__muldf3>
  80bc2c:	000d883a 	mov	r6,zero
  80bc30:	000f883a 	mov	r7,zero
  80bc34:	1009883a 	mov	r4,r2
  80bc38:	180b883a 	mov	r5,r3
  80bc3c:	1025883a 	mov	r18,r2
  80bc40:	1827883a 	mov	r19,r3
  80bc44:	08138480 	call	813848 <__eqdf2>
  80bc48:	103f9a26 	beq	r2,zero,80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80bc4c:	d9c00617 	ldw	r7,24(sp)
  80bc50:	d8c00717 	ldw	r3,28(sp)
  80bc54:	b829883a 	mov	r20,r23
  80bc58:	38bfffc4 	addi	r2,r7,-1
  80bc5c:	18ad883a 	add	r22,r3,r2
  80bc60:	00000a06 	br	80bc8c <_dtoa_r+0x880>
  80bc64:	08138d00 	call	8138d0 <__muldf3>
  80bc68:	000d883a 	mov	r6,zero
  80bc6c:	000f883a 	mov	r7,zero
  80bc70:	1009883a 	mov	r4,r2
  80bc74:	180b883a 	mov	r5,r3
  80bc78:	1025883a 	mov	r18,r2
  80bc7c:	1827883a 	mov	r19,r3
  80bc80:	b829883a 	mov	r20,r23
  80bc84:	08138480 	call	813848 <__eqdf2>
  80bc88:	103f8a26 	beq	r2,zero,80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80bc8c:	800d883a 	mov	r6,r16
  80bc90:	880f883a 	mov	r7,r17
  80bc94:	9009883a 	mov	r4,r18
  80bc98:	980b883a 	mov	r5,r19
  80bc9c:	0812f600 	call	812f60 <__divdf3>
  80bca0:	180b883a 	mov	r5,r3
  80bca4:	1009883a 	mov	r4,r2
  80bca8:	0813fe80 	call	813fe8 <__fixdfsi>
  80bcac:	1009883a 	mov	r4,r2
  80bcb0:	102b883a 	mov	r21,r2
  80bcb4:	0808c3c0 	call	808c3c <__floatsidf>
  80bcb8:	800d883a 	mov	r6,r16
  80bcbc:	880f883a 	mov	r7,r17
  80bcc0:	1009883a 	mov	r4,r2
  80bcc4:	180b883a 	mov	r5,r3
  80bcc8:	08138d00 	call	8138d0 <__muldf3>
  80bccc:	100d883a 	mov	r6,r2
  80bcd0:	180f883a 	mov	r7,r3
  80bcd4:	9009883a 	mov	r4,r18
  80bcd8:	980b883a 	mov	r5,r19
  80bcdc:	08083400 	call	808340 <__subdf3>
  80bce0:	aa000c04 	addi	r8,r21,48
  80bce4:	a2000005 	stb	r8,0(r20)
  80bce8:	000d883a 	mov	r6,zero
  80bcec:	01d00934 	movhi	r7,16420
  80bcf0:	1009883a 	mov	r4,r2
  80bcf4:	180b883a 	mov	r5,r3
  80bcf8:	a5c00044 	addi	r23,r20,1
  80bcfc:	b53fd91e 	bne	r22,r20,80bc64 <__alt_mem_onchip_mem+0xff803c64>
  80bd00:	100d883a 	mov	r6,r2
  80bd04:	180f883a 	mov	r7,r3
  80bd08:	1009883a 	mov	r4,r2
  80bd0c:	180b883a 	mov	r5,r3
  80bd10:	08078c40 	call	8078c4 <__adddf3>
  80bd14:	100d883a 	mov	r6,r2
  80bd18:	180f883a 	mov	r7,r3
  80bd1c:	8009883a 	mov	r4,r16
  80bd20:	880b883a 	mov	r5,r17
  80bd24:	1027883a 	mov	r19,r2
  80bd28:	1825883a 	mov	r18,r3
  80bd2c:	080824c0 	call	80824c <__ledf2>
  80bd30:	10000816 	blt	r2,zero,80bd54 <_dtoa_r+0x948>
  80bd34:	980d883a 	mov	r6,r19
  80bd38:	900f883a 	mov	r7,r18
  80bd3c:	8009883a 	mov	r4,r16
  80bd40:	880b883a 	mov	r5,r17
  80bd44:	08138480 	call	813848 <__eqdf2>
  80bd48:	103f5a1e 	bne	r2,zero,80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80bd4c:	ad40004c 	andi	r21,r21,1
  80bd50:	a83f5826 	beq	r21,zero,80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80bd54:	bd3fffc3 	ldbu	r20,-1(r23)
  80bd58:	b8bfffc4 	addi	r2,r23,-1
  80bd5c:	1007883a 	mov	r3,r2
  80bd60:	01400e44 	movi	r5,57
  80bd64:	d9800717 	ldw	r6,28(sp)
  80bd68:	00000506 	br	80bd80 <_dtoa_r+0x974>
  80bd6c:	18ffffc4 	addi	r3,r3,-1
  80bd70:	11824726 	beq	r2,r6,80c690 <_dtoa_r+0x1284>
  80bd74:	1d000003 	ldbu	r20,0(r3)
  80bd78:	102f883a 	mov	r23,r2
  80bd7c:	10bfffc4 	addi	r2,r2,-1
  80bd80:	a1003fcc 	andi	r4,r20,255
  80bd84:	2100201c 	xori	r4,r4,128
  80bd88:	213fe004 	addi	r4,r4,-128
  80bd8c:	217ff726 	beq	r4,r5,80bd6c <__alt_mem_onchip_mem+0xff803d6c>
  80bd90:	a2000044 	addi	r8,r20,1
  80bd94:	12000005 	stb	r8,0(r2)
  80bd98:	003f4606 	br	80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80bd9c:	d9000b17 	ldw	r4,44(sp)
  80bda0:	2000c826 	beq	r4,zero,80c0c4 <_dtoa_r+0xcb8>
  80bda4:	d9800317 	ldw	r6,12(sp)
  80bda8:	00c00044 	movi	r3,1
  80bdac:	1980f90e 	bge	r3,r6,80c194 <_dtoa_r+0xd88>
  80bdb0:	d8800617 	ldw	r2,24(sp)
  80bdb4:	d8c00a17 	ldw	r3,40(sp)
  80bdb8:	157fffc4 	addi	r21,r2,-1
  80bdbc:	1d41f316 	blt	r3,r21,80c58c <_dtoa_r+0x1180>
  80bdc0:	1d6bc83a 	sub	r21,r3,r21
  80bdc4:	d9c00617 	ldw	r7,24(sp)
  80bdc8:	3802aa16 	blt	r7,zero,80c874 <_dtoa_r+0x1468>
  80bdcc:	dd000817 	ldw	r20,32(sp)
  80bdd0:	d8800617 	ldw	r2,24(sp)
  80bdd4:	d8c00817 	ldw	r3,32(sp)
  80bdd8:	01400044 	movi	r5,1
  80bddc:	e009883a 	mov	r4,fp
  80bde0:	1887883a 	add	r3,r3,r2
  80bde4:	d8c00815 	stw	r3,32(sp)
  80bde8:	b0ad883a 	add	r22,r22,r2
  80bdec:	080e89c0 	call	80e89c <__i2b>
  80bdf0:	1023883a 	mov	r17,r2
  80bdf4:	a0000826 	beq	r20,zero,80be18 <_dtoa_r+0xa0c>
  80bdf8:	0580070e 	bge	zero,r22,80be18 <_dtoa_r+0xa0c>
  80bdfc:	a005883a 	mov	r2,r20
  80be00:	b500b916 	blt	r22,r20,80c0e8 <_dtoa_r+0xcdc>
  80be04:	d9000817 	ldw	r4,32(sp)
  80be08:	a0a9c83a 	sub	r20,r20,r2
  80be0c:	b0adc83a 	sub	r22,r22,r2
  80be10:	2089c83a 	sub	r4,r4,r2
  80be14:	d9000815 	stw	r4,32(sp)
  80be18:	d9800a17 	ldw	r6,40(sp)
  80be1c:	0181810e 	bge	zero,r6,80c424 <_dtoa_r+0x1018>
  80be20:	d9c00b17 	ldw	r7,44(sp)
  80be24:	3800b326 	beq	r7,zero,80c0f4 <_dtoa_r+0xce8>
  80be28:	a800b226 	beq	r21,zero,80c0f4 <_dtoa_r+0xce8>
  80be2c:	880b883a 	mov	r5,r17
  80be30:	a80d883a 	mov	r6,r21
  80be34:	e009883a 	mov	r4,fp
  80be38:	080ead00 	call	80ead0 <__pow5mult>
  80be3c:	d9800917 	ldw	r6,36(sp)
  80be40:	100b883a 	mov	r5,r2
  80be44:	e009883a 	mov	r4,fp
  80be48:	1023883a 	mov	r17,r2
  80be4c:	080e8d80 	call	80e8d8 <__multiply>
  80be50:	1021883a 	mov	r16,r2
  80be54:	d8800a17 	ldw	r2,40(sp)
  80be58:	d9400917 	ldw	r5,36(sp)
  80be5c:	e009883a 	mov	r4,fp
  80be60:	1545c83a 	sub	r2,r2,r21
  80be64:	d8800a15 	stw	r2,40(sp)
  80be68:	080e5380 	call	80e538 <_Bfree>
  80be6c:	d8c00a17 	ldw	r3,40(sp)
  80be70:	18009f1e 	bne	r3,zero,80c0f0 <_dtoa_r+0xce4>
  80be74:	05c00044 	movi	r23,1
  80be78:	e009883a 	mov	r4,fp
  80be7c:	b80b883a 	mov	r5,r23
  80be80:	080e89c0 	call	80e89c <__i2b>
  80be84:	d9000d17 	ldw	r4,52(sp)
  80be88:	102b883a 	mov	r21,r2
  80be8c:	2000ce26 	beq	r4,zero,80c1c8 <_dtoa_r+0xdbc>
  80be90:	200d883a 	mov	r6,r4
  80be94:	100b883a 	mov	r5,r2
  80be98:	e009883a 	mov	r4,fp
  80be9c:	080ead00 	call	80ead0 <__pow5mult>
  80bea0:	d9800317 	ldw	r6,12(sp)
  80bea4:	102b883a 	mov	r21,r2
  80bea8:	b981810e 	bge	r23,r6,80c4b0 <_dtoa_r+0x10a4>
  80beac:	0027883a 	mov	r19,zero
  80beb0:	a8800417 	ldw	r2,16(r21)
  80beb4:	05c00804 	movi	r23,32
  80beb8:	10800104 	addi	r2,r2,4
  80bebc:	1085883a 	add	r2,r2,r2
  80bec0:	1085883a 	add	r2,r2,r2
  80bec4:	a885883a 	add	r2,r21,r2
  80bec8:	11000017 	ldw	r4,0(r2)
  80becc:	080e7840 	call	80e784 <__hi0bits>
  80bed0:	b885c83a 	sub	r2,r23,r2
  80bed4:	1585883a 	add	r2,r2,r22
  80bed8:	108007cc 	andi	r2,r2,31
  80bedc:	1000b326 	beq	r2,zero,80c1ac <_dtoa_r+0xda0>
  80bee0:	00c00804 	movi	r3,32
  80bee4:	1887c83a 	sub	r3,r3,r2
  80bee8:	01000104 	movi	r4,4
  80beec:	20c2cd0e 	bge	r4,r3,80ca24 <_dtoa_r+0x1618>
  80bef0:	00c00704 	movi	r3,28
  80bef4:	1885c83a 	sub	r2,r3,r2
  80bef8:	d8c00817 	ldw	r3,32(sp)
  80befc:	a0a9883a 	add	r20,r20,r2
  80bf00:	b0ad883a 	add	r22,r22,r2
  80bf04:	1887883a 	add	r3,r3,r2
  80bf08:	d8c00815 	stw	r3,32(sp)
  80bf0c:	d9800817 	ldw	r6,32(sp)
  80bf10:	0180040e 	bge	zero,r6,80bf24 <_dtoa_r+0xb18>
  80bf14:	800b883a 	mov	r5,r16
  80bf18:	e009883a 	mov	r4,fp
  80bf1c:	080ec100 	call	80ec10 <__lshift>
  80bf20:	1021883a 	mov	r16,r2
  80bf24:	0580050e 	bge	zero,r22,80bf3c <_dtoa_r+0xb30>
  80bf28:	a80b883a 	mov	r5,r21
  80bf2c:	b00d883a 	mov	r6,r22
  80bf30:	e009883a 	mov	r4,fp
  80bf34:	080ec100 	call	80ec10 <__lshift>
  80bf38:	102b883a 	mov	r21,r2
  80bf3c:	d9c00e17 	ldw	r7,56(sp)
  80bf40:	3801211e 	bne	r7,zero,80c3c8 <_dtoa_r+0xfbc>
  80bf44:	d9800617 	ldw	r6,24(sp)
  80bf48:	0181380e 	bge	zero,r6,80c42c <_dtoa_r+0x1020>
  80bf4c:	d8c00b17 	ldw	r3,44(sp)
  80bf50:	1800ab1e 	bne	r3,zero,80c200 <_dtoa_r+0xdf4>
  80bf54:	dc800717 	ldw	r18,28(sp)
  80bf58:	dcc00617 	ldw	r19,24(sp)
  80bf5c:	9029883a 	mov	r20,r18
  80bf60:	00000206 	br	80bf6c <_dtoa_r+0xb60>
  80bf64:	080e5600 	call	80e560 <__multadd>
  80bf68:	1021883a 	mov	r16,r2
  80bf6c:	a80b883a 	mov	r5,r21
  80bf70:	8009883a 	mov	r4,r16
  80bf74:	080b20c0 	call	80b20c <quorem>
  80bf78:	10800c04 	addi	r2,r2,48
  80bf7c:	90800005 	stb	r2,0(r18)
  80bf80:	94800044 	addi	r18,r18,1
  80bf84:	9507c83a 	sub	r3,r18,r20
  80bf88:	000f883a 	mov	r7,zero
  80bf8c:	01800284 	movi	r6,10
  80bf90:	800b883a 	mov	r5,r16
  80bf94:	e009883a 	mov	r4,fp
  80bf98:	1cfff216 	blt	r3,r19,80bf64 <__alt_mem_onchip_mem+0xff803f64>
  80bf9c:	1011883a 	mov	r8,r2
  80bfa0:	d8800617 	ldw	r2,24(sp)
  80bfa4:	0082370e 	bge	zero,r2,80c884 <_dtoa_r+0x1478>
  80bfa8:	d9000717 	ldw	r4,28(sp)
  80bfac:	0025883a 	mov	r18,zero
  80bfb0:	20af883a 	add	r23,r4,r2
  80bfb4:	01800044 	movi	r6,1
  80bfb8:	800b883a 	mov	r5,r16
  80bfbc:	e009883a 	mov	r4,fp
  80bfc0:	da001715 	stw	r8,92(sp)
  80bfc4:	080ec100 	call	80ec10 <__lshift>
  80bfc8:	a80b883a 	mov	r5,r21
  80bfcc:	1009883a 	mov	r4,r2
  80bfd0:	d8800915 	stw	r2,36(sp)
  80bfd4:	080ed580 	call	80ed58 <__mcmp>
  80bfd8:	da001717 	ldw	r8,92(sp)
  80bfdc:	0081800e 	bge	zero,r2,80c5e0 <_dtoa_r+0x11d4>
  80bfe0:	b93fffc3 	ldbu	r4,-1(r23)
  80bfe4:	b8bfffc4 	addi	r2,r23,-1
  80bfe8:	1007883a 	mov	r3,r2
  80bfec:	01800e44 	movi	r6,57
  80bff0:	d9c00717 	ldw	r7,28(sp)
  80bff4:	00000506 	br	80c00c <_dtoa_r+0xc00>
  80bff8:	18ffffc4 	addi	r3,r3,-1
  80bffc:	11c12326 	beq	r2,r7,80c48c <_dtoa_r+0x1080>
  80c000:	19000003 	ldbu	r4,0(r3)
  80c004:	102f883a 	mov	r23,r2
  80c008:	10bfffc4 	addi	r2,r2,-1
  80c00c:	21403fcc 	andi	r5,r4,255
  80c010:	2940201c 	xori	r5,r5,128
  80c014:	297fe004 	addi	r5,r5,-128
  80c018:	29bff726 	beq	r5,r6,80bff8 <__alt_mem_onchip_mem+0xff803ff8>
  80c01c:	21000044 	addi	r4,r4,1
  80c020:	11000005 	stb	r4,0(r2)
  80c024:	a80b883a 	mov	r5,r21
  80c028:	e009883a 	mov	r4,fp
  80c02c:	080e5380 	call	80e538 <_Bfree>
  80c030:	883ea026 	beq	r17,zero,80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80c034:	90000426 	beq	r18,zero,80c048 <_dtoa_r+0xc3c>
  80c038:	94400326 	beq	r18,r17,80c048 <_dtoa_r+0xc3c>
  80c03c:	900b883a 	mov	r5,r18
  80c040:	e009883a 	mov	r4,fp
  80c044:	080e5380 	call	80e538 <_Bfree>
  80c048:	880b883a 	mov	r5,r17
  80c04c:	e009883a 	mov	r4,fp
  80c050:	080e5380 	call	80e538 <_Bfree>
  80c054:	003e9706 	br	80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80c058:	01800044 	movi	r6,1
  80c05c:	d9800e15 	stw	r6,56(sp)
  80c060:	003d9606 	br	80b6bc <__alt_mem_onchip_mem+0xff8036bc>
  80c064:	d8800817 	ldw	r2,32(sp)
  80c068:	d8c00517 	ldw	r3,20(sp)
  80c06c:	d8000d15 	stw	zero,52(sp)
  80c070:	10c5c83a 	sub	r2,r2,r3
  80c074:	00c9c83a 	sub	r4,zero,r3
  80c078:	d8800815 	stw	r2,32(sp)
  80c07c:	d9000a15 	stw	r4,40(sp)
  80c080:	003d9706 	br	80b6e0 <__alt_mem_onchip_mem+0xff8036e0>
  80c084:	05adc83a 	sub	r22,zero,r22
  80c088:	dd800815 	stw	r22,32(sp)
  80c08c:	002d883a 	mov	r22,zero
  80c090:	003d8e06 	br	80b6cc <__alt_mem_onchip_mem+0xff8036cc>
  80c094:	d9000517 	ldw	r4,20(sp)
  80c098:	0808c3c0 	call	808c3c <__floatsidf>
  80c09c:	100d883a 	mov	r6,r2
  80c0a0:	180f883a 	mov	r7,r3
  80c0a4:	a009883a 	mov	r4,r20
  80c0a8:	880b883a 	mov	r5,r17
  80c0ac:	08138480 	call	813848 <__eqdf2>
  80c0b0:	103d7126 	beq	r2,zero,80b678 <__alt_mem_onchip_mem+0xff803678>
  80c0b4:	d9c00517 	ldw	r7,20(sp)
  80c0b8:	39ffffc4 	addi	r7,r7,-1
  80c0bc:	d9c00515 	stw	r7,20(sp)
  80c0c0:	003d6d06 	br	80b678 <__alt_mem_onchip_mem+0xff803678>
  80c0c4:	dd400a17 	ldw	r21,40(sp)
  80c0c8:	dd000817 	ldw	r20,32(sp)
  80c0cc:	0023883a 	mov	r17,zero
  80c0d0:	003f4806 	br	80bdf4 <__alt_mem_onchip_mem+0xff803df4>
  80c0d4:	10e3c83a 	sub	r17,r2,r3
  80c0d8:	9448983a 	sll	r4,r18,r17
  80c0dc:	003d3206 	br	80b5a8 <__alt_mem_onchip_mem+0xff8035a8>
  80c0e0:	d8000e15 	stw	zero,56(sp)
  80c0e4:	003d7506 	br	80b6bc <__alt_mem_onchip_mem+0xff8036bc>
  80c0e8:	b005883a 	mov	r2,r22
  80c0ec:	003f4506 	br	80be04 <__alt_mem_onchip_mem+0xff803e04>
  80c0f0:	dc000915 	stw	r16,36(sp)
  80c0f4:	d9800a17 	ldw	r6,40(sp)
  80c0f8:	d9400917 	ldw	r5,36(sp)
  80c0fc:	e009883a 	mov	r4,fp
  80c100:	080ead00 	call	80ead0 <__pow5mult>
  80c104:	1021883a 	mov	r16,r2
  80c108:	003f5a06 	br	80be74 <__alt_mem_onchip_mem+0xff803e74>
  80c10c:	01c00044 	movi	r7,1
  80c110:	d9c00b15 	stw	r7,44(sp)
  80c114:	d8802217 	ldw	r2,136(sp)
  80c118:	0081280e 	bge	zero,r2,80c5bc <_dtoa_r+0x11b0>
  80c11c:	100d883a 	mov	r6,r2
  80c120:	1021883a 	mov	r16,r2
  80c124:	d8800c15 	stw	r2,48(sp)
  80c128:	d8800615 	stw	r2,24(sp)
  80c12c:	003d8806 	br	80b750 <__alt_mem_onchip_mem+0xff803750>
  80c130:	d8800617 	ldw	r2,24(sp)
  80c134:	00be9b16 	blt	zero,r2,80bba4 <__alt_mem_onchip_mem+0xff803ba4>
  80c138:	10010f1e 	bne	r2,zero,80c578 <_dtoa_r+0x116c>
  80c13c:	880b883a 	mov	r5,r17
  80c140:	000d883a 	mov	r6,zero
  80c144:	01d00534 	movhi	r7,16404
  80c148:	8009883a 	mov	r4,r16
  80c14c:	08138d00 	call	8138d0 <__muldf3>
  80c150:	900d883a 	mov	r6,r18
  80c154:	980f883a 	mov	r7,r19
  80c158:	1009883a 	mov	r4,r2
  80c15c:	180b883a 	mov	r5,r3
  80c160:	08081700 	call	808170 <__gedf2>
  80c164:	002b883a 	mov	r21,zero
  80c168:	0023883a 	mov	r17,zero
  80c16c:	1000bf16 	blt	r2,zero,80c46c <_dtoa_r+0x1060>
  80c170:	d9802217 	ldw	r6,136(sp)
  80c174:	ddc00717 	ldw	r23,28(sp)
  80c178:	018c303a 	nor	r6,zero,r6
  80c17c:	d9800515 	stw	r6,20(sp)
  80c180:	a80b883a 	mov	r5,r21
  80c184:	e009883a 	mov	r4,fp
  80c188:	080e5380 	call	80e538 <_Bfree>
  80c18c:	883e4926 	beq	r17,zero,80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80c190:	003fad06 	br	80c048 <__alt_mem_onchip_mem+0xff804048>
  80c194:	d9c01117 	ldw	r7,68(sp)
  80c198:	3801bc26 	beq	r7,zero,80c88c <_dtoa_r+0x1480>
  80c19c:	10810cc4 	addi	r2,r2,1075
  80c1a0:	dd400a17 	ldw	r21,40(sp)
  80c1a4:	dd000817 	ldw	r20,32(sp)
  80c1a8:	003f0a06 	br	80bdd4 <__alt_mem_onchip_mem+0xff803dd4>
  80c1ac:	00800704 	movi	r2,28
  80c1b0:	d9000817 	ldw	r4,32(sp)
  80c1b4:	a0a9883a 	add	r20,r20,r2
  80c1b8:	b0ad883a 	add	r22,r22,r2
  80c1bc:	2089883a 	add	r4,r4,r2
  80c1c0:	d9000815 	stw	r4,32(sp)
  80c1c4:	003f5106 	br	80bf0c <__alt_mem_onchip_mem+0xff803f0c>
  80c1c8:	d8c00317 	ldw	r3,12(sp)
  80c1cc:	b8c1fc0e 	bge	r23,r3,80c9c0 <_dtoa_r+0x15b4>
  80c1d0:	0027883a 	mov	r19,zero
  80c1d4:	b805883a 	mov	r2,r23
  80c1d8:	003f3e06 	br	80bed4 <__alt_mem_onchip_mem+0xff803ed4>
  80c1dc:	880b883a 	mov	r5,r17
  80c1e0:	e009883a 	mov	r4,fp
  80c1e4:	000f883a 	mov	r7,zero
  80c1e8:	01800284 	movi	r6,10
  80c1ec:	080e5600 	call	80e560 <__multadd>
  80c1f0:	d9000c17 	ldw	r4,48(sp)
  80c1f4:	1023883a 	mov	r17,r2
  80c1f8:	0102040e 	bge	zero,r4,80ca0c <_dtoa_r+0x1600>
  80c1fc:	d9000615 	stw	r4,24(sp)
  80c200:	0500050e 	bge	zero,r20,80c218 <_dtoa_r+0xe0c>
  80c204:	880b883a 	mov	r5,r17
  80c208:	a00d883a 	mov	r6,r20
  80c20c:	e009883a 	mov	r4,fp
  80c210:	080ec100 	call	80ec10 <__lshift>
  80c214:	1023883a 	mov	r17,r2
  80c218:	9801241e 	bne	r19,zero,80c6ac <_dtoa_r+0x12a0>
  80c21c:	8829883a 	mov	r20,r17
  80c220:	d9000617 	ldw	r4,24(sp)
  80c224:	dcc00717 	ldw	r19,28(sp)
  80c228:	9480004c 	andi	r18,r18,1
  80c22c:	20bfffc4 	addi	r2,r4,-1
  80c230:	9885883a 	add	r2,r19,r2
  80c234:	d8800415 	stw	r2,16(sp)
  80c238:	dc800615 	stw	r18,24(sp)
  80c23c:	a80b883a 	mov	r5,r21
  80c240:	8009883a 	mov	r4,r16
  80c244:	080b20c0 	call	80b20c <quorem>
  80c248:	880b883a 	mov	r5,r17
  80c24c:	8009883a 	mov	r4,r16
  80c250:	102f883a 	mov	r23,r2
  80c254:	080ed580 	call	80ed58 <__mcmp>
  80c258:	a80b883a 	mov	r5,r21
  80c25c:	a00d883a 	mov	r6,r20
  80c260:	e009883a 	mov	r4,fp
  80c264:	102d883a 	mov	r22,r2
  80c268:	080edb80 	call	80edb8 <__mdiff>
  80c26c:	1007883a 	mov	r3,r2
  80c270:	10800317 	ldw	r2,12(r2)
  80c274:	bc800c04 	addi	r18,r23,48
  80c278:	180b883a 	mov	r5,r3
  80c27c:	10004e1e 	bne	r2,zero,80c3b8 <_dtoa_r+0xfac>
  80c280:	8009883a 	mov	r4,r16
  80c284:	d8c01615 	stw	r3,88(sp)
  80c288:	080ed580 	call	80ed58 <__mcmp>
  80c28c:	d8c01617 	ldw	r3,88(sp)
  80c290:	e009883a 	mov	r4,fp
  80c294:	d8801615 	stw	r2,88(sp)
  80c298:	180b883a 	mov	r5,r3
  80c29c:	080e5380 	call	80e538 <_Bfree>
  80c2a0:	d8801617 	ldw	r2,88(sp)
  80c2a4:	1000041e 	bne	r2,zero,80c2b8 <_dtoa_r+0xeac>
  80c2a8:	d9800317 	ldw	r6,12(sp)
  80c2ac:	3000021e 	bne	r6,zero,80c2b8 <_dtoa_r+0xeac>
  80c2b0:	d8c00617 	ldw	r3,24(sp)
  80c2b4:	18003726 	beq	r3,zero,80c394 <_dtoa_r+0xf88>
  80c2b8:	b0002016 	blt	r22,zero,80c33c <_dtoa_r+0xf30>
  80c2bc:	b000041e 	bne	r22,zero,80c2d0 <_dtoa_r+0xec4>
  80c2c0:	d9000317 	ldw	r4,12(sp)
  80c2c4:	2000021e 	bne	r4,zero,80c2d0 <_dtoa_r+0xec4>
  80c2c8:	d8c00617 	ldw	r3,24(sp)
  80c2cc:	18001b26 	beq	r3,zero,80c33c <_dtoa_r+0xf30>
  80c2d0:	00810716 	blt	zero,r2,80c6f0 <_dtoa_r+0x12e4>
  80c2d4:	d8c00417 	ldw	r3,16(sp)
  80c2d8:	9d800044 	addi	r22,r19,1
  80c2dc:	9c800005 	stb	r18,0(r19)
  80c2e0:	b02f883a 	mov	r23,r22
  80c2e4:	98c10626 	beq	r19,r3,80c700 <_dtoa_r+0x12f4>
  80c2e8:	800b883a 	mov	r5,r16
  80c2ec:	000f883a 	mov	r7,zero
  80c2f0:	01800284 	movi	r6,10
  80c2f4:	e009883a 	mov	r4,fp
  80c2f8:	080e5600 	call	80e560 <__multadd>
  80c2fc:	1021883a 	mov	r16,r2
  80c300:	000f883a 	mov	r7,zero
  80c304:	01800284 	movi	r6,10
  80c308:	880b883a 	mov	r5,r17
  80c30c:	e009883a 	mov	r4,fp
  80c310:	8d002526 	beq	r17,r20,80c3a8 <_dtoa_r+0xf9c>
  80c314:	080e5600 	call	80e560 <__multadd>
  80c318:	a00b883a 	mov	r5,r20
  80c31c:	000f883a 	mov	r7,zero
  80c320:	01800284 	movi	r6,10
  80c324:	e009883a 	mov	r4,fp
  80c328:	1023883a 	mov	r17,r2
  80c32c:	080e5600 	call	80e560 <__multadd>
  80c330:	1029883a 	mov	r20,r2
  80c334:	b027883a 	mov	r19,r22
  80c338:	003fc006 	br	80c23c <__alt_mem_onchip_mem+0xff80423c>
  80c33c:	9011883a 	mov	r8,r18
  80c340:	00800e0e 	bge	zero,r2,80c37c <_dtoa_r+0xf70>
  80c344:	800b883a 	mov	r5,r16
  80c348:	01800044 	movi	r6,1
  80c34c:	e009883a 	mov	r4,fp
  80c350:	da001715 	stw	r8,92(sp)
  80c354:	080ec100 	call	80ec10 <__lshift>
  80c358:	a80b883a 	mov	r5,r21
  80c35c:	1009883a 	mov	r4,r2
  80c360:	1021883a 	mov	r16,r2
  80c364:	080ed580 	call	80ed58 <__mcmp>
  80c368:	da001717 	ldw	r8,92(sp)
  80c36c:	0081960e 	bge	zero,r2,80c9c8 <_dtoa_r+0x15bc>
  80c370:	00800e44 	movi	r2,57
  80c374:	40817026 	beq	r8,r2,80c938 <_dtoa_r+0x152c>
  80c378:	ba000c44 	addi	r8,r23,49
  80c37c:	8825883a 	mov	r18,r17
  80c380:	9dc00044 	addi	r23,r19,1
  80c384:	9a000005 	stb	r8,0(r19)
  80c388:	a023883a 	mov	r17,r20
  80c38c:	dc000915 	stw	r16,36(sp)
  80c390:	003f2406 	br	80c024 <__alt_mem_onchip_mem+0xff804024>
  80c394:	00800e44 	movi	r2,57
  80c398:	9011883a 	mov	r8,r18
  80c39c:	90816626 	beq	r18,r2,80c938 <_dtoa_r+0x152c>
  80c3a0:	05bff516 	blt	zero,r22,80c378 <__alt_mem_onchip_mem+0xff804378>
  80c3a4:	003ff506 	br	80c37c <__alt_mem_onchip_mem+0xff80437c>
  80c3a8:	080e5600 	call	80e560 <__multadd>
  80c3ac:	1023883a 	mov	r17,r2
  80c3b0:	1029883a 	mov	r20,r2
  80c3b4:	003fdf06 	br	80c334 <__alt_mem_onchip_mem+0xff804334>
  80c3b8:	e009883a 	mov	r4,fp
  80c3bc:	080e5380 	call	80e538 <_Bfree>
  80c3c0:	00800044 	movi	r2,1
  80c3c4:	003fbc06 	br	80c2b8 <__alt_mem_onchip_mem+0xff8042b8>
  80c3c8:	a80b883a 	mov	r5,r21
  80c3cc:	8009883a 	mov	r4,r16
  80c3d0:	080ed580 	call	80ed58 <__mcmp>
  80c3d4:	103edb0e 	bge	r2,zero,80bf44 <__alt_mem_onchip_mem+0xff803f44>
  80c3d8:	800b883a 	mov	r5,r16
  80c3dc:	000f883a 	mov	r7,zero
  80c3e0:	01800284 	movi	r6,10
  80c3e4:	e009883a 	mov	r4,fp
  80c3e8:	080e5600 	call	80e560 <__multadd>
  80c3ec:	1021883a 	mov	r16,r2
  80c3f0:	d8800517 	ldw	r2,20(sp)
  80c3f4:	d8c00b17 	ldw	r3,44(sp)
  80c3f8:	10bfffc4 	addi	r2,r2,-1
  80c3fc:	d8800515 	stw	r2,20(sp)
  80c400:	183f761e 	bne	r3,zero,80c1dc <__alt_mem_onchip_mem+0xff8041dc>
  80c404:	d9000c17 	ldw	r4,48(sp)
  80c408:	0101730e 	bge	zero,r4,80c9d8 <_dtoa_r+0x15cc>
  80c40c:	d9000615 	stw	r4,24(sp)
  80c410:	003ed006 	br	80bf54 <__alt_mem_onchip_mem+0xff803f54>
  80c414:	00800084 	movi	r2,2
  80c418:	3081861e 	bne	r6,r2,80ca34 <_dtoa_r+0x1628>
  80c41c:	d8000b15 	stw	zero,44(sp)
  80c420:	003f3c06 	br	80c114 <__alt_mem_onchip_mem+0xff804114>
  80c424:	dc000917 	ldw	r16,36(sp)
  80c428:	003e9206 	br	80be74 <__alt_mem_onchip_mem+0xff803e74>
  80c42c:	d9c00317 	ldw	r7,12(sp)
  80c430:	00800084 	movi	r2,2
  80c434:	11fec50e 	bge	r2,r7,80bf4c <__alt_mem_onchip_mem+0xff803f4c>
  80c438:	d9000617 	ldw	r4,24(sp)
  80c43c:	20013c1e 	bne	r4,zero,80c930 <_dtoa_r+0x1524>
  80c440:	a80b883a 	mov	r5,r21
  80c444:	000f883a 	mov	r7,zero
  80c448:	01800144 	movi	r6,5
  80c44c:	e009883a 	mov	r4,fp
  80c450:	080e5600 	call	80e560 <__multadd>
  80c454:	100b883a 	mov	r5,r2
  80c458:	8009883a 	mov	r4,r16
  80c45c:	102b883a 	mov	r21,r2
  80c460:	080ed580 	call	80ed58 <__mcmp>
  80c464:	dc000915 	stw	r16,36(sp)
  80c468:	00bf410e 	bge	zero,r2,80c170 <__alt_mem_onchip_mem+0xff804170>
  80c46c:	d9c00717 	ldw	r7,28(sp)
  80c470:	00800c44 	movi	r2,49
  80c474:	38800005 	stb	r2,0(r7)
  80c478:	d8800517 	ldw	r2,20(sp)
  80c47c:	3dc00044 	addi	r23,r7,1
  80c480:	10800044 	addi	r2,r2,1
  80c484:	d8800515 	stw	r2,20(sp)
  80c488:	003f3d06 	br	80c180 <__alt_mem_onchip_mem+0xff804180>
  80c48c:	d9800517 	ldw	r6,20(sp)
  80c490:	d9c00717 	ldw	r7,28(sp)
  80c494:	00800c44 	movi	r2,49
  80c498:	31800044 	addi	r6,r6,1
  80c49c:	d9800515 	stw	r6,20(sp)
  80c4a0:	38800005 	stb	r2,0(r7)
  80c4a4:	003edf06 	br	80c024 <__alt_mem_onchip_mem+0xff804024>
  80c4a8:	d8000b15 	stw	zero,44(sp)
  80c4ac:	003c9f06 	br	80b72c <__alt_mem_onchip_mem+0xff80372c>
  80c4b0:	903e7e1e 	bne	r18,zero,80beac <__alt_mem_onchip_mem+0xff803eac>
  80c4b4:	00800434 	movhi	r2,16
  80c4b8:	10bfffc4 	addi	r2,r2,-1
  80c4bc:	9884703a 	and	r2,r19,r2
  80c4c0:	1000ea1e 	bne	r2,zero,80c86c <_dtoa_r+0x1460>
  80c4c4:	9cdffc2c 	andhi	r19,r19,32752
  80c4c8:	9800e826 	beq	r19,zero,80c86c <_dtoa_r+0x1460>
  80c4cc:	d9c00817 	ldw	r7,32(sp)
  80c4d0:	b5800044 	addi	r22,r22,1
  80c4d4:	04c00044 	movi	r19,1
  80c4d8:	39c00044 	addi	r7,r7,1
  80c4dc:	d9c00815 	stw	r7,32(sp)
  80c4e0:	d8800d17 	ldw	r2,52(sp)
  80c4e4:	103e721e 	bne	r2,zero,80beb0 <__alt_mem_onchip_mem+0xff803eb0>
  80c4e8:	00800044 	movi	r2,1
  80c4ec:	003e7906 	br	80bed4 <__alt_mem_onchip_mem+0xff803ed4>
  80c4f0:	8009883a 	mov	r4,r16
  80c4f4:	0808c3c0 	call	808c3c <__floatsidf>
  80c4f8:	d9800f17 	ldw	r6,60(sp)
  80c4fc:	d9c01017 	ldw	r7,64(sp)
  80c500:	1009883a 	mov	r4,r2
  80c504:	180b883a 	mov	r5,r3
  80c508:	08138d00 	call	8138d0 <__muldf3>
  80c50c:	000d883a 	mov	r6,zero
  80c510:	01d00734 	movhi	r7,16412
  80c514:	1009883a 	mov	r4,r2
  80c518:	180b883a 	mov	r5,r3
  80c51c:	08078c40 	call	8078c4 <__adddf3>
  80c520:	047f3034 	movhi	r17,64704
  80c524:	1021883a 	mov	r16,r2
  80c528:	1c63883a 	add	r17,r3,r17
  80c52c:	d9000f17 	ldw	r4,60(sp)
  80c530:	d9401017 	ldw	r5,64(sp)
  80c534:	000d883a 	mov	r6,zero
  80c538:	01d00534 	movhi	r7,16404
  80c53c:	08083400 	call	808340 <__subdf3>
  80c540:	800d883a 	mov	r6,r16
  80c544:	880f883a 	mov	r7,r17
  80c548:	1009883a 	mov	r4,r2
  80c54c:	180b883a 	mov	r5,r3
  80c550:	102b883a 	mov	r21,r2
  80c554:	1829883a 	mov	r20,r3
  80c558:	08081700 	call	808170 <__gedf2>
  80c55c:	00806c16 	blt	zero,r2,80c710 <_dtoa_r+0x1304>
  80c560:	89e0003c 	xorhi	r7,r17,32768
  80c564:	800d883a 	mov	r6,r16
  80c568:	a809883a 	mov	r4,r21
  80c56c:	a00b883a 	mov	r5,r20
  80c570:	080824c0 	call	80824c <__ledf2>
  80c574:	103d7e0e 	bge	r2,zero,80bb70 <__alt_mem_onchip_mem+0xff803b70>
  80c578:	002b883a 	mov	r21,zero
  80c57c:	0023883a 	mov	r17,zero
  80c580:	003efb06 	br	80c170 <__alt_mem_onchip_mem+0xff804170>
  80c584:	d8800717 	ldw	r2,28(sp)
  80c588:	003bd006 	br	80b4cc <__alt_mem_onchip_mem+0xff8034cc>
  80c58c:	d9000a17 	ldw	r4,40(sp)
  80c590:	d9800d17 	ldw	r6,52(sp)
  80c594:	dd400a15 	stw	r21,40(sp)
  80c598:	a905c83a 	sub	r2,r21,r4
  80c59c:	308d883a 	add	r6,r6,r2
  80c5a0:	d9800d15 	stw	r6,52(sp)
  80c5a4:	002b883a 	mov	r21,zero
  80c5a8:	003e0606 	br	80bdc4 <__alt_mem_onchip_mem+0xff803dc4>
  80c5ac:	9023883a 	mov	r17,r18
  80c5b0:	9829883a 	mov	r20,r19
  80c5b4:	04000084 	movi	r16,2
  80c5b8:	003c9206 	br	80b804 <__alt_mem_onchip_mem+0xff803804>
  80c5bc:	04000044 	movi	r16,1
  80c5c0:	dc000c15 	stw	r16,48(sp)
  80c5c4:	dc000615 	stw	r16,24(sp)
  80c5c8:	dc002215 	stw	r16,136(sp)
  80c5cc:	e0001115 	stw	zero,68(fp)
  80c5d0:	000b883a 	mov	r5,zero
  80c5d4:	003c6906 	br	80b77c <__alt_mem_onchip_mem+0xff80377c>
  80c5d8:	3021883a 	mov	r16,r6
  80c5dc:	003ffb06 	br	80c5cc <__alt_mem_onchip_mem+0xff8045cc>
  80c5e0:	1000021e 	bne	r2,zero,80c5ec <_dtoa_r+0x11e0>
  80c5e4:	4200004c 	andi	r8,r8,1
  80c5e8:	403e7d1e 	bne	r8,zero,80bfe0 <__alt_mem_onchip_mem+0xff803fe0>
  80c5ec:	01000c04 	movi	r4,48
  80c5f0:	00000106 	br	80c5f8 <_dtoa_r+0x11ec>
  80c5f4:	102f883a 	mov	r23,r2
  80c5f8:	b8bfffc4 	addi	r2,r23,-1
  80c5fc:	10c00007 	ldb	r3,0(r2)
  80c600:	193ffc26 	beq	r3,r4,80c5f4 <__alt_mem_onchip_mem+0xff8045f4>
  80c604:	003e8706 	br	80c024 <__alt_mem_onchip_mem+0xff804024>
  80c608:	d8800517 	ldw	r2,20(sp)
  80c60c:	00a3c83a 	sub	r17,zero,r2
  80c610:	8800a426 	beq	r17,zero,80c8a4 <_dtoa_r+0x1498>
  80c614:	888003cc 	andi	r2,r17,15
  80c618:	100490fa 	slli	r2,r2,3
  80c61c:	00c020b4 	movhi	r3,130
  80c620:	18e10504 	addi	r3,r3,-31724
  80c624:	1885883a 	add	r2,r3,r2
  80c628:	11800017 	ldw	r6,0(r2)
  80c62c:	11c00117 	ldw	r7,4(r2)
  80c630:	9009883a 	mov	r4,r18
  80c634:	980b883a 	mov	r5,r19
  80c638:	8823d13a 	srai	r17,r17,4
  80c63c:	08138d00 	call	8138d0 <__muldf3>
  80c640:	d8800f15 	stw	r2,60(sp)
  80c644:	d8c01015 	stw	r3,64(sp)
  80c648:	8800e826 	beq	r17,zero,80c9ec <_dtoa_r+0x15e0>
  80c64c:	050020b4 	movhi	r20,130
  80c650:	a520fb04 	addi	r20,r20,-31764
  80c654:	04000084 	movi	r16,2
  80c658:	8980004c 	andi	r6,r17,1
  80c65c:	1009883a 	mov	r4,r2
  80c660:	8823d07a 	srai	r17,r17,1
  80c664:	180b883a 	mov	r5,r3
  80c668:	30000426 	beq	r6,zero,80c67c <_dtoa_r+0x1270>
  80c66c:	a1800017 	ldw	r6,0(r20)
  80c670:	a1c00117 	ldw	r7,4(r20)
  80c674:	84000044 	addi	r16,r16,1
  80c678:	08138d00 	call	8138d0 <__muldf3>
  80c67c:	a5000204 	addi	r20,r20,8
  80c680:	883ff51e 	bne	r17,zero,80c658 <__alt_mem_onchip_mem+0xff804658>
  80c684:	d8800f15 	stw	r2,60(sp)
  80c688:	d8c01015 	stw	r3,64(sp)
  80c68c:	003c7606 	br	80b868 <__alt_mem_onchip_mem+0xff803868>
  80c690:	00c00c04 	movi	r3,48
  80c694:	10c00005 	stb	r3,0(r2)
  80c698:	d8c00517 	ldw	r3,20(sp)
  80c69c:	bd3fffc3 	ldbu	r20,-1(r23)
  80c6a0:	18c00044 	addi	r3,r3,1
  80c6a4:	d8c00515 	stw	r3,20(sp)
  80c6a8:	003db906 	br	80bd90 <__alt_mem_onchip_mem+0xff803d90>
  80c6ac:	89400117 	ldw	r5,4(r17)
  80c6b0:	e009883a 	mov	r4,fp
  80c6b4:	080e4900 	call	80e490 <_Balloc>
  80c6b8:	89800417 	ldw	r6,16(r17)
  80c6bc:	89400304 	addi	r5,r17,12
  80c6c0:	11000304 	addi	r4,r2,12
  80c6c4:	31800084 	addi	r6,r6,2
  80c6c8:	318d883a 	add	r6,r6,r6
  80c6cc:	318d883a 	add	r6,r6,r6
  80c6d0:	1027883a 	mov	r19,r2
  80c6d4:	080e2200 	call	80e220 <memcpy>
  80c6d8:	01800044 	movi	r6,1
  80c6dc:	980b883a 	mov	r5,r19
  80c6e0:	e009883a 	mov	r4,fp
  80c6e4:	080ec100 	call	80ec10 <__lshift>
  80c6e8:	1029883a 	mov	r20,r2
  80c6ec:	003ecc06 	br	80c220 <__alt_mem_onchip_mem+0xff804220>
  80c6f0:	00800e44 	movi	r2,57
  80c6f4:	90809026 	beq	r18,r2,80c938 <_dtoa_r+0x152c>
  80c6f8:	92000044 	addi	r8,r18,1
  80c6fc:	003f1f06 	br	80c37c <__alt_mem_onchip_mem+0xff80437c>
  80c700:	9011883a 	mov	r8,r18
  80c704:	8825883a 	mov	r18,r17
  80c708:	a023883a 	mov	r17,r20
  80c70c:	003e2906 	br	80bfb4 <__alt_mem_onchip_mem+0xff803fb4>
  80c710:	002b883a 	mov	r21,zero
  80c714:	0023883a 	mov	r17,zero
  80c718:	003f5406 	br	80c46c <__alt_mem_onchip_mem+0xff80446c>
  80c71c:	61bfffc4 	addi	r6,r12,-1
  80c720:	300490fa 	slli	r2,r6,3
  80c724:	00c020b4 	movhi	r3,130
  80c728:	18e10504 	addi	r3,r3,-31724
  80c72c:	1885883a 	add	r2,r3,r2
  80c730:	11000017 	ldw	r4,0(r2)
  80c734:	11400117 	ldw	r5,4(r2)
  80c738:	d8800717 	ldw	r2,28(sp)
  80c73c:	880f883a 	mov	r7,r17
  80c740:	d9801215 	stw	r6,72(sp)
  80c744:	800d883a 	mov	r6,r16
  80c748:	db001615 	stw	r12,88(sp)
  80c74c:	15c00044 	addi	r23,r2,1
  80c750:	08138d00 	call	8138d0 <__muldf3>
  80c754:	d9401017 	ldw	r5,64(sp)
  80c758:	d9000f17 	ldw	r4,60(sp)
  80c75c:	d8c01515 	stw	r3,84(sp)
  80c760:	d8801415 	stw	r2,80(sp)
  80c764:	0813fe80 	call	813fe8 <__fixdfsi>
  80c768:	1009883a 	mov	r4,r2
  80c76c:	1021883a 	mov	r16,r2
  80c770:	0808c3c0 	call	808c3c <__floatsidf>
  80c774:	d9000f17 	ldw	r4,60(sp)
  80c778:	d9401017 	ldw	r5,64(sp)
  80c77c:	100d883a 	mov	r6,r2
  80c780:	180f883a 	mov	r7,r3
  80c784:	08083400 	call	808340 <__subdf3>
  80c788:	1829883a 	mov	r20,r3
  80c78c:	d8c00717 	ldw	r3,28(sp)
  80c790:	84000c04 	addi	r16,r16,48
  80c794:	1023883a 	mov	r17,r2
  80c798:	1c000005 	stb	r16,0(r3)
  80c79c:	db001617 	ldw	r12,88(sp)
  80c7a0:	00800044 	movi	r2,1
  80c7a4:	60802226 	beq	r12,r2,80c830 <_dtoa_r+0x1424>
  80c7a8:	d9c00717 	ldw	r7,28(sp)
  80c7ac:	8805883a 	mov	r2,r17
  80c7b0:	b82b883a 	mov	r21,r23
  80c7b4:	3b19883a 	add	r12,r7,r12
  80c7b8:	6023883a 	mov	r17,r12
  80c7bc:	a007883a 	mov	r3,r20
  80c7c0:	dc800f15 	stw	r18,60(sp)
  80c7c4:	000d883a 	mov	r6,zero
  80c7c8:	01d00934 	movhi	r7,16420
  80c7cc:	1009883a 	mov	r4,r2
  80c7d0:	180b883a 	mov	r5,r3
  80c7d4:	08138d00 	call	8138d0 <__muldf3>
  80c7d8:	180b883a 	mov	r5,r3
  80c7dc:	1009883a 	mov	r4,r2
  80c7e0:	1829883a 	mov	r20,r3
  80c7e4:	1025883a 	mov	r18,r2
  80c7e8:	0813fe80 	call	813fe8 <__fixdfsi>
  80c7ec:	1009883a 	mov	r4,r2
  80c7f0:	1021883a 	mov	r16,r2
  80c7f4:	0808c3c0 	call	808c3c <__floatsidf>
  80c7f8:	100d883a 	mov	r6,r2
  80c7fc:	180f883a 	mov	r7,r3
  80c800:	9009883a 	mov	r4,r18
  80c804:	a00b883a 	mov	r5,r20
  80c808:	84000c04 	addi	r16,r16,48
  80c80c:	08083400 	call	808340 <__subdf3>
  80c810:	ad400044 	addi	r21,r21,1
  80c814:	ac3fffc5 	stb	r16,-1(r21)
  80c818:	ac7fea1e 	bne	r21,r17,80c7c4 <__alt_mem_onchip_mem+0xff8047c4>
  80c81c:	1023883a 	mov	r17,r2
  80c820:	d8801217 	ldw	r2,72(sp)
  80c824:	dc800f17 	ldw	r18,60(sp)
  80c828:	1829883a 	mov	r20,r3
  80c82c:	b8af883a 	add	r23,r23,r2
  80c830:	d9001417 	ldw	r4,80(sp)
  80c834:	d9401517 	ldw	r5,84(sp)
  80c838:	000d883a 	mov	r6,zero
  80c83c:	01cff834 	movhi	r7,16352
  80c840:	08078c40 	call	8078c4 <__adddf3>
  80c844:	880d883a 	mov	r6,r17
  80c848:	a00f883a 	mov	r7,r20
  80c84c:	1009883a 	mov	r4,r2
  80c850:	180b883a 	mov	r5,r3
  80c854:	080824c0 	call	80824c <__ledf2>
  80c858:	10003e0e 	bge	r2,zero,80c954 <_dtoa_r+0x1548>
  80c85c:	d9001317 	ldw	r4,76(sp)
  80c860:	bd3fffc3 	ldbu	r20,-1(r23)
  80c864:	d9000515 	stw	r4,20(sp)
  80c868:	003d3b06 	br	80bd58 <__alt_mem_onchip_mem+0xff803d58>
  80c86c:	0027883a 	mov	r19,zero
  80c870:	003f1b06 	br	80c4e0 <__alt_mem_onchip_mem+0xff8044e0>
  80c874:	d8800817 	ldw	r2,32(sp)
  80c878:	11e9c83a 	sub	r20,r2,r7
  80c87c:	0005883a 	mov	r2,zero
  80c880:	003d5406 	br	80bdd4 <__alt_mem_onchip_mem+0xff803dd4>
  80c884:	00800044 	movi	r2,1
  80c888:	003dc706 	br	80bfa8 <__alt_mem_onchip_mem+0xff803fa8>
  80c88c:	d8c00217 	ldw	r3,8(sp)
  80c890:	00800d84 	movi	r2,54
  80c894:	dd400a17 	ldw	r21,40(sp)
  80c898:	10c5c83a 	sub	r2,r2,r3
  80c89c:	dd000817 	ldw	r20,32(sp)
  80c8a0:	003d4c06 	br	80bdd4 <__alt_mem_onchip_mem+0xff803dd4>
  80c8a4:	dc800f15 	stw	r18,60(sp)
  80c8a8:	dcc01015 	stw	r19,64(sp)
  80c8ac:	04000084 	movi	r16,2
  80c8b0:	003bed06 	br	80b868 <__alt_mem_onchip_mem+0xff803868>
  80c8b4:	d9000617 	ldw	r4,24(sp)
  80c8b8:	203f0d26 	beq	r4,zero,80c4f0 <__alt_mem_onchip_mem+0xff8044f0>
  80c8bc:	d9800c17 	ldw	r6,48(sp)
  80c8c0:	01bcab0e 	bge	zero,r6,80bb70 <__alt_mem_onchip_mem+0xff803b70>
  80c8c4:	d9401017 	ldw	r5,64(sp)
  80c8c8:	d9000f17 	ldw	r4,60(sp)
  80c8cc:	000d883a 	mov	r6,zero
  80c8d0:	01d00934 	movhi	r7,16420
  80c8d4:	08138d00 	call	8138d0 <__muldf3>
  80c8d8:	81000044 	addi	r4,r16,1
  80c8dc:	d8800f15 	stw	r2,60(sp)
  80c8e0:	d8c01015 	stw	r3,64(sp)
  80c8e4:	0808c3c0 	call	808c3c <__floatsidf>
  80c8e8:	d9800f17 	ldw	r6,60(sp)
  80c8ec:	d9c01017 	ldw	r7,64(sp)
  80c8f0:	1009883a 	mov	r4,r2
  80c8f4:	180b883a 	mov	r5,r3
  80c8f8:	08138d00 	call	8138d0 <__muldf3>
  80c8fc:	01d00734 	movhi	r7,16412
  80c900:	000d883a 	mov	r6,zero
  80c904:	1009883a 	mov	r4,r2
  80c908:	180b883a 	mov	r5,r3
  80c90c:	08078c40 	call	8078c4 <__adddf3>
  80c910:	d9c00517 	ldw	r7,20(sp)
  80c914:	047f3034 	movhi	r17,64704
  80c918:	1021883a 	mov	r16,r2
  80c91c:	39ffffc4 	addi	r7,r7,-1
  80c920:	d9c01315 	stw	r7,76(sp)
  80c924:	1c63883a 	add	r17,r3,r17
  80c928:	db000c17 	ldw	r12,48(sp)
  80c92c:	003bea06 	br	80b8d8 <__alt_mem_onchip_mem+0xff8038d8>
  80c930:	dc000915 	stw	r16,36(sp)
  80c934:	003e0e06 	br	80c170 <__alt_mem_onchip_mem+0xff804170>
  80c938:	01000e44 	movi	r4,57
  80c93c:	8825883a 	mov	r18,r17
  80c940:	9dc00044 	addi	r23,r19,1
  80c944:	99000005 	stb	r4,0(r19)
  80c948:	a023883a 	mov	r17,r20
  80c94c:	dc000915 	stw	r16,36(sp)
  80c950:	003da406 	br	80bfe4 <__alt_mem_onchip_mem+0xff803fe4>
  80c954:	d9801417 	ldw	r6,80(sp)
  80c958:	d9c01517 	ldw	r7,84(sp)
  80c95c:	0009883a 	mov	r4,zero
  80c960:	014ff834 	movhi	r5,16352
  80c964:	08083400 	call	808340 <__subdf3>
  80c968:	880d883a 	mov	r6,r17
  80c96c:	a00f883a 	mov	r7,r20
  80c970:	1009883a 	mov	r4,r2
  80c974:	180b883a 	mov	r5,r3
  80c978:	08081700 	call	808170 <__gedf2>
  80c97c:	00bc7c0e 	bge	zero,r2,80bb70 <__alt_mem_onchip_mem+0xff803b70>
  80c980:	01000c04 	movi	r4,48
  80c984:	00000106 	br	80c98c <_dtoa_r+0x1580>
  80c988:	102f883a 	mov	r23,r2
  80c98c:	b8bfffc4 	addi	r2,r23,-1
  80c990:	10c00007 	ldb	r3,0(r2)
  80c994:	193ffc26 	beq	r3,r4,80c988 <__alt_mem_onchip_mem+0xff804988>
  80c998:	d9801317 	ldw	r6,76(sp)
  80c99c:	d9800515 	stw	r6,20(sp)
  80c9a0:	003c4406 	br	80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80c9a4:	d9801317 	ldw	r6,76(sp)
  80c9a8:	d9800515 	stw	r6,20(sp)
  80c9ac:	003cea06 	br	80bd58 <__alt_mem_onchip_mem+0xff803d58>
  80c9b0:	dd800f17 	ldw	r22,60(sp)
  80c9b4:	dcc01017 	ldw	r19,64(sp)
  80c9b8:	dc801217 	ldw	r18,72(sp)
  80c9bc:	003c6c06 	br	80bb70 <__alt_mem_onchip_mem+0xff803b70>
  80c9c0:	903e031e 	bne	r18,zero,80c1d0 <__alt_mem_onchip_mem+0xff8041d0>
  80c9c4:	003ebb06 	br	80c4b4 <__alt_mem_onchip_mem+0xff8044b4>
  80c9c8:	103e6c1e 	bne	r2,zero,80c37c <__alt_mem_onchip_mem+0xff80437c>
  80c9cc:	4080004c 	andi	r2,r8,1
  80c9d0:	103e6a26 	beq	r2,zero,80c37c <__alt_mem_onchip_mem+0xff80437c>
  80c9d4:	003e6606 	br	80c370 <__alt_mem_onchip_mem+0xff804370>
  80c9d8:	d8c00317 	ldw	r3,12(sp)
  80c9dc:	00800084 	movi	r2,2
  80c9e0:	10c02916 	blt	r2,r3,80ca88 <_dtoa_r+0x167c>
  80c9e4:	d9000c17 	ldw	r4,48(sp)
  80c9e8:	003e8806 	br	80c40c <__alt_mem_onchip_mem+0xff80440c>
  80c9ec:	04000084 	movi	r16,2
  80c9f0:	003b9d06 	br	80b868 <__alt_mem_onchip_mem+0xff803868>
  80c9f4:	d9001317 	ldw	r4,76(sp)
  80c9f8:	d9000515 	stw	r4,20(sp)
  80c9fc:	003cd606 	br	80bd58 <__alt_mem_onchip_mem+0xff803d58>
  80ca00:	d8801317 	ldw	r2,76(sp)
  80ca04:	d8800515 	stw	r2,20(sp)
  80ca08:	003c2a06 	br	80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80ca0c:	d9800317 	ldw	r6,12(sp)
  80ca10:	00800084 	movi	r2,2
  80ca14:	11801516 	blt	r2,r6,80ca6c <_dtoa_r+0x1660>
  80ca18:	d9c00c17 	ldw	r7,48(sp)
  80ca1c:	d9c00615 	stw	r7,24(sp)
  80ca20:	003df706 	br	80c200 <__alt_mem_onchip_mem+0xff804200>
  80ca24:	193d3926 	beq	r3,r4,80bf0c <__alt_mem_onchip_mem+0xff803f0c>
  80ca28:	00c00f04 	movi	r3,60
  80ca2c:	1885c83a 	sub	r2,r3,r2
  80ca30:	003ddf06 	br	80c1b0 <__alt_mem_onchip_mem+0xff8041b0>
  80ca34:	e009883a 	mov	r4,fp
  80ca38:	e0001115 	stw	zero,68(fp)
  80ca3c:	000b883a 	mov	r5,zero
  80ca40:	080e4900 	call	80e490 <_Balloc>
  80ca44:	d8800715 	stw	r2,28(sp)
  80ca48:	d8c00717 	ldw	r3,28(sp)
  80ca4c:	00bfffc4 	movi	r2,-1
  80ca50:	01000044 	movi	r4,1
  80ca54:	d8800c15 	stw	r2,48(sp)
  80ca58:	e0c01015 	stw	r3,64(fp)
  80ca5c:	d9000b15 	stw	r4,44(sp)
  80ca60:	d8800615 	stw	r2,24(sp)
  80ca64:	d8002215 	stw	zero,136(sp)
  80ca68:	003c4106 	br	80bb70 <__alt_mem_onchip_mem+0xff803b70>
  80ca6c:	d8c00c17 	ldw	r3,48(sp)
  80ca70:	d8c00615 	stw	r3,24(sp)
  80ca74:	003e7006 	br	80c438 <__alt_mem_onchip_mem+0xff804438>
  80ca78:	04400044 	movi	r17,1
  80ca7c:	003b2006 	br	80b700 <__alt_mem_onchip_mem+0xff803700>
  80ca80:	000b883a 	mov	r5,zero
  80ca84:	003b3d06 	br	80b77c <__alt_mem_onchip_mem+0xff80377c>
  80ca88:	d8800c17 	ldw	r2,48(sp)
  80ca8c:	d8800615 	stw	r2,24(sp)
  80ca90:	003e6906 	br	80c438 <__alt_mem_onchip_mem+0xff804438>

0080ca94 <__sflush_r>:
  80ca94:	2880030b 	ldhu	r2,12(r5)
  80ca98:	defffb04 	addi	sp,sp,-20
  80ca9c:	dcc00315 	stw	r19,12(sp)
  80caa0:	dc400115 	stw	r17,4(sp)
  80caa4:	dfc00415 	stw	ra,16(sp)
  80caa8:	dc800215 	stw	r18,8(sp)
  80caac:	dc000015 	stw	r16,0(sp)
  80cab0:	10c0020c 	andi	r3,r2,8
  80cab4:	2823883a 	mov	r17,r5
  80cab8:	2027883a 	mov	r19,r4
  80cabc:	1800311e 	bne	r3,zero,80cb84 <__sflush_r+0xf0>
  80cac0:	28c00117 	ldw	r3,4(r5)
  80cac4:	10820014 	ori	r2,r2,2048
  80cac8:	2880030d 	sth	r2,12(r5)
  80cacc:	00c04b0e 	bge	zero,r3,80cbfc <__sflush_r+0x168>
  80cad0:	8a000a17 	ldw	r8,40(r17)
  80cad4:	40002326 	beq	r8,zero,80cb64 <__sflush_r+0xd0>
  80cad8:	9c000017 	ldw	r16,0(r19)
  80cadc:	10c4000c 	andi	r3,r2,4096
  80cae0:	98000015 	stw	zero,0(r19)
  80cae4:	18004826 	beq	r3,zero,80cc08 <__sflush_r+0x174>
  80cae8:	89801417 	ldw	r6,80(r17)
  80caec:	10c0010c 	andi	r3,r2,4
  80caf0:	18000626 	beq	r3,zero,80cb0c <__sflush_r+0x78>
  80caf4:	88c00117 	ldw	r3,4(r17)
  80caf8:	88800c17 	ldw	r2,48(r17)
  80cafc:	30cdc83a 	sub	r6,r6,r3
  80cb00:	10000226 	beq	r2,zero,80cb0c <__sflush_r+0x78>
  80cb04:	88800f17 	ldw	r2,60(r17)
  80cb08:	308dc83a 	sub	r6,r6,r2
  80cb0c:	89400717 	ldw	r5,28(r17)
  80cb10:	000f883a 	mov	r7,zero
  80cb14:	9809883a 	mov	r4,r19
  80cb18:	403ee83a 	callr	r8
  80cb1c:	00ffffc4 	movi	r3,-1
  80cb20:	10c04426 	beq	r2,r3,80cc34 <__sflush_r+0x1a0>
  80cb24:	88c0030b 	ldhu	r3,12(r17)
  80cb28:	89000417 	ldw	r4,16(r17)
  80cb2c:	88000115 	stw	zero,4(r17)
  80cb30:	197dffcc 	andi	r5,r3,63487
  80cb34:	8940030d 	sth	r5,12(r17)
  80cb38:	89000015 	stw	r4,0(r17)
  80cb3c:	18c4000c 	andi	r3,r3,4096
  80cb40:	18002c1e 	bne	r3,zero,80cbf4 <__sflush_r+0x160>
  80cb44:	89400c17 	ldw	r5,48(r17)
  80cb48:	9c000015 	stw	r16,0(r19)
  80cb4c:	28000526 	beq	r5,zero,80cb64 <__sflush_r+0xd0>
  80cb50:	88801004 	addi	r2,r17,64
  80cb54:	28800226 	beq	r5,r2,80cb60 <__sflush_r+0xcc>
  80cb58:	9809883a 	mov	r4,r19
  80cb5c:	080d2000 	call	80d200 <_free_r>
  80cb60:	88000c15 	stw	zero,48(r17)
  80cb64:	0005883a 	mov	r2,zero
  80cb68:	dfc00417 	ldw	ra,16(sp)
  80cb6c:	dcc00317 	ldw	r19,12(sp)
  80cb70:	dc800217 	ldw	r18,8(sp)
  80cb74:	dc400117 	ldw	r17,4(sp)
  80cb78:	dc000017 	ldw	r16,0(sp)
  80cb7c:	dec00504 	addi	sp,sp,20
  80cb80:	f800283a 	ret
  80cb84:	2c800417 	ldw	r18,16(r5)
  80cb88:	903ff626 	beq	r18,zero,80cb64 <__alt_mem_onchip_mem+0xff804b64>
  80cb8c:	2c000017 	ldw	r16,0(r5)
  80cb90:	108000cc 	andi	r2,r2,3
  80cb94:	2c800015 	stw	r18,0(r5)
  80cb98:	84a1c83a 	sub	r16,r16,r18
  80cb9c:	1000131e 	bne	r2,zero,80cbec <__sflush_r+0x158>
  80cba0:	28800517 	ldw	r2,20(r5)
  80cba4:	88800215 	stw	r2,8(r17)
  80cba8:	04000316 	blt	zero,r16,80cbb8 <__sflush_r+0x124>
  80cbac:	003fed06 	br	80cb64 <__alt_mem_onchip_mem+0xff804b64>
  80cbb0:	90a5883a 	add	r18,r18,r2
  80cbb4:	043feb0e 	bge	zero,r16,80cb64 <__alt_mem_onchip_mem+0xff804b64>
  80cbb8:	88800917 	ldw	r2,36(r17)
  80cbbc:	89400717 	ldw	r5,28(r17)
  80cbc0:	800f883a 	mov	r7,r16
  80cbc4:	900d883a 	mov	r6,r18
  80cbc8:	9809883a 	mov	r4,r19
  80cbcc:	103ee83a 	callr	r2
  80cbd0:	80a1c83a 	sub	r16,r16,r2
  80cbd4:	00bff616 	blt	zero,r2,80cbb0 <__alt_mem_onchip_mem+0xff804bb0>
  80cbd8:	88c0030b 	ldhu	r3,12(r17)
  80cbdc:	00bfffc4 	movi	r2,-1
  80cbe0:	18c01014 	ori	r3,r3,64
  80cbe4:	88c0030d 	sth	r3,12(r17)
  80cbe8:	003fdf06 	br	80cb68 <__alt_mem_onchip_mem+0xff804b68>
  80cbec:	0005883a 	mov	r2,zero
  80cbf0:	003fec06 	br	80cba4 <__alt_mem_onchip_mem+0xff804ba4>
  80cbf4:	88801415 	stw	r2,80(r17)
  80cbf8:	003fd206 	br	80cb44 <__alt_mem_onchip_mem+0xff804b44>
  80cbfc:	28c00f17 	ldw	r3,60(r5)
  80cc00:	00ffb316 	blt	zero,r3,80cad0 <__alt_mem_onchip_mem+0xff804ad0>
  80cc04:	003fd706 	br	80cb64 <__alt_mem_onchip_mem+0xff804b64>
  80cc08:	89400717 	ldw	r5,28(r17)
  80cc0c:	000d883a 	mov	r6,zero
  80cc10:	01c00044 	movi	r7,1
  80cc14:	9809883a 	mov	r4,r19
  80cc18:	403ee83a 	callr	r8
  80cc1c:	100d883a 	mov	r6,r2
  80cc20:	00bfffc4 	movi	r2,-1
  80cc24:	30801426 	beq	r6,r2,80cc78 <__sflush_r+0x1e4>
  80cc28:	8880030b 	ldhu	r2,12(r17)
  80cc2c:	8a000a17 	ldw	r8,40(r17)
  80cc30:	003fae06 	br	80caec <__alt_mem_onchip_mem+0xff804aec>
  80cc34:	98c00017 	ldw	r3,0(r19)
  80cc38:	183fba26 	beq	r3,zero,80cb24 <__alt_mem_onchip_mem+0xff804b24>
  80cc3c:	01000744 	movi	r4,29
  80cc40:	19000626 	beq	r3,r4,80cc5c <__sflush_r+0x1c8>
  80cc44:	01000584 	movi	r4,22
  80cc48:	19000426 	beq	r3,r4,80cc5c <__sflush_r+0x1c8>
  80cc4c:	88c0030b 	ldhu	r3,12(r17)
  80cc50:	18c01014 	ori	r3,r3,64
  80cc54:	88c0030d 	sth	r3,12(r17)
  80cc58:	003fc306 	br	80cb68 <__alt_mem_onchip_mem+0xff804b68>
  80cc5c:	8880030b 	ldhu	r2,12(r17)
  80cc60:	88c00417 	ldw	r3,16(r17)
  80cc64:	88000115 	stw	zero,4(r17)
  80cc68:	10bdffcc 	andi	r2,r2,63487
  80cc6c:	8880030d 	sth	r2,12(r17)
  80cc70:	88c00015 	stw	r3,0(r17)
  80cc74:	003fb306 	br	80cb44 <__alt_mem_onchip_mem+0xff804b44>
  80cc78:	98800017 	ldw	r2,0(r19)
  80cc7c:	103fea26 	beq	r2,zero,80cc28 <__alt_mem_onchip_mem+0xff804c28>
  80cc80:	00c00744 	movi	r3,29
  80cc84:	10c00226 	beq	r2,r3,80cc90 <__sflush_r+0x1fc>
  80cc88:	00c00584 	movi	r3,22
  80cc8c:	10c0031e 	bne	r2,r3,80cc9c <__sflush_r+0x208>
  80cc90:	9c000015 	stw	r16,0(r19)
  80cc94:	0005883a 	mov	r2,zero
  80cc98:	003fb306 	br	80cb68 <__alt_mem_onchip_mem+0xff804b68>
  80cc9c:	88c0030b 	ldhu	r3,12(r17)
  80cca0:	3005883a 	mov	r2,r6
  80cca4:	18c01014 	ori	r3,r3,64
  80cca8:	88c0030d 	sth	r3,12(r17)
  80ccac:	003fae06 	br	80cb68 <__alt_mem_onchip_mem+0xff804b68>

0080ccb0 <_fflush_r>:
  80ccb0:	defffd04 	addi	sp,sp,-12
  80ccb4:	dc000115 	stw	r16,4(sp)
  80ccb8:	dfc00215 	stw	ra,8(sp)
  80ccbc:	2021883a 	mov	r16,r4
  80ccc0:	20000226 	beq	r4,zero,80cccc <_fflush_r+0x1c>
  80ccc4:	20800e17 	ldw	r2,56(r4)
  80ccc8:	10000c26 	beq	r2,zero,80ccfc <_fflush_r+0x4c>
  80cccc:	2880030f 	ldh	r2,12(r5)
  80ccd0:	1000051e 	bne	r2,zero,80cce8 <_fflush_r+0x38>
  80ccd4:	0005883a 	mov	r2,zero
  80ccd8:	dfc00217 	ldw	ra,8(sp)
  80ccdc:	dc000117 	ldw	r16,4(sp)
  80cce0:	dec00304 	addi	sp,sp,12
  80cce4:	f800283a 	ret
  80cce8:	8009883a 	mov	r4,r16
  80ccec:	dfc00217 	ldw	ra,8(sp)
  80ccf0:	dc000117 	ldw	r16,4(sp)
  80ccf4:	dec00304 	addi	sp,sp,12
  80ccf8:	080ca941 	jmpi	80ca94 <__sflush_r>
  80ccfc:	d9400015 	stw	r5,0(sp)
  80cd00:	080d08c0 	call	80d08c <__sinit>
  80cd04:	d9400017 	ldw	r5,0(sp)
  80cd08:	003ff006 	br	80cccc <__alt_mem_onchip_mem+0xff804ccc>

0080cd0c <fflush>:
  80cd0c:	20000526 	beq	r4,zero,80cd24 <fflush+0x18>
  80cd10:	008020b4 	movhi	r2,130
  80cd14:	10a91604 	addi	r2,r2,-23464
  80cd18:	200b883a 	mov	r5,r4
  80cd1c:	11000017 	ldw	r4,0(r2)
  80cd20:	080ccb01 	jmpi	80ccb0 <_fflush_r>
  80cd24:	008020b4 	movhi	r2,130
  80cd28:	10a91504 	addi	r2,r2,-23468
  80cd2c:	11000017 	ldw	r4,0(r2)
  80cd30:	01402074 	movhi	r5,129
  80cd34:	29732c04 	addi	r5,r5,-13136
  80cd38:	080d5d41 	jmpi	80d5d4 <_fwalk_reent>

0080cd3c <__fp_unlock>:
  80cd3c:	0005883a 	mov	r2,zero
  80cd40:	f800283a 	ret

0080cd44 <_cleanup_r>:
  80cd44:	01402074 	movhi	r5,129
  80cd48:	2943f104 	addi	r5,r5,4036
  80cd4c:	080d5d41 	jmpi	80d5d4 <_fwalk_reent>

0080cd50 <__sinit.part.1>:
  80cd50:	defff704 	addi	sp,sp,-36
  80cd54:	00c02074 	movhi	r3,129
  80cd58:	dfc00815 	stw	ra,32(sp)
  80cd5c:	ddc00715 	stw	r23,28(sp)
  80cd60:	dd800615 	stw	r22,24(sp)
  80cd64:	dd400515 	stw	r21,20(sp)
  80cd68:	dd000415 	stw	r20,16(sp)
  80cd6c:	dcc00315 	stw	r19,12(sp)
  80cd70:	dc800215 	stw	r18,8(sp)
  80cd74:	dc400115 	stw	r17,4(sp)
  80cd78:	dc000015 	stw	r16,0(sp)
  80cd7c:	18f35104 	addi	r3,r3,-12988
  80cd80:	24000117 	ldw	r16,4(r4)
  80cd84:	20c00f15 	stw	r3,60(r4)
  80cd88:	2080bb04 	addi	r2,r4,748
  80cd8c:	00c000c4 	movi	r3,3
  80cd90:	20c0b915 	stw	r3,740(r4)
  80cd94:	2080ba15 	stw	r2,744(r4)
  80cd98:	2000b815 	stw	zero,736(r4)
  80cd9c:	05c00204 	movi	r23,8
  80cda0:	00800104 	movi	r2,4
  80cda4:	2025883a 	mov	r18,r4
  80cda8:	b80d883a 	mov	r6,r23
  80cdac:	81001704 	addi	r4,r16,92
  80cdb0:	000b883a 	mov	r5,zero
  80cdb4:	80000015 	stw	zero,0(r16)
  80cdb8:	80000115 	stw	zero,4(r16)
  80cdbc:	80000215 	stw	zero,8(r16)
  80cdc0:	8080030d 	sth	r2,12(r16)
  80cdc4:	80001915 	stw	zero,100(r16)
  80cdc8:	8000038d 	sth	zero,14(r16)
  80cdcc:	80000415 	stw	zero,16(r16)
  80cdd0:	80000515 	stw	zero,20(r16)
  80cdd4:	80000615 	stw	zero,24(r16)
  80cdd8:	080e3680 	call	80e368 <memset>
  80cddc:	05802074 	movhi	r22,129
  80cde0:	94400217 	ldw	r17,8(r18)
  80cde4:	05402074 	movhi	r21,129
  80cde8:	05002074 	movhi	r20,129
  80cdec:	04c02074 	movhi	r19,129
  80cdf0:	b5bd5504 	addi	r22,r22,-2732
  80cdf4:	ad7d6c04 	addi	r21,r21,-2640
  80cdf8:	a53d8b04 	addi	r20,r20,-2516
  80cdfc:	9cfda204 	addi	r19,r19,-2424
  80ce00:	85800815 	stw	r22,32(r16)
  80ce04:	85400915 	stw	r21,36(r16)
  80ce08:	85000a15 	stw	r20,40(r16)
  80ce0c:	84c00b15 	stw	r19,44(r16)
  80ce10:	84000715 	stw	r16,28(r16)
  80ce14:	00800284 	movi	r2,10
  80ce18:	8880030d 	sth	r2,12(r17)
  80ce1c:	00800044 	movi	r2,1
  80ce20:	b80d883a 	mov	r6,r23
  80ce24:	89001704 	addi	r4,r17,92
  80ce28:	000b883a 	mov	r5,zero
  80ce2c:	88000015 	stw	zero,0(r17)
  80ce30:	88000115 	stw	zero,4(r17)
  80ce34:	88000215 	stw	zero,8(r17)
  80ce38:	88001915 	stw	zero,100(r17)
  80ce3c:	8880038d 	sth	r2,14(r17)
  80ce40:	88000415 	stw	zero,16(r17)
  80ce44:	88000515 	stw	zero,20(r17)
  80ce48:	88000615 	stw	zero,24(r17)
  80ce4c:	080e3680 	call	80e368 <memset>
  80ce50:	94000317 	ldw	r16,12(r18)
  80ce54:	00800484 	movi	r2,18
  80ce58:	8c400715 	stw	r17,28(r17)
  80ce5c:	8d800815 	stw	r22,32(r17)
  80ce60:	8d400915 	stw	r21,36(r17)
  80ce64:	8d000a15 	stw	r20,40(r17)
  80ce68:	8cc00b15 	stw	r19,44(r17)
  80ce6c:	8080030d 	sth	r2,12(r16)
  80ce70:	00800084 	movi	r2,2
  80ce74:	80000015 	stw	zero,0(r16)
  80ce78:	80000115 	stw	zero,4(r16)
  80ce7c:	80000215 	stw	zero,8(r16)
  80ce80:	80001915 	stw	zero,100(r16)
  80ce84:	8080038d 	sth	r2,14(r16)
  80ce88:	80000415 	stw	zero,16(r16)
  80ce8c:	80000515 	stw	zero,20(r16)
  80ce90:	80000615 	stw	zero,24(r16)
  80ce94:	b80d883a 	mov	r6,r23
  80ce98:	000b883a 	mov	r5,zero
  80ce9c:	81001704 	addi	r4,r16,92
  80cea0:	080e3680 	call	80e368 <memset>
  80cea4:	00800044 	movi	r2,1
  80cea8:	84000715 	stw	r16,28(r16)
  80ceac:	85800815 	stw	r22,32(r16)
  80ceb0:	85400915 	stw	r21,36(r16)
  80ceb4:	85000a15 	stw	r20,40(r16)
  80ceb8:	84c00b15 	stw	r19,44(r16)
  80cebc:	90800e15 	stw	r2,56(r18)
  80cec0:	dfc00817 	ldw	ra,32(sp)
  80cec4:	ddc00717 	ldw	r23,28(sp)
  80cec8:	dd800617 	ldw	r22,24(sp)
  80cecc:	dd400517 	ldw	r21,20(sp)
  80ced0:	dd000417 	ldw	r20,16(sp)
  80ced4:	dcc00317 	ldw	r19,12(sp)
  80ced8:	dc800217 	ldw	r18,8(sp)
  80cedc:	dc400117 	ldw	r17,4(sp)
  80cee0:	dc000017 	ldw	r16,0(sp)
  80cee4:	dec00904 	addi	sp,sp,36
  80cee8:	f800283a 	ret

0080ceec <__fp_lock>:
  80ceec:	0005883a 	mov	r2,zero
  80cef0:	f800283a 	ret

0080cef4 <__sfmoreglue>:
  80cef4:	defffc04 	addi	sp,sp,-16
  80cef8:	dc400115 	stw	r17,4(sp)
  80cefc:	2c7fffc4 	addi	r17,r5,-1
  80cf00:	8c401a24 	muli	r17,r17,104
  80cf04:	dc800215 	stw	r18,8(sp)
  80cf08:	2825883a 	mov	r18,r5
  80cf0c:	89401d04 	addi	r5,r17,116
  80cf10:	dc000015 	stw	r16,0(sp)
  80cf14:	dfc00315 	stw	ra,12(sp)
  80cf18:	080d9300 	call	80d930 <_malloc_r>
  80cf1c:	1021883a 	mov	r16,r2
  80cf20:	10000726 	beq	r2,zero,80cf40 <__sfmoreglue+0x4c>
  80cf24:	11000304 	addi	r4,r2,12
  80cf28:	10000015 	stw	zero,0(r2)
  80cf2c:	14800115 	stw	r18,4(r2)
  80cf30:	11000215 	stw	r4,8(r2)
  80cf34:	89801a04 	addi	r6,r17,104
  80cf38:	000b883a 	mov	r5,zero
  80cf3c:	080e3680 	call	80e368 <memset>
  80cf40:	8005883a 	mov	r2,r16
  80cf44:	dfc00317 	ldw	ra,12(sp)
  80cf48:	dc800217 	ldw	r18,8(sp)
  80cf4c:	dc400117 	ldw	r17,4(sp)
  80cf50:	dc000017 	ldw	r16,0(sp)
  80cf54:	dec00404 	addi	sp,sp,16
  80cf58:	f800283a 	ret

0080cf5c <__sfp>:
  80cf5c:	defffb04 	addi	sp,sp,-20
  80cf60:	dc000015 	stw	r16,0(sp)
  80cf64:	040020b4 	movhi	r16,130
  80cf68:	84291504 	addi	r16,r16,-23468
  80cf6c:	dcc00315 	stw	r19,12(sp)
  80cf70:	2027883a 	mov	r19,r4
  80cf74:	81000017 	ldw	r4,0(r16)
  80cf78:	dfc00415 	stw	ra,16(sp)
  80cf7c:	dc800215 	stw	r18,8(sp)
  80cf80:	20800e17 	ldw	r2,56(r4)
  80cf84:	dc400115 	stw	r17,4(sp)
  80cf88:	1000021e 	bne	r2,zero,80cf94 <__sfp+0x38>
  80cf8c:	080cd500 	call	80cd50 <__sinit.part.1>
  80cf90:	81000017 	ldw	r4,0(r16)
  80cf94:	2480b804 	addi	r18,r4,736
  80cf98:	047fffc4 	movi	r17,-1
  80cf9c:	91000117 	ldw	r4,4(r18)
  80cfa0:	94000217 	ldw	r16,8(r18)
  80cfa4:	213fffc4 	addi	r4,r4,-1
  80cfa8:	20000a16 	blt	r4,zero,80cfd4 <__sfp+0x78>
  80cfac:	8080030f 	ldh	r2,12(r16)
  80cfb0:	10000c26 	beq	r2,zero,80cfe4 <__sfp+0x88>
  80cfb4:	80c01d04 	addi	r3,r16,116
  80cfb8:	00000206 	br	80cfc4 <__sfp+0x68>
  80cfbc:	18bfe60f 	ldh	r2,-104(r3)
  80cfc0:	10000826 	beq	r2,zero,80cfe4 <__sfp+0x88>
  80cfc4:	213fffc4 	addi	r4,r4,-1
  80cfc8:	1c3ffd04 	addi	r16,r3,-12
  80cfcc:	18c01a04 	addi	r3,r3,104
  80cfd0:	247ffa1e 	bne	r4,r17,80cfbc <__alt_mem_onchip_mem+0xff804fbc>
  80cfd4:	90800017 	ldw	r2,0(r18)
  80cfd8:	10001d26 	beq	r2,zero,80d050 <__sfp+0xf4>
  80cfdc:	1025883a 	mov	r18,r2
  80cfe0:	003fee06 	br	80cf9c <__alt_mem_onchip_mem+0xff804f9c>
  80cfe4:	00bfffc4 	movi	r2,-1
  80cfe8:	8080038d 	sth	r2,14(r16)
  80cfec:	00800044 	movi	r2,1
  80cff0:	8080030d 	sth	r2,12(r16)
  80cff4:	80001915 	stw	zero,100(r16)
  80cff8:	80000015 	stw	zero,0(r16)
  80cffc:	80000215 	stw	zero,8(r16)
  80d000:	80000115 	stw	zero,4(r16)
  80d004:	80000415 	stw	zero,16(r16)
  80d008:	80000515 	stw	zero,20(r16)
  80d00c:	80000615 	stw	zero,24(r16)
  80d010:	01800204 	movi	r6,8
  80d014:	000b883a 	mov	r5,zero
  80d018:	81001704 	addi	r4,r16,92
  80d01c:	080e3680 	call	80e368 <memset>
  80d020:	8005883a 	mov	r2,r16
  80d024:	80000c15 	stw	zero,48(r16)
  80d028:	80000d15 	stw	zero,52(r16)
  80d02c:	80001115 	stw	zero,68(r16)
  80d030:	80001215 	stw	zero,72(r16)
  80d034:	dfc00417 	ldw	ra,16(sp)
  80d038:	dcc00317 	ldw	r19,12(sp)
  80d03c:	dc800217 	ldw	r18,8(sp)
  80d040:	dc400117 	ldw	r17,4(sp)
  80d044:	dc000017 	ldw	r16,0(sp)
  80d048:	dec00504 	addi	sp,sp,20
  80d04c:	f800283a 	ret
  80d050:	01400104 	movi	r5,4
  80d054:	9809883a 	mov	r4,r19
  80d058:	080cef40 	call	80cef4 <__sfmoreglue>
  80d05c:	90800015 	stw	r2,0(r18)
  80d060:	103fde1e 	bne	r2,zero,80cfdc <__alt_mem_onchip_mem+0xff804fdc>
  80d064:	00800304 	movi	r2,12
  80d068:	98800015 	stw	r2,0(r19)
  80d06c:	0005883a 	mov	r2,zero
  80d070:	003ff006 	br	80d034 <__alt_mem_onchip_mem+0xff805034>

0080d074 <_cleanup>:
  80d074:	008020b4 	movhi	r2,130
  80d078:	10a91504 	addi	r2,r2,-23468
  80d07c:	11000017 	ldw	r4,0(r2)
  80d080:	01402074 	movhi	r5,129
  80d084:	2943f104 	addi	r5,r5,4036
  80d088:	080d5d41 	jmpi	80d5d4 <_fwalk_reent>

0080d08c <__sinit>:
  80d08c:	20800e17 	ldw	r2,56(r4)
  80d090:	10000126 	beq	r2,zero,80d098 <__sinit+0xc>
  80d094:	f800283a 	ret
  80d098:	080cd501 	jmpi	80cd50 <__sinit.part.1>

0080d09c <__sfp_lock_acquire>:
  80d09c:	f800283a 	ret

0080d0a0 <__sfp_lock_release>:
  80d0a0:	f800283a 	ret

0080d0a4 <__sinit_lock_acquire>:
  80d0a4:	f800283a 	ret

0080d0a8 <__sinit_lock_release>:
  80d0a8:	f800283a 	ret

0080d0ac <__fp_lock_all>:
  80d0ac:	008020b4 	movhi	r2,130
  80d0b0:	10a91604 	addi	r2,r2,-23464
  80d0b4:	11000017 	ldw	r4,0(r2)
  80d0b8:	01402074 	movhi	r5,129
  80d0bc:	2973bb04 	addi	r5,r5,-12564
  80d0c0:	080d5101 	jmpi	80d510 <_fwalk>

0080d0c4 <__fp_unlock_all>:
  80d0c4:	008020b4 	movhi	r2,130
  80d0c8:	10a91604 	addi	r2,r2,-23464
  80d0cc:	11000017 	ldw	r4,0(r2)
  80d0d0:	01402074 	movhi	r5,129
  80d0d4:	29734f04 	addi	r5,r5,-12996
  80d0d8:	080d5101 	jmpi	80d510 <_fwalk>

0080d0dc <_malloc_trim_r>:
  80d0dc:	defffb04 	addi	sp,sp,-20
  80d0e0:	dcc00315 	stw	r19,12(sp)
  80d0e4:	04c020b4 	movhi	r19,130
  80d0e8:	dc800215 	stw	r18,8(sp)
  80d0ec:	dc400115 	stw	r17,4(sp)
  80d0f0:	dc000015 	stw	r16,0(sp)
  80d0f4:	dfc00415 	stw	ra,16(sp)
  80d0f8:	2821883a 	mov	r16,r5
  80d0fc:	9ce31704 	addi	r19,r19,-29604
  80d100:	2025883a 	mov	r18,r4
  80d104:	08147b80 	call	8147b8 <__malloc_lock>
  80d108:	98800217 	ldw	r2,8(r19)
  80d10c:	14400117 	ldw	r17,4(r2)
  80d110:	00bfff04 	movi	r2,-4
  80d114:	88a2703a 	and	r17,r17,r2
  80d118:	8c21c83a 	sub	r16,r17,r16
  80d11c:	8403fbc4 	addi	r16,r16,4079
  80d120:	8020d33a 	srli	r16,r16,12
  80d124:	0083ffc4 	movi	r2,4095
  80d128:	843fffc4 	addi	r16,r16,-1
  80d12c:	8020933a 	slli	r16,r16,12
  80d130:	1400060e 	bge	r2,r16,80d14c <_malloc_trim_r+0x70>
  80d134:	000b883a 	mov	r5,zero
  80d138:	9009883a 	mov	r4,r18
  80d13c:	080f5000 	call	80f500 <_sbrk_r>
  80d140:	98c00217 	ldw	r3,8(r19)
  80d144:	1c47883a 	add	r3,r3,r17
  80d148:	10c00a26 	beq	r2,r3,80d174 <_malloc_trim_r+0x98>
  80d14c:	9009883a 	mov	r4,r18
  80d150:	08147dc0 	call	8147dc <__malloc_unlock>
  80d154:	0005883a 	mov	r2,zero
  80d158:	dfc00417 	ldw	ra,16(sp)
  80d15c:	dcc00317 	ldw	r19,12(sp)
  80d160:	dc800217 	ldw	r18,8(sp)
  80d164:	dc400117 	ldw	r17,4(sp)
  80d168:	dc000017 	ldw	r16,0(sp)
  80d16c:	dec00504 	addi	sp,sp,20
  80d170:	f800283a 	ret
  80d174:	040bc83a 	sub	r5,zero,r16
  80d178:	9009883a 	mov	r4,r18
  80d17c:	080f5000 	call	80f500 <_sbrk_r>
  80d180:	00ffffc4 	movi	r3,-1
  80d184:	10c00d26 	beq	r2,r3,80d1bc <_malloc_trim_r+0xe0>
  80d188:	00c020b4 	movhi	r3,130
  80d18c:	18f06e04 	addi	r3,r3,-15944
  80d190:	18800017 	ldw	r2,0(r3)
  80d194:	99000217 	ldw	r4,8(r19)
  80d198:	8c23c83a 	sub	r17,r17,r16
  80d19c:	8c400054 	ori	r17,r17,1
  80d1a0:	1421c83a 	sub	r16,r2,r16
  80d1a4:	24400115 	stw	r17,4(r4)
  80d1a8:	9009883a 	mov	r4,r18
  80d1ac:	1c000015 	stw	r16,0(r3)
  80d1b0:	08147dc0 	call	8147dc <__malloc_unlock>
  80d1b4:	00800044 	movi	r2,1
  80d1b8:	003fe706 	br	80d158 <__alt_mem_onchip_mem+0xff805158>
  80d1bc:	000b883a 	mov	r5,zero
  80d1c0:	9009883a 	mov	r4,r18
  80d1c4:	080f5000 	call	80f500 <_sbrk_r>
  80d1c8:	99000217 	ldw	r4,8(r19)
  80d1cc:	014003c4 	movi	r5,15
  80d1d0:	1107c83a 	sub	r3,r2,r4
  80d1d4:	28ffdd0e 	bge	r5,r3,80d14c <__alt_mem_onchip_mem+0xff80514c>
  80d1d8:	014020b4 	movhi	r5,130
  80d1dc:	29691804 	addi	r5,r5,-23456
  80d1e0:	29400017 	ldw	r5,0(r5)
  80d1e4:	18c00054 	ori	r3,r3,1
  80d1e8:	20c00115 	stw	r3,4(r4)
  80d1ec:	00c020b4 	movhi	r3,130
  80d1f0:	1145c83a 	sub	r2,r2,r5
  80d1f4:	18f06e04 	addi	r3,r3,-15944
  80d1f8:	18800015 	stw	r2,0(r3)
  80d1fc:	003fd306 	br	80d14c <__alt_mem_onchip_mem+0xff80514c>

0080d200 <_free_r>:
  80d200:	28004126 	beq	r5,zero,80d308 <_free_r+0x108>
  80d204:	defffd04 	addi	sp,sp,-12
  80d208:	dc400115 	stw	r17,4(sp)
  80d20c:	dc000015 	stw	r16,0(sp)
  80d210:	2023883a 	mov	r17,r4
  80d214:	2821883a 	mov	r16,r5
  80d218:	dfc00215 	stw	ra,8(sp)
  80d21c:	08147b80 	call	8147b8 <__malloc_lock>
  80d220:	81ffff17 	ldw	r7,-4(r16)
  80d224:	00bfff84 	movi	r2,-2
  80d228:	010020b4 	movhi	r4,130
  80d22c:	81bffe04 	addi	r6,r16,-8
  80d230:	3884703a 	and	r2,r7,r2
  80d234:	21231704 	addi	r4,r4,-29604
  80d238:	308b883a 	add	r5,r6,r2
  80d23c:	2a400117 	ldw	r9,4(r5)
  80d240:	22000217 	ldw	r8,8(r4)
  80d244:	00ffff04 	movi	r3,-4
  80d248:	48c6703a 	and	r3,r9,r3
  80d24c:	2a005726 	beq	r5,r8,80d3ac <_free_r+0x1ac>
  80d250:	28c00115 	stw	r3,4(r5)
  80d254:	39c0004c 	andi	r7,r7,1
  80d258:	3800091e 	bne	r7,zero,80d280 <_free_r+0x80>
  80d25c:	823ffe17 	ldw	r8,-8(r16)
  80d260:	22400204 	addi	r9,r4,8
  80d264:	320dc83a 	sub	r6,r6,r8
  80d268:	31c00217 	ldw	r7,8(r6)
  80d26c:	1205883a 	add	r2,r2,r8
  80d270:	3a406526 	beq	r7,r9,80d408 <_free_r+0x208>
  80d274:	32000317 	ldw	r8,12(r6)
  80d278:	3a000315 	stw	r8,12(r7)
  80d27c:	41c00215 	stw	r7,8(r8)
  80d280:	28cf883a 	add	r7,r5,r3
  80d284:	39c00117 	ldw	r7,4(r7)
  80d288:	39c0004c 	andi	r7,r7,1
  80d28c:	38003a26 	beq	r7,zero,80d378 <_free_r+0x178>
  80d290:	10c00054 	ori	r3,r2,1
  80d294:	30c00115 	stw	r3,4(r6)
  80d298:	3087883a 	add	r3,r6,r2
  80d29c:	18800015 	stw	r2,0(r3)
  80d2a0:	00c07fc4 	movi	r3,511
  80d2a4:	18801936 	bltu	r3,r2,80d30c <_free_r+0x10c>
  80d2a8:	1004d0fa 	srli	r2,r2,3
  80d2ac:	01c00044 	movi	r7,1
  80d2b0:	21400117 	ldw	r5,4(r4)
  80d2b4:	10c00044 	addi	r3,r2,1
  80d2b8:	18c7883a 	add	r3,r3,r3
  80d2bc:	1005d0ba 	srai	r2,r2,2
  80d2c0:	18c7883a 	add	r3,r3,r3
  80d2c4:	18c7883a 	add	r3,r3,r3
  80d2c8:	1907883a 	add	r3,r3,r4
  80d2cc:	3884983a 	sll	r2,r7,r2
  80d2d0:	19c00017 	ldw	r7,0(r3)
  80d2d4:	1a3ffe04 	addi	r8,r3,-8
  80d2d8:	1144b03a 	or	r2,r2,r5
  80d2dc:	32000315 	stw	r8,12(r6)
  80d2e0:	31c00215 	stw	r7,8(r6)
  80d2e4:	20800115 	stw	r2,4(r4)
  80d2e8:	19800015 	stw	r6,0(r3)
  80d2ec:	39800315 	stw	r6,12(r7)
  80d2f0:	8809883a 	mov	r4,r17
  80d2f4:	dfc00217 	ldw	ra,8(sp)
  80d2f8:	dc400117 	ldw	r17,4(sp)
  80d2fc:	dc000017 	ldw	r16,0(sp)
  80d300:	dec00304 	addi	sp,sp,12
  80d304:	08147dc1 	jmpi	8147dc <__malloc_unlock>
  80d308:	f800283a 	ret
  80d30c:	100ad27a 	srli	r5,r2,9
  80d310:	00c00104 	movi	r3,4
  80d314:	19404a36 	bltu	r3,r5,80d440 <_free_r+0x240>
  80d318:	100ad1ba 	srli	r5,r2,6
  80d31c:	28c00e44 	addi	r3,r5,57
  80d320:	18c7883a 	add	r3,r3,r3
  80d324:	29400e04 	addi	r5,r5,56
  80d328:	18c7883a 	add	r3,r3,r3
  80d32c:	18c7883a 	add	r3,r3,r3
  80d330:	1909883a 	add	r4,r3,r4
  80d334:	20c00017 	ldw	r3,0(r4)
  80d338:	01c020b4 	movhi	r7,130
  80d33c:	213ffe04 	addi	r4,r4,-8
  80d340:	39e31704 	addi	r7,r7,-29604
  80d344:	20c04426 	beq	r4,r3,80d458 <_free_r+0x258>
  80d348:	01ffff04 	movi	r7,-4
  80d34c:	19400117 	ldw	r5,4(r3)
  80d350:	29ca703a 	and	r5,r5,r7
  80d354:	1140022e 	bgeu	r2,r5,80d360 <_free_r+0x160>
  80d358:	18c00217 	ldw	r3,8(r3)
  80d35c:	20fffb1e 	bne	r4,r3,80d34c <__alt_mem_onchip_mem+0xff80534c>
  80d360:	19000317 	ldw	r4,12(r3)
  80d364:	31000315 	stw	r4,12(r6)
  80d368:	30c00215 	stw	r3,8(r6)
  80d36c:	21800215 	stw	r6,8(r4)
  80d370:	19800315 	stw	r6,12(r3)
  80d374:	003fde06 	br	80d2f0 <__alt_mem_onchip_mem+0xff8052f0>
  80d378:	29c00217 	ldw	r7,8(r5)
  80d37c:	10c5883a 	add	r2,r2,r3
  80d380:	00c020b4 	movhi	r3,130
  80d384:	18e31904 	addi	r3,r3,-29596
  80d388:	38c03b26 	beq	r7,r3,80d478 <_free_r+0x278>
  80d38c:	2a000317 	ldw	r8,12(r5)
  80d390:	11400054 	ori	r5,r2,1
  80d394:	3087883a 	add	r3,r6,r2
  80d398:	3a000315 	stw	r8,12(r7)
  80d39c:	41c00215 	stw	r7,8(r8)
  80d3a0:	31400115 	stw	r5,4(r6)
  80d3a4:	18800015 	stw	r2,0(r3)
  80d3a8:	003fbd06 	br	80d2a0 <__alt_mem_onchip_mem+0xff8052a0>
  80d3ac:	39c0004c 	andi	r7,r7,1
  80d3b0:	10c5883a 	add	r2,r2,r3
  80d3b4:	3800071e 	bne	r7,zero,80d3d4 <_free_r+0x1d4>
  80d3b8:	81fffe17 	ldw	r7,-8(r16)
  80d3bc:	31cdc83a 	sub	r6,r6,r7
  80d3c0:	30c00317 	ldw	r3,12(r6)
  80d3c4:	31400217 	ldw	r5,8(r6)
  80d3c8:	11c5883a 	add	r2,r2,r7
  80d3cc:	28c00315 	stw	r3,12(r5)
  80d3d0:	19400215 	stw	r5,8(r3)
  80d3d4:	10c00054 	ori	r3,r2,1
  80d3d8:	30c00115 	stw	r3,4(r6)
  80d3dc:	00c020b4 	movhi	r3,130
  80d3e0:	18e91904 	addi	r3,r3,-23452
  80d3e4:	18c00017 	ldw	r3,0(r3)
  80d3e8:	21800215 	stw	r6,8(r4)
  80d3ec:	10ffc036 	bltu	r2,r3,80d2f0 <__alt_mem_onchip_mem+0xff8052f0>
  80d3f0:	008020b4 	movhi	r2,130
  80d3f4:	10b06504 	addi	r2,r2,-15980
  80d3f8:	11400017 	ldw	r5,0(r2)
  80d3fc:	8809883a 	mov	r4,r17
  80d400:	080d0dc0 	call	80d0dc <_malloc_trim_r>
  80d404:	003fba06 	br	80d2f0 <__alt_mem_onchip_mem+0xff8052f0>
  80d408:	28c9883a 	add	r4,r5,r3
  80d40c:	21000117 	ldw	r4,4(r4)
  80d410:	2100004c 	andi	r4,r4,1
  80d414:	2000391e 	bne	r4,zero,80d4fc <_free_r+0x2fc>
  80d418:	29c00217 	ldw	r7,8(r5)
  80d41c:	29000317 	ldw	r4,12(r5)
  80d420:	1885883a 	add	r2,r3,r2
  80d424:	10c00054 	ori	r3,r2,1
  80d428:	39000315 	stw	r4,12(r7)
  80d42c:	21c00215 	stw	r7,8(r4)
  80d430:	30c00115 	stw	r3,4(r6)
  80d434:	308d883a 	add	r6,r6,r2
  80d438:	30800015 	stw	r2,0(r6)
  80d43c:	003fac06 	br	80d2f0 <__alt_mem_onchip_mem+0xff8052f0>
  80d440:	00c00504 	movi	r3,20
  80d444:	19401536 	bltu	r3,r5,80d49c <_free_r+0x29c>
  80d448:	28c01704 	addi	r3,r5,92
  80d44c:	18c7883a 	add	r3,r3,r3
  80d450:	294016c4 	addi	r5,r5,91
  80d454:	003fb406 	br	80d328 <__alt_mem_onchip_mem+0xff805328>
  80d458:	280bd0ba 	srai	r5,r5,2
  80d45c:	00c00044 	movi	r3,1
  80d460:	38800117 	ldw	r2,4(r7)
  80d464:	194a983a 	sll	r5,r3,r5
  80d468:	2007883a 	mov	r3,r4
  80d46c:	2884b03a 	or	r2,r5,r2
  80d470:	38800115 	stw	r2,4(r7)
  80d474:	003fbb06 	br	80d364 <__alt_mem_onchip_mem+0xff805364>
  80d478:	21800515 	stw	r6,20(r4)
  80d47c:	21800415 	stw	r6,16(r4)
  80d480:	10c00054 	ori	r3,r2,1
  80d484:	31c00315 	stw	r7,12(r6)
  80d488:	31c00215 	stw	r7,8(r6)
  80d48c:	30c00115 	stw	r3,4(r6)
  80d490:	308d883a 	add	r6,r6,r2
  80d494:	30800015 	stw	r2,0(r6)
  80d498:	003f9506 	br	80d2f0 <__alt_mem_onchip_mem+0xff8052f0>
  80d49c:	00c01504 	movi	r3,84
  80d4a0:	19400536 	bltu	r3,r5,80d4b8 <_free_r+0x2b8>
  80d4a4:	100ad33a 	srli	r5,r2,12
  80d4a8:	28c01bc4 	addi	r3,r5,111
  80d4ac:	18c7883a 	add	r3,r3,r3
  80d4b0:	29401b84 	addi	r5,r5,110
  80d4b4:	003f9c06 	br	80d328 <__alt_mem_onchip_mem+0xff805328>
  80d4b8:	00c05504 	movi	r3,340
  80d4bc:	19400536 	bltu	r3,r5,80d4d4 <_free_r+0x2d4>
  80d4c0:	100ad3fa 	srli	r5,r2,15
  80d4c4:	28c01e04 	addi	r3,r5,120
  80d4c8:	18c7883a 	add	r3,r3,r3
  80d4cc:	29401dc4 	addi	r5,r5,119
  80d4d0:	003f9506 	br	80d328 <__alt_mem_onchip_mem+0xff805328>
  80d4d4:	00c15504 	movi	r3,1364
  80d4d8:	19400536 	bltu	r3,r5,80d4f0 <_free_r+0x2f0>
  80d4dc:	100ad4ba 	srli	r5,r2,18
  80d4e0:	28c01f44 	addi	r3,r5,125
  80d4e4:	18c7883a 	add	r3,r3,r3
  80d4e8:	29401f04 	addi	r5,r5,124
  80d4ec:	003f8e06 	br	80d328 <__alt_mem_onchip_mem+0xff805328>
  80d4f0:	00c03f84 	movi	r3,254
  80d4f4:	01401f84 	movi	r5,126
  80d4f8:	003f8b06 	br	80d328 <__alt_mem_onchip_mem+0xff805328>
  80d4fc:	10c00054 	ori	r3,r2,1
  80d500:	30c00115 	stw	r3,4(r6)
  80d504:	308d883a 	add	r6,r6,r2
  80d508:	30800015 	stw	r2,0(r6)
  80d50c:	003f7806 	br	80d2f0 <__alt_mem_onchip_mem+0xff8052f0>

0080d510 <_fwalk>:
  80d510:	defff704 	addi	sp,sp,-36
  80d514:	dd000415 	stw	r20,16(sp)
  80d518:	dfc00815 	stw	ra,32(sp)
  80d51c:	ddc00715 	stw	r23,28(sp)
  80d520:	dd800615 	stw	r22,24(sp)
  80d524:	dd400515 	stw	r21,20(sp)
  80d528:	dcc00315 	stw	r19,12(sp)
  80d52c:	dc800215 	stw	r18,8(sp)
  80d530:	dc400115 	stw	r17,4(sp)
  80d534:	dc000015 	stw	r16,0(sp)
  80d538:	2500b804 	addi	r20,r4,736
  80d53c:	a0002326 	beq	r20,zero,80d5cc <_fwalk+0xbc>
  80d540:	282b883a 	mov	r21,r5
  80d544:	002f883a 	mov	r23,zero
  80d548:	05800044 	movi	r22,1
  80d54c:	04ffffc4 	movi	r19,-1
  80d550:	a4400117 	ldw	r17,4(r20)
  80d554:	a4800217 	ldw	r18,8(r20)
  80d558:	8c7fffc4 	addi	r17,r17,-1
  80d55c:	88000d16 	blt	r17,zero,80d594 <_fwalk+0x84>
  80d560:	94000304 	addi	r16,r18,12
  80d564:	94800384 	addi	r18,r18,14
  80d568:	8080000b 	ldhu	r2,0(r16)
  80d56c:	8c7fffc4 	addi	r17,r17,-1
  80d570:	813ffd04 	addi	r4,r16,-12
  80d574:	b080042e 	bgeu	r22,r2,80d588 <_fwalk+0x78>
  80d578:	9080000f 	ldh	r2,0(r18)
  80d57c:	14c00226 	beq	r2,r19,80d588 <_fwalk+0x78>
  80d580:	a83ee83a 	callr	r21
  80d584:	b8aeb03a 	or	r23,r23,r2
  80d588:	84001a04 	addi	r16,r16,104
  80d58c:	94801a04 	addi	r18,r18,104
  80d590:	8cfff51e 	bne	r17,r19,80d568 <__alt_mem_onchip_mem+0xff805568>
  80d594:	a5000017 	ldw	r20,0(r20)
  80d598:	a03fed1e 	bne	r20,zero,80d550 <__alt_mem_onchip_mem+0xff805550>
  80d59c:	b805883a 	mov	r2,r23
  80d5a0:	dfc00817 	ldw	ra,32(sp)
  80d5a4:	ddc00717 	ldw	r23,28(sp)
  80d5a8:	dd800617 	ldw	r22,24(sp)
  80d5ac:	dd400517 	ldw	r21,20(sp)
  80d5b0:	dd000417 	ldw	r20,16(sp)
  80d5b4:	dcc00317 	ldw	r19,12(sp)
  80d5b8:	dc800217 	ldw	r18,8(sp)
  80d5bc:	dc400117 	ldw	r17,4(sp)
  80d5c0:	dc000017 	ldw	r16,0(sp)
  80d5c4:	dec00904 	addi	sp,sp,36
  80d5c8:	f800283a 	ret
  80d5cc:	002f883a 	mov	r23,zero
  80d5d0:	003ff206 	br	80d59c <__alt_mem_onchip_mem+0xff80559c>

0080d5d4 <_fwalk_reent>:
  80d5d4:	defff704 	addi	sp,sp,-36
  80d5d8:	dd000415 	stw	r20,16(sp)
  80d5dc:	dfc00815 	stw	ra,32(sp)
  80d5e0:	ddc00715 	stw	r23,28(sp)
  80d5e4:	dd800615 	stw	r22,24(sp)
  80d5e8:	dd400515 	stw	r21,20(sp)
  80d5ec:	dcc00315 	stw	r19,12(sp)
  80d5f0:	dc800215 	stw	r18,8(sp)
  80d5f4:	dc400115 	stw	r17,4(sp)
  80d5f8:	dc000015 	stw	r16,0(sp)
  80d5fc:	2500b804 	addi	r20,r4,736
  80d600:	a0002326 	beq	r20,zero,80d690 <_fwalk_reent+0xbc>
  80d604:	282b883a 	mov	r21,r5
  80d608:	2027883a 	mov	r19,r4
  80d60c:	002f883a 	mov	r23,zero
  80d610:	05800044 	movi	r22,1
  80d614:	04bfffc4 	movi	r18,-1
  80d618:	a4400117 	ldw	r17,4(r20)
  80d61c:	a4000217 	ldw	r16,8(r20)
  80d620:	8c7fffc4 	addi	r17,r17,-1
  80d624:	88000c16 	blt	r17,zero,80d658 <_fwalk_reent+0x84>
  80d628:	84000304 	addi	r16,r16,12
  80d62c:	8080000b 	ldhu	r2,0(r16)
  80d630:	8c7fffc4 	addi	r17,r17,-1
  80d634:	817ffd04 	addi	r5,r16,-12
  80d638:	b080052e 	bgeu	r22,r2,80d650 <_fwalk_reent+0x7c>
  80d63c:	8080008f 	ldh	r2,2(r16)
  80d640:	9809883a 	mov	r4,r19
  80d644:	14800226 	beq	r2,r18,80d650 <_fwalk_reent+0x7c>
  80d648:	a83ee83a 	callr	r21
  80d64c:	b8aeb03a 	or	r23,r23,r2
  80d650:	84001a04 	addi	r16,r16,104
  80d654:	8cbff51e 	bne	r17,r18,80d62c <__alt_mem_onchip_mem+0xff80562c>
  80d658:	a5000017 	ldw	r20,0(r20)
  80d65c:	a03fee1e 	bne	r20,zero,80d618 <__alt_mem_onchip_mem+0xff805618>
  80d660:	b805883a 	mov	r2,r23
  80d664:	dfc00817 	ldw	ra,32(sp)
  80d668:	ddc00717 	ldw	r23,28(sp)
  80d66c:	dd800617 	ldw	r22,24(sp)
  80d670:	dd400517 	ldw	r21,20(sp)
  80d674:	dd000417 	ldw	r20,16(sp)
  80d678:	dcc00317 	ldw	r19,12(sp)
  80d67c:	dc800217 	ldw	r18,8(sp)
  80d680:	dc400117 	ldw	r17,4(sp)
  80d684:	dc000017 	ldw	r16,0(sp)
  80d688:	dec00904 	addi	sp,sp,36
  80d68c:	f800283a 	ret
  80d690:	002f883a 	mov	r23,zero
  80d694:	003ff206 	br	80d660 <__alt_mem_onchip_mem+0xff805660>

0080d698 <_setlocale_r>:
  80d698:	30001b26 	beq	r6,zero,80d708 <_setlocale_r+0x70>
  80d69c:	014020b4 	movhi	r5,130
  80d6a0:	defffe04 	addi	sp,sp,-8
  80d6a4:	2960eb04 	addi	r5,r5,-31828
  80d6a8:	3009883a 	mov	r4,r6
  80d6ac:	dc000015 	stw	r16,0(sp)
  80d6b0:	dfc00115 	stw	ra,4(sp)
  80d6b4:	3021883a 	mov	r16,r6
  80d6b8:	080f6900 	call	80f690 <strcmp>
  80d6bc:	1000061e 	bne	r2,zero,80d6d8 <_setlocale_r+0x40>
  80d6c0:	008020b4 	movhi	r2,130
  80d6c4:	10a0ea04 	addi	r2,r2,-31832
  80d6c8:	dfc00117 	ldw	ra,4(sp)
  80d6cc:	dc000017 	ldw	r16,0(sp)
  80d6d0:	dec00204 	addi	sp,sp,8
  80d6d4:	f800283a 	ret
  80d6d8:	014020b4 	movhi	r5,130
  80d6dc:	2960ea04 	addi	r5,r5,-31832
  80d6e0:	8009883a 	mov	r4,r16
  80d6e4:	080f6900 	call	80f690 <strcmp>
  80d6e8:	103ff526 	beq	r2,zero,80d6c0 <__alt_mem_onchip_mem+0xff8056c0>
  80d6ec:	014020b4 	movhi	r5,130
  80d6f0:	2960d504 	addi	r5,r5,-31916
  80d6f4:	8009883a 	mov	r4,r16
  80d6f8:	080f6900 	call	80f690 <strcmp>
  80d6fc:	103ff026 	beq	r2,zero,80d6c0 <__alt_mem_onchip_mem+0xff8056c0>
  80d700:	0005883a 	mov	r2,zero
  80d704:	003ff006 	br	80d6c8 <__alt_mem_onchip_mem+0xff8056c8>
  80d708:	008020b4 	movhi	r2,130
  80d70c:	10a0ea04 	addi	r2,r2,-31832
  80d710:	f800283a 	ret

0080d714 <__locale_charset>:
  80d714:	008020b4 	movhi	r2,130
  80d718:	10a30104 	addi	r2,r2,-29692
  80d71c:	f800283a 	ret

0080d720 <__locale_mb_cur_max>:
  80d720:	008020b4 	movhi	r2,130
  80d724:	10a91704 	addi	r2,r2,-23460
  80d728:	10800017 	ldw	r2,0(r2)
  80d72c:	f800283a 	ret

0080d730 <__locale_msgcharset>:
  80d730:	008020b4 	movhi	r2,130
  80d734:	10a2f904 	addi	r2,r2,-29724
  80d738:	f800283a 	ret

0080d73c <__locale_cjk_lang>:
  80d73c:	0005883a 	mov	r2,zero
  80d740:	f800283a 	ret

0080d744 <_localeconv_r>:
  80d744:	008020b4 	movhi	r2,130
  80d748:	10a30904 	addi	r2,r2,-29660
  80d74c:	f800283a 	ret

0080d750 <setlocale>:
  80d750:	008020b4 	movhi	r2,130
  80d754:	10a91604 	addi	r2,r2,-23464
  80d758:	280d883a 	mov	r6,r5
  80d75c:	200b883a 	mov	r5,r4
  80d760:	11000017 	ldw	r4,0(r2)
  80d764:	080d6981 	jmpi	80d698 <_setlocale_r>

0080d768 <localeconv>:
  80d768:	008020b4 	movhi	r2,130
  80d76c:	10a30904 	addi	r2,r2,-29660
  80d770:	f800283a 	ret

0080d774 <__smakebuf_r>:
  80d774:	2880030b 	ldhu	r2,12(r5)
  80d778:	10c0008c 	andi	r3,r2,2
  80d77c:	1800411e 	bne	r3,zero,80d884 <__smakebuf_r+0x110>
  80d780:	deffec04 	addi	sp,sp,-80
  80d784:	dc000f15 	stw	r16,60(sp)
  80d788:	2821883a 	mov	r16,r5
  80d78c:	2940038f 	ldh	r5,14(r5)
  80d790:	dc401015 	stw	r17,64(sp)
  80d794:	dfc01315 	stw	ra,76(sp)
  80d798:	dcc01215 	stw	r19,72(sp)
  80d79c:	dc801115 	stw	r18,68(sp)
  80d7a0:	2023883a 	mov	r17,r4
  80d7a4:	28001c16 	blt	r5,zero,80d818 <__smakebuf_r+0xa4>
  80d7a8:	d80d883a 	mov	r6,sp
  80d7ac:	08112d00 	call	8112d0 <_fstat_r>
  80d7b0:	10001816 	blt	r2,zero,80d814 <__smakebuf_r+0xa0>
  80d7b4:	d8800117 	ldw	r2,4(sp)
  80d7b8:	00e00014 	movui	r3,32768
  80d7bc:	10bc000c 	andi	r2,r2,61440
  80d7c0:	14c80020 	cmpeqi	r19,r2,8192
  80d7c4:	10c03726 	beq	r2,r3,80d8a4 <__smakebuf_r+0x130>
  80d7c8:	80c0030b 	ldhu	r3,12(r16)
  80d7cc:	18c20014 	ori	r3,r3,2048
  80d7d0:	80c0030d 	sth	r3,12(r16)
  80d7d4:	00c80004 	movi	r3,8192
  80d7d8:	10c0521e 	bne	r2,r3,80d924 <__smakebuf_r+0x1b0>
  80d7dc:	8140038f 	ldh	r5,14(r16)
  80d7e0:	8809883a 	mov	r4,r17
  80d7e4:	08117e80 	call	8117e8 <_isatty_r>
  80d7e8:	10004c26 	beq	r2,zero,80d91c <__smakebuf_r+0x1a8>
  80d7ec:	8080030b 	ldhu	r2,12(r16)
  80d7f0:	80c010c4 	addi	r3,r16,67
  80d7f4:	80c00015 	stw	r3,0(r16)
  80d7f8:	10800054 	ori	r2,r2,1
  80d7fc:	8080030d 	sth	r2,12(r16)
  80d800:	00800044 	movi	r2,1
  80d804:	80c00415 	stw	r3,16(r16)
  80d808:	80800515 	stw	r2,20(r16)
  80d80c:	04810004 	movi	r18,1024
  80d810:	00000706 	br	80d830 <__smakebuf_r+0xbc>
  80d814:	8080030b 	ldhu	r2,12(r16)
  80d818:	10c0200c 	andi	r3,r2,128
  80d81c:	18001f1e 	bne	r3,zero,80d89c <__smakebuf_r+0x128>
  80d820:	04810004 	movi	r18,1024
  80d824:	10820014 	ori	r2,r2,2048
  80d828:	8080030d 	sth	r2,12(r16)
  80d82c:	0027883a 	mov	r19,zero
  80d830:	900b883a 	mov	r5,r18
  80d834:	8809883a 	mov	r4,r17
  80d838:	080d9300 	call	80d930 <_malloc_r>
  80d83c:	10002c26 	beq	r2,zero,80d8f0 <__smakebuf_r+0x17c>
  80d840:	80c0030b 	ldhu	r3,12(r16)
  80d844:	01002074 	movhi	r4,129
  80d848:	21335104 	addi	r4,r4,-12988
  80d84c:	89000f15 	stw	r4,60(r17)
  80d850:	18c02014 	ori	r3,r3,128
  80d854:	80c0030d 	sth	r3,12(r16)
  80d858:	80800015 	stw	r2,0(r16)
  80d85c:	80800415 	stw	r2,16(r16)
  80d860:	84800515 	stw	r18,20(r16)
  80d864:	98001a1e 	bne	r19,zero,80d8d0 <__smakebuf_r+0x15c>
  80d868:	dfc01317 	ldw	ra,76(sp)
  80d86c:	dcc01217 	ldw	r19,72(sp)
  80d870:	dc801117 	ldw	r18,68(sp)
  80d874:	dc401017 	ldw	r17,64(sp)
  80d878:	dc000f17 	ldw	r16,60(sp)
  80d87c:	dec01404 	addi	sp,sp,80
  80d880:	f800283a 	ret
  80d884:	288010c4 	addi	r2,r5,67
  80d888:	28800015 	stw	r2,0(r5)
  80d88c:	28800415 	stw	r2,16(r5)
  80d890:	00800044 	movi	r2,1
  80d894:	28800515 	stw	r2,20(r5)
  80d898:	f800283a 	ret
  80d89c:	04801004 	movi	r18,64
  80d8a0:	003fe006 	br	80d824 <__alt_mem_onchip_mem+0xff805824>
  80d8a4:	81000a17 	ldw	r4,40(r16)
  80d8a8:	00c02074 	movhi	r3,129
  80d8ac:	18fd8b04 	addi	r3,r3,-2516
  80d8b0:	20ffc51e 	bne	r4,r3,80d7c8 <__alt_mem_onchip_mem+0xff8057c8>
  80d8b4:	8080030b 	ldhu	r2,12(r16)
  80d8b8:	04810004 	movi	r18,1024
  80d8bc:	84801315 	stw	r18,76(r16)
  80d8c0:	1484b03a 	or	r2,r2,r18
  80d8c4:	8080030d 	sth	r2,12(r16)
  80d8c8:	0027883a 	mov	r19,zero
  80d8cc:	003fd806 	br	80d830 <__alt_mem_onchip_mem+0xff805830>
  80d8d0:	8140038f 	ldh	r5,14(r16)
  80d8d4:	8809883a 	mov	r4,r17
  80d8d8:	08117e80 	call	8117e8 <_isatty_r>
  80d8dc:	103fe226 	beq	r2,zero,80d868 <__alt_mem_onchip_mem+0xff805868>
  80d8e0:	8080030b 	ldhu	r2,12(r16)
  80d8e4:	10800054 	ori	r2,r2,1
  80d8e8:	8080030d 	sth	r2,12(r16)
  80d8ec:	003fde06 	br	80d868 <__alt_mem_onchip_mem+0xff805868>
  80d8f0:	8080030b 	ldhu	r2,12(r16)
  80d8f4:	10c0800c 	andi	r3,r2,512
  80d8f8:	183fdb1e 	bne	r3,zero,80d868 <__alt_mem_onchip_mem+0xff805868>
  80d8fc:	10800094 	ori	r2,r2,2
  80d900:	80c010c4 	addi	r3,r16,67
  80d904:	8080030d 	sth	r2,12(r16)
  80d908:	00800044 	movi	r2,1
  80d90c:	80c00015 	stw	r3,0(r16)
  80d910:	80c00415 	stw	r3,16(r16)
  80d914:	80800515 	stw	r2,20(r16)
  80d918:	003fd306 	br	80d868 <__alt_mem_onchip_mem+0xff805868>
  80d91c:	04810004 	movi	r18,1024
  80d920:	003fc306 	br	80d830 <__alt_mem_onchip_mem+0xff805830>
  80d924:	0027883a 	mov	r19,zero
  80d928:	04810004 	movi	r18,1024
  80d92c:	003fc006 	br	80d830 <__alt_mem_onchip_mem+0xff805830>

0080d930 <_malloc_r>:
  80d930:	defff504 	addi	sp,sp,-44
  80d934:	dc800315 	stw	r18,12(sp)
  80d938:	dfc00a15 	stw	ra,40(sp)
  80d93c:	df000915 	stw	fp,36(sp)
  80d940:	ddc00815 	stw	r23,32(sp)
  80d944:	dd800715 	stw	r22,28(sp)
  80d948:	dd400615 	stw	r21,24(sp)
  80d94c:	dd000515 	stw	r20,20(sp)
  80d950:	dcc00415 	stw	r19,16(sp)
  80d954:	dc400215 	stw	r17,8(sp)
  80d958:	dc000115 	stw	r16,4(sp)
  80d95c:	288002c4 	addi	r2,r5,11
  80d960:	00c00584 	movi	r3,22
  80d964:	2025883a 	mov	r18,r4
  80d968:	18807f2e 	bgeu	r3,r2,80db68 <_malloc_r+0x238>
  80d96c:	047ffe04 	movi	r17,-8
  80d970:	1462703a 	and	r17,r2,r17
  80d974:	8800a316 	blt	r17,zero,80dc04 <_malloc_r+0x2d4>
  80d978:	8940a236 	bltu	r17,r5,80dc04 <_malloc_r+0x2d4>
  80d97c:	08147b80 	call	8147b8 <__malloc_lock>
  80d980:	00807dc4 	movi	r2,503
  80d984:	1441e92e 	bgeu	r2,r17,80e12c <_malloc_r+0x7fc>
  80d988:	8804d27a 	srli	r2,r17,9
  80d98c:	1000a126 	beq	r2,zero,80dc14 <_malloc_r+0x2e4>
  80d990:	00c00104 	movi	r3,4
  80d994:	18811e36 	bltu	r3,r2,80de10 <_malloc_r+0x4e0>
  80d998:	8804d1ba 	srli	r2,r17,6
  80d99c:	12000e44 	addi	r8,r2,57
  80d9a0:	11c00e04 	addi	r7,r2,56
  80d9a4:	4209883a 	add	r4,r8,r8
  80d9a8:	04c020b4 	movhi	r19,130
  80d9ac:	2109883a 	add	r4,r4,r4
  80d9b0:	9ce31704 	addi	r19,r19,-29604
  80d9b4:	2109883a 	add	r4,r4,r4
  80d9b8:	9909883a 	add	r4,r19,r4
  80d9bc:	24000117 	ldw	r16,4(r4)
  80d9c0:	213ffe04 	addi	r4,r4,-8
  80d9c4:	24009726 	beq	r4,r16,80dc24 <_malloc_r+0x2f4>
  80d9c8:	80800117 	ldw	r2,4(r16)
  80d9cc:	01bfff04 	movi	r6,-4
  80d9d0:	014003c4 	movi	r5,15
  80d9d4:	1184703a 	and	r2,r2,r6
  80d9d8:	1447c83a 	sub	r3,r2,r17
  80d9dc:	28c00716 	blt	r5,r3,80d9fc <_malloc_r+0xcc>
  80d9e0:	1800920e 	bge	r3,zero,80dc2c <_malloc_r+0x2fc>
  80d9e4:	84000317 	ldw	r16,12(r16)
  80d9e8:	24008e26 	beq	r4,r16,80dc24 <_malloc_r+0x2f4>
  80d9ec:	80800117 	ldw	r2,4(r16)
  80d9f0:	1184703a 	and	r2,r2,r6
  80d9f4:	1447c83a 	sub	r3,r2,r17
  80d9f8:	28fff90e 	bge	r5,r3,80d9e0 <__alt_mem_onchip_mem+0xff8059e0>
  80d9fc:	3809883a 	mov	r4,r7
  80da00:	018020b4 	movhi	r6,130
  80da04:	9c000417 	ldw	r16,16(r19)
  80da08:	31a31704 	addi	r6,r6,-29604
  80da0c:	32000204 	addi	r8,r6,8
  80da10:	82013426 	beq	r16,r8,80dee4 <_malloc_r+0x5b4>
  80da14:	80c00117 	ldw	r3,4(r16)
  80da18:	00bfff04 	movi	r2,-4
  80da1c:	188e703a 	and	r7,r3,r2
  80da20:	3c45c83a 	sub	r2,r7,r17
  80da24:	00c003c4 	movi	r3,15
  80da28:	18811f16 	blt	r3,r2,80dea8 <_malloc_r+0x578>
  80da2c:	32000515 	stw	r8,20(r6)
  80da30:	32000415 	stw	r8,16(r6)
  80da34:	10007f0e 	bge	r2,zero,80dc34 <_malloc_r+0x304>
  80da38:	00807fc4 	movi	r2,511
  80da3c:	11c0fd36 	bltu	r2,r7,80de34 <_malloc_r+0x504>
  80da40:	3806d0fa 	srli	r3,r7,3
  80da44:	01c00044 	movi	r7,1
  80da48:	30800117 	ldw	r2,4(r6)
  80da4c:	19400044 	addi	r5,r3,1
  80da50:	294b883a 	add	r5,r5,r5
  80da54:	1807d0ba 	srai	r3,r3,2
  80da58:	294b883a 	add	r5,r5,r5
  80da5c:	294b883a 	add	r5,r5,r5
  80da60:	298b883a 	add	r5,r5,r6
  80da64:	38c6983a 	sll	r3,r7,r3
  80da68:	29c00017 	ldw	r7,0(r5)
  80da6c:	2a7ffe04 	addi	r9,r5,-8
  80da70:	1886b03a 	or	r3,r3,r2
  80da74:	82400315 	stw	r9,12(r16)
  80da78:	81c00215 	stw	r7,8(r16)
  80da7c:	30c00115 	stw	r3,4(r6)
  80da80:	2c000015 	stw	r16,0(r5)
  80da84:	3c000315 	stw	r16,12(r7)
  80da88:	2005d0ba 	srai	r2,r4,2
  80da8c:	01400044 	movi	r5,1
  80da90:	288a983a 	sll	r5,r5,r2
  80da94:	19406f36 	bltu	r3,r5,80dc54 <_malloc_r+0x324>
  80da98:	28c4703a 	and	r2,r5,r3
  80da9c:	10000a1e 	bne	r2,zero,80dac8 <_malloc_r+0x198>
  80daa0:	00bfff04 	movi	r2,-4
  80daa4:	294b883a 	add	r5,r5,r5
  80daa8:	2088703a 	and	r4,r4,r2
  80daac:	28c4703a 	and	r2,r5,r3
  80dab0:	21000104 	addi	r4,r4,4
  80dab4:	1000041e 	bne	r2,zero,80dac8 <_malloc_r+0x198>
  80dab8:	294b883a 	add	r5,r5,r5
  80dabc:	28c4703a 	and	r2,r5,r3
  80dac0:	21000104 	addi	r4,r4,4
  80dac4:	103ffc26 	beq	r2,zero,80dab8 <__alt_mem_onchip_mem+0xff805ab8>
  80dac8:	02bfff04 	movi	r10,-4
  80dacc:	024003c4 	movi	r9,15
  80dad0:	21800044 	addi	r6,r4,1
  80dad4:	318d883a 	add	r6,r6,r6
  80dad8:	318d883a 	add	r6,r6,r6
  80dadc:	318d883a 	add	r6,r6,r6
  80dae0:	998d883a 	add	r6,r19,r6
  80dae4:	333ffe04 	addi	r12,r6,-8
  80dae8:	2017883a 	mov	r11,r4
  80daec:	31800104 	addi	r6,r6,4
  80daf0:	34000017 	ldw	r16,0(r6)
  80daf4:	31fffd04 	addi	r7,r6,-12
  80daf8:	81c0041e 	bne	r16,r7,80db0c <_malloc_r+0x1dc>
  80dafc:	0000fb06 	br	80deec <_malloc_r+0x5bc>
  80db00:	1801030e 	bge	r3,zero,80df10 <_malloc_r+0x5e0>
  80db04:	84000317 	ldw	r16,12(r16)
  80db08:	81c0f826 	beq	r16,r7,80deec <_malloc_r+0x5bc>
  80db0c:	80800117 	ldw	r2,4(r16)
  80db10:	1284703a 	and	r2,r2,r10
  80db14:	1447c83a 	sub	r3,r2,r17
  80db18:	48fff90e 	bge	r9,r3,80db00 <__alt_mem_onchip_mem+0xff805b00>
  80db1c:	80800317 	ldw	r2,12(r16)
  80db20:	81000217 	ldw	r4,8(r16)
  80db24:	89400054 	ori	r5,r17,1
  80db28:	81400115 	stw	r5,4(r16)
  80db2c:	20800315 	stw	r2,12(r4)
  80db30:	11000215 	stw	r4,8(r2)
  80db34:	8463883a 	add	r17,r16,r17
  80db38:	9c400515 	stw	r17,20(r19)
  80db3c:	9c400415 	stw	r17,16(r19)
  80db40:	18800054 	ori	r2,r3,1
  80db44:	88800115 	stw	r2,4(r17)
  80db48:	8a000315 	stw	r8,12(r17)
  80db4c:	8a000215 	stw	r8,8(r17)
  80db50:	88e3883a 	add	r17,r17,r3
  80db54:	88c00015 	stw	r3,0(r17)
  80db58:	9009883a 	mov	r4,r18
  80db5c:	08147dc0 	call	8147dc <__malloc_unlock>
  80db60:	80800204 	addi	r2,r16,8
  80db64:	00001b06 	br	80dbd4 <_malloc_r+0x2a4>
  80db68:	04400404 	movi	r17,16
  80db6c:	89402536 	bltu	r17,r5,80dc04 <_malloc_r+0x2d4>
  80db70:	08147b80 	call	8147b8 <__malloc_lock>
  80db74:	00800184 	movi	r2,6
  80db78:	01000084 	movi	r4,2
  80db7c:	04c020b4 	movhi	r19,130
  80db80:	1085883a 	add	r2,r2,r2
  80db84:	9ce31704 	addi	r19,r19,-29604
  80db88:	1085883a 	add	r2,r2,r2
  80db8c:	9885883a 	add	r2,r19,r2
  80db90:	14000117 	ldw	r16,4(r2)
  80db94:	10fffe04 	addi	r3,r2,-8
  80db98:	80c0d926 	beq	r16,r3,80df00 <_malloc_r+0x5d0>
  80db9c:	80c00117 	ldw	r3,4(r16)
  80dba0:	81000317 	ldw	r4,12(r16)
  80dba4:	00bfff04 	movi	r2,-4
  80dba8:	1884703a 	and	r2,r3,r2
  80dbac:	81400217 	ldw	r5,8(r16)
  80dbb0:	8085883a 	add	r2,r16,r2
  80dbb4:	10c00117 	ldw	r3,4(r2)
  80dbb8:	29000315 	stw	r4,12(r5)
  80dbbc:	21400215 	stw	r5,8(r4)
  80dbc0:	18c00054 	ori	r3,r3,1
  80dbc4:	10c00115 	stw	r3,4(r2)
  80dbc8:	9009883a 	mov	r4,r18
  80dbcc:	08147dc0 	call	8147dc <__malloc_unlock>
  80dbd0:	80800204 	addi	r2,r16,8
  80dbd4:	dfc00a17 	ldw	ra,40(sp)
  80dbd8:	df000917 	ldw	fp,36(sp)
  80dbdc:	ddc00817 	ldw	r23,32(sp)
  80dbe0:	dd800717 	ldw	r22,28(sp)
  80dbe4:	dd400617 	ldw	r21,24(sp)
  80dbe8:	dd000517 	ldw	r20,20(sp)
  80dbec:	dcc00417 	ldw	r19,16(sp)
  80dbf0:	dc800317 	ldw	r18,12(sp)
  80dbf4:	dc400217 	ldw	r17,8(sp)
  80dbf8:	dc000117 	ldw	r16,4(sp)
  80dbfc:	dec00b04 	addi	sp,sp,44
  80dc00:	f800283a 	ret
  80dc04:	00800304 	movi	r2,12
  80dc08:	90800015 	stw	r2,0(r18)
  80dc0c:	0005883a 	mov	r2,zero
  80dc10:	003ff006 	br	80dbd4 <__alt_mem_onchip_mem+0xff805bd4>
  80dc14:	01002004 	movi	r4,128
  80dc18:	02001004 	movi	r8,64
  80dc1c:	01c00fc4 	movi	r7,63
  80dc20:	003f6106 	br	80d9a8 <__alt_mem_onchip_mem+0xff8059a8>
  80dc24:	4009883a 	mov	r4,r8
  80dc28:	003f7506 	br	80da00 <__alt_mem_onchip_mem+0xff805a00>
  80dc2c:	81000317 	ldw	r4,12(r16)
  80dc30:	003fde06 	br	80dbac <__alt_mem_onchip_mem+0xff805bac>
  80dc34:	81c5883a 	add	r2,r16,r7
  80dc38:	11400117 	ldw	r5,4(r2)
  80dc3c:	9009883a 	mov	r4,r18
  80dc40:	29400054 	ori	r5,r5,1
  80dc44:	11400115 	stw	r5,4(r2)
  80dc48:	08147dc0 	call	8147dc <__malloc_unlock>
  80dc4c:	80800204 	addi	r2,r16,8
  80dc50:	003fe006 	br	80dbd4 <__alt_mem_onchip_mem+0xff805bd4>
  80dc54:	9c000217 	ldw	r16,8(r19)
  80dc58:	00bfff04 	movi	r2,-4
  80dc5c:	85800117 	ldw	r22,4(r16)
  80dc60:	b0ac703a 	and	r22,r22,r2
  80dc64:	b4400336 	bltu	r22,r17,80dc74 <_malloc_r+0x344>
  80dc68:	b445c83a 	sub	r2,r22,r17
  80dc6c:	00c003c4 	movi	r3,15
  80dc70:	18805d16 	blt	r3,r2,80dde8 <_malloc_r+0x4b8>
  80dc74:	05c020b4 	movhi	r23,130
  80dc78:	008020b4 	movhi	r2,130
  80dc7c:	10b06504 	addi	r2,r2,-15980
  80dc80:	bde91804 	addi	r23,r23,-23456
  80dc84:	15400017 	ldw	r21,0(r2)
  80dc88:	b8c00017 	ldw	r3,0(r23)
  80dc8c:	00bfffc4 	movi	r2,-1
  80dc90:	858d883a 	add	r6,r16,r22
  80dc94:	8d6b883a 	add	r21,r17,r21
  80dc98:	1880ea26 	beq	r3,r2,80e044 <_malloc_r+0x714>
  80dc9c:	ad4403c4 	addi	r21,r21,4111
  80dca0:	00bc0004 	movi	r2,-4096
  80dca4:	a8aa703a 	and	r21,r21,r2
  80dca8:	a80b883a 	mov	r5,r21
  80dcac:	9009883a 	mov	r4,r18
  80dcb0:	d9800015 	stw	r6,0(sp)
  80dcb4:	080f5000 	call	80f500 <_sbrk_r>
  80dcb8:	1029883a 	mov	r20,r2
  80dcbc:	00bfffc4 	movi	r2,-1
  80dcc0:	d9800017 	ldw	r6,0(sp)
  80dcc4:	a080e826 	beq	r20,r2,80e068 <_malloc_r+0x738>
  80dcc8:	a180a636 	bltu	r20,r6,80df64 <_malloc_r+0x634>
  80dccc:	070020b4 	movhi	fp,130
  80dcd0:	e7306e04 	addi	fp,fp,-15944
  80dcd4:	e0800017 	ldw	r2,0(fp)
  80dcd8:	a887883a 	add	r3,r21,r2
  80dcdc:	e0c00015 	stw	r3,0(fp)
  80dce0:	3500e626 	beq	r6,r20,80e07c <_malloc_r+0x74c>
  80dce4:	b9000017 	ldw	r4,0(r23)
  80dce8:	00bfffc4 	movi	r2,-1
  80dcec:	2080ee26 	beq	r4,r2,80e0a8 <_malloc_r+0x778>
  80dcf0:	a185c83a 	sub	r2,r20,r6
  80dcf4:	10c5883a 	add	r2,r2,r3
  80dcf8:	e0800015 	stw	r2,0(fp)
  80dcfc:	a0c001cc 	andi	r3,r20,7
  80dd00:	1800bc26 	beq	r3,zero,80dff4 <_malloc_r+0x6c4>
  80dd04:	a0e9c83a 	sub	r20,r20,r3
  80dd08:	00840204 	movi	r2,4104
  80dd0c:	a5000204 	addi	r20,r20,8
  80dd10:	10c7c83a 	sub	r3,r2,r3
  80dd14:	a545883a 	add	r2,r20,r21
  80dd18:	1083ffcc 	andi	r2,r2,4095
  80dd1c:	18abc83a 	sub	r21,r3,r2
  80dd20:	a80b883a 	mov	r5,r21
  80dd24:	9009883a 	mov	r4,r18
  80dd28:	080f5000 	call	80f500 <_sbrk_r>
  80dd2c:	00ffffc4 	movi	r3,-1
  80dd30:	10c0e126 	beq	r2,r3,80e0b8 <_malloc_r+0x788>
  80dd34:	1505c83a 	sub	r2,r2,r20
  80dd38:	1545883a 	add	r2,r2,r21
  80dd3c:	10800054 	ori	r2,r2,1
  80dd40:	e0c00017 	ldw	r3,0(fp)
  80dd44:	9d000215 	stw	r20,8(r19)
  80dd48:	a0800115 	stw	r2,4(r20)
  80dd4c:	a8c7883a 	add	r3,r21,r3
  80dd50:	e0c00015 	stw	r3,0(fp)
  80dd54:	84c00e26 	beq	r16,r19,80dd90 <_malloc_r+0x460>
  80dd58:	018003c4 	movi	r6,15
  80dd5c:	3580a72e 	bgeu	r6,r22,80dffc <_malloc_r+0x6cc>
  80dd60:	81400117 	ldw	r5,4(r16)
  80dd64:	013ffe04 	movi	r4,-8
  80dd68:	b0bffd04 	addi	r2,r22,-12
  80dd6c:	1104703a 	and	r2,r2,r4
  80dd70:	2900004c 	andi	r4,r5,1
  80dd74:	2088b03a 	or	r4,r4,r2
  80dd78:	81000115 	stw	r4,4(r16)
  80dd7c:	01400144 	movi	r5,5
  80dd80:	8089883a 	add	r4,r16,r2
  80dd84:	21400115 	stw	r5,4(r4)
  80dd88:	21400215 	stw	r5,8(r4)
  80dd8c:	3080cd36 	bltu	r6,r2,80e0c4 <_malloc_r+0x794>
  80dd90:	008020b4 	movhi	r2,130
  80dd94:	10b06404 	addi	r2,r2,-15984
  80dd98:	11000017 	ldw	r4,0(r2)
  80dd9c:	20c0012e 	bgeu	r4,r3,80dda4 <_malloc_r+0x474>
  80dda0:	10c00015 	stw	r3,0(r2)
  80dda4:	008020b4 	movhi	r2,130
  80dda8:	10b06304 	addi	r2,r2,-15988
  80ddac:	11000017 	ldw	r4,0(r2)
  80ddb0:	9c000217 	ldw	r16,8(r19)
  80ddb4:	20c0012e 	bgeu	r4,r3,80ddbc <_malloc_r+0x48c>
  80ddb8:	10c00015 	stw	r3,0(r2)
  80ddbc:	80c00117 	ldw	r3,4(r16)
  80ddc0:	00bfff04 	movi	r2,-4
  80ddc4:	1886703a 	and	r3,r3,r2
  80ddc8:	1c45c83a 	sub	r2,r3,r17
  80ddcc:	1c400236 	bltu	r3,r17,80ddd8 <_malloc_r+0x4a8>
  80ddd0:	00c003c4 	movi	r3,15
  80ddd4:	18800416 	blt	r3,r2,80dde8 <_malloc_r+0x4b8>
  80ddd8:	9009883a 	mov	r4,r18
  80dddc:	08147dc0 	call	8147dc <__malloc_unlock>
  80dde0:	0005883a 	mov	r2,zero
  80dde4:	003f7b06 	br	80dbd4 <__alt_mem_onchip_mem+0xff805bd4>
  80dde8:	88c00054 	ori	r3,r17,1
  80ddec:	80c00115 	stw	r3,4(r16)
  80ddf0:	8463883a 	add	r17,r16,r17
  80ddf4:	10800054 	ori	r2,r2,1
  80ddf8:	9c400215 	stw	r17,8(r19)
  80ddfc:	88800115 	stw	r2,4(r17)
  80de00:	9009883a 	mov	r4,r18
  80de04:	08147dc0 	call	8147dc <__malloc_unlock>
  80de08:	80800204 	addi	r2,r16,8
  80de0c:	003f7106 	br	80dbd4 <__alt_mem_onchip_mem+0xff805bd4>
  80de10:	00c00504 	movi	r3,20
  80de14:	18804a2e 	bgeu	r3,r2,80df40 <_malloc_r+0x610>
  80de18:	00c01504 	movi	r3,84
  80de1c:	18806e36 	bltu	r3,r2,80dfd8 <_malloc_r+0x6a8>
  80de20:	8804d33a 	srli	r2,r17,12
  80de24:	12001bc4 	addi	r8,r2,111
  80de28:	11c01b84 	addi	r7,r2,110
  80de2c:	4209883a 	add	r4,r8,r8
  80de30:	003edd06 	br	80d9a8 <__alt_mem_onchip_mem+0xff8059a8>
  80de34:	3804d27a 	srli	r2,r7,9
  80de38:	00c00104 	movi	r3,4
  80de3c:	1880442e 	bgeu	r3,r2,80df50 <_malloc_r+0x620>
  80de40:	00c00504 	movi	r3,20
  80de44:	18808136 	bltu	r3,r2,80e04c <_malloc_r+0x71c>
  80de48:	11401704 	addi	r5,r2,92
  80de4c:	10c016c4 	addi	r3,r2,91
  80de50:	294b883a 	add	r5,r5,r5
  80de54:	294b883a 	add	r5,r5,r5
  80de58:	294b883a 	add	r5,r5,r5
  80de5c:	994b883a 	add	r5,r19,r5
  80de60:	28800017 	ldw	r2,0(r5)
  80de64:	018020b4 	movhi	r6,130
  80de68:	297ffe04 	addi	r5,r5,-8
  80de6c:	31a31704 	addi	r6,r6,-29604
  80de70:	28806526 	beq	r5,r2,80e008 <_malloc_r+0x6d8>
  80de74:	01bfff04 	movi	r6,-4
  80de78:	10c00117 	ldw	r3,4(r2)
  80de7c:	1986703a 	and	r3,r3,r6
  80de80:	38c0022e 	bgeu	r7,r3,80de8c <_malloc_r+0x55c>
  80de84:	10800217 	ldw	r2,8(r2)
  80de88:	28bffb1e 	bne	r5,r2,80de78 <__alt_mem_onchip_mem+0xff805e78>
  80de8c:	11400317 	ldw	r5,12(r2)
  80de90:	98c00117 	ldw	r3,4(r19)
  80de94:	81400315 	stw	r5,12(r16)
  80de98:	80800215 	stw	r2,8(r16)
  80de9c:	2c000215 	stw	r16,8(r5)
  80dea0:	14000315 	stw	r16,12(r2)
  80dea4:	003ef806 	br	80da88 <__alt_mem_onchip_mem+0xff805a88>
  80dea8:	88c00054 	ori	r3,r17,1
  80deac:	80c00115 	stw	r3,4(r16)
  80deb0:	8463883a 	add	r17,r16,r17
  80deb4:	34400515 	stw	r17,20(r6)
  80deb8:	34400415 	stw	r17,16(r6)
  80debc:	10c00054 	ori	r3,r2,1
  80dec0:	8a000315 	stw	r8,12(r17)
  80dec4:	8a000215 	stw	r8,8(r17)
  80dec8:	88c00115 	stw	r3,4(r17)
  80decc:	88a3883a 	add	r17,r17,r2
  80ded0:	88800015 	stw	r2,0(r17)
  80ded4:	9009883a 	mov	r4,r18
  80ded8:	08147dc0 	call	8147dc <__malloc_unlock>
  80dedc:	80800204 	addi	r2,r16,8
  80dee0:	003f3c06 	br	80dbd4 <__alt_mem_onchip_mem+0xff805bd4>
  80dee4:	30c00117 	ldw	r3,4(r6)
  80dee8:	003ee706 	br	80da88 <__alt_mem_onchip_mem+0xff805a88>
  80deec:	5ac00044 	addi	r11,r11,1
  80def0:	588000cc 	andi	r2,r11,3
  80def4:	31800204 	addi	r6,r6,8
  80def8:	103efd1e 	bne	r2,zero,80daf0 <__alt_mem_onchip_mem+0xff805af0>
  80defc:	00002406 	br	80df90 <_malloc_r+0x660>
  80df00:	14000317 	ldw	r16,12(r2)
  80df04:	143f251e 	bne	r2,r16,80db9c <__alt_mem_onchip_mem+0xff805b9c>
  80df08:	21000084 	addi	r4,r4,2
  80df0c:	003ebc06 	br	80da00 <__alt_mem_onchip_mem+0xff805a00>
  80df10:	8085883a 	add	r2,r16,r2
  80df14:	10c00117 	ldw	r3,4(r2)
  80df18:	81000317 	ldw	r4,12(r16)
  80df1c:	81400217 	ldw	r5,8(r16)
  80df20:	18c00054 	ori	r3,r3,1
  80df24:	10c00115 	stw	r3,4(r2)
  80df28:	29000315 	stw	r4,12(r5)
  80df2c:	21400215 	stw	r5,8(r4)
  80df30:	9009883a 	mov	r4,r18
  80df34:	08147dc0 	call	8147dc <__malloc_unlock>
  80df38:	80800204 	addi	r2,r16,8
  80df3c:	003f2506 	br	80dbd4 <__alt_mem_onchip_mem+0xff805bd4>
  80df40:	12001704 	addi	r8,r2,92
  80df44:	11c016c4 	addi	r7,r2,91
  80df48:	4209883a 	add	r4,r8,r8
  80df4c:	003e9606 	br	80d9a8 <__alt_mem_onchip_mem+0xff8059a8>
  80df50:	3804d1ba 	srli	r2,r7,6
  80df54:	11400e44 	addi	r5,r2,57
  80df58:	10c00e04 	addi	r3,r2,56
  80df5c:	294b883a 	add	r5,r5,r5
  80df60:	003fbc06 	br	80de54 <__alt_mem_onchip_mem+0xff805e54>
  80df64:	84ff5926 	beq	r16,r19,80dccc <__alt_mem_onchip_mem+0xff805ccc>
  80df68:	008020b4 	movhi	r2,130
  80df6c:	10a31704 	addi	r2,r2,-29604
  80df70:	14000217 	ldw	r16,8(r2)
  80df74:	00bfff04 	movi	r2,-4
  80df78:	80c00117 	ldw	r3,4(r16)
  80df7c:	1886703a 	and	r3,r3,r2
  80df80:	003f9106 	br	80ddc8 <__alt_mem_onchip_mem+0xff805dc8>
  80df84:	60800217 	ldw	r2,8(r12)
  80df88:	213fffc4 	addi	r4,r4,-1
  80df8c:	1300651e 	bne	r2,r12,80e124 <_malloc_r+0x7f4>
  80df90:	208000cc 	andi	r2,r4,3
  80df94:	633ffe04 	addi	r12,r12,-8
  80df98:	103ffa1e 	bne	r2,zero,80df84 <__alt_mem_onchip_mem+0xff805f84>
  80df9c:	98800117 	ldw	r2,4(r19)
  80dfa0:	0146303a 	nor	r3,zero,r5
  80dfa4:	1884703a 	and	r2,r3,r2
  80dfa8:	98800115 	stw	r2,4(r19)
  80dfac:	294b883a 	add	r5,r5,r5
  80dfb0:	117f2836 	bltu	r2,r5,80dc54 <__alt_mem_onchip_mem+0xff805c54>
  80dfb4:	283f2726 	beq	r5,zero,80dc54 <__alt_mem_onchip_mem+0xff805c54>
  80dfb8:	2886703a 	and	r3,r5,r2
  80dfbc:	5809883a 	mov	r4,r11
  80dfc0:	183ec31e 	bne	r3,zero,80dad0 <__alt_mem_onchip_mem+0xff805ad0>
  80dfc4:	294b883a 	add	r5,r5,r5
  80dfc8:	2886703a 	and	r3,r5,r2
  80dfcc:	21000104 	addi	r4,r4,4
  80dfd0:	183ffc26 	beq	r3,zero,80dfc4 <__alt_mem_onchip_mem+0xff805fc4>
  80dfd4:	003ebe06 	br	80dad0 <__alt_mem_onchip_mem+0xff805ad0>
  80dfd8:	00c05504 	movi	r3,340
  80dfdc:	18801236 	bltu	r3,r2,80e028 <_malloc_r+0x6f8>
  80dfe0:	8804d3fa 	srli	r2,r17,15
  80dfe4:	12001e04 	addi	r8,r2,120
  80dfe8:	11c01dc4 	addi	r7,r2,119
  80dfec:	4209883a 	add	r4,r8,r8
  80dff0:	003e6d06 	br	80d9a8 <__alt_mem_onchip_mem+0xff8059a8>
  80dff4:	00c40004 	movi	r3,4096
  80dff8:	003f4606 	br	80dd14 <__alt_mem_onchip_mem+0xff805d14>
  80dffc:	00800044 	movi	r2,1
  80e000:	a0800115 	stw	r2,4(r20)
  80e004:	003f7406 	br	80ddd8 <__alt_mem_onchip_mem+0xff805dd8>
  80e008:	1805d0ba 	srai	r2,r3,2
  80e00c:	01c00044 	movi	r7,1
  80e010:	30c00117 	ldw	r3,4(r6)
  80e014:	388e983a 	sll	r7,r7,r2
  80e018:	2805883a 	mov	r2,r5
  80e01c:	38c6b03a 	or	r3,r7,r3
  80e020:	30c00115 	stw	r3,4(r6)
  80e024:	003f9b06 	br	80de94 <__alt_mem_onchip_mem+0xff805e94>
  80e028:	00c15504 	movi	r3,1364
  80e02c:	18801a36 	bltu	r3,r2,80e098 <_malloc_r+0x768>
  80e030:	8804d4ba 	srli	r2,r17,18
  80e034:	12001f44 	addi	r8,r2,125
  80e038:	11c01f04 	addi	r7,r2,124
  80e03c:	4209883a 	add	r4,r8,r8
  80e040:	003e5906 	br	80d9a8 <__alt_mem_onchip_mem+0xff8059a8>
  80e044:	ad400404 	addi	r21,r21,16
  80e048:	003f1706 	br	80dca8 <__alt_mem_onchip_mem+0xff805ca8>
  80e04c:	00c01504 	movi	r3,84
  80e050:	18802336 	bltu	r3,r2,80e0e0 <_malloc_r+0x7b0>
  80e054:	3804d33a 	srli	r2,r7,12
  80e058:	11401bc4 	addi	r5,r2,111
  80e05c:	10c01b84 	addi	r3,r2,110
  80e060:	294b883a 	add	r5,r5,r5
  80e064:	003f7b06 	br	80de54 <__alt_mem_onchip_mem+0xff805e54>
  80e068:	9c000217 	ldw	r16,8(r19)
  80e06c:	00bfff04 	movi	r2,-4
  80e070:	80c00117 	ldw	r3,4(r16)
  80e074:	1886703a 	and	r3,r3,r2
  80e078:	003f5306 	br	80ddc8 <__alt_mem_onchip_mem+0xff805dc8>
  80e07c:	3083ffcc 	andi	r2,r6,4095
  80e080:	103f181e 	bne	r2,zero,80dce4 <__alt_mem_onchip_mem+0xff805ce4>
  80e084:	99000217 	ldw	r4,8(r19)
  80e088:	b545883a 	add	r2,r22,r21
  80e08c:	10800054 	ori	r2,r2,1
  80e090:	20800115 	stw	r2,4(r4)
  80e094:	003f3e06 	br	80dd90 <__alt_mem_onchip_mem+0xff805d90>
  80e098:	01003f84 	movi	r4,254
  80e09c:	02001fc4 	movi	r8,127
  80e0a0:	01c01f84 	movi	r7,126
  80e0a4:	003e4006 	br	80d9a8 <__alt_mem_onchip_mem+0xff8059a8>
  80e0a8:	008020b4 	movhi	r2,130
  80e0ac:	10a91804 	addi	r2,r2,-23456
  80e0b0:	15000015 	stw	r20,0(r2)
  80e0b4:	003f1106 	br	80dcfc <__alt_mem_onchip_mem+0xff805cfc>
  80e0b8:	00800044 	movi	r2,1
  80e0bc:	002b883a 	mov	r21,zero
  80e0c0:	003f1f06 	br	80dd40 <__alt_mem_onchip_mem+0xff805d40>
  80e0c4:	81400204 	addi	r5,r16,8
  80e0c8:	9009883a 	mov	r4,r18
  80e0cc:	080d2000 	call	80d200 <_free_r>
  80e0d0:	008020b4 	movhi	r2,130
  80e0d4:	10b06e04 	addi	r2,r2,-15944
  80e0d8:	10c00017 	ldw	r3,0(r2)
  80e0dc:	003f2c06 	br	80dd90 <__alt_mem_onchip_mem+0xff805d90>
  80e0e0:	00c05504 	movi	r3,340
  80e0e4:	18800536 	bltu	r3,r2,80e0fc <_malloc_r+0x7cc>
  80e0e8:	3804d3fa 	srli	r2,r7,15
  80e0ec:	11401e04 	addi	r5,r2,120
  80e0f0:	10c01dc4 	addi	r3,r2,119
  80e0f4:	294b883a 	add	r5,r5,r5
  80e0f8:	003f5606 	br	80de54 <__alt_mem_onchip_mem+0xff805e54>
  80e0fc:	00c15504 	movi	r3,1364
  80e100:	18800536 	bltu	r3,r2,80e118 <_malloc_r+0x7e8>
  80e104:	3804d4ba 	srli	r2,r7,18
  80e108:	11401f44 	addi	r5,r2,125
  80e10c:	10c01f04 	addi	r3,r2,124
  80e110:	294b883a 	add	r5,r5,r5
  80e114:	003f4f06 	br	80de54 <__alt_mem_onchip_mem+0xff805e54>
  80e118:	01403f84 	movi	r5,254
  80e11c:	00c01f84 	movi	r3,126
  80e120:	003f4c06 	br	80de54 <__alt_mem_onchip_mem+0xff805e54>
  80e124:	98800117 	ldw	r2,4(r19)
  80e128:	003fa006 	br	80dfac <__alt_mem_onchip_mem+0xff805fac>
  80e12c:	8808d0fa 	srli	r4,r17,3
  80e130:	20800044 	addi	r2,r4,1
  80e134:	1085883a 	add	r2,r2,r2
  80e138:	003e9006 	br	80db7c <__alt_mem_onchip_mem+0xff805b7c>

0080e13c <memchr>:
  80e13c:	208000cc 	andi	r2,r4,3
  80e140:	280f883a 	mov	r7,r5
  80e144:	10003426 	beq	r2,zero,80e218 <memchr+0xdc>
  80e148:	30bfffc4 	addi	r2,r6,-1
  80e14c:	30001a26 	beq	r6,zero,80e1b8 <memchr+0x7c>
  80e150:	20c00003 	ldbu	r3,0(r4)
  80e154:	29803fcc 	andi	r6,r5,255
  80e158:	30c0051e 	bne	r6,r3,80e170 <memchr+0x34>
  80e15c:	00001806 	br	80e1c0 <memchr+0x84>
  80e160:	10001526 	beq	r2,zero,80e1b8 <memchr+0x7c>
  80e164:	20c00003 	ldbu	r3,0(r4)
  80e168:	10bfffc4 	addi	r2,r2,-1
  80e16c:	30c01426 	beq	r6,r3,80e1c0 <memchr+0x84>
  80e170:	21000044 	addi	r4,r4,1
  80e174:	20c000cc 	andi	r3,r4,3
  80e178:	183ff91e 	bne	r3,zero,80e160 <__alt_mem_onchip_mem+0xff806160>
  80e17c:	020000c4 	movi	r8,3
  80e180:	40801136 	bltu	r8,r2,80e1c8 <memchr+0x8c>
  80e184:	10000c26 	beq	r2,zero,80e1b8 <memchr+0x7c>
  80e188:	20c00003 	ldbu	r3,0(r4)
  80e18c:	29403fcc 	andi	r5,r5,255
  80e190:	28c00b26 	beq	r5,r3,80e1c0 <memchr+0x84>
  80e194:	20c00044 	addi	r3,r4,1
  80e198:	39803fcc 	andi	r6,r7,255
  80e19c:	2089883a 	add	r4,r4,r2
  80e1a0:	00000306 	br	80e1b0 <memchr+0x74>
  80e1a4:	18c00044 	addi	r3,r3,1
  80e1a8:	197fffc3 	ldbu	r5,-1(r3)
  80e1ac:	31400526 	beq	r6,r5,80e1c4 <memchr+0x88>
  80e1b0:	1805883a 	mov	r2,r3
  80e1b4:	20fffb1e 	bne	r4,r3,80e1a4 <__alt_mem_onchip_mem+0xff8061a4>
  80e1b8:	0005883a 	mov	r2,zero
  80e1bc:	f800283a 	ret
  80e1c0:	2005883a 	mov	r2,r4
  80e1c4:	f800283a 	ret
  80e1c8:	28c03fcc 	andi	r3,r5,255
  80e1cc:	1812923a 	slli	r9,r3,8
  80e1d0:	02ffbff4 	movhi	r11,65279
  80e1d4:	02a02074 	movhi	r10,32897
  80e1d8:	48d2b03a 	or	r9,r9,r3
  80e1dc:	4806943a 	slli	r3,r9,16
  80e1e0:	5affbfc4 	addi	r11,r11,-257
  80e1e4:	52a02004 	addi	r10,r10,-32640
  80e1e8:	48d2b03a 	or	r9,r9,r3
  80e1ec:	20c00017 	ldw	r3,0(r4)
  80e1f0:	48c6f03a 	xor	r3,r9,r3
  80e1f4:	1acd883a 	add	r6,r3,r11
  80e1f8:	00c6303a 	nor	r3,zero,r3
  80e1fc:	30c6703a 	and	r3,r6,r3
  80e200:	1a86703a 	and	r3,r3,r10
  80e204:	183fe01e 	bne	r3,zero,80e188 <__alt_mem_onchip_mem+0xff806188>
  80e208:	10bfff04 	addi	r2,r2,-4
  80e20c:	21000104 	addi	r4,r4,4
  80e210:	40bff636 	bltu	r8,r2,80e1ec <__alt_mem_onchip_mem+0xff8061ec>
  80e214:	003fdb06 	br	80e184 <__alt_mem_onchip_mem+0xff806184>
  80e218:	3005883a 	mov	r2,r6
  80e21c:	003fd706 	br	80e17c <__alt_mem_onchip_mem+0xff80617c>

0080e220 <memcpy>:
  80e220:	defffd04 	addi	sp,sp,-12
  80e224:	dfc00215 	stw	ra,8(sp)
  80e228:	dc400115 	stw	r17,4(sp)
  80e22c:	dc000015 	stw	r16,0(sp)
  80e230:	00c003c4 	movi	r3,15
  80e234:	2005883a 	mov	r2,r4
  80e238:	1980452e 	bgeu	r3,r6,80e350 <memcpy+0x130>
  80e23c:	2906b03a 	or	r3,r5,r4
  80e240:	18c000cc 	andi	r3,r3,3
  80e244:	1800441e 	bne	r3,zero,80e358 <memcpy+0x138>
  80e248:	347ffc04 	addi	r17,r6,-16
  80e24c:	8822d13a 	srli	r17,r17,4
  80e250:	28c00104 	addi	r3,r5,4
  80e254:	23400104 	addi	r13,r4,4
  80e258:	8820913a 	slli	r16,r17,4
  80e25c:	2b000204 	addi	r12,r5,8
  80e260:	22c00204 	addi	r11,r4,8
  80e264:	84000504 	addi	r16,r16,20
  80e268:	2a800304 	addi	r10,r5,12
  80e26c:	22400304 	addi	r9,r4,12
  80e270:	2c21883a 	add	r16,r5,r16
  80e274:	2811883a 	mov	r8,r5
  80e278:	200f883a 	mov	r7,r4
  80e27c:	41000017 	ldw	r4,0(r8)
  80e280:	1fc00017 	ldw	ra,0(r3)
  80e284:	63c00017 	ldw	r15,0(r12)
  80e288:	39000015 	stw	r4,0(r7)
  80e28c:	53800017 	ldw	r14,0(r10)
  80e290:	6fc00015 	stw	ra,0(r13)
  80e294:	5bc00015 	stw	r15,0(r11)
  80e298:	4b800015 	stw	r14,0(r9)
  80e29c:	18c00404 	addi	r3,r3,16
  80e2a0:	39c00404 	addi	r7,r7,16
  80e2a4:	42000404 	addi	r8,r8,16
  80e2a8:	6b400404 	addi	r13,r13,16
  80e2ac:	63000404 	addi	r12,r12,16
  80e2b0:	5ac00404 	addi	r11,r11,16
  80e2b4:	52800404 	addi	r10,r10,16
  80e2b8:	4a400404 	addi	r9,r9,16
  80e2bc:	1c3fef1e 	bne	r3,r16,80e27c <__alt_mem_onchip_mem+0xff80627c>
  80e2c0:	89c00044 	addi	r7,r17,1
  80e2c4:	380e913a 	slli	r7,r7,4
  80e2c8:	310003cc 	andi	r4,r6,15
  80e2cc:	02c000c4 	movi	r11,3
  80e2d0:	11c7883a 	add	r3,r2,r7
  80e2d4:	29cb883a 	add	r5,r5,r7
  80e2d8:	5900212e 	bgeu	r11,r4,80e360 <memcpy+0x140>
  80e2dc:	1813883a 	mov	r9,r3
  80e2e0:	2811883a 	mov	r8,r5
  80e2e4:	200f883a 	mov	r7,r4
  80e2e8:	42800017 	ldw	r10,0(r8)
  80e2ec:	4a400104 	addi	r9,r9,4
  80e2f0:	39ffff04 	addi	r7,r7,-4
  80e2f4:	4abfff15 	stw	r10,-4(r9)
  80e2f8:	42000104 	addi	r8,r8,4
  80e2fc:	59fffa36 	bltu	r11,r7,80e2e8 <__alt_mem_onchip_mem+0xff8062e8>
  80e300:	213fff04 	addi	r4,r4,-4
  80e304:	2008d0ba 	srli	r4,r4,2
  80e308:	318000cc 	andi	r6,r6,3
  80e30c:	21000044 	addi	r4,r4,1
  80e310:	2109883a 	add	r4,r4,r4
  80e314:	2109883a 	add	r4,r4,r4
  80e318:	1907883a 	add	r3,r3,r4
  80e31c:	290b883a 	add	r5,r5,r4
  80e320:	30000626 	beq	r6,zero,80e33c <memcpy+0x11c>
  80e324:	198d883a 	add	r6,r3,r6
  80e328:	29c00003 	ldbu	r7,0(r5)
  80e32c:	18c00044 	addi	r3,r3,1
  80e330:	29400044 	addi	r5,r5,1
  80e334:	19ffffc5 	stb	r7,-1(r3)
  80e338:	19bffb1e 	bne	r3,r6,80e328 <__alt_mem_onchip_mem+0xff806328>
  80e33c:	dfc00217 	ldw	ra,8(sp)
  80e340:	dc400117 	ldw	r17,4(sp)
  80e344:	dc000017 	ldw	r16,0(sp)
  80e348:	dec00304 	addi	sp,sp,12
  80e34c:	f800283a 	ret
  80e350:	2007883a 	mov	r3,r4
  80e354:	003ff206 	br	80e320 <__alt_mem_onchip_mem+0xff806320>
  80e358:	2007883a 	mov	r3,r4
  80e35c:	003ff106 	br	80e324 <__alt_mem_onchip_mem+0xff806324>
  80e360:	200d883a 	mov	r6,r4
  80e364:	003fee06 	br	80e320 <__alt_mem_onchip_mem+0xff806320>

0080e368 <memset>:
  80e368:	20c000cc 	andi	r3,r4,3
  80e36c:	2005883a 	mov	r2,r4
  80e370:	18004426 	beq	r3,zero,80e484 <memset+0x11c>
  80e374:	31ffffc4 	addi	r7,r6,-1
  80e378:	30004026 	beq	r6,zero,80e47c <memset+0x114>
  80e37c:	2813883a 	mov	r9,r5
  80e380:	200d883a 	mov	r6,r4
  80e384:	2007883a 	mov	r3,r4
  80e388:	00000406 	br	80e39c <memset+0x34>
  80e38c:	3a3fffc4 	addi	r8,r7,-1
  80e390:	31800044 	addi	r6,r6,1
  80e394:	38003926 	beq	r7,zero,80e47c <memset+0x114>
  80e398:	400f883a 	mov	r7,r8
  80e39c:	18c00044 	addi	r3,r3,1
  80e3a0:	32400005 	stb	r9,0(r6)
  80e3a4:	1a0000cc 	andi	r8,r3,3
  80e3a8:	403ff81e 	bne	r8,zero,80e38c <__alt_mem_onchip_mem+0xff80638c>
  80e3ac:	010000c4 	movi	r4,3
  80e3b0:	21c02d2e 	bgeu	r4,r7,80e468 <memset+0x100>
  80e3b4:	29003fcc 	andi	r4,r5,255
  80e3b8:	200c923a 	slli	r6,r4,8
  80e3bc:	3108b03a 	or	r4,r6,r4
  80e3c0:	200c943a 	slli	r6,r4,16
  80e3c4:	218cb03a 	or	r6,r4,r6
  80e3c8:	010003c4 	movi	r4,15
  80e3cc:	21c0182e 	bgeu	r4,r7,80e430 <memset+0xc8>
  80e3d0:	3b3ffc04 	addi	r12,r7,-16
  80e3d4:	6018d13a 	srli	r12,r12,4
  80e3d8:	1a000104 	addi	r8,r3,4
  80e3dc:	1ac00204 	addi	r11,r3,8
  80e3e0:	6008913a 	slli	r4,r12,4
  80e3e4:	1a800304 	addi	r10,r3,12
  80e3e8:	1813883a 	mov	r9,r3
  80e3ec:	21000504 	addi	r4,r4,20
  80e3f0:	1909883a 	add	r4,r3,r4
  80e3f4:	49800015 	stw	r6,0(r9)
  80e3f8:	41800015 	stw	r6,0(r8)
  80e3fc:	59800015 	stw	r6,0(r11)
  80e400:	51800015 	stw	r6,0(r10)
  80e404:	42000404 	addi	r8,r8,16
  80e408:	4a400404 	addi	r9,r9,16
  80e40c:	5ac00404 	addi	r11,r11,16
  80e410:	52800404 	addi	r10,r10,16
  80e414:	413ff71e 	bne	r8,r4,80e3f4 <__alt_mem_onchip_mem+0xff8063f4>
  80e418:	63000044 	addi	r12,r12,1
  80e41c:	6018913a 	slli	r12,r12,4
  80e420:	39c003cc 	andi	r7,r7,15
  80e424:	010000c4 	movi	r4,3
  80e428:	1b07883a 	add	r3,r3,r12
  80e42c:	21c00e2e 	bgeu	r4,r7,80e468 <memset+0x100>
  80e430:	1813883a 	mov	r9,r3
  80e434:	3811883a 	mov	r8,r7
  80e438:	010000c4 	movi	r4,3
  80e43c:	49800015 	stw	r6,0(r9)
  80e440:	423fff04 	addi	r8,r8,-4
  80e444:	4a400104 	addi	r9,r9,4
  80e448:	223ffc36 	bltu	r4,r8,80e43c <__alt_mem_onchip_mem+0xff80643c>
  80e44c:	393fff04 	addi	r4,r7,-4
  80e450:	2008d0ba 	srli	r4,r4,2
  80e454:	39c000cc 	andi	r7,r7,3
  80e458:	21000044 	addi	r4,r4,1
  80e45c:	2109883a 	add	r4,r4,r4
  80e460:	2109883a 	add	r4,r4,r4
  80e464:	1907883a 	add	r3,r3,r4
  80e468:	38000526 	beq	r7,zero,80e480 <memset+0x118>
  80e46c:	19cf883a 	add	r7,r3,r7
  80e470:	19400005 	stb	r5,0(r3)
  80e474:	18c00044 	addi	r3,r3,1
  80e478:	38fffd1e 	bne	r7,r3,80e470 <__alt_mem_onchip_mem+0xff806470>
  80e47c:	f800283a 	ret
  80e480:	f800283a 	ret
  80e484:	2007883a 	mov	r3,r4
  80e488:	300f883a 	mov	r7,r6
  80e48c:	003fc706 	br	80e3ac <__alt_mem_onchip_mem+0xff8063ac>

0080e490 <_Balloc>:
  80e490:	20801317 	ldw	r2,76(r4)
  80e494:	defffc04 	addi	sp,sp,-16
  80e498:	dc400115 	stw	r17,4(sp)
  80e49c:	dc000015 	stw	r16,0(sp)
  80e4a0:	dfc00315 	stw	ra,12(sp)
  80e4a4:	dc800215 	stw	r18,8(sp)
  80e4a8:	2023883a 	mov	r17,r4
  80e4ac:	2821883a 	mov	r16,r5
  80e4b0:	10000f26 	beq	r2,zero,80e4f0 <_Balloc+0x60>
  80e4b4:	8407883a 	add	r3,r16,r16
  80e4b8:	18c7883a 	add	r3,r3,r3
  80e4bc:	10c7883a 	add	r3,r2,r3
  80e4c0:	18800017 	ldw	r2,0(r3)
  80e4c4:	10001126 	beq	r2,zero,80e50c <_Balloc+0x7c>
  80e4c8:	11000017 	ldw	r4,0(r2)
  80e4cc:	19000015 	stw	r4,0(r3)
  80e4d0:	10000415 	stw	zero,16(r2)
  80e4d4:	10000315 	stw	zero,12(r2)
  80e4d8:	dfc00317 	ldw	ra,12(sp)
  80e4dc:	dc800217 	ldw	r18,8(sp)
  80e4e0:	dc400117 	ldw	r17,4(sp)
  80e4e4:	dc000017 	ldw	r16,0(sp)
  80e4e8:	dec00404 	addi	sp,sp,16
  80e4ec:	f800283a 	ret
  80e4f0:	01800844 	movi	r6,33
  80e4f4:	01400104 	movi	r5,4
  80e4f8:	0810f000 	call	810f00 <_calloc_r>
  80e4fc:	88801315 	stw	r2,76(r17)
  80e500:	103fec1e 	bne	r2,zero,80e4b4 <__alt_mem_onchip_mem+0xff8064b4>
  80e504:	0005883a 	mov	r2,zero
  80e508:	003ff306 	br	80e4d8 <__alt_mem_onchip_mem+0xff8064d8>
  80e50c:	01400044 	movi	r5,1
  80e510:	2c24983a 	sll	r18,r5,r16
  80e514:	8809883a 	mov	r4,r17
  80e518:	91800144 	addi	r6,r18,5
  80e51c:	318d883a 	add	r6,r6,r6
  80e520:	318d883a 	add	r6,r6,r6
  80e524:	0810f000 	call	810f00 <_calloc_r>
  80e528:	103ff626 	beq	r2,zero,80e504 <__alt_mem_onchip_mem+0xff806504>
  80e52c:	14000115 	stw	r16,4(r2)
  80e530:	14800215 	stw	r18,8(r2)
  80e534:	003fe606 	br	80e4d0 <__alt_mem_onchip_mem+0xff8064d0>

0080e538 <_Bfree>:
  80e538:	28000826 	beq	r5,zero,80e55c <_Bfree+0x24>
  80e53c:	28c00117 	ldw	r3,4(r5)
  80e540:	20801317 	ldw	r2,76(r4)
  80e544:	18c7883a 	add	r3,r3,r3
  80e548:	18c7883a 	add	r3,r3,r3
  80e54c:	10c5883a 	add	r2,r2,r3
  80e550:	10c00017 	ldw	r3,0(r2)
  80e554:	28c00015 	stw	r3,0(r5)
  80e558:	11400015 	stw	r5,0(r2)
  80e55c:	f800283a 	ret

0080e560 <__multadd>:
  80e560:	defffa04 	addi	sp,sp,-24
  80e564:	dc800315 	stw	r18,12(sp)
  80e568:	dc400215 	stw	r17,8(sp)
  80e56c:	dc000115 	stw	r16,4(sp)
  80e570:	2823883a 	mov	r17,r5
  80e574:	2c000417 	ldw	r16,16(r5)
  80e578:	dfc00515 	stw	ra,20(sp)
  80e57c:	dcc00415 	stw	r19,16(sp)
  80e580:	2025883a 	mov	r18,r4
  80e584:	29400504 	addi	r5,r5,20
  80e588:	0011883a 	mov	r8,zero
  80e58c:	28c00017 	ldw	r3,0(r5)
  80e590:	29400104 	addi	r5,r5,4
  80e594:	42000044 	addi	r8,r8,1
  80e598:	18bfffcc 	andi	r2,r3,65535
  80e59c:	1185383a 	mul	r2,r2,r6
  80e5a0:	1806d43a 	srli	r3,r3,16
  80e5a4:	11cf883a 	add	r7,r2,r7
  80e5a8:	3808d43a 	srli	r4,r7,16
  80e5ac:	1987383a 	mul	r3,r3,r6
  80e5b0:	38bfffcc 	andi	r2,r7,65535
  80e5b4:	1907883a 	add	r3,r3,r4
  80e5b8:	1808943a 	slli	r4,r3,16
  80e5bc:	180ed43a 	srli	r7,r3,16
  80e5c0:	2085883a 	add	r2,r4,r2
  80e5c4:	28bfff15 	stw	r2,-4(r5)
  80e5c8:	443ff016 	blt	r8,r16,80e58c <__alt_mem_onchip_mem+0xff80658c>
  80e5cc:	38000926 	beq	r7,zero,80e5f4 <__multadd+0x94>
  80e5d0:	88800217 	ldw	r2,8(r17)
  80e5d4:	80800f0e 	bge	r16,r2,80e614 <__multadd+0xb4>
  80e5d8:	80800144 	addi	r2,r16,5
  80e5dc:	1085883a 	add	r2,r2,r2
  80e5e0:	1085883a 	add	r2,r2,r2
  80e5e4:	8885883a 	add	r2,r17,r2
  80e5e8:	11c00015 	stw	r7,0(r2)
  80e5ec:	84000044 	addi	r16,r16,1
  80e5f0:	8c000415 	stw	r16,16(r17)
  80e5f4:	8805883a 	mov	r2,r17
  80e5f8:	dfc00517 	ldw	ra,20(sp)
  80e5fc:	dcc00417 	ldw	r19,16(sp)
  80e600:	dc800317 	ldw	r18,12(sp)
  80e604:	dc400217 	ldw	r17,8(sp)
  80e608:	dc000117 	ldw	r16,4(sp)
  80e60c:	dec00604 	addi	sp,sp,24
  80e610:	f800283a 	ret
  80e614:	89400117 	ldw	r5,4(r17)
  80e618:	9009883a 	mov	r4,r18
  80e61c:	d9c00015 	stw	r7,0(sp)
  80e620:	29400044 	addi	r5,r5,1
  80e624:	080e4900 	call	80e490 <_Balloc>
  80e628:	89800417 	ldw	r6,16(r17)
  80e62c:	89400304 	addi	r5,r17,12
  80e630:	11000304 	addi	r4,r2,12
  80e634:	31800084 	addi	r6,r6,2
  80e638:	318d883a 	add	r6,r6,r6
  80e63c:	318d883a 	add	r6,r6,r6
  80e640:	1027883a 	mov	r19,r2
  80e644:	080e2200 	call	80e220 <memcpy>
  80e648:	d9c00017 	ldw	r7,0(sp)
  80e64c:	88000a26 	beq	r17,zero,80e678 <__multadd+0x118>
  80e650:	88c00117 	ldw	r3,4(r17)
  80e654:	90801317 	ldw	r2,76(r18)
  80e658:	18c7883a 	add	r3,r3,r3
  80e65c:	18c7883a 	add	r3,r3,r3
  80e660:	10c5883a 	add	r2,r2,r3
  80e664:	10c00017 	ldw	r3,0(r2)
  80e668:	88c00015 	stw	r3,0(r17)
  80e66c:	14400015 	stw	r17,0(r2)
  80e670:	9823883a 	mov	r17,r19
  80e674:	003fd806 	br	80e5d8 <__alt_mem_onchip_mem+0xff8065d8>
  80e678:	9823883a 	mov	r17,r19
  80e67c:	003fd606 	br	80e5d8 <__alt_mem_onchip_mem+0xff8065d8>

0080e680 <__s2b>:
  80e680:	defff904 	addi	sp,sp,-28
  80e684:	dc400115 	stw	r17,4(sp)
  80e688:	dc000015 	stw	r16,0(sp)
  80e68c:	2023883a 	mov	r17,r4
  80e690:	2821883a 	mov	r16,r5
  80e694:	39000204 	addi	r4,r7,8
  80e698:	01400244 	movi	r5,9
  80e69c:	dcc00315 	stw	r19,12(sp)
  80e6a0:	dc800215 	stw	r18,8(sp)
  80e6a4:	dfc00615 	stw	ra,24(sp)
  80e6a8:	dd400515 	stw	r21,20(sp)
  80e6ac:	dd000415 	stw	r20,16(sp)
  80e6b0:	3825883a 	mov	r18,r7
  80e6b4:	3027883a 	mov	r19,r6
  80e6b8:	0812dac0 	call	812dac <__divsi3>
  80e6bc:	00c00044 	movi	r3,1
  80e6c0:	000b883a 	mov	r5,zero
  80e6c4:	1880030e 	bge	r3,r2,80e6d4 <__s2b+0x54>
  80e6c8:	18c7883a 	add	r3,r3,r3
  80e6cc:	29400044 	addi	r5,r5,1
  80e6d0:	18bffd16 	blt	r3,r2,80e6c8 <__alt_mem_onchip_mem+0xff8066c8>
  80e6d4:	8809883a 	mov	r4,r17
  80e6d8:	080e4900 	call	80e490 <_Balloc>
  80e6dc:	d8c00717 	ldw	r3,28(sp)
  80e6e0:	10c00515 	stw	r3,20(r2)
  80e6e4:	00c00044 	movi	r3,1
  80e6e8:	10c00415 	stw	r3,16(r2)
  80e6ec:	00c00244 	movi	r3,9
  80e6f0:	1cc0210e 	bge	r3,r19,80e778 <__s2b+0xf8>
  80e6f4:	80eb883a 	add	r21,r16,r3
  80e6f8:	a829883a 	mov	r20,r21
  80e6fc:	84e1883a 	add	r16,r16,r19
  80e700:	a1c00007 	ldb	r7,0(r20)
  80e704:	01800284 	movi	r6,10
  80e708:	a5000044 	addi	r20,r20,1
  80e70c:	100b883a 	mov	r5,r2
  80e710:	39fff404 	addi	r7,r7,-48
  80e714:	8809883a 	mov	r4,r17
  80e718:	080e5600 	call	80e560 <__multadd>
  80e71c:	a43ff81e 	bne	r20,r16,80e700 <__alt_mem_onchip_mem+0xff806700>
  80e720:	ace1883a 	add	r16,r21,r19
  80e724:	843ffe04 	addi	r16,r16,-8
  80e728:	9c800a0e 	bge	r19,r18,80e754 <__s2b+0xd4>
  80e72c:	94e5c83a 	sub	r18,r18,r19
  80e730:	84a5883a 	add	r18,r16,r18
  80e734:	81c00007 	ldb	r7,0(r16)
  80e738:	01800284 	movi	r6,10
  80e73c:	84000044 	addi	r16,r16,1
  80e740:	100b883a 	mov	r5,r2
  80e744:	39fff404 	addi	r7,r7,-48
  80e748:	8809883a 	mov	r4,r17
  80e74c:	080e5600 	call	80e560 <__multadd>
  80e750:	84bff81e 	bne	r16,r18,80e734 <__alt_mem_onchip_mem+0xff806734>
  80e754:	dfc00617 	ldw	ra,24(sp)
  80e758:	dd400517 	ldw	r21,20(sp)
  80e75c:	dd000417 	ldw	r20,16(sp)
  80e760:	dcc00317 	ldw	r19,12(sp)
  80e764:	dc800217 	ldw	r18,8(sp)
  80e768:	dc400117 	ldw	r17,4(sp)
  80e76c:	dc000017 	ldw	r16,0(sp)
  80e770:	dec00704 	addi	sp,sp,28
  80e774:	f800283a 	ret
  80e778:	84000284 	addi	r16,r16,10
  80e77c:	1827883a 	mov	r19,r3
  80e780:	003fe906 	br	80e728 <__alt_mem_onchip_mem+0xff806728>

0080e784 <__hi0bits>:
  80e784:	20bfffec 	andhi	r2,r4,65535
  80e788:	1000141e 	bne	r2,zero,80e7dc <__hi0bits+0x58>
  80e78c:	2008943a 	slli	r4,r4,16
  80e790:	00800404 	movi	r2,16
  80e794:	20ffc02c 	andhi	r3,r4,65280
  80e798:	1800021e 	bne	r3,zero,80e7a4 <__hi0bits+0x20>
  80e79c:	2008923a 	slli	r4,r4,8
  80e7a0:	10800204 	addi	r2,r2,8
  80e7a4:	20fc002c 	andhi	r3,r4,61440
  80e7a8:	1800021e 	bne	r3,zero,80e7b4 <__hi0bits+0x30>
  80e7ac:	2008913a 	slli	r4,r4,4
  80e7b0:	10800104 	addi	r2,r2,4
  80e7b4:	20f0002c 	andhi	r3,r4,49152
  80e7b8:	1800031e 	bne	r3,zero,80e7c8 <__hi0bits+0x44>
  80e7bc:	2109883a 	add	r4,r4,r4
  80e7c0:	10800084 	addi	r2,r2,2
  80e7c4:	2109883a 	add	r4,r4,r4
  80e7c8:	20000316 	blt	r4,zero,80e7d8 <__hi0bits+0x54>
  80e7cc:	2110002c 	andhi	r4,r4,16384
  80e7d0:	2000041e 	bne	r4,zero,80e7e4 <__hi0bits+0x60>
  80e7d4:	00800804 	movi	r2,32
  80e7d8:	f800283a 	ret
  80e7dc:	0005883a 	mov	r2,zero
  80e7e0:	003fec06 	br	80e794 <__alt_mem_onchip_mem+0xff806794>
  80e7e4:	10800044 	addi	r2,r2,1
  80e7e8:	f800283a 	ret

0080e7ec <__lo0bits>:
  80e7ec:	20c00017 	ldw	r3,0(r4)
  80e7f0:	188001cc 	andi	r2,r3,7
  80e7f4:	10000826 	beq	r2,zero,80e818 <__lo0bits+0x2c>
  80e7f8:	1880004c 	andi	r2,r3,1
  80e7fc:	1000211e 	bne	r2,zero,80e884 <__lo0bits+0x98>
  80e800:	1880008c 	andi	r2,r3,2
  80e804:	1000211e 	bne	r2,zero,80e88c <__lo0bits+0xa0>
  80e808:	1806d0ba 	srli	r3,r3,2
  80e80c:	00800084 	movi	r2,2
  80e810:	20c00015 	stw	r3,0(r4)
  80e814:	f800283a 	ret
  80e818:	18bfffcc 	andi	r2,r3,65535
  80e81c:	10001326 	beq	r2,zero,80e86c <__lo0bits+0x80>
  80e820:	0005883a 	mov	r2,zero
  80e824:	19403fcc 	andi	r5,r3,255
  80e828:	2800021e 	bne	r5,zero,80e834 <__lo0bits+0x48>
  80e82c:	1806d23a 	srli	r3,r3,8
  80e830:	10800204 	addi	r2,r2,8
  80e834:	194003cc 	andi	r5,r3,15
  80e838:	2800021e 	bne	r5,zero,80e844 <__lo0bits+0x58>
  80e83c:	1806d13a 	srli	r3,r3,4
  80e840:	10800104 	addi	r2,r2,4
  80e844:	194000cc 	andi	r5,r3,3
  80e848:	2800021e 	bne	r5,zero,80e854 <__lo0bits+0x68>
  80e84c:	1806d0ba 	srli	r3,r3,2
  80e850:	10800084 	addi	r2,r2,2
  80e854:	1940004c 	andi	r5,r3,1
  80e858:	2800081e 	bne	r5,zero,80e87c <__lo0bits+0x90>
  80e85c:	1806d07a 	srli	r3,r3,1
  80e860:	1800051e 	bne	r3,zero,80e878 <__lo0bits+0x8c>
  80e864:	00800804 	movi	r2,32
  80e868:	f800283a 	ret
  80e86c:	1806d43a 	srli	r3,r3,16
  80e870:	00800404 	movi	r2,16
  80e874:	003feb06 	br	80e824 <__alt_mem_onchip_mem+0xff806824>
  80e878:	10800044 	addi	r2,r2,1
  80e87c:	20c00015 	stw	r3,0(r4)
  80e880:	f800283a 	ret
  80e884:	0005883a 	mov	r2,zero
  80e888:	f800283a 	ret
  80e88c:	1806d07a 	srli	r3,r3,1
  80e890:	00800044 	movi	r2,1
  80e894:	20c00015 	stw	r3,0(r4)
  80e898:	f800283a 	ret

0080e89c <__i2b>:
  80e89c:	defffd04 	addi	sp,sp,-12
  80e8a0:	dc000015 	stw	r16,0(sp)
  80e8a4:	04000044 	movi	r16,1
  80e8a8:	dc400115 	stw	r17,4(sp)
  80e8ac:	2823883a 	mov	r17,r5
  80e8b0:	800b883a 	mov	r5,r16
  80e8b4:	dfc00215 	stw	ra,8(sp)
  80e8b8:	080e4900 	call	80e490 <_Balloc>
  80e8bc:	14400515 	stw	r17,20(r2)
  80e8c0:	14000415 	stw	r16,16(r2)
  80e8c4:	dfc00217 	ldw	ra,8(sp)
  80e8c8:	dc400117 	ldw	r17,4(sp)
  80e8cc:	dc000017 	ldw	r16,0(sp)
  80e8d0:	dec00304 	addi	sp,sp,12
  80e8d4:	f800283a 	ret

0080e8d8 <__multiply>:
  80e8d8:	defffa04 	addi	sp,sp,-24
  80e8dc:	dcc00315 	stw	r19,12(sp)
  80e8e0:	dc800215 	stw	r18,8(sp)
  80e8e4:	34c00417 	ldw	r19,16(r6)
  80e8e8:	2c800417 	ldw	r18,16(r5)
  80e8ec:	dd000415 	stw	r20,16(sp)
  80e8f0:	dc400115 	stw	r17,4(sp)
  80e8f4:	dfc00515 	stw	ra,20(sp)
  80e8f8:	dc000015 	stw	r16,0(sp)
  80e8fc:	2829883a 	mov	r20,r5
  80e900:	3023883a 	mov	r17,r6
  80e904:	94c0050e 	bge	r18,r19,80e91c <__multiply+0x44>
  80e908:	9007883a 	mov	r3,r18
  80e90c:	3029883a 	mov	r20,r6
  80e910:	9825883a 	mov	r18,r19
  80e914:	2823883a 	mov	r17,r5
  80e918:	1827883a 	mov	r19,r3
  80e91c:	a0800217 	ldw	r2,8(r20)
  80e920:	94e1883a 	add	r16,r18,r19
  80e924:	a1400117 	ldw	r5,4(r20)
  80e928:	1400010e 	bge	r2,r16,80e930 <__multiply+0x58>
  80e92c:	29400044 	addi	r5,r5,1
  80e930:	080e4900 	call	80e490 <_Balloc>
  80e934:	8415883a 	add	r10,r16,r16
  80e938:	12c00504 	addi	r11,r2,20
  80e93c:	5295883a 	add	r10,r10,r10
  80e940:	5a95883a 	add	r10,r11,r10
  80e944:	5807883a 	mov	r3,r11
  80e948:	5a80032e 	bgeu	r11,r10,80e958 <__multiply+0x80>
  80e94c:	18000015 	stw	zero,0(r3)
  80e950:	18c00104 	addi	r3,r3,4
  80e954:	1abffd36 	bltu	r3,r10,80e94c <__alt_mem_onchip_mem+0xff80694c>
  80e958:	9ce7883a 	add	r19,r19,r19
  80e95c:	94a5883a 	add	r18,r18,r18
  80e960:	89800504 	addi	r6,r17,20
  80e964:	9ce7883a 	add	r19,r19,r19
  80e968:	a3400504 	addi	r13,r20,20
  80e96c:	94a5883a 	add	r18,r18,r18
  80e970:	34d9883a 	add	r12,r6,r19
  80e974:	6c93883a 	add	r9,r13,r18
  80e978:	3300422e 	bgeu	r6,r12,80ea84 <__multiply+0x1ac>
  80e97c:	37c00017 	ldw	ra,0(r6)
  80e980:	fbffffcc 	andi	r15,ra,65535
  80e984:	78001b26 	beq	r15,zero,80e9f4 <__multiply+0x11c>
  80e988:	5811883a 	mov	r8,r11
  80e98c:	681d883a 	mov	r14,r13
  80e990:	000f883a 	mov	r7,zero
  80e994:	71000017 	ldw	r4,0(r14)
  80e998:	40c00017 	ldw	r3,0(r8)
  80e99c:	73800104 	addi	r14,r14,4
  80e9a0:	217fffcc 	andi	r5,r4,65535
  80e9a4:	2bcb383a 	mul	r5,r5,r15
  80e9a8:	2008d43a 	srli	r4,r4,16
  80e9ac:	1c7fffcc 	andi	r17,r3,65535
  80e9b0:	2c4b883a 	add	r5,r5,r17
  80e9b4:	29cb883a 	add	r5,r5,r7
  80e9b8:	23c9383a 	mul	r4,r4,r15
  80e9bc:	1806d43a 	srli	r3,r3,16
  80e9c0:	280ed43a 	srli	r7,r5,16
  80e9c4:	297fffcc 	andi	r5,r5,65535
  80e9c8:	20c7883a 	add	r3,r4,r3
  80e9cc:	19c7883a 	add	r3,r3,r7
  80e9d0:	1808943a 	slli	r4,r3,16
  80e9d4:	4023883a 	mov	r17,r8
  80e9d8:	180ed43a 	srli	r7,r3,16
  80e9dc:	214ab03a 	or	r5,r4,r5
  80e9e0:	41400015 	stw	r5,0(r8)
  80e9e4:	42000104 	addi	r8,r8,4
  80e9e8:	727fea36 	bltu	r14,r9,80e994 <__alt_mem_onchip_mem+0xff806994>
  80e9ec:	89c00115 	stw	r7,4(r17)
  80e9f0:	37c00017 	ldw	ra,0(r6)
  80e9f4:	f83ed43a 	srli	ra,ra,16
  80e9f8:	f8001f26 	beq	ra,zero,80ea78 <__multiply+0x1a0>
  80e9fc:	58c00017 	ldw	r3,0(r11)
  80ea00:	681d883a 	mov	r14,r13
  80ea04:	581f883a 	mov	r15,r11
  80ea08:	1811883a 	mov	r8,r3
  80ea0c:	5825883a 	mov	r18,r11
  80ea10:	000f883a 	mov	r7,zero
  80ea14:	00000106 	br	80ea1c <__multiply+0x144>
  80ea18:	8825883a 	mov	r18,r17
  80ea1c:	7140000b 	ldhu	r5,0(r14)
  80ea20:	4010d43a 	srli	r8,r8,16
  80ea24:	193fffcc 	andi	r4,r3,65535
  80ea28:	2fcb383a 	mul	r5,r5,ra
  80ea2c:	7bc00104 	addi	r15,r15,4
  80ea30:	73800104 	addi	r14,r14,4
  80ea34:	2a0b883a 	add	r5,r5,r8
  80ea38:	29cb883a 	add	r5,r5,r7
  80ea3c:	2806943a 	slli	r3,r5,16
  80ea40:	94400104 	addi	r17,r18,4
  80ea44:	280ad43a 	srli	r5,r5,16
  80ea48:	1908b03a 	or	r4,r3,r4
  80ea4c:	793fff15 	stw	r4,-4(r15)
  80ea50:	70ffff17 	ldw	r3,-4(r14)
  80ea54:	8a000017 	ldw	r8,0(r17)
  80ea58:	1806d43a 	srli	r3,r3,16
  80ea5c:	413fffcc 	andi	r4,r8,65535
  80ea60:	1fc7383a 	mul	r3,r3,ra
  80ea64:	1907883a 	add	r3,r3,r4
  80ea68:	1947883a 	add	r3,r3,r5
  80ea6c:	180ed43a 	srli	r7,r3,16
  80ea70:	727fe936 	bltu	r14,r9,80ea18 <__alt_mem_onchip_mem+0xff806a18>
  80ea74:	90c00115 	stw	r3,4(r18)
  80ea78:	31800104 	addi	r6,r6,4
  80ea7c:	5ac00104 	addi	r11,r11,4
  80ea80:	333fbe36 	bltu	r6,r12,80e97c <__alt_mem_onchip_mem+0xff80697c>
  80ea84:	0400090e 	bge	zero,r16,80eaac <__multiply+0x1d4>
  80ea88:	50ffff17 	ldw	r3,-4(r10)
  80ea8c:	52bfff04 	addi	r10,r10,-4
  80ea90:	18000326 	beq	r3,zero,80eaa0 <__multiply+0x1c8>
  80ea94:	00000506 	br	80eaac <__multiply+0x1d4>
  80ea98:	50c00017 	ldw	r3,0(r10)
  80ea9c:	1800031e 	bne	r3,zero,80eaac <__multiply+0x1d4>
  80eaa0:	843fffc4 	addi	r16,r16,-1
  80eaa4:	52bfff04 	addi	r10,r10,-4
  80eaa8:	803ffb1e 	bne	r16,zero,80ea98 <__alt_mem_onchip_mem+0xff806a98>
  80eaac:	14000415 	stw	r16,16(r2)
  80eab0:	dfc00517 	ldw	ra,20(sp)
  80eab4:	dd000417 	ldw	r20,16(sp)
  80eab8:	dcc00317 	ldw	r19,12(sp)
  80eabc:	dc800217 	ldw	r18,8(sp)
  80eac0:	dc400117 	ldw	r17,4(sp)
  80eac4:	dc000017 	ldw	r16,0(sp)
  80eac8:	dec00604 	addi	sp,sp,24
  80eacc:	f800283a 	ret

0080ead0 <__pow5mult>:
  80ead0:	defffa04 	addi	sp,sp,-24
  80ead4:	dcc00315 	stw	r19,12(sp)
  80ead8:	dc000015 	stw	r16,0(sp)
  80eadc:	dfc00515 	stw	ra,20(sp)
  80eae0:	dd000415 	stw	r20,16(sp)
  80eae4:	dc800215 	stw	r18,8(sp)
  80eae8:	dc400115 	stw	r17,4(sp)
  80eaec:	308000cc 	andi	r2,r6,3
  80eaf0:	3021883a 	mov	r16,r6
  80eaf4:	2027883a 	mov	r19,r4
  80eaf8:	10002f1e 	bne	r2,zero,80ebb8 <__pow5mult+0xe8>
  80eafc:	2825883a 	mov	r18,r5
  80eb00:	8021d0ba 	srai	r16,r16,2
  80eb04:	80001a26 	beq	r16,zero,80eb70 <__pow5mult+0xa0>
  80eb08:	9c401217 	ldw	r17,72(r19)
  80eb0c:	8800061e 	bne	r17,zero,80eb28 <__pow5mult+0x58>
  80eb10:	00003406 	br	80ebe4 <__pow5mult+0x114>
  80eb14:	8021d07a 	srai	r16,r16,1
  80eb18:	80001526 	beq	r16,zero,80eb70 <__pow5mult+0xa0>
  80eb1c:	88800017 	ldw	r2,0(r17)
  80eb20:	10001c26 	beq	r2,zero,80eb94 <__pow5mult+0xc4>
  80eb24:	1023883a 	mov	r17,r2
  80eb28:	8080004c 	andi	r2,r16,1
  80eb2c:	103ff926 	beq	r2,zero,80eb14 <__alt_mem_onchip_mem+0xff806b14>
  80eb30:	880d883a 	mov	r6,r17
  80eb34:	900b883a 	mov	r5,r18
  80eb38:	9809883a 	mov	r4,r19
  80eb3c:	080e8d80 	call	80e8d8 <__multiply>
  80eb40:	90001b26 	beq	r18,zero,80ebb0 <__pow5mult+0xe0>
  80eb44:	91000117 	ldw	r4,4(r18)
  80eb48:	98c01317 	ldw	r3,76(r19)
  80eb4c:	8021d07a 	srai	r16,r16,1
  80eb50:	2109883a 	add	r4,r4,r4
  80eb54:	2109883a 	add	r4,r4,r4
  80eb58:	1907883a 	add	r3,r3,r4
  80eb5c:	19000017 	ldw	r4,0(r3)
  80eb60:	91000015 	stw	r4,0(r18)
  80eb64:	1c800015 	stw	r18,0(r3)
  80eb68:	1025883a 	mov	r18,r2
  80eb6c:	803feb1e 	bne	r16,zero,80eb1c <__alt_mem_onchip_mem+0xff806b1c>
  80eb70:	9005883a 	mov	r2,r18
  80eb74:	dfc00517 	ldw	ra,20(sp)
  80eb78:	dd000417 	ldw	r20,16(sp)
  80eb7c:	dcc00317 	ldw	r19,12(sp)
  80eb80:	dc800217 	ldw	r18,8(sp)
  80eb84:	dc400117 	ldw	r17,4(sp)
  80eb88:	dc000017 	ldw	r16,0(sp)
  80eb8c:	dec00604 	addi	sp,sp,24
  80eb90:	f800283a 	ret
  80eb94:	880d883a 	mov	r6,r17
  80eb98:	880b883a 	mov	r5,r17
  80eb9c:	9809883a 	mov	r4,r19
  80eba0:	080e8d80 	call	80e8d8 <__multiply>
  80eba4:	88800015 	stw	r2,0(r17)
  80eba8:	10000015 	stw	zero,0(r2)
  80ebac:	003fdd06 	br	80eb24 <__alt_mem_onchip_mem+0xff806b24>
  80ebb0:	1025883a 	mov	r18,r2
  80ebb4:	003fd706 	br	80eb14 <__alt_mem_onchip_mem+0xff806b14>
  80ebb8:	10bfffc4 	addi	r2,r2,-1
  80ebbc:	1085883a 	add	r2,r2,r2
  80ebc0:	00c020b4 	movhi	r3,130
  80ebc4:	18e0ee04 	addi	r3,r3,-31816
  80ebc8:	1085883a 	add	r2,r2,r2
  80ebcc:	1885883a 	add	r2,r3,r2
  80ebd0:	11800017 	ldw	r6,0(r2)
  80ebd4:	000f883a 	mov	r7,zero
  80ebd8:	080e5600 	call	80e560 <__multadd>
  80ebdc:	1025883a 	mov	r18,r2
  80ebe0:	003fc706 	br	80eb00 <__alt_mem_onchip_mem+0xff806b00>
  80ebe4:	05000044 	movi	r20,1
  80ebe8:	a00b883a 	mov	r5,r20
  80ebec:	9809883a 	mov	r4,r19
  80ebf0:	080e4900 	call	80e490 <_Balloc>
  80ebf4:	1023883a 	mov	r17,r2
  80ebf8:	00809c44 	movi	r2,625
  80ebfc:	88800515 	stw	r2,20(r17)
  80ec00:	8d000415 	stw	r20,16(r17)
  80ec04:	9c401215 	stw	r17,72(r19)
  80ec08:	88000015 	stw	zero,0(r17)
  80ec0c:	003fc606 	br	80eb28 <__alt_mem_onchip_mem+0xff806b28>

0080ec10 <__lshift>:
  80ec10:	defff904 	addi	sp,sp,-28
  80ec14:	dd400515 	stw	r21,20(sp)
  80ec18:	dcc00315 	stw	r19,12(sp)
  80ec1c:	302bd17a 	srai	r21,r6,5
  80ec20:	2cc00417 	ldw	r19,16(r5)
  80ec24:	28800217 	ldw	r2,8(r5)
  80ec28:	dd000415 	stw	r20,16(sp)
  80ec2c:	ace7883a 	add	r19,r21,r19
  80ec30:	dc800215 	stw	r18,8(sp)
  80ec34:	dc400115 	stw	r17,4(sp)
  80ec38:	dc000015 	stw	r16,0(sp)
  80ec3c:	dfc00615 	stw	ra,24(sp)
  80ec40:	9c000044 	addi	r16,r19,1
  80ec44:	2823883a 	mov	r17,r5
  80ec48:	3029883a 	mov	r20,r6
  80ec4c:	2025883a 	mov	r18,r4
  80ec50:	29400117 	ldw	r5,4(r5)
  80ec54:	1400030e 	bge	r2,r16,80ec64 <__lshift+0x54>
  80ec58:	1085883a 	add	r2,r2,r2
  80ec5c:	29400044 	addi	r5,r5,1
  80ec60:	143ffd16 	blt	r2,r16,80ec58 <__alt_mem_onchip_mem+0xff806c58>
  80ec64:	9009883a 	mov	r4,r18
  80ec68:	080e4900 	call	80e490 <_Balloc>
  80ec6c:	10c00504 	addi	r3,r2,20
  80ec70:	0540070e 	bge	zero,r21,80ec90 <__lshift+0x80>
  80ec74:	ad6b883a 	add	r21,r21,r21
  80ec78:	ad6b883a 	add	r21,r21,r21
  80ec7c:	1809883a 	mov	r4,r3
  80ec80:	1d47883a 	add	r3,r3,r21
  80ec84:	20000015 	stw	zero,0(r4)
  80ec88:	21000104 	addi	r4,r4,4
  80ec8c:	193ffd1e 	bne	r3,r4,80ec84 <__alt_mem_onchip_mem+0xff806c84>
  80ec90:	8a000417 	ldw	r8,16(r17)
  80ec94:	89000504 	addi	r4,r17,20
  80ec98:	a18007cc 	andi	r6,r20,31
  80ec9c:	4211883a 	add	r8,r8,r8
  80eca0:	4211883a 	add	r8,r8,r8
  80eca4:	2211883a 	add	r8,r4,r8
  80eca8:	30002326 	beq	r6,zero,80ed38 <__lshift+0x128>
  80ecac:	02400804 	movi	r9,32
  80ecb0:	4993c83a 	sub	r9,r9,r6
  80ecb4:	000b883a 	mov	r5,zero
  80ecb8:	21c00017 	ldw	r7,0(r4)
  80ecbc:	1815883a 	mov	r10,r3
  80ecc0:	18c00104 	addi	r3,r3,4
  80ecc4:	398e983a 	sll	r7,r7,r6
  80ecc8:	21000104 	addi	r4,r4,4
  80eccc:	394ab03a 	or	r5,r7,r5
  80ecd0:	197fff15 	stw	r5,-4(r3)
  80ecd4:	217fff17 	ldw	r5,-4(r4)
  80ecd8:	2a4ad83a 	srl	r5,r5,r9
  80ecdc:	223ff636 	bltu	r4,r8,80ecb8 <__alt_mem_onchip_mem+0xff806cb8>
  80ece0:	51400115 	stw	r5,4(r10)
  80ece4:	28001a1e 	bne	r5,zero,80ed50 <__lshift+0x140>
  80ece8:	843fffc4 	addi	r16,r16,-1
  80ecec:	14000415 	stw	r16,16(r2)
  80ecf0:	88000826 	beq	r17,zero,80ed14 <__lshift+0x104>
  80ecf4:	89000117 	ldw	r4,4(r17)
  80ecf8:	90c01317 	ldw	r3,76(r18)
  80ecfc:	2109883a 	add	r4,r4,r4
  80ed00:	2109883a 	add	r4,r4,r4
  80ed04:	1907883a 	add	r3,r3,r4
  80ed08:	19000017 	ldw	r4,0(r3)
  80ed0c:	89000015 	stw	r4,0(r17)
  80ed10:	1c400015 	stw	r17,0(r3)
  80ed14:	dfc00617 	ldw	ra,24(sp)
  80ed18:	dd400517 	ldw	r21,20(sp)
  80ed1c:	dd000417 	ldw	r20,16(sp)
  80ed20:	dcc00317 	ldw	r19,12(sp)
  80ed24:	dc800217 	ldw	r18,8(sp)
  80ed28:	dc400117 	ldw	r17,4(sp)
  80ed2c:	dc000017 	ldw	r16,0(sp)
  80ed30:	dec00704 	addi	sp,sp,28
  80ed34:	f800283a 	ret
  80ed38:	21400017 	ldw	r5,0(r4)
  80ed3c:	18c00104 	addi	r3,r3,4
  80ed40:	21000104 	addi	r4,r4,4
  80ed44:	197fff15 	stw	r5,-4(r3)
  80ed48:	223ffb36 	bltu	r4,r8,80ed38 <__alt_mem_onchip_mem+0xff806d38>
  80ed4c:	003fe606 	br	80ece8 <__alt_mem_onchip_mem+0xff806ce8>
  80ed50:	9c000084 	addi	r16,r19,2
  80ed54:	003fe406 	br	80ece8 <__alt_mem_onchip_mem+0xff806ce8>

0080ed58 <__mcmp>:
  80ed58:	20800417 	ldw	r2,16(r4)
  80ed5c:	28c00417 	ldw	r3,16(r5)
  80ed60:	10c5c83a 	sub	r2,r2,r3
  80ed64:	1000111e 	bne	r2,zero,80edac <__mcmp+0x54>
  80ed68:	18c7883a 	add	r3,r3,r3
  80ed6c:	18c7883a 	add	r3,r3,r3
  80ed70:	21000504 	addi	r4,r4,20
  80ed74:	29400504 	addi	r5,r5,20
  80ed78:	20c5883a 	add	r2,r4,r3
  80ed7c:	28cb883a 	add	r5,r5,r3
  80ed80:	00000106 	br	80ed88 <__mcmp+0x30>
  80ed84:	20800a2e 	bgeu	r4,r2,80edb0 <__mcmp+0x58>
  80ed88:	10bfff04 	addi	r2,r2,-4
  80ed8c:	297fff04 	addi	r5,r5,-4
  80ed90:	11800017 	ldw	r6,0(r2)
  80ed94:	28c00017 	ldw	r3,0(r5)
  80ed98:	30fffa26 	beq	r6,r3,80ed84 <__alt_mem_onchip_mem+0xff806d84>
  80ed9c:	30c00236 	bltu	r6,r3,80eda8 <__mcmp+0x50>
  80eda0:	00800044 	movi	r2,1
  80eda4:	f800283a 	ret
  80eda8:	00bfffc4 	movi	r2,-1
  80edac:	f800283a 	ret
  80edb0:	0005883a 	mov	r2,zero
  80edb4:	f800283a 	ret

0080edb8 <__mdiff>:
  80edb8:	28c00417 	ldw	r3,16(r5)
  80edbc:	30800417 	ldw	r2,16(r6)
  80edc0:	defffa04 	addi	sp,sp,-24
  80edc4:	dcc00315 	stw	r19,12(sp)
  80edc8:	dc800215 	stw	r18,8(sp)
  80edcc:	dfc00515 	stw	ra,20(sp)
  80edd0:	dd000415 	stw	r20,16(sp)
  80edd4:	dc400115 	stw	r17,4(sp)
  80edd8:	dc000015 	stw	r16,0(sp)
  80eddc:	1887c83a 	sub	r3,r3,r2
  80ede0:	2825883a 	mov	r18,r5
  80ede4:	3027883a 	mov	r19,r6
  80ede8:	1800141e 	bne	r3,zero,80ee3c <__mdiff+0x84>
  80edec:	1085883a 	add	r2,r2,r2
  80edf0:	1085883a 	add	r2,r2,r2
  80edf4:	2a000504 	addi	r8,r5,20
  80edf8:	34000504 	addi	r16,r6,20
  80edfc:	4087883a 	add	r3,r8,r2
  80ee00:	8085883a 	add	r2,r16,r2
  80ee04:	00000106 	br	80ee0c <__mdiff+0x54>
  80ee08:	40c0592e 	bgeu	r8,r3,80ef70 <__mdiff+0x1b8>
  80ee0c:	18ffff04 	addi	r3,r3,-4
  80ee10:	10bfff04 	addi	r2,r2,-4
  80ee14:	19c00017 	ldw	r7,0(r3)
  80ee18:	11400017 	ldw	r5,0(r2)
  80ee1c:	397ffa26 	beq	r7,r5,80ee08 <__alt_mem_onchip_mem+0xff806e08>
  80ee20:	3940592e 	bgeu	r7,r5,80ef88 <__mdiff+0x1d0>
  80ee24:	9005883a 	mov	r2,r18
  80ee28:	4023883a 	mov	r17,r8
  80ee2c:	9825883a 	mov	r18,r19
  80ee30:	05000044 	movi	r20,1
  80ee34:	1027883a 	mov	r19,r2
  80ee38:	00000406 	br	80ee4c <__mdiff+0x94>
  80ee3c:	18005616 	blt	r3,zero,80ef98 <__mdiff+0x1e0>
  80ee40:	34400504 	addi	r17,r6,20
  80ee44:	2c000504 	addi	r16,r5,20
  80ee48:	0029883a 	mov	r20,zero
  80ee4c:	91400117 	ldw	r5,4(r18)
  80ee50:	080e4900 	call	80e490 <_Balloc>
  80ee54:	92400417 	ldw	r9,16(r18)
  80ee58:	9b000417 	ldw	r12,16(r19)
  80ee5c:	12c00504 	addi	r11,r2,20
  80ee60:	4a51883a 	add	r8,r9,r9
  80ee64:	6319883a 	add	r12,r12,r12
  80ee68:	4211883a 	add	r8,r8,r8
  80ee6c:	6319883a 	add	r12,r12,r12
  80ee70:	15000315 	stw	r20,12(r2)
  80ee74:	8211883a 	add	r8,r16,r8
  80ee78:	8b19883a 	add	r12,r17,r12
  80ee7c:	0007883a 	mov	r3,zero
  80ee80:	81400017 	ldw	r5,0(r16)
  80ee84:	89c00017 	ldw	r7,0(r17)
  80ee88:	59800104 	addi	r6,r11,4
  80ee8c:	293fffcc 	andi	r4,r5,65535
  80ee90:	20c7883a 	add	r3,r4,r3
  80ee94:	393fffcc 	andi	r4,r7,65535
  80ee98:	1909c83a 	sub	r4,r3,r4
  80ee9c:	280ad43a 	srli	r5,r5,16
  80eea0:	380ed43a 	srli	r7,r7,16
  80eea4:	2007d43a 	srai	r3,r4,16
  80eea8:	213fffcc 	andi	r4,r4,65535
  80eeac:	29cbc83a 	sub	r5,r5,r7
  80eeb0:	28c7883a 	add	r3,r5,r3
  80eeb4:	180a943a 	slli	r5,r3,16
  80eeb8:	8c400104 	addi	r17,r17,4
  80eebc:	84000104 	addi	r16,r16,4
  80eec0:	2908b03a 	or	r4,r5,r4
  80eec4:	59000015 	stw	r4,0(r11)
  80eec8:	1807d43a 	srai	r3,r3,16
  80eecc:	3015883a 	mov	r10,r6
  80eed0:	3017883a 	mov	r11,r6
  80eed4:	8b3fea36 	bltu	r17,r12,80ee80 <__alt_mem_onchip_mem+0xff806e80>
  80eed8:	8200162e 	bgeu	r16,r8,80ef34 <__mdiff+0x17c>
  80eedc:	8017883a 	mov	r11,r16
  80eee0:	59400017 	ldw	r5,0(r11)
  80eee4:	31800104 	addi	r6,r6,4
  80eee8:	5ac00104 	addi	r11,r11,4
  80eeec:	293fffcc 	andi	r4,r5,65535
  80eef0:	20c7883a 	add	r3,r4,r3
  80eef4:	280ed43a 	srli	r7,r5,16
  80eef8:	180bd43a 	srai	r5,r3,16
  80eefc:	193fffcc 	andi	r4,r3,65535
  80ef00:	3947883a 	add	r3,r7,r5
  80ef04:	180a943a 	slli	r5,r3,16
  80ef08:	1807d43a 	srai	r3,r3,16
  80ef0c:	2908b03a 	or	r4,r5,r4
  80ef10:	313fff15 	stw	r4,-4(r6)
  80ef14:	5a3ff236 	bltu	r11,r8,80eee0 <__alt_mem_onchip_mem+0xff806ee0>
  80ef18:	0406303a 	nor	r3,zero,r16
  80ef1c:	1a07883a 	add	r3,r3,r8
  80ef20:	1806d0ba 	srli	r3,r3,2
  80ef24:	18c00044 	addi	r3,r3,1
  80ef28:	18c7883a 	add	r3,r3,r3
  80ef2c:	18c7883a 	add	r3,r3,r3
  80ef30:	50d5883a 	add	r10,r10,r3
  80ef34:	50ffff04 	addi	r3,r10,-4
  80ef38:	2000041e 	bne	r4,zero,80ef4c <__mdiff+0x194>
  80ef3c:	18ffff04 	addi	r3,r3,-4
  80ef40:	19000017 	ldw	r4,0(r3)
  80ef44:	4a7fffc4 	addi	r9,r9,-1
  80ef48:	203ffc26 	beq	r4,zero,80ef3c <__alt_mem_onchip_mem+0xff806f3c>
  80ef4c:	12400415 	stw	r9,16(r2)
  80ef50:	dfc00517 	ldw	ra,20(sp)
  80ef54:	dd000417 	ldw	r20,16(sp)
  80ef58:	dcc00317 	ldw	r19,12(sp)
  80ef5c:	dc800217 	ldw	r18,8(sp)
  80ef60:	dc400117 	ldw	r17,4(sp)
  80ef64:	dc000017 	ldw	r16,0(sp)
  80ef68:	dec00604 	addi	sp,sp,24
  80ef6c:	f800283a 	ret
  80ef70:	000b883a 	mov	r5,zero
  80ef74:	080e4900 	call	80e490 <_Balloc>
  80ef78:	00c00044 	movi	r3,1
  80ef7c:	10c00415 	stw	r3,16(r2)
  80ef80:	10000515 	stw	zero,20(r2)
  80ef84:	003ff206 	br	80ef50 <__alt_mem_onchip_mem+0xff806f50>
  80ef88:	8023883a 	mov	r17,r16
  80ef8c:	0029883a 	mov	r20,zero
  80ef90:	4021883a 	mov	r16,r8
  80ef94:	003fad06 	br	80ee4c <__alt_mem_onchip_mem+0xff806e4c>
  80ef98:	9005883a 	mov	r2,r18
  80ef9c:	94400504 	addi	r17,r18,20
  80efa0:	9c000504 	addi	r16,r19,20
  80efa4:	9825883a 	mov	r18,r19
  80efa8:	05000044 	movi	r20,1
  80efac:	1027883a 	mov	r19,r2
  80efb0:	003fa606 	br	80ee4c <__alt_mem_onchip_mem+0xff806e4c>

0080efb4 <__ulp>:
  80efb4:	295ffc2c 	andhi	r5,r5,32752
  80efb8:	00bf3034 	movhi	r2,64704
  80efbc:	2887883a 	add	r3,r5,r2
  80efc0:	00c0020e 	bge	zero,r3,80efcc <__ulp+0x18>
  80efc4:	0005883a 	mov	r2,zero
  80efc8:	f800283a 	ret
  80efcc:	00c7c83a 	sub	r3,zero,r3
  80efd0:	1807d53a 	srai	r3,r3,20
  80efd4:	008004c4 	movi	r2,19
  80efd8:	10c00b0e 	bge	r2,r3,80f008 <__ulp+0x54>
  80efdc:	18bffb04 	addi	r2,r3,-20
  80efe0:	01000784 	movi	r4,30
  80efe4:	0007883a 	mov	r3,zero
  80efe8:	20800516 	blt	r4,r2,80f000 <__ulp+0x4c>
  80efec:	010007c4 	movi	r4,31
  80eff0:	2089c83a 	sub	r4,r4,r2
  80eff4:	00800044 	movi	r2,1
  80eff8:	1104983a 	sll	r2,r2,r4
  80effc:	f800283a 	ret
  80f000:	00800044 	movi	r2,1
  80f004:	f800283a 	ret
  80f008:	01400234 	movhi	r5,8
  80f00c:	28c7d83a 	sra	r3,r5,r3
  80f010:	0005883a 	mov	r2,zero
  80f014:	f800283a 	ret

0080f018 <__b2d>:
  80f018:	defffa04 	addi	sp,sp,-24
  80f01c:	dc000015 	stw	r16,0(sp)
  80f020:	24000417 	ldw	r16,16(r4)
  80f024:	dc400115 	stw	r17,4(sp)
  80f028:	24400504 	addi	r17,r4,20
  80f02c:	8421883a 	add	r16,r16,r16
  80f030:	8421883a 	add	r16,r16,r16
  80f034:	8c21883a 	add	r16,r17,r16
  80f038:	dc800215 	stw	r18,8(sp)
  80f03c:	84bfff17 	ldw	r18,-4(r16)
  80f040:	dd000415 	stw	r20,16(sp)
  80f044:	dcc00315 	stw	r19,12(sp)
  80f048:	9009883a 	mov	r4,r18
  80f04c:	2829883a 	mov	r20,r5
  80f050:	dfc00515 	stw	ra,20(sp)
  80f054:	080e7840 	call	80e784 <__hi0bits>
  80f058:	00c00804 	movi	r3,32
  80f05c:	1889c83a 	sub	r4,r3,r2
  80f060:	a1000015 	stw	r4,0(r20)
  80f064:	01000284 	movi	r4,10
  80f068:	84ffff04 	addi	r19,r16,-4
  80f06c:	20801216 	blt	r4,r2,80f0b8 <__b2d+0xa0>
  80f070:	018002c4 	movi	r6,11
  80f074:	308dc83a 	sub	r6,r6,r2
  80f078:	9186d83a 	srl	r3,r18,r6
  80f07c:	18cffc34 	orhi	r3,r3,16368
  80f080:	8cc0212e 	bgeu	r17,r19,80f108 <__b2d+0xf0>
  80f084:	813ffe17 	ldw	r4,-8(r16)
  80f088:	218cd83a 	srl	r6,r4,r6
  80f08c:	10800544 	addi	r2,r2,21
  80f090:	9084983a 	sll	r2,r18,r2
  80f094:	1184b03a 	or	r2,r2,r6
  80f098:	dfc00517 	ldw	ra,20(sp)
  80f09c:	dd000417 	ldw	r20,16(sp)
  80f0a0:	dcc00317 	ldw	r19,12(sp)
  80f0a4:	dc800217 	ldw	r18,8(sp)
  80f0a8:	dc400117 	ldw	r17,4(sp)
  80f0ac:	dc000017 	ldw	r16,0(sp)
  80f0b0:	dec00604 	addi	sp,sp,24
  80f0b4:	f800283a 	ret
  80f0b8:	8cc00f2e 	bgeu	r17,r19,80f0f8 <__b2d+0xe0>
  80f0bc:	117ffd44 	addi	r5,r2,-11
  80f0c0:	80bffe17 	ldw	r2,-8(r16)
  80f0c4:	28000e26 	beq	r5,zero,80f100 <__b2d+0xe8>
  80f0c8:	1949c83a 	sub	r4,r3,r5
  80f0cc:	9164983a 	sll	r18,r18,r5
  80f0d0:	1106d83a 	srl	r3,r2,r4
  80f0d4:	81bffe04 	addi	r6,r16,-8
  80f0d8:	948ffc34 	orhi	r18,r18,16368
  80f0dc:	90c6b03a 	or	r3,r18,r3
  80f0e0:	89800e2e 	bgeu	r17,r6,80f11c <__b2d+0x104>
  80f0e4:	81bffd17 	ldw	r6,-12(r16)
  80f0e8:	1144983a 	sll	r2,r2,r5
  80f0ec:	310ad83a 	srl	r5,r6,r4
  80f0f0:	2884b03a 	or	r2,r5,r2
  80f0f4:	003fe806 	br	80f098 <__alt_mem_onchip_mem+0xff807098>
  80f0f8:	10bffd44 	addi	r2,r2,-11
  80f0fc:	1000041e 	bne	r2,zero,80f110 <__b2d+0xf8>
  80f100:	90cffc34 	orhi	r3,r18,16368
  80f104:	003fe406 	br	80f098 <__alt_mem_onchip_mem+0xff807098>
  80f108:	000d883a 	mov	r6,zero
  80f10c:	003fdf06 	br	80f08c <__alt_mem_onchip_mem+0xff80708c>
  80f110:	90a4983a 	sll	r18,r18,r2
  80f114:	0005883a 	mov	r2,zero
  80f118:	003ff906 	br	80f100 <__alt_mem_onchip_mem+0xff807100>
  80f11c:	1144983a 	sll	r2,r2,r5
  80f120:	003fdd06 	br	80f098 <__alt_mem_onchip_mem+0xff807098>

0080f124 <__d2b>:
  80f124:	defff804 	addi	sp,sp,-32
  80f128:	dc000215 	stw	r16,8(sp)
  80f12c:	3021883a 	mov	r16,r6
  80f130:	dc400315 	stw	r17,12(sp)
  80f134:	8022907a 	slli	r17,r16,1
  80f138:	dd000615 	stw	r20,24(sp)
  80f13c:	2829883a 	mov	r20,r5
  80f140:	01400044 	movi	r5,1
  80f144:	dcc00515 	stw	r19,20(sp)
  80f148:	dc800415 	stw	r18,16(sp)
  80f14c:	dfc00715 	stw	ra,28(sp)
  80f150:	3825883a 	mov	r18,r7
  80f154:	8822d57a 	srli	r17,r17,21
  80f158:	080e4900 	call	80e490 <_Balloc>
  80f15c:	1027883a 	mov	r19,r2
  80f160:	00800434 	movhi	r2,16
  80f164:	10bfffc4 	addi	r2,r2,-1
  80f168:	808c703a 	and	r6,r16,r2
  80f16c:	88000126 	beq	r17,zero,80f174 <__d2b+0x50>
  80f170:	31800434 	orhi	r6,r6,16
  80f174:	d9800015 	stw	r6,0(sp)
  80f178:	a0002426 	beq	r20,zero,80f20c <__d2b+0xe8>
  80f17c:	d9000104 	addi	r4,sp,4
  80f180:	dd000115 	stw	r20,4(sp)
  80f184:	080e7ec0 	call	80e7ec <__lo0bits>
  80f188:	d8c00017 	ldw	r3,0(sp)
  80f18c:	10002f1e 	bne	r2,zero,80f24c <__d2b+0x128>
  80f190:	d9000117 	ldw	r4,4(sp)
  80f194:	99000515 	stw	r4,20(r19)
  80f198:	1821003a 	cmpeq	r16,r3,zero
  80f19c:	01000084 	movi	r4,2
  80f1a0:	2421c83a 	sub	r16,r4,r16
  80f1a4:	98c00615 	stw	r3,24(r19)
  80f1a8:	9c000415 	stw	r16,16(r19)
  80f1ac:	88001f1e 	bne	r17,zero,80f22c <__d2b+0x108>
  80f1b0:	10bef384 	addi	r2,r2,-1074
  80f1b4:	90800015 	stw	r2,0(r18)
  80f1b8:	00900034 	movhi	r2,16384
  80f1bc:	10bfffc4 	addi	r2,r2,-1
  80f1c0:	8085883a 	add	r2,r16,r2
  80f1c4:	1085883a 	add	r2,r2,r2
  80f1c8:	1085883a 	add	r2,r2,r2
  80f1cc:	9885883a 	add	r2,r19,r2
  80f1d0:	11000517 	ldw	r4,20(r2)
  80f1d4:	8020917a 	slli	r16,r16,5
  80f1d8:	080e7840 	call	80e784 <__hi0bits>
  80f1dc:	d8c00817 	ldw	r3,32(sp)
  80f1e0:	8085c83a 	sub	r2,r16,r2
  80f1e4:	18800015 	stw	r2,0(r3)
  80f1e8:	9805883a 	mov	r2,r19
  80f1ec:	dfc00717 	ldw	ra,28(sp)
  80f1f0:	dd000617 	ldw	r20,24(sp)
  80f1f4:	dcc00517 	ldw	r19,20(sp)
  80f1f8:	dc800417 	ldw	r18,16(sp)
  80f1fc:	dc400317 	ldw	r17,12(sp)
  80f200:	dc000217 	ldw	r16,8(sp)
  80f204:	dec00804 	addi	sp,sp,32
  80f208:	f800283a 	ret
  80f20c:	d809883a 	mov	r4,sp
  80f210:	080e7ec0 	call	80e7ec <__lo0bits>
  80f214:	d8c00017 	ldw	r3,0(sp)
  80f218:	04000044 	movi	r16,1
  80f21c:	9c000415 	stw	r16,16(r19)
  80f220:	98c00515 	stw	r3,20(r19)
  80f224:	10800804 	addi	r2,r2,32
  80f228:	883fe126 	beq	r17,zero,80f1b0 <__alt_mem_onchip_mem+0xff8071b0>
  80f22c:	00c00d44 	movi	r3,53
  80f230:	8c7ef344 	addi	r17,r17,-1075
  80f234:	88a3883a 	add	r17,r17,r2
  80f238:	1885c83a 	sub	r2,r3,r2
  80f23c:	d8c00817 	ldw	r3,32(sp)
  80f240:	94400015 	stw	r17,0(r18)
  80f244:	18800015 	stw	r2,0(r3)
  80f248:	003fe706 	br	80f1e8 <__alt_mem_onchip_mem+0xff8071e8>
  80f24c:	01000804 	movi	r4,32
  80f250:	2089c83a 	sub	r4,r4,r2
  80f254:	1908983a 	sll	r4,r3,r4
  80f258:	d9400117 	ldw	r5,4(sp)
  80f25c:	1886d83a 	srl	r3,r3,r2
  80f260:	2148b03a 	or	r4,r4,r5
  80f264:	99000515 	stw	r4,20(r19)
  80f268:	d8c00015 	stw	r3,0(sp)
  80f26c:	003fca06 	br	80f198 <__alt_mem_onchip_mem+0xff807198>

0080f270 <__ratio>:
  80f270:	defff904 	addi	sp,sp,-28
  80f274:	dc400315 	stw	r17,12(sp)
  80f278:	2823883a 	mov	r17,r5
  80f27c:	d9400104 	addi	r5,sp,4
  80f280:	dfc00615 	stw	ra,24(sp)
  80f284:	dcc00515 	stw	r19,20(sp)
  80f288:	dc800415 	stw	r18,16(sp)
  80f28c:	2027883a 	mov	r19,r4
  80f290:	dc000215 	stw	r16,8(sp)
  80f294:	080f0180 	call	80f018 <__b2d>
  80f298:	d80b883a 	mov	r5,sp
  80f29c:	8809883a 	mov	r4,r17
  80f2a0:	1025883a 	mov	r18,r2
  80f2a4:	1821883a 	mov	r16,r3
  80f2a8:	080f0180 	call	80f018 <__b2d>
  80f2ac:	8a000417 	ldw	r8,16(r17)
  80f2b0:	99000417 	ldw	r4,16(r19)
  80f2b4:	d9400117 	ldw	r5,4(sp)
  80f2b8:	2209c83a 	sub	r4,r4,r8
  80f2bc:	2010917a 	slli	r8,r4,5
  80f2c0:	d9000017 	ldw	r4,0(sp)
  80f2c4:	2909c83a 	sub	r4,r5,r4
  80f2c8:	4109883a 	add	r4,r8,r4
  80f2cc:	01000e0e 	bge	zero,r4,80f308 <__ratio+0x98>
  80f2d0:	2008953a 	slli	r4,r4,20
  80f2d4:	2421883a 	add	r16,r4,r16
  80f2d8:	100d883a 	mov	r6,r2
  80f2dc:	180f883a 	mov	r7,r3
  80f2e0:	9009883a 	mov	r4,r18
  80f2e4:	800b883a 	mov	r5,r16
  80f2e8:	0812f600 	call	812f60 <__divdf3>
  80f2ec:	dfc00617 	ldw	ra,24(sp)
  80f2f0:	dcc00517 	ldw	r19,20(sp)
  80f2f4:	dc800417 	ldw	r18,16(sp)
  80f2f8:	dc400317 	ldw	r17,12(sp)
  80f2fc:	dc000217 	ldw	r16,8(sp)
  80f300:	dec00704 	addi	sp,sp,28
  80f304:	f800283a 	ret
  80f308:	2008953a 	slli	r4,r4,20
  80f30c:	1907c83a 	sub	r3,r3,r4
  80f310:	003ff106 	br	80f2d8 <__alt_mem_onchip_mem+0xff8072d8>

0080f314 <_mprec_log10>:
  80f314:	defffe04 	addi	sp,sp,-8
  80f318:	dc000015 	stw	r16,0(sp)
  80f31c:	dfc00115 	stw	ra,4(sp)
  80f320:	008005c4 	movi	r2,23
  80f324:	2021883a 	mov	r16,r4
  80f328:	11000d0e 	bge	r2,r4,80f360 <_mprec_log10+0x4c>
  80f32c:	0005883a 	mov	r2,zero
  80f330:	00cffc34 	movhi	r3,16368
  80f334:	843fffc4 	addi	r16,r16,-1
  80f338:	000d883a 	mov	r6,zero
  80f33c:	01d00934 	movhi	r7,16420
  80f340:	1009883a 	mov	r4,r2
  80f344:	180b883a 	mov	r5,r3
  80f348:	08138d00 	call	8138d0 <__muldf3>
  80f34c:	803ff91e 	bne	r16,zero,80f334 <__alt_mem_onchip_mem+0xff807334>
  80f350:	dfc00117 	ldw	ra,4(sp)
  80f354:	dc000017 	ldw	r16,0(sp)
  80f358:	dec00204 	addi	sp,sp,8
  80f35c:	f800283a 	ret
  80f360:	202090fa 	slli	r16,r4,3
  80f364:	008020b4 	movhi	r2,130
  80f368:	10a10504 	addi	r2,r2,-31724
  80f36c:	1421883a 	add	r16,r2,r16
  80f370:	80800017 	ldw	r2,0(r16)
  80f374:	80c00117 	ldw	r3,4(r16)
  80f378:	dfc00117 	ldw	ra,4(sp)
  80f37c:	dc000017 	ldw	r16,0(sp)
  80f380:	dec00204 	addi	sp,sp,8
  80f384:	f800283a 	ret

0080f388 <__copybits>:
  80f388:	297fffc4 	addi	r5,r5,-1
  80f38c:	280fd17a 	srai	r7,r5,5
  80f390:	30c00417 	ldw	r3,16(r6)
  80f394:	30800504 	addi	r2,r6,20
  80f398:	39c00044 	addi	r7,r7,1
  80f39c:	18c7883a 	add	r3,r3,r3
  80f3a0:	39cf883a 	add	r7,r7,r7
  80f3a4:	18c7883a 	add	r3,r3,r3
  80f3a8:	39cf883a 	add	r7,r7,r7
  80f3ac:	10c7883a 	add	r3,r2,r3
  80f3b0:	21cf883a 	add	r7,r4,r7
  80f3b4:	10c00d2e 	bgeu	r2,r3,80f3ec <__copybits+0x64>
  80f3b8:	200b883a 	mov	r5,r4
  80f3bc:	12000017 	ldw	r8,0(r2)
  80f3c0:	29400104 	addi	r5,r5,4
  80f3c4:	10800104 	addi	r2,r2,4
  80f3c8:	2a3fff15 	stw	r8,-4(r5)
  80f3cc:	10fffb36 	bltu	r2,r3,80f3bc <__alt_mem_onchip_mem+0xff8073bc>
  80f3d0:	1985c83a 	sub	r2,r3,r6
  80f3d4:	10bffac4 	addi	r2,r2,-21
  80f3d8:	1004d0ba 	srli	r2,r2,2
  80f3dc:	10800044 	addi	r2,r2,1
  80f3e0:	1085883a 	add	r2,r2,r2
  80f3e4:	1085883a 	add	r2,r2,r2
  80f3e8:	2089883a 	add	r4,r4,r2
  80f3ec:	21c0032e 	bgeu	r4,r7,80f3fc <__copybits+0x74>
  80f3f0:	20000015 	stw	zero,0(r4)
  80f3f4:	21000104 	addi	r4,r4,4
  80f3f8:	21fffd36 	bltu	r4,r7,80f3f0 <__alt_mem_onchip_mem+0xff8073f0>
  80f3fc:	f800283a 	ret

0080f400 <__any_on>:
  80f400:	20c00417 	ldw	r3,16(r4)
  80f404:	2805d17a 	srai	r2,r5,5
  80f408:	21000504 	addi	r4,r4,20
  80f40c:	18800d0e 	bge	r3,r2,80f444 <__any_on+0x44>
  80f410:	18c7883a 	add	r3,r3,r3
  80f414:	18c7883a 	add	r3,r3,r3
  80f418:	20c7883a 	add	r3,r4,r3
  80f41c:	20c0192e 	bgeu	r4,r3,80f484 <__any_on+0x84>
  80f420:	18bfff17 	ldw	r2,-4(r3)
  80f424:	18ffff04 	addi	r3,r3,-4
  80f428:	1000041e 	bne	r2,zero,80f43c <__any_on+0x3c>
  80f42c:	20c0142e 	bgeu	r4,r3,80f480 <__any_on+0x80>
  80f430:	18ffff04 	addi	r3,r3,-4
  80f434:	19400017 	ldw	r5,0(r3)
  80f438:	283ffc26 	beq	r5,zero,80f42c <__alt_mem_onchip_mem+0xff80742c>
  80f43c:	00800044 	movi	r2,1
  80f440:	f800283a 	ret
  80f444:	10c00a0e 	bge	r2,r3,80f470 <__any_on+0x70>
  80f448:	1085883a 	add	r2,r2,r2
  80f44c:	1085883a 	add	r2,r2,r2
  80f450:	294007cc 	andi	r5,r5,31
  80f454:	2087883a 	add	r3,r4,r2
  80f458:	283ff026 	beq	r5,zero,80f41c <__alt_mem_onchip_mem+0xff80741c>
  80f45c:	19800017 	ldw	r6,0(r3)
  80f460:	3144d83a 	srl	r2,r6,r5
  80f464:	114a983a 	sll	r5,r2,r5
  80f468:	317ff41e 	bne	r6,r5,80f43c <__alt_mem_onchip_mem+0xff80743c>
  80f46c:	003feb06 	br	80f41c <__alt_mem_onchip_mem+0xff80741c>
  80f470:	1085883a 	add	r2,r2,r2
  80f474:	1085883a 	add	r2,r2,r2
  80f478:	2087883a 	add	r3,r4,r2
  80f47c:	003fe706 	br	80f41c <__alt_mem_onchip_mem+0xff80741c>
  80f480:	f800283a 	ret
  80f484:	0005883a 	mov	r2,zero
  80f488:	f800283a 	ret

0080f48c <__fpclassifyd>:
  80f48c:	00a00034 	movhi	r2,32768
  80f490:	10bfffc4 	addi	r2,r2,-1
  80f494:	2884703a 	and	r2,r5,r2
  80f498:	10000726 	beq	r2,zero,80f4b8 <__fpclassifyd+0x2c>
  80f49c:	00fffc34 	movhi	r3,65520
  80f4a0:	019ff834 	movhi	r6,32736
  80f4a4:	28c7883a 	add	r3,r5,r3
  80f4a8:	31bfffc4 	addi	r6,r6,-1
  80f4ac:	30c00536 	bltu	r6,r3,80f4c4 <__fpclassifyd+0x38>
  80f4b0:	00800104 	movi	r2,4
  80f4b4:	f800283a 	ret
  80f4b8:	2000021e 	bne	r4,zero,80f4c4 <__fpclassifyd+0x38>
  80f4bc:	00800084 	movi	r2,2
  80f4c0:	f800283a 	ret
  80f4c4:	00dffc34 	movhi	r3,32752
  80f4c8:	019ff834 	movhi	r6,32736
  80f4cc:	28cb883a 	add	r5,r5,r3
  80f4d0:	31bfffc4 	addi	r6,r6,-1
  80f4d4:	317ff62e 	bgeu	r6,r5,80f4b0 <__alt_mem_onchip_mem+0xff8074b0>
  80f4d8:	01400434 	movhi	r5,16
  80f4dc:	297fffc4 	addi	r5,r5,-1
  80f4e0:	28800236 	bltu	r5,r2,80f4ec <__fpclassifyd+0x60>
  80f4e4:	008000c4 	movi	r2,3
  80f4e8:	f800283a 	ret
  80f4ec:	10c00226 	beq	r2,r3,80f4f8 <__fpclassifyd+0x6c>
  80f4f0:	0005883a 	mov	r2,zero
  80f4f4:	f800283a 	ret
  80f4f8:	2005003a 	cmpeq	r2,r4,zero
  80f4fc:	f800283a 	ret

0080f500 <_sbrk_r>:
  80f500:	defffd04 	addi	sp,sp,-12
  80f504:	dc000015 	stw	r16,0(sp)
  80f508:	040020b4 	movhi	r16,130
  80f50c:	dc400115 	stw	r17,4(sp)
  80f510:	84306604 	addi	r16,r16,-15976
  80f514:	2023883a 	mov	r17,r4
  80f518:	2809883a 	mov	r4,r5
  80f51c:	dfc00215 	stw	ra,8(sp)
  80f520:	80000015 	stw	zero,0(r16)
  80f524:	081499c0 	call	81499c <sbrk>
  80f528:	00ffffc4 	movi	r3,-1
  80f52c:	10c00526 	beq	r2,r3,80f544 <_sbrk_r+0x44>
  80f530:	dfc00217 	ldw	ra,8(sp)
  80f534:	dc400117 	ldw	r17,4(sp)
  80f538:	dc000017 	ldw	r16,0(sp)
  80f53c:	dec00304 	addi	sp,sp,12
  80f540:	f800283a 	ret
  80f544:	80c00017 	ldw	r3,0(r16)
  80f548:	183ff926 	beq	r3,zero,80f530 <__alt_mem_onchip_mem+0xff807530>
  80f54c:	88c00015 	stw	r3,0(r17)
  80f550:	003ff706 	br	80f530 <__alt_mem_onchip_mem+0xff807530>

0080f554 <__sread>:
  80f554:	defffe04 	addi	sp,sp,-8
  80f558:	dc000015 	stw	r16,0(sp)
  80f55c:	2821883a 	mov	r16,r5
  80f560:	2940038f 	ldh	r5,14(r5)
  80f564:	dfc00115 	stw	ra,4(sp)
  80f568:	08119f80 	call	8119f8 <_read_r>
  80f56c:	10000716 	blt	r2,zero,80f58c <__sread+0x38>
  80f570:	80c01417 	ldw	r3,80(r16)
  80f574:	1887883a 	add	r3,r3,r2
  80f578:	80c01415 	stw	r3,80(r16)
  80f57c:	dfc00117 	ldw	ra,4(sp)
  80f580:	dc000017 	ldw	r16,0(sp)
  80f584:	dec00204 	addi	sp,sp,8
  80f588:	f800283a 	ret
  80f58c:	80c0030b 	ldhu	r3,12(r16)
  80f590:	18fbffcc 	andi	r3,r3,61439
  80f594:	80c0030d 	sth	r3,12(r16)
  80f598:	dfc00117 	ldw	ra,4(sp)
  80f59c:	dc000017 	ldw	r16,0(sp)
  80f5a0:	dec00204 	addi	sp,sp,8
  80f5a4:	f800283a 	ret

0080f5a8 <__seofread>:
  80f5a8:	0005883a 	mov	r2,zero
  80f5ac:	f800283a 	ret

0080f5b0 <__swrite>:
  80f5b0:	2880030b 	ldhu	r2,12(r5)
  80f5b4:	defffb04 	addi	sp,sp,-20
  80f5b8:	dcc00315 	stw	r19,12(sp)
  80f5bc:	dc800215 	stw	r18,8(sp)
  80f5c0:	dc400115 	stw	r17,4(sp)
  80f5c4:	dc000015 	stw	r16,0(sp)
  80f5c8:	dfc00415 	stw	ra,16(sp)
  80f5cc:	10c0400c 	andi	r3,r2,256
  80f5d0:	2821883a 	mov	r16,r5
  80f5d4:	2023883a 	mov	r17,r4
  80f5d8:	3025883a 	mov	r18,r6
  80f5dc:	3827883a 	mov	r19,r7
  80f5e0:	18000526 	beq	r3,zero,80f5f8 <__swrite+0x48>
  80f5e4:	2940038f 	ldh	r5,14(r5)
  80f5e8:	01c00084 	movi	r7,2
  80f5ec:	000d883a 	mov	r6,zero
  80f5f0:	081183c0 	call	81183c <_lseek_r>
  80f5f4:	8080030b 	ldhu	r2,12(r16)
  80f5f8:	8140038f 	ldh	r5,14(r16)
  80f5fc:	10bbffcc 	andi	r2,r2,61439
  80f600:	980f883a 	mov	r7,r19
  80f604:	900d883a 	mov	r6,r18
  80f608:	8809883a 	mov	r4,r17
  80f60c:	8080030d 	sth	r2,12(r16)
  80f610:	dfc00417 	ldw	ra,16(sp)
  80f614:	dcc00317 	ldw	r19,12(sp)
  80f618:	dc800217 	ldw	r18,8(sp)
  80f61c:	dc400117 	ldw	r17,4(sp)
  80f620:	dc000017 	ldw	r16,0(sp)
  80f624:	dec00504 	addi	sp,sp,20
  80f628:	0810e4c1 	jmpi	810e4c <_write_r>

0080f62c <__sseek>:
  80f62c:	defffe04 	addi	sp,sp,-8
  80f630:	dc000015 	stw	r16,0(sp)
  80f634:	2821883a 	mov	r16,r5
  80f638:	2940038f 	ldh	r5,14(r5)
  80f63c:	dfc00115 	stw	ra,4(sp)
  80f640:	081183c0 	call	81183c <_lseek_r>
  80f644:	00ffffc4 	movi	r3,-1
  80f648:	10c00826 	beq	r2,r3,80f66c <__sseek+0x40>
  80f64c:	80c0030b 	ldhu	r3,12(r16)
  80f650:	80801415 	stw	r2,80(r16)
  80f654:	18c40014 	ori	r3,r3,4096
  80f658:	80c0030d 	sth	r3,12(r16)
  80f65c:	dfc00117 	ldw	ra,4(sp)
  80f660:	dc000017 	ldw	r16,0(sp)
  80f664:	dec00204 	addi	sp,sp,8
  80f668:	f800283a 	ret
  80f66c:	80c0030b 	ldhu	r3,12(r16)
  80f670:	18fbffcc 	andi	r3,r3,61439
  80f674:	80c0030d 	sth	r3,12(r16)
  80f678:	dfc00117 	ldw	ra,4(sp)
  80f67c:	dc000017 	ldw	r16,0(sp)
  80f680:	dec00204 	addi	sp,sp,8
  80f684:	f800283a 	ret

0080f688 <__sclose>:
  80f688:	2940038f 	ldh	r5,14(r5)
  80f68c:	0810eac1 	jmpi	810eac <_close_r>

0080f690 <strcmp>:
  80f690:	2144b03a 	or	r2,r4,r5
  80f694:	108000cc 	andi	r2,r2,3
  80f698:	1000171e 	bne	r2,zero,80f6f8 <strcmp+0x68>
  80f69c:	20800017 	ldw	r2,0(r4)
  80f6a0:	28c00017 	ldw	r3,0(r5)
  80f6a4:	10c0141e 	bne	r2,r3,80f6f8 <strcmp+0x68>
  80f6a8:	027fbff4 	movhi	r9,65279
  80f6ac:	4a7fbfc4 	addi	r9,r9,-257
  80f6b0:	0086303a 	nor	r3,zero,r2
  80f6b4:	02202074 	movhi	r8,32897
  80f6b8:	1245883a 	add	r2,r2,r9
  80f6bc:	42202004 	addi	r8,r8,-32640
  80f6c0:	10c4703a 	and	r2,r2,r3
  80f6c4:	1204703a 	and	r2,r2,r8
  80f6c8:	10000226 	beq	r2,zero,80f6d4 <strcmp+0x44>
  80f6cc:	00002306 	br	80f75c <strcmp+0xcc>
  80f6d0:	1000221e 	bne	r2,zero,80f75c <strcmp+0xcc>
  80f6d4:	21000104 	addi	r4,r4,4
  80f6d8:	20c00017 	ldw	r3,0(r4)
  80f6dc:	29400104 	addi	r5,r5,4
  80f6e0:	29800017 	ldw	r6,0(r5)
  80f6e4:	1a4f883a 	add	r7,r3,r9
  80f6e8:	00c4303a 	nor	r2,zero,r3
  80f6ec:	3884703a 	and	r2,r7,r2
  80f6f0:	1204703a 	and	r2,r2,r8
  80f6f4:	19bff626 	beq	r3,r6,80f6d0 <__alt_mem_onchip_mem+0xff8076d0>
  80f6f8:	20800003 	ldbu	r2,0(r4)
  80f6fc:	10c03fcc 	andi	r3,r2,255
  80f700:	18c0201c 	xori	r3,r3,128
  80f704:	18ffe004 	addi	r3,r3,-128
  80f708:	18000c26 	beq	r3,zero,80f73c <strcmp+0xac>
  80f70c:	29800007 	ldb	r6,0(r5)
  80f710:	19800326 	beq	r3,r6,80f720 <strcmp+0x90>
  80f714:	00001306 	br	80f764 <strcmp+0xd4>
  80f718:	29800007 	ldb	r6,0(r5)
  80f71c:	11800b1e 	bne	r2,r6,80f74c <strcmp+0xbc>
  80f720:	21000044 	addi	r4,r4,1
  80f724:	20c00003 	ldbu	r3,0(r4)
  80f728:	29400044 	addi	r5,r5,1
  80f72c:	18803fcc 	andi	r2,r3,255
  80f730:	1080201c 	xori	r2,r2,128
  80f734:	10bfe004 	addi	r2,r2,-128
  80f738:	103ff71e 	bne	r2,zero,80f718 <__alt_mem_onchip_mem+0xff807718>
  80f73c:	0007883a 	mov	r3,zero
  80f740:	28800003 	ldbu	r2,0(r5)
  80f744:	1885c83a 	sub	r2,r3,r2
  80f748:	f800283a 	ret
  80f74c:	28800003 	ldbu	r2,0(r5)
  80f750:	18c03fcc 	andi	r3,r3,255
  80f754:	1885c83a 	sub	r2,r3,r2
  80f758:	f800283a 	ret
  80f75c:	0005883a 	mov	r2,zero
  80f760:	f800283a 	ret
  80f764:	10c03fcc 	andi	r3,r2,255
  80f768:	003ff506 	br	80f740 <__alt_mem_onchip_mem+0xff807740>

0080f76c <strlen>:
  80f76c:	208000cc 	andi	r2,r4,3
  80f770:	10002026 	beq	r2,zero,80f7f4 <strlen+0x88>
  80f774:	20800007 	ldb	r2,0(r4)
  80f778:	10002026 	beq	r2,zero,80f7fc <strlen+0x90>
  80f77c:	2005883a 	mov	r2,r4
  80f780:	00000206 	br	80f78c <strlen+0x20>
  80f784:	10c00007 	ldb	r3,0(r2)
  80f788:	18001826 	beq	r3,zero,80f7ec <strlen+0x80>
  80f78c:	10800044 	addi	r2,r2,1
  80f790:	10c000cc 	andi	r3,r2,3
  80f794:	183ffb1e 	bne	r3,zero,80f784 <__alt_mem_onchip_mem+0xff807784>
  80f798:	10c00017 	ldw	r3,0(r2)
  80f79c:	01ffbff4 	movhi	r7,65279
  80f7a0:	39ffbfc4 	addi	r7,r7,-257
  80f7a4:	00ca303a 	nor	r5,zero,r3
  80f7a8:	01a02074 	movhi	r6,32897
  80f7ac:	19c7883a 	add	r3,r3,r7
  80f7b0:	31a02004 	addi	r6,r6,-32640
  80f7b4:	1946703a 	and	r3,r3,r5
  80f7b8:	1986703a 	and	r3,r3,r6
  80f7bc:	1800091e 	bne	r3,zero,80f7e4 <strlen+0x78>
  80f7c0:	10800104 	addi	r2,r2,4
  80f7c4:	10c00017 	ldw	r3,0(r2)
  80f7c8:	19cb883a 	add	r5,r3,r7
  80f7cc:	00c6303a 	nor	r3,zero,r3
  80f7d0:	28c6703a 	and	r3,r5,r3
  80f7d4:	1986703a 	and	r3,r3,r6
  80f7d8:	183ff926 	beq	r3,zero,80f7c0 <__alt_mem_onchip_mem+0xff8077c0>
  80f7dc:	00000106 	br	80f7e4 <strlen+0x78>
  80f7e0:	10800044 	addi	r2,r2,1
  80f7e4:	10c00007 	ldb	r3,0(r2)
  80f7e8:	183ffd1e 	bne	r3,zero,80f7e0 <__alt_mem_onchip_mem+0xff8077e0>
  80f7ec:	1105c83a 	sub	r2,r2,r4
  80f7f0:	f800283a 	ret
  80f7f4:	2005883a 	mov	r2,r4
  80f7f8:	003fe706 	br	80f798 <__alt_mem_onchip_mem+0xff807798>
  80f7fc:	0005883a 	mov	r2,zero
  80f800:	f800283a 	ret

0080f804 <__sprint_r.part.0>:
  80f804:	28801917 	ldw	r2,100(r5)
  80f808:	defff604 	addi	sp,sp,-40
  80f80c:	dd400515 	stw	r21,20(sp)
  80f810:	dfc00915 	stw	ra,36(sp)
  80f814:	df000815 	stw	fp,32(sp)
  80f818:	ddc00715 	stw	r23,28(sp)
  80f81c:	dd800615 	stw	r22,24(sp)
  80f820:	dd000415 	stw	r20,16(sp)
  80f824:	dcc00315 	stw	r19,12(sp)
  80f828:	dc800215 	stw	r18,8(sp)
  80f82c:	dc400115 	stw	r17,4(sp)
  80f830:	dc000015 	stw	r16,0(sp)
  80f834:	1088000c 	andi	r2,r2,8192
  80f838:	302b883a 	mov	r21,r6
  80f83c:	10002e26 	beq	r2,zero,80f8f8 <__sprint_r.part.0+0xf4>
  80f840:	30800217 	ldw	r2,8(r6)
  80f844:	35800017 	ldw	r22,0(r6)
  80f848:	10002926 	beq	r2,zero,80f8f0 <__sprint_r.part.0+0xec>
  80f84c:	2827883a 	mov	r19,r5
  80f850:	2029883a 	mov	r20,r4
  80f854:	b5c00104 	addi	r23,r22,4
  80f858:	04bfffc4 	movi	r18,-1
  80f85c:	bc400017 	ldw	r17,0(r23)
  80f860:	b4000017 	ldw	r16,0(r22)
  80f864:	0039883a 	mov	fp,zero
  80f868:	8822d0ba 	srli	r17,r17,2
  80f86c:	8800031e 	bne	r17,zero,80f87c <__sprint_r.part.0+0x78>
  80f870:	00001806 	br	80f8d4 <__sprint_r.part.0+0xd0>
  80f874:	84000104 	addi	r16,r16,4
  80f878:	8f001526 	beq	r17,fp,80f8d0 <__sprint_r.part.0+0xcc>
  80f87c:	81400017 	ldw	r5,0(r16)
  80f880:	980d883a 	mov	r6,r19
  80f884:	a009883a 	mov	r4,r20
  80f888:	081122c0 	call	81122c <_fputwc_r>
  80f88c:	e7000044 	addi	fp,fp,1
  80f890:	14bff81e 	bne	r2,r18,80f874 <__alt_mem_onchip_mem+0xff807874>
  80f894:	9005883a 	mov	r2,r18
  80f898:	a8000215 	stw	zero,8(r21)
  80f89c:	a8000115 	stw	zero,4(r21)
  80f8a0:	dfc00917 	ldw	ra,36(sp)
  80f8a4:	df000817 	ldw	fp,32(sp)
  80f8a8:	ddc00717 	ldw	r23,28(sp)
  80f8ac:	dd800617 	ldw	r22,24(sp)
  80f8b0:	dd400517 	ldw	r21,20(sp)
  80f8b4:	dd000417 	ldw	r20,16(sp)
  80f8b8:	dcc00317 	ldw	r19,12(sp)
  80f8bc:	dc800217 	ldw	r18,8(sp)
  80f8c0:	dc400117 	ldw	r17,4(sp)
  80f8c4:	dc000017 	ldw	r16,0(sp)
  80f8c8:	dec00a04 	addi	sp,sp,40
  80f8cc:	f800283a 	ret
  80f8d0:	a8800217 	ldw	r2,8(r21)
  80f8d4:	8c63883a 	add	r17,r17,r17
  80f8d8:	8c63883a 	add	r17,r17,r17
  80f8dc:	1445c83a 	sub	r2,r2,r17
  80f8e0:	a8800215 	stw	r2,8(r21)
  80f8e4:	b5800204 	addi	r22,r22,8
  80f8e8:	bdc00204 	addi	r23,r23,8
  80f8ec:	103fdb1e 	bne	r2,zero,80f85c <__alt_mem_onchip_mem+0xff80785c>
  80f8f0:	0005883a 	mov	r2,zero
  80f8f4:	003fe806 	br	80f898 <__alt_mem_onchip_mem+0xff807898>
  80f8f8:	081132c0 	call	81132c <__sfvwrite_r>
  80f8fc:	003fe606 	br	80f898 <__alt_mem_onchip_mem+0xff807898>

0080f900 <__sprint_r>:
  80f900:	30c00217 	ldw	r3,8(r6)
  80f904:	18000126 	beq	r3,zero,80f90c <__sprint_r+0xc>
  80f908:	080f8041 	jmpi	80f804 <__sprint_r.part.0>
  80f90c:	30000115 	stw	zero,4(r6)
  80f910:	0005883a 	mov	r2,zero
  80f914:	f800283a 	ret

0080f918 <___vfiprintf_internal_r>:
  80f918:	deffc904 	addi	sp,sp,-220
  80f91c:	df003515 	stw	fp,212(sp)
  80f920:	dd003115 	stw	r20,196(sp)
  80f924:	dfc03615 	stw	ra,216(sp)
  80f928:	ddc03415 	stw	r23,208(sp)
  80f92c:	dd803315 	stw	r22,204(sp)
  80f930:	dd403215 	stw	r21,200(sp)
  80f934:	dcc03015 	stw	r19,192(sp)
  80f938:	dc802f15 	stw	r18,188(sp)
  80f93c:	dc402e15 	stw	r17,184(sp)
  80f940:	dc002d15 	stw	r16,180(sp)
  80f944:	d9002015 	stw	r4,128(sp)
  80f948:	d9c02215 	stw	r7,136(sp)
  80f94c:	2829883a 	mov	r20,r5
  80f950:	3039883a 	mov	fp,r6
  80f954:	20000226 	beq	r4,zero,80f960 <___vfiprintf_internal_r+0x48>
  80f958:	20800e17 	ldw	r2,56(r4)
  80f95c:	1000cf26 	beq	r2,zero,80fc9c <___vfiprintf_internal_r+0x384>
  80f960:	a080030b 	ldhu	r2,12(r20)
  80f964:	10c8000c 	andi	r3,r2,8192
  80f968:	1800061e 	bne	r3,zero,80f984 <___vfiprintf_internal_r+0x6c>
  80f96c:	a1001917 	ldw	r4,100(r20)
  80f970:	00f7ffc4 	movi	r3,-8193
  80f974:	10880014 	ori	r2,r2,8192
  80f978:	20c6703a 	and	r3,r4,r3
  80f97c:	a080030d 	sth	r2,12(r20)
  80f980:	a0c01915 	stw	r3,100(r20)
  80f984:	10c0020c 	andi	r3,r2,8
  80f988:	1800a926 	beq	r3,zero,80fc30 <___vfiprintf_internal_r+0x318>
  80f98c:	a0c00417 	ldw	r3,16(r20)
  80f990:	1800a726 	beq	r3,zero,80fc30 <___vfiprintf_internal_r+0x318>
  80f994:	1080068c 	andi	r2,r2,26
  80f998:	00c00284 	movi	r3,10
  80f99c:	10c0ac26 	beq	r2,r3,80fc50 <___vfiprintf_internal_r+0x338>
  80f9a0:	da801a04 	addi	r10,sp,104
  80f9a4:	da801e15 	stw	r10,120(sp)
  80f9a8:	d8801e17 	ldw	r2,120(sp)
  80f9ac:	da8019c4 	addi	r10,sp,103
  80f9b0:	058020b4 	movhi	r22,130
  80f9b4:	05c020b4 	movhi	r23,130
  80f9b8:	da801f15 	stw	r10,124(sp)
  80f9bc:	1295c83a 	sub	r10,r2,r10
  80f9c0:	b5a13b04 	addi	r22,r22,-31508
  80f9c4:	bde13704 	addi	r23,r23,-31524
  80f9c8:	dec01a15 	stw	sp,104(sp)
  80f9cc:	d8001c15 	stw	zero,112(sp)
  80f9d0:	d8001b15 	stw	zero,108(sp)
  80f9d4:	d8002615 	stw	zero,152(sp)
  80f9d8:	d8002315 	stw	zero,140(sp)
  80f9dc:	da802715 	stw	r10,156(sp)
  80f9e0:	d811883a 	mov	r8,sp
  80f9e4:	dd002115 	stw	r20,132(sp)
  80f9e8:	e021883a 	mov	r16,fp
  80f9ec:	80800007 	ldb	r2,0(r16)
  80f9f0:	1003ea26 	beq	r2,zero,81099c <___vfiprintf_internal_r+0x1084>
  80f9f4:	00c00944 	movi	r3,37
  80f9f8:	8025883a 	mov	r18,r16
  80f9fc:	10c0021e 	bne	r2,r3,80fa08 <___vfiprintf_internal_r+0xf0>
  80fa00:	00001606 	br	80fa5c <___vfiprintf_internal_r+0x144>
  80fa04:	10c00326 	beq	r2,r3,80fa14 <___vfiprintf_internal_r+0xfc>
  80fa08:	94800044 	addi	r18,r18,1
  80fa0c:	90800007 	ldb	r2,0(r18)
  80fa10:	103ffc1e 	bne	r2,zero,80fa04 <__alt_mem_onchip_mem+0xff807a04>
  80fa14:	9423c83a 	sub	r17,r18,r16
  80fa18:	88001026 	beq	r17,zero,80fa5c <___vfiprintf_internal_r+0x144>
  80fa1c:	d8c01c17 	ldw	r3,112(sp)
  80fa20:	d8801b17 	ldw	r2,108(sp)
  80fa24:	44000015 	stw	r16,0(r8)
  80fa28:	88c7883a 	add	r3,r17,r3
  80fa2c:	10800044 	addi	r2,r2,1
  80fa30:	44400115 	stw	r17,4(r8)
  80fa34:	d8c01c15 	stw	r3,112(sp)
  80fa38:	d8801b15 	stw	r2,108(sp)
  80fa3c:	010001c4 	movi	r4,7
  80fa40:	2080760e 	bge	r4,r2,80fc1c <___vfiprintf_internal_r+0x304>
  80fa44:	1803821e 	bne	r3,zero,810850 <___vfiprintf_internal_r+0xf38>
  80fa48:	da802317 	ldw	r10,140(sp)
  80fa4c:	d8001b15 	stw	zero,108(sp)
  80fa50:	d811883a 	mov	r8,sp
  80fa54:	5455883a 	add	r10,r10,r17
  80fa58:	da802315 	stw	r10,140(sp)
  80fa5c:	90800007 	ldb	r2,0(r18)
  80fa60:	10044626 	beq	r2,zero,810b7c <___vfiprintf_internal_r+0x1264>
  80fa64:	90c00047 	ldb	r3,1(r18)
  80fa68:	94000044 	addi	r16,r18,1
  80fa6c:	d8001d85 	stb	zero,118(sp)
  80fa70:	0009883a 	mov	r4,zero
  80fa74:	000f883a 	mov	r7,zero
  80fa78:	027fffc4 	movi	r9,-1
  80fa7c:	0023883a 	mov	r17,zero
  80fa80:	0029883a 	mov	r20,zero
  80fa84:	01401604 	movi	r5,88
  80fa88:	01800244 	movi	r6,9
  80fa8c:	03400a84 	movi	r13,42
  80fa90:	03001b04 	movi	r12,108
  80fa94:	84000044 	addi	r16,r16,1
  80fa98:	18bff804 	addi	r2,r3,-32
  80fa9c:	28827336 	bltu	r5,r2,81046c <___vfiprintf_internal_r+0xb54>
  80faa0:	100490ba 	slli	r2,r2,2
  80faa4:	02802074 	movhi	r10,129
  80faa8:	52beae04 	addi	r10,r10,-1352
  80faac:	1285883a 	add	r2,r2,r10
  80fab0:	10800017 	ldw	r2,0(r2)
  80fab4:	1000683a 	jmp	r2
  80fab8:	008101a0 	cmpeqi	r2,zero,1030
  80fabc:	0081046c 	andhi	r2,zero,1041
  80fac0:	0081046c 	andhi	r2,zero,1041
  80fac4:	008101c0 	call	8101c <__alt_mem_sdram-0x77efe4>
  80fac8:	0081046c 	andhi	r2,zero,1041
  80facc:	0081046c 	andhi	r2,zero,1041
  80fad0:	0081046c 	andhi	r2,zero,1041
  80fad4:	0081046c 	andhi	r2,zero,1041
  80fad8:	0081046c 	andhi	r2,zero,1041
  80fadc:	0081046c 	andhi	r2,zero,1041
  80fae0:	008103a8 	cmpgeui	r2,zero,1038
  80fae4:	008103c4 	movi	r2,1039
  80fae8:	0081046c 	andhi	r2,zero,1041
  80faec:	0080fcac 	andhi	r2,zero,1010
  80faf0:	008103d4 	movui	r2,1039
  80faf4:	0081046c 	andhi	r2,zero,1041
  80faf8:	008101cc 	andi	r2,zero,1031
  80fafc:	008101d8 	cmpnei	r2,zero,1031
  80fb00:	008101d8 	cmpnei	r2,zero,1031
  80fb04:	008101d8 	cmpnei	r2,zero,1031
  80fb08:	008101d8 	cmpnei	r2,zero,1031
  80fb0c:	008101d8 	cmpnei	r2,zero,1031
  80fb10:	008101d8 	cmpnei	r2,zero,1031
  80fb14:	008101d8 	cmpnei	r2,zero,1031
  80fb18:	008101d8 	cmpnei	r2,zero,1031
  80fb1c:	008101d8 	cmpnei	r2,zero,1031
  80fb20:	0081046c 	andhi	r2,zero,1041
  80fb24:	0081046c 	andhi	r2,zero,1041
  80fb28:	0081046c 	andhi	r2,zero,1041
  80fb2c:	0081046c 	andhi	r2,zero,1041
  80fb30:	0081046c 	andhi	r2,zero,1041
  80fb34:	0081046c 	andhi	r2,zero,1041
  80fb38:	0081046c 	andhi	r2,zero,1041
  80fb3c:	0081046c 	andhi	r2,zero,1041
  80fb40:	0081046c 	andhi	r2,zero,1041
  80fb44:	0081046c 	andhi	r2,zero,1041
  80fb48:	00810204 	movi	r2,1032
  80fb4c:	0081046c 	andhi	r2,zero,1041
  80fb50:	0081046c 	andhi	r2,zero,1041
  80fb54:	0081046c 	andhi	r2,zero,1041
  80fb58:	0081046c 	andhi	r2,zero,1041
  80fb5c:	0081046c 	andhi	r2,zero,1041
  80fb60:	0081046c 	andhi	r2,zero,1041
  80fb64:	0081046c 	andhi	r2,zero,1041
  80fb68:	0081046c 	andhi	r2,zero,1041
  80fb6c:	0081046c 	andhi	r2,zero,1041
  80fb70:	0081046c 	andhi	r2,zero,1041
  80fb74:	0081023c 	xorhi	r2,zero,1032
  80fb78:	0081046c 	andhi	r2,zero,1041
  80fb7c:	0081046c 	andhi	r2,zero,1041
  80fb80:	0081046c 	andhi	r2,zero,1041
  80fb84:	0081046c 	andhi	r2,zero,1041
  80fb88:	0081046c 	andhi	r2,zero,1041
  80fb8c:	00810294 	movui	r2,1034
  80fb90:	0081046c 	andhi	r2,zero,1041
  80fb94:	0081046c 	andhi	r2,zero,1041
  80fb98:	00810304 	movi	r2,1036
  80fb9c:	0081046c 	andhi	r2,zero,1041
  80fba0:	0081046c 	andhi	r2,zero,1041
  80fba4:	0081046c 	andhi	r2,zero,1041
  80fba8:	0081046c 	andhi	r2,zero,1041
  80fbac:	0081046c 	andhi	r2,zero,1041
  80fbb0:	0081046c 	andhi	r2,zero,1041
  80fbb4:	0081046c 	andhi	r2,zero,1041
  80fbb8:	0081046c 	andhi	r2,zero,1041
  80fbbc:	0081046c 	andhi	r2,zero,1041
  80fbc0:	0081046c 	andhi	r2,zero,1041
  80fbc4:	008100b0 	cmpltui	r2,zero,1026
  80fbc8:	008100dc 	xori	r2,zero,1027
  80fbcc:	0081046c 	andhi	r2,zero,1041
  80fbd0:	0081046c 	andhi	r2,zero,1041
  80fbd4:	0081046c 	andhi	r2,zero,1041
  80fbd8:	00810414 	movui	r2,1040
  80fbdc:	008100dc 	xori	r2,zero,1027
  80fbe0:	0081046c 	andhi	r2,zero,1041
  80fbe4:	0081046c 	andhi	r2,zero,1041
  80fbe8:	0080ff70 	cmpltui	r2,zero,1021
  80fbec:	0081046c 	andhi	r2,zero,1041
  80fbf0:	0080ff80 	call	80ff8 <__alt_mem_sdram-0x77f008>
  80fbf4:	0080ffbc 	xorhi	r2,zero,1022
  80fbf8:	0080fcb8 	rdprs	r2,zero,1010
  80fbfc:	0080ff64 	muli	r2,zero,1021
  80fc00:	0081046c 	andhi	r2,zero,1041
  80fc04:	00810340 	call	81034 <__alt_mem_sdram-0x77efcc>
  80fc08:	0081046c 	andhi	r2,zero,1041
  80fc0c:	00810398 	cmpnei	r2,zero,1038
  80fc10:	0081046c 	andhi	r2,zero,1041
  80fc14:	0081046c 	andhi	r2,zero,1041
  80fc18:	0081005c 	xori	r2,zero,1025
  80fc1c:	42000204 	addi	r8,r8,8
  80fc20:	da802317 	ldw	r10,140(sp)
  80fc24:	5455883a 	add	r10,r10,r17
  80fc28:	da802315 	stw	r10,140(sp)
  80fc2c:	003f8b06 	br	80fa5c <__alt_mem_onchip_mem+0xff807a5c>
  80fc30:	d9002017 	ldw	r4,128(sp)
  80fc34:	a00b883a 	mov	r5,r20
  80fc38:	080b0b80 	call	80b0b8 <__swsetup_r>
  80fc3c:	1003b11e 	bne	r2,zero,810b04 <___vfiprintf_internal_r+0x11ec>
  80fc40:	a080030b 	ldhu	r2,12(r20)
  80fc44:	00c00284 	movi	r3,10
  80fc48:	1080068c 	andi	r2,r2,26
  80fc4c:	10ff541e 	bne	r2,r3,80f9a0 <__alt_mem_onchip_mem+0xff8079a0>
  80fc50:	a080038f 	ldh	r2,14(r20)
  80fc54:	103f5216 	blt	r2,zero,80f9a0 <__alt_mem_onchip_mem+0xff8079a0>
  80fc58:	d9c02217 	ldw	r7,136(sp)
  80fc5c:	d9002017 	ldw	r4,128(sp)
  80fc60:	e00d883a 	mov	r6,fp
  80fc64:	a00b883a 	mov	r5,r20
  80fc68:	0810d900 	call	810d90 <__sbprintf>
  80fc6c:	dfc03617 	ldw	ra,216(sp)
  80fc70:	df003517 	ldw	fp,212(sp)
  80fc74:	ddc03417 	ldw	r23,208(sp)
  80fc78:	dd803317 	ldw	r22,204(sp)
  80fc7c:	dd403217 	ldw	r21,200(sp)
  80fc80:	dd003117 	ldw	r20,196(sp)
  80fc84:	dcc03017 	ldw	r19,192(sp)
  80fc88:	dc802f17 	ldw	r18,188(sp)
  80fc8c:	dc402e17 	ldw	r17,184(sp)
  80fc90:	dc002d17 	ldw	r16,180(sp)
  80fc94:	dec03704 	addi	sp,sp,220
  80fc98:	f800283a 	ret
  80fc9c:	080d08c0 	call	80d08c <__sinit>
  80fca0:	003f2f06 	br	80f960 <__alt_mem_onchip_mem+0xff807960>
  80fca4:	0463c83a 	sub	r17,zero,r17
  80fca8:	d8802215 	stw	r2,136(sp)
  80fcac:	a5000114 	ori	r20,r20,4
  80fcb0:	80c00007 	ldb	r3,0(r16)
  80fcb4:	003f7706 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  80fcb8:	00800c04 	movi	r2,48
  80fcbc:	da802217 	ldw	r10,136(sp)
  80fcc0:	d8801d05 	stb	r2,116(sp)
  80fcc4:	00801e04 	movi	r2,120
  80fcc8:	d8801d45 	stb	r2,117(sp)
  80fccc:	d8001d85 	stb	zero,118(sp)
  80fcd0:	50c00104 	addi	r3,r10,4
  80fcd4:	54800017 	ldw	r18,0(r10)
  80fcd8:	0027883a 	mov	r19,zero
  80fcdc:	a0800094 	ori	r2,r20,2
  80fce0:	48030b16 	blt	r9,zero,810910 <___vfiprintf_internal_r+0xff8>
  80fce4:	00bfdfc4 	movi	r2,-129
  80fce8:	a096703a 	and	r11,r20,r2
  80fcec:	d8c02215 	stw	r3,136(sp)
  80fcf0:	5d000094 	ori	r20,r11,2
  80fcf4:	90032b1e 	bne	r18,zero,8109a4 <___vfiprintf_internal_r+0x108c>
  80fcf8:	008020b4 	movhi	r2,130
  80fcfc:	10a0d604 	addi	r2,r2,-31912
  80fd00:	d8802615 	stw	r2,152(sp)
  80fd04:	0039883a 	mov	fp,zero
  80fd08:	48017b1e 	bne	r9,zero,8102f8 <___vfiprintf_internal_r+0x9e0>
  80fd0c:	0013883a 	mov	r9,zero
  80fd10:	0027883a 	mov	r19,zero
  80fd14:	dd401a04 	addi	r21,sp,104
  80fd18:	4825883a 	mov	r18,r9
  80fd1c:	4cc0010e 	bge	r9,r19,80fd24 <___vfiprintf_internal_r+0x40c>
  80fd20:	9825883a 	mov	r18,r19
  80fd24:	e7003fcc 	andi	fp,fp,255
  80fd28:	e700201c 	xori	fp,fp,128
  80fd2c:	e73fe004 	addi	fp,fp,-128
  80fd30:	e0000126 	beq	fp,zero,80fd38 <___vfiprintf_internal_r+0x420>
  80fd34:	94800044 	addi	r18,r18,1
  80fd38:	a380008c 	andi	r14,r20,2
  80fd3c:	70000126 	beq	r14,zero,80fd44 <___vfiprintf_internal_r+0x42c>
  80fd40:	94800084 	addi	r18,r18,2
  80fd44:	a700210c 	andi	fp,r20,132
  80fd48:	e001df1e 	bne	fp,zero,8104c8 <___vfiprintf_internal_r+0xbb0>
  80fd4c:	8c87c83a 	sub	r3,r17,r18
  80fd50:	00c1dd0e 	bge	zero,r3,8104c8 <___vfiprintf_internal_r+0xbb0>
  80fd54:	01c00404 	movi	r7,16
  80fd58:	d8801c17 	ldw	r2,112(sp)
  80fd5c:	38c3ad0e 	bge	r7,r3,810c14 <___vfiprintf_internal_r+0x12fc>
  80fd60:	028020b4 	movhi	r10,130
  80fd64:	52a13b04 	addi	r10,r10,-31508
  80fd68:	dc002915 	stw	r16,164(sp)
  80fd6c:	d9801b17 	ldw	r6,108(sp)
  80fd70:	da802415 	stw	r10,144(sp)
  80fd74:	03c001c4 	movi	r15,7
  80fd78:	da402515 	stw	r9,148(sp)
  80fd7c:	db802815 	stw	r14,160(sp)
  80fd80:	1821883a 	mov	r16,r3
  80fd84:	00000506 	br	80fd9c <___vfiprintf_internal_r+0x484>
  80fd88:	31400084 	addi	r5,r6,2
  80fd8c:	42000204 	addi	r8,r8,8
  80fd90:	200d883a 	mov	r6,r4
  80fd94:	843ffc04 	addi	r16,r16,-16
  80fd98:	3c000d0e 	bge	r7,r16,80fdd0 <___vfiprintf_internal_r+0x4b8>
  80fd9c:	10800404 	addi	r2,r2,16
  80fda0:	31000044 	addi	r4,r6,1
  80fda4:	45800015 	stw	r22,0(r8)
  80fda8:	41c00115 	stw	r7,4(r8)
  80fdac:	d8801c15 	stw	r2,112(sp)
  80fdb0:	d9001b15 	stw	r4,108(sp)
  80fdb4:	793ff40e 	bge	r15,r4,80fd88 <__alt_mem_onchip_mem+0xff807d88>
  80fdb8:	1001b51e 	bne	r2,zero,810490 <___vfiprintf_internal_r+0xb78>
  80fdbc:	843ffc04 	addi	r16,r16,-16
  80fdc0:	000d883a 	mov	r6,zero
  80fdc4:	01400044 	movi	r5,1
  80fdc8:	d811883a 	mov	r8,sp
  80fdcc:	3c3ff316 	blt	r7,r16,80fd9c <__alt_mem_onchip_mem+0xff807d9c>
  80fdd0:	8007883a 	mov	r3,r16
  80fdd4:	da402517 	ldw	r9,148(sp)
  80fdd8:	db802817 	ldw	r14,160(sp)
  80fddc:	dc002917 	ldw	r16,164(sp)
  80fde0:	da802417 	ldw	r10,144(sp)
  80fde4:	1885883a 	add	r2,r3,r2
  80fde8:	40c00115 	stw	r3,4(r8)
  80fdec:	42800015 	stw	r10,0(r8)
  80fdf0:	d8801c15 	stw	r2,112(sp)
  80fdf4:	d9401b15 	stw	r5,108(sp)
  80fdf8:	00c001c4 	movi	r3,7
  80fdfc:	19426016 	blt	r3,r5,810780 <___vfiprintf_internal_r+0xe68>
  80fe00:	d8c01d87 	ldb	r3,118(sp)
  80fe04:	42000204 	addi	r8,r8,8
  80fe08:	29000044 	addi	r4,r5,1
  80fe0c:	1801b31e 	bne	r3,zero,8104dc <___vfiprintf_internal_r+0xbc4>
  80fe10:	7001c026 	beq	r14,zero,810514 <___vfiprintf_internal_r+0xbfc>
  80fe14:	d8c01d04 	addi	r3,sp,116
  80fe18:	10800084 	addi	r2,r2,2
  80fe1c:	40c00015 	stw	r3,0(r8)
  80fe20:	00c00084 	movi	r3,2
  80fe24:	40c00115 	stw	r3,4(r8)
  80fe28:	d8801c15 	stw	r2,112(sp)
  80fe2c:	d9001b15 	stw	r4,108(sp)
  80fe30:	00c001c4 	movi	r3,7
  80fe34:	1902650e 	bge	r3,r4,8107cc <___vfiprintf_internal_r+0xeb4>
  80fe38:	10029a1e 	bne	r2,zero,8108a4 <___vfiprintf_internal_r+0xf8c>
  80fe3c:	00c02004 	movi	r3,128
  80fe40:	01000044 	movi	r4,1
  80fe44:	000b883a 	mov	r5,zero
  80fe48:	d811883a 	mov	r8,sp
  80fe4c:	e0c1b31e 	bne	fp,r3,81051c <___vfiprintf_internal_r+0xc04>
  80fe50:	8cb9c83a 	sub	fp,r17,r18
  80fe54:	0701b10e 	bge	zero,fp,81051c <___vfiprintf_internal_r+0xc04>
  80fe58:	01c00404 	movi	r7,16
  80fe5c:	3f03890e 	bge	r7,fp,810c84 <___vfiprintf_internal_r+0x136c>
  80fe60:	00c020b4 	movhi	r3,130
  80fe64:	18e13704 	addi	r3,r3,-31524
  80fe68:	d8c02415 	stw	r3,144(sp)
  80fe6c:	8007883a 	mov	r3,r16
  80fe70:	034001c4 	movi	r13,7
  80fe74:	e021883a 	mov	r16,fp
  80fe78:	da402515 	stw	r9,148(sp)
  80fe7c:	1839883a 	mov	fp,r3
  80fe80:	00000506 	br	80fe98 <___vfiprintf_internal_r+0x580>
  80fe84:	29800084 	addi	r6,r5,2
  80fe88:	42000204 	addi	r8,r8,8
  80fe8c:	180b883a 	mov	r5,r3
  80fe90:	843ffc04 	addi	r16,r16,-16
  80fe94:	3c000d0e 	bge	r7,r16,80fecc <___vfiprintf_internal_r+0x5b4>
  80fe98:	10800404 	addi	r2,r2,16
  80fe9c:	28c00044 	addi	r3,r5,1
  80fea0:	45c00015 	stw	r23,0(r8)
  80fea4:	41c00115 	stw	r7,4(r8)
  80fea8:	d8801c15 	stw	r2,112(sp)
  80feac:	d8c01b15 	stw	r3,108(sp)
  80feb0:	68fff40e 	bge	r13,r3,80fe84 <__alt_mem_onchip_mem+0xff807e84>
  80feb4:	1002241e 	bne	r2,zero,810748 <___vfiprintf_internal_r+0xe30>
  80feb8:	843ffc04 	addi	r16,r16,-16
  80febc:	01800044 	movi	r6,1
  80fec0:	000b883a 	mov	r5,zero
  80fec4:	d811883a 	mov	r8,sp
  80fec8:	3c3ff316 	blt	r7,r16,80fe98 <__alt_mem_onchip_mem+0xff807e98>
  80fecc:	da402517 	ldw	r9,148(sp)
  80fed0:	e007883a 	mov	r3,fp
  80fed4:	8039883a 	mov	fp,r16
  80fed8:	1821883a 	mov	r16,r3
  80fedc:	d8c02417 	ldw	r3,144(sp)
  80fee0:	1705883a 	add	r2,r2,fp
  80fee4:	47000115 	stw	fp,4(r8)
  80fee8:	40c00015 	stw	r3,0(r8)
  80feec:	d8801c15 	stw	r2,112(sp)
  80fef0:	d9801b15 	stw	r6,108(sp)
  80fef4:	00c001c4 	movi	r3,7
  80fef8:	19827616 	blt	r3,r6,8108d4 <___vfiprintf_internal_r+0xfbc>
  80fefc:	4cf9c83a 	sub	fp,r9,r19
  80ff00:	42000204 	addi	r8,r8,8
  80ff04:	31000044 	addi	r4,r6,1
  80ff08:	300b883a 	mov	r5,r6
  80ff0c:	07018516 	blt	zero,fp,810524 <___vfiprintf_internal_r+0xc0c>
  80ff10:	9885883a 	add	r2,r19,r2
  80ff14:	45400015 	stw	r21,0(r8)
  80ff18:	44c00115 	stw	r19,4(r8)
  80ff1c:	d8801c15 	stw	r2,112(sp)
  80ff20:	d9001b15 	stw	r4,108(sp)
  80ff24:	00c001c4 	movi	r3,7
  80ff28:	1901dd0e 	bge	r3,r4,8106a0 <___vfiprintf_internal_r+0xd88>
  80ff2c:	1002401e 	bne	r2,zero,810830 <___vfiprintf_internal_r+0xf18>
  80ff30:	d8001b15 	stw	zero,108(sp)
  80ff34:	a2c0010c 	andi	r11,r20,4
  80ff38:	58000226 	beq	r11,zero,80ff44 <___vfiprintf_internal_r+0x62c>
  80ff3c:	8ca7c83a 	sub	r19,r17,r18
  80ff40:	04c2f216 	blt	zero,r19,810b0c <___vfiprintf_internal_r+0x11f4>
  80ff44:	8c80010e 	bge	r17,r18,80ff4c <___vfiprintf_internal_r+0x634>
  80ff48:	9023883a 	mov	r17,r18
  80ff4c:	da802317 	ldw	r10,140(sp)
  80ff50:	5455883a 	add	r10,r10,r17
  80ff54:	da802315 	stw	r10,140(sp)
  80ff58:	d8001b15 	stw	zero,108(sp)
  80ff5c:	d811883a 	mov	r8,sp
  80ff60:	003ea206 	br	80f9ec <__alt_mem_onchip_mem+0xff8079ec>
  80ff64:	a5000814 	ori	r20,r20,32
  80ff68:	80c00007 	ldb	r3,0(r16)
  80ff6c:	003ec906 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  80ff70:	80c00007 	ldb	r3,0(r16)
  80ff74:	1b030926 	beq	r3,r12,810b9c <___vfiprintf_internal_r+0x1284>
  80ff78:	a5000414 	ori	r20,r20,16
  80ff7c:	003ec506 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  80ff80:	21003fcc 	andi	r4,r4,255
  80ff84:	20035e1e 	bne	r4,zero,810d00 <___vfiprintf_internal_r+0x13e8>
  80ff88:	a080080c 	andi	r2,r20,32
  80ff8c:	1002a526 	beq	r2,zero,810a24 <___vfiprintf_internal_r+0x110c>
  80ff90:	da802217 	ldw	r10,136(sp)
  80ff94:	50800017 	ldw	r2,0(r10)
  80ff98:	da802317 	ldw	r10,140(sp)
  80ff9c:	5007d7fa 	srai	r3,r10,31
  80ffa0:	da802217 	ldw	r10,136(sp)
  80ffa4:	10c00115 	stw	r3,4(r2)
  80ffa8:	52800104 	addi	r10,r10,4
  80ffac:	da802215 	stw	r10,136(sp)
  80ffb0:	da802317 	ldw	r10,140(sp)
  80ffb4:	12800015 	stw	r10,0(r2)
  80ffb8:	003e8c06 	br	80f9ec <__alt_mem_onchip_mem+0xff8079ec>
  80ffbc:	21003fcc 	andi	r4,r4,255
  80ffc0:	2003511e 	bne	r4,zero,810d08 <___vfiprintf_internal_r+0x13f0>
  80ffc4:	a080080c 	andi	r2,r20,32
  80ffc8:	1000a126 	beq	r2,zero,810250 <___vfiprintf_internal_r+0x938>
  80ffcc:	da802217 	ldw	r10,136(sp)
  80ffd0:	d8001d85 	stb	zero,118(sp)
  80ffd4:	50800204 	addi	r2,r10,8
  80ffd8:	54800017 	ldw	r18,0(r10)
  80ffdc:	54c00117 	ldw	r19,4(r10)
  80ffe0:	4802b416 	blt	r9,zero,810ab4 <___vfiprintf_internal_r+0x119c>
  80ffe4:	013fdfc4 	movi	r4,-129
  80ffe8:	94c6b03a 	or	r3,r18,r19
  80ffec:	d8802215 	stw	r2,136(sp)
  80fff0:	a128703a 	and	r20,r20,r4
  80fff4:	1800a226 	beq	r3,zero,810280 <___vfiprintf_internal_r+0x968>
  80fff8:	0039883a 	mov	fp,zero
  80fffc:	dd401a04 	addi	r21,sp,104
  810000:	9006d0fa 	srli	r3,r18,3
  810004:	9808977a 	slli	r4,r19,29
  810008:	9826d0fa 	srli	r19,r19,3
  81000c:	948001cc 	andi	r18,r18,7
  810010:	90800c04 	addi	r2,r18,48
  810014:	ad7fffc4 	addi	r21,r21,-1
  810018:	20e4b03a 	or	r18,r4,r3
  81001c:	a8800005 	stb	r2,0(r21)
  810020:	94c6b03a 	or	r3,r18,r19
  810024:	183ff61e 	bne	r3,zero,810000 <__alt_mem_onchip_mem+0xff808000>
  810028:	a0c0004c 	andi	r3,r20,1
  81002c:	18005926 	beq	r3,zero,810194 <___vfiprintf_internal_r+0x87c>
  810030:	10803fcc 	andi	r2,r2,255
  810034:	1080201c 	xori	r2,r2,128
  810038:	10bfe004 	addi	r2,r2,-128
  81003c:	00c00c04 	movi	r3,48
  810040:	10c05426 	beq	r2,r3,810194 <___vfiprintf_internal_r+0x87c>
  810044:	da801e17 	ldw	r10,120(sp)
  810048:	a8bfffc4 	addi	r2,r21,-1
  81004c:	a8ffffc5 	stb	r3,-1(r21)
  810050:	50a7c83a 	sub	r19,r10,r2
  810054:	102b883a 	mov	r21,r2
  810058:	003f2f06 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  81005c:	21003fcc 	andi	r4,r4,255
  810060:	2003421e 	bne	r4,zero,810d6c <___vfiprintf_internal_r+0x1454>
  810064:	008020b4 	movhi	r2,130
  810068:	10a0d604 	addi	r2,r2,-31912
  81006c:	d8802615 	stw	r2,152(sp)
  810070:	a080080c 	andi	r2,r20,32
  810074:	1000aa26 	beq	r2,zero,810320 <___vfiprintf_internal_r+0xa08>
  810078:	da802217 	ldw	r10,136(sp)
  81007c:	54800017 	ldw	r18,0(r10)
  810080:	54c00117 	ldw	r19,4(r10)
  810084:	52800204 	addi	r10,r10,8
  810088:	da802215 	stw	r10,136(sp)
  81008c:	a080004c 	andi	r2,r20,1
  810090:	1001d226 	beq	r2,zero,8107dc <___vfiprintf_internal_r+0xec4>
  810094:	94c4b03a 	or	r2,r18,r19
  810098:	1002351e 	bne	r2,zero,810970 <___vfiprintf_internal_r+0x1058>
  81009c:	d8001d85 	stb	zero,118(sp)
  8100a0:	48022216 	blt	r9,zero,81092c <___vfiprintf_internal_r+0x1014>
  8100a4:	00bfdfc4 	movi	r2,-129
  8100a8:	a0a8703a 	and	r20,r20,r2
  8100ac:	003f1506 	br	80fd04 <__alt_mem_onchip_mem+0xff807d04>
  8100b0:	da802217 	ldw	r10,136(sp)
  8100b4:	04800044 	movi	r18,1
  8100b8:	d8001d85 	stb	zero,118(sp)
  8100bc:	50800017 	ldw	r2,0(r10)
  8100c0:	52800104 	addi	r10,r10,4
  8100c4:	da802215 	stw	r10,136(sp)
  8100c8:	d8801005 	stb	r2,64(sp)
  8100cc:	9027883a 	mov	r19,r18
  8100d0:	dd401004 	addi	r21,sp,64
  8100d4:	0013883a 	mov	r9,zero
  8100d8:	003f1706 	br	80fd38 <__alt_mem_onchip_mem+0xff807d38>
  8100dc:	21003fcc 	andi	r4,r4,255
  8100e0:	2003201e 	bne	r4,zero,810d64 <___vfiprintf_internal_r+0x144c>
  8100e4:	a080080c 	andi	r2,r20,32
  8100e8:	10004b26 	beq	r2,zero,810218 <___vfiprintf_internal_r+0x900>
  8100ec:	da802217 	ldw	r10,136(sp)
  8100f0:	50800117 	ldw	r2,4(r10)
  8100f4:	54800017 	ldw	r18,0(r10)
  8100f8:	52800204 	addi	r10,r10,8
  8100fc:	da802215 	stw	r10,136(sp)
  810100:	1027883a 	mov	r19,r2
  810104:	10022c16 	blt	r2,zero,8109b8 <___vfiprintf_internal_r+0x10a0>
  810108:	df001d83 	ldbu	fp,118(sp)
  81010c:	48007216 	blt	r9,zero,8102d8 <___vfiprintf_internal_r+0x9c0>
  810110:	00ffdfc4 	movi	r3,-129
  810114:	94c4b03a 	or	r2,r18,r19
  810118:	a0e8703a 	and	r20,r20,r3
  81011c:	1000cc26 	beq	r2,zero,810450 <___vfiprintf_internal_r+0xb38>
  810120:	98021026 	beq	r19,zero,810964 <___vfiprintf_internal_r+0x104c>
  810124:	dc402415 	stw	r17,144(sp)
  810128:	dc002515 	stw	r16,148(sp)
  81012c:	9823883a 	mov	r17,r19
  810130:	9021883a 	mov	r16,r18
  810134:	dd401a04 	addi	r21,sp,104
  810138:	4825883a 	mov	r18,r9
  81013c:	4027883a 	mov	r19,r8
  810140:	8009883a 	mov	r4,r16
  810144:	880b883a 	mov	r5,r17
  810148:	01800284 	movi	r6,10
  81014c:	000f883a 	mov	r7,zero
  810150:	08128740 	call	812874 <__umoddi3>
  810154:	10800c04 	addi	r2,r2,48
  810158:	ad7fffc4 	addi	r21,r21,-1
  81015c:	8009883a 	mov	r4,r16
  810160:	880b883a 	mov	r5,r17
  810164:	a8800005 	stb	r2,0(r21)
  810168:	01800284 	movi	r6,10
  81016c:	000f883a 	mov	r7,zero
  810170:	08122fc0 	call	8122fc <__udivdi3>
  810174:	1021883a 	mov	r16,r2
  810178:	10c4b03a 	or	r2,r2,r3
  81017c:	1823883a 	mov	r17,r3
  810180:	103fef1e 	bne	r2,zero,810140 <__alt_mem_onchip_mem+0xff808140>
  810184:	dc402417 	ldw	r17,144(sp)
  810188:	dc002517 	ldw	r16,148(sp)
  81018c:	9013883a 	mov	r9,r18
  810190:	9811883a 	mov	r8,r19
  810194:	da801e17 	ldw	r10,120(sp)
  810198:	5567c83a 	sub	r19,r10,r21
  81019c:	003ede06 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  8101a0:	38803fcc 	andi	r2,r7,255
  8101a4:	1080201c 	xori	r2,r2,128
  8101a8:	10bfe004 	addi	r2,r2,-128
  8101ac:	1002371e 	bne	r2,zero,810a8c <___vfiprintf_internal_r+0x1174>
  8101b0:	01000044 	movi	r4,1
  8101b4:	01c00804 	movi	r7,32
  8101b8:	80c00007 	ldb	r3,0(r16)
  8101bc:	003e3506 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  8101c0:	a5000054 	ori	r20,r20,1
  8101c4:	80c00007 	ldb	r3,0(r16)
  8101c8:	003e3206 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  8101cc:	a5002014 	ori	r20,r20,128
  8101d0:	80c00007 	ldb	r3,0(r16)
  8101d4:	003e2f06 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  8101d8:	8015883a 	mov	r10,r16
  8101dc:	0023883a 	mov	r17,zero
  8101e0:	18bff404 	addi	r2,r3,-48
  8101e4:	50c00007 	ldb	r3,0(r10)
  8101e8:	8c4002a4 	muli	r17,r17,10
  8101ec:	84000044 	addi	r16,r16,1
  8101f0:	8015883a 	mov	r10,r16
  8101f4:	1463883a 	add	r17,r2,r17
  8101f8:	18bff404 	addi	r2,r3,-48
  8101fc:	30bff92e 	bgeu	r6,r2,8101e4 <__alt_mem_onchip_mem+0xff8081e4>
  810200:	003e2506 	br	80fa98 <__alt_mem_onchip_mem+0xff807a98>
  810204:	21003fcc 	andi	r4,r4,255
  810208:	2002d41e 	bne	r4,zero,810d5c <___vfiprintf_internal_r+0x1444>
  81020c:	a5000414 	ori	r20,r20,16
  810210:	a080080c 	andi	r2,r20,32
  810214:	103fb51e 	bne	r2,zero,8100ec <__alt_mem_onchip_mem+0xff8080ec>
  810218:	a080040c 	andi	r2,r20,16
  81021c:	1001f826 	beq	r2,zero,810a00 <___vfiprintf_internal_r+0x10e8>
  810220:	da802217 	ldw	r10,136(sp)
  810224:	54800017 	ldw	r18,0(r10)
  810228:	52800104 	addi	r10,r10,4
  81022c:	da802215 	stw	r10,136(sp)
  810230:	9027d7fa 	srai	r19,r18,31
  810234:	9805883a 	mov	r2,r19
  810238:	003fb206 	br	810104 <__alt_mem_onchip_mem+0xff808104>
  81023c:	21003fcc 	andi	r4,r4,255
  810240:	2002c41e 	bne	r4,zero,810d54 <___vfiprintf_internal_r+0x143c>
  810244:	a5000414 	ori	r20,r20,16
  810248:	a080080c 	andi	r2,r20,32
  81024c:	103f5f1e 	bne	r2,zero,80ffcc <__alt_mem_onchip_mem+0xff807fcc>
  810250:	a080040c 	andi	r2,r20,16
  810254:	10020f26 	beq	r2,zero,810a94 <___vfiprintf_internal_r+0x117c>
  810258:	da802217 	ldw	r10,136(sp)
  81025c:	d8001d85 	stb	zero,118(sp)
  810260:	0027883a 	mov	r19,zero
  810264:	50800104 	addi	r2,r10,4
  810268:	54800017 	ldw	r18,0(r10)
  81026c:	48021116 	blt	r9,zero,810ab4 <___vfiprintf_internal_r+0x119c>
  810270:	00ffdfc4 	movi	r3,-129
  810274:	d8802215 	stw	r2,136(sp)
  810278:	a0e8703a 	and	r20,r20,r3
  81027c:	903f5e1e 	bne	r18,zero,80fff8 <__alt_mem_onchip_mem+0xff807ff8>
  810280:	0039883a 	mov	fp,zero
  810284:	4802a626 	beq	r9,zero,810d20 <___vfiprintf_internal_r+0x1408>
  810288:	0025883a 	mov	r18,zero
  81028c:	0027883a 	mov	r19,zero
  810290:	003f5a06 	br	80fffc <__alt_mem_onchip_mem+0xff807ffc>
  810294:	21003fcc 	andi	r4,r4,255
  810298:	20029f1e 	bne	r4,zero,810d18 <___vfiprintf_internal_r+0x1400>
  81029c:	a5000414 	ori	r20,r20,16
  8102a0:	a080080c 	andi	r2,r20,32
  8102a4:	10005e1e 	bne	r2,zero,810420 <___vfiprintf_internal_r+0xb08>
  8102a8:	a080040c 	andi	r2,r20,16
  8102ac:	1001a21e 	bne	r2,zero,810938 <___vfiprintf_internal_r+0x1020>
  8102b0:	a080100c 	andi	r2,r20,64
  8102b4:	d8001d85 	stb	zero,118(sp)
  8102b8:	da802217 	ldw	r10,136(sp)
  8102bc:	1002231e 	bne	r2,zero,810b4c <___vfiprintf_internal_r+0x1234>
  8102c0:	50800104 	addi	r2,r10,4
  8102c4:	54800017 	ldw	r18,0(r10)
  8102c8:	0027883a 	mov	r19,zero
  8102cc:	4801a00e 	bge	r9,zero,810950 <___vfiprintf_internal_r+0x1038>
  8102d0:	d8802215 	stw	r2,136(sp)
  8102d4:	0039883a 	mov	fp,zero
  8102d8:	94c4b03a 	or	r2,r18,r19
  8102dc:	103f901e 	bne	r2,zero,810120 <__alt_mem_onchip_mem+0xff808120>
  8102e0:	00800044 	movi	r2,1
  8102e4:	10803fcc 	andi	r2,r2,255
  8102e8:	00c00044 	movi	r3,1
  8102ec:	10c05926 	beq	r2,r3,810454 <___vfiprintf_internal_r+0xb3c>
  8102f0:	00c00084 	movi	r3,2
  8102f4:	10ffe41e 	bne	r2,r3,810288 <__alt_mem_onchip_mem+0xff808288>
  8102f8:	0025883a 	mov	r18,zero
  8102fc:	0027883a 	mov	r19,zero
  810300:	00013d06 	br	8107f8 <___vfiprintf_internal_r+0xee0>
  810304:	21003fcc 	andi	r4,r4,255
  810308:	2002811e 	bne	r4,zero,810d10 <___vfiprintf_internal_r+0x13f8>
  81030c:	008020b4 	movhi	r2,130
  810310:	10a0d104 	addi	r2,r2,-31932
  810314:	d8802615 	stw	r2,152(sp)
  810318:	a080080c 	andi	r2,r20,32
  81031c:	103f561e 	bne	r2,zero,810078 <__alt_mem_onchip_mem+0xff808078>
  810320:	a080040c 	andi	r2,r20,16
  810324:	1001d126 	beq	r2,zero,810a6c <___vfiprintf_internal_r+0x1154>
  810328:	da802217 	ldw	r10,136(sp)
  81032c:	0027883a 	mov	r19,zero
  810330:	54800017 	ldw	r18,0(r10)
  810334:	52800104 	addi	r10,r10,4
  810338:	da802215 	stw	r10,136(sp)
  81033c:	003f5306 	br	81008c <__alt_mem_onchip_mem+0xff80808c>
  810340:	da802217 	ldw	r10,136(sp)
  810344:	d8001d85 	stb	zero,118(sp)
  810348:	55400017 	ldw	r21,0(r10)
  81034c:	50c00104 	addi	r3,r10,4
  810350:	a8024226 	beq	r21,zero,810c5c <___vfiprintf_internal_r+0x1344>
  810354:	48021816 	blt	r9,zero,810bb8 <___vfiprintf_internal_r+0x12a0>
  810358:	480d883a 	mov	r6,r9
  81035c:	000b883a 	mov	r5,zero
  810360:	a809883a 	mov	r4,r21
  810364:	d8c02a15 	stw	r3,168(sp)
  810368:	da002b15 	stw	r8,172(sp)
  81036c:	da402c15 	stw	r9,176(sp)
  810370:	080e13c0 	call	80e13c <memchr>
  810374:	d8c02a17 	ldw	r3,168(sp)
  810378:	da002b17 	ldw	r8,172(sp)
  81037c:	da402c17 	ldw	r9,176(sp)
  810380:	10024826 	beq	r2,zero,810ca4 <___vfiprintf_internal_r+0x138c>
  810384:	1567c83a 	sub	r19,r2,r21
  810388:	df001d83 	ldbu	fp,118(sp)
  81038c:	d8c02215 	stw	r3,136(sp)
  810390:	0013883a 	mov	r9,zero
  810394:	003e6006 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  810398:	21003fcc 	andi	r4,r4,255
  81039c:	203fc026 	beq	r4,zero,8102a0 <__alt_mem_onchip_mem+0xff8082a0>
  8103a0:	d9c01d85 	stb	r7,118(sp)
  8103a4:	003fbe06 	br	8102a0 <__alt_mem_onchip_mem+0xff8082a0>
  8103a8:	da802217 	ldw	r10,136(sp)
  8103ac:	54400017 	ldw	r17,0(r10)
  8103b0:	50800104 	addi	r2,r10,4
  8103b4:	883e3b16 	blt	r17,zero,80fca4 <__alt_mem_onchip_mem+0xff807ca4>
  8103b8:	d8802215 	stw	r2,136(sp)
  8103bc:	80c00007 	ldb	r3,0(r16)
  8103c0:	003db406 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  8103c4:	01000044 	movi	r4,1
  8103c8:	01c00ac4 	movi	r7,43
  8103cc:	80c00007 	ldb	r3,0(r16)
  8103d0:	003db006 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  8103d4:	80c00007 	ldb	r3,0(r16)
  8103d8:	82800044 	addi	r10,r16,1
  8103dc:	1b423c26 	beq	r3,r13,810cd0 <___vfiprintf_internal_r+0x13b8>
  8103e0:	18bff404 	addi	r2,r3,-48
  8103e4:	0013883a 	mov	r9,zero
  8103e8:	30822b36 	bltu	r6,r2,810c98 <___vfiprintf_internal_r+0x1380>
  8103ec:	50c00007 	ldb	r3,0(r10)
  8103f0:	4a4002a4 	muli	r9,r9,10
  8103f4:	54000044 	addi	r16,r10,1
  8103f8:	8015883a 	mov	r10,r16
  8103fc:	4893883a 	add	r9,r9,r2
  810400:	18bff404 	addi	r2,r3,-48
  810404:	30bff92e 	bgeu	r6,r2,8103ec <__alt_mem_onchip_mem+0xff8083ec>
  810408:	483da30e 	bge	r9,zero,80fa98 <__alt_mem_onchip_mem+0xff807a98>
  81040c:	027fffc4 	movi	r9,-1
  810410:	003da106 	br	80fa98 <__alt_mem_onchip_mem+0xff807a98>
  810414:	a5001014 	ori	r20,r20,64
  810418:	80c00007 	ldb	r3,0(r16)
  81041c:	003d9d06 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  810420:	da802217 	ldw	r10,136(sp)
  810424:	d8001d85 	stb	zero,118(sp)
  810428:	50c00204 	addi	r3,r10,8
  81042c:	54800017 	ldw	r18,0(r10)
  810430:	54c00117 	ldw	r19,4(r10)
  810434:	4801ca16 	blt	r9,zero,810b60 <___vfiprintf_internal_r+0x1248>
  810438:	013fdfc4 	movi	r4,-129
  81043c:	94c4b03a 	or	r2,r18,r19
  810440:	d8c02215 	stw	r3,136(sp)
  810444:	a128703a 	and	r20,r20,r4
  810448:	0039883a 	mov	fp,zero
  81044c:	103f341e 	bne	r2,zero,810120 <__alt_mem_onchip_mem+0xff808120>
  810450:	483e2e26 	beq	r9,zero,80fd0c <__alt_mem_onchip_mem+0xff807d0c>
  810454:	0025883a 	mov	r18,zero
  810458:	94800c04 	addi	r18,r18,48
  81045c:	dc8019c5 	stb	r18,103(sp)
  810460:	dcc02717 	ldw	r19,156(sp)
  810464:	dd4019c4 	addi	r21,sp,103
  810468:	003e2b06 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  81046c:	21003fcc 	andi	r4,r4,255
  810470:	2002361e 	bne	r4,zero,810d4c <___vfiprintf_internal_r+0x1434>
  810474:	1801c126 	beq	r3,zero,810b7c <___vfiprintf_internal_r+0x1264>
  810478:	04800044 	movi	r18,1
  81047c:	d8c01005 	stb	r3,64(sp)
  810480:	d8001d85 	stb	zero,118(sp)
  810484:	9027883a 	mov	r19,r18
  810488:	dd401004 	addi	r21,sp,64
  81048c:	003f1106 	br	8100d4 <__alt_mem_onchip_mem+0xff8080d4>
  810490:	d9402117 	ldw	r5,132(sp)
  810494:	d9002017 	ldw	r4,128(sp)
  810498:	d9801a04 	addi	r6,sp,104
  81049c:	d9c02b15 	stw	r7,172(sp)
  8104a0:	dbc02a15 	stw	r15,168(sp)
  8104a4:	080f8040 	call	80f804 <__sprint_r.part.0>
  8104a8:	d9c02b17 	ldw	r7,172(sp)
  8104ac:	dbc02a17 	ldw	r15,168(sp)
  8104b0:	10006d1e 	bne	r2,zero,810668 <___vfiprintf_internal_r+0xd50>
  8104b4:	d9801b17 	ldw	r6,108(sp)
  8104b8:	d8801c17 	ldw	r2,112(sp)
  8104bc:	d811883a 	mov	r8,sp
  8104c0:	31400044 	addi	r5,r6,1
  8104c4:	003e3306 	br	80fd94 <__alt_mem_onchip_mem+0xff807d94>
  8104c8:	d9401b17 	ldw	r5,108(sp)
  8104cc:	d8801c17 	ldw	r2,112(sp)
  8104d0:	29000044 	addi	r4,r5,1
  8104d4:	d8c01d87 	ldb	r3,118(sp)
  8104d8:	183e4d26 	beq	r3,zero,80fe10 <__alt_mem_onchip_mem+0xff807e10>
  8104dc:	00c00044 	movi	r3,1
  8104e0:	d9401d84 	addi	r5,sp,118
  8104e4:	10c5883a 	add	r2,r2,r3
  8104e8:	41400015 	stw	r5,0(r8)
  8104ec:	40c00115 	stw	r3,4(r8)
  8104f0:	d8801c15 	stw	r2,112(sp)
  8104f4:	d9001b15 	stw	r4,108(sp)
  8104f8:	014001c4 	movi	r5,7
  8104fc:	2900a90e 	bge	r5,r4,8107a4 <___vfiprintf_internal_r+0xe8c>
  810500:	1000da1e 	bne	r2,zero,81086c <___vfiprintf_internal_r+0xf54>
  810504:	7000ab1e 	bne	r14,zero,8107b4 <___vfiprintf_internal_r+0xe9c>
  810508:	000b883a 	mov	r5,zero
  81050c:	1809883a 	mov	r4,r3
  810510:	d811883a 	mov	r8,sp
  810514:	00c02004 	movi	r3,128
  810518:	e0fe4d26 	beq	fp,r3,80fe50 <__alt_mem_onchip_mem+0xff807e50>
  81051c:	4cf9c83a 	sub	fp,r9,r19
  810520:	073e7b0e 	bge	zero,fp,80ff10 <__alt_mem_onchip_mem+0xff807f10>
  810524:	01c00404 	movi	r7,16
  810528:	3f01900e 	bge	r7,fp,810b6c <___vfiprintf_internal_r+0x1254>
  81052c:	00c020b4 	movhi	r3,130
  810530:	18e13704 	addi	r3,r3,-31524
  810534:	d8c02415 	stw	r3,144(sp)
  810538:	034001c4 	movi	r13,7
  81053c:	00000506 	br	810554 <___vfiprintf_internal_r+0xc3c>
  810540:	29000084 	addi	r4,r5,2
  810544:	42000204 	addi	r8,r8,8
  810548:	180b883a 	mov	r5,r3
  81054c:	e73ffc04 	addi	fp,fp,-16
  810550:	3f000d0e 	bge	r7,fp,810588 <___vfiprintf_internal_r+0xc70>
  810554:	10800404 	addi	r2,r2,16
  810558:	28c00044 	addi	r3,r5,1
  81055c:	45c00015 	stw	r23,0(r8)
  810560:	41c00115 	stw	r7,4(r8)
  810564:	d8801c15 	stw	r2,112(sp)
  810568:	d8c01b15 	stw	r3,108(sp)
  81056c:	68fff40e 	bge	r13,r3,810540 <__alt_mem_onchip_mem+0xff808540>
  810570:	1000101e 	bne	r2,zero,8105b4 <___vfiprintf_internal_r+0xc9c>
  810574:	e73ffc04 	addi	fp,fp,-16
  810578:	01000044 	movi	r4,1
  81057c:	000b883a 	mov	r5,zero
  810580:	d811883a 	mov	r8,sp
  810584:	3f3ff316 	blt	r7,fp,810554 <__alt_mem_onchip_mem+0xff808554>
  810588:	da802417 	ldw	r10,144(sp)
  81058c:	1705883a 	add	r2,r2,fp
  810590:	47000115 	stw	fp,4(r8)
  810594:	42800015 	stw	r10,0(r8)
  810598:	d8801c15 	stw	r2,112(sp)
  81059c:	d9001b15 	stw	r4,108(sp)
  8105a0:	00c001c4 	movi	r3,7
  8105a4:	19003616 	blt	r3,r4,810680 <___vfiprintf_internal_r+0xd68>
  8105a8:	42000204 	addi	r8,r8,8
  8105ac:	21000044 	addi	r4,r4,1
  8105b0:	003e5706 	br	80ff10 <__alt_mem_onchip_mem+0xff807f10>
  8105b4:	d9402117 	ldw	r5,132(sp)
  8105b8:	d9002017 	ldw	r4,128(sp)
  8105bc:	d9801a04 	addi	r6,sp,104
  8105c0:	d9c02b15 	stw	r7,172(sp)
  8105c4:	db402a15 	stw	r13,168(sp)
  8105c8:	080f8040 	call	80f804 <__sprint_r.part.0>
  8105cc:	d9c02b17 	ldw	r7,172(sp)
  8105d0:	db402a17 	ldw	r13,168(sp)
  8105d4:	1000241e 	bne	r2,zero,810668 <___vfiprintf_internal_r+0xd50>
  8105d8:	d9401b17 	ldw	r5,108(sp)
  8105dc:	d8801c17 	ldw	r2,112(sp)
  8105e0:	d811883a 	mov	r8,sp
  8105e4:	29000044 	addi	r4,r5,1
  8105e8:	003fd806 	br	81054c <__alt_mem_onchip_mem+0xff80854c>
  8105ec:	d9401b17 	ldw	r5,108(sp)
  8105f0:	00c020b4 	movhi	r3,130
  8105f4:	18e13b04 	addi	r3,r3,-31508
  8105f8:	d8c02415 	stw	r3,144(sp)
  8105fc:	29400044 	addi	r5,r5,1
  810600:	d8c02417 	ldw	r3,144(sp)
  810604:	14c5883a 	add	r2,r2,r19
  810608:	44c00115 	stw	r19,4(r8)
  81060c:	40c00015 	stw	r3,0(r8)
  810610:	d8801c15 	stw	r2,112(sp)
  810614:	d9401b15 	stw	r5,108(sp)
  810618:	00c001c4 	movi	r3,7
  81061c:	1940070e 	bge	r3,r5,81063c <___vfiprintf_internal_r+0xd24>
  810620:	103e4826 	beq	r2,zero,80ff44 <__alt_mem_onchip_mem+0xff807f44>
  810624:	d9402117 	ldw	r5,132(sp)
  810628:	d9002017 	ldw	r4,128(sp)
  81062c:	d9801a04 	addi	r6,sp,104
  810630:	080f8040 	call	80f804 <__sprint_r.part.0>
  810634:	10000c1e 	bne	r2,zero,810668 <___vfiprintf_internal_r+0xd50>
  810638:	d8801c17 	ldw	r2,112(sp)
  81063c:	8c80010e 	bge	r17,r18,810644 <___vfiprintf_internal_r+0xd2c>
  810640:	9023883a 	mov	r17,r18
  810644:	da802317 	ldw	r10,140(sp)
  810648:	5455883a 	add	r10,r10,r17
  81064c:	da802315 	stw	r10,140(sp)
  810650:	103e4126 	beq	r2,zero,80ff58 <__alt_mem_onchip_mem+0xff807f58>
  810654:	d9402117 	ldw	r5,132(sp)
  810658:	d9002017 	ldw	r4,128(sp)
  81065c:	d9801a04 	addi	r6,sp,104
  810660:	080f8040 	call	80f804 <__sprint_r.part.0>
  810664:	103e3c26 	beq	r2,zero,80ff58 <__alt_mem_onchip_mem+0xff807f58>
  810668:	dd002117 	ldw	r20,132(sp)
  81066c:	a080030b 	ldhu	r2,12(r20)
  810670:	1080100c 	andi	r2,r2,64
  810674:	1001231e 	bne	r2,zero,810b04 <___vfiprintf_internal_r+0x11ec>
  810678:	d8802317 	ldw	r2,140(sp)
  81067c:	003d7b06 	br	80fc6c <__alt_mem_onchip_mem+0xff807c6c>
  810680:	1000991e 	bne	r2,zero,8108e8 <___vfiprintf_internal_r+0xfd0>
  810684:	00c00044 	movi	r3,1
  810688:	9805883a 	mov	r2,r19
  81068c:	dd400015 	stw	r21,0(sp)
  810690:	dcc00115 	stw	r19,4(sp)
  810694:	dcc01c15 	stw	r19,112(sp)
  810698:	d8c01b15 	stw	r3,108(sp)
  81069c:	d811883a 	mov	r8,sp
  8106a0:	42000204 	addi	r8,r8,8
  8106a4:	a2c0010c 	andi	r11,r20,4
  8106a8:	583fe426 	beq	r11,zero,81063c <__alt_mem_onchip_mem+0xff80863c>
  8106ac:	8ca7c83a 	sub	r19,r17,r18
  8106b0:	04ffe20e 	bge	zero,r19,81063c <__alt_mem_onchip_mem+0xff80863c>
  8106b4:	01c00404 	movi	r7,16
  8106b8:	3cffcc0e 	bge	r7,r19,8105ec <__alt_mem_onchip_mem+0xff8085ec>
  8106bc:	028020b4 	movhi	r10,130
  8106c0:	52a13b04 	addi	r10,r10,-31508
  8106c4:	d9001b17 	ldw	r4,108(sp)
  8106c8:	da802415 	stw	r10,144(sp)
  8106cc:	382b883a 	mov	r21,r7
  8106d0:	050001c4 	movi	r20,7
  8106d4:	df002017 	ldw	fp,128(sp)
  8106d8:	00000506 	br	8106f0 <___vfiprintf_internal_r+0xdd8>
  8106dc:	21400084 	addi	r5,r4,2
  8106e0:	42000204 	addi	r8,r8,8
  8106e4:	1809883a 	mov	r4,r3
  8106e8:	9cfffc04 	addi	r19,r19,-16
  8106ec:	acffc40e 	bge	r21,r19,810600 <__alt_mem_onchip_mem+0xff808600>
  8106f0:	10800404 	addi	r2,r2,16
  8106f4:	20c00044 	addi	r3,r4,1
  8106f8:	45800015 	stw	r22,0(r8)
  8106fc:	45400115 	stw	r21,4(r8)
  810700:	d8801c15 	stw	r2,112(sp)
  810704:	d8c01b15 	stw	r3,108(sp)
  810708:	a0fff40e 	bge	r20,r3,8106dc <__alt_mem_onchip_mem+0xff8086dc>
  81070c:	1000041e 	bne	r2,zero,810720 <___vfiprintf_internal_r+0xe08>
  810710:	01400044 	movi	r5,1
  810714:	0009883a 	mov	r4,zero
  810718:	d811883a 	mov	r8,sp
  81071c:	003ff206 	br	8106e8 <__alt_mem_onchip_mem+0xff8086e8>
  810720:	d9402117 	ldw	r5,132(sp)
  810724:	d9801a04 	addi	r6,sp,104
  810728:	e009883a 	mov	r4,fp
  81072c:	080f8040 	call	80f804 <__sprint_r.part.0>
  810730:	103fcd1e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  810734:	d9001b17 	ldw	r4,108(sp)
  810738:	d8801c17 	ldw	r2,112(sp)
  81073c:	d811883a 	mov	r8,sp
  810740:	21400044 	addi	r5,r4,1
  810744:	003fe806 	br	8106e8 <__alt_mem_onchip_mem+0xff8086e8>
  810748:	d9402117 	ldw	r5,132(sp)
  81074c:	d9002017 	ldw	r4,128(sp)
  810750:	d9801a04 	addi	r6,sp,104
  810754:	d9c02b15 	stw	r7,172(sp)
  810758:	db402a15 	stw	r13,168(sp)
  81075c:	080f8040 	call	80f804 <__sprint_r.part.0>
  810760:	d9c02b17 	ldw	r7,172(sp)
  810764:	db402a17 	ldw	r13,168(sp)
  810768:	103fbf1e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  81076c:	d9401b17 	ldw	r5,108(sp)
  810770:	d8801c17 	ldw	r2,112(sp)
  810774:	d811883a 	mov	r8,sp
  810778:	29800044 	addi	r6,r5,1
  81077c:	003dc406 	br	80fe90 <__alt_mem_onchip_mem+0xff807e90>
  810780:	1000d21e 	bne	r2,zero,810acc <___vfiprintf_internal_r+0x11b4>
  810784:	d8c01d87 	ldb	r3,118(sp)
  810788:	18009526 	beq	r3,zero,8109e0 <___vfiprintf_internal_r+0x10c8>
  81078c:	00800044 	movi	r2,1
  810790:	d8c01d84 	addi	r3,sp,118
  810794:	1009883a 	mov	r4,r2
  810798:	d8c00015 	stw	r3,0(sp)
  81079c:	d8800115 	stw	r2,4(sp)
  8107a0:	d811883a 	mov	r8,sp
  8107a4:	200b883a 	mov	r5,r4
  8107a8:	42000204 	addi	r8,r8,8
  8107ac:	21000044 	addi	r4,r4,1
  8107b0:	003d9706 	br	80fe10 <__alt_mem_onchip_mem+0xff807e10>
  8107b4:	d9001d04 	addi	r4,sp,116
  8107b8:	00800084 	movi	r2,2
  8107bc:	d9000015 	stw	r4,0(sp)
  8107c0:	d8800115 	stw	r2,4(sp)
  8107c4:	1809883a 	mov	r4,r3
  8107c8:	d811883a 	mov	r8,sp
  8107cc:	200b883a 	mov	r5,r4
  8107d0:	42000204 	addi	r8,r8,8
  8107d4:	21000044 	addi	r4,r4,1
  8107d8:	003f4e06 	br	810514 <__alt_mem_onchip_mem+0xff808514>
  8107dc:	d8001d85 	stb	zero,118(sp)
  8107e0:	48005016 	blt	r9,zero,810924 <___vfiprintf_internal_r+0x100c>
  8107e4:	00ffdfc4 	movi	r3,-129
  8107e8:	94c4b03a 	or	r2,r18,r19
  8107ec:	a0e8703a 	and	r20,r20,r3
  8107f0:	103d4426 	beq	r2,zero,80fd04 <__alt_mem_onchip_mem+0xff807d04>
  8107f4:	0039883a 	mov	fp,zero
  8107f8:	d9002617 	ldw	r4,152(sp)
  8107fc:	dd401a04 	addi	r21,sp,104
  810800:	908003cc 	andi	r2,r18,15
  810804:	9806973a 	slli	r3,r19,28
  810808:	2085883a 	add	r2,r4,r2
  81080c:	9024d13a 	srli	r18,r18,4
  810810:	10800003 	ldbu	r2,0(r2)
  810814:	9826d13a 	srli	r19,r19,4
  810818:	ad7fffc4 	addi	r21,r21,-1
  81081c:	1ca4b03a 	or	r18,r3,r18
  810820:	a8800005 	stb	r2,0(r21)
  810824:	94c4b03a 	or	r2,r18,r19
  810828:	103ff51e 	bne	r2,zero,810800 <__alt_mem_onchip_mem+0xff808800>
  81082c:	003e5906 	br	810194 <__alt_mem_onchip_mem+0xff808194>
  810830:	d9402117 	ldw	r5,132(sp)
  810834:	d9002017 	ldw	r4,128(sp)
  810838:	d9801a04 	addi	r6,sp,104
  81083c:	080f8040 	call	80f804 <__sprint_r.part.0>
  810840:	103f891e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  810844:	d8801c17 	ldw	r2,112(sp)
  810848:	d811883a 	mov	r8,sp
  81084c:	003f9506 	br	8106a4 <__alt_mem_onchip_mem+0xff8086a4>
  810850:	d9402117 	ldw	r5,132(sp)
  810854:	d9002017 	ldw	r4,128(sp)
  810858:	d9801a04 	addi	r6,sp,104
  81085c:	080f8040 	call	80f804 <__sprint_r.part.0>
  810860:	103f811e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  810864:	d811883a 	mov	r8,sp
  810868:	003ced06 	br	80fc20 <__alt_mem_onchip_mem+0xff807c20>
  81086c:	d9402117 	ldw	r5,132(sp)
  810870:	d9002017 	ldw	r4,128(sp)
  810874:	d9801a04 	addi	r6,sp,104
  810878:	da402c15 	stw	r9,176(sp)
  81087c:	db802a15 	stw	r14,168(sp)
  810880:	080f8040 	call	80f804 <__sprint_r.part.0>
  810884:	da402c17 	ldw	r9,176(sp)
  810888:	db802a17 	ldw	r14,168(sp)
  81088c:	103f761e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  810890:	d9401b17 	ldw	r5,108(sp)
  810894:	d8801c17 	ldw	r2,112(sp)
  810898:	d811883a 	mov	r8,sp
  81089c:	29000044 	addi	r4,r5,1
  8108a0:	003d5b06 	br	80fe10 <__alt_mem_onchip_mem+0xff807e10>
  8108a4:	d9402117 	ldw	r5,132(sp)
  8108a8:	d9002017 	ldw	r4,128(sp)
  8108ac:	d9801a04 	addi	r6,sp,104
  8108b0:	da402c15 	stw	r9,176(sp)
  8108b4:	080f8040 	call	80f804 <__sprint_r.part.0>
  8108b8:	da402c17 	ldw	r9,176(sp)
  8108bc:	103f6a1e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  8108c0:	d9401b17 	ldw	r5,108(sp)
  8108c4:	d8801c17 	ldw	r2,112(sp)
  8108c8:	d811883a 	mov	r8,sp
  8108cc:	29000044 	addi	r4,r5,1
  8108d0:	003f1006 	br	810514 <__alt_mem_onchip_mem+0xff808514>
  8108d4:	1000c31e 	bne	r2,zero,810be4 <___vfiprintf_internal_r+0x12cc>
  8108d8:	01000044 	movi	r4,1
  8108dc:	000b883a 	mov	r5,zero
  8108e0:	d811883a 	mov	r8,sp
  8108e4:	003f0d06 	br	81051c <__alt_mem_onchip_mem+0xff80851c>
  8108e8:	d9402117 	ldw	r5,132(sp)
  8108ec:	d9002017 	ldw	r4,128(sp)
  8108f0:	d9801a04 	addi	r6,sp,104
  8108f4:	080f8040 	call	80f804 <__sprint_r.part.0>
  8108f8:	103f5b1e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  8108fc:	d9001b17 	ldw	r4,108(sp)
  810900:	d8801c17 	ldw	r2,112(sp)
  810904:	d811883a 	mov	r8,sp
  810908:	21000044 	addi	r4,r4,1
  81090c:	003d8006 	br	80ff10 <__alt_mem_onchip_mem+0xff807f10>
  810910:	010020b4 	movhi	r4,130
  810914:	2120d604 	addi	r4,r4,-31912
  810918:	d9002615 	stw	r4,152(sp)
  81091c:	d8c02215 	stw	r3,136(sp)
  810920:	1029883a 	mov	r20,r2
  810924:	94c4b03a 	or	r2,r18,r19
  810928:	103fb21e 	bne	r2,zero,8107f4 <__alt_mem_onchip_mem+0xff8087f4>
  81092c:	0039883a 	mov	fp,zero
  810930:	00800084 	movi	r2,2
  810934:	003e6b06 	br	8102e4 <__alt_mem_onchip_mem+0xff8082e4>
  810938:	da802217 	ldw	r10,136(sp)
  81093c:	d8001d85 	stb	zero,118(sp)
  810940:	0027883a 	mov	r19,zero
  810944:	50800104 	addi	r2,r10,4
  810948:	54800017 	ldw	r18,0(r10)
  81094c:	483e6016 	blt	r9,zero,8102d0 <__alt_mem_onchip_mem+0xff8082d0>
  810950:	00ffdfc4 	movi	r3,-129
  810954:	d8802215 	stw	r2,136(sp)
  810958:	a0e8703a 	and	r20,r20,r3
  81095c:	0039883a 	mov	fp,zero
  810960:	903ebb26 	beq	r18,zero,810450 <__alt_mem_onchip_mem+0xff808450>
  810964:	00800244 	movi	r2,9
  810968:	14bdee36 	bltu	r2,r18,810124 <__alt_mem_onchip_mem+0xff808124>
  81096c:	003eba06 	br	810458 <__alt_mem_onchip_mem+0xff808458>
  810970:	00800c04 	movi	r2,48
  810974:	d8c01d45 	stb	r3,117(sp)
  810978:	d8801d05 	stb	r2,116(sp)
  81097c:	d8001d85 	stb	zero,118(sp)
  810980:	a0c00094 	ori	r3,r20,2
  810984:	4800a916 	blt	r9,zero,810c2c <___vfiprintf_internal_r+0x1314>
  810988:	00bfdfc4 	movi	r2,-129
  81098c:	a096703a 	and	r11,r20,r2
  810990:	5d000094 	ori	r20,r11,2
  810994:	0039883a 	mov	fp,zero
  810998:	003f9706 	br	8107f8 <__alt_mem_onchip_mem+0xff8087f8>
  81099c:	8025883a 	mov	r18,r16
  8109a0:	003c2e06 	br	80fa5c <__alt_mem_onchip_mem+0xff807a5c>
  8109a4:	008020b4 	movhi	r2,130
  8109a8:	10a0d604 	addi	r2,r2,-31912
  8109ac:	0039883a 	mov	fp,zero
  8109b0:	d8802615 	stw	r2,152(sp)
  8109b4:	003f9006 	br	8107f8 <__alt_mem_onchip_mem+0xff8087f8>
  8109b8:	04a5c83a 	sub	r18,zero,r18
  8109bc:	07000b44 	movi	fp,45
  8109c0:	9004c03a 	cmpne	r2,r18,zero
  8109c4:	04e7c83a 	sub	r19,zero,r19
  8109c8:	df001d85 	stb	fp,118(sp)
  8109cc:	98a7c83a 	sub	r19,r19,r2
  8109d0:	48009f16 	blt	r9,zero,810c50 <___vfiprintf_internal_r+0x1338>
  8109d4:	00bfdfc4 	movi	r2,-129
  8109d8:	a0a8703a 	and	r20,r20,r2
  8109dc:	003dd006 	br	810120 <__alt_mem_onchip_mem+0xff808120>
  8109e0:	70004c26 	beq	r14,zero,810b14 <___vfiprintf_internal_r+0x11fc>
  8109e4:	00800084 	movi	r2,2
  8109e8:	d8c01d04 	addi	r3,sp,116
  8109ec:	d8c00015 	stw	r3,0(sp)
  8109f0:	d8800115 	stw	r2,4(sp)
  8109f4:	01000044 	movi	r4,1
  8109f8:	d811883a 	mov	r8,sp
  8109fc:	003f7306 	br	8107cc <__alt_mem_onchip_mem+0xff8087cc>
  810a00:	a080100c 	andi	r2,r20,64
  810a04:	da802217 	ldw	r10,136(sp)
  810a08:	103e0626 	beq	r2,zero,810224 <__alt_mem_onchip_mem+0xff808224>
  810a0c:	5480000f 	ldh	r18,0(r10)
  810a10:	52800104 	addi	r10,r10,4
  810a14:	da802215 	stw	r10,136(sp)
  810a18:	9027d7fa 	srai	r19,r18,31
  810a1c:	9805883a 	mov	r2,r19
  810a20:	003db806 	br	810104 <__alt_mem_onchip_mem+0xff808104>
  810a24:	a080040c 	andi	r2,r20,16
  810a28:	1000091e 	bne	r2,zero,810a50 <___vfiprintf_internal_r+0x1138>
  810a2c:	a2c0100c 	andi	r11,r20,64
  810a30:	58000726 	beq	r11,zero,810a50 <___vfiprintf_internal_r+0x1138>
  810a34:	da802217 	ldw	r10,136(sp)
  810a38:	50800017 	ldw	r2,0(r10)
  810a3c:	52800104 	addi	r10,r10,4
  810a40:	da802215 	stw	r10,136(sp)
  810a44:	da802317 	ldw	r10,140(sp)
  810a48:	1280000d 	sth	r10,0(r2)
  810a4c:	003be706 	br	80f9ec <__alt_mem_onchip_mem+0xff8079ec>
  810a50:	da802217 	ldw	r10,136(sp)
  810a54:	50800017 	ldw	r2,0(r10)
  810a58:	52800104 	addi	r10,r10,4
  810a5c:	da802215 	stw	r10,136(sp)
  810a60:	da802317 	ldw	r10,140(sp)
  810a64:	12800015 	stw	r10,0(r2)
  810a68:	003be006 	br	80f9ec <__alt_mem_onchip_mem+0xff8079ec>
  810a6c:	a080100c 	andi	r2,r20,64
  810a70:	da802217 	ldw	r10,136(sp)
  810a74:	10003026 	beq	r2,zero,810b38 <___vfiprintf_internal_r+0x1220>
  810a78:	5480000b 	ldhu	r18,0(r10)
  810a7c:	52800104 	addi	r10,r10,4
  810a80:	0027883a 	mov	r19,zero
  810a84:	da802215 	stw	r10,136(sp)
  810a88:	003d8006 	br	81008c <__alt_mem_onchip_mem+0xff80808c>
  810a8c:	80c00007 	ldb	r3,0(r16)
  810a90:	003c0006 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  810a94:	a080100c 	andi	r2,r20,64
  810a98:	d8001d85 	stb	zero,118(sp)
  810a9c:	da802217 	ldw	r10,136(sp)
  810aa0:	1000201e 	bne	r2,zero,810b24 <___vfiprintf_internal_r+0x120c>
  810aa4:	50800104 	addi	r2,r10,4
  810aa8:	54800017 	ldw	r18,0(r10)
  810aac:	0027883a 	mov	r19,zero
  810ab0:	483def0e 	bge	r9,zero,810270 <__alt_mem_onchip_mem+0xff808270>
  810ab4:	94c6b03a 	or	r3,r18,r19
  810ab8:	d8802215 	stw	r2,136(sp)
  810abc:	183d4e1e 	bne	r3,zero,80fff8 <__alt_mem_onchip_mem+0xff807ff8>
  810ac0:	0039883a 	mov	fp,zero
  810ac4:	0005883a 	mov	r2,zero
  810ac8:	003e0606 	br	8102e4 <__alt_mem_onchip_mem+0xff8082e4>
  810acc:	d9402117 	ldw	r5,132(sp)
  810ad0:	d9002017 	ldw	r4,128(sp)
  810ad4:	d9801a04 	addi	r6,sp,104
  810ad8:	da402c15 	stw	r9,176(sp)
  810adc:	db802a15 	stw	r14,168(sp)
  810ae0:	080f8040 	call	80f804 <__sprint_r.part.0>
  810ae4:	da402c17 	ldw	r9,176(sp)
  810ae8:	db802a17 	ldw	r14,168(sp)
  810aec:	103ede1e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  810af0:	d9401b17 	ldw	r5,108(sp)
  810af4:	d8801c17 	ldw	r2,112(sp)
  810af8:	d811883a 	mov	r8,sp
  810afc:	29000044 	addi	r4,r5,1
  810b00:	003e7406 	br	8104d4 <__alt_mem_onchip_mem+0xff8084d4>
  810b04:	00bfffc4 	movi	r2,-1
  810b08:	003c5806 	br	80fc6c <__alt_mem_onchip_mem+0xff807c6c>
  810b0c:	d811883a 	mov	r8,sp
  810b10:	003ee806 	br	8106b4 <__alt_mem_onchip_mem+0xff8086b4>
  810b14:	000b883a 	mov	r5,zero
  810b18:	01000044 	movi	r4,1
  810b1c:	d811883a 	mov	r8,sp
  810b20:	003e7c06 	br	810514 <__alt_mem_onchip_mem+0xff808514>
  810b24:	50800104 	addi	r2,r10,4
  810b28:	5480000b 	ldhu	r18,0(r10)
  810b2c:	0027883a 	mov	r19,zero
  810b30:	483dcf0e 	bge	r9,zero,810270 <__alt_mem_onchip_mem+0xff808270>
  810b34:	003fdf06 	br	810ab4 <__alt_mem_onchip_mem+0xff808ab4>
  810b38:	54800017 	ldw	r18,0(r10)
  810b3c:	52800104 	addi	r10,r10,4
  810b40:	0027883a 	mov	r19,zero
  810b44:	da802215 	stw	r10,136(sp)
  810b48:	003d5006 	br	81008c <__alt_mem_onchip_mem+0xff80808c>
  810b4c:	50800104 	addi	r2,r10,4
  810b50:	5480000b 	ldhu	r18,0(r10)
  810b54:	0027883a 	mov	r19,zero
  810b58:	483f7d0e 	bge	r9,zero,810950 <__alt_mem_onchip_mem+0xff808950>
  810b5c:	003ddc06 	br	8102d0 <__alt_mem_onchip_mem+0xff8082d0>
  810b60:	d8c02215 	stw	r3,136(sp)
  810b64:	0039883a 	mov	fp,zero
  810b68:	003ddb06 	br	8102d8 <__alt_mem_onchip_mem+0xff8082d8>
  810b6c:	028020b4 	movhi	r10,130
  810b70:	52a13704 	addi	r10,r10,-31524
  810b74:	da802415 	stw	r10,144(sp)
  810b78:	003e8306 	br	810588 <__alt_mem_onchip_mem+0xff808588>
  810b7c:	d8801c17 	ldw	r2,112(sp)
  810b80:	dd002117 	ldw	r20,132(sp)
  810b84:	103eb926 	beq	r2,zero,81066c <__alt_mem_onchip_mem+0xff80866c>
  810b88:	d9002017 	ldw	r4,128(sp)
  810b8c:	d9801a04 	addi	r6,sp,104
  810b90:	a00b883a 	mov	r5,r20
  810b94:	080f8040 	call	80f804 <__sprint_r.part.0>
  810b98:	003eb406 	br	81066c <__alt_mem_onchip_mem+0xff80866c>
  810b9c:	80c00043 	ldbu	r3,1(r16)
  810ba0:	a5000814 	ori	r20,r20,32
  810ba4:	84000044 	addi	r16,r16,1
  810ba8:	18c03fcc 	andi	r3,r3,255
  810bac:	18c0201c 	xori	r3,r3,128
  810bb0:	18ffe004 	addi	r3,r3,-128
  810bb4:	003bb706 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  810bb8:	a809883a 	mov	r4,r21
  810bbc:	d8c02a15 	stw	r3,168(sp)
  810bc0:	da002b15 	stw	r8,172(sp)
  810bc4:	080f76c0 	call	80f76c <strlen>
  810bc8:	d8c02a17 	ldw	r3,168(sp)
  810bcc:	1027883a 	mov	r19,r2
  810bd0:	df001d83 	ldbu	fp,118(sp)
  810bd4:	d8c02215 	stw	r3,136(sp)
  810bd8:	0013883a 	mov	r9,zero
  810bdc:	da002b17 	ldw	r8,172(sp)
  810be0:	003c4d06 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  810be4:	d9402117 	ldw	r5,132(sp)
  810be8:	d9002017 	ldw	r4,128(sp)
  810bec:	d9801a04 	addi	r6,sp,104
  810bf0:	da402c15 	stw	r9,176(sp)
  810bf4:	080f8040 	call	80f804 <__sprint_r.part.0>
  810bf8:	da402c17 	ldw	r9,176(sp)
  810bfc:	103e9a1e 	bne	r2,zero,810668 <__alt_mem_onchip_mem+0xff808668>
  810c00:	d9401b17 	ldw	r5,108(sp)
  810c04:	d8801c17 	ldw	r2,112(sp)
  810c08:	d811883a 	mov	r8,sp
  810c0c:	29000044 	addi	r4,r5,1
  810c10:	003e4206 	br	81051c <__alt_mem_onchip_mem+0xff80851c>
  810c14:	d9401b17 	ldw	r5,108(sp)
  810c18:	010020b4 	movhi	r4,130
  810c1c:	21213b04 	addi	r4,r4,-31508
  810c20:	d9002415 	stw	r4,144(sp)
  810c24:	29400044 	addi	r5,r5,1
  810c28:	003c6d06 	br	80fde0 <__alt_mem_onchip_mem+0xff807de0>
  810c2c:	0039883a 	mov	fp,zero
  810c30:	00800084 	movi	r2,2
  810c34:	10803fcc 	andi	r2,r2,255
  810c38:	01000044 	movi	r4,1
  810c3c:	11001e26 	beq	r2,r4,810cb8 <___vfiprintf_internal_r+0x13a0>
  810c40:	01000084 	movi	r4,2
  810c44:	11001e1e 	bne	r2,r4,810cc0 <___vfiprintf_internal_r+0x13a8>
  810c48:	1829883a 	mov	r20,r3
  810c4c:	003eea06 	br	8107f8 <__alt_mem_onchip_mem+0xff8087f8>
  810c50:	a007883a 	mov	r3,r20
  810c54:	00800044 	movi	r2,1
  810c58:	003ff606 	br	810c34 <__alt_mem_onchip_mem+0xff808c34>
  810c5c:	00800184 	movi	r2,6
  810c60:	1240012e 	bgeu	r2,r9,810c68 <___vfiprintf_internal_r+0x1350>
  810c64:	1013883a 	mov	r9,r2
  810c68:	4827883a 	mov	r19,r9
  810c6c:	4825883a 	mov	r18,r9
  810c70:	48001516 	blt	r9,zero,810cc8 <___vfiprintf_internal_r+0x13b0>
  810c74:	054020b4 	movhi	r21,130
  810c78:	d8c02215 	stw	r3,136(sp)
  810c7c:	ad60db04 	addi	r21,r21,-31892
  810c80:	003d1406 	br	8100d4 <__alt_mem_onchip_mem+0xff8080d4>
  810c84:	028020b4 	movhi	r10,130
  810c88:	52a13704 	addi	r10,r10,-31524
  810c8c:	da802415 	stw	r10,144(sp)
  810c90:	200d883a 	mov	r6,r4
  810c94:	003c9106 	br	80fedc <__alt_mem_onchip_mem+0xff807edc>
  810c98:	5021883a 	mov	r16,r10
  810c9c:	0013883a 	mov	r9,zero
  810ca0:	003b7d06 	br	80fa98 <__alt_mem_onchip_mem+0xff807a98>
  810ca4:	4827883a 	mov	r19,r9
  810ca8:	df001d83 	ldbu	fp,118(sp)
  810cac:	d8c02215 	stw	r3,136(sp)
  810cb0:	0013883a 	mov	r9,zero
  810cb4:	003c1806 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  810cb8:	1829883a 	mov	r20,r3
  810cbc:	003d1806 	br	810120 <__alt_mem_onchip_mem+0xff808120>
  810cc0:	1829883a 	mov	r20,r3
  810cc4:	003ccd06 	br	80fffc <__alt_mem_onchip_mem+0xff807ffc>
  810cc8:	0025883a 	mov	r18,zero
  810ccc:	003fe906 	br	810c74 <__alt_mem_onchip_mem+0xff808c74>
  810cd0:	d8802217 	ldw	r2,136(sp)
  810cd4:	80c00043 	ldbu	r3,1(r16)
  810cd8:	5021883a 	mov	r16,r10
  810cdc:	12400017 	ldw	r9,0(r2)
  810ce0:	10800104 	addi	r2,r2,4
  810ce4:	d8802215 	stw	r2,136(sp)
  810ce8:	483faf0e 	bge	r9,zero,810ba8 <__alt_mem_onchip_mem+0xff808ba8>
  810cec:	18c03fcc 	andi	r3,r3,255
  810cf0:	18c0201c 	xori	r3,r3,128
  810cf4:	027fffc4 	movi	r9,-1
  810cf8:	18ffe004 	addi	r3,r3,-128
  810cfc:	003b6506 	br	80fa94 <__alt_mem_onchip_mem+0xff807a94>
  810d00:	d9c01d85 	stb	r7,118(sp)
  810d04:	003ca006 	br	80ff88 <__alt_mem_onchip_mem+0xff807f88>
  810d08:	d9c01d85 	stb	r7,118(sp)
  810d0c:	003cad06 	br	80ffc4 <__alt_mem_onchip_mem+0xff807fc4>
  810d10:	d9c01d85 	stb	r7,118(sp)
  810d14:	003d7d06 	br	81030c <__alt_mem_onchip_mem+0xff80830c>
  810d18:	d9c01d85 	stb	r7,118(sp)
  810d1c:	003d5f06 	br	81029c <__alt_mem_onchip_mem+0xff80829c>
  810d20:	a080004c 	andi	r2,r20,1
  810d24:	0039883a 	mov	fp,zero
  810d28:	10000526 	beq	r2,zero,810d40 <___vfiprintf_internal_r+0x1428>
  810d2c:	00800c04 	movi	r2,48
  810d30:	d88019c5 	stb	r2,103(sp)
  810d34:	dcc02717 	ldw	r19,156(sp)
  810d38:	dd4019c4 	addi	r21,sp,103
  810d3c:	003bf606 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  810d40:	0027883a 	mov	r19,zero
  810d44:	dd401a04 	addi	r21,sp,104
  810d48:	003bf306 	br	80fd18 <__alt_mem_onchip_mem+0xff807d18>
  810d4c:	d9c01d85 	stb	r7,118(sp)
  810d50:	003dc806 	br	810474 <__alt_mem_onchip_mem+0xff808474>
  810d54:	d9c01d85 	stb	r7,118(sp)
  810d58:	003d3a06 	br	810244 <__alt_mem_onchip_mem+0xff808244>
  810d5c:	d9c01d85 	stb	r7,118(sp)
  810d60:	003d2a06 	br	81020c <__alt_mem_onchip_mem+0xff80820c>
  810d64:	d9c01d85 	stb	r7,118(sp)
  810d68:	003cde06 	br	8100e4 <__alt_mem_onchip_mem+0xff8080e4>
  810d6c:	d9c01d85 	stb	r7,118(sp)
  810d70:	003cbc06 	br	810064 <__alt_mem_onchip_mem+0xff808064>

00810d74 <__vfiprintf_internal>:
  810d74:	008020b4 	movhi	r2,130
  810d78:	10a91604 	addi	r2,r2,-23464
  810d7c:	300f883a 	mov	r7,r6
  810d80:	280d883a 	mov	r6,r5
  810d84:	200b883a 	mov	r5,r4
  810d88:	11000017 	ldw	r4,0(r2)
  810d8c:	080f9181 	jmpi	80f918 <___vfiprintf_internal_r>

00810d90 <__sbprintf>:
  810d90:	2880030b 	ldhu	r2,12(r5)
  810d94:	2ac01917 	ldw	r11,100(r5)
  810d98:	2a80038b 	ldhu	r10,14(r5)
  810d9c:	2a400717 	ldw	r9,28(r5)
  810da0:	2a000917 	ldw	r8,36(r5)
  810da4:	defee204 	addi	sp,sp,-1144
  810da8:	00c10004 	movi	r3,1024
  810dac:	dc011a15 	stw	r16,1128(sp)
  810db0:	10bfff4c 	andi	r2,r2,65533
  810db4:	2821883a 	mov	r16,r5
  810db8:	d8cb883a 	add	r5,sp,r3
  810dbc:	dc811c15 	stw	r18,1136(sp)
  810dc0:	dc411b15 	stw	r17,1132(sp)
  810dc4:	dfc11d15 	stw	ra,1140(sp)
  810dc8:	2025883a 	mov	r18,r4
  810dcc:	d881030d 	sth	r2,1036(sp)
  810dd0:	dac11915 	stw	r11,1124(sp)
  810dd4:	da81038d 	sth	r10,1038(sp)
  810dd8:	da410715 	stw	r9,1052(sp)
  810ddc:	da010915 	stw	r8,1060(sp)
  810de0:	dec10015 	stw	sp,1024(sp)
  810de4:	dec10415 	stw	sp,1040(sp)
  810de8:	d8c10215 	stw	r3,1032(sp)
  810dec:	d8c10515 	stw	r3,1044(sp)
  810df0:	d8010615 	stw	zero,1048(sp)
  810df4:	080f9180 	call	80f918 <___vfiprintf_internal_r>
  810df8:	1023883a 	mov	r17,r2
  810dfc:	10000416 	blt	r2,zero,810e10 <__sbprintf+0x80>
  810e00:	d9410004 	addi	r5,sp,1024
  810e04:	9009883a 	mov	r4,r18
  810e08:	080ccb00 	call	80ccb0 <_fflush_r>
  810e0c:	10000d1e 	bne	r2,zero,810e44 <__sbprintf+0xb4>
  810e10:	d881030b 	ldhu	r2,1036(sp)
  810e14:	1080100c 	andi	r2,r2,64
  810e18:	10000326 	beq	r2,zero,810e28 <__sbprintf+0x98>
  810e1c:	8080030b 	ldhu	r2,12(r16)
  810e20:	10801014 	ori	r2,r2,64
  810e24:	8080030d 	sth	r2,12(r16)
  810e28:	8805883a 	mov	r2,r17
  810e2c:	dfc11d17 	ldw	ra,1140(sp)
  810e30:	dc811c17 	ldw	r18,1136(sp)
  810e34:	dc411b17 	ldw	r17,1132(sp)
  810e38:	dc011a17 	ldw	r16,1128(sp)
  810e3c:	dec11e04 	addi	sp,sp,1144
  810e40:	f800283a 	ret
  810e44:	047fffc4 	movi	r17,-1
  810e48:	003ff106 	br	810e10 <__alt_mem_onchip_mem+0xff808e10>

00810e4c <_write_r>:
  810e4c:	defffd04 	addi	sp,sp,-12
  810e50:	2805883a 	mov	r2,r5
  810e54:	dc000015 	stw	r16,0(sp)
  810e58:	040020b4 	movhi	r16,130
  810e5c:	dc400115 	stw	r17,4(sp)
  810e60:	300b883a 	mov	r5,r6
  810e64:	84306604 	addi	r16,r16,-15976
  810e68:	2023883a 	mov	r17,r4
  810e6c:	380d883a 	mov	r6,r7
  810e70:	1009883a 	mov	r4,r2
  810e74:	dfc00215 	stw	ra,8(sp)
  810e78:	80000015 	stw	zero,0(r16)
  810e7c:	0814c2c0 	call	814c2c <write>
  810e80:	00ffffc4 	movi	r3,-1
  810e84:	10c00526 	beq	r2,r3,810e9c <_write_r+0x50>
  810e88:	dfc00217 	ldw	ra,8(sp)
  810e8c:	dc400117 	ldw	r17,4(sp)
  810e90:	dc000017 	ldw	r16,0(sp)
  810e94:	dec00304 	addi	sp,sp,12
  810e98:	f800283a 	ret
  810e9c:	80c00017 	ldw	r3,0(r16)
  810ea0:	183ff926 	beq	r3,zero,810e88 <__alt_mem_onchip_mem+0xff808e88>
  810ea4:	88c00015 	stw	r3,0(r17)
  810ea8:	003ff706 	br	810e88 <__alt_mem_onchip_mem+0xff808e88>

00810eac <_close_r>:
  810eac:	defffd04 	addi	sp,sp,-12
  810eb0:	dc000015 	stw	r16,0(sp)
  810eb4:	040020b4 	movhi	r16,130
  810eb8:	dc400115 	stw	r17,4(sp)
  810ebc:	84306604 	addi	r16,r16,-15976
  810ec0:	2023883a 	mov	r17,r4
  810ec4:	2809883a 	mov	r4,r5
  810ec8:	dfc00215 	stw	ra,8(sp)
  810ecc:	80000015 	stw	zero,0(r16)
  810ed0:	08142780 	call	814278 <close>
  810ed4:	00ffffc4 	movi	r3,-1
  810ed8:	10c00526 	beq	r2,r3,810ef0 <_close_r+0x44>
  810edc:	dfc00217 	ldw	ra,8(sp)
  810ee0:	dc400117 	ldw	r17,4(sp)
  810ee4:	dc000017 	ldw	r16,0(sp)
  810ee8:	dec00304 	addi	sp,sp,12
  810eec:	f800283a 	ret
  810ef0:	80c00017 	ldw	r3,0(r16)
  810ef4:	183ff926 	beq	r3,zero,810edc <__alt_mem_onchip_mem+0xff808edc>
  810ef8:	88c00015 	stw	r3,0(r17)
  810efc:	003ff706 	br	810edc <__alt_mem_onchip_mem+0xff808edc>

00810f00 <_calloc_r>:
  810f00:	298b383a 	mul	r5,r5,r6
  810f04:	defffe04 	addi	sp,sp,-8
  810f08:	dfc00115 	stw	ra,4(sp)
  810f0c:	dc000015 	stw	r16,0(sp)
  810f10:	080d9300 	call	80d930 <_malloc_r>
  810f14:	10002926 	beq	r2,zero,810fbc <_calloc_r+0xbc>
  810f18:	11bfff17 	ldw	r6,-4(r2)
  810f1c:	1021883a 	mov	r16,r2
  810f20:	00bfff04 	movi	r2,-4
  810f24:	308c703a 	and	r6,r6,r2
  810f28:	00c00904 	movi	r3,36
  810f2c:	308d883a 	add	r6,r6,r2
  810f30:	19801636 	bltu	r3,r6,810f8c <_calloc_r+0x8c>
  810f34:	008004c4 	movi	r2,19
  810f38:	11800b2e 	bgeu	r2,r6,810f68 <_calloc_r+0x68>
  810f3c:	80000015 	stw	zero,0(r16)
  810f40:	80000115 	stw	zero,4(r16)
  810f44:	008006c4 	movi	r2,27
  810f48:	11801a2e 	bgeu	r2,r6,810fb4 <_calloc_r+0xb4>
  810f4c:	80000215 	stw	zero,8(r16)
  810f50:	80000315 	stw	zero,12(r16)
  810f54:	30c0151e 	bne	r6,r3,810fac <_calloc_r+0xac>
  810f58:	80000415 	stw	zero,16(r16)
  810f5c:	80800604 	addi	r2,r16,24
  810f60:	80000515 	stw	zero,20(r16)
  810f64:	00000106 	br	810f6c <_calloc_r+0x6c>
  810f68:	8005883a 	mov	r2,r16
  810f6c:	10000015 	stw	zero,0(r2)
  810f70:	10000115 	stw	zero,4(r2)
  810f74:	10000215 	stw	zero,8(r2)
  810f78:	8005883a 	mov	r2,r16
  810f7c:	dfc00117 	ldw	ra,4(sp)
  810f80:	dc000017 	ldw	r16,0(sp)
  810f84:	dec00204 	addi	sp,sp,8
  810f88:	f800283a 	ret
  810f8c:	000b883a 	mov	r5,zero
  810f90:	8009883a 	mov	r4,r16
  810f94:	080e3680 	call	80e368 <memset>
  810f98:	8005883a 	mov	r2,r16
  810f9c:	dfc00117 	ldw	ra,4(sp)
  810fa0:	dc000017 	ldw	r16,0(sp)
  810fa4:	dec00204 	addi	sp,sp,8
  810fa8:	f800283a 	ret
  810fac:	80800404 	addi	r2,r16,16
  810fb0:	003fee06 	br	810f6c <__alt_mem_onchip_mem+0xff808f6c>
  810fb4:	80800204 	addi	r2,r16,8
  810fb8:	003fec06 	br	810f6c <__alt_mem_onchip_mem+0xff808f6c>
  810fbc:	0005883a 	mov	r2,zero
  810fc0:	003fee06 	br	810f7c <__alt_mem_onchip_mem+0xff808f7c>

00810fc4 <_fclose_r>:
  810fc4:	28003926 	beq	r5,zero,8110ac <_fclose_r+0xe8>
  810fc8:	defffc04 	addi	sp,sp,-16
  810fcc:	dc400115 	stw	r17,4(sp)
  810fd0:	dc000015 	stw	r16,0(sp)
  810fd4:	dfc00315 	stw	ra,12(sp)
  810fd8:	dc800215 	stw	r18,8(sp)
  810fdc:	2023883a 	mov	r17,r4
  810fe0:	2821883a 	mov	r16,r5
  810fe4:	20000226 	beq	r4,zero,810ff0 <_fclose_r+0x2c>
  810fe8:	20800e17 	ldw	r2,56(r4)
  810fec:	10002726 	beq	r2,zero,81108c <_fclose_r+0xc8>
  810ff0:	8080030f 	ldh	r2,12(r16)
  810ff4:	1000071e 	bne	r2,zero,811014 <_fclose_r+0x50>
  810ff8:	0005883a 	mov	r2,zero
  810ffc:	dfc00317 	ldw	ra,12(sp)
  811000:	dc800217 	ldw	r18,8(sp)
  811004:	dc400117 	ldw	r17,4(sp)
  811008:	dc000017 	ldw	r16,0(sp)
  81100c:	dec00404 	addi	sp,sp,16
  811010:	f800283a 	ret
  811014:	800b883a 	mov	r5,r16
  811018:	8809883a 	mov	r4,r17
  81101c:	080ca940 	call	80ca94 <__sflush_r>
  811020:	1025883a 	mov	r18,r2
  811024:	80800b17 	ldw	r2,44(r16)
  811028:	10000426 	beq	r2,zero,81103c <_fclose_r+0x78>
  81102c:	81400717 	ldw	r5,28(r16)
  811030:	8809883a 	mov	r4,r17
  811034:	103ee83a 	callr	r2
  811038:	10001616 	blt	r2,zero,811094 <_fclose_r+0xd0>
  81103c:	8080030b 	ldhu	r2,12(r16)
  811040:	1080200c 	andi	r2,r2,128
  811044:	1000151e 	bne	r2,zero,81109c <_fclose_r+0xd8>
  811048:	81400c17 	ldw	r5,48(r16)
  81104c:	28000526 	beq	r5,zero,811064 <_fclose_r+0xa0>
  811050:	80801004 	addi	r2,r16,64
  811054:	28800226 	beq	r5,r2,811060 <_fclose_r+0x9c>
  811058:	8809883a 	mov	r4,r17
  81105c:	080d2000 	call	80d200 <_free_r>
  811060:	80000c15 	stw	zero,48(r16)
  811064:	81401117 	ldw	r5,68(r16)
  811068:	28000326 	beq	r5,zero,811078 <_fclose_r+0xb4>
  81106c:	8809883a 	mov	r4,r17
  811070:	080d2000 	call	80d200 <_free_r>
  811074:	80001115 	stw	zero,68(r16)
  811078:	080d09c0 	call	80d09c <__sfp_lock_acquire>
  81107c:	8000030d 	sth	zero,12(r16)
  811080:	080d0a00 	call	80d0a0 <__sfp_lock_release>
  811084:	9005883a 	mov	r2,r18
  811088:	003fdc06 	br	810ffc <__alt_mem_onchip_mem+0xff808ffc>
  81108c:	080d08c0 	call	80d08c <__sinit>
  811090:	003fd706 	br	810ff0 <__alt_mem_onchip_mem+0xff808ff0>
  811094:	04bfffc4 	movi	r18,-1
  811098:	003fe806 	br	81103c <__alt_mem_onchip_mem+0xff80903c>
  81109c:	81400417 	ldw	r5,16(r16)
  8110a0:	8809883a 	mov	r4,r17
  8110a4:	080d2000 	call	80d200 <_free_r>
  8110a8:	003fe706 	br	811048 <__alt_mem_onchip_mem+0xff809048>
  8110ac:	0005883a 	mov	r2,zero
  8110b0:	f800283a 	ret

008110b4 <fclose>:
  8110b4:	008020b4 	movhi	r2,130
  8110b8:	10a91604 	addi	r2,r2,-23464
  8110bc:	200b883a 	mov	r5,r4
  8110c0:	11000017 	ldw	r4,0(r2)
  8110c4:	0810fc41 	jmpi	810fc4 <_fclose_r>

008110c8 <__fputwc>:
  8110c8:	defff804 	addi	sp,sp,-32
  8110cc:	dcc00415 	stw	r19,16(sp)
  8110d0:	dc800315 	stw	r18,12(sp)
  8110d4:	dc000115 	stw	r16,4(sp)
  8110d8:	dfc00715 	stw	ra,28(sp)
  8110dc:	dd400615 	stw	r21,24(sp)
  8110e0:	dd000515 	stw	r20,20(sp)
  8110e4:	dc400215 	stw	r17,8(sp)
  8110e8:	2027883a 	mov	r19,r4
  8110ec:	2825883a 	mov	r18,r5
  8110f0:	3021883a 	mov	r16,r6
  8110f4:	080d7200 	call	80d720 <__locale_mb_cur_max>
  8110f8:	00c00044 	movi	r3,1
  8110fc:	10c03e26 	beq	r2,r3,8111f8 <__fputwc+0x130>
  811100:	81c01704 	addi	r7,r16,92
  811104:	900d883a 	mov	r6,r18
  811108:	d80b883a 	mov	r5,sp
  81110c:	9809883a 	mov	r4,r19
  811110:	08121140 	call	812114 <_wcrtomb_r>
  811114:	1029883a 	mov	r20,r2
  811118:	00bfffc4 	movi	r2,-1
  81111c:	a0802026 	beq	r20,r2,8111a0 <__fputwc+0xd8>
  811120:	d9400003 	ldbu	r5,0(sp)
  811124:	a0001c26 	beq	r20,zero,811198 <__fputwc+0xd0>
  811128:	0023883a 	mov	r17,zero
  81112c:	05400284 	movi	r21,10
  811130:	00000906 	br	811158 <__fputwc+0x90>
  811134:	80800017 	ldw	r2,0(r16)
  811138:	11400005 	stb	r5,0(r2)
  81113c:	80c00017 	ldw	r3,0(r16)
  811140:	18c00044 	addi	r3,r3,1
  811144:	80c00015 	stw	r3,0(r16)
  811148:	8c400044 	addi	r17,r17,1
  81114c:	dc45883a 	add	r2,sp,r17
  811150:	8d00112e 	bgeu	r17,r20,811198 <__fputwc+0xd0>
  811154:	11400003 	ldbu	r5,0(r2)
  811158:	80c00217 	ldw	r3,8(r16)
  81115c:	18ffffc4 	addi	r3,r3,-1
  811160:	80c00215 	stw	r3,8(r16)
  811164:	183ff30e 	bge	r3,zero,811134 <__alt_mem_onchip_mem+0xff809134>
  811168:	80800617 	ldw	r2,24(r16)
  81116c:	18801916 	blt	r3,r2,8111d4 <__fputwc+0x10c>
  811170:	80800017 	ldw	r2,0(r16)
  811174:	11400005 	stb	r5,0(r2)
  811178:	80800017 	ldw	r2,0(r16)
  81117c:	10c00003 	ldbu	r3,0(r2)
  811180:	10800044 	addi	r2,r2,1
  811184:	1d402326 	beq	r3,r21,811214 <__fputwc+0x14c>
  811188:	80800015 	stw	r2,0(r16)
  81118c:	8c400044 	addi	r17,r17,1
  811190:	dc45883a 	add	r2,sp,r17
  811194:	8d3fef36 	bltu	r17,r20,811154 <__alt_mem_onchip_mem+0xff809154>
  811198:	9005883a 	mov	r2,r18
  81119c:	00000406 	br	8111b0 <__fputwc+0xe8>
  8111a0:	80c0030b 	ldhu	r3,12(r16)
  8111a4:	a005883a 	mov	r2,r20
  8111a8:	18c01014 	ori	r3,r3,64
  8111ac:	80c0030d 	sth	r3,12(r16)
  8111b0:	dfc00717 	ldw	ra,28(sp)
  8111b4:	dd400617 	ldw	r21,24(sp)
  8111b8:	dd000517 	ldw	r20,20(sp)
  8111bc:	dcc00417 	ldw	r19,16(sp)
  8111c0:	dc800317 	ldw	r18,12(sp)
  8111c4:	dc400217 	ldw	r17,8(sp)
  8111c8:	dc000117 	ldw	r16,4(sp)
  8111cc:	dec00804 	addi	sp,sp,32
  8111d0:	f800283a 	ret
  8111d4:	800d883a 	mov	r6,r16
  8111d8:	29403fcc 	andi	r5,r5,255
  8111dc:	9809883a 	mov	r4,r19
  8111e0:	0811fbc0 	call	811fbc <__swbuf_r>
  8111e4:	10bfffe0 	cmpeqi	r2,r2,-1
  8111e8:	10803fcc 	andi	r2,r2,255
  8111ec:	103fd626 	beq	r2,zero,811148 <__alt_mem_onchip_mem+0xff809148>
  8111f0:	00bfffc4 	movi	r2,-1
  8111f4:	003fee06 	br	8111b0 <__alt_mem_onchip_mem+0xff8091b0>
  8111f8:	90ffffc4 	addi	r3,r18,-1
  8111fc:	01003f84 	movi	r4,254
  811200:	20ffbf36 	bltu	r4,r3,811100 <__alt_mem_onchip_mem+0xff809100>
  811204:	900b883a 	mov	r5,r18
  811208:	dc800005 	stb	r18,0(sp)
  81120c:	1029883a 	mov	r20,r2
  811210:	003fc506 	br	811128 <__alt_mem_onchip_mem+0xff809128>
  811214:	800d883a 	mov	r6,r16
  811218:	a80b883a 	mov	r5,r21
  81121c:	9809883a 	mov	r4,r19
  811220:	0811fbc0 	call	811fbc <__swbuf_r>
  811224:	10bfffe0 	cmpeqi	r2,r2,-1
  811228:	003fef06 	br	8111e8 <__alt_mem_onchip_mem+0xff8091e8>

0081122c <_fputwc_r>:
  81122c:	3080030b 	ldhu	r2,12(r6)
  811230:	10c8000c 	andi	r3,r2,8192
  811234:	1800051e 	bne	r3,zero,81124c <_fputwc_r+0x20>
  811238:	30c01917 	ldw	r3,100(r6)
  81123c:	10880014 	ori	r2,r2,8192
  811240:	3080030d 	sth	r2,12(r6)
  811244:	18880014 	ori	r2,r3,8192
  811248:	30801915 	stw	r2,100(r6)
  81124c:	08110c81 	jmpi	8110c8 <__fputwc>

00811250 <fputwc>:
  811250:	008020b4 	movhi	r2,130
  811254:	defffc04 	addi	sp,sp,-16
  811258:	10a91604 	addi	r2,r2,-23464
  81125c:	dc000115 	stw	r16,4(sp)
  811260:	14000017 	ldw	r16,0(r2)
  811264:	dc400215 	stw	r17,8(sp)
  811268:	dfc00315 	stw	ra,12(sp)
  81126c:	2023883a 	mov	r17,r4
  811270:	80000226 	beq	r16,zero,81127c <fputwc+0x2c>
  811274:	80800e17 	ldw	r2,56(r16)
  811278:	10001026 	beq	r2,zero,8112bc <fputwc+0x6c>
  81127c:	2880030b 	ldhu	r2,12(r5)
  811280:	10c8000c 	andi	r3,r2,8192
  811284:	1800051e 	bne	r3,zero,81129c <fputwc+0x4c>
  811288:	28c01917 	ldw	r3,100(r5)
  81128c:	10880014 	ori	r2,r2,8192
  811290:	2880030d 	sth	r2,12(r5)
  811294:	18880014 	ori	r2,r3,8192
  811298:	28801915 	stw	r2,100(r5)
  81129c:	280d883a 	mov	r6,r5
  8112a0:	8009883a 	mov	r4,r16
  8112a4:	880b883a 	mov	r5,r17
  8112a8:	dfc00317 	ldw	ra,12(sp)
  8112ac:	dc400217 	ldw	r17,8(sp)
  8112b0:	dc000117 	ldw	r16,4(sp)
  8112b4:	dec00404 	addi	sp,sp,16
  8112b8:	08110c81 	jmpi	8110c8 <__fputwc>
  8112bc:	8009883a 	mov	r4,r16
  8112c0:	d9400015 	stw	r5,0(sp)
  8112c4:	080d08c0 	call	80d08c <__sinit>
  8112c8:	d9400017 	ldw	r5,0(sp)
  8112cc:	003feb06 	br	81127c <__alt_mem_onchip_mem+0xff80927c>

008112d0 <_fstat_r>:
  8112d0:	defffd04 	addi	sp,sp,-12
  8112d4:	2805883a 	mov	r2,r5
  8112d8:	dc000015 	stw	r16,0(sp)
  8112dc:	040020b4 	movhi	r16,130
  8112e0:	dc400115 	stw	r17,4(sp)
  8112e4:	84306604 	addi	r16,r16,-15976
  8112e8:	2023883a 	mov	r17,r4
  8112ec:	300b883a 	mov	r5,r6
  8112f0:	1009883a 	mov	r4,r2
  8112f4:	dfc00215 	stw	ra,8(sp)
  8112f8:	80000015 	stw	zero,0(r16)
  8112fc:	08143b00 	call	8143b0 <fstat>
  811300:	00ffffc4 	movi	r3,-1
  811304:	10c00526 	beq	r2,r3,81131c <_fstat_r+0x4c>
  811308:	dfc00217 	ldw	ra,8(sp)
  81130c:	dc400117 	ldw	r17,4(sp)
  811310:	dc000017 	ldw	r16,0(sp)
  811314:	dec00304 	addi	sp,sp,12
  811318:	f800283a 	ret
  81131c:	80c00017 	ldw	r3,0(r16)
  811320:	183ff926 	beq	r3,zero,811308 <__alt_mem_onchip_mem+0xff809308>
  811324:	88c00015 	stw	r3,0(r17)
  811328:	003ff706 	br	811308 <__alt_mem_onchip_mem+0xff809308>

0081132c <__sfvwrite_r>:
  81132c:	30800217 	ldw	r2,8(r6)
  811330:	10006726 	beq	r2,zero,8114d0 <__sfvwrite_r+0x1a4>
  811334:	28c0030b 	ldhu	r3,12(r5)
  811338:	defff404 	addi	sp,sp,-48
  81133c:	dd400715 	stw	r21,28(sp)
  811340:	dd000615 	stw	r20,24(sp)
  811344:	dc000215 	stw	r16,8(sp)
  811348:	dfc00b15 	stw	ra,44(sp)
  81134c:	df000a15 	stw	fp,40(sp)
  811350:	ddc00915 	stw	r23,36(sp)
  811354:	dd800815 	stw	r22,32(sp)
  811358:	dcc00515 	stw	r19,20(sp)
  81135c:	dc800415 	stw	r18,16(sp)
  811360:	dc400315 	stw	r17,12(sp)
  811364:	1880020c 	andi	r2,r3,8
  811368:	2821883a 	mov	r16,r5
  81136c:	202b883a 	mov	r21,r4
  811370:	3029883a 	mov	r20,r6
  811374:	10002726 	beq	r2,zero,811414 <__sfvwrite_r+0xe8>
  811378:	28800417 	ldw	r2,16(r5)
  81137c:	10002526 	beq	r2,zero,811414 <__sfvwrite_r+0xe8>
  811380:	1880008c 	andi	r2,r3,2
  811384:	a4400017 	ldw	r17,0(r20)
  811388:	10002a26 	beq	r2,zero,811434 <__sfvwrite_r+0x108>
  81138c:	05a00034 	movhi	r22,32768
  811390:	0027883a 	mov	r19,zero
  811394:	0025883a 	mov	r18,zero
  811398:	b5bf0004 	addi	r22,r22,-1024
  81139c:	980d883a 	mov	r6,r19
  8113a0:	a809883a 	mov	r4,r21
  8113a4:	90004626 	beq	r18,zero,8114c0 <__sfvwrite_r+0x194>
  8113a8:	900f883a 	mov	r7,r18
  8113ac:	b480022e 	bgeu	r22,r18,8113b8 <__sfvwrite_r+0x8c>
  8113b0:	01e00034 	movhi	r7,32768
  8113b4:	39ff0004 	addi	r7,r7,-1024
  8113b8:	80800917 	ldw	r2,36(r16)
  8113bc:	81400717 	ldw	r5,28(r16)
  8113c0:	103ee83a 	callr	r2
  8113c4:	0080570e 	bge	zero,r2,811524 <__sfvwrite_r+0x1f8>
  8113c8:	a0c00217 	ldw	r3,8(r20)
  8113cc:	98a7883a 	add	r19,r19,r2
  8113d0:	90a5c83a 	sub	r18,r18,r2
  8113d4:	1885c83a 	sub	r2,r3,r2
  8113d8:	a0800215 	stw	r2,8(r20)
  8113dc:	103fef1e 	bne	r2,zero,81139c <__alt_mem_onchip_mem+0xff80939c>
  8113e0:	0005883a 	mov	r2,zero
  8113e4:	dfc00b17 	ldw	ra,44(sp)
  8113e8:	df000a17 	ldw	fp,40(sp)
  8113ec:	ddc00917 	ldw	r23,36(sp)
  8113f0:	dd800817 	ldw	r22,32(sp)
  8113f4:	dd400717 	ldw	r21,28(sp)
  8113f8:	dd000617 	ldw	r20,24(sp)
  8113fc:	dcc00517 	ldw	r19,20(sp)
  811400:	dc800417 	ldw	r18,16(sp)
  811404:	dc400317 	ldw	r17,12(sp)
  811408:	dc000217 	ldw	r16,8(sp)
  81140c:	dec00c04 	addi	sp,sp,48
  811410:	f800283a 	ret
  811414:	800b883a 	mov	r5,r16
  811418:	a809883a 	mov	r4,r21
  81141c:	080b0b80 	call	80b0b8 <__swsetup_r>
  811420:	1000eb1e 	bne	r2,zero,8117d0 <__sfvwrite_r+0x4a4>
  811424:	80c0030b 	ldhu	r3,12(r16)
  811428:	a4400017 	ldw	r17,0(r20)
  81142c:	1880008c 	andi	r2,r3,2
  811430:	103fd61e 	bne	r2,zero,81138c <__alt_mem_onchip_mem+0xff80938c>
  811434:	1880004c 	andi	r2,r3,1
  811438:	10003f1e 	bne	r2,zero,811538 <__sfvwrite_r+0x20c>
  81143c:	0039883a 	mov	fp,zero
  811440:	0025883a 	mov	r18,zero
  811444:	90001a26 	beq	r18,zero,8114b0 <__sfvwrite_r+0x184>
  811448:	1880800c 	andi	r2,r3,512
  81144c:	84c00217 	ldw	r19,8(r16)
  811450:	10002126 	beq	r2,zero,8114d8 <__sfvwrite_r+0x1ac>
  811454:	982f883a 	mov	r23,r19
  811458:	94c09336 	bltu	r18,r19,8116a8 <__sfvwrite_r+0x37c>
  81145c:	1881200c 	andi	r2,r3,1152
  811460:	10009e1e 	bne	r2,zero,8116dc <__sfvwrite_r+0x3b0>
  811464:	81000017 	ldw	r4,0(r16)
  811468:	b80d883a 	mov	r6,r23
  81146c:	e00b883a 	mov	r5,fp
  811470:	081189c0 	call	81189c <memmove>
  811474:	80c00217 	ldw	r3,8(r16)
  811478:	81000017 	ldw	r4,0(r16)
  81147c:	9005883a 	mov	r2,r18
  811480:	1ce7c83a 	sub	r19,r3,r19
  811484:	25cf883a 	add	r7,r4,r23
  811488:	84c00215 	stw	r19,8(r16)
  81148c:	81c00015 	stw	r7,0(r16)
  811490:	a0c00217 	ldw	r3,8(r20)
  811494:	e0b9883a 	add	fp,fp,r2
  811498:	90a5c83a 	sub	r18,r18,r2
  81149c:	18a7c83a 	sub	r19,r3,r2
  8114a0:	a4c00215 	stw	r19,8(r20)
  8114a4:	983fce26 	beq	r19,zero,8113e0 <__alt_mem_onchip_mem+0xff8093e0>
  8114a8:	80c0030b 	ldhu	r3,12(r16)
  8114ac:	903fe61e 	bne	r18,zero,811448 <__alt_mem_onchip_mem+0xff809448>
  8114b0:	8f000017 	ldw	fp,0(r17)
  8114b4:	8c800117 	ldw	r18,4(r17)
  8114b8:	8c400204 	addi	r17,r17,8
  8114bc:	003fe106 	br	811444 <__alt_mem_onchip_mem+0xff809444>
  8114c0:	8cc00017 	ldw	r19,0(r17)
  8114c4:	8c800117 	ldw	r18,4(r17)
  8114c8:	8c400204 	addi	r17,r17,8
  8114cc:	003fb306 	br	81139c <__alt_mem_onchip_mem+0xff80939c>
  8114d0:	0005883a 	mov	r2,zero
  8114d4:	f800283a 	ret
  8114d8:	81000017 	ldw	r4,0(r16)
  8114dc:	80800417 	ldw	r2,16(r16)
  8114e0:	11005736 	bltu	r2,r4,811640 <__sfvwrite_r+0x314>
  8114e4:	85c00517 	ldw	r23,20(r16)
  8114e8:	95c05536 	bltu	r18,r23,811640 <__sfvwrite_r+0x314>
  8114ec:	00a00034 	movhi	r2,32768
  8114f0:	10bfffc4 	addi	r2,r2,-1
  8114f4:	9009883a 	mov	r4,r18
  8114f8:	1480012e 	bgeu	r2,r18,811500 <__sfvwrite_r+0x1d4>
  8114fc:	1009883a 	mov	r4,r2
  811500:	b80b883a 	mov	r5,r23
  811504:	0812dac0 	call	812dac <__divsi3>
  811508:	15cf383a 	mul	r7,r2,r23
  81150c:	81400717 	ldw	r5,28(r16)
  811510:	80800917 	ldw	r2,36(r16)
  811514:	e00d883a 	mov	r6,fp
  811518:	a809883a 	mov	r4,r21
  81151c:	103ee83a 	callr	r2
  811520:	00bfdb16 	blt	zero,r2,811490 <__alt_mem_onchip_mem+0xff809490>
  811524:	8080030b 	ldhu	r2,12(r16)
  811528:	10801014 	ori	r2,r2,64
  81152c:	8080030d 	sth	r2,12(r16)
  811530:	00bfffc4 	movi	r2,-1
  811534:	003fab06 	br	8113e4 <__alt_mem_onchip_mem+0xff8093e4>
  811538:	0027883a 	mov	r19,zero
  81153c:	0011883a 	mov	r8,zero
  811540:	0039883a 	mov	fp,zero
  811544:	0025883a 	mov	r18,zero
  811548:	90001f26 	beq	r18,zero,8115c8 <__sfvwrite_r+0x29c>
  81154c:	40005a26 	beq	r8,zero,8116b8 <__sfvwrite_r+0x38c>
  811550:	982d883a 	mov	r22,r19
  811554:	94c0012e 	bgeu	r18,r19,81155c <__sfvwrite_r+0x230>
  811558:	902d883a 	mov	r22,r18
  81155c:	81000017 	ldw	r4,0(r16)
  811560:	80800417 	ldw	r2,16(r16)
  811564:	b02f883a 	mov	r23,r22
  811568:	81c00517 	ldw	r7,20(r16)
  81156c:	1100032e 	bgeu	r2,r4,81157c <__sfvwrite_r+0x250>
  811570:	80c00217 	ldw	r3,8(r16)
  811574:	38c7883a 	add	r3,r7,r3
  811578:	1d801816 	blt	r3,r22,8115dc <__sfvwrite_r+0x2b0>
  81157c:	b1c03e16 	blt	r22,r7,811678 <__sfvwrite_r+0x34c>
  811580:	80800917 	ldw	r2,36(r16)
  811584:	81400717 	ldw	r5,28(r16)
  811588:	e00d883a 	mov	r6,fp
  81158c:	da000115 	stw	r8,4(sp)
  811590:	a809883a 	mov	r4,r21
  811594:	103ee83a 	callr	r2
  811598:	102f883a 	mov	r23,r2
  81159c:	da000117 	ldw	r8,4(sp)
  8115a0:	00bfe00e 	bge	zero,r2,811524 <__alt_mem_onchip_mem+0xff809524>
  8115a4:	9de7c83a 	sub	r19,r19,r23
  8115a8:	98001f26 	beq	r19,zero,811628 <__sfvwrite_r+0x2fc>
  8115ac:	a0800217 	ldw	r2,8(r20)
  8115b0:	e5f9883a 	add	fp,fp,r23
  8115b4:	95e5c83a 	sub	r18,r18,r23
  8115b8:	15efc83a 	sub	r23,r2,r23
  8115bc:	a5c00215 	stw	r23,8(r20)
  8115c0:	b83f8726 	beq	r23,zero,8113e0 <__alt_mem_onchip_mem+0xff8093e0>
  8115c4:	903fe11e 	bne	r18,zero,81154c <__alt_mem_onchip_mem+0xff80954c>
  8115c8:	8f000017 	ldw	fp,0(r17)
  8115cc:	8c800117 	ldw	r18,4(r17)
  8115d0:	0011883a 	mov	r8,zero
  8115d4:	8c400204 	addi	r17,r17,8
  8115d8:	003fdb06 	br	811548 <__alt_mem_onchip_mem+0xff809548>
  8115dc:	180d883a 	mov	r6,r3
  8115e0:	e00b883a 	mov	r5,fp
  8115e4:	da000115 	stw	r8,4(sp)
  8115e8:	d8c00015 	stw	r3,0(sp)
  8115ec:	081189c0 	call	81189c <memmove>
  8115f0:	d8c00017 	ldw	r3,0(sp)
  8115f4:	80800017 	ldw	r2,0(r16)
  8115f8:	800b883a 	mov	r5,r16
  8115fc:	a809883a 	mov	r4,r21
  811600:	10c5883a 	add	r2,r2,r3
  811604:	80800015 	stw	r2,0(r16)
  811608:	d8c00015 	stw	r3,0(sp)
  81160c:	080ccb00 	call	80ccb0 <_fflush_r>
  811610:	d8c00017 	ldw	r3,0(sp)
  811614:	da000117 	ldw	r8,4(sp)
  811618:	103fc21e 	bne	r2,zero,811524 <__alt_mem_onchip_mem+0xff809524>
  81161c:	182f883a 	mov	r23,r3
  811620:	9de7c83a 	sub	r19,r19,r23
  811624:	983fe11e 	bne	r19,zero,8115ac <__alt_mem_onchip_mem+0xff8095ac>
  811628:	800b883a 	mov	r5,r16
  81162c:	a809883a 	mov	r4,r21
  811630:	080ccb00 	call	80ccb0 <_fflush_r>
  811634:	103fbb1e 	bne	r2,zero,811524 <__alt_mem_onchip_mem+0xff809524>
  811638:	0011883a 	mov	r8,zero
  81163c:	003fdb06 	br	8115ac <__alt_mem_onchip_mem+0xff8095ac>
  811640:	94c0012e 	bgeu	r18,r19,811648 <__sfvwrite_r+0x31c>
  811644:	9027883a 	mov	r19,r18
  811648:	980d883a 	mov	r6,r19
  81164c:	e00b883a 	mov	r5,fp
  811650:	081189c0 	call	81189c <memmove>
  811654:	80800217 	ldw	r2,8(r16)
  811658:	80c00017 	ldw	r3,0(r16)
  81165c:	14c5c83a 	sub	r2,r2,r19
  811660:	1cc7883a 	add	r3,r3,r19
  811664:	80800215 	stw	r2,8(r16)
  811668:	80c00015 	stw	r3,0(r16)
  81166c:	10004326 	beq	r2,zero,81177c <__sfvwrite_r+0x450>
  811670:	9805883a 	mov	r2,r19
  811674:	003f8606 	br	811490 <__alt_mem_onchip_mem+0xff809490>
  811678:	b00d883a 	mov	r6,r22
  81167c:	e00b883a 	mov	r5,fp
  811680:	da000115 	stw	r8,4(sp)
  811684:	081189c0 	call	81189c <memmove>
  811688:	80800217 	ldw	r2,8(r16)
  81168c:	80c00017 	ldw	r3,0(r16)
  811690:	da000117 	ldw	r8,4(sp)
  811694:	1585c83a 	sub	r2,r2,r22
  811698:	1dad883a 	add	r22,r3,r22
  81169c:	80800215 	stw	r2,8(r16)
  8116a0:	85800015 	stw	r22,0(r16)
  8116a4:	003fbf06 	br	8115a4 <__alt_mem_onchip_mem+0xff8095a4>
  8116a8:	81000017 	ldw	r4,0(r16)
  8116ac:	9027883a 	mov	r19,r18
  8116b0:	902f883a 	mov	r23,r18
  8116b4:	003f6c06 	br	811468 <__alt_mem_onchip_mem+0xff809468>
  8116b8:	900d883a 	mov	r6,r18
  8116bc:	01400284 	movi	r5,10
  8116c0:	e009883a 	mov	r4,fp
  8116c4:	080e13c0 	call	80e13c <memchr>
  8116c8:	10003e26 	beq	r2,zero,8117c4 <__sfvwrite_r+0x498>
  8116cc:	10800044 	addi	r2,r2,1
  8116d0:	1727c83a 	sub	r19,r2,fp
  8116d4:	02000044 	movi	r8,1
  8116d8:	003f9d06 	br	811550 <__alt_mem_onchip_mem+0xff809550>
  8116dc:	80800517 	ldw	r2,20(r16)
  8116e0:	81400417 	ldw	r5,16(r16)
  8116e4:	81c00017 	ldw	r7,0(r16)
  8116e8:	10a7883a 	add	r19,r2,r2
  8116ec:	9885883a 	add	r2,r19,r2
  8116f0:	1026d7fa 	srli	r19,r2,31
  8116f4:	396dc83a 	sub	r22,r7,r5
  8116f8:	b1000044 	addi	r4,r22,1
  8116fc:	9885883a 	add	r2,r19,r2
  811700:	1027d07a 	srai	r19,r2,1
  811704:	2485883a 	add	r2,r4,r18
  811708:	980d883a 	mov	r6,r19
  81170c:	9880022e 	bgeu	r19,r2,811718 <__sfvwrite_r+0x3ec>
  811710:	1027883a 	mov	r19,r2
  811714:	100d883a 	mov	r6,r2
  811718:	18c1000c 	andi	r3,r3,1024
  81171c:	18001c26 	beq	r3,zero,811790 <__sfvwrite_r+0x464>
  811720:	300b883a 	mov	r5,r6
  811724:	a809883a 	mov	r4,r21
  811728:	080d9300 	call	80d930 <_malloc_r>
  81172c:	102f883a 	mov	r23,r2
  811730:	10002926 	beq	r2,zero,8117d8 <__sfvwrite_r+0x4ac>
  811734:	81400417 	ldw	r5,16(r16)
  811738:	b00d883a 	mov	r6,r22
  81173c:	1009883a 	mov	r4,r2
  811740:	080e2200 	call	80e220 <memcpy>
  811744:	8080030b 	ldhu	r2,12(r16)
  811748:	00fedfc4 	movi	r3,-1153
  81174c:	10c4703a 	and	r2,r2,r3
  811750:	10802014 	ori	r2,r2,128
  811754:	8080030d 	sth	r2,12(r16)
  811758:	bd89883a 	add	r4,r23,r22
  81175c:	9d8fc83a 	sub	r7,r19,r22
  811760:	85c00415 	stw	r23,16(r16)
  811764:	84c00515 	stw	r19,20(r16)
  811768:	81000015 	stw	r4,0(r16)
  81176c:	9027883a 	mov	r19,r18
  811770:	81c00215 	stw	r7,8(r16)
  811774:	902f883a 	mov	r23,r18
  811778:	003f3b06 	br	811468 <__alt_mem_onchip_mem+0xff809468>
  81177c:	800b883a 	mov	r5,r16
  811780:	a809883a 	mov	r4,r21
  811784:	080ccb00 	call	80ccb0 <_fflush_r>
  811788:	103fb926 	beq	r2,zero,811670 <__alt_mem_onchip_mem+0xff809670>
  81178c:	003f6506 	br	811524 <__alt_mem_onchip_mem+0xff809524>
  811790:	a809883a 	mov	r4,r21
  811794:	0811a580 	call	811a58 <_realloc_r>
  811798:	102f883a 	mov	r23,r2
  81179c:	103fee1e 	bne	r2,zero,811758 <__alt_mem_onchip_mem+0xff809758>
  8117a0:	81400417 	ldw	r5,16(r16)
  8117a4:	a809883a 	mov	r4,r21
  8117a8:	080d2000 	call	80d200 <_free_r>
  8117ac:	8080030b 	ldhu	r2,12(r16)
  8117b0:	00ffdfc4 	movi	r3,-129
  8117b4:	1884703a 	and	r2,r3,r2
  8117b8:	00c00304 	movi	r3,12
  8117bc:	a8c00015 	stw	r3,0(r21)
  8117c0:	003f5906 	br	811528 <__alt_mem_onchip_mem+0xff809528>
  8117c4:	94c00044 	addi	r19,r18,1
  8117c8:	02000044 	movi	r8,1
  8117cc:	003f6006 	br	811550 <__alt_mem_onchip_mem+0xff809550>
  8117d0:	00bfffc4 	movi	r2,-1
  8117d4:	003f0306 	br	8113e4 <__alt_mem_onchip_mem+0xff8093e4>
  8117d8:	00800304 	movi	r2,12
  8117dc:	a8800015 	stw	r2,0(r21)
  8117e0:	8080030b 	ldhu	r2,12(r16)
  8117e4:	003f5006 	br	811528 <__alt_mem_onchip_mem+0xff809528>

008117e8 <_isatty_r>:
  8117e8:	defffd04 	addi	sp,sp,-12
  8117ec:	dc000015 	stw	r16,0(sp)
  8117f0:	040020b4 	movhi	r16,130
  8117f4:	dc400115 	stw	r17,4(sp)
  8117f8:	84306604 	addi	r16,r16,-15976
  8117fc:	2023883a 	mov	r17,r4
  811800:	2809883a 	mov	r4,r5
  811804:	dfc00215 	stw	ra,8(sp)
  811808:	80000015 	stw	zero,0(r16)
  81180c:	081449c0 	call	81449c <isatty>
  811810:	00ffffc4 	movi	r3,-1
  811814:	10c00526 	beq	r2,r3,81182c <_isatty_r+0x44>
  811818:	dfc00217 	ldw	ra,8(sp)
  81181c:	dc400117 	ldw	r17,4(sp)
  811820:	dc000017 	ldw	r16,0(sp)
  811824:	dec00304 	addi	sp,sp,12
  811828:	f800283a 	ret
  81182c:	80c00017 	ldw	r3,0(r16)
  811830:	183ff926 	beq	r3,zero,811818 <__alt_mem_onchip_mem+0xff809818>
  811834:	88c00015 	stw	r3,0(r17)
  811838:	003ff706 	br	811818 <__alt_mem_onchip_mem+0xff809818>

0081183c <_lseek_r>:
  81183c:	defffd04 	addi	sp,sp,-12
  811840:	2805883a 	mov	r2,r5
  811844:	dc000015 	stw	r16,0(sp)
  811848:	040020b4 	movhi	r16,130
  81184c:	dc400115 	stw	r17,4(sp)
  811850:	300b883a 	mov	r5,r6
  811854:	84306604 	addi	r16,r16,-15976
  811858:	2023883a 	mov	r17,r4
  81185c:	380d883a 	mov	r6,r7
  811860:	1009883a 	mov	r4,r2
  811864:	dfc00215 	stw	ra,8(sp)
  811868:	80000015 	stw	zero,0(r16)
  81186c:	08146680 	call	814668 <lseek>
  811870:	00ffffc4 	movi	r3,-1
  811874:	10c00526 	beq	r2,r3,81188c <_lseek_r+0x50>
  811878:	dfc00217 	ldw	ra,8(sp)
  81187c:	dc400117 	ldw	r17,4(sp)
  811880:	dc000017 	ldw	r16,0(sp)
  811884:	dec00304 	addi	sp,sp,12
  811888:	f800283a 	ret
  81188c:	80c00017 	ldw	r3,0(r16)
  811890:	183ff926 	beq	r3,zero,811878 <__alt_mem_onchip_mem+0xff809878>
  811894:	88c00015 	stw	r3,0(r17)
  811898:	003ff706 	br	811878 <__alt_mem_onchip_mem+0xff809878>

0081189c <memmove>:
  81189c:	2005883a 	mov	r2,r4
  8118a0:	29000b2e 	bgeu	r5,r4,8118d0 <memmove+0x34>
  8118a4:	298f883a 	add	r7,r5,r6
  8118a8:	21c0092e 	bgeu	r4,r7,8118d0 <memmove+0x34>
  8118ac:	2187883a 	add	r3,r4,r6
  8118b0:	198bc83a 	sub	r5,r3,r6
  8118b4:	30004826 	beq	r6,zero,8119d8 <memmove+0x13c>
  8118b8:	39ffffc4 	addi	r7,r7,-1
  8118bc:	39000003 	ldbu	r4,0(r7)
  8118c0:	18ffffc4 	addi	r3,r3,-1
  8118c4:	19000005 	stb	r4,0(r3)
  8118c8:	28fffb1e 	bne	r5,r3,8118b8 <__alt_mem_onchip_mem+0xff8098b8>
  8118cc:	f800283a 	ret
  8118d0:	00c003c4 	movi	r3,15
  8118d4:	1980412e 	bgeu	r3,r6,8119dc <memmove+0x140>
  8118d8:	2886b03a 	or	r3,r5,r2
  8118dc:	18c000cc 	andi	r3,r3,3
  8118e0:	1800401e 	bne	r3,zero,8119e4 <memmove+0x148>
  8118e4:	33fffc04 	addi	r15,r6,-16
  8118e8:	781ed13a 	srli	r15,r15,4
  8118ec:	28c00104 	addi	r3,r5,4
  8118f0:	13400104 	addi	r13,r2,4
  8118f4:	781c913a 	slli	r14,r15,4
  8118f8:	2b000204 	addi	r12,r5,8
  8118fc:	12c00204 	addi	r11,r2,8
  811900:	73800504 	addi	r14,r14,20
  811904:	2a800304 	addi	r10,r5,12
  811908:	12400304 	addi	r9,r2,12
  81190c:	2b9d883a 	add	r14,r5,r14
  811910:	2811883a 	mov	r8,r5
  811914:	100f883a 	mov	r7,r2
  811918:	41000017 	ldw	r4,0(r8)
  81191c:	39c00404 	addi	r7,r7,16
  811920:	18c00404 	addi	r3,r3,16
  811924:	393ffc15 	stw	r4,-16(r7)
  811928:	193ffc17 	ldw	r4,-16(r3)
  81192c:	6b400404 	addi	r13,r13,16
  811930:	5ac00404 	addi	r11,r11,16
  811934:	693ffc15 	stw	r4,-16(r13)
  811938:	61000017 	ldw	r4,0(r12)
  81193c:	4a400404 	addi	r9,r9,16
  811940:	42000404 	addi	r8,r8,16
  811944:	593ffc15 	stw	r4,-16(r11)
  811948:	51000017 	ldw	r4,0(r10)
  81194c:	63000404 	addi	r12,r12,16
  811950:	52800404 	addi	r10,r10,16
  811954:	493ffc15 	stw	r4,-16(r9)
  811958:	1bbfef1e 	bne	r3,r14,811918 <__alt_mem_onchip_mem+0xff809918>
  81195c:	79000044 	addi	r4,r15,1
  811960:	2008913a 	slli	r4,r4,4
  811964:	328003cc 	andi	r10,r6,15
  811968:	02c000c4 	movi	r11,3
  81196c:	1107883a 	add	r3,r2,r4
  811970:	290b883a 	add	r5,r5,r4
  811974:	5a801e2e 	bgeu	r11,r10,8119f0 <memmove+0x154>
  811978:	1813883a 	mov	r9,r3
  81197c:	2811883a 	mov	r8,r5
  811980:	500f883a 	mov	r7,r10
  811984:	41000017 	ldw	r4,0(r8)
  811988:	4a400104 	addi	r9,r9,4
  81198c:	39ffff04 	addi	r7,r7,-4
  811990:	493fff15 	stw	r4,-4(r9)
  811994:	42000104 	addi	r8,r8,4
  811998:	59fffa36 	bltu	r11,r7,811984 <__alt_mem_onchip_mem+0xff809984>
  81199c:	513fff04 	addi	r4,r10,-4
  8119a0:	2008d0ba 	srli	r4,r4,2
  8119a4:	318000cc 	andi	r6,r6,3
  8119a8:	21000044 	addi	r4,r4,1
  8119ac:	2109883a 	add	r4,r4,r4
  8119b0:	2109883a 	add	r4,r4,r4
  8119b4:	1907883a 	add	r3,r3,r4
  8119b8:	290b883a 	add	r5,r5,r4
  8119bc:	30000b26 	beq	r6,zero,8119ec <memmove+0x150>
  8119c0:	198d883a 	add	r6,r3,r6
  8119c4:	29c00003 	ldbu	r7,0(r5)
  8119c8:	18c00044 	addi	r3,r3,1
  8119cc:	29400044 	addi	r5,r5,1
  8119d0:	19ffffc5 	stb	r7,-1(r3)
  8119d4:	19bffb1e 	bne	r3,r6,8119c4 <__alt_mem_onchip_mem+0xff8099c4>
  8119d8:	f800283a 	ret
  8119dc:	1007883a 	mov	r3,r2
  8119e0:	003ff606 	br	8119bc <__alt_mem_onchip_mem+0xff8099bc>
  8119e4:	1007883a 	mov	r3,r2
  8119e8:	003ff506 	br	8119c0 <__alt_mem_onchip_mem+0xff8099c0>
  8119ec:	f800283a 	ret
  8119f0:	500d883a 	mov	r6,r10
  8119f4:	003ff106 	br	8119bc <__alt_mem_onchip_mem+0xff8099bc>

008119f8 <_read_r>:
  8119f8:	defffd04 	addi	sp,sp,-12
  8119fc:	2805883a 	mov	r2,r5
  811a00:	dc000015 	stw	r16,0(sp)
  811a04:	040020b4 	movhi	r16,130
  811a08:	dc400115 	stw	r17,4(sp)
  811a0c:	300b883a 	mov	r5,r6
  811a10:	84306604 	addi	r16,r16,-15976
  811a14:	2023883a 	mov	r17,r4
  811a18:	380d883a 	mov	r6,r7
  811a1c:	1009883a 	mov	r4,r2
  811a20:	dfc00215 	stw	ra,8(sp)
  811a24:	80000015 	stw	zero,0(r16)
  811a28:	081483c0 	call	81483c <read>
  811a2c:	00ffffc4 	movi	r3,-1
  811a30:	10c00526 	beq	r2,r3,811a48 <_read_r+0x50>
  811a34:	dfc00217 	ldw	ra,8(sp)
  811a38:	dc400117 	ldw	r17,4(sp)
  811a3c:	dc000017 	ldw	r16,0(sp)
  811a40:	dec00304 	addi	sp,sp,12
  811a44:	f800283a 	ret
  811a48:	80c00017 	ldw	r3,0(r16)
  811a4c:	183ff926 	beq	r3,zero,811a34 <__alt_mem_onchip_mem+0xff809a34>
  811a50:	88c00015 	stw	r3,0(r17)
  811a54:	003ff706 	br	811a34 <__alt_mem_onchip_mem+0xff809a34>

00811a58 <_realloc_r>:
  811a58:	defff604 	addi	sp,sp,-40
  811a5c:	dc800215 	stw	r18,8(sp)
  811a60:	dfc00915 	stw	ra,36(sp)
  811a64:	df000815 	stw	fp,32(sp)
  811a68:	ddc00715 	stw	r23,28(sp)
  811a6c:	dd800615 	stw	r22,24(sp)
  811a70:	dd400515 	stw	r21,20(sp)
  811a74:	dd000415 	stw	r20,16(sp)
  811a78:	dcc00315 	stw	r19,12(sp)
  811a7c:	dc400115 	stw	r17,4(sp)
  811a80:	dc000015 	stw	r16,0(sp)
  811a84:	3025883a 	mov	r18,r6
  811a88:	2800b726 	beq	r5,zero,811d68 <_realloc_r+0x310>
  811a8c:	282b883a 	mov	r21,r5
  811a90:	2029883a 	mov	r20,r4
  811a94:	08147b80 	call	8147b8 <__malloc_lock>
  811a98:	a8bfff17 	ldw	r2,-4(r21)
  811a9c:	043fff04 	movi	r16,-4
  811aa0:	90c002c4 	addi	r3,r18,11
  811aa4:	01000584 	movi	r4,22
  811aa8:	acfffe04 	addi	r19,r21,-8
  811aac:	1420703a 	and	r16,r2,r16
  811ab0:	20c0332e 	bgeu	r4,r3,811b80 <_realloc_r+0x128>
  811ab4:	047ffe04 	movi	r17,-8
  811ab8:	1c62703a 	and	r17,r3,r17
  811abc:	8807883a 	mov	r3,r17
  811ac0:	88005816 	blt	r17,zero,811c24 <_realloc_r+0x1cc>
  811ac4:	8c805736 	bltu	r17,r18,811c24 <_realloc_r+0x1cc>
  811ac8:	80c0300e 	bge	r16,r3,811b8c <_realloc_r+0x134>
  811acc:	070020b4 	movhi	fp,130
  811ad0:	e7231704 	addi	fp,fp,-29604
  811ad4:	e1c00217 	ldw	r7,8(fp)
  811ad8:	9c09883a 	add	r4,r19,r16
  811adc:	22000117 	ldw	r8,4(r4)
  811ae0:	21c06326 	beq	r4,r7,811c70 <_realloc_r+0x218>
  811ae4:	017fff84 	movi	r5,-2
  811ae8:	414a703a 	and	r5,r8,r5
  811aec:	214b883a 	add	r5,r4,r5
  811af0:	29800117 	ldw	r6,4(r5)
  811af4:	3180004c 	andi	r6,r6,1
  811af8:	30003f26 	beq	r6,zero,811bf8 <_realloc_r+0x1a0>
  811afc:	1080004c 	andi	r2,r2,1
  811b00:	10008326 	beq	r2,zero,811d10 <_realloc_r+0x2b8>
  811b04:	900b883a 	mov	r5,r18
  811b08:	a009883a 	mov	r4,r20
  811b0c:	080d9300 	call	80d930 <_malloc_r>
  811b10:	1025883a 	mov	r18,r2
  811b14:	10011e26 	beq	r2,zero,811f90 <_realloc_r+0x538>
  811b18:	a93fff17 	ldw	r4,-4(r21)
  811b1c:	10fffe04 	addi	r3,r2,-8
  811b20:	00bfff84 	movi	r2,-2
  811b24:	2084703a 	and	r2,r4,r2
  811b28:	9885883a 	add	r2,r19,r2
  811b2c:	1880ee26 	beq	r3,r2,811ee8 <_realloc_r+0x490>
  811b30:	81bfff04 	addi	r6,r16,-4
  811b34:	00800904 	movi	r2,36
  811b38:	1180b836 	bltu	r2,r6,811e1c <_realloc_r+0x3c4>
  811b3c:	00c004c4 	movi	r3,19
  811b40:	19809636 	bltu	r3,r6,811d9c <_realloc_r+0x344>
  811b44:	9005883a 	mov	r2,r18
  811b48:	a807883a 	mov	r3,r21
  811b4c:	19000017 	ldw	r4,0(r3)
  811b50:	11000015 	stw	r4,0(r2)
  811b54:	19000117 	ldw	r4,4(r3)
  811b58:	11000115 	stw	r4,4(r2)
  811b5c:	18c00217 	ldw	r3,8(r3)
  811b60:	10c00215 	stw	r3,8(r2)
  811b64:	a80b883a 	mov	r5,r21
  811b68:	a009883a 	mov	r4,r20
  811b6c:	080d2000 	call	80d200 <_free_r>
  811b70:	a009883a 	mov	r4,r20
  811b74:	08147dc0 	call	8147dc <__malloc_unlock>
  811b78:	9005883a 	mov	r2,r18
  811b7c:	00001206 	br	811bc8 <_realloc_r+0x170>
  811b80:	00c00404 	movi	r3,16
  811b84:	1823883a 	mov	r17,r3
  811b88:	003fce06 	br	811ac4 <__alt_mem_onchip_mem+0xff809ac4>
  811b8c:	a825883a 	mov	r18,r21
  811b90:	8445c83a 	sub	r2,r16,r17
  811b94:	00c003c4 	movi	r3,15
  811b98:	18802636 	bltu	r3,r2,811c34 <_realloc_r+0x1dc>
  811b9c:	99800117 	ldw	r6,4(r19)
  811ba0:	9c07883a 	add	r3,r19,r16
  811ba4:	3180004c 	andi	r6,r6,1
  811ba8:	3420b03a 	or	r16,r6,r16
  811bac:	9c000115 	stw	r16,4(r19)
  811bb0:	18800117 	ldw	r2,4(r3)
  811bb4:	10800054 	ori	r2,r2,1
  811bb8:	18800115 	stw	r2,4(r3)
  811bbc:	a009883a 	mov	r4,r20
  811bc0:	08147dc0 	call	8147dc <__malloc_unlock>
  811bc4:	9005883a 	mov	r2,r18
  811bc8:	dfc00917 	ldw	ra,36(sp)
  811bcc:	df000817 	ldw	fp,32(sp)
  811bd0:	ddc00717 	ldw	r23,28(sp)
  811bd4:	dd800617 	ldw	r22,24(sp)
  811bd8:	dd400517 	ldw	r21,20(sp)
  811bdc:	dd000417 	ldw	r20,16(sp)
  811be0:	dcc00317 	ldw	r19,12(sp)
  811be4:	dc800217 	ldw	r18,8(sp)
  811be8:	dc400117 	ldw	r17,4(sp)
  811bec:	dc000017 	ldw	r16,0(sp)
  811bf0:	dec00a04 	addi	sp,sp,40
  811bf4:	f800283a 	ret
  811bf8:	017fff04 	movi	r5,-4
  811bfc:	414a703a 	and	r5,r8,r5
  811c00:	814d883a 	add	r6,r16,r5
  811c04:	30c01f16 	blt	r6,r3,811c84 <_realloc_r+0x22c>
  811c08:	20800317 	ldw	r2,12(r4)
  811c0c:	20c00217 	ldw	r3,8(r4)
  811c10:	a825883a 	mov	r18,r21
  811c14:	3021883a 	mov	r16,r6
  811c18:	18800315 	stw	r2,12(r3)
  811c1c:	10c00215 	stw	r3,8(r2)
  811c20:	003fdb06 	br	811b90 <__alt_mem_onchip_mem+0xff809b90>
  811c24:	00800304 	movi	r2,12
  811c28:	a0800015 	stw	r2,0(r20)
  811c2c:	0005883a 	mov	r2,zero
  811c30:	003fe506 	br	811bc8 <__alt_mem_onchip_mem+0xff809bc8>
  811c34:	98c00117 	ldw	r3,4(r19)
  811c38:	9c4b883a 	add	r5,r19,r17
  811c3c:	11000054 	ori	r4,r2,1
  811c40:	18c0004c 	andi	r3,r3,1
  811c44:	1c62b03a 	or	r17,r3,r17
  811c48:	9c400115 	stw	r17,4(r19)
  811c4c:	29000115 	stw	r4,4(r5)
  811c50:	2885883a 	add	r2,r5,r2
  811c54:	10c00117 	ldw	r3,4(r2)
  811c58:	29400204 	addi	r5,r5,8
  811c5c:	a009883a 	mov	r4,r20
  811c60:	18c00054 	ori	r3,r3,1
  811c64:	10c00115 	stw	r3,4(r2)
  811c68:	080d2000 	call	80d200 <_free_r>
  811c6c:	003fd306 	br	811bbc <__alt_mem_onchip_mem+0xff809bbc>
  811c70:	017fff04 	movi	r5,-4
  811c74:	414a703a 	and	r5,r8,r5
  811c78:	89800404 	addi	r6,r17,16
  811c7c:	8151883a 	add	r8,r16,r5
  811c80:	4180590e 	bge	r8,r6,811de8 <_realloc_r+0x390>
  811c84:	1080004c 	andi	r2,r2,1
  811c88:	103f9e1e 	bne	r2,zero,811b04 <__alt_mem_onchip_mem+0xff809b04>
  811c8c:	adbffe17 	ldw	r22,-8(r21)
  811c90:	00bfff04 	movi	r2,-4
  811c94:	9dadc83a 	sub	r22,r19,r22
  811c98:	b1800117 	ldw	r6,4(r22)
  811c9c:	3084703a 	and	r2,r6,r2
  811ca0:	20002026 	beq	r4,zero,811d24 <_realloc_r+0x2cc>
  811ca4:	80af883a 	add	r23,r16,r2
  811ca8:	b96f883a 	add	r23,r23,r5
  811cac:	21c05f26 	beq	r4,r7,811e2c <_realloc_r+0x3d4>
  811cb0:	b8c01c16 	blt	r23,r3,811d24 <_realloc_r+0x2cc>
  811cb4:	20800317 	ldw	r2,12(r4)
  811cb8:	20c00217 	ldw	r3,8(r4)
  811cbc:	81bfff04 	addi	r6,r16,-4
  811cc0:	01000904 	movi	r4,36
  811cc4:	18800315 	stw	r2,12(r3)
  811cc8:	10c00215 	stw	r3,8(r2)
  811ccc:	b0c00217 	ldw	r3,8(r22)
  811cd0:	b0800317 	ldw	r2,12(r22)
  811cd4:	b4800204 	addi	r18,r22,8
  811cd8:	18800315 	stw	r2,12(r3)
  811cdc:	10c00215 	stw	r3,8(r2)
  811ce0:	21801b36 	bltu	r4,r6,811d50 <_realloc_r+0x2f8>
  811ce4:	008004c4 	movi	r2,19
  811ce8:	1180352e 	bgeu	r2,r6,811dc0 <_realloc_r+0x368>
  811cec:	a8800017 	ldw	r2,0(r21)
  811cf0:	b0800215 	stw	r2,8(r22)
  811cf4:	a8800117 	ldw	r2,4(r21)
  811cf8:	b0800315 	stw	r2,12(r22)
  811cfc:	008006c4 	movi	r2,27
  811d00:	11807f36 	bltu	r2,r6,811f00 <_realloc_r+0x4a8>
  811d04:	b0800404 	addi	r2,r22,16
  811d08:	ad400204 	addi	r21,r21,8
  811d0c:	00002d06 	br	811dc4 <_realloc_r+0x36c>
  811d10:	adbffe17 	ldw	r22,-8(r21)
  811d14:	00bfff04 	movi	r2,-4
  811d18:	9dadc83a 	sub	r22,r19,r22
  811d1c:	b1000117 	ldw	r4,4(r22)
  811d20:	2084703a 	and	r2,r4,r2
  811d24:	b03f7726 	beq	r22,zero,811b04 <__alt_mem_onchip_mem+0xff809b04>
  811d28:	80af883a 	add	r23,r16,r2
  811d2c:	b8ff7516 	blt	r23,r3,811b04 <__alt_mem_onchip_mem+0xff809b04>
  811d30:	b0800317 	ldw	r2,12(r22)
  811d34:	b0c00217 	ldw	r3,8(r22)
  811d38:	81bfff04 	addi	r6,r16,-4
  811d3c:	01000904 	movi	r4,36
  811d40:	18800315 	stw	r2,12(r3)
  811d44:	10c00215 	stw	r3,8(r2)
  811d48:	b4800204 	addi	r18,r22,8
  811d4c:	21bfe52e 	bgeu	r4,r6,811ce4 <__alt_mem_onchip_mem+0xff809ce4>
  811d50:	a80b883a 	mov	r5,r21
  811d54:	9009883a 	mov	r4,r18
  811d58:	081189c0 	call	81189c <memmove>
  811d5c:	b821883a 	mov	r16,r23
  811d60:	b027883a 	mov	r19,r22
  811d64:	003f8a06 	br	811b90 <__alt_mem_onchip_mem+0xff809b90>
  811d68:	300b883a 	mov	r5,r6
  811d6c:	dfc00917 	ldw	ra,36(sp)
  811d70:	df000817 	ldw	fp,32(sp)
  811d74:	ddc00717 	ldw	r23,28(sp)
  811d78:	dd800617 	ldw	r22,24(sp)
  811d7c:	dd400517 	ldw	r21,20(sp)
  811d80:	dd000417 	ldw	r20,16(sp)
  811d84:	dcc00317 	ldw	r19,12(sp)
  811d88:	dc800217 	ldw	r18,8(sp)
  811d8c:	dc400117 	ldw	r17,4(sp)
  811d90:	dc000017 	ldw	r16,0(sp)
  811d94:	dec00a04 	addi	sp,sp,40
  811d98:	080d9301 	jmpi	80d930 <_malloc_r>
  811d9c:	a8c00017 	ldw	r3,0(r21)
  811da0:	90c00015 	stw	r3,0(r18)
  811da4:	a8c00117 	ldw	r3,4(r21)
  811da8:	90c00115 	stw	r3,4(r18)
  811dac:	00c006c4 	movi	r3,27
  811db0:	19804536 	bltu	r3,r6,811ec8 <_realloc_r+0x470>
  811db4:	90800204 	addi	r2,r18,8
  811db8:	a8c00204 	addi	r3,r21,8
  811dbc:	003f6306 	br	811b4c <__alt_mem_onchip_mem+0xff809b4c>
  811dc0:	9005883a 	mov	r2,r18
  811dc4:	a8c00017 	ldw	r3,0(r21)
  811dc8:	b821883a 	mov	r16,r23
  811dcc:	b027883a 	mov	r19,r22
  811dd0:	10c00015 	stw	r3,0(r2)
  811dd4:	a8c00117 	ldw	r3,4(r21)
  811dd8:	10c00115 	stw	r3,4(r2)
  811ddc:	a8c00217 	ldw	r3,8(r21)
  811de0:	10c00215 	stw	r3,8(r2)
  811de4:	003f6a06 	br	811b90 <__alt_mem_onchip_mem+0xff809b90>
  811de8:	9c67883a 	add	r19,r19,r17
  811dec:	4445c83a 	sub	r2,r8,r17
  811df0:	e4c00215 	stw	r19,8(fp)
  811df4:	10800054 	ori	r2,r2,1
  811df8:	98800115 	stw	r2,4(r19)
  811dfc:	a8bfff17 	ldw	r2,-4(r21)
  811e00:	a009883a 	mov	r4,r20
  811e04:	1080004c 	andi	r2,r2,1
  811e08:	1462b03a 	or	r17,r2,r17
  811e0c:	ac7fff15 	stw	r17,-4(r21)
  811e10:	08147dc0 	call	8147dc <__malloc_unlock>
  811e14:	a805883a 	mov	r2,r21
  811e18:	003f6b06 	br	811bc8 <__alt_mem_onchip_mem+0xff809bc8>
  811e1c:	a80b883a 	mov	r5,r21
  811e20:	9009883a 	mov	r4,r18
  811e24:	081189c0 	call	81189c <memmove>
  811e28:	003f4e06 	br	811b64 <__alt_mem_onchip_mem+0xff809b64>
  811e2c:	89000404 	addi	r4,r17,16
  811e30:	b93fbc16 	blt	r23,r4,811d24 <__alt_mem_onchip_mem+0xff809d24>
  811e34:	b0800317 	ldw	r2,12(r22)
  811e38:	b0c00217 	ldw	r3,8(r22)
  811e3c:	81bfff04 	addi	r6,r16,-4
  811e40:	01000904 	movi	r4,36
  811e44:	18800315 	stw	r2,12(r3)
  811e48:	10c00215 	stw	r3,8(r2)
  811e4c:	b4800204 	addi	r18,r22,8
  811e50:	21804336 	bltu	r4,r6,811f60 <_realloc_r+0x508>
  811e54:	008004c4 	movi	r2,19
  811e58:	11803f2e 	bgeu	r2,r6,811f58 <_realloc_r+0x500>
  811e5c:	a8800017 	ldw	r2,0(r21)
  811e60:	b0800215 	stw	r2,8(r22)
  811e64:	a8800117 	ldw	r2,4(r21)
  811e68:	b0800315 	stw	r2,12(r22)
  811e6c:	008006c4 	movi	r2,27
  811e70:	11803f36 	bltu	r2,r6,811f70 <_realloc_r+0x518>
  811e74:	b0800404 	addi	r2,r22,16
  811e78:	ad400204 	addi	r21,r21,8
  811e7c:	a8c00017 	ldw	r3,0(r21)
  811e80:	10c00015 	stw	r3,0(r2)
  811e84:	a8c00117 	ldw	r3,4(r21)
  811e88:	10c00115 	stw	r3,4(r2)
  811e8c:	a8c00217 	ldw	r3,8(r21)
  811e90:	10c00215 	stw	r3,8(r2)
  811e94:	b447883a 	add	r3,r22,r17
  811e98:	bc45c83a 	sub	r2,r23,r17
  811e9c:	e0c00215 	stw	r3,8(fp)
  811ea0:	10800054 	ori	r2,r2,1
  811ea4:	18800115 	stw	r2,4(r3)
  811ea8:	b0800117 	ldw	r2,4(r22)
  811eac:	a009883a 	mov	r4,r20
  811eb0:	1080004c 	andi	r2,r2,1
  811eb4:	1462b03a 	or	r17,r2,r17
  811eb8:	b4400115 	stw	r17,4(r22)
  811ebc:	08147dc0 	call	8147dc <__malloc_unlock>
  811ec0:	9005883a 	mov	r2,r18
  811ec4:	003f4006 	br	811bc8 <__alt_mem_onchip_mem+0xff809bc8>
  811ec8:	a8c00217 	ldw	r3,8(r21)
  811ecc:	90c00215 	stw	r3,8(r18)
  811ed0:	a8c00317 	ldw	r3,12(r21)
  811ed4:	90c00315 	stw	r3,12(r18)
  811ed8:	30801126 	beq	r6,r2,811f20 <_realloc_r+0x4c8>
  811edc:	90800404 	addi	r2,r18,16
  811ee0:	a8c00404 	addi	r3,r21,16
  811ee4:	003f1906 	br	811b4c <__alt_mem_onchip_mem+0xff809b4c>
  811ee8:	90ffff17 	ldw	r3,-4(r18)
  811eec:	00bfff04 	movi	r2,-4
  811ef0:	a825883a 	mov	r18,r21
  811ef4:	1884703a 	and	r2,r3,r2
  811ef8:	80a1883a 	add	r16,r16,r2
  811efc:	003f2406 	br	811b90 <__alt_mem_onchip_mem+0xff809b90>
  811f00:	a8800217 	ldw	r2,8(r21)
  811f04:	b0800415 	stw	r2,16(r22)
  811f08:	a8800317 	ldw	r2,12(r21)
  811f0c:	b0800515 	stw	r2,20(r22)
  811f10:	31000a26 	beq	r6,r4,811f3c <_realloc_r+0x4e4>
  811f14:	b0800604 	addi	r2,r22,24
  811f18:	ad400404 	addi	r21,r21,16
  811f1c:	003fa906 	br	811dc4 <__alt_mem_onchip_mem+0xff809dc4>
  811f20:	a9000417 	ldw	r4,16(r21)
  811f24:	90800604 	addi	r2,r18,24
  811f28:	a8c00604 	addi	r3,r21,24
  811f2c:	91000415 	stw	r4,16(r18)
  811f30:	a9000517 	ldw	r4,20(r21)
  811f34:	91000515 	stw	r4,20(r18)
  811f38:	003f0406 	br	811b4c <__alt_mem_onchip_mem+0xff809b4c>
  811f3c:	a8c00417 	ldw	r3,16(r21)
  811f40:	ad400604 	addi	r21,r21,24
  811f44:	b0800804 	addi	r2,r22,32
  811f48:	b0c00615 	stw	r3,24(r22)
  811f4c:	a8ffff17 	ldw	r3,-4(r21)
  811f50:	b0c00715 	stw	r3,28(r22)
  811f54:	003f9b06 	br	811dc4 <__alt_mem_onchip_mem+0xff809dc4>
  811f58:	9005883a 	mov	r2,r18
  811f5c:	003fc706 	br	811e7c <__alt_mem_onchip_mem+0xff809e7c>
  811f60:	a80b883a 	mov	r5,r21
  811f64:	9009883a 	mov	r4,r18
  811f68:	081189c0 	call	81189c <memmove>
  811f6c:	003fc906 	br	811e94 <__alt_mem_onchip_mem+0xff809e94>
  811f70:	a8800217 	ldw	r2,8(r21)
  811f74:	b0800415 	stw	r2,16(r22)
  811f78:	a8800317 	ldw	r2,12(r21)
  811f7c:	b0800515 	stw	r2,20(r22)
  811f80:	31000726 	beq	r6,r4,811fa0 <_realloc_r+0x548>
  811f84:	b0800604 	addi	r2,r22,24
  811f88:	ad400404 	addi	r21,r21,16
  811f8c:	003fbb06 	br	811e7c <__alt_mem_onchip_mem+0xff809e7c>
  811f90:	a009883a 	mov	r4,r20
  811f94:	08147dc0 	call	8147dc <__malloc_unlock>
  811f98:	0005883a 	mov	r2,zero
  811f9c:	003f0a06 	br	811bc8 <__alt_mem_onchip_mem+0xff809bc8>
  811fa0:	a8c00417 	ldw	r3,16(r21)
  811fa4:	ad400604 	addi	r21,r21,24
  811fa8:	b0800804 	addi	r2,r22,32
  811fac:	b0c00615 	stw	r3,24(r22)
  811fb0:	a8ffff17 	ldw	r3,-4(r21)
  811fb4:	b0c00715 	stw	r3,28(r22)
  811fb8:	003fb006 	br	811e7c <__alt_mem_onchip_mem+0xff809e7c>

00811fbc <__swbuf_r>:
  811fbc:	defffb04 	addi	sp,sp,-20
  811fc0:	dcc00315 	stw	r19,12(sp)
  811fc4:	dc800215 	stw	r18,8(sp)
  811fc8:	dc000015 	stw	r16,0(sp)
  811fcc:	dfc00415 	stw	ra,16(sp)
  811fd0:	dc400115 	stw	r17,4(sp)
  811fd4:	2025883a 	mov	r18,r4
  811fd8:	2827883a 	mov	r19,r5
  811fdc:	3021883a 	mov	r16,r6
  811fe0:	20000226 	beq	r4,zero,811fec <__swbuf_r+0x30>
  811fe4:	20800e17 	ldw	r2,56(r4)
  811fe8:	10004226 	beq	r2,zero,8120f4 <__swbuf_r+0x138>
  811fec:	80800617 	ldw	r2,24(r16)
  811ff0:	8100030b 	ldhu	r4,12(r16)
  811ff4:	80800215 	stw	r2,8(r16)
  811ff8:	2080020c 	andi	r2,r4,8
  811ffc:	10003626 	beq	r2,zero,8120d8 <__swbuf_r+0x11c>
  812000:	80c00417 	ldw	r3,16(r16)
  812004:	18003426 	beq	r3,zero,8120d8 <__swbuf_r+0x11c>
  812008:	2088000c 	andi	r2,r4,8192
  81200c:	9c403fcc 	andi	r17,r19,255
  812010:	10001a26 	beq	r2,zero,81207c <__swbuf_r+0xc0>
  812014:	80800017 	ldw	r2,0(r16)
  812018:	81000517 	ldw	r4,20(r16)
  81201c:	10c7c83a 	sub	r3,r2,r3
  812020:	1900200e 	bge	r3,r4,8120a4 <__swbuf_r+0xe8>
  812024:	18c00044 	addi	r3,r3,1
  812028:	81000217 	ldw	r4,8(r16)
  81202c:	11400044 	addi	r5,r2,1
  812030:	81400015 	stw	r5,0(r16)
  812034:	213fffc4 	addi	r4,r4,-1
  812038:	81000215 	stw	r4,8(r16)
  81203c:	14c00005 	stb	r19,0(r2)
  812040:	80800517 	ldw	r2,20(r16)
  812044:	10c01e26 	beq	r2,r3,8120c0 <__swbuf_r+0x104>
  812048:	8080030b 	ldhu	r2,12(r16)
  81204c:	1080004c 	andi	r2,r2,1
  812050:	10000226 	beq	r2,zero,81205c <__swbuf_r+0xa0>
  812054:	00800284 	movi	r2,10
  812058:	88801926 	beq	r17,r2,8120c0 <__swbuf_r+0x104>
  81205c:	8805883a 	mov	r2,r17
  812060:	dfc00417 	ldw	ra,16(sp)
  812064:	dcc00317 	ldw	r19,12(sp)
  812068:	dc800217 	ldw	r18,8(sp)
  81206c:	dc400117 	ldw	r17,4(sp)
  812070:	dc000017 	ldw	r16,0(sp)
  812074:	dec00504 	addi	sp,sp,20
  812078:	f800283a 	ret
  81207c:	81401917 	ldw	r5,100(r16)
  812080:	00b7ffc4 	movi	r2,-8193
  812084:	21080014 	ori	r4,r4,8192
  812088:	2884703a 	and	r2,r5,r2
  81208c:	80801915 	stw	r2,100(r16)
  812090:	80800017 	ldw	r2,0(r16)
  812094:	8100030d 	sth	r4,12(r16)
  812098:	81000517 	ldw	r4,20(r16)
  81209c:	10c7c83a 	sub	r3,r2,r3
  8120a0:	193fe016 	blt	r3,r4,812024 <__alt_mem_onchip_mem+0xff80a024>
  8120a4:	800b883a 	mov	r5,r16
  8120a8:	9009883a 	mov	r4,r18
  8120ac:	080ccb00 	call	80ccb0 <_fflush_r>
  8120b0:	1000071e 	bne	r2,zero,8120d0 <__swbuf_r+0x114>
  8120b4:	80800017 	ldw	r2,0(r16)
  8120b8:	00c00044 	movi	r3,1
  8120bc:	003fda06 	br	812028 <__alt_mem_onchip_mem+0xff80a028>
  8120c0:	800b883a 	mov	r5,r16
  8120c4:	9009883a 	mov	r4,r18
  8120c8:	080ccb00 	call	80ccb0 <_fflush_r>
  8120cc:	103fe326 	beq	r2,zero,81205c <__alt_mem_onchip_mem+0xff80a05c>
  8120d0:	00bfffc4 	movi	r2,-1
  8120d4:	003fe206 	br	812060 <__alt_mem_onchip_mem+0xff80a060>
  8120d8:	800b883a 	mov	r5,r16
  8120dc:	9009883a 	mov	r4,r18
  8120e0:	080b0b80 	call	80b0b8 <__swsetup_r>
  8120e4:	103ffa1e 	bne	r2,zero,8120d0 <__alt_mem_onchip_mem+0xff80a0d0>
  8120e8:	8100030b 	ldhu	r4,12(r16)
  8120ec:	80c00417 	ldw	r3,16(r16)
  8120f0:	003fc506 	br	812008 <__alt_mem_onchip_mem+0xff80a008>
  8120f4:	080d08c0 	call	80d08c <__sinit>
  8120f8:	003fbc06 	br	811fec <__alt_mem_onchip_mem+0xff809fec>

008120fc <__swbuf>:
  8120fc:	008020b4 	movhi	r2,130
  812100:	10a91604 	addi	r2,r2,-23464
  812104:	280d883a 	mov	r6,r5
  812108:	200b883a 	mov	r5,r4
  81210c:	11000017 	ldw	r4,0(r2)
  812110:	0811fbc1 	jmpi	811fbc <__swbuf_r>

00812114 <_wcrtomb_r>:
  812114:	defff604 	addi	sp,sp,-40
  812118:	008020b4 	movhi	r2,130
  81211c:	dc800815 	stw	r18,32(sp)
  812120:	dc400715 	stw	r17,28(sp)
  812124:	dc000615 	stw	r16,24(sp)
  812128:	10a91a04 	addi	r2,r2,-23448
  81212c:	dfc00915 	stw	ra,36(sp)
  812130:	2021883a 	mov	r16,r4
  812134:	3823883a 	mov	r17,r7
  812138:	14800017 	ldw	r18,0(r2)
  81213c:	28001426 	beq	r5,zero,812190 <_wcrtomb_r+0x7c>
  812140:	d9400415 	stw	r5,16(sp)
  812144:	d9800515 	stw	r6,20(sp)
  812148:	080d7140 	call	80d714 <__locale_charset>
  81214c:	d9800517 	ldw	r6,20(sp)
  812150:	d9400417 	ldw	r5,16(sp)
  812154:	100f883a 	mov	r7,r2
  812158:	dc400015 	stw	r17,0(sp)
  81215c:	8009883a 	mov	r4,r16
  812160:	903ee83a 	callr	r18
  812164:	00ffffc4 	movi	r3,-1
  812168:	10c0031e 	bne	r2,r3,812178 <_wcrtomb_r+0x64>
  81216c:	88000015 	stw	zero,0(r17)
  812170:	00c02284 	movi	r3,138
  812174:	80c00015 	stw	r3,0(r16)
  812178:	dfc00917 	ldw	ra,36(sp)
  81217c:	dc800817 	ldw	r18,32(sp)
  812180:	dc400717 	ldw	r17,28(sp)
  812184:	dc000617 	ldw	r16,24(sp)
  812188:	dec00a04 	addi	sp,sp,40
  81218c:	f800283a 	ret
  812190:	080d7140 	call	80d714 <__locale_charset>
  812194:	100f883a 	mov	r7,r2
  812198:	dc400015 	stw	r17,0(sp)
  81219c:	000d883a 	mov	r6,zero
  8121a0:	d9400104 	addi	r5,sp,4
  8121a4:	8009883a 	mov	r4,r16
  8121a8:	903ee83a 	callr	r18
  8121ac:	003fed06 	br	812164 <__alt_mem_onchip_mem+0xff80a164>

008121b0 <wcrtomb>:
  8121b0:	defff604 	addi	sp,sp,-40
  8121b4:	008020b4 	movhi	r2,130
  8121b8:	dc800615 	stw	r18,24(sp)
  8121bc:	dc400515 	stw	r17,20(sp)
  8121c0:	10a91604 	addi	r2,r2,-23464
  8121c4:	dfc00915 	stw	ra,36(sp)
  8121c8:	dd000815 	stw	r20,32(sp)
  8121cc:	dcc00715 	stw	r19,28(sp)
  8121d0:	dc000415 	stw	r16,16(sp)
  8121d4:	3025883a 	mov	r18,r6
  8121d8:	14400017 	ldw	r17,0(r2)
  8121dc:	20001926 	beq	r4,zero,812244 <wcrtomb+0x94>
  8121e0:	008020b4 	movhi	r2,130
  8121e4:	10a91a04 	addi	r2,r2,-23448
  8121e8:	15000017 	ldw	r20,0(r2)
  8121ec:	2021883a 	mov	r16,r4
  8121f0:	2827883a 	mov	r19,r5
  8121f4:	080d7140 	call	80d714 <__locale_charset>
  8121f8:	100f883a 	mov	r7,r2
  8121fc:	dc800015 	stw	r18,0(sp)
  812200:	980d883a 	mov	r6,r19
  812204:	800b883a 	mov	r5,r16
  812208:	8809883a 	mov	r4,r17
  81220c:	a03ee83a 	callr	r20
  812210:	00ffffc4 	movi	r3,-1
  812214:	10c0031e 	bne	r2,r3,812224 <wcrtomb+0x74>
  812218:	90000015 	stw	zero,0(r18)
  81221c:	00c02284 	movi	r3,138
  812220:	88c00015 	stw	r3,0(r17)
  812224:	dfc00917 	ldw	ra,36(sp)
  812228:	dd000817 	ldw	r20,32(sp)
  81222c:	dcc00717 	ldw	r19,28(sp)
  812230:	dc800617 	ldw	r18,24(sp)
  812234:	dc400517 	ldw	r17,20(sp)
  812238:	dc000417 	ldw	r16,16(sp)
  81223c:	dec00a04 	addi	sp,sp,40
  812240:	f800283a 	ret
  812244:	008020b4 	movhi	r2,130
  812248:	10a91a04 	addi	r2,r2,-23448
  81224c:	14000017 	ldw	r16,0(r2)
  812250:	080d7140 	call	80d714 <__locale_charset>
  812254:	100f883a 	mov	r7,r2
  812258:	dc800015 	stw	r18,0(sp)
  81225c:	000d883a 	mov	r6,zero
  812260:	d9400104 	addi	r5,sp,4
  812264:	8809883a 	mov	r4,r17
  812268:	803ee83a 	callr	r16
  81226c:	003fe806 	br	812210 <__alt_mem_onchip_mem+0xff80a210>

00812270 <__ascii_wctomb>:
  812270:	28000526 	beq	r5,zero,812288 <__ascii_wctomb+0x18>
  812274:	00803fc4 	movi	r2,255
  812278:	11800536 	bltu	r2,r6,812290 <__ascii_wctomb+0x20>
  81227c:	29800005 	stb	r6,0(r5)
  812280:	00800044 	movi	r2,1
  812284:	f800283a 	ret
  812288:	0005883a 	mov	r2,zero
  81228c:	f800283a 	ret
  812290:	00802284 	movi	r2,138
  812294:	20800015 	stw	r2,0(r4)
  812298:	00bfffc4 	movi	r2,-1
  81229c:	f800283a 	ret

008122a0 <_wctomb_r>:
  8122a0:	008020b4 	movhi	r2,130
  8122a4:	defff904 	addi	sp,sp,-28
  8122a8:	10a91a04 	addi	r2,r2,-23448
  8122ac:	dfc00615 	stw	ra,24(sp)
  8122b0:	dc400515 	stw	r17,20(sp)
  8122b4:	dc000415 	stw	r16,16(sp)
  8122b8:	3823883a 	mov	r17,r7
  8122bc:	14000017 	ldw	r16,0(r2)
  8122c0:	d9000115 	stw	r4,4(sp)
  8122c4:	d9400215 	stw	r5,8(sp)
  8122c8:	d9800315 	stw	r6,12(sp)
  8122cc:	080d7140 	call	80d714 <__locale_charset>
  8122d0:	d9800317 	ldw	r6,12(sp)
  8122d4:	d9400217 	ldw	r5,8(sp)
  8122d8:	d9000117 	ldw	r4,4(sp)
  8122dc:	100f883a 	mov	r7,r2
  8122e0:	dc400015 	stw	r17,0(sp)
  8122e4:	803ee83a 	callr	r16
  8122e8:	dfc00617 	ldw	ra,24(sp)
  8122ec:	dc400517 	ldw	r17,20(sp)
  8122f0:	dc000417 	ldw	r16,16(sp)
  8122f4:	dec00704 	addi	sp,sp,28
  8122f8:	f800283a 	ret

008122fc <__udivdi3>:
  8122fc:	defff504 	addi	sp,sp,-44
  812300:	dcc00415 	stw	r19,16(sp)
  812304:	dc000115 	stw	r16,4(sp)
  812308:	dfc00a15 	stw	ra,40(sp)
  81230c:	df000915 	stw	fp,36(sp)
  812310:	ddc00815 	stw	r23,32(sp)
  812314:	dd800715 	stw	r22,28(sp)
  812318:	dd400615 	stw	r21,24(sp)
  81231c:	dd000515 	stw	r20,20(sp)
  812320:	dc800315 	stw	r18,12(sp)
  812324:	dc400215 	stw	r17,8(sp)
  812328:	2027883a 	mov	r19,r4
  81232c:	2821883a 	mov	r16,r5
  812330:	3800411e 	bne	r7,zero,812438 <__udivdi3+0x13c>
  812334:	3023883a 	mov	r17,r6
  812338:	2025883a 	mov	r18,r4
  81233c:	2980522e 	bgeu	r5,r6,812488 <__udivdi3+0x18c>
  812340:	00bfffd4 	movui	r2,65535
  812344:	282d883a 	mov	r22,r5
  812348:	1180a836 	bltu	r2,r6,8125ec <__udivdi3+0x2f0>
  81234c:	00803fc4 	movi	r2,255
  812350:	1185803a 	cmpltu	r2,r2,r6
  812354:	100490fa 	slli	r2,r2,3
  812358:	3086d83a 	srl	r3,r6,r2
  81235c:	010020b4 	movhi	r4,130
  812360:	21208cc4 	addi	r4,r4,-32205
  812364:	20c7883a 	add	r3,r4,r3
  812368:	18c00003 	ldbu	r3,0(r3)
  81236c:	1885883a 	add	r2,r3,r2
  812370:	00c00804 	movi	r3,32
  812374:	1887c83a 	sub	r3,r3,r2
  812378:	18000526 	beq	r3,zero,812390 <__udivdi3+0x94>
  81237c:	80e0983a 	sll	r16,r16,r3
  812380:	9884d83a 	srl	r2,r19,r2
  812384:	30e2983a 	sll	r17,r6,r3
  812388:	98e4983a 	sll	r18,r19,r3
  81238c:	142cb03a 	or	r22,r2,r16
  812390:	882ad43a 	srli	r21,r17,16
  812394:	b009883a 	mov	r4,r22
  812398:	8d3fffcc 	andi	r20,r17,65535
  81239c:	a80b883a 	mov	r5,r21
  8123a0:	0812f080 	call	812f08 <__umodsi3>
  8123a4:	b009883a 	mov	r4,r22
  8123a8:	a80b883a 	mov	r5,r21
  8123ac:	1027883a 	mov	r19,r2
  8123b0:	0812ea40 	call	812ea4 <__udivsi3>
  8123b4:	102d883a 	mov	r22,r2
  8123b8:	9826943a 	slli	r19,r19,16
  8123bc:	9004d43a 	srli	r2,r18,16
  8123c0:	a5a1383a 	mul	r16,r20,r22
  8123c4:	14c4b03a 	or	r2,r2,r19
  8123c8:	1400052e 	bgeu	r2,r16,8123e0 <__udivdi3+0xe4>
  8123cc:	1445883a 	add	r2,r2,r17
  8123d0:	b0ffffc4 	addi	r3,r22,-1
  8123d4:	14400136 	bltu	r2,r17,8123dc <__udivdi3+0xe0>
  8123d8:	14012336 	bltu	r2,r16,812868 <__udivdi3+0x56c>
  8123dc:	182d883a 	mov	r22,r3
  8123e0:	1421c83a 	sub	r16,r2,r16
  8123e4:	a80b883a 	mov	r5,r21
  8123e8:	8009883a 	mov	r4,r16
  8123ec:	0812f080 	call	812f08 <__umodsi3>
  8123f0:	1027883a 	mov	r19,r2
  8123f4:	a80b883a 	mov	r5,r21
  8123f8:	8009883a 	mov	r4,r16
  8123fc:	0812ea40 	call	812ea4 <__udivsi3>
  812400:	9826943a 	slli	r19,r19,16
  812404:	a0a9383a 	mul	r20,r20,r2
  812408:	94bfffcc 	andi	r18,r18,65535
  81240c:	94e4b03a 	or	r18,r18,r19
  812410:	9500052e 	bgeu	r18,r20,812428 <__udivdi3+0x12c>
  812414:	8ca5883a 	add	r18,r17,r18
  812418:	10ffffc4 	addi	r3,r2,-1
  81241c:	9440f136 	bltu	r18,r17,8127e4 <__udivdi3+0x4e8>
  812420:	9500f02e 	bgeu	r18,r20,8127e4 <__udivdi3+0x4e8>
  812424:	10bfff84 	addi	r2,r2,-2
  812428:	b00c943a 	slli	r6,r22,16
  81242c:	0007883a 	mov	r3,zero
  812430:	3084b03a 	or	r2,r6,r2
  812434:	00005906 	br	81259c <__udivdi3+0x2a0>
  812438:	29c05636 	bltu	r5,r7,812594 <__udivdi3+0x298>
  81243c:	00bfffd4 	movui	r2,65535
  812440:	11c0622e 	bgeu	r2,r7,8125cc <__udivdi3+0x2d0>
  812444:	00804034 	movhi	r2,256
  812448:	10bfffc4 	addi	r2,r2,-1
  81244c:	11c0ee36 	bltu	r2,r7,812808 <__udivdi3+0x50c>
  812450:	00800404 	movi	r2,16
  812454:	3886d83a 	srl	r3,r7,r2
  812458:	010020b4 	movhi	r4,130
  81245c:	21208cc4 	addi	r4,r4,-32205
  812460:	20c7883a 	add	r3,r4,r3
  812464:	18c00003 	ldbu	r3,0(r3)
  812468:	05400804 	movi	r21,32
  81246c:	1885883a 	add	r2,r3,r2
  812470:	a8abc83a 	sub	r21,r21,r2
  812474:	a800621e 	bne	r21,zero,812600 <__udivdi3+0x304>
  812478:	3c00e936 	bltu	r7,r16,812820 <__udivdi3+0x524>
  81247c:	9985403a 	cmpgeu	r2,r19,r6
  812480:	0007883a 	mov	r3,zero
  812484:	00004506 	br	81259c <__udivdi3+0x2a0>
  812488:	3000041e 	bne	r6,zero,81249c <__udivdi3+0x1a0>
  81248c:	000b883a 	mov	r5,zero
  812490:	01000044 	movi	r4,1
  812494:	0812ea40 	call	812ea4 <__udivsi3>
  812498:	1023883a 	mov	r17,r2
  81249c:	00bfffd4 	movui	r2,65535
  8124a0:	14404e2e 	bgeu	r2,r17,8125dc <__udivdi3+0x2e0>
  8124a4:	00804034 	movhi	r2,256
  8124a8:	10bfffc4 	addi	r2,r2,-1
  8124ac:	1440d836 	bltu	r2,r17,812810 <__udivdi3+0x514>
  8124b0:	00800404 	movi	r2,16
  8124b4:	8886d83a 	srl	r3,r17,r2
  8124b8:	010020b4 	movhi	r4,130
  8124bc:	21208cc4 	addi	r4,r4,-32205
  8124c0:	20c7883a 	add	r3,r4,r3
  8124c4:	18c00003 	ldbu	r3,0(r3)
  8124c8:	1885883a 	add	r2,r3,r2
  8124cc:	00c00804 	movi	r3,32
  8124d0:	1887c83a 	sub	r3,r3,r2
  8124d4:	18008f1e 	bne	r3,zero,812714 <__udivdi3+0x418>
  8124d8:	882ad43a 	srli	r21,r17,16
  8124dc:	8461c83a 	sub	r16,r16,r17
  8124e0:	8d3fffcc 	andi	r20,r17,65535
  8124e4:	00c00044 	movi	r3,1
  8124e8:	8009883a 	mov	r4,r16
  8124ec:	a80b883a 	mov	r5,r21
  8124f0:	d8c00015 	stw	r3,0(sp)
  8124f4:	0812f080 	call	812f08 <__umodsi3>
  8124f8:	8009883a 	mov	r4,r16
  8124fc:	a80b883a 	mov	r5,r21
  812500:	1027883a 	mov	r19,r2
  812504:	0812ea40 	call	812ea4 <__udivsi3>
  812508:	9826943a 	slli	r19,r19,16
  81250c:	9008d43a 	srli	r4,r18,16
  812510:	1521383a 	mul	r16,r2,r20
  812514:	102d883a 	mov	r22,r2
  812518:	24c8b03a 	or	r4,r4,r19
  81251c:	d8c00017 	ldw	r3,0(sp)
  812520:	2400052e 	bgeu	r4,r16,812538 <__udivdi3+0x23c>
  812524:	2449883a 	add	r4,r4,r17
  812528:	b0bfffc4 	addi	r2,r22,-1
  81252c:	24400136 	bltu	r4,r17,812534 <__udivdi3+0x238>
  812530:	2400ca36 	bltu	r4,r16,81285c <__udivdi3+0x560>
  812534:	102d883a 	mov	r22,r2
  812538:	2421c83a 	sub	r16,r4,r16
  81253c:	a80b883a 	mov	r5,r21
  812540:	8009883a 	mov	r4,r16
  812544:	d8c00015 	stw	r3,0(sp)
  812548:	0812f080 	call	812f08 <__umodsi3>
  81254c:	1027883a 	mov	r19,r2
  812550:	a80b883a 	mov	r5,r21
  812554:	8009883a 	mov	r4,r16
  812558:	0812ea40 	call	812ea4 <__udivsi3>
  81255c:	9826943a 	slli	r19,r19,16
  812560:	1529383a 	mul	r20,r2,r20
  812564:	94bfffcc 	andi	r18,r18,65535
  812568:	94e4b03a 	or	r18,r18,r19
  81256c:	d8c00017 	ldw	r3,0(sp)
  812570:	9500052e 	bgeu	r18,r20,812588 <__udivdi3+0x28c>
  812574:	8ca5883a 	add	r18,r17,r18
  812578:	113fffc4 	addi	r4,r2,-1
  81257c:	94409736 	bltu	r18,r17,8127dc <__udivdi3+0x4e0>
  812580:	9500962e 	bgeu	r18,r20,8127dc <__udivdi3+0x4e0>
  812584:	10bfff84 	addi	r2,r2,-2
  812588:	b00c943a 	slli	r6,r22,16
  81258c:	3084b03a 	or	r2,r6,r2
  812590:	00000206 	br	81259c <__udivdi3+0x2a0>
  812594:	0007883a 	mov	r3,zero
  812598:	0005883a 	mov	r2,zero
  81259c:	dfc00a17 	ldw	ra,40(sp)
  8125a0:	df000917 	ldw	fp,36(sp)
  8125a4:	ddc00817 	ldw	r23,32(sp)
  8125a8:	dd800717 	ldw	r22,28(sp)
  8125ac:	dd400617 	ldw	r21,24(sp)
  8125b0:	dd000517 	ldw	r20,20(sp)
  8125b4:	dcc00417 	ldw	r19,16(sp)
  8125b8:	dc800317 	ldw	r18,12(sp)
  8125bc:	dc400217 	ldw	r17,8(sp)
  8125c0:	dc000117 	ldw	r16,4(sp)
  8125c4:	dec00b04 	addi	sp,sp,44
  8125c8:	f800283a 	ret
  8125cc:	00803fc4 	movi	r2,255
  8125d0:	11c5803a 	cmpltu	r2,r2,r7
  8125d4:	100490fa 	slli	r2,r2,3
  8125d8:	003f9e06 	br	812454 <__alt_mem_onchip_mem+0xff80a454>
  8125dc:	00803fc4 	movi	r2,255
  8125e0:	1445803a 	cmpltu	r2,r2,r17
  8125e4:	100490fa 	slli	r2,r2,3
  8125e8:	003fb206 	br	8124b4 <__alt_mem_onchip_mem+0xff80a4b4>
  8125ec:	00804034 	movhi	r2,256
  8125f0:	10bfffc4 	addi	r2,r2,-1
  8125f4:	11808836 	bltu	r2,r6,812818 <__udivdi3+0x51c>
  8125f8:	00800404 	movi	r2,16
  8125fc:	003f5606 	br	812358 <__alt_mem_onchip_mem+0xff80a358>
  812600:	30aed83a 	srl	r23,r6,r2
  812604:	3d4e983a 	sll	r7,r7,r21
  812608:	80acd83a 	srl	r22,r16,r2
  81260c:	9884d83a 	srl	r2,r19,r2
  812610:	3deeb03a 	or	r23,r7,r23
  812614:	b824d43a 	srli	r18,r23,16
  812618:	8560983a 	sll	r16,r16,r21
  81261c:	b009883a 	mov	r4,r22
  812620:	900b883a 	mov	r5,r18
  812624:	3568983a 	sll	r20,r6,r21
  812628:	1420b03a 	or	r16,r2,r16
  81262c:	0812f080 	call	812f08 <__umodsi3>
  812630:	b009883a 	mov	r4,r22
  812634:	900b883a 	mov	r5,r18
  812638:	1023883a 	mov	r17,r2
  81263c:	0812ea40 	call	812ea4 <__udivsi3>
  812640:	8808943a 	slli	r4,r17,16
  812644:	bf3fffcc 	andi	fp,r23,65535
  812648:	8006d43a 	srli	r3,r16,16
  81264c:	e0a3383a 	mul	r17,fp,r2
  812650:	100d883a 	mov	r6,r2
  812654:	1906b03a 	or	r3,r3,r4
  812658:	1c40042e 	bgeu	r3,r17,81266c <__udivdi3+0x370>
  81265c:	1dc7883a 	add	r3,r3,r23
  812660:	10bfffc4 	addi	r2,r2,-1
  812664:	1dc0752e 	bgeu	r3,r23,81283c <__udivdi3+0x540>
  812668:	100d883a 	mov	r6,r2
  81266c:	1c63c83a 	sub	r17,r3,r17
  812670:	900b883a 	mov	r5,r18
  812674:	8809883a 	mov	r4,r17
  812678:	d9800015 	stw	r6,0(sp)
  81267c:	0812f080 	call	812f08 <__umodsi3>
  812680:	102d883a 	mov	r22,r2
  812684:	8809883a 	mov	r4,r17
  812688:	900b883a 	mov	r5,r18
  81268c:	0812ea40 	call	812ea4 <__udivsi3>
  812690:	b02c943a 	slli	r22,r22,16
  812694:	e089383a 	mul	r4,fp,r2
  812698:	843fffcc 	andi	r16,r16,65535
  81269c:	85a0b03a 	or	r16,r16,r22
  8126a0:	d9800017 	ldw	r6,0(sp)
  8126a4:	8100042e 	bgeu	r16,r4,8126b8 <__udivdi3+0x3bc>
  8126a8:	85e1883a 	add	r16,r16,r23
  8126ac:	10ffffc4 	addi	r3,r2,-1
  8126b0:	85c05e2e 	bgeu	r16,r23,81282c <__udivdi3+0x530>
  8126b4:	1805883a 	mov	r2,r3
  8126b8:	300c943a 	slli	r6,r6,16
  8126bc:	a17fffcc 	andi	r5,r20,65535
  8126c0:	a028d43a 	srli	r20,r20,16
  8126c4:	3084b03a 	or	r2,r6,r2
  8126c8:	10ffffcc 	andi	r3,r2,65535
  8126cc:	100cd43a 	srli	r6,r2,16
  8126d0:	194f383a 	mul	r7,r3,r5
  8126d4:	1d07383a 	mul	r3,r3,r20
  8126d8:	314b383a 	mul	r5,r6,r5
  8126dc:	3810d43a 	srli	r8,r7,16
  8126e0:	8121c83a 	sub	r16,r16,r4
  8126e4:	1947883a 	add	r3,r3,r5
  8126e8:	40c7883a 	add	r3,r8,r3
  8126ec:	350d383a 	mul	r6,r6,r20
  8126f0:	1940022e 	bgeu	r3,r5,8126fc <__udivdi3+0x400>
  8126f4:	01000074 	movhi	r4,1
  8126f8:	310d883a 	add	r6,r6,r4
  8126fc:	1828d43a 	srli	r20,r3,16
  812700:	a18d883a 	add	r6,r20,r6
  812704:	81803e36 	bltu	r16,r6,812800 <__udivdi3+0x504>
  812708:	81803826 	beq	r16,r6,8127ec <__udivdi3+0x4f0>
  81270c:	0007883a 	mov	r3,zero
  812710:	003fa206 	br	81259c <__alt_mem_onchip_mem+0xff80a59c>
  812714:	88e2983a 	sll	r17,r17,r3
  812718:	80a8d83a 	srl	r20,r16,r2
  81271c:	80e0983a 	sll	r16,r16,r3
  812720:	882ad43a 	srli	r21,r17,16
  812724:	9884d83a 	srl	r2,r19,r2
  812728:	a009883a 	mov	r4,r20
  81272c:	a80b883a 	mov	r5,r21
  812730:	142eb03a 	or	r23,r2,r16
  812734:	98e4983a 	sll	r18,r19,r3
  812738:	0812f080 	call	812f08 <__umodsi3>
  81273c:	a009883a 	mov	r4,r20
  812740:	a80b883a 	mov	r5,r21
  812744:	1021883a 	mov	r16,r2
  812748:	0812ea40 	call	812ea4 <__udivsi3>
  81274c:	1039883a 	mov	fp,r2
  812750:	8d3fffcc 	andi	r20,r17,65535
  812754:	8020943a 	slli	r16,r16,16
  812758:	b804d43a 	srli	r2,r23,16
  81275c:	a72d383a 	mul	r22,r20,fp
  812760:	1404b03a 	or	r2,r2,r16
  812764:	1580062e 	bgeu	r2,r22,812780 <__udivdi3+0x484>
  812768:	1445883a 	add	r2,r2,r17
  81276c:	e0ffffc4 	addi	r3,fp,-1
  812770:	14403836 	bltu	r2,r17,812854 <__udivdi3+0x558>
  812774:	1580372e 	bgeu	r2,r22,812854 <__udivdi3+0x558>
  812778:	e73fff84 	addi	fp,fp,-2
  81277c:	1445883a 	add	r2,r2,r17
  812780:	15adc83a 	sub	r22,r2,r22
  812784:	a80b883a 	mov	r5,r21
  812788:	b009883a 	mov	r4,r22
  81278c:	0812f080 	call	812f08 <__umodsi3>
  812790:	1027883a 	mov	r19,r2
  812794:	b009883a 	mov	r4,r22
  812798:	a80b883a 	mov	r5,r21
  81279c:	0812ea40 	call	812ea4 <__udivsi3>
  8127a0:	9826943a 	slli	r19,r19,16
  8127a4:	a0a1383a 	mul	r16,r20,r2
  8127a8:	b93fffcc 	andi	r4,r23,65535
  8127ac:	24c8b03a 	or	r4,r4,r19
  8127b0:	2400062e 	bgeu	r4,r16,8127cc <__udivdi3+0x4d0>
  8127b4:	2449883a 	add	r4,r4,r17
  8127b8:	10ffffc4 	addi	r3,r2,-1
  8127bc:	24402336 	bltu	r4,r17,81284c <__udivdi3+0x550>
  8127c0:	2400222e 	bgeu	r4,r16,81284c <__udivdi3+0x550>
  8127c4:	10bfff84 	addi	r2,r2,-2
  8127c8:	2449883a 	add	r4,r4,r17
  8127cc:	e038943a 	slli	fp,fp,16
  8127d0:	2421c83a 	sub	r16,r4,r16
  8127d4:	e086b03a 	or	r3,fp,r2
  8127d8:	003f4306 	br	8124e8 <__alt_mem_onchip_mem+0xff80a4e8>
  8127dc:	2005883a 	mov	r2,r4
  8127e0:	003f6906 	br	812588 <__alt_mem_onchip_mem+0xff80a588>
  8127e4:	1805883a 	mov	r2,r3
  8127e8:	003f0f06 	br	812428 <__alt_mem_onchip_mem+0xff80a428>
  8127ec:	1806943a 	slli	r3,r3,16
  8127f0:	9d66983a 	sll	r19,r19,r21
  8127f4:	39ffffcc 	andi	r7,r7,65535
  8127f8:	19c7883a 	add	r3,r3,r7
  8127fc:	98ffc32e 	bgeu	r19,r3,81270c <__alt_mem_onchip_mem+0xff80a70c>
  812800:	10bfffc4 	addi	r2,r2,-1
  812804:	003fc106 	br	81270c <__alt_mem_onchip_mem+0xff80a70c>
  812808:	00800604 	movi	r2,24
  81280c:	003f1106 	br	812454 <__alt_mem_onchip_mem+0xff80a454>
  812810:	00800604 	movi	r2,24
  812814:	003f2706 	br	8124b4 <__alt_mem_onchip_mem+0xff80a4b4>
  812818:	00800604 	movi	r2,24
  81281c:	003ece06 	br	812358 <__alt_mem_onchip_mem+0xff80a358>
  812820:	0007883a 	mov	r3,zero
  812824:	00800044 	movi	r2,1
  812828:	003f5c06 	br	81259c <__alt_mem_onchip_mem+0xff80a59c>
  81282c:	813fa12e 	bgeu	r16,r4,8126b4 <__alt_mem_onchip_mem+0xff80a6b4>
  812830:	10bfff84 	addi	r2,r2,-2
  812834:	85e1883a 	add	r16,r16,r23
  812838:	003f9f06 	br	8126b8 <__alt_mem_onchip_mem+0xff80a6b8>
  81283c:	1c7f8a2e 	bgeu	r3,r17,812668 <__alt_mem_onchip_mem+0xff80a668>
  812840:	31bfff84 	addi	r6,r6,-2
  812844:	1dc7883a 	add	r3,r3,r23
  812848:	003f8806 	br	81266c <__alt_mem_onchip_mem+0xff80a66c>
  81284c:	1805883a 	mov	r2,r3
  812850:	003fde06 	br	8127cc <__alt_mem_onchip_mem+0xff80a7cc>
  812854:	1839883a 	mov	fp,r3
  812858:	003fc906 	br	812780 <__alt_mem_onchip_mem+0xff80a780>
  81285c:	b5bfff84 	addi	r22,r22,-2
  812860:	2449883a 	add	r4,r4,r17
  812864:	003f3406 	br	812538 <__alt_mem_onchip_mem+0xff80a538>
  812868:	b5bfff84 	addi	r22,r22,-2
  81286c:	1445883a 	add	r2,r2,r17
  812870:	003edb06 	br	8123e0 <__alt_mem_onchip_mem+0xff80a3e0>

00812874 <__umoddi3>:
  812874:	defff404 	addi	sp,sp,-48
  812878:	df000a15 	stw	fp,40(sp)
  81287c:	dc400315 	stw	r17,12(sp)
  812880:	dc000215 	stw	r16,8(sp)
  812884:	dfc00b15 	stw	ra,44(sp)
  812888:	ddc00915 	stw	r23,36(sp)
  81288c:	dd800815 	stw	r22,32(sp)
  812890:	dd400715 	stw	r21,28(sp)
  812894:	dd000615 	stw	r20,24(sp)
  812898:	dcc00515 	stw	r19,20(sp)
  81289c:	dc800415 	stw	r18,16(sp)
  8128a0:	2021883a 	mov	r16,r4
  8128a4:	2823883a 	mov	r17,r5
  8128a8:	2839883a 	mov	fp,r5
  8128ac:	38003c1e 	bne	r7,zero,8129a0 <__umoddi3+0x12c>
  8128b0:	3027883a 	mov	r19,r6
  8128b4:	2029883a 	mov	r20,r4
  8128b8:	2980512e 	bgeu	r5,r6,812a00 <__umoddi3+0x18c>
  8128bc:	00bfffd4 	movui	r2,65535
  8128c0:	11809a36 	bltu	r2,r6,812b2c <__umoddi3+0x2b8>
  8128c4:	01003fc4 	movi	r4,255
  8128c8:	2189803a 	cmpltu	r4,r4,r6
  8128cc:	200890fa 	slli	r4,r4,3
  8128d0:	3104d83a 	srl	r2,r6,r4
  8128d4:	00c020b4 	movhi	r3,130
  8128d8:	18e08cc4 	addi	r3,r3,-32205
  8128dc:	1885883a 	add	r2,r3,r2
  8128e0:	10c00003 	ldbu	r3,0(r2)
  8128e4:	00800804 	movi	r2,32
  8128e8:	1909883a 	add	r4,r3,r4
  8128ec:	1125c83a 	sub	r18,r2,r4
  8128f0:	90000526 	beq	r18,zero,812908 <__umoddi3+0x94>
  8128f4:	8ca2983a 	sll	r17,r17,r18
  8128f8:	8108d83a 	srl	r4,r16,r4
  8128fc:	34a6983a 	sll	r19,r6,r18
  812900:	84a8983a 	sll	r20,r16,r18
  812904:	2478b03a 	or	fp,r4,r17
  812908:	982ed43a 	srli	r23,r19,16
  81290c:	e009883a 	mov	r4,fp
  812910:	9dbfffcc 	andi	r22,r19,65535
  812914:	b80b883a 	mov	r5,r23
  812918:	0812f080 	call	812f08 <__umodsi3>
  81291c:	e009883a 	mov	r4,fp
  812920:	b80b883a 	mov	r5,r23
  812924:	102b883a 	mov	r21,r2
  812928:	0812ea40 	call	812ea4 <__udivsi3>
  81292c:	a806943a 	slli	r3,r21,16
  812930:	a008d43a 	srli	r4,r20,16
  812934:	b085383a 	mul	r2,r22,r2
  812938:	20c8b03a 	or	r4,r4,r3
  81293c:	2080032e 	bgeu	r4,r2,81294c <__umoddi3+0xd8>
  812940:	24c9883a 	add	r4,r4,r19
  812944:	24c00136 	bltu	r4,r19,81294c <__umoddi3+0xd8>
  812948:	20811036 	bltu	r4,r2,812d8c <__umoddi3+0x518>
  81294c:	20abc83a 	sub	r21,r4,r2
  812950:	b80b883a 	mov	r5,r23
  812954:	a809883a 	mov	r4,r21
  812958:	0812f080 	call	812f08 <__umodsi3>
  81295c:	1023883a 	mov	r17,r2
  812960:	b80b883a 	mov	r5,r23
  812964:	a809883a 	mov	r4,r21
  812968:	0812ea40 	call	812ea4 <__udivsi3>
  81296c:	8822943a 	slli	r17,r17,16
  812970:	b085383a 	mul	r2,r22,r2
  812974:	a0ffffcc 	andi	r3,r20,65535
  812978:	1c46b03a 	or	r3,r3,r17
  81297c:	1880042e 	bgeu	r3,r2,812990 <__umoddi3+0x11c>
  812980:	1cc7883a 	add	r3,r3,r19
  812984:	1cc00236 	bltu	r3,r19,812990 <__umoddi3+0x11c>
  812988:	1880012e 	bgeu	r3,r2,812990 <__umoddi3+0x11c>
  81298c:	1cc7883a 	add	r3,r3,r19
  812990:	1885c83a 	sub	r2,r3,r2
  812994:	1484d83a 	srl	r2,r2,r18
  812998:	0007883a 	mov	r3,zero
  81299c:	00004f06 	br	812adc <__umoddi3+0x268>
  8129a0:	29c04c36 	bltu	r5,r7,812ad4 <__umoddi3+0x260>
  8129a4:	00bfffd4 	movui	r2,65535
  8129a8:	11c0582e 	bgeu	r2,r7,812b0c <__umoddi3+0x298>
  8129ac:	00804034 	movhi	r2,256
  8129b0:	10bfffc4 	addi	r2,r2,-1
  8129b4:	11c0e736 	bltu	r2,r7,812d54 <__umoddi3+0x4e0>
  8129b8:	01000404 	movi	r4,16
  8129bc:	3904d83a 	srl	r2,r7,r4
  8129c0:	00c020b4 	movhi	r3,130
  8129c4:	18e08cc4 	addi	r3,r3,-32205
  8129c8:	1885883a 	add	r2,r3,r2
  8129cc:	14c00003 	ldbu	r19,0(r2)
  8129d0:	00c00804 	movi	r3,32
  8129d4:	9927883a 	add	r19,r19,r4
  8129d8:	1ce9c83a 	sub	r20,r3,r19
  8129dc:	a000581e 	bne	r20,zero,812b40 <__umoddi3+0x2cc>
  8129e0:	3c400136 	bltu	r7,r17,8129e8 <__umoddi3+0x174>
  8129e4:	8180eb36 	bltu	r16,r6,812d94 <__umoddi3+0x520>
  8129e8:	8185c83a 	sub	r2,r16,r6
  8129ec:	89e3c83a 	sub	r17,r17,r7
  8129f0:	8089803a 	cmpltu	r4,r16,r2
  8129f4:	8939c83a 	sub	fp,r17,r4
  8129f8:	e007883a 	mov	r3,fp
  8129fc:	00003706 	br	812adc <__umoddi3+0x268>
  812a00:	3000041e 	bne	r6,zero,812a14 <__umoddi3+0x1a0>
  812a04:	000b883a 	mov	r5,zero
  812a08:	01000044 	movi	r4,1
  812a0c:	0812ea40 	call	812ea4 <__udivsi3>
  812a10:	1027883a 	mov	r19,r2
  812a14:	00bfffd4 	movui	r2,65535
  812a18:	14c0402e 	bgeu	r2,r19,812b1c <__umoddi3+0x2a8>
  812a1c:	00804034 	movhi	r2,256
  812a20:	10bfffc4 	addi	r2,r2,-1
  812a24:	14c0cd36 	bltu	r2,r19,812d5c <__umoddi3+0x4e8>
  812a28:	00800404 	movi	r2,16
  812a2c:	9886d83a 	srl	r3,r19,r2
  812a30:	010020b4 	movhi	r4,130
  812a34:	21208cc4 	addi	r4,r4,-32205
  812a38:	20c7883a 	add	r3,r4,r3
  812a3c:	18c00003 	ldbu	r3,0(r3)
  812a40:	1887883a 	add	r3,r3,r2
  812a44:	00800804 	movi	r2,32
  812a48:	10e5c83a 	sub	r18,r2,r3
  812a4c:	9000901e 	bne	r18,zero,812c90 <__umoddi3+0x41c>
  812a50:	982cd43a 	srli	r22,r19,16
  812a54:	8ce3c83a 	sub	r17,r17,r19
  812a58:	9d7fffcc 	andi	r21,r19,65535
  812a5c:	b00b883a 	mov	r5,r22
  812a60:	8809883a 	mov	r4,r17
  812a64:	0812f080 	call	812f08 <__umodsi3>
  812a68:	8809883a 	mov	r4,r17
  812a6c:	b00b883a 	mov	r5,r22
  812a70:	1021883a 	mov	r16,r2
  812a74:	0812ea40 	call	812ea4 <__udivsi3>
  812a78:	8006943a 	slli	r3,r16,16
  812a7c:	a008d43a 	srli	r4,r20,16
  812a80:	1545383a 	mul	r2,r2,r21
  812a84:	20c8b03a 	or	r4,r4,r3
  812a88:	2080042e 	bgeu	r4,r2,812a9c <__umoddi3+0x228>
  812a8c:	24c9883a 	add	r4,r4,r19
  812a90:	24c00236 	bltu	r4,r19,812a9c <__umoddi3+0x228>
  812a94:	2080012e 	bgeu	r4,r2,812a9c <__umoddi3+0x228>
  812a98:	24c9883a 	add	r4,r4,r19
  812a9c:	20a1c83a 	sub	r16,r4,r2
  812aa0:	b00b883a 	mov	r5,r22
  812aa4:	8009883a 	mov	r4,r16
  812aa8:	0812f080 	call	812f08 <__umodsi3>
  812aac:	1023883a 	mov	r17,r2
  812ab0:	b00b883a 	mov	r5,r22
  812ab4:	8009883a 	mov	r4,r16
  812ab8:	0812ea40 	call	812ea4 <__udivsi3>
  812abc:	8822943a 	slli	r17,r17,16
  812ac0:	1545383a 	mul	r2,r2,r21
  812ac4:	a53fffcc 	andi	r20,r20,65535
  812ac8:	a446b03a 	or	r3,r20,r17
  812acc:	18bfb02e 	bgeu	r3,r2,812990 <__alt_mem_onchip_mem+0xff80a990>
  812ad0:	003fab06 	br	812980 <__alt_mem_onchip_mem+0xff80a980>
  812ad4:	2005883a 	mov	r2,r4
  812ad8:	2807883a 	mov	r3,r5
  812adc:	dfc00b17 	ldw	ra,44(sp)
  812ae0:	df000a17 	ldw	fp,40(sp)
  812ae4:	ddc00917 	ldw	r23,36(sp)
  812ae8:	dd800817 	ldw	r22,32(sp)
  812aec:	dd400717 	ldw	r21,28(sp)
  812af0:	dd000617 	ldw	r20,24(sp)
  812af4:	dcc00517 	ldw	r19,20(sp)
  812af8:	dc800417 	ldw	r18,16(sp)
  812afc:	dc400317 	ldw	r17,12(sp)
  812b00:	dc000217 	ldw	r16,8(sp)
  812b04:	dec00c04 	addi	sp,sp,48
  812b08:	f800283a 	ret
  812b0c:	04c03fc4 	movi	r19,255
  812b10:	99c9803a 	cmpltu	r4,r19,r7
  812b14:	200890fa 	slli	r4,r4,3
  812b18:	003fa806 	br	8129bc <__alt_mem_onchip_mem+0xff80a9bc>
  812b1c:	00803fc4 	movi	r2,255
  812b20:	14c5803a 	cmpltu	r2,r2,r19
  812b24:	100490fa 	slli	r2,r2,3
  812b28:	003fc006 	br	812a2c <__alt_mem_onchip_mem+0xff80aa2c>
  812b2c:	00804034 	movhi	r2,256
  812b30:	10bfffc4 	addi	r2,r2,-1
  812b34:	11808b36 	bltu	r2,r6,812d64 <__umoddi3+0x4f0>
  812b38:	01000404 	movi	r4,16
  812b3c:	003f6406 	br	8128d0 <__alt_mem_onchip_mem+0xff80a8d0>
  812b40:	34c4d83a 	srl	r2,r6,r19
  812b44:	3d0e983a 	sll	r7,r7,r20
  812b48:	8cf8d83a 	srl	fp,r17,r19
  812b4c:	8d10983a 	sll	r8,r17,r20
  812b50:	38aab03a 	or	r21,r7,r2
  812b54:	a82cd43a 	srli	r22,r21,16
  812b58:	84e2d83a 	srl	r17,r16,r19
  812b5c:	e009883a 	mov	r4,fp
  812b60:	b00b883a 	mov	r5,r22
  812b64:	8a22b03a 	or	r17,r17,r8
  812b68:	3524983a 	sll	r18,r6,r20
  812b6c:	0812f080 	call	812f08 <__umodsi3>
  812b70:	e009883a 	mov	r4,fp
  812b74:	b00b883a 	mov	r5,r22
  812b78:	102f883a 	mov	r23,r2
  812b7c:	0812ea40 	call	812ea4 <__udivsi3>
  812b80:	100d883a 	mov	r6,r2
  812b84:	b808943a 	slli	r4,r23,16
  812b88:	aa3fffcc 	andi	r8,r21,65535
  812b8c:	8804d43a 	srli	r2,r17,16
  812b90:	41af383a 	mul	r23,r8,r6
  812b94:	8520983a 	sll	r16,r16,r20
  812b98:	1104b03a 	or	r2,r2,r4
  812b9c:	15c0042e 	bgeu	r2,r23,812bb0 <__umoddi3+0x33c>
  812ba0:	1545883a 	add	r2,r2,r21
  812ba4:	30ffffc4 	addi	r3,r6,-1
  812ba8:	1540742e 	bgeu	r2,r21,812d7c <__umoddi3+0x508>
  812bac:	180d883a 	mov	r6,r3
  812bb0:	15efc83a 	sub	r23,r2,r23
  812bb4:	b00b883a 	mov	r5,r22
  812bb8:	b809883a 	mov	r4,r23
  812bbc:	d9800115 	stw	r6,4(sp)
  812bc0:	da000015 	stw	r8,0(sp)
  812bc4:	0812f080 	call	812f08 <__umodsi3>
  812bc8:	b00b883a 	mov	r5,r22
  812bcc:	b809883a 	mov	r4,r23
  812bd0:	1039883a 	mov	fp,r2
  812bd4:	0812ea40 	call	812ea4 <__udivsi3>
  812bd8:	da000017 	ldw	r8,0(sp)
  812bdc:	e038943a 	slli	fp,fp,16
  812be0:	100b883a 	mov	r5,r2
  812be4:	4089383a 	mul	r4,r8,r2
  812be8:	8a3fffcc 	andi	r8,r17,65535
  812bec:	4710b03a 	or	r8,r8,fp
  812bf0:	d9800117 	ldw	r6,4(sp)
  812bf4:	4100042e 	bgeu	r8,r4,812c08 <__umoddi3+0x394>
  812bf8:	4551883a 	add	r8,r8,r21
  812bfc:	10bfffc4 	addi	r2,r2,-1
  812c00:	45405a2e 	bgeu	r8,r21,812d6c <__umoddi3+0x4f8>
  812c04:	100b883a 	mov	r5,r2
  812c08:	300c943a 	slli	r6,r6,16
  812c0c:	91ffffcc 	andi	r7,r18,65535
  812c10:	9004d43a 	srli	r2,r18,16
  812c14:	314cb03a 	or	r6,r6,r5
  812c18:	317fffcc 	andi	r5,r6,65535
  812c1c:	300cd43a 	srli	r6,r6,16
  812c20:	29d3383a 	mul	r9,r5,r7
  812c24:	288b383a 	mul	r5,r5,r2
  812c28:	31cf383a 	mul	r7,r6,r7
  812c2c:	4806d43a 	srli	r3,r9,16
  812c30:	4111c83a 	sub	r8,r8,r4
  812c34:	29cb883a 	add	r5,r5,r7
  812c38:	194b883a 	add	r5,r3,r5
  812c3c:	3085383a 	mul	r2,r6,r2
  812c40:	29c0022e 	bgeu	r5,r7,812c4c <__umoddi3+0x3d8>
  812c44:	00c00074 	movhi	r3,1
  812c48:	10c5883a 	add	r2,r2,r3
  812c4c:	2808d43a 	srli	r4,r5,16
  812c50:	280a943a 	slli	r5,r5,16
  812c54:	4a7fffcc 	andi	r9,r9,65535
  812c58:	2085883a 	add	r2,r4,r2
  812c5c:	2a4b883a 	add	r5,r5,r9
  812c60:	40803636 	bltu	r8,r2,812d3c <__umoddi3+0x4c8>
  812c64:	40804d26 	beq	r8,r2,812d9c <__umoddi3+0x528>
  812c68:	4089c83a 	sub	r4,r8,r2
  812c6c:	280f883a 	mov	r7,r5
  812c70:	81cfc83a 	sub	r7,r16,r7
  812c74:	81c7803a 	cmpltu	r3,r16,r7
  812c78:	20c7c83a 	sub	r3,r4,r3
  812c7c:	1cc4983a 	sll	r2,r3,r19
  812c80:	3d0ed83a 	srl	r7,r7,r20
  812c84:	1d06d83a 	srl	r3,r3,r20
  812c88:	11c4b03a 	or	r2,r2,r7
  812c8c:	003f9306 	br	812adc <__alt_mem_onchip_mem+0xff80aadc>
  812c90:	9ca6983a 	sll	r19,r19,r18
  812c94:	88e8d83a 	srl	r20,r17,r3
  812c98:	80c4d83a 	srl	r2,r16,r3
  812c9c:	982cd43a 	srli	r22,r19,16
  812ca0:	8ca2983a 	sll	r17,r17,r18
  812ca4:	a009883a 	mov	r4,r20
  812ca8:	b00b883a 	mov	r5,r22
  812cac:	1478b03a 	or	fp,r2,r17
  812cb0:	0812f080 	call	812f08 <__umodsi3>
  812cb4:	a009883a 	mov	r4,r20
  812cb8:	b00b883a 	mov	r5,r22
  812cbc:	1023883a 	mov	r17,r2
  812cc0:	0812ea40 	call	812ea4 <__udivsi3>
  812cc4:	9d7fffcc 	andi	r21,r19,65535
  812cc8:	880a943a 	slli	r5,r17,16
  812ccc:	e008d43a 	srli	r4,fp,16
  812cd0:	a885383a 	mul	r2,r21,r2
  812cd4:	84a8983a 	sll	r20,r16,r18
  812cd8:	2148b03a 	or	r4,r4,r5
  812cdc:	2080042e 	bgeu	r4,r2,812cf0 <__umoddi3+0x47c>
  812ce0:	24c9883a 	add	r4,r4,r19
  812ce4:	24c00236 	bltu	r4,r19,812cf0 <__umoddi3+0x47c>
  812ce8:	2080012e 	bgeu	r4,r2,812cf0 <__umoddi3+0x47c>
  812cec:	24c9883a 	add	r4,r4,r19
  812cf0:	20a3c83a 	sub	r17,r4,r2
  812cf4:	b00b883a 	mov	r5,r22
  812cf8:	8809883a 	mov	r4,r17
  812cfc:	0812f080 	call	812f08 <__umodsi3>
  812d00:	102f883a 	mov	r23,r2
  812d04:	8809883a 	mov	r4,r17
  812d08:	b00b883a 	mov	r5,r22
  812d0c:	0812ea40 	call	812ea4 <__udivsi3>
  812d10:	b82e943a 	slli	r23,r23,16
  812d14:	a885383a 	mul	r2,r21,r2
  812d18:	e13fffcc 	andi	r4,fp,65535
  812d1c:	25c8b03a 	or	r4,r4,r23
  812d20:	2080042e 	bgeu	r4,r2,812d34 <__umoddi3+0x4c0>
  812d24:	24c9883a 	add	r4,r4,r19
  812d28:	24c00236 	bltu	r4,r19,812d34 <__umoddi3+0x4c0>
  812d2c:	2080012e 	bgeu	r4,r2,812d34 <__umoddi3+0x4c0>
  812d30:	24c9883a 	add	r4,r4,r19
  812d34:	20a3c83a 	sub	r17,r4,r2
  812d38:	003f4806 	br	812a5c <__alt_mem_onchip_mem+0xff80aa5c>
  812d3c:	2c8fc83a 	sub	r7,r5,r18
  812d40:	1545c83a 	sub	r2,r2,r21
  812d44:	29cb803a 	cmpltu	r5,r5,r7
  812d48:	1145c83a 	sub	r2,r2,r5
  812d4c:	4089c83a 	sub	r4,r8,r2
  812d50:	003fc706 	br	812c70 <__alt_mem_onchip_mem+0xff80ac70>
  812d54:	01000604 	movi	r4,24
  812d58:	003f1806 	br	8129bc <__alt_mem_onchip_mem+0xff80a9bc>
  812d5c:	00800604 	movi	r2,24
  812d60:	003f3206 	br	812a2c <__alt_mem_onchip_mem+0xff80aa2c>
  812d64:	01000604 	movi	r4,24
  812d68:	003ed906 	br	8128d0 <__alt_mem_onchip_mem+0xff80a8d0>
  812d6c:	413fa52e 	bgeu	r8,r4,812c04 <__alt_mem_onchip_mem+0xff80ac04>
  812d70:	297fff84 	addi	r5,r5,-2
  812d74:	4551883a 	add	r8,r8,r21
  812d78:	003fa306 	br	812c08 <__alt_mem_onchip_mem+0xff80ac08>
  812d7c:	15ff8b2e 	bgeu	r2,r23,812bac <__alt_mem_onchip_mem+0xff80abac>
  812d80:	31bfff84 	addi	r6,r6,-2
  812d84:	1545883a 	add	r2,r2,r21
  812d88:	003f8906 	br	812bb0 <__alt_mem_onchip_mem+0xff80abb0>
  812d8c:	24c9883a 	add	r4,r4,r19
  812d90:	003eee06 	br	81294c <__alt_mem_onchip_mem+0xff80a94c>
  812d94:	8005883a 	mov	r2,r16
  812d98:	003f1706 	br	8129f8 <__alt_mem_onchip_mem+0xff80a9f8>
  812d9c:	817fe736 	bltu	r16,r5,812d3c <__alt_mem_onchip_mem+0xff80ad3c>
  812da0:	280f883a 	mov	r7,r5
  812da4:	0009883a 	mov	r4,zero
  812da8:	003fb106 	br	812c70 <__alt_mem_onchip_mem+0xff80ac70>

00812dac <__divsi3>:
  812dac:	20001b16 	blt	r4,zero,812e1c <__divsi3+0x70>
  812db0:	000f883a 	mov	r7,zero
  812db4:	28001616 	blt	r5,zero,812e10 <__divsi3+0x64>
  812db8:	200d883a 	mov	r6,r4
  812dbc:	29001a2e 	bgeu	r5,r4,812e28 <__divsi3+0x7c>
  812dc0:	00800804 	movi	r2,32
  812dc4:	00c00044 	movi	r3,1
  812dc8:	00000106 	br	812dd0 <__divsi3+0x24>
  812dcc:	10000d26 	beq	r2,zero,812e04 <__divsi3+0x58>
  812dd0:	294b883a 	add	r5,r5,r5
  812dd4:	10bfffc4 	addi	r2,r2,-1
  812dd8:	18c7883a 	add	r3,r3,r3
  812ddc:	293ffb36 	bltu	r5,r4,812dcc <__alt_mem_onchip_mem+0xff80adcc>
  812de0:	0005883a 	mov	r2,zero
  812de4:	18000726 	beq	r3,zero,812e04 <__divsi3+0x58>
  812de8:	0005883a 	mov	r2,zero
  812dec:	31400236 	bltu	r6,r5,812df8 <__divsi3+0x4c>
  812df0:	314dc83a 	sub	r6,r6,r5
  812df4:	10c4b03a 	or	r2,r2,r3
  812df8:	1806d07a 	srli	r3,r3,1
  812dfc:	280ad07a 	srli	r5,r5,1
  812e00:	183ffa1e 	bne	r3,zero,812dec <__alt_mem_onchip_mem+0xff80adec>
  812e04:	38000126 	beq	r7,zero,812e0c <__divsi3+0x60>
  812e08:	0085c83a 	sub	r2,zero,r2
  812e0c:	f800283a 	ret
  812e10:	014bc83a 	sub	r5,zero,r5
  812e14:	39c0005c 	xori	r7,r7,1
  812e18:	003fe706 	br	812db8 <__alt_mem_onchip_mem+0xff80adb8>
  812e1c:	0109c83a 	sub	r4,zero,r4
  812e20:	01c00044 	movi	r7,1
  812e24:	003fe306 	br	812db4 <__alt_mem_onchip_mem+0xff80adb4>
  812e28:	00c00044 	movi	r3,1
  812e2c:	003fee06 	br	812de8 <__alt_mem_onchip_mem+0xff80ade8>

00812e30 <__modsi3>:
  812e30:	20001716 	blt	r4,zero,812e90 <__modsi3+0x60>
  812e34:	000f883a 	mov	r7,zero
  812e38:	2005883a 	mov	r2,r4
  812e3c:	28001216 	blt	r5,zero,812e88 <__modsi3+0x58>
  812e40:	2900162e 	bgeu	r5,r4,812e9c <__modsi3+0x6c>
  812e44:	01800804 	movi	r6,32
  812e48:	00c00044 	movi	r3,1
  812e4c:	00000106 	br	812e54 <__modsi3+0x24>
  812e50:	30000a26 	beq	r6,zero,812e7c <__modsi3+0x4c>
  812e54:	294b883a 	add	r5,r5,r5
  812e58:	31bfffc4 	addi	r6,r6,-1
  812e5c:	18c7883a 	add	r3,r3,r3
  812e60:	293ffb36 	bltu	r5,r4,812e50 <__alt_mem_onchip_mem+0xff80ae50>
  812e64:	18000526 	beq	r3,zero,812e7c <__modsi3+0x4c>
  812e68:	1806d07a 	srli	r3,r3,1
  812e6c:	11400136 	bltu	r2,r5,812e74 <__modsi3+0x44>
  812e70:	1145c83a 	sub	r2,r2,r5
  812e74:	280ad07a 	srli	r5,r5,1
  812e78:	183ffb1e 	bne	r3,zero,812e68 <__alt_mem_onchip_mem+0xff80ae68>
  812e7c:	38000126 	beq	r7,zero,812e84 <__modsi3+0x54>
  812e80:	0085c83a 	sub	r2,zero,r2
  812e84:	f800283a 	ret
  812e88:	014bc83a 	sub	r5,zero,r5
  812e8c:	003fec06 	br	812e40 <__alt_mem_onchip_mem+0xff80ae40>
  812e90:	0109c83a 	sub	r4,zero,r4
  812e94:	01c00044 	movi	r7,1
  812e98:	003fe706 	br	812e38 <__alt_mem_onchip_mem+0xff80ae38>
  812e9c:	00c00044 	movi	r3,1
  812ea0:	003ff106 	br	812e68 <__alt_mem_onchip_mem+0xff80ae68>

00812ea4 <__udivsi3>:
  812ea4:	200d883a 	mov	r6,r4
  812ea8:	2900152e 	bgeu	r5,r4,812f00 <__udivsi3+0x5c>
  812eac:	28001416 	blt	r5,zero,812f00 <__udivsi3+0x5c>
  812eb0:	00800804 	movi	r2,32
  812eb4:	00c00044 	movi	r3,1
  812eb8:	00000206 	br	812ec4 <__udivsi3+0x20>
  812ebc:	10000e26 	beq	r2,zero,812ef8 <__udivsi3+0x54>
  812ec0:	28000516 	blt	r5,zero,812ed8 <__udivsi3+0x34>
  812ec4:	294b883a 	add	r5,r5,r5
  812ec8:	10bfffc4 	addi	r2,r2,-1
  812ecc:	18c7883a 	add	r3,r3,r3
  812ed0:	293ffa36 	bltu	r5,r4,812ebc <__alt_mem_onchip_mem+0xff80aebc>
  812ed4:	18000826 	beq	r3,zero,812ef8 <__udivsi3+0x54>
  812ed8:	0005883a 	mov	r2,zero
  812edc:	31400236 	bltu	r6,r5,812ee8 <__udivsi3+0x44>
  812ee0:	314dc83a 	sub	r6,r6,r5
  812ee4:	10c4b03a 	or	r2,r2,r3
  812ee8:	1806d07a 	srli	r3,r3,1
  812eec:	280ad07a 	srli	r5,r5,1
  812ef0:	183ffa1e 	bne	r3,zero,812edc <__alt_mem_onchip_mem+0xff80aedc>
  812ef4:	f800283a 	ret
  812ef8:	0005883a 	mov	r2,zero
  812efc:	f800283a 	ret
  812f00:	00c00044 	movi	r3,1
  812f04:	003ff406 	br	812ed8 <__alt_mem_onchip_mem+0xff80aed8>

00812f08 <__umodsi3>:
  812f08:	2005883a 	mov	r2,r4
  812f0c:	2900122e 	bgeu	r5,r4,812f58 <__umodsi3+0x50>
  812f10:	28001116 	blt	r5,zero,812f58 <__umodsi3+0x50>
  812f14:	01800804 	movi	r6,32
  812f18:	00c00044 	movi	r3,1
  812f1c:	00000206 	br	812f28 <__umodsi3+0x20>
  812f20:	30000c26 	beq	r6,zero,812f54 <__umodsi3+0x4c>
  812f24:	28000516 	blt	r5,zero,812f3c <__umodsi3+0x34>
  812f28:	294b883a 	add	r5,r5,r5
  812f2c:	31bfffc4 	addi	r6,r6,-1
  812f30:	18c7883a 	add	r3,r3,r3
  812f34:	293ffa36 	bltu	r5,r4,812f20 <__alt_mem_onchip_mem+0xff80af20>
  812f38:	18000626 	beq	r3,zero,812f54 <__umodsi3+0x4c>
  812f3c:	1806d07a 	srli	r3,r3,1
  812f40:	11400136 	bltu	r2,r5,812f48 <__umodsi3+0x40>
  812f44:	1145c83a 	sub	r2,r2,r5
  812f48:	280ad07a 	srli	r5,r5,1
  812f4c:	183ffb1e 	bne	r3,zero,812f3c <__alt_mem_onchip_mem+0xff80af3c>
  812f50:	f800283a 	ret
  812f54:	f800283a 	ret
  812f58:	00c00044 	movi	r3,1
  812f5c:	003ff706 	br	812f3c <__alt_mem_onchip_mem+0xff80af3c>

00812f60 <__divdf3>:
  812f60:	defff204 	addi	sp,sp,-56
  812f64:	dd400915 	stw	r21,36(sp)
  812f68:	282ad53a 	srli	r21,r5,20
  812f6c:	dd000815 	stw	r20,32(sp)
  812f70:	2828d7fa 	srli	r20,r5,31
  812f74:	dc000415 	stw	r16,16(sp)
  812f78:	04000434 	movhi	r16,16
  812f7c:	df000c15 	stw	fp,48(sp)
  812f80:	843fffc4 	addi	r16,r16,-1
  812f84:	dfc00d15 	stw	ra,52(sp)
  812f88:	ddc00b15 	stw	r23,44(sp)
  812f8c:	dd800a15 	stw	r22,40(sp)
  812f90:	dcc00715 	stw	r19,28(sp)
  812f94:	dc800615 	stw	r18,24(sp)
  812f98:	dc400515 	stw	r17,20(sp)
  812f9c:	ad41ffcc 	andi	r21,r21,2047
  812fa0:	2c20703a 	and	r16,r5,r16
  812fa4:	a7003fcc 	andi	fp,r20,255
  812fa8:	a8006126 	beq	r21,zero,813130 <__divdf3+0x1d0>
  812fac:	0081ffc4 	movi	r2,2047
  812fb0:	2025883a 	mov	r18,r4
  812fb4:	a8803726 	beq	r21,r2,813094 <__divdf3+0x134>
  812fb8:	80800434 	orhi	r2,r16,16
  812fbc:	100490fa 	slli	r2,r2,3
  812fc0:	2020d77a 	srli	r16,r4,29
  812fc4:	202490fa 	slli	r18,r4,3
  812fc8:	ad7f0044 	addi	r21,r21,-1023
  812fcc:	80a0b03a 	or	r16,r16,r2
  812fd0:	0027883a 	mov	r19,zero
  812fd4:	0013883a 	mov	r9,zero
  812fd8:	3804d53a 	srli	r2,r7,20
  812fdc:	382cd7fa 	srli	r22,r7,31
  812fe0:	04400434 	movhi	r17,16
  812fe4:	8c7fffc4 	addi	r17,r17,-1
  812fe8:	1081ffcc 	andi	r2,r2,2047
  812fec:	3011883a 	mov	r8,r6
  812ff0:	3c62703a 	and	r17,r7,r17
  812ff4:	b5c03fcc 	andi	r23,r22,255
  812ff8:	10006c26 	beq	r2,zero,8131ac <__divdf3+0x24c>
  812ffc:	00c1ffc4 	movi	r3,2047
  813000:	10c06426 	beq	r2,r3,813194 <__divdf3+0x234>
  813004:	88c00434 	orhi	r3,r17,16
  813008:	180690fa 	slli	r3,r3,3
  81300c:	3022d77a 	srli	r17,r6,29
  813010:	301090fa 	slli	r8,r6,3
  813014:	10bf0044 	addi	r2,r2,-1023
  813018:	88e2b03a 	or	r17,r17,r3
  81301c:	000f883a 	mov	r7,zero
  813020:	a58cf03a 	xor	r6,r20,r22
  813024:	3cc8b03a 	or	r4,r7,r19
  813028:	a8abc83a 	sub	r21,r21,r2
  81302c:	008003c4 	movi	r2,15
  813030:	3007883a 	mov	r3,r6
  813034:	34c03fcc 	andi	r19,r6,255
  813038:	11009036 	bltu	r2,r4,81327c <__divdf3+0x31c>
  81303c:	200890ba 	slli	r4,r4,2
  813040:	00802074 	movhi	r2,129
  813044:	108c1504 	addi	r2,r2,12372
  813048:	2089883a 	add	r4,r4,r2
  81304c:	20800017 	ldw	r2,0(r4)
  813050:	1000683a 	jmp	r2
  813054:	0081327c 	xorhi	r2,zero,1225
  813058:	008130cc 	andi	r2,zero,1219
  81305c:	0081326c 	andhi	r2,zero,1225
  813060:	008130c0 	call	8130c <__alt_mem_sdram-0x77ecf4>
  813064:	0081326c 	andhi	r2,zero,1225
  813068:	00813240 	call	81324 <__alt_mem_sdram-0x77ecdc>
  81306c:	0081326c 	andhi	r2,zero,1225
  813070:	008130c0 	call	8130c <__alt_mem_sdram-0x77ecf4>
  813074:	008130cc 	andi	r2,zero,1219
  813078:	008130cc 	andi	r2,zero,1219
  81307c:	00813240 	call	81324 <__alt_mem_sdram-0x77ecdc>
  813080:	008130c0 	call	8130c <__alt_mem_sdram-0x77ecf4>
  813084:	008130b0 	cmpltui	r2,zero,1218
  813088:	008130b0 	cmpltui	r2,zero,1218
  81308c:	008130b0 	cmpltui	r2,zero,1218
  813090:	00813560 	cmpeqi	r2,zero,1237
  813094:	2404b03a 	or	r2,r4,r16
  813098:	1000661e 	bne	r2,zero,813234 <__divdf3+0x2d4>
  81309c:	04c00204 	movi	r19,8
  8130a0:	0021883a 	mov	r16,zero
  8130a4:	0025883a 	mov	r18,zero
  8130a8:	02400084 	movi	r9,2
  8130ac:	003fca06 	br	812fd8 <__alt_mem_onchip_mem+0xff80afd8>
  8130b0:	8023883a 	mov	r17,r16
  8130b4:	9011883a 	mov	r8,r18
  8130b8:	e02f883a 	mov	r23,fp
  8130bc:	480f883a 	mov	r7,r9
  8130c0:	00800084 	movi	r2,2
  8130c4:	3881311e 	bne	r7,r2,81358c <__divdf3+0x62c>
  8130c8:	b827883a 	mov	r19,r23
  8130cc:	98c0004c 	andi	r3,r19,1
  8130d0:	0081ffc4 	movi	r2,2047
  8130d4:	000b883a 	mov	r5,zero
  8130d8:	0025883a 	mov	r18,zero
  8130dc:	1004953a 	slli	r2,r2,20
  8130e0:	18c03fcc 	andi	r3,r3,255
  8130e4:	04400434 	movhi	r17,16
  8130e8:	8c7fffc4 	addi	r17,r17,-1
  8130ec:	180697fa 	slli	r3,r3,31
  8130f0:	2c4a703a 	and	r5,r5,r17
  8130f4:	288ab03a 	or	r5,r5,r2
  8130f8:	28c6b03a 	or	r3,r5,r3
  8130fc:	9005883a 	mov	r2,r18
  813100:	dfc00d17 	ldw	ra,52(sp)
  813104:	df000c17 	ldw	fp,48(sp)
  813108:	ddc00b17 	ldw	r23,44(sp)
  81310c:	dd800a17 	ldw	r22,40(sp)
  813110:	dd400917 	ldw	r21,36(sp)
  813114:	dd000817 	ldw	r20,32(sp)
  813118:	dcc00717 	ldw	r19,28(sp)
  81311c:	dc800617 	ldw	r18,24(sp)
  813120:	dc400517 	ldw	r17,20(sp)
  813124:	dc000417 	ldw	r16,16(sp)
  813128:	dec00e04 	addi	sp,sp,56
  81312c:	f800283a 	ret
  813130:	2404b03a 	or	r2,r4,r16
  813134:	2027883a 	mov	r19,r4
  813138:	10003926 	beq	r2,zero,813220 <__divdf3+0x2c0>
  81313c:	80012e26 	beq	r16,zero,8135f8 <__divdf3+0x698>
  813140:	8009883a 	mov	r4,r16
  813144:	d9800315 	stw	r6,12(sp)
  813148:	d9c00215 	stw	r7,8(sp)
  81314c:	0808d180 	call	808d18 <__clzsi2>
  813150:	d9800317 	ldw	r6,12(sp)
  813154:	d9c00217 	ldw	r7,8(sp)
  813158:	113ffd44 	addi	r4,r2,-11
  81315c:	00c00704 	movi	r3,28
  813160:	19012116 	blt	r3,r4,8135e8 <__divdf3+0x688>
  813164:	00c00744 	movi	r3,29
  813168:	147ffe04 	addi	r17,r2,-8
  81316c:	1907c83a 	sub	r3,r3,r4
  813170:	8460983a 	sll	r16,r16,r17
  813174:	98c6d83a 	srl	r3,r19,r3
  813178:	9c64983a 	sll	r18,r19,r17
  81317c:	1c20b03a 	or	r16,r3,r16
  813180:	1080fcc4 	addi	r2,r2,1011
  813184:	00abc83a 	sub	r21,zero,r2
  813188:	0027883a 	mov	r19,zero
  81318c:	0013883a 	mov	r9,zero
  813190:	003f9106 	br	812fd8 <__alt_mem_onchip_mem+0xff80afd8>
  813194:	3446b03a 	or	r3,r6,r17
  813198:	18001f1e 	bne	r3,zero,813218 <__divdf3+0x2b8>
  81319c:	0023883a 	mov	r17,zero
  8131a0:	0011883a 	mov	r8,zero
  8131a4:	01c00084 	movi	r7,2
  8131a8:	003f9d06 	br	813020 <__alt_mem_onchip_mem+0xff80b020>
  8131ac:	3446b03a 	or	r3,r6,r17
  8131b0:	18001526 	beq	r3,zero,813208 <__divdf3+0x2a8>
  8131b4:	88011b26 	beq	r17,zero,813624 <__divdf3+0x6c4>
  8131b8:	8809883a 	mov	r4,r17
  8131bc:	d9800315 	stw	r6,12(sp)
  8131c0:	da400115 	stw	r9,4(sp)
  8131c4:	0808d180 	call	808d18 <__clzsi2>
  8131c8:	d9800317 	ldw	r6,12(sp)
  8131cc:	da400117 	ldw	r9,4(sp)
  8131d0:	113ffd44 	addi	r4,r2,-11
  8131d4:	00c00704 	movi	r3,28
  8131d8:	19010e16 	blt	r3,r4,813614 <__divdf3+0x6b4>
  8131dc:	00c00744 	movi	r3,29
  8131e0:	123ffe04 	addi	r8,r2,-8
  8131e4:	1907c83a 	sub	r3,r3,r4
  8131e8:	8a22983a 	sll	r17,r17,r8
  8131ec:	30c6d83a 	srl	r3,r6,r3
  8131f0:	3210983a 	sll	r8,r6,r8
  8131f4:	1c62b03a 	or	r17,r3,r17
  8131f8:	1080fcc4 	addi	r2,r2,1011
  8131fc:	0085c83a 	sub	r2,zero,r2
  813200:	000f883a 	mov	r7,zero
  813204:	003f8606 	br	813020 <__alt_mem_onchip_mem+0xff80b020>
  813208:	0023883a 	mov	r17,zero
  81320c:	0011883a 	mov	r8,zero
  813210:	01c00044 	movi	r7,1
  813214:	003f8206 	br	813020 <__alt_mem_onchip_mem+0xff80b020>
  813218:	01c000c4 	movi	r7,3
  81321c:	003f8006 	br	813020 <__alt_mem_onchip_mem+0xff80b020>
  813220:	04c00104 	movi	r19,4
  813224:	0021883a 	mov	r16,zero
  813228:	0025883a 	mov	r18,zero
  81322c:	02400044 	movi	r9,1
  813230:	003f6906 	br	812fd8 <__alt_mem_onchip_mem+0xff80afd8>
  813234:	04c00304 	movi	r19,12
  813238:	024000c4 	movi	r9,3
  81323c:	003f6606 	br	812fd8 <__alt_mem_onchip_mem+0xff80afd8>
  813240:	01400434 	movhi	r5,16
  813244:	0007883a 	mov	r3,zero
  813248:	297fffc4 	addi	r5,r5,-1
  81324c:	04bfffc4 	movi	r18,-1
  813250:	0081ffc4 	movi	r2,2047
  813254:	003fa106 	br	8130dc <__alt_mem_onchip_mem+0xff80b0dc>
  813258:	00c00044 	movi	r3,1
  81325c:	1887c83a 	sub	r3,r3,r2
  813260:	01000e04 	movi	r4,56
  813264:	20c1210e 	bge	r4,r3,8136ec <__divdf3+0x78c>
  813268:	98c0004c 	andi	r3,r19,1
  81326c:	0005883a 	mov	r2,zero
  813270:	000b883a 	mov	r5,zero
  813274:	0025883a 	mov	r18,zero
  813278:	003f9806 	br	8130dc <__alt_mem_onchip_mem+0xff80b0dc>
  81327c:	8c00fd36 	bltu	r17,r16,813674 <__divdf3+0x714>
  813280:	8440fb26 	beq	r16,r17,813670 <__divdf3+0x710>
  813284:	8007883a 	mov	r3,r16
  813288:	ad7fffc4 	addi	r21,r21,-1
  81328c:	0021883a 	mov	r16,zero
  813290:	4004d63a 	srli	r2,r8,24
  813294:	8822923a 	slli	r17,r17,8
  813298:	1809883a 	mov	r4,r3
  81329c:	402c923a 	slli	r22,r8,8
  8132a0:	88b8b03a 	or	fp,r17,r2
  8132a4:	e028d43a 	srli	r20,fp,16
  8132a8:	d8c00015 	stw	r3,0(sp)
  8132ac:	e5ffffcc 	andi	r23,fp,65535
  8132b0:	a00b883a 	mov	r5,r20
  8132b4:	0812ea40 	call	812ea4 <__udivsi3>
  8132b8:	d8c00017 	ldw	r3,0(sp)
  8132bc:	a00b883a 	mov	r5,r20
  8132c0:	d8800315 	stw	r2,12(sp)
  8132c4:	1809883a 	mov	r4,r3
  8132c8:	0812f080 	call	812f08 <__umodsi3>
  8132cc:	d9800317 	ldw	r6,12(sp)
  8132d0:	1006943a 	slli	r3,r2,16
  8132d4:	9004d43a 	srli	r2,r18,16
  8132d8:	b9a3383a 	mul	r17,r23,r6
  8132dc:	10c4b03a 	or	r2,r2,r3
  8132e0:	1440062e 	bgeu	r2,r17,8132fc <__divdf3+0x39c>
  8132e4:	1705883a 	add	r2,r2,fp
  8132e8:	30ffffc4 	addi	r3,r6,-1
  8132ec:	1700ee36 	bltu	r2,fp,8136a8 <__divdf3+0x748>
  8132f0:	1440ed2e 	bgeu	r2,r17,8136a8 <__divdf3+0x748>
  8132f4:	31bfff84 	addi	r6,r6,-2
  8132f8:	1705883a 	add	r2,r2,fp
  8132fc:	1463c83a 	sub	r17,r2,r17
  813300:	a00b883a 	mov	r5,r20
  813304:	8809883a 	mov	r4,r17
  813308:	d9800315 	stw	r6,12(sp)
  81330c:	0812ea40 	call	812ea4 <__udivsi3>
  813310:	a00b883a 	mov	r5,r20
  813314:	8809883a 	mov	r4,r17
  813318:	d8800215 	stw	r2,8(sp)
  81331c:	0812f080 	call	812f08 <__umodsi3>
  813320:	d9c00217 	ldw	r7,8(sp)
  813324:	1004943a 	slli	r2,r2,16
  813328:	94bfffcc 	andi	r18,r18,65535
  81332c:	b9d1383a 	mul	r8,r23,r7
  813330:	90a4b03a 	or	r18,r18,r2
  813334:	d9800317 	ldw	r6,12(sp)
  813338:	9200062e 	bgeu	r18,r8,813354 <__divdf3+0x3f4>
  81333c:	9725883a 	add	r18,r18,fp
  813340:	38bfffc4 	addi	r2,r7,-1
  813344:	9700d636 	bltu	r18,fp,8136a0 <__divdf3+0x740>
  813348:	9200d52e 	bgeu	r18,r8,8136a0 <__divdf3+0x740>
  81334c:	39ffff84 	addi	r7,r7,-2
  813350:	9725883a 	add	r18,r18,fp
  813354:	3004943a 	slli	r2,r6,16
  813358:	b012d43a 	srli	r9,r22,16
  81335c:	b1bfffcc 	andi	r6,r22,65535
  813360:	11e2b03a 	or	r17,r2,r7
  813364:	8806d43a 	srli	r3,r17,16
  813368:	893fffcc 	andi	r4,r17,65535
  81336c:	218b383a 	mul	r5,r4,r6
  813370:	30c5383a 	mul	r2,r6,r3
  813374:	2249383a 	mul	r4,r4,r9
  813378:	280ed43a 	srli	r7,r5,16
  81337c:	9225c83a 	sub	r18,r18,r8
  813380:	2089883a 	add	r4,r4,r2
  813384:	3909883a 	add	r4,r7,r4
  813388:	1a47383a 	mul	r3,r3,r9
  81338c:	2080022e 	bgeu	r4,r2,813398 <__divdf3+0x438>
  813390:	00800074 	movhi	r2,1
  813394:	1887883a 	add	r3,r3,r2
  813398:	2004d43a 	srli	r2,r4,16
  81339c:	2008943a 	slli	r4,r4,16
  8133a0:	297fffcc 	andi	r5,r5,65535
  8133a4:	10c7883a 	add	r3,r2,r3
  8133a8:	2149883a 	add	r4,r4,r5
  8133ac:	90c0a536 	bltu	r18,r3,813644 <__divdf3+0x6e4>
  8133b0:	90c0bf26 	beq	r18,r3,8136b0 <__divdf3+0x750>
  8133b4:	90c7c83a 	sub	r3,r18,r3
  8133b8:	810fc83a 	sub	r7,r16,r4
  8133bc:	81e5803a 	cmpltu	r18,r16,r7
  8133c0:	1ca5c83a 	sub	r18,r3,r18
  8133c4:	e480c126 	beq	fp,r18,8136cc <__divdf3+0x76c>
  8133c8:	a00b883a 	mov	r5,r20
  8133cc:	9009883a 	mov	r4,r18
  8133d0:	d9800315 	stw	r6,12(sp)
  8133d4:	d9c00215 	stw	r7,8(sp)
  8133d8:	da400115 	stw	r9,4(sp)
  8133dc:	0812ea40 	call	812ea4 <__udivsi3>
  8133e0:	a00b883a 	mov	r5,r20
  8133e4:	9009883a 	mov	r4,r18
  8133e8:	d8800015 	stw	r2,0(sp)
  8133ec:	0812f080 	call	812f08 <__umodsi3>
  8133f0:	d9c00217 	ldw	r7,8(sp)
  8133f4:	da000017 	ldw	r8,0(sp)
  8133f8:	1006943a 	slli	r3,r2,16
  8133fc:	3804d43a 	srli	r2,r7,16
  813400:	ba21383a 	mul	r16,r23,r8
  813404:	d9800317 	ldw	r6,12(sp)
  813408:	10c4b03a 	or	r2,r2,r3
  81340c:	da400117 	ldw	r9,4(sp)
  813410:	1400062e 	bgeu	r2,r16,81342c <__divdf3+0x4cc>
  813414:	1705883a 	add	r2,r2,fp
  813418:	40ffffc4 	addi	r3,r8,-1
  81341c:	1700ad36 	bltu	r2,fp,8136d4 <__divdf3+0x774>
  813420:	1400ac2e 	bgeu	r2,r16,8136d4 <__divdf3+0x774>
  813424:	423fff84 	addi	r8,r8,-2
  813428:	1705883a 	add	r2,r2,fp
  81342c:	1421c83a 	sub	r16,r2,r16
  813430:	a00b883a 	mov	r5,r20
  813434:	8009883a 	mov	r4,r16
  813438:	d9800315 	stw	r6,12(sp)
  81343c:	d9c00215 	stw	r7,8(sp)
  813440:	da000015 	stw	r8,0(sp)
  813444:	da400115 	stw	r9,4(sp)
  813448:	0812ea40 	call	812ea4 <__udivsi3>
  81344c:	8009883a 	mov	r4,r16
  813450:	a00b883a 	mov	r5,r20
  813454:	1025883a 	mov	r18,r2
  813458:	0812f080 	call	812f08 <__umodsi3>
  81345c:	d9c00217 	ldw	r7,8(sp)
  813460:	1004943a 	slli	r2,r2,16
  813464:	bcaf383a 	mul	r23,r23,r18
  813468:	393fffcc 	andi	r4,r7,65535
  81346c:	2088b03a 	or	r4,r4,r2
  813470:	d9800317 	ldw	r6,12(sp)
  813474:	da000017 	ldw	r8,0(sp)
  813478:	da400117 	ldw	r9,4(sp)
  81347c:	25c0062e 	bgeu	r4,r23,813498 <__divdf3+0x538>
  813480:	2709883a 	add	r4,r4,fp
  813484:	90bfffc4 	addi	r2,r18,-1
  813488:	27009436 	bltu	r4,fp,8136dc <__divdf3+0x77c>
  81348c:	25c0932e 	bgeu	r4,r23,8136dc <__divdf3+0x77c>
  813490:	94bfff84 	addi	r18,r18,-2
  813494:	2709883a 	add	r4,r4,fp
  813498:	4004943a 	slli	r2,r8,16
  81349c:	25efc83a 	sub	r23,r4,r23
  8134a0:	1490b03a 	or	r8,r2,r18
  8134a4:	4008d43a 	srli	r4,r8,16
  8134a8:	40ffffcc 	andi	r3,r8,65535
  8134ac:	30c5383a 	mul	r2,r6,r3
  8134b0:	1a47383a 	mul	r3,r3,r9
  8134b4:	310d383a 	mul	r6,r6,r4
  8134b8:	100ad43a 	srli	r5,r2,16
  8134bc:	4913383a 	mul	r9,r9,r4
  8134c0:	1987883a 	add	r3,r3,r6
  8134c4:	28c7883a 	add	r3,r5,r3
  8134c8:	1980022e 	bgeu	r3,r6,8134d4 <__divdf3+0x574>
  8134cc:	01000074 	movhi	r4,1
  8134d0:	4913883a 	add	r9,r9,r4
  8134d4:	1808d43a 	srli	r4,r3,16
  8134d8:	1806943a 	slli	r3,r3,16
  8134dc:	10bfffcc 	andi	r2,r2,65535
  8134e0:	2253883a 	add	r9,r4,r9
  8134e4:	1887883a 	add	r3,r3,r2
  8134e8:	ba403836 	bltu	r23,r9,8135cc <__divdf3+0x66c>
  8134ec:	ba403626 	beq	r23,r9,8135c8 <__divdf3+0x668>
  8134f0:	42000054 	ori	r8,r8,1
  8134f4:	a880ffc4 	addi	r2,r21,1023
  8134f8:	00bf570e 	bge	zero,r2,813258 <__alt_mem_onchip_mem+0xff80b258>
  8134fc:	40c001cc 	andi	r3,r8,7
  813500:	18000726 	beq	r3,zero,813520 <__divdf3+0x5c0>
  813504:	40c003cc 	andi	r3,r8,15
  813508:	01000104 	movi	r4,4
  81350c:	19000426 	beq	r3,r4,813520 <__divdf3+0x5c0>
  813510:	4107883a 	add	r3,r8,r4
  813514:	1a11803a 	cmpltu	r8,r3,r8
  813518:	8a23883a 	add	r17,r17,r8
  81351c:	1811883a 	mov	r8,r3
  813520:	88c0402c 	andhi	r3,r17,256
  813524:	18000426 	beq	r3,zero,813538 <__divdf3+0x5d8>
  813528:	00ffc034 	movhi	r3,65280
  81352c:	18ffffc4 	addi	r3,r3,-1
  813530:	a8810004 	addi	r2,r21,1024
  813534:	88e2703a 	and	r17,r17,r3
  813538:	00c1ff84 	movi	r3,2046
  81353c:	18bee316 	blt	r3,r2,8130cc <__alt_mem_onchip_mem+0xff80b0cc>
  813540:	8824977a 	slli	r18,r17,29
  813544:	4010d0fa 	srli	r8,r8,3
  813548:	8822927a 	slli	r17,r17,9
  81354c:	1081ffcc 	andi	r2,r2,2047
  813550:	9224b03a 	or	r18,r18,r8
  813554:	880ad33a 	srli	r5,r17,12
  813558:	98c0004c 	andi	r3,r19,1
  81355c:	003edf06 	br	8130dc <__alt_mem_onchip_mem+0xff80b0dc>
  813560:	8080022c 	andhi	r2,r16,8
  813564:	10001226 	beq	r2,zero,8135b0 <__divdf3+0x650>
  813568:	8880022c 	andhi	r2,r17,8
  81356c:	1000101e 	bne	r2,zero,8135b0 <__divdf3+0x650>
  813570:	00800434 	movhi	r2,16
  813574:	89400234 	orhi	r5,r17,8
  813578:	10bfffc4 	addi	r2,r2,-1
  81357c:	b007883a 	mov	r3,r22
  813580:	288a703a 	and	r5,r5,r2
  813584:	4025883a 	mov	r18,r8
  813588:	003f3106 	br	813250 <__alt_mem_onchip_mem+0xff80b250>
  81358c:	008000c4 	movi	r2,3
  813590:	3880a626 	beq	r7,r2,81382c <__divdf3+0x8cc>
  813594:	00800044 	movi	r2,1
  813598:	3880521e 	bne	r7,r2,8136e4 <__divdf3+0x784>
  81359c:	b807883a 	mov	r3,r23
  8135a0:	0005883a 	mov	r2,zero
  8135a4:	000b883a 	mov	r5,zero
  8135a8:	0025883a 	mov	r18,zero
  8135ac:	003ecb06 	br	8130dc <__alt_mem_onchip_mem+0xff80b0dc>
  8135b0:	00800434 	movhi	r2,16
  8135b4:	81400234 	orhi	r5,r16,8
  8135b8:	10bfffc4 	addi	r2,r2,-1
  8135bc:	a007883a 	mov	r3,r20
  8135c0:	288a703a 	and	r5,r5,r2
  8135c4:	003f2206 	br	813250 <__alt_mem_onchip_mem+0xff80b250>
  8135c8:	183fca26 	beq	r3,zero,8134f4 <__alt_mem_onchip_mem+0xff80b4f4>
  8135cc:	e5ef883a 	add	r23,fp,r23
  8135d0:	40bfffc4 	addi	r2,r8,-1
  8135d4:	bf00392e 	bgeu	r23,fp,8136bc <__divdf3+0x75c>
  8135d8:	1011883a 	mov	r8,r2
  8135dc:	ba7fc41e 	bne	r23,r9,8134f0 <__alt_mem_onchip_mem+0xff80b4f0>
  8135e0:	b0ffc31e 	bne	r22,r3,8134f0 <__alt_mem_onchip_mem+0xff80b4f0>
  8135e4:	003fc306 	br	8134f4 <__alt_mem_onchip_mem+0xff80b4f4>
  8135e8:	143ff604 	addi	r16,r2,-40
  8135ec:	9c20983a 	sll	r16,r19,r16
  8135f0:	0025883a 	mov	r18,zero
  8135f4:	003ee206 	br	813180 <__alt_mem_onchip_mem+0xff80b180>
  8135f8:	d9800315 	stw	r6,12(sp)
  8135fc:	d9c00215 	stw	r7,8(sp)
  813600:	0808d180 	call	808d18 <__clzsi2>
  813604:	10800804 	addi	r2,r2,32
  813608:	d9c00217 	ldw	r7,8(sp)
  81360c:	d9800317 	ldw	r6,12(sp)
  813610:	003ed106 	br	813158 <__alt_mem_onchip_mem+0xff80b158>
  813614:	147ff604 	addi	r17,r2,-40
  813618:	3462983a 	sll	r17,r6,r17
  81361c:	0011883a 	mov	r8,zero
  813620:	003ef506 	br	8131f8 <__alt_mem_onchip_mem+0xff80b1f8>
  813624:	3009883a 	mov	r4,r6
  813628:	d9800315 	stw	r6,12(sp)
  81362c:	da400115 	stw	r9,4(sp)
  813630:	0808d180 	call	808d18 <__clzsi2>
  813634:	10800804 	addi	r2,r2,32
  813638:	da400117 	ldw	r9,4(sp)
  81363c:	d9800317 	ldw	r6,12(sp)
  813640:	003ee306 	br	8131d0 <__alt_mem_onchip_mem+0xff80b1d0>
  813644:	85a1883a 	add	r16,r16,r22
  813648:	8585803a 	cmpltu	r2,r16,r22
  81364c:	1705883a 	add	r2,r2,fp
  813650:	14a5883a 	add	r18,r2,r18
  813654:	88bfffc4 	addi	r2,r17,-1
  813658:	e4800c2e 	bgeu	fp,r18,81368c <__divdf3+0x72c>
  81365c:	90c03e36 	bltu	r18,r3,813758 <__divdf3+0x7f8>
  813660:	1c806926 	beq	r3,r18,813808 <__divdf3+0x8a8>
  813664:	90c7c83a 	sub	r3,r18,r3
  813668:	1023883a 	mov	r17,r2
  81366c:	003f5206 	br	8133b8 <__alt_mem_onchip_mem+0xff80b3b8>
  813670:	923f0436 	bltu	r18,r8,813284 <__alt_mem_onchip_mem+0xff80b284>
  813674:	800897fa 	slli	r4,r16,31
  813678:	9004d07a 	srli	r2,r18,1
  81367c:	8006d07a 	srli	r3,r16,1
  813680:	902097fa 	slli	r16,r18,31
  813684:	20a4b03a 	or	r18,r4,r2
  813688:	003f0106 	br	813290 <__alt_mem_onchip_mem+0xff80b290>
  81368c:	e4bff51e 	bne	fp,r18,813664 <__alt_mem_onchip_mem+0xff80b664>
  813690:	85bff22e 	bgeu	r16,r22,81365c <__alt_mem_onchip_mem+0xff80b65c>
  813694:	e0c7c83a 	sub	r3,fp,r3
  813698:	1023883a 	mov	r17,r2
  81369c:	003f4606 	br	8133b8 <__alt_mem_onchip_mem+0xff80b3b8>
  8136a0:	100f883a 	mov	r7,r2
  8136a4:	003f2b06 	br	813354 <__alt_mem_onchip_mem+0xff80b354>
  8136a8:	180d883a 	mov	r6,r3
  8136ac:	003f1306 	br	8132fc <__alt_mem_onchip_mem+0xff80b2fc>
  8136b0:	813fe436 	bltu	r16,r4,813644 <__alt_mem_onchip_mem+0xff80b644>
  8136b4:	0007883a 	mov	r3,zero
  8136b8:	003f3f06 	br	8133b8 <__alt_mem_onchip_mem+0xff80b3b8>
  8136bc:	ba402c36 	bltu	r23,r9,813770 <__divdf3+0x810>
  8136c0:	4dc05426 	beq	r9,r23,813814 <__divdf3+0x8b4>
  8136c4:	1011883a 	mov	r8,r2
  8136c8:	003f8906 	br	8134f0 <__alt_mem_onchip_mem+0xff80b4f0>
  8136cc:	023fffc4 	movi	r8,-1
  8136d0:	003f8806 	br	8134f4 <__alt_mem_onchip_mem+0xff80b4f4>
  8136d4:	1811883a 	mov	r8,r3
  8136d8:	003f5406 	br	81342c <__alt_mem_onchip_mem+0xff80b42c>
  8136dc:	1025883a 	mov	r18,r2
  8136e0:	003f6d06 	br	813498 <__alt_mem_onchip_mem+0xff80b498>
  8136e4:	b827883a 	mov	r19,r23
  8136e8:	003f8206 	br	8134f4 <__alt_mem_onchip_mem+0xff80b4f4>
  8136ec:	010007c4 	movi	r4,31
  8136f0:	20c02616 	blt	r4,r3,81378c <__divdf3+0x82c>
  8136f4:	00800804 	movi	r2,32
  8136f8:	10c5c83a 	sub	r2,r2,r3
  8136fc:	888a983a 	sll	r5,r17,r2
  813700:	40c8d83a 	srl	r4,r8,r3
  813704:	4084983a 	sll	r2,r8,r2
  813708:	88e2d83a 	srl	r17,r17,r3
  81370c:	2906b03a 	or	r3,r5,r4
  813710:	1004c03a 	cmpne	r2,r2,zero
  813714:	1886b03a 	or	r3,r3,r2
  813718:	188001cc 	andi	r2,r3,7
  81371c:	10000726 	beq	r2,zero,81373c <__divdf3+0x7dc>
  813720:	188003cc 	andi	r2,r3,15
  813724:	01000104 	movi	r4,4
  813728:	11000426 	beq	r2,r4,81373c <__divdf3+0x7dc>
  81372c:	1805883a 	mov	r2,r3
  813730:	10c00104 	addi	r3,r2,4
  813734:	1885803a 	cmpltu	r2,r3,r2
  813738:	88a3883a 	add	r17,r17,r2
  81373c:	8880202c 	andhi	r2,r17,128
  813740:	10002726 	beq	r2,zero,8137e0 <__divdf3+0x880>
  813744:	98c0004c 	andi	r3,r19,1
  813748:	00800044 	movi	r2,1
  81374c:	000b883a 	mov	r5,zero
  813750:	0025883a 	mov	r18,zero
  813754:	003e6106 	br	8130dc <__alt_mem_onchip_mem+0xff80b0dc>
  813758:	85a1883a 	add	r16,r16,r22
  81375c:	8585803a 	cmpltu	r2,r16,r22
  813760:	1705883a 	add	r2,r2,fp
  813764:	14a5883a 	add	r18,r2,r18
  813768:	8c7fff84 	addi	r17,r17,-2
  81376c:	003f1106 	br	8133b4 <__alt_mem_onchip_mem+0xff80b3b4>
  813770:	b589883a 	add	r4,r22,r22
  813774:	25ad803a 	cmpltu	r22,r4,r22
  813778:	b739883a 	add	fp,r22,fp
  81377c:	40bfff84 	addi	r2,r8,-2
  813780:	bf2f883a 	add	r23,r23,fp
  813784:	202d883a 	mov	r22,r4
  813788:	003f9306 	br	8135d8 <__alt_mem_onchip_mem+0xff80b5d8>
  81378c:	013ff844 	movi	r4,-31
  813790:	2085c83a 	sub	r2,r4,r2
  813794:	8888d83a 	srl	r4,r17,r2
  813798:	00800804 	movi	r2,32
  81379c:	18802126 	beq	r3,r2,813824 <__divdf3+0x8c4>
  8137a0:	00801004 	movi	r2,64
  8137a4:	10c5c83a 	sub	r2,r2,r3
  8137a8:	8884983a 	sll	r2,r17,r2
  8137ac:	1204b03a 	or	r2,r2,r8
  8137b0:	1004c03a 	cmpne	r2,r2,zero
  8137b4:	2084b03a 	or	r2,r4,r2
  8137b8:	144001cc 	andi	r17,r2,7
  8137bc:	88000d1e 	bne	r17,zero,8137f4 <__divdf3+0x894>
  8137c0:	000b883a 	mov	r5,zero
  8137c4:	1024d0fa 	srli	r18,r2,3
  8137c8:	98c0004c 	andi	r3,r19,1
  8137cc:	0005883a 	mov	r2,zero
  8137d0:	9464b03a 	or	r18,r18,r17
  8137d4:	003e4106 	br	8130dc <__alt_mem_onchip_mem+0xff80b0dc>
  8137d8:	1007883a 	mov	r3,r2
  8137dc:	0023883a 	mov	r17,zero
  8137e0:	880a927a 	slli	r5,r17,9
  8137e4:	1805883a 	mov	r2,r3
  8137e8:	8822977a 	slli	r17,r17,29
  8137ec:	280ad33a 	srli	r5,r5,12
  8137f0:	003ff406 	br	8137c4 <__alt_mem_onchip_mem+0xff80b7c4>
  8137f4:	10c003cc 	andi	r3,r2,15
  8137f8:	01000104 	movi	r4,4
  8137fc:	193ff626 	beq	r3,r4,8137d8 <__alt_mem_onchip_mem+0xff80b7d8>
  813800:	0023883a 	mov	r17,zero
  813804:	003fca06 	br	813730 <__alt_mem_onchip_mem+0xff80b730>
  813808:	813fd336 	bltu	r16,r4,813758 <__alt_mem_onchip_mem+0xff80b758>
  81380c:	1023883a 	mov	r17,r2
  813810:	003fa806 	br	8136b4 <__alt_mem_onchip_mem+0xff80b6b4>
  813814:	b0ffd636 	bltu	r22,r3,813770 <__alt_mem_onchip_mem+0xff80b770>
  813818:	1011883a 	mov	r8,r2
  81381c:	b0ff341e 	bne	r22,r3,8134f0 <__alt_mem_onchip_mem+0xff80b4f0>
  813820:	003f3406 	br	8134f4 <__alt_mem_onchip_mem+0xff80b4f4>
  813824:	0005883a 	mov	r2,zero
  813828:	003fe006 	br	8137ac <__alt_mem_onchip_mem+0xff80b7ac>
  81382c:	00800434 	movhi	r2,16
  813830:	89400234 	orhi	r5,r17,8
  813834:	10bfffc4 	addi	r2,r2,-1
  813838:	b807883a 	mov	r3,r23
  81383c:	288a703a 	and	r5,r5,r2
  813840:	4025883a 	mov	r18,r8
  813844:	003e8206 	br	813250 <__alt_mem_onchip_mem+0xff80b250>

00813848 <__eqdf2>:
  813848:	2804d53a 	srli	r2,r5,20
  81384c:	3806d53a 	srli	r3,r7,20
  813850:	02000434 	movhi	r8,16
  813854:	423fffc4 	addi	r8,r8,-1
  813858:	1081ffcc 	andi	r2,r2,2047
  81385c:	0281ffc4 	movi	r10,2047
  813860:	2a12703a 	and	r9,r5,r8
  813864:	18c1ffcc 	andi	r3,r3,2047
  813868:	3a10703a 	and	r8,r7,r8
  81386c:	280ad7fa 	srli	r5,r5,31
  813870:	380ed7fa 	srli	r7,r7,31
  813874:	12801026 	beq	r2,r10,8138b8 <__eqdf2+0x70>
  813878:	0281ffc4 	movi	r10,2047
  81387c:	1a800a26 	beq	r3,r10,8138a8 <__eqdf2+0x60>
  813880:	10c00226 	beq	r2,r3,81388c <__eqdf2+0x44>
  813884:	00800044 	movi	r2,1
  813888:	f800283a 	ret
  81388c:	4a3ffd1e 	bne	r9,r8,813884 <__alt_mem_onchip_mem+0xff80b884>
  813890:	21bffc1e 	bne	r4,r6,813884 <__alt_mem_onchip_mem+0xff80b884>
  813894:	29c00c26 	beq	r5,r7,8138c8 <__eqdf2+0x80>
  813898:	103ffa1e 	bne	r2,zero,813884 <__alt_mem_onchip_mem+0xff80b884>
  81389c:	2244b03a 	or	r2,r4,r9
  8138a0:	1004c03a 	cmpne	r2,r2,zero
  8138a4:	f800283a 	ret
  8138a8:	3214b03a 	or	r10,r6,r8
  8138ac:	503ff426 	beq	r10,zero,813880 <__alt_mem_onchip_mem+0xff80b880>
  8138b0:	00800044 	movi	r2,1
  8138b4:	f800283a 	ret
  8138b8:	2254b03a 	or	r10,r4,r9
  8138bc:	503fee26 	beq	r10,zero,813878 <__alt_mem_onchip_mem+0xff80b878>
  8138c0:	00800044 	movi	r2,1
  8138c4:	f800283a 	ret
  8138c8:	0005883a 	mov	r2,zero
  8138cc:	f800283a 	ret

008138d0 <__muldf3>:
  8138d0:	defff304 	addi	sp,sp,-52
  8138d4:	2804d53a 	srli	r2,r5,20
  8138d8:	dd800915 	stw	r22,36(sp)
  8138dc:	282cd7fa 	srli	r22,r5,31
  8138e0:	dc000315 	stw	r16,12(sp)
  8138e4:	04000434 	movhi	r16,16
  8138e8:	dd400815 	stw	r21,32(sp)
  8138ec:	dc800515 	stw	r18,20(sp)
  8138f0:	843fffc4 	addi	r16,r16,-1
  8138f4:	dfc00c15 	stw	ra,48(sp)
  8138f8:	df000b15 	stw	fp,44(sp)
  8138fc:	ddc00a15 	stw	r23,40(sp)
  813900:	dd000715 	stw	r20,28(sp)
  813904:	dcc00615 	stw	r19,24(sp)
  813908:	dc400415 	stw	r17,16(sp)
  81390c:	1481ffcc 	andi	r18,r2,2047
  813910:	2c20703a 	and	r16,r5,r16
  813914:	b02b883a 	mov	r21,r22
  813918:	b2403fcc 	andi	r9,r22,255
  81391c:	90006026 	beq	r18,zero,813aa0 <__muldf3+0x1d0>
  813920:	0081ffc4 	movi	r2,2047
  813924:	2029883a 	mov	r20,r4
  813928:	90803626 	beq	r18,r2,813a04 <__muldf3+0x134>
  81392c:	80800434 	orhi	r2,r16,16
  813930:	100490fa 	slli	r2,r2,3
  813934:	2020d77a 	srli	r16,r4,29
  813938:	202890fa 	slli	r20,r4,3
  81393c:	94bf0044 	addi	r18,r18,-1023
  813940:	80a0b03a 	or	r16,r16,r2
  813944:	0027883a 	mov	r19,zero
  813948:	0039883a 	mov	fp,zero
  81394c:	3804d53a 	srli	r2,r7,20
  813950:	382ed7fa 	srli	r23,r7,31
  813954:	04400434 	movhi	r17,16
  813958:	8c7fffc4 	addi	r17,r17,-1
  81395c:	1081ffcc 	andi	r2,r2,2047
  813960:	3011883a 	mov	r8,r6
  813964:	3c62703a 	and	r17,r7,r17
  813968:	ba803fcc 	andi	r10,r23,255
  81396c:	10006d26 	beq	r2,zero,813b24 <__muldf3+0x254>
  813970:	00c1ffc4 	movi	r3,2047
  813974:	10c06526 	beq	r2,r3,813b0c <__muldf3+0x23c>
  813978:	88c00434 	orhi	r3,r17,16
  81397c:	180690fa 	slli	r3,r3,3
  813980:	3022d77a 	srli	r17,r6,29
  813984:	301090fa 	slli	r8,r6,3
  813988:	10bf0044 	addi	r2,r2,-1023
  81398c:	88e2b03a 	or	r17,r17,r3
  813990:	000b883a 	mov	r5,zero
  813994:	9085883a 	add	r2,r18,r2
  813998:	2cc8b03a 	or	r4,r5,r19
  81399c:	00c003c4 	movi	r3,15
  8139a0:	bdacf03a 	xor	r22,r23,r22
  8139a4:	12c00044 	addi	r11,r2,1
  8139a8:	19009936 	bltu	r3,r4,813c10 <__muldf3+0x340>
  8139ac:	200890ba 	slli	r4,r4,2
  8139b0:	00c02074 	movhi	r3,129
  8139b4:	18ce7104 	addi	r3,r3,14788
  8139b8:	20c9883a 	add	r4,r4,r3
  8139bc:	20c00017 	ldw	r3,0(r4)
  8139c0:	1800683a 	jmp	r3
  8139c4:	00813c10 	cmplti	r2,zero,1264
  8139c8:	00813a24 	muli	r2,zero,1256
  8139cc:	00813a24 	muli	r2,zero,1256
  8139d0:	00813a20 	cmpeqi	r2,zero,1256
  8139d4:	00813bec 	andhi	r2,zero,1263
  8139d8:	00813bec 	andhi	r2,zero,1263
  8139dc:	00813bd4 	movui	r2,1263
  8139e0:	00813a20 	cmpeqi	r2,zero,1256
  8139e4:	00813bec 	andhi	r2,zero,1263
  8139e8:	00813bd4 	movui	r2,1263
  8139ec:	00813bec 	andhi	r2,zero,1263
  8139f0:	00813a20 	cmpeqi	r2,zero,1256
  8139f4:	00813bfc 	xorhi	r2,zero,1263
  8139f8:	00813bfc 	xorhi	r2,zero,1263
  8139fc:	00813bfc 	xorhi	r2,zero,1263
  813a00:	00813e18 	cmpnei	r2,zero,1272
  813a04:	2404b03a 	or	r2,r4,r16
  813a08:	10006f1e 	bne	r2,zero,813bc8 <__muldf3+0x2f8>
  813a0c:	04c00204 	movi	r19,8
  813a10:	0021883a 	mov	r16,zero
  813a14:	0029883a 	mov	r20,zero
  813a18:	07000084 	movi	fp,2
  813a1c:	003fcb06 	br	81394c <__alt_mem_onchip_mem+0xff80b94c>
  813a20:	502d883a 	mov	r22,r10
  813a24:	00800084 	movi	r2,2
  813a28:	28805726 	beq	r5,r2,813b88 <__muldf3+0x2b8>
  813a2c:	008000c4 	movi	r2,3
  813a30:	28816626 	beq	r5,r2,813fcc <__muldf3+0x6fc>
  813a34:	00800044 	movi	r2,1
  813a38:	2881411e 	bne	r5,r2,813f40 <__muldf3+0x670>
  813a3c:	b02b883a 	mov	r21,r22
  813a40:	0005883a 	mov	r2,zero
  813a44:	000b883a 	mov	r5,zero
  813a48:	0029883a 	mov	r20,zero
  813a4c:	1004953a 	slli	r2,r2,20
  813a50:	a8c03fcc 	andi	r3,r21,255
  813a54:	04400434 	movhi	r17,16
  813a58:	8c7fffc4 	addi	r17,r17,-1
  813a5c:	180697fa 	slli	r3,r3,31
  813a60:	2c4a703a 	and	r5,r5,r17
  813a64:	288ab03a 	or	r5,r5,r2
  813a68:	28c6b03a 	or	r3,r5,r3
  813a6c:	a005883a 	mov	r2,r20
  813a70:	dfc00c17 	ldw	ra,48(sp)
  813a74:	df000b17 	ldw	fp,44(sp)
  813a78:	ddc00a17 	ldw	r23,40(sp)
  813a7c:	dd800917 	ldw	r22,36(sp)
  813a80:	dd400817 	ldw	r21,32(sp)
  813a84:	dd000717 	ldw	r20,28(sp)
  813a88:	dcc00617 	ldw	r19,24(sp)
  813a8c:	dc800517 	ldw	r18,20(sp)
  813a90:	dc400417 	ldw	r17,16(sp)
  813a94:	dc000317 	ldw	r16,12(sp)
  813a98:	dec00d04 	addi	sp,sp,52
  813a9c:	f800283a 	ret
  813aa0:	2404b03a 	or	r2,r4,r16
  813aa4:	2027883a 	mov	r19,r4
  813aa8:	10004226 	beq	r2,zero,813bb4 <__muldf3+0x2e4>
  813aac:	8000fc26 	beq	r16,zero,813ea0 <__muldf3+0x5d0>
  813ab0:	8009883a 	mov	r4,r16
  813ab4:	d9800215 	stw	r6,8(sp)
  813ab8:	d9c00015 	stw	r7,0(sp)
  813abc:	da400115 	stw	r9,4(sp)
  813ac0:	0808d180 	call	808d18 <__clzsi2>
  813ac4:	d9800217 	ldw	r6,8(sp)
  813ac8:	d9c00017 	ldw	r7,0(sp)
  813acc:	da400117 	ldw	r9,4(sp)
  813ad0:	113ffd44 	addi	r4,r2,-11
  813ad4:	00c00704 	movi	r3,28
  813ad8:	1900ed16 	blt	r3,r4,813e90 <__muldf3+0x5c0>
  813adc:	00c00744 	movi	r3,29
  813ae0:	147ffe04 	addi	r17,r2,-8
  813ae4:	1907c83a 	sub	r3,r3,r4
  813ae8:	8460983a 	sll	r16,r16,r17
  813aec:	98c6d83a 	srl	r3,r19,r3
  813af0:	9c68983a 	sll	r20,r19,r17
  813af4:	1c20b03a 	or	r16,r3,r16
  813af8:	1080fcc4 	addi	r2,r2,1011
  813afc:	00a5c83a 	sub	r18,zero,r2
  813b00:	0027883a 	mov	r19,zero
  813b04:	0039883a 	mov	fp,zero
  813b08:	003f9006 	br	81394c <__alt_mem_onchip_mem+0xff80b94c>
  813b0c:	3446b03a 	or	r3,r6,r17
  813b10:	1800261e 	bne	r3,zero,813bac <__muldf3+0x2dc>
  813b14:	0023883a 	mov	r17,zero
  813b18:	0011883a 	mov	r8,zero
  813b1c:	01400084 	movi	r5,2
  813b20:	003f9c06 	br	813994 <__alt_mem_onchip_mem+0xff80b994>
  813b24:	3446b03a 	or	r3,r6,r17
  813b28:	18001c26 	beq	r3,zero,813b9c <__muldf3+0x2cc>
  813b2c:	8800ce26 	beq	r17,zero,813e68 <__muldf3+0x598>
  813b30:	8809883a 	mov	r4,r17
  813b34:	d9800215 	stw	r6,8(sp)
  813b38:	da400115 	stw	r9,4(sp)
  813b3c:	da800015 	stw	r10,0(sp)
  813b40:	0808d180 	call	808d18 <__clzsi2>
  813b44:	d9800217 	ldw	r6,8(sp)
  813b48:	da400117 	ldw	r9,4(sp)
  813b4c:	da800017 	ldw	r10,0(sp)
  813b50:	113ffd44 	addi	r4,r2,-11
  813b54:	00c00704 	movi	r3,28
  813b58:	1900bf16 	blt	r3,r4,813e58 <__muldf3+0x588>
  813b5c:	00c00744 	movi	r3,29
  813b60:	123ffe04 	addi	r8,r2,-8
  813b64:	1907c83a 	sub	r3,r3,r4
  813b68:	8a22983a 	sll	r17,r17,r8
  813b6c:	30c6d83a 	srl	r3,r6,r3
  813b70:	3210983a 	sll	r8,r6,r8
  813b74:	1c62b03a 	or	r17,r3,r17
  813b78:	1080fcc4 	addi	r2,r2,1011
  813b7c:	0085c83a 	sub	r2,zero,r2
  813b80:	000b883a 	mov	r5,zero
  813b84:	003f8306 	br	813994 <__alt_mem_onchip_mem+0xff80b994>
  813b88:	b02b883a 	mov	r21,r22
  813b8c:	0081ffc4 	movi	r2,2047
  813b90:	000b883a 	mov	r5,zero
  813b94:	0029883a 	mov	r20,zero
  813b98:	003fac06 	br	813a4c <__alt_mem_onchip_mem+0xff80ba4c>
  813b9c:	0023883a 	mov	r17,zero
  813ba0:	0011883a 	mov	r8,zero
  813ba4:	01400044 	movi	r5,1
  813ba8:	003f7a06 	br	813994 <__alt_mem_onchip_mem+0xff80b994>
  813bac:	014000c4 	movi	r5,3
  813bb0:	003f7806 	br	813994 <__alt_mem_onchip_mem+0xff80b994>
  813bb4:	04c00104 	movi	r19,4
  813bb8:	0021883a 	mov	r16,zero
  813bbc:	0029883a 	mov	r20,zero
  813bc0:	07000044 	movi	fp,1
  813bc4:	003f6106 	br	81394c <__alt_mem_onchip_mem+0xff80b94c>
  813bc8:	04c00304 	movi	r19,12
  813bcc:	070000c4 	movi	fp,3
  813bd0:	003f5e06 	br	81394c <__alt_mem_onchip_mem+0xff80b94c>
  813bd4:	01400434 	movhi	r5,16
  813bd8:	002b883a 	mov	r21,zero
  813bdc:	297fffc4 	addi	r5,r5,-1
  813be0:	053fffc4 	movi	r20,-1
  813be4:	0081ffc4 	movi	r2,2047
  813be8:	003f9806 	br	813a4c <__alt_mem_onchip_mem+0xff80ba4c>
  813bec:	8023883a 	mov	r17,r16
  813bf0:	a011883a 	mov	r8,r20
  813bf4:	e00b883a 	mov	r5,fp
  813bf8:	003f8a06 	br	813a24 <__alt_mem_onchip_mem+0xff80ba24>
  813bfc:	8023883a 	mov	r17,r16
  813c00:	a011883a 	mov	r8,r20
  813c04:	482d883a 	mov	r22,r9
  813c08:	e00b883a 	mov	r5,fp
  813c0c:	003f8506 	br	813a24 <__alt_mem_onchip_mem+0xff80ba24>
  813c10:	a00ad43a 	srli	r5,r20,16
  813c14:	401ad43a 	srli	r13,r8,16
  813c18:	a53fffcc 	andi	r20,r20,65535
  813c1c:	423fffcc 	andi	r8,r8,65535
  813c20:	4519383a 	mul	r12,r8,r20
  813c24:	4147383a 	mul	r3,r8,r5
  813c28:	6d09383a 	mul	r4,r13,r20
  813c2c:	600cd43a 	srli	r6,r12,16
  813c30:	2b5d383a 	mul	r14,r5,r13
  813c34:	20c9883a 	add	r4,r4,r3
  813c38:	310d883a 	add	r6,r6,r4
  813c3c:	30c0022e 	bgeu	r6,r3,813c48 <__muldf3+0x378>
  813c40:	00c00074 	movhi	r3,1
  813c44:	70dd883a 	add	r14,r14,r3
  813c48:	8826d43a 	srli	r19,r17,16
  813c4c:	8bffffcc 	andi	r15,r17,65535
  813c50:	7d23383a 	mul	r17,r15,r20
  813c54:	7949383a 	mul	r4,r15,r5
  813c58:	9d29383a 	mul	r20,r19,r20
  813c5c:	8814d43a 	srli	r10,r17,16
  813c60:	3012943a 	slli	r9,r6,16
  813c64:	a129883a 	add	r20,r20,r4
  813c68:	633fffcc 	andi	r12,r12,65535
  813c6c:	5515883a 	add	r10,r10,r20
  813c70:	3006d43a 	srli	r3,r6,16
  813c74:	4b13883a 	add	r9,r9,r12
  813c78:	2ccb383a 	mul	r5,r5,r19
  813c7c:	5100022e 	bgeu	r10,r4,813c88 <__muldf3+0x3b8>
  813c80:	01000074 	movhi	r4,1
  813c84:	290b883a 	add	r5,r5,r4
  813c88:	802ad43a 	srli	r21,r16,16
  813c8c:	843fffcc 	andi	r16,r16,65535
  813c90:	440d383a 	mul	r6,r8,r16
  813c94:	4565383a 	mul	r18,r8,r21
  813c98:	8349383a 	mul	r4,r16,r13
  813c9c:	500e943a 	slli	r7,r10,16
  813ca0:	3010d43a 	srli	r8,r6,16
  813ca4:	5028d43a 	srli	r20,r10,16
  813ca8:	2489883a 	add	r4,r4,r18
  813cac:	8abfffcc 	andi	r10,r17,65535
  813cb0:	3a95883a 	add	r10,r7,r10
  813cb4:	4119883a 	add	r12,r8,r4
  813cb8:	a169883a 	add	r20,r20,r5
  813cbc:	1a87883a 	add	r3,r3,r10
  813cc0:	6d5b383a 	mul	r13,r13,r21
  813cc4:	6480022e 	bgeu	r12,r18,813cd0 <__muldf3+0x400>
  813cc8:	01000074 	movhi	r4,1
  813ccc:	691b883a 	add	r13,r13,r4
  813cd0:	7c25383a 	mul	r18,r15,r16
  813cd4:	7d4b383a 	mul	r5,r15,r21
  813cd8:	84cf383a 	mul	r7,r16,r19
  813cdc:	901ed43a 	srli	r15,r18,16
  813ce0:	6008d43a 	srli	r4,r12,16
  813ce4:	6010943a 	slli	r8,r12,16
  813ce8:	394f883a 	add	r7,r7,r5
  813cec:	333fffcc 	andi	r12,r6,65535
  813cf0:	79df883a 	add	r15,r15,r7
  813cf4:	235b883a 	add	r13,r4,r13
  813cf8:	9d63383a 	mul	r17,r19,r21
  813cfc:	4309883a 	add	r4,r8,r12
  813d00:	7940022e 	bgeu	r15,r5,813d0c <__muldf3+0x43c>
  813d04:	01400074 	movhi	r5,1
  813d08:	8963883a 	add	r17,r17,r5
  813d0c:	780a943a 	slli	r5,r15,16
  813d10:	91bfffcc 	andi	r6,r18,65535
  813d14:	70c7883a 	add	r3,r14,r3
  813d18:	298d883a 	add	r6,r5,r6
  813d1c:	1a8f803a 	cmpltu	r7,r3,r10
  813d20:	350b883a 	add	r5,r6,r20
  813d24:	20c7883a 	add	r3,r4,r3
  813d28:	3955883a 	add	r10,r7,r5
  813d2c:	1909803a 	cmpltu	r4,r3,r4
  813d30:	6a91883a 	add	r8,r13,r10
  813d34:	780cd43a 	srli	r6,r15,16
  813d38:	2219883a 	add	r12,r4,r8
  813d3c:	2d0b803a 	cmpltu	r5,r5,r20
  813d40:	51cf803a 	cmpltu	r7,r10,r7
  813d44:	29ceb03a 	or	r7,r5,r7
  813d48:	4351803a 	cmpltu	r8,r8,r13
  813d4c:	610b803a 	cmpltu	r5,r12,r4
  813d50:	4148b03a 	or	r4,r8,r5
  813d54:	398f883a 	add	r7,r7,r6
  813d58:	3909883a 	add	r4,r7,r4
  813d5c:	1810927a 	slli	r8,r3,9
  813d60:	2449883a 	add	r4,r4,r17
  813d64:	2008927a 	slli	r4,r4,9
  813d68:	6022d5fa 	srli	r17,r12,23
  813d6c:	1806d5fa 	srli	r3,r3,23
  813d70:	4252b03a 	or	r9,r8,r9
  813d74:	600a927a 	slli	r5,r12,9
  813d78:	4810c03a 	cmpne	r8,r9,zero
  813d7c:	2462b03a 	or	r17,r4,r17
  813d80:	40c6b03a 	or	r3,r8,r3
  813d84:	8900402c 	andhi	r4,r17,256
  813d88:	1950b03a 	or	r8,r3,r5
  813d8c:	20000726 	beq	r4,zero,813dac <__muldf3+0x4dc>
  813d90:	4006d07a 	srli	r3,r8,1
  813d94:	880497fa 	slli	r2,r17,31
  813d98:	4200004c 	andi	r8,r8,1
  813d9c:	8822d07a 	srli	r17,r17,1
  813da0:	1a10b03a 	or	r8,r3,r8
  813da4:	1210b03a 	or	r8,r2,r8
  813da8:	5805883a 	mov	r2,r11
  813dac:	1140ffc4 	addi	r5,r2,1023
  813db0:	0140440e 	bge	zero,r5,813ec4 <__muldf3+0x5f4>
  813db4:	40c001cc 	andi	r3,r8,7
  813db8:	18000726 	beq	r3,zero,813dd8 <__muldf3+0x508>
  813dbc:	40c003cc 	andi	r3,r8,15
  813dc0:	01000104 	movi	r4,4
  813dc4:	19000426 	beq	r3,r4,813dd8 <__muldf3+0x508>
  813dc8:	4107883a 	add	r3,r8,r4
  813dcc:	1a11803a 	cmpltu	r8,r3,r8
  813dd0:	8a23883a 	add	r17,r17,r8
  813dd4:	1811883a 	mov	r8,r3
  813dd8:	88c0402c 	andhi	r3,r17,256
  813ddc:	18000426 	beq	r3,zero,813df0 <__muldf3+0x520>
  813de0:	11410004 	addi	r5,r2,1024
  813de4:	00bfc034 	movhi	r2,65280
  813de8:	10bfffc4 	addi	r2,r2,-1
  813dec:	88a2703a 	and	r17,r17,r2
  813df0:	0081ff84 	movi	r2,2046
  813df4:	117f6416 	blt	r2,r5,813b88 <__alt_mem_onchip_mem+0xff80bb88>
  813df8:	8828977a 	slli	r20,r17,29
  813dfc:	4010d0fa 	srli	r8,r8,3
  813e00:	8822927a 	slli	r17,r17,9
  813e04:	2881ffcc 	andi	r2,r5,2047
  813e08:	a228b03a 	or	r20,r20,r8
  813e0c:	880ad33a 	srli	r5,r17,12
  813e10:	b02b883a 	mov	r21,r22
  813e14:	003f0d06 	br	813a4c <__alt_mem_onchip_mem+0xff80ba4c>
  813e18:	8080022c 	andhi	r2,r16,8
  813e1c:	10000926 	beq	r2,zero,813e44 <__muldf3+0x574>
  813e20:	8880022c 	andhi	r2,r17,8
  813e24:	1000071e 	bne	r2,zero,813e44 <__muldf3+0x574>
  813e28:	00800434 	movhi	r2,16
  813e2c:	89400234 	orhi	r5,r17,8
  813e30:	10bfffc4 	addi	r2,r2,-1
  813e34:	b82b883a 	mov	r21,r23
  813e38:	288a703a 	and	r5,r5,r2
  813e3c:	4029883a 	mov	r20,r8
  813e40:	003f6806 	br	813be4 <__alt_mem_onchip_mem+0xff80bbe4>
  813e44:	00800434 	movhi	r2,16
  813e48:	81400234 	orhi	r5,r16,8
  813e4c:	10bfffc4 	addi	r2,r2,-1
  813e50:	288a703a 	and	r5,r5,r2
  813e54:	003f6306 	br	813be4 <__alt_mem_onchip_mem+0xff80bbe4>
  813e58:	147ff604 	addi	r17,r2,-40
  813e5c:	3462983a 	sll	r17,r6,r17
  813e60:	0011883a 	mov	r8,zero
  813e64:	003f4406 	br	813b78 <__alt_mem_onchip_mem+0xff80bb78>
  813e68:	3009883a 	mov	r4,r6
  813e6c:	d9800215 	stw	r6,8(sp)
  813e70:	da400115 	stw	r9,4(sp)
  813e74:	da800015 	stw	r10,0(sp)
  813e78:	0808d180 	call	808d18 <__clzsi2>
  813e7c:	10800804 	addi	r2,r2,32
  813e80:	da800017 	ldw	r10,0(sp)
  813e84:	da400117 	ldw	r9,4(sp)
  813e88:	d9800217 	ldw	r6,8(sp)
  813e8c:	003f3006 	br	813b50 <__alt_mem_onchip_mem+0xff80bb50>
  813e90:	143ff604 	addi	r16,r2,-40
  813e94:	9c20983a 	sll	r16,r19,r16
  813e98:	0029883a 	mov	r20,zero
  813e9c:	003f1606 	br	813af8 <__alt_mem_onchip_mem+0xff80baf8>
  813ea0:	d9800215 	stw	r6,8(sp)
  813ea4:	d9c00015 	stw	r7,0(sp)
  813ea8:	da400115 	stw	r9,4(sp)
  813eac:	0808d180 	call	808d18 <__clzsi2>
  813eb0:	10800804 	addi	r2,r2,32
  813eb4:	da400117 	ldw	r9,4(sp)
  813eb8:	d9c00017 	ldw	r7,0(sp)
  813ebc:	d9800217 	ldw	r6,8(sp)
  813ec0:	003f0306 	br	813ad0 <__alt_mem_onchip_mem+0xff80bad0>
  813ec4:	00c00044 	movi	r3,1
  813ec8:	1947c83a 	sub	r3,r3,r5
  813ecc:	00800e04 	movi	r2,56
  813ed0:	10feda16 	blt	r2,r3,813a3c <__alt_mem_onchip_mem+0xff80ba3c>
  813ed4:	008007c4 	movi	r2,31
  813ed8:	10c01b16 	blt	r2,r3,813f48 <__muldf3+0x678>
  813edc:	00800804 	movi	r2,32
  813ee0:	10c5c83a 	sub	r2,r2,r3
  813ee4:	888a983a 	sll	r5,r17,r2
  813ee8:	40c8d83a 	srl	r4,r8,r3
  813eec:	4084983a 	sll	r2,r8,r2
  813ef0:	88e2d83a 	srl	r17,r17,r3
  813ef4:	2906b03a 	or	r3,r5,r4
  813ef8:	1004c03a 	cmpne	r2,r2,zero
  813efc:	1886b03a 	or	r3,r3,r2
  813f00:	188001cc 	andi	r2,r3,7
  813f04:	10000726 	beq	r2,zero,813f24 <__muldf3+0x654>
  813f08:	188003cc 	andi	r2,r3,15
  813f0c:	01000104 	movi	r4,4
  813f10:	11000426 	beq	r2,r4,813f24 <__muldf3+0x654>
  813f14:	1805883a 	mov	r2,r3
  813f18:	10c00104 	addi	r3,r2,4
  813f1c:	1885803a 	cmpltu	r2,r3,r2
  813f20:	88a3883a 	add	r17,r17,r2
  813f24:	8880202c 	andhi	r2,r17,128
  813f28:	10001c26 	beq	r2,zero,813f9c <__muldf3+0x6cc>
  813f2c:	b02b883a 	mov	r21,r22
  813f30:	00800044 	movi	r2,1
  813f34:	000b883a 	mov	r5,zero
  813f38:	0029883a 	mov	r20,zero
  813f3c:	003ec306 	br	813a4c <__alt_mem_onchip_mem+0xff80ba4c>
  813f40:	5805883a 	mov	r2,r11
  813f44:	003f9906 	br	813dac <__alt_mem_onchip_mem+0xff80bdac>
  813f48:	00bff844 	movi	r2,-31
  813f4c:	1145c83a 	sub	r2,r2,r5
  813f50:	8888d83a 	srl	r4,r17,r2
  813f54:	00800804 	movi	r2,32
  813f58:	18801a26 	beq	r3,r2,813fc4 <__muldf3+0x6f4>
  813f5c:	00801004 	movi	r2,64
  813f60:	10c5c83a 	sub	r2,r2,r3
  813f64:	8884983a 	sll	r2,r17,r2
  813f68:	1204b03a 	or	r2,r2,r8
  813f6c:	1004c03a 	cmpne	r2,r2,zero
  813f70:	2084b03a 	or	r2,r4,r2
  813f74:	144001cc 	andi	r17,r2,7
  813f78:	88000d1e 	bne	r17,zero,813fb0 <__muldf3+0x6e0>
  813f7c:	000b883a 	mov	r5,zero
  813f80:	1028d0fa 	srli	r20,r2,3
  813f84:	b02b883a 	mov	r21,r22
  813f88:	0005883a 	mov	r2,zero
  813f8c:	a468b03a 	or	r20,r20,r17
  813f90:	003eae06 	br	813a4c <__alt_mem_onchip_mem+0xff80ba4c>
  813f94:	1007883a 	mov	r3,r2
  813f98:	0023883a 	mov	r17,zero
  813f9c:	880a927a 	slli	r5,r17,9
  813fa0:	1805883a 	mov	r2,r3
  813fa4:	8822977a 	slli	r17,r17,29
  813fa8:	280ad33a 	srli	r5,r5,12
  813fac:	003ff406 	br	813f80 <__alt_mem_onchip_mem+0xff80bf80>
  813fb0:	10c003cc 	andi	r3,r2,15
  813fb4:	01000104 	movi	r4,4
  813fb8:	193ff626 	beq	r3,r4,813f94 <__alt_mem_onchip_mem+0xff80bf94>
  813fbc:	0023883a 	mov	r17,zero
  813fc0:	003fd506 	br	813f18 <__alt_mem_onchip_mem+0xff80bf18>
  813fc4:	0005883a 	mov	r2,zero
  813fc8:	003fe706 	br	813f68 <__alt_mem_onchip_mem+0xff80bf68>
  813fcc:	00800434 	movhi	r2,16
  813fd0:	89400234 	orhi	r5,r17,8
  813fd4:	10bfffc4 	addi	r2,r2,-1
  813fd8:	b02b883a 	mov	r21,r22
  813fdc:	288a703a 	and	r5,r5,r2
  813fe0:	4029883a 	mov	r20,r8
  813fe4:	003eff06 	br	813be4 <__alt_mem_onchip_mem+0xff80bbe4>

00813fe8 <__fixdfsi>:
  813fe8:	280cd53a 	srli	r6,r5,20
  813fec:	00c00434 	movhi	r3,16
  813ff0:	18ffffc4 	addi	r3,r3,-1
  813ff4:	3181ffcc 	andi	r6,r6,2047
  813ff8:	01c0ff84 	movi	r7,1022
  813ffc:	28c6703a 	and	r3,r5,r3
  814000:	280ad7fa 	srli	r5,r5,31
  814004:	3980120e 	bge	r7,r6,814050 <__fixdfsi+0x68>
  814008:	00810744 	movi	r2,1053
  81400c:	11800c16 	blt	r2,r6,814040 <__fixdfsi+0x58>
  814010:	00810cc4 	movi	r2,1075
  814014:	1185c83a 	sub	r2,r2,r6
  814018:	01c007c4 	movi	r7,31
  81401c:	18c00434 	orhi	r3,r3,16
  814020:	38800d16 	blt	r7,r2,814058 <__fixdfsi+0x70>
  814024:	31befb44 	addi	r6,r6,-1043
  814028:	2084d83a 	srl	r2,r4,r2
  81402c:	1986983a 	sll	r3,r3,r6
  814030:	1884b03a 	or	r2,r3,r2
  814034:	28000726 	beq	r5,zero,814054 <__fixdfsi+0x6c>
  814038:	0085c83a 	sub	r2,zero,r2
  81403c:	f800283a 	ret
  814040:	00a00034 	movhi	r2,32768
  814044:	10bfffc4 	addi	r2,r2,-1
  814048:	2885883a 	add	r2,r5,r2
  81404c:	f800283a 	ret
  814050:	0005883a 	mov	r2,zero
  814054:	f800283a 	ret
  814058:	008104c4 	movi	r2,1043
  81405c:	1185c83a 	sub	r2,r2,r6
  814060:	1884d83a 	srl	r2,r3,r2
  814064:	003ff306 	br	814034 <__alt_mem_onchip_mem+0xff80c034>

00814068 <__floatunsidf>:
  814068:	defffe04 	addi	sp,sp,-8
  81406c:	dc000015 	stw	r16,0(sp)
  814070:	dfc00115 	stw	ra,4(sp)
  814074:	2021883a 	mov	r16,r4
  814078:	20002226 	beq	r4,zero,814104 <__floatunsidf+0x9c>
  81407c:	0808d180 	call	808d18 <__clzsi2>
  814080:	01010784 	movi	r4,1054
  814084:	2089c83a 	sub	r4,r4,r2
  814088:	01810cc4 	movi	r6,1075
  81408c:	310dc83a 	sub	r6,r6,r4
  814090:	00c007c4 	movi	r3,31
  814094:	1980120e 	bge	r3,r6,8140e0 <__floatunsidf+0x78>
  814098:	00c104c4 	movi	r3,1043
  81409c:	1907c83a 	sub	r3,r3,r4
  8140a0:	80ca983a 	sll	r5,r16,r3
  8140a4:	00800434 	movhi	r2,16
  8140a8:	10bfffc4 	addi	r2,r2,-1
  8140ac:	2101ffcc 	andi	r4,r4,2047
  8140b0:	0021883a 	mov	r16,zero
  8140b4:	288a703a 	and	r5,r5,r2
  8140b8:	2008953a 	slli	r4,r4,20
  8140bc:	00c00434 	movhi	r3,16
  8140c0:	18ffffc4 	addi	r3,r3,-1
  8140c4:	28c6703a 	and	r3,r5,r3
  8140c8:	8005883a 	mov	r2,r16
  8140cc:	1906b03a 	or	r3,r3,r4
  8140d0:	dfc00117 	ldw	ra,4(sp)
  8140d4:	dc000017 	ldw	r16,0(sp)
  8140d8:	dec00204 	addi	sp,sp,8
  8140dc:	f800283a 	ret
  8140e0:	00c002c4 	movi	r3,11
  8140e4:	188bc83a 	sub	r5,r3,r2
  8140e8:	814ad83a 	srl	r5,r16,r5
  8140ec:	00c00434 	movhi	r3,16
  8140f0:	18ffffc4 	addi	r3,r3,-1
  8140f4:	81a0983a 	sll	r16,r16,r6
  8140f8:	2101ffcc 	andi	r4,r4,2047
  8140fc:	28ca703a 	and	r5,r5,r3
  814100:	003fed06 	br	8140b8 <__alt_mem_onchip_mem+0xff80c0b8>
  814104:	0009883a 	mov	r4,zero
  814108:	000b883a 	mov	r5,zero
  81410c:	003fea06 	br	8140b8 <__alt_mem_onchip_mem+0xff80c0b8>

00814110 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  814110:	defff504 	addi	sp,sp,-44
  814114:	df000a15 	stw	fp,40(sp)
  814118:	df000a04 	addi	fp,sp,40
  81411c:	e13ffc15 	stw	r4,-16(fp)
  814120:	e17ffd15 	stw	r5,-12(fp)
  814124:	e1bffe15 	stw	r6,-8(fp)
  814128:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81412c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  814130:	d0a75617 	ldw	r2,-25256(gp)
  
  if (alt_ticks_per_second ())
  814134:	10003c26 	beq	r2,zero,814228 <alt_alarm_start+0x118>
  {
    if (alarm)
  814138:	e0bffc17 	ldw	r2,-16(fp)
  81413c:	10003826 	beq	r2,zero,814220 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  814140:	e0bffc17 	ldw	r2,-16(fp)
  814144:	e0fffe17 	ldw	r3,-8(fp)
  814148:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  81414c:	e0bffc17 	ldw	r2,-16(fp)
  814150:	e0ffff17 	ldw	r3,-4(fp)
  814154:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814158:	0005303a 	rdctl	r2,status
  81415c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814160:	e0fff917 	ldw	r3,-28(fp)
  814164:	00bfff84 	movi	r2,-2
  814168:	1884703a 	and	r2,r3,r2
  81416c:	1001703a 	wrctl	status,r2
  
  return context;
  814170:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  814174:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  814178:	d0a75717 	ldw	r2,-25252(gp)
      
      current_nticks = alt_nticks();
  81417c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  814180:	e0fffd17 	ldw	r3,-12(fp)
  814184:	e0bff617 	ldw	r2,-40(fp)
  814188:	1885883a 	add	r2,r3,r2
  81418c:	10c00044 	addi	r3,r2,1
  814190:	e0bffc17 	ldw	r2,-16(fp)
  814194:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  814198:	e0bffc17 	ldw	r2,-16(fp)
  81419c:	10c00217 	ldw	r3,8(r2)
  8141a0:	e0bff617 	ldw	r2,-40(fp)
  8141a4:	1880042e 	bgeu	r3,r2,8141b8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  8141a8:	e0bffc17 	ldw	r2,-16(fp)
  8141ac:	00c00044 	movi	r3,1
  8141b0:	10c00405 	stb	r3,16(r2)
  8141b4:	00000206 	br	8141c0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8141b8:	e0bffc17 	ldw	r2,-16(fp)
  8141bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8141c0:	e0bffc17 	ldw	r2,-16(fp)
  8141c4:	d0e00e04 	addi	r3,gp,-32712
  8141c8:	e0fffa15 	stw	r3,-24(fp)
  8141cc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8141d0:	e0bffb17 	ldw	r2,-20(fp)
  8141d4:	e0fffa17 	ldw	r3,-24(fp)
  8141d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8141dc:	e0bffa17 	ldw	r2,-24(fp)
  8141e0:	10c00017 	ldw	r3,0(r2)
  8141e4:	e0bffb17 	ldw	r2,-20(fp)
  8141e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8141ec:	e0bffa17 	ldw	r2,-24(fp)
  8141f0:	10800017 	ldw	r2,0(r2)
  8141f4:	e0fffb17 	ldw	r3,-20(fp)
  8141f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8141fc:	e0bffa17 	ldw	r2,-24(fp)
  814200:	e0fffb17 	ldw	r3,-20(fp)
  814204:	10c00015 	stw	r3,0(r2)
  814208:	e0bff817 	ldw	r2,-32(fp)
  81420c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814210:	e0bff717 	ldw	r2,-36(fp)
  814214:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  814218:	0005883a 	mov	r2,zero
  81421c:	00000306 	br	81422c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  814220:	00bffa84 	movi	r2,-22
  814224:	00000106 	br	81422c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  814228:	00bfde84 	movi	r2,-134
  }
}
  81422c:	e037883a 	mov	sp,fp
  814230:	df000017 	ldw	fp,0(sp)
  814234:	dec00104 	addi	sp,sp,4
  814238:	f800283a 	ret

0081423c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81423c:	defffe04 	addi	sp,sp,-8
  814240:	dfc00115 	stw	ra,4(sp)
  814244:	df000015 	stw	fp,0(sp)
  814248:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81424c:	d0a00c17 	ldw	r2,-32720(gp)
  814250:	10000326 	beq	r2,zero,814260 <alt_get_errno+0x24>
  814254:	d0a00c17 	ldw	r2,-32720(gp)
  814258:	103ee83a 	callr	r2
  81425c:	00000106 	br	814264 <alt_get_errno+0x28>
  814260:	d0a75204 	addi	r2,gp,-25272
}
  814264:	e037883a 	mov	sp,fp
  814268:	dfc00117 	ldw	ra,4(sp)
  81426c:	df000017 	ldw	fp,0(sp)
  814270:	dec00204 	addi	sp,sp,8
  814274:	f800283a 	ret

00814278 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  814278:	defffb04 	addi	sp,sp,-20
  81427c:	dfc00415 	stw	ra,16(sp)
  814280:	df000315 	stw	fp,12(sp)
  814284:	df000304 	addi	fp,sp,12
  814288:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  81428c:	e0bfff17 	ldw	r2,-4(fp)
  814290:	10000616 	blt	r2,zero,8142ac <close+0x34>
  814294:	e0bfff17 	ldw	r2,-4(fp)
  814298:	10c00324 	muli	r3,r2,12
  81429c:	008020b4 	movhi	r2,130
  8142a0:	10a42304 	addi	r2,r2,-28532
  8142a4:	1885883a 	add	r2,r3,r2
  8142a8:	00000106 	br	8142b0 <close+0x38>
  8142ac:	0005883a 	mov	r2,zero
  8142b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  8142b4:	e0bffd17 	ldw	r2,-12(fp)
  8142b8:	10001926 	beq	r2,zero,814320 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8142bc:	e0bffd17 	ldw	r2,-12(fp)
  8142c0:	10800017 	ldw	r2,0(r2)
  8142c4:	10800417 	ldw	r2,16(r2)
  8142c8:	10000626 	beq	r2,zero,8142e4 <close+0x6c>
  8142cc:	e0bffd17 	ldw	r2,-12(fp)
  8142d0:	10800017 	ldw	r2,0(r2)
  8142d4:	10800417 	ldw	r2,16(r2)
  8142d8:	e13ffd17 	ldw	r4,-12(fp)
  8142dc:	103ee83a 	callr	r2
  8142e0:	00000106 	br	8142e8 <close+0x70>
  8142e4:	0005883a 	mov	r2,zero
  8142e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8142ec:	e13fff17 	ldw	r4,-4(fp)
  8142f0:	08149380 	call	814938 <alt_release_fd>
    if (rval < 0)
  8142f4:	e0bffe17 	ldw	r2,-8(fp)
  8142f8:	1000070e 	bge	r2,zero,814318 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8142fc:	081423c0 	call	81423c <alt_get_errno>
  814300:	1007883a 	mov	r3,r2
  814304:	e0bffe17 	ldw	r2,-8(fp)
  814308:	0085c83a 	sub	r2,zero,r2
  81430c:	18800015 	stw	r2,0(r3)
      return -1;
  814310:	00bfffc4 	movi	r2,-1
  814314:	00000706 	br	814334 <close+0xbc>
    }
    return 0;
  814318:	0005883a 	mov	r2,zero
  81431c:	00000506 	br	814334 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814320:	081423c0 	call	81423c <alt_get_errno>
  814324:	1007883a 	mov	r3,r2
  814328:	00801444 	movi	r2,81
  81432c:	18800015 	stw	r2,0(r3)
    return -1;
  814330:	00bfffc4 	movi	r2,-1
  }
}
  814334:	e037883a 	mov	sp,fp
  814338:	dfc00117 	ldw	ra,4(sp)
  81433c:	df000017 	ldw	fp,0(sp)
  814340:	dec00204 	addi	sp,sp,8
  814344:	f800283a 	ret

00814348 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  814348:	defffc04 	addi	sp,sp,-16
  81434c:	df000315 	stw	fp,12(sp)
  814350:	df000304 	addi	fp,sp,12
  814354:	e13ffd15 	stw	r4,-12(fp)
  814358:	e17ffe15 	stw	r5,-8(fp)
  81435c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  814360:	e0bfff17 	ldw	r2,-4(fp)
}
  814364:	e037883a 	mov	sp,fp
  814368:	df000017 	ldw	fp,0(sp)
  81436c:	dec00104 	addi	sp,sp,4
  814370:	f800283a 	ret

00814374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814374:	defffe04 	addi	sp,sp,-8
  814378:	dfc00115 	stw	ra,4(sp)
  81437c:	df000015 	stw	fp,0(sp)
  814380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814384:	d0a00c17 	ldw	r2,-32720(gp)
  814388:	10000326 	beq	r2,zero,814398 <alt_get_errno+0x24>
  81438c:	d0a00c17 	ldw	r2,-32720(gp)
  814390:	103ee83a 	callr	r2
  814394:	00000106 	br	81439c <alt_get_errno+0x28>
  814398:	d0a75204 	addi	r2,gp,-25272
}
  81439c:	e037883a 	mov	sp,fp
  8143a0:	dfc00117 	ldw	ra,4(sp)
  8143a4:	df000017 	ldw	fp,0(sp)
  8143a8:	dec00204 	addi	sp,sp,8
  8143ac:	f800283a 	ret

008143b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8143b0:	defffb04 	addi	sp,sp,-20
  8143b4:	dfc00415 	stw	ra,16(sp)
  8143b8:	df000315 	stw	fp,12(sp)
  8143bc:	df000304 	addi	fp,sp,12
  8143c0:	e13ffe15 	stw	r4,-8(fp)
  8143c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8143c8:	e0bffe17 	ldw	r2,-8(fp)
  8143cc:	10000616 	blt	r2,zero,8143e8 <fstat+0x38>
  8143d0:	e0bffe17 	ldw	r2,-8(fp)
  8143d4:	10c00324 	muli	r3,r2,12
  8143d8:	008020b4 	movhi	r2,130
  8143dc:	10a42304 	addi	r2,r2,-28532
  8143e0:	1885883a 	add	r2,r3,r2
  8143e4:	00000106 	br	8143ec <fstat+0x3c>
  8143e8:	0005883a 	mov	r2,zero
  8143ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8143f0:	e0bffd17 	ldw	r2,-12(fp)
  8143f4:	10001026 	beq	r2,zero,814438 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8143f8:	e0bffd17 	ldw	r2,-12(fp)
  8143fc:	10800017 	ldw	r2,0(r2)
  814400:	10800817 	ldw	r2,32(r2)
  814404:	10000726 	beq	r2,zero,814424 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  814408:	e0bffd17 	ldw	r2,-12(fp)
  81440c:	10800017 	ldw	r2,0(r2)
  814410:	10800817 	ldw	r2,32(r2)
  814414:	e17fff17 	ldw	r5,-4(fp)
  814418:	e13ffd17 	ldw	r4,-12(fp)
  81441c:	103ee83a 	callr	r2
  814420:	00000a06 	br	81444c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  814424:	e0bfff17 	ldw	r2,-4(fp)
  814428:	00c80004 	movi	r3,8192
  81442c:	10c00115 	stw	r3,4(r2)
      return 0;
  814430:	0005883a 	mov	r2,zero
  814434:	00000506 	br	81444c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814438:	08143740 	call	814374 <alt_get_errno>
  81443c:	1007883a 	mov	r3,r2
  814440:	00801444 	movi	r2,81
  814444:	18800015 	stw	r2,0(r3)
    return -1;
  814448:	00bfffc4 	movi	r2,-1
  }
}
  81444c:	e037883a 	mov	sp,fp
  814450:	dfc00117 	ldw	ra,4(sp)
  814454:	df000017 	ldw	fp,0(sp)
  814458:	dec00204 	addi	sp,sp,8
  81445c:	f800283a 	ret

00814460 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814460:	defffe04 	addi	sp,sp,-8
  814464:	dfc00115 	stw	ra,4(sp)
  814468:	df000015 	stw	fp,0(sp)
  81446c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814470:	d0a00c17 	ldw	r2,-32720(gp)
  814474:	10000326 	beq	r2,zero,814484 <alt_get_errno+0x24>
  814478:	d0a00c17 	ldw	r2,-32720(gp)
  81447c:	103ee83a 	callr	r2
  814480:	00000106 	br	814488 <alt_get_errno+0x28>
  814484:	d0a75204 	addi	r2,gp,-25272
}
  814488:	e037883a 	mov	sp,fp
  81448c:	dfc00117 	ldw	ra,4(sp)
  814490:	df000017 	ldw	fp,0(sp)
  814494:	dec00204 	addi	sp,sp,8
  814498:	f800283a 	ret

0081449c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  81449c:	deffed04 	addi	sp,sp,-76
  8144a0:	dfc01215 	stw	ra,72(sp)
  8144a4:	df001115 	stw	fp,68(sp)
  8144a8:	df001104 	addi	fp,sp,68
  8144ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8144b0:	e0bfff17 	ldw	r2,-4(fp)
  8144b4:	10000616 	blt	r2,zero,8144d0 <isatty+0x34>
  8144b8:	e0bfff17 	ldw	r2,-4(fp)
  8144bc:	10c00324 	muli	r3,r2,12
  8144c0:	008020b4 	movhi	r2,130
  8144c4:	10a42304 	addi	r2,r2,-28532
  8144c8:	1885883a 	add	r2,r3,r2
  8144cc:	00000106 	br	8144d4 <isatty+0x38>
  8144d0:	0005883a 	mov	r2,zero
  8144d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8144d8:	e0bfef17 	ldw	r2,-68(fp)
  8144dc:	10000e26 	beq	r2,zero,814518 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8144e0:	e0bfef17 	ldw	r2,-68(fp)
  8144e4:	10800017 	ldw	r2,0(r2)
  8144e8:	10800817 	ldw	r2,32(r2)
  8144ec:	1000021e 	bne	r2,zero,8144f8 <isatty+0x5c>
    {
      return 1;
  8144f0:	00800044 	movi	r2,1
  8144f4:	00000d06 	br	81452c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8144f8:	e0bff004 	addi	r2,fp,-64
  8144fc:	100b883a 	mov	r5,r2
  814500:	e13fff17 	ldw	r4,-4(fp)
  814504:	08143b00 	call	8143b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  814508:	e0bff117 	ldw	r2,-60(fp)
  81450c:	10880020 	cmpeqi	r2,r2,8192
  814510:	10803fcc 	andi	r2,r2,255
  814514:	00000506 	br	81452c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814518:	08144600 	call	814460 <alt_get_errno>
  81451c:	1007883a 	mov	r3,r2
  814520:	00801444 	movi	r2,81
  814524:	18800015 	stw	r2,0(r3)
    return 0;
  814528:	0005883a 	mov	r2,zero
  }
}
  81452c:	e037883a 	mov	sp,fp
  814530:	dfc00117 	ldw	ra,4(sp)
  814534:	df000017 	ldw	fp,0(sp)
  814538:	dec00204 	addi	sp,sp,8
  81453c:	f800283a 	ret

00814540 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  814540:	defffc04 	addi	sp,sp,-16
  814544:	df000315 	stw	fp,12(sp)
  814548:	df000304 	addi	fp,sp,12
  81454c:	e13ffd15 	stw	r4,-12(fp)
  814550:	e17ffe15 	stw	r5,-8(fp)
  814554:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  814558:	e0fffe17 	ldw	r3,-8(fp)
  81455c:	e0bffd17 	ldw	r2,-12(fp)
  814560:	18800c26 	beq	r3,r2,814594 <alt_load_section+0x54>
  {
    while( to != end )
  814564:	00000806 	br	814588 <alt_load_section+0x48>
    {
      *to++ = *from++;
  814568:	e0bffe17 	ldw	r2,-8(fp)
  81456c:	10c00104 	addi	r3,r2,4
  814570:	e0fffe15 	stw	r3,-8(fp)
  814574:	e0fffd17 	ldw	r3,-12(fp)
  814578:	19000104 	addi	r4,r3,4
  81457c:	e13ffd15 	stw	r4,-12(fp)
  814580:	18c00017 	ldw	r3,0(r3)
  814584:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  814588:	e0fffe17 	ldw	r3,-8(fp)
  81458c:	e0bfff17 	ldw	r2,-4(fp)
  814590:	18bff51e 	bne	r3,r2,814568 <__alt_mem_onchip_mem+0xff80c568>
    {
      *to++ = *from++;
    }
  }
}
  814594:	0001883a 	nop
  814598:	e037883a 	mov	sp,fp
  81459c:	df000017 	ldw	fp,0(sp)
  8145a0:	dec00104 	addi	sp,sp,4
  8145a4:	f800283a 	ret

008145a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8145a8:	defffe04 	addi	sp,sp,-8
  8145ac:	dfc00115 	stw	ra,4(sp)
  8145b0:	df000015 	stw	fp,0(sp)
  8145b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8145b8:	018020b4 	movhi	r6,130
  8145bc:	31a92704 	addi	r6,r6,-23396
  8145c0:	014020b4 	movhi	r5,130
  8145c4:	2961f004 	addi	r5,r5,-30784
  8145c8:	010020b4 	movhi	r4,130
  8145cc:	21292704 	addi	r4,r4,-23396
  8145d0:	08145400 	call	814540 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8145d4:	01802034 	movhi	r6,128
  8145d8:	31809104 	addi	r6,r6,580
  8145dc:	01402034 	movhi	r5,128
  8145e0:	29400804 	addi	r5,r5,32
  8145e4:	01002034 	movhi	r4,128
  8145e8:	21000804 	addi	r4,r4,32
  8145ec:	08145400 	call	814540 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8145f0:	018020b4 	movhi	r6,130
  8145f4:	31a1f004 	addi	r6,r6,-30784
  8145f8:	014020b4 	movhi	r5,130
  8145fc:	29608c04 	addi	r5,r5,-32208
  814600:	010020b4 	movhi	r4,130
  814604:	21208c04 	addi	r4,r4,-32208
  814608:	08145400 	call	814540 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  81460c:	08171380 	call	817138 <alt_dcache_flush_all>
  alt_icache_flush_all();
  814610:	08173200 	call	817320 <alt_icache_flush_all>
}
  814614:	0001883a 	nop
  814618:	e037883a 	mov	sp,fp
  81461c:	dfc00117 	ldw	ra,4(sp)
  814620:	df000017 	ldw	fp,0(sp)
  814624:	dec00204 	addi	sp,sp,8
  814628:	f800283a 	ret

0081462c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81462c:	defffe04 	addi	sp,sp,-8
  814630:	dfc00115 	stw	ra,4(sp)
  814634:	df000015 	stw	fp,0(sp)
  814638:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81463c:	d0a00c17 	ldw	r2,-32720(gp)
  814640:	10000326 	beq	r2,zero,814650 <alt_get_errno+0x24>
  814644:	d0a00c17 	ldw	r2,-32720(gp)
  814648:	103ee83a 	callr	r2
  81464c:	00000106 	br	814654 <alt_get_errno+0x28>
  814650:	d0a75204 	addi	r2,gp,-25272
}
  814654:	e037883a 	mov	sp,fp
  814658:	dfc00117 	ldw	ra,4(sp)
  81465c:	df000017 	ldw	fp,0(sp)
  814660:	dec00204 	addi	sp,sp,8
  814664:	f800283a 	ret

00814668 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  814668:	defff904 	addi	sp,sp,-28
  81466c:	dfc00615 	stw	ra,24(sp)
  814670:	df000515 	stw	fp,20(sp)
  814674:	df000504 	addi	fp,sp,20
  814678:	e13ffd15 	stw	r4,-12(fp)
  81467c:	e17ffe15 	stw	r5,-8(fp)
  814680:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  814684:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814688:	e0bffd17 	ldw	r2,-12(fp)
  81468c:	10000616 	blt	r2,zero,8146a8 <lseek+0x40>
  814690:	e0bffd17 	ldw	r2,-12(fp)
  814694:	10c00324 	muli	r3,r2,12
  814698:	008020b4 	movhi	r2,130
  81469c:	10a42304 	addi	r2,r2,-28532
  8146a0:	1885883a 	add	r2,r3,r2
  8146a4:	00000106 	br	8146ac <lseek+0x44>
  8146a8:	0005883a 	mov	r2,zero
  8146ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8146b0:	e0bffc17 	ldw	r2,-16(fp)
  8146b4:	10001026 	beq	r2,zero,8146f8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8146b8:	e0bffc17 	ldw	r2,-16(fp)
  8146bc:	10800017 	ldw	r2,0(r2)
  8146c0:	10800717 	ldw	r2,28(r2)
  8146c4:	10000926 	beq	r2,zero,8146ec <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8146c8:	e0bffc17 	ldw	r2,-16(fp)
  8146cc:	10800017 	ldw	r2,0(r2)
  8146d0:	10800717 	ldw	r2,28(r2)
  8146d4:	e1bfff17 	ldw	r6,-4(fp)
  8146d8:	e17ffe17 	ldw	r5,-8(fp)
  8146dc:	e13ffc17 	ldw	r4,-16(fp)
  8146e0:	103ee83a 	callr	r2
  8146e4:	e0bffb15 	stw	r2,-20(fp)
  8146e8:	00000506 	br	814700 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8146ec:	00bfde84 	movi	r2,-134
  8146f0:	e0bffb15 	stw	r2,-20(fp)
  8146f4:	00000206 	br	814700 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  8146f8:	00bfebc4 	movi	r2,-81
  8146fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  814700:	e0bffb17 	ldw	r2,-20(fp)
  814704:	1000070e 	bge	r2,zero,814724 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  814708:	081462c0 	call	81462c <alt_get_errno>
  81470c:	1007883a 	mov	r3,r2
  814710:	e0bffb17 	ldw	r2,-20(fp)
  814714:	0085c83a 	sub	r2,zero,r2
  814718:	18800015 	stw	r2,0(r3)
    rc = -1;
  81471c:	00bfffc4 	movi	r2,-1
  814720:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  814724:	e0bffb17 	ldw	r2,-20(fp)
}
  814728:	e037883a 	mov	sp,fp
  81472c:	dfc00117 	ldw	ra,4(sp)
  814730:	df000017 	ldw	fp,0(sp)
  814734:	dec00204 	addi	sp,sp,8
  814738:	f800283a 	ret

0081473c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81473c:	defffd04 	addi	sp,sp,-12
  814740:	dfc00215 	stw	ra,8(sp)
  814744:	df000115 	stw	fp,4(sp)
  814748:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81474c:	0009883a 	mov	r4,zero
  814750:	0814d580 	call	814d58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  814754:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  814758:	0814d900 	call	814d90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81475c:	018020b4 	movhi	r6,130
  814760:	31a14204 	addi	r6,r6,-31480
  814764:	014020b4 	movhi	r5,130
  814768:	29614204 	addi	r5,r5,-31480
  81476c:	010020b4 	movhi	r4,130
  814770:	21214204 	addi	r4,r4,-31480
  814774:	08176b80 	call	8176b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  814778:	08172600 	call	817260 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  81477c:	01002074 	movhi	r4,129
  814780:	211cb004 	addi	r4,r4,29376
  814784:	0817e9c0 	call	817e9c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  814788:	d0a75317 	ldw	r2,-25268(gp)
  81478c:	d0e75417 	ldw	r3,-25264(gp)
  814790:	d1275517 	ldw	r4,-25260(gp)
  814794:	200d883a 	mov	r6,r4
  814798:	180b883a 	mov	r5,r3
  81479c:	1009883a 	mov	r4,r2
  8147a0:	08005440 	call	800544 <main>
  8147a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8147a8:	01000044 	movi	r4,1
  8147ac:	08142780 	call	814278 <close>
  exit (result);
  8147b0:	e13fff17 	ldw	r4,-4(fp)
  8147b4:	0817eb00 	call	817eb0 <exit>

008147b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8147b8:	defffe04 	addi	sp,sp,-8
  8147bc:	df000115 	stw	fp,4(sp)
  8147c0:	df000104 	addi	fp,sp,4
  8147c4:	e13fff15 	stw	r4,-4(fp)
}
  8147c8:	0001883a 	nop
  8147cc:	e037883a 	mov	sp,fp
  8147d0:	df000017 	ldw	fp,0(sp)
  8147d4:	dec00104 	addi	sp,sp,4
  8147d8:	f800283a 	ret

008147dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8147dc:	defffe04 	addi	sp,sp,-8
  8147e0:	df000115 	stw	fp,4(sp)
  8147e4:	df000104 	addi	fp,sp,4
  8147e8:	e13fff15 	stw	r4,-4(fp)
}
  8147ec:	0001883a 	nop
  8147f0:	e037883a 	mov	sp,fp
  8147f4:	df000017 	ldw	fp,0(sp)
  8147f8:	dec00104 	addi	sp,sp,4
  8147fc:	f800283a 	ret

00814800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814800:	defffe04 	addi	sp,sp,-8
  814804:	dfc00115 	stw	ra,4(sp)
  814808:	df000015 	stw	fp,0(sp)
  81480c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814810:	d0a00c17 	ldw	r2,-32720(gp)
  814814:	10000326 	beq	r2,zero,814824 <alt_get_errno+0x24>
  814818:	d0a00c17 	ldw	r2,-32720(gp)
  81481c:	103ee83a 	callr	r2
  814820:	00000106 	br	814828 <alt_get_errno+0x28>
  814824:	d0a75204 	addi	r2,gp,-25272
}
  814828:	e037883a 	mov	sp,fp
  81482c:	dfc00117 	ldw	ra,4(sp)
  814830:	df000017 	ldw	fp,0(sp)
  814834:	dec00204 	addi	sp,sp,8
  814838:	f800283a 	ret

0081483c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81483c:	defff904 	addi	sp,sp,-28
  814840:	dfc00615 	stw	ra,24(sp)
  814844:	df000515 	stw	fp,20(sp)
  814848:	df000504 	addi	fp,sp,20
  81484c:	e13ffd15 	stw	r4,-12(fp)
  814850:	e17ffe15 	stw	r5,-8(fp)
  814854:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814858:	e0bffd17 	ldw	r2,-12(fp)
  81485c:	10000616 	blt	r2,zero,814878 <read+0x3c>
  814860:	e0bffd17 	ldw	r2,-12(fp)
  814864:	10c00324 	muli	r3,r2,12
  814868:	008020b4 	movhi	r2,130
  81486c:	10a42304 	addi	r2,r2,-28532
  814870:	1885883a 	add	r2,r3,r2
  814874:	00000106 	br	81487c <read+0x40>
  814878:	0005883a 	mov	r2,zero
  81487c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  814880:	e0bffb17 	ldw	r2,-20(fp)
  814884:	10002226 	beq	r2,zero,814910 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  814888:	e0bffb17 	ldw	r2,-20(fp)
  81488c:	10800217 	ldw	r2,8(r2)
  814890:	108000cc 	andi	r2,r2,3
  814894:	10800060 	cmpeqi	r2,r2,1
  814898:	1000181e 	bne	r2,zero,8148fc <read+0xc0>
        (fd->dev->read))
  81489c:	e0bffb17 	ldw	r2,-20(fp)
  8148a0:	10800017 	ldw	r2,0(r2)
  8148a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8148a8:	10001426 	beq	r2,zero,8148fc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8148ac:	e0bffb17 	ldw	r2,-20(fp)
  8148b0:	10800017 	ldw	r2,0(r2)
  8148b4:	10800517 	ldw	r2,20(r2)
  8148b8:	e0ffff17 	ldw	r3,-4(fp)
  8148bc:	180d883a 	mov	r6,r3
  8148c0:	e17ffe17 	ldw	r5,-8(fp)
  8148c4:	e13ffb17 	ldw	r4,-20(fp)
  8148c8:	103ee83a 	callr	r2
  8148cc:	e0bffc15 	stw	r2,-16(fp)
  8148d0:	e0bffc17 	ldw	r2,-16(fp)
  8148d4:	1000070e 	bge	r2,zero,8148f4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  8148d8:	08148000 	call	814800 <alt_get_errno>
  8148dc:	1007883a 	mov	r3,r2
  8148e0:	e0bffc17 	ldw	r2,-16(fp)
  8148e4:	0085c83a 	sub	r2,zero,r2
  8148e8:	18800015 	stw	r2,0(r3)
          return -1;
  8148ec:	00bfffc4 	movi	r2,-1
  8148f0:	00000c06 	br	814924 <read+0xe8>
        }
        return rval;
  8148f4:	e0bffc17 	ldw	r2,-16(fp)
  8148f8:	00000a06 	br	814924 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8148fc:	08148000 	call	814800 <alt_get_errno>
  814900:	1007883a 	mov	r3,r2
  814904:	00800344 	movi	r2,13
  814908:	18800015 	stw	r2,0(r3)
  81490c:	00000406 	br	814920 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  814910:	08148000 	call	814800 <alt_get_errno>
  814914:	1007883a 	mov	r3,r2
  814918:	00801444 	movi	r2,81
  81491c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  814920:	00bfffc4 	movi	r2,-1
}
  814924:	e037883a 	mov	sp,fp
  814928:	dfc00117 	ldw	ra,4(sp)
  81492c:	df000017 	ldw	fp,0(sp)
  814930:	dec00204 	addi	sp,sp,8
  814934:	f800283a 	ret

00814938 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  814938:	defffe04 	addi	sp,sp,-8
  81493c:	df000115 	stw	fp,4(sp)
  814940:	df000104 	addi	fp,sp,4
  814944:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  814948:	e0bfff17 	ldw	r2,-4(fp)
  81494c:	108000d0 	cmplti	r2,r2,3
  814950:	10000d1e 	bne	r2,zero,814988 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  814954:	008020b4 	movhi	r2,130
  814958:	10a42304 	addi	r2,r2,-28532
  81495c:	e0ffff17 	ldw	r3,-4(fp)
  814960:	18c00324 	muli	r3,r3,12
  814964:	10c5883a 	add	r2,r2,r3
  814968:	10800204 	addi	r2,r2,8
  81496c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  814970:	008020b4 	movhi	r2,130
  814974:	10a42304 	addi	r2,r2,-28532
  814978:	e0ffff17 	ldw	r3,-4(fp)
  81497c:	18c00324 	muli	r3,r3,12
  814980:	10c5883a 	add	r2,r2,r3
  814984:	10000015 	stw	zero,0(r2)
  }
}
  814988:	0001883a 	nop
  81498c:	e037883a 	mov	sp,fp
  814990:	df000017 	ldw	fp,0(sp)
  814994:	dec00104 	addi	sp,sp,4
  814998:	f800283a 	ret

0081499c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81499c:	defff904 	addi	sp,sp,-28
  8149a0:	df000615 	stw	fp,24(sp)
  8149a4:	df000604 	addi	fp,sp,24
  8149a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8149ac:	0005303a 	rdctl	r2,status
  8149b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8149b4:	e0fffe17 	ldw	r3,-8(fp)
  8149b8:	00bfff84 	movi	r2,-2
  8149bc:	1884703a 	and	r2,r3,r2
  8149c0:	1001703a 	wrctl	status,r2
  
  return context;
  8149c4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8149c8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8149cc:	d0a00d17 	ldw	r2,-32716(gp)
  8149d0:	10c000c4 	addi	r3,r2,3
  8149d4:	00bfff04 	movi	r2,-4
  8149d8:	1884703a 	and	r2,r3,r2
  8149dc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8149e0:	d0e00d17 	ldw	r3,-32716(gp)
  8149e4:	e0bfff17 	ldw	r2,-4(fp)
  8149e8:	1887883a 	add	r3,r3,r2
  8149ec:	00804034 	movhi	r2,256
  8149f0:	10800004 	addi	r2,r2,0
  8149f4:	10c0062e 	bgeu	r2,r3,814a10 <sbrk+0x74>
  8149f8:	e0bffb17 	ldw	r2,-20(fp)
  8149fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814a00:	e0bffa17 	ldw	r2,-24(fp)
  814a04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  814a08:	00bfffc4 	movi	r2,-1
  814a0c:	00000b06 	br	814a3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  814a10:	d0a00d17 	ldw	r2,-32716(gp)
  814a14:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  814a18:	d0e00d17 	ldw	r3,-32716(gp)
  814a1c:	e0bfff17 	ldw	r2,-4(fp)
  814a20:	1885883a 	add	r2,r3,r2
  814a24:	d0a00d15 	stw	r2,-32716(gp)
  814a28:	e0bffb17 	ldw	r2,-20(fp)
  814a2c:	e0bffc15 	stw	r2,-16(fp)
  814a30:	e0bffc17 	ldw	r2,-16(fp)
  814a34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  814a38:	e0bffd17 	ldw	r2,-12(fp)
} 
  814a3c:	e037883a 	mov	sp,fp
  814a40:	df000017 	ldw	fp,0(sp)
  814a44:	dec00104 	addi	sp,sp,4
  814a48:	f800283a 	ret

00814a4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  814a4c:	defffa04 	addi	sp,sp,-24
  814a50:	df000515 	stw	fp,20(sp)
  814a54:	df000504 	addi	fp,sp,20
  814a58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814a5c:	0005303a 	rdctl	r2,status
  814a60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814a64:	e0fffc17 	ldw	r3,-16(fp)
  814a68:	00bfff84 	movi	r2,-2
  814a6c:	1884703a 	and	r2,r3,r2
  814a70:	1001703a 	wrctl	status,r2
  
  return context;
  814a74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  814a78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  814a7c:	e0bfff17 	ldw	r2,-4(fp)
  814a80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  814a84:	e0bffd17 	ldw	r2,-12(fp)
  814a88:	10800017 	ldw	r2,0(r2)
  814a8c:	e0fffd17 	ldw	r3,-12(fp)
  814a90:	18c00117 	ldw	r3,4(r3)
  814a94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  814a98:	e0bffd17 	ldw	r2,-12(fp)
  814a9c:	10800117 	ldw	r2,4(r2)
  814aa0:	e0fffd17 	ldw	r3,-12(fp)
  814aa4:	18c00017 	ldw	r3,0(r3)
  814aa8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  814aac:	e0bffd17 	ldw	r2,-12(fp)
  814ab0:	e0fffd17 	ldw	r3,-12(fp)
  814ab4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  814ab8:	e0bffd17 	ldw	r2,-12(fp)
  814abc:	e0fffd17 	ldw	r3,-12(fp)
  814ac0:	10c00015 	stw	r3,0(r2)
  814ac4:	e0bffb17 	ldw	r2,-20(fp)
  814ac8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814acc:	e0bffe17 	ldw	r2,-8(fp)
  814ad0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  814ad4:	0001883a 	nop
  814ad8:	e037883a 	mov	sp,fp
  814adc:	df000017 	ldw	fp,0(sp)
  814ae0:	dec00104 	addi	sp,sp,4
  814ae4:	f800283a 	ret

00814ae8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  814ae8:	defffb04 	addi	sp,sp,-20
  814aec:	dfc00415 	stw	ra,16(sp)
  814af0:	df000315 	stw	fp,12(sp)
  814af4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  814af8:	d0a00e17 	ldw	r2,-32712(gp)
  814afc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  814b00:	d0a75717 	ldw	r2,-25252(gp)
  814b04:	10800044 	addi	r2,r2,1
  814b08:	d0a75715 	stw	r2,-25252(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814b0c:	00002e06 	br	814bc8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  814b10:	e0bffd17 	ldw	r2,-12(fp)
  814b14:	10800017 	ldw	r2,0(r2)
  814b18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  814b1c:	e0bffd17 	ldw	r2,-12(fp)
  814b20:	10800403 	ldbu	r2,16(r2)
  814b24:	10803fcc 	andi	r2,r2,255
  814b28:	10000426 	beq	r2,zero,814b3c <alt_tick+0x54>
  814b2c:	d0a75717 	ldw	r2,-25252(gp)
  814b30:	1000021e 	bne	r2,zero,814b3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  814b34:	e0bffd17 	ldw	r2,-12(fp)
  814b38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  814b3c:	e0bffd17 	ldw	r2,-12(fp)
  814b40:	10800217 	ldw	r2,8(r2)
  814b44:	d0e75717 	ldw	r3,-25252(gp)
  814b48:	18801d36 	bltu	r3,r2,814bc0 <alt_tick+0xd8>
  814b4c:	e0bffd17 	ldw	r2,-12(fp)
  814b50:	10800403 	ldbu	r2,16(r2)
  814b54:	10803fcc 	andi	r2,r2,255
  814b58:	1000191e 	bne	r2,zero,814bc0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  814b5c:	e0bffd17 	ldw	r2,-12(fp)
  814b60:	10800317 	ldw	r2,12(r2)
  814b64:	e0fffd17 	ldw	r3,-12(fp)
  814b68:	18c00517 	ldw	r3,20(r3)
  814b6c:	1809883a 	mov	r4,r3
  814b70:	103ee83a 	callr	r2
  814b74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  814b78:	e0bfff17 	ldw	r2,-4(fp)
  814b7c:	1000031e 	bne	r2,zero,814b8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  814b80:	e13ffd17 	ldw	r4,-12(fp)
  814b84:	0814a4c0 	call	814a4c <alt_alarm_stop>
  814b88:	00000d06 	br	814bc0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  814b8c:	e0bffd17 	ldw	r2,-12(fp)
  814b90:	10c00217 	ldw	r3,8(r2)
  814b94:	e0bfff17 	ldw	r2,-4(fp)
  814b98:	1887883a 	add	r3,r3,r2
  814b9c:	e0bffd17 	ldw	r2,-12(fp)
  814ba0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  814ba4:	e0bffd17 	ldw	r2,-12(fp)
  814ba8:	10c00217 	ldw	r3,8(r2)
  814bac:	d0a75717 	ldw	r2,-25252(gp)
  814bb0:	1880032e 	bgeu	r3,r2,814bc0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  814bb4:	e0bffd17 	ldw	r2,-12(fp)
  814bb8:	00c00044 	movi	r3,1
  814bbc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  814bc0:	e0bffe17 	ldw	r2,-8(fp)
  814bc4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814bc8:	e0fffd17 	ldw	r3,-12(fp)
  814bcc:	d0a00e04 	addi	r2,gp,-32712
  814bd0:	18bfcf1e 	bne	r3,r2,814b10 <__alt_mem_onchip_mem+0xff80cb10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  814bd4:	0001883a 	nop
}
  814bd8:	0001883a 	nop
  814bdc:	e037883a 	mov	sp,fp
  814be0:	dfc00117 	ldw	ra,4(sp)
  814be4:	df000017 	ldw	fp,0(sp)
  814be8:	dec00204 	addi	sp,sp,8
  814bec:	f800283a 	ret

00814bf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814bf0:	defffe04 	addi	sp,sp,-8
  814bf4:	dfc00115 	stw	ra,4(sp)
  814bf8:	df000015 	stw	fp,0(sp)
  814bfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814c00:	d0a00c17 	ldw	r2,-32720(gp)
  814c04:	10000326 	beq	r2,zero,814c14 <alt_get_errno+0x24>
  814c08:	d0a00c17 	ldw	r2,-32720(gp)
  814c0c:	103ee83a 	callr	r2
  814c10:	00000106 	br	814c18 <alt_get_errno+0x28>
  814c14:	d0a75204 	addi	r2,gp,-25272
}
  814c18:	e037883a 	mov	sp,fp
  814c1c:	dfc00117 	ldw	ra,4(sp)
  814c20:	df000017 	ldw	fp,0(sp)
  814c24:	dec00204 	addi	sp,sp,8
  814c28:	f800283a 	ret

00814c2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  814c2c:	defff904 	addi	sp,sp,-28
  814c30:	dfc00615 	stw	ra,24(sp)
  814c34:	df000515 	stw	fp,20(sp)
  814c38:	df000504 	addi	fp,sp,20
  814c3c:	e13ffd15 	stw	r4,-12(fp)
  814c40:	e17ffe15 	stw	r5,-8(fp)
  814c44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814c48:	e0bffd17 	ldw	r2,-12(fp)
  814c4c:	10000616 	blt	r2,zero,814c68 <write+0x3c>
  814c50:	e0bffd17 	ldw	r2,-12(fp)
  814c54:	10c00324 	muli	r3,r2,12
  814c58:	008020b4 	movhi	r2,130
  814c5c:	10a42304 	addi	r2,r2,-28532
  814c60:	1885883a 	add	r2,r3,r2
  814c64:	00000106 	br	814c6c <write+0x40>
  814c68:	0005883a 	mov	r2,zero
  814c6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  814c70:	e0bffb17 	ldw	r2,-20(fp)
  814c74:	10002126 	beq	r2,zero,814cfc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  814c78:	e0bffb17 	ldw	r2,-20(fp)
  814c7c:	10800217 	ldw	r2,8(r2)
  814c80:	108000cc 	andi	r2,r2,3
  814c84:	10001826 	beq	r2,zero,814ce8 <write+0xbc>
  814c88:	e0bffb17 	ldw	r2,-20(fp)
  814c8c:	10800017 	ldw	r2,0(r2)
  814c90:	10800617 	ldw	r2,24(r2)
  814c94:	10001426 	beq	r2,zero,814ce8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  814c98:	e0bffb17 	ldw	r2,-20(fp)
  814c9c:	10800017 	ldw	r2,0(r2)
  814ca0:	10800617 	ldw	r2,24(r2)
  814ca4:	e0ffff17 	ldw	r3,-4(fp)
  814ca8:	180d883a 	mov	r6,r3
  814cac:	e17ffe17 	ldw	r5,-8(fp)
  814cb0:	e13ffb17 	ldw	r4,-20(fp)
  814cb4:	103ee83a 	callr	r2
  814cb8:	e0bffc15 	stw	r2,-16(fp)
  814cbc:	e0bffc17 	ldw	r2,-16(fp)
  814cc0:	1000070e 	bge	r2,zero,814ce0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  814cc4:	0814bf00 	call	814bf0 <alt_get_errno>
  814cc8:	1007883a 	mov	r3,r2
  814ccc:	e0bffc17 	ldw	r2,-16(fp)
  814cd0:	0085c83a 	sub	r2,zero,r2
  814cd4:	18800015 	stw	r2,0(r3)
        return -1;
  814cd8:	00bfffc4 	movi	r2,-1
  814cdc:	00000c06 	br	814d10 <write+0xe4>
      }
      return rval;
  814ce0:	e0bffc17 	ldw	r2,-16(fp)
  814ce4:	00000a06 	br	814d10 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  814ce8:	0814bf00 	call	814bf0 <alt_get_errno>
  814cec:	1007883a 	mov	r3,r2
  814cf0:	00800344 	movi	r2,13
  814cf4:	18800015 	stw	r2,0(r3)
  814cf8:	00000406 	br	814d0c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  814cfc:	0814bf00 	call	814bf0 <alt_get_errno>
  814d00:	1007883a 	mov	r3,r2
  814d04:	00801444 	movi	r2,81
  814d08:	18800015 	stw	r2,0(r3)
  }
  return -1;
  814d0c:	00bfffc4 	movi	r2,-1
}
  814d10:	e037883a 	mov	sp,fp
  814d14:	dfc00117 	ldw	ra,4(sp)
  814d18:	df000017 	ldw	fp,0(sp)
  814d1c:	dec00204 	addi	sp,sp,8
  814d20:	f800283a 	ret

00814d24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  814d24:	defffd04 	addi	sp,sp,-12
  814d28:	dfc00215 	stw	ra,8(sp)
  814d2c:	df000115 	stw	fp,4(sp)
  814d30:	df000104 	addi	fp,sp,4
  814d34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  814d38:	d1600904 	addi	r5,gp,-32732
  814d3c:	e13fff17 	ldw	r4,-4(fp)
  814d40:	08171bc0 	call	8171bc <alt_dev_llist_insert>
}
  814d44:	e037883a 	mov	sp,fp
  814d48:	dfc00117 	ldw	ra,4(sp)
  814d4c:	df000017 	ldw	fp,0(sp)
  814d50:	dec00204 	addi	sp,sp,8
  814d54:	f800283a 	ret

00814d58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  814d58:	defffd04 	addi	sp,sp,-12
  814d5c:	dfc00215 	stw	ra,8(sp)
  814d60:	df000115 	stw	fp,4(sp)
  814d64:	df000104 	addi	fp,sp,4
  814d68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  814d6c:	08179b80 	call	8179b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  814d70:	00800044 	movi	r2,1
  814d74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  814d78:	0001883a 	nop
  814d7c:	e037883a 	mov	sp,fp
  814d80:	dfc00117 	ldw	ra,4(sp)
  814d84:	df000017 	ldw	fp,0(sp)
  814d88:	dec00204 	addi	sp,sp,8
  814d8c:	f800283a 	ret

00814d90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  814d90:	defffe04 	addi	sp,sp,-8
  814d94:	dfc00115 	stw	ra,4(sp)
  814d98:	df000015 	stw	fp,0(sp)
  814d9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  814da0:	01c0fa04 	movi	r7,1000
  814da4:	01800084 	movi	r6,2
  814da8:	000b883a 	mov	r5,zero
  814dac:	01004074 	movhi	r4,257
  814db0:	21040804 	addi	r4,r4,4128
  814db4:	08167e40 	call	8167e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  814db8:	01800044 	movi	r6,1
  814dbc:	000b883a 	mov	r5,zero
  814dc0:	010020b4 	movhi	r4,130
  814dc4:	21248d04 	addi	r4,r4,-28108
  814dc8:	0814f8c0 	call	814f8c <altera_avalon_jtag_uart_init>
  814dcc:	010020b4 	movhi	r4,130
  814dd0:	21248304 	addi	r4,r4,-28148
  814dd4:	0814d240 	call	814d24 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  814dd8:	010020b4 	movhi	r4,130
  814ddc:	2128a504 	addi	r4,r4,-23916
  814de0:	08165d80 	call	8165d8 <altera_avalon_lcd_16207_init>
  814de4:	010020b4 	movhi	r4,130
  814de8:	21289b04 	addi	r4,r4,-23956
  814dec:	0814d240 	call	814d24 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  814df0:	000d883a 	mov	r6,zero
  814df4:	000b883a 	mov	r5,zero
  814df8:	010020b4 	movhi	r4,130
  814dfc:	2128ed04 	addi	r4,r4,-23628
  814e00:	08169700 	call	816970 <altera_avalon_uart_init>
  814e04:	010020b4 	movhi	r4,130
  814e08:	2128e304 	addi	r4,r4,-23668
  814e0c:	0814d240 	call	814d24 <alt_dev_reg>
}
  814e10:	0001883a 	nop
  814e14:	e037883a 	mov	sp,fp
  814e18:	dfc00117 	ldw	ra,4(sp)
  814e1c:	df000017 	ldw	fp,0(sp)
  814e20:	dec00204 	addi	sp,sp,8
  814e24:	f800283a 	ret

00814e28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  814e28:	defffa04 	addi	sp,sp,-24
  814e2c:	dfc00515 	stw	ra,20(sp)
  814e30:	df000415 	stw	fp,16(sp)
  814e34:	df000404 	addi	fp,sp,16
  814e38:	e13ffd15 	stw	r4,-12(fp)
  814e3c:	e17ffe15 	stw	r5,-8(fp)
  814e40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814e44:	e0bffd17 	ldw	r2,-12(fp)
  814e48:	10800017 	ldw	r2,0(r2)
  814e4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  814e50:	e0bffc17 	ldw	r2,-16(fp)
  814e54:	10c00a04 	addi	r3,r2,40
  814e58:	e0bffd17 	ldw	r2,-12(fp)
  814e5c:	10800217 	ldw	r2,8(r2)
  814e60:	100f883a 	mov	r7,r2
  814e64:	e1bfff17 	ldw	r6,-4(fp)
  814e68:	e17ffe17 	ldw	r5,-8(fp)
  814e6c:	1809883a 	mov	r4,r3
  814e70:	08154500 	call	815450 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  814e74:	e037883a 	mov	sp,fp
  814e78:	dfc00117 	ldw	ra,4(sp)
  814e7c:	df000017 	ldw	fp,0(sp)
  814e80:	dec00204 	addi	sp,sp,8
  814e84:	f800283a 	ret

00814e88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  814e88:	defffa04 	addi	sp,sp,-24
  814e8c:	dfc00515 	stw	ra,20(sp)
  814e90:	df000415 	stw	fp,16(sp)
  814e94:	df000404 	addi	fp,sp,16
  814e98:	e13ffd15 	stw	r4,-12(fp)
  814e9c:	e17ffe15 	stw	r5,-8(fp)
  814ea0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814ea4:	e0bffd17 	ldw	r2,-12(fp)
  814ea8:	10800017 	ldw	r2,0(r2)
  814eac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  814eb0:	e0bffc17 	ldw	r2,-16(fp)
  814eb4:	10c00a04 	addi	r3,r2,40
  814eb8:	e0bffd17 	ldw	r2,-12(fp)
  814ebc:	10800217 	ldw	r2,8(r2)
  814ec0:	100f883a 	mov	r7,r2
  814ec4:	e1bfff17 	ldw	r6,-4(fp)
  814ec8:	e17ffe17 	ldw	r5,-8(fp)
  814ecc:	1809883a 	mov	r4,r3
  814ed0:	081566c0 	call	81566c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  814ed4:	e037883a 	mov	sp,fp
  814ed8:	dfc00117 	ldw	ra,4(sp)
  814edc:	df000017 	ldw	fp,0(sp)
  814ee0:	dec00204 	addi	sp,sp,8
  814ee4:	f800283a 	ret

00814ee8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  814ee8:	defffc04 	addi	sp,sp,-16
  814eec:	dfc00315 	stw	ra,12(sp)
  814ef0:	df000215 	stw	fp,8(sp)
  814ef4:	df000204 	addi	fp,sp,8
  814ef8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814efc:	e0bfff17 	ldw	r2,-4(fp)
  814f00:	10800017 	ldw	r2,0(r2)
  814f04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  814f08:	e0bffe17 	ldw	r2,-8(fp)
  814f0c:	10c00a04 	addi	r3,r2,40
  814f10:	e0bfff17 	ldw	r2,-4(fp)
  814f14:	10800217 	ldw	r2,8(r2)
  814f18:	100b883a 	mov	r5,r2
  814f1c:	1809883a 	mov	r4,r3
  814f20:	08152f80 	call	8152f8 <altera_avalon_jtag_uart_close>
}
  814f24:	e037883a 	mov	sp,fp
  814f28:	dfc00117 	ldw	ra,4(sp)
  814f2c:	df000017 	ldw	fp,0(sp)
  814f30:	dec00204 	addi	sp,sp,8
  814f34:	f800283a 	ret

00814f38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  814f38:	defffa04 	addi	sp,sp,-24
  814f3c:	dfc00515 	stw	ra,20(sp)
  814f40:	df000415 	stw	fp,16(sp)
  814f44:	df000404 	addi	fp,sp,16
  814f48:	e13ffd15 	stw	r4,-12(fp)
  814f4c:	e17ffe15 	stw	r5,-8(fp)
  814f50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  814f54:	e0bffd17 	ldw	r2,-12(fp)
  814f58:	10800017 	ldw	r2,0(r2)
  814f5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  814f60:	e0bffc17 	ldw	r2,-16(fp)
  814f64:	10800a04 	addi	r2,r2,40
  814f68:	e1bfff17 	ldw	r6,-4(fp)
  814f6c:	e17ffe17 	ldw	r5,-8(fp)
  814f70:	1009883a 	mov	r4,r2
  814f74:	08153600 	call	815360 <altera_avalon_jtag_uart_ioctl>
}
  814f78:	e037883a 	mov	sp,fp
  814f7c:	dfc00117 	ldw	ra,4(sp)
  814f80:	df000017 	ldw	fp,0(sp)
  814f84:	dec00204 	addi	sp,sp,8
  814f88:	f800283a 	ret

00814f8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  814f8c:	defffa04 	addi	sp,sp,-24
  814f90:	dfc00515 	stw	ra,20(sp)
  814f94:	df000415 	stw	fp,16(sp)
  814f98:	df000404 	addi	fp,sp,16
  814f9c:	e13ffd15 	stw	r4,-12(fp)
  814fa0:	e17ffe15 	stw	r5,-8(fp)
  814fa4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814fa8:	e0bffd17 	ldw	r2,-12(fp)
  814fac:	00c00044 	movi	r3,1
  814fb0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  814fb4:	e0bffd17 	ldw	r2,-12(fp)
  814fb8:	10800017 	ldw	r2,0(r2)
  814fbc:	10800104 	addi	r2,r2,4
  814fc0:	1007883a 	mov	r3,r2
  814fc4:	e0bffd17 	ldw	r2,-12(fp)
  814fc8:	10800817 	ldw	r2,32(r2)
  814fcc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  814fd0:	e0bffe17 	ldw	r2,-8(fp)
  814fd4:	e0ffff17 	ldw	r3,-4(fp)
  814fd8:	d8000015 	stw	zero,0(sp)
  814fdc:	e1fffd17 	ldw	r7,-12(fp)
  814fe0:	01802074 	movhi	r6,129
  814fe4:	31941304 	addi	r6,r6,20556
  814fe8:	180b883a 	mov	r5,r3
  814fec:	1009883a 	mov	r4,r2
  814ff0:	08173540 	call	817354 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  814ff4:	e0bffd17 	ldw	r2,-12(fp)
  814ff8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  814ffc:	e0bffd17 	ldw	r2,-12(fp)
  815000:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  815004:	d0e75617 	ldw	r3,-25256(gp)
  815008:	e1fffd17 	ldw	r7,-12(fp)
  81500c:	01802074 	movhi	r6,129
  815010:	31949604 	addi	r6,r6,21080
  815014:	180b883a 	mov	r5,r3
  815018:	1009883a 	mov	r4,r2
  81501c:	08141100 	call	814110 <alt_alarm_start>
  815020:	1000040e 	bge	r2,zero,815034 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  815024:	e0fffd17 	ldw	r3,-12(fp)
  815028:	00a00034 	movhi	r2,32768
  81502c:	10bfffc4 	addi	r2,r2,-1
  815030:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  815034:	0001883a 	nop
  815038:	e037883a 	mov	sp,fp
  81503c:	dfc00117 	ldw	ra,4(sp)
  815040:	df000017 	ldw	fp,0(sp)
  815044:	dec00204 	addi	sp,sp,8
  815048:	f800283a 	ret

0081504c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81504c:	defff804 	addi	sp,sp,-32
  815050:	df000715 	stw	fp,28(sp)
  815054:	df000704 	addi	fp,sp,28
  815058:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81505c:	e0bfff17 	ldw	r2,-4(fp)
  815060:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  815064:	e0bffb17 	ldw	r2,-20(fp)
  815068:	10800017 	ldw	r2,0(r2)
  81506c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815070:	e0bffc17 	ldw	r2,-16(fp)
  815074:	10800104 	addi	r2,r2,4
  815078:	10800037 	ldwio	r2,0(r2)
  81507c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  815080:	e0bffd17 	ldw	r2,-12(fp)
  815084:	1080c00c 	andi	r2,r2,768
  815088:	10006d26 	beq	r2,zero,815240 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81508c:	e0bffd17 	ldw	r2,-12(fp)
  815090:	1080400c 	andi	r2,r2,256
  815094:	10003526 	beq	r2,zero,81516c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  815098:	00800074 	movhi	r2,1
  81509c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8150a0:	e0bffb17 	ldw	r2,-20(fp)
  8150a4:	10800a17 	ldw	r2,40(r2)
  8150a8:	10800044 	addi	r2,r2,1
  8150ac:	1081ffcc 	andi	r2,r2,2047
  8150b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  8150b4:	e0bffb17 	ldw	r2,-20(fp)
  8150b8:	10c00b17 	ldw	r3,44(r2)
  8150bc:	e0bffe17 	ldw	r2,-8(fp)
  8150c0:	18801526 	beq	r3,r2,815118 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8150c4:	e0bffc17 	ldw	r2,-16(fp)
  8150c8:	10800037 	ldwio	r2,0(r2)
  8150cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8150d0:	e0bff917 	ldw	r2,-28(fp)
  8150d4:	10a0000c 	andi	r2,r2,32768
  8150d8:	10001126 	beq	r2,zero,815120 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8150dc:	e0bffb17 	ldw	r2,-20(fp)
  8150e0:	10800a17 	ldw	r2,40(r2)
  8150e4:	e0fff917 	ldw	r3,-28(fp)
  8150e8:	1809883a 	mov	r4,r3
  8150ec:	e0fffb17 	ldw	r3,-20(fp)
  8150f0:	1885883a 	add	r2,r3,r2
  8150f4:	10800e04 	addi	r2,r2,56
  8150f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8150fc:	e0bffb17 	ldw	r2,-20(fp)
  815100:	10800a17 	ldw	r2,40(r2)
  815104:	10800044 	addi	r2,r2,1
  815108:	10c1ffcc 	andi	r3,r2,2047
  81510c:	e0bffb17 	ldw	r2,-20(fp)
  815110:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  815114:	003fe206 	br	8150a0 <__alt_mem_onchip_mem+0xff80d0a0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  815118:	0001883a 	nop
  81511c:	00000106 	br	815124 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  815120:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  815124:	e0bff917 	ldw	r2,-28(fp)
  815128:	10bfffec 	andhi	r2,r2,65535
  81512c:	10000f26 	beq	r2,zero,81516c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815130:	e0bffb17 	ldw	r2,-20(fp)
  815134:	10c00817 	ldw	r3,32(r2)
  815138:	00bfff84 	movi	r2,-2
  81513c:	1886703a 	and	r3,r3,r2
  815140:	e0bffb17 	ldw	r2,-20(fp)
  815144:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  815148:	e0bffc17 	ldw	r2,-16(fp)
  81514c:	10800104 	addi	r2,r2,4
  815150:	1007883a 	mov	r3,r2
  815154:	e0bffb17 	ldw	r2,-20(fp)
  815158:	10800817 	ldw	r2,32(r2)
  81515c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815160:	e0bffc17 	ldw	r2,-16(fp)
  815164:	10800104 	addi	r2,r2,4
  815168:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81516c:	e0bffd17 	ldw	r2,-12(fp)
  815170:	1080800c 	andi	r2,r2,512
  815174:	103fbe26 	beq	r2,zero,815070 <__alt_mem_onchip_mem+0xff80d070>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  815178:	e0bffd17 	ldw	r2,-12(fp)
  81517c:	1004d43a 	srli	r2,r2,16
  815180:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  815184:	00001406 	br	8151d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  815188:	e0bffc17 	ldw	r2,-16(fp)
  81518c:	e0fffb17 	ldw	r3,-20(fp)
  815190:	18c00d17 	ldw	r3,52(r3)
  815194:	e13ffb17 	ldw	r4,-20(fp)
  815198:	20c7883a 	add	r3,r4,r3
  81519c:	18c20e04 	addi	r3,r3,2104
  8151a0:	18c00003 	ldbu	r3,0(r3)
  8151a4:	18c03fcc 	andi	r3,r3,255
  8151a8:	18c0201c 	xori	r3,r3,128
  8151ac:	18ffe004 	addi	r3,r3,-128
  8151b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8151b4:	e0bffb17 	ldw	r2,-20(fp)
  8151b8:	10800d17 	ldw	r2,52(r2)
  8151bc:	10800044 	addi	r2,r2,1
  8151c0:	10c1ffcc 	andi	r3,r2,2047
  8151c4:	e0bffb17 	ldw	r2,-20(fp)
  8151c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8151cc:	e0bffa17 	ldw	r2,-24(fp)
  8151d0:	10bfffc4 	addi	r2,r2,-1
  8151d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8151d8:	e0bffa17 	ldw	r2,-24(fp)
  8151dc:	10000526 	beq	r2,zero,8151f4 <altera_avalon_jtag_uart_irq+0x1a8>
  8151e0:	e0bffb17 	ldw	r2,-20(fp)
  8151e4:	10c00d17 	ldw	r3,52(r2)
  8151e8:	e0bffb17 	ldw	r2,-20(fp)
  8151ec:	10800c17 	ldw	r2,48(r2)
  8151f0:	18bfe51e 	bne	r3,r2,815188 <__alt_mem_onchip_mem+0xff80d188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8151f4:	e0bffa17 	ldw	r2,-24(fp)
  8151f8:	103f9d26 	beq	r2,zero,815070 <__alt_mem_onchip_mem+0xff80d070>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8151fc:	e0bffb17 	ldw	r2,-20(fp)
  815200:	10c00817 	ldw	r3,32(r2)
  815204:	00bfff44 	movi	r2,-3
  815208:	1886703a 	and	r3,r3,r2
  81520c:	e0bffb17 	ldw	r2,-20(fp)
  815210:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815214:	e0bffb17 	ldw	r2,-20(fp)
  815218:	10800017 	ldw	r2,0(r2)
  81521c:	10800104 	addi	r2,r2,4
  815220:	1007883a 	mov	r3,r2
  815224:	e0bffb17 	ldw	r2,-20(fp)
  815228:	10800817 	ldw	r2,32(r2)
  81522c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815230:	e0bffc17 	ldw	r2,-16(fp)
  815234:	10800104 	addi	r2,r2,4
  815238:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  81523c:	003f8c06 	br	815070 <__alt_mem_onchip_mem+0xff80d070>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  815240:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  815244:	0001883a 	nop
  815248:	e037883a 	mov	sp,fp
  81524c:	df000017 	ldw	fp,0(sp)
  815250:	dec00104 	addi	sp,sp,4
  815254:	f800283a 	ret

00815258 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  815258:	defff804 	addi	sp,sp,-32
  81525c:	df000715 	stw	fp,28(sp)
  815260:	df000704 	addi	fp,sp,28
  815264:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  815268:	e0bffb17 	ldw	r2,-20(fp)
  81526c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  815270:	e0bff917 	ldw	r2,-28(fp)
  815274:	10800017 	ldw	r2,0(r2)
  815278:	10800104 	addi	r2,r2,4
  81527c:	10800037 	ldwio	r2,0(r2)
  815280:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  815284:	e0bffa17 	ldw	r2,-24(fp)
  815288:	1081000c 	andi	r2,r2,1024
  81528c:	10000b26 	beq	r2,zero,8152bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  815290:	e0bff917 	ldw	r2,-28(fp)
  815294:	10800017 	ldw	r2,0(r2)
  815298:	10800104 	addi	r2,r2,4
  81529c:	1007883a 	mov	r3,r2
  8152a0:	e0bff917 	ldw	r2,-28(fp)
  8152a4:	10800817 	ldw	r2,32(r2)
  8152a8:	10810014 	ori	r2,r2,1024
  8152ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8152b0:	e0bff917 	ldw	r2,-28(fp)
  8152b4:	10000915 	stw	zero,36(r2)
  8152b8:	00000a06 	br	8152e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8152bc:	e0bff917 	ldw	r2,-28(fp)
  8152c0:	10c00917 	ldw	r3,36(r2)
  8152c4:	00a00034 	movhi	r2,32768
  8152c8:	10bfff04 	addi	r2,r2,-4
  8152cc:	10c00536 	bltu	r2,r3,8152e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8152d0:	e0bff917 	ldw	r2,-28(fp)
  8152d4:	10800917 	ldw	r2,36(r2)
  8152d8:	10c00044 	addi	r3,r2,1
  8152dc:	e0bff917 	ldw	r2,-28(fp)
  8152e0:	10c00915 	stw	r3,36(r2)
  8152e4:	d0a75617 	ldw	r2,-25256(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8152e8:	e037883a 	mov	sp,fp
  8152ec:	df000017 	ldw	fp,0(sp)
  8152f0:	dec00104 	addi	sp,sp,4
  8152f4:	f800283a 	ret

008152f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8152f8:	defffd04 	addi	sp,sp,-12
  8152fc:	df000215 	stw	fp,8(sp)
  815300:	df000204 	addi	fp,sp,8
  815304:	e13ffe15 	stw	r4,-8(fp)
  815308:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81530c:	00000506 	br	815324 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  815310:	e0bfff17 	ldw	r2,-4(fp)
  815314:	1090000c 	andi	r2,r2,16384
  815318:	10000226 	beq	r2,zero,815324 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  81531c:	00bffd44 	movi	r2,-11
  815320:	00000b06 	br	815350 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815324:	e0bffe17 	ldw	r2,-8(fp)
  815328:	10c00d17 	ldw	r3,52(r2)
  81532c:	e0bffe17 	ldw	r2,-8(fp)
  815330:	10800c17 	ldw	r2,48(r2)
  815334:	18800526 	beq	r3,r2,81534c <altera_avalon_jtag_uart_close+0x54>
  815338:	e0bffe17 	ldw	r2,-8(fp)
  81533c:	10c00917 	ldw	r3,36(r2)
  815340:	e0bffe17 	ldw	r2,-8(fp)
  815344:	10800117 	ldw	r2,4(r2)
  815348:	18bff136 	bltu	r3,r2,815310 <__alt_mem_onchip_mem+0xff80d310>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81534c:	0005883a 	mov	r2,zero
}
  815350:	e037883a 	mov	sp,fp
  815354:	df000017 	ldw	fp,0(sp)
  815358:	dec00104 	addi	sp,sp,4
  81535c:	f800283a 	ret

00815360 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  815360:	defffa04 	addi	sp,sp,-24
  815364:	df000515 	stw	fp,20(sp)
  815368:	df000504 	addi	fp,sp,20
  81536c:	e13ffd15 	stw	r4,-12(fp)
  815370:	e17ffe15 	stw	r5,-8(fp)
  815374:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  815378:	00bff9c4 	movi	r2,-25
  81537c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  815380:	e0bffe17 	ldw	r2,-8(fp)
  815384:	10da8060 	cmpeqi	r3,r2,27137
  815388:	1800031e 	bne	r3,zero,815398 <altera_avalon_jtag_uart_ioctl+0x38>
  81538c:	109a80a0 	cmpeqi	r2,r2,27138
  815390:	1000181e 	bne	r2,zero,8153f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  815394:	00002906 	br	81543c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  815398:	e0bffd17 	ldw	r2,-12(fp)
  81539c:	10c00117 	ldw	r3,4(r2)
  8153a0:	00a00034 	movhi	r2,32768
  8153a4:	10bfffc4 	addi	r2,r2,-1
  8153a8:	18802126 	beq	r3,r2,815430 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  8153ac:	e0bfff17 	ldw	r2,-4(fp)
  8153b0:	10800017 	ldw	r2,0(r2)
  8153b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8153b8:	e0bffc17 	ldw	r2,-16(fp)
  8153bc:	10800090 	cmplti	r2,r2,2
  8153c0:	1000061e 	bne	r2,zero,8153dc <altera_avalon_jtag_uart_ioctl+0x7c>
  8153c4:	e0fffc17 	ldw	r3,-16(fp)
  8153c8:	00a00034 	movhi	r2,32768
  8153cc:	10bfffc4 	addi	r2,r2,-1
  8153d0:	18800226 	beq	r3,r2,8153dc <altera_avalon_jtag_uart_ioctl+0x7c>
  8153d4:	e0bffc17 	ldw	r2,-16(fp)
  8153d8:	00000206 	br	8153e4 <altera_avalon_jtag_uart_ioctl+0x84>
  8153dc:	00a00034 	movhi	r2,32768
  8153e0:	10bfff84 	addi	r2,r2,-2
  8153e4:	e0fffd17 	ldw	r3,-12(fp)
  8153e8:	18800115 	stw	r2,4(r3)
      rc = 0;
  8153ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8153f0:	00000f06 	br	815430 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8153f4:	e0bffd17 	ldw	r2,-12(fp)
  8153f8:	10c00117 	ldw	r3,4(r2)
  8153fc:	00a00034 	movhi	r2,32768
  815400:	10bfffc4 	addi	r2,r2,-1
  815404:	18800c26 	beq	r3,r2,815438 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  815408:	e0bffd17 	ldw	r2,-12(fp)
  81540c:	10c00917 	ldw	r3,36(r2)
  815410:	e0bffd17 	ldw	r2,-12(fp)
  815414:	10800117 	ldw	r2,4(r2)
  815418:	1885803a 	cmpltu	r2,r3,r2
  81541c:	10c03fcc 	andi	r3,r2,255
  815420:	e0bfff17 	ldw	r2,-4(fp)
  815424:	10c00015 	stw	r3,0(r2)
      rc = 0;
  815428:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  81542c:	00000206 	br	815438 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  815430:	0001883a 	nop
  815434:	00000106 	br	81543c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  815438:	0001883a 	nop

  default:
    break;
  }

  return rc;
  81543c:	e0bffb17 	ldw	r2,-20(fp)
}
  815440:	e037883a 	mov	sp,fp
  815444:	df000017 	ldw	fp,0(sp)
  815448:	dec00104 	addi	sp,sp,4
  81544c:	f800283a 	ret

00815450 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  815450:	defff304 	addi	sp,sp,-52
  815454:	dfc00c15 	stw	ra,48(sp)
  815458:	df000b15 	stw	fp,44(sp)
  81545c:	df000b04 	addi	fp,sp,44
  815460:	e13ffc15 	stw	r4,-16(fp)
  815464:	e17ffd15 	stw	r5,-12(fp)
  815468:	e1bffe15 	stw	r6,-8(fp)
  81546c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  815470:	e0bffd17 	ldw	r2,-12(fp)
  815474:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  815478:	00004706 	br	815598 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81547c:	e0bffc17 	ldw	r2,-16(fp)
  815480:	10800a17 	ldw	r2,40(r2)
  815484:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  815488:	e0bffc17 	ldw	r2,-16(fp)
  81548c:	10800b17 	ldw	r2,44(r2)
  815490:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  815494:	e0fff717 	ldw	r3,-36(fp)
  815498:	e0bff817 	ldw	r2,-32(fp)
  81549c:	18800536 	bltu	r3,r2,8154b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8154a0:	e0fff717 	ldw	r3,-36(fp)
  8154a4:	e0bff817 	ldw	r2,-32(fp)
  8154a8:	1885c83a 	sub	r2,r3,r2
  8154ac:	e0bff615 	stw	r2,-40(fp)
  8154b0:	00000406 	br	8154c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8154b4:	00c20004 	movi	r3,2048
  8154b8:	e0bff817 	ldw	r2,-32(fp)
  8154bc:	1885c83a 	sub	r2,r3,r2
  8154c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8154c4:	e0bff617 	ldw	r2,-40(fp)
  8154c8:	10001e26 	beq	r2,zero,815544 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8154cc:	e0fffe17 	ldw	r3,-8(fp)
  8154d0:	e0bff617 	ldw	r2,-40(fp)
  8154d4:	1880022e 	bgeu	r3,r2,8154e0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8154d8:	e0bffe17 	ldw	r2,-8(fp)
  8154dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8154e0:	e0bffc17 	ldw	r2,-16(fp)
  8154e4:	10c00e04 	addi	r3,r2,56
  8154e8:	e0bff817 	ldw	r2,-32(fp)
  8154ec:	1885883a 	add	r2,r3,r2
  8154f0:	e1bff617 	ldw	r6,-40(fp)
  8154f4:	100b883a 	mov	r5,r2
  8154f8:	e13ff517 	ldw	r4,-44(fp)
  8154fc:	080e2200 	call	80e220 <memcpy>
      ptr   += n;
  815500:	e0fff517 	ldw	r3,-44(fp)
  815504:	e0bff617 	ldw	r2,-40(fp)
  815508:	1885883a 	add	r2,r3,r2
  81550c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  815510:	e0fffe17 	ldw	r3,-8(fp)
  815514:	e0bff617 	ldw	r2,-40(fp)
  815518:	1885c83a 	sub	r2,r3,r2
  81551c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815520:	e0fff817 	ldw	r3,-32(fp)
  815524:	e0bff617 	ldw	r2,-40(fp)
  815528:	1885883a 	add	r2,r3,r2
  81552c:	10c1ffcc 	andi	r3,r2,2047
  815530:	e0bffc17 	ldw	r2,-16(fp)
  815534:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  815538:	e0bffe17 	ldw	r2,-8(fp)
  81553c:	00bfcf16 	blt	zero,r2,81547c <__alt_mem_onchip_mem+0xff80d47c>
  815540:	00000106 	br	815548 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  815544:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  815548:	e0fff517 	ldw	r3,-44(fp)
  81554c:	e0bffd17 	ldw	r2,-12(fp)
  815550:	1880141e 	bne	r3,r2,8155a4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  815554:	e0bfff17 	ldw	r2,-4(fp)
  815558:	1090000c 	andi	r2,r2,16384
  81555c:	1000131e 	bne	r2,zero,8155ac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  815560:	0001883a 	nop
  815564:	e0bffc17 	ldw	r2,-16(fp)
  815568:	10c00a17 	ldw	r3,40(r2)
  81556c:	e0bff717 	ldw	r2,-36(fp)
  815570:	1880051e 	bne	r3,r2,815588 <altera_avalon_jtag_uart_read+0x138>
  815574:	e0bffc17 	ldw	r2,-16(fp)
  815578:	10c00917 	ldw	r3,36(r2)
  81557c:	e0bffc17 	ldw	r2,-16(fp)
  815580:	10800117 	ldw	r2,4(r2)
  815584:	18bff736 	bltu	r3,r2,815564 <__alt_mem_onchip_mem+0xff80d564>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  815588:	e0bffc17 	ldw	r2,-16(fp)
  81558c:	10c00a17 	ldw	r3,40(r2)
  815590:	e0bff717 	ldw	r2,-36(fp)
  815594:	18800726 	beq	r3,r2,8155b4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  815598:	e0bffe17 	ldw	r2,-8(fp)
  81559c:	00bfb716 	blt	zero,r2,81547c <__alt_mem_onchip_mem+0xff80d47c>
  8155a0:	00000506 	br	8155b8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8155a4:	0001883a 	nop
  8155a8:	00000306 	br	8155b8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8155ac:	0001883a 	nop
  8155b0:	00000106 	br	8155b8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8155b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8155b8:	e0fff517 	ldw	r3,-44(fp)
  8155bc:	e0bffd17 	ldw	r2,-12(fp)
  8155c0:	18801826 	beq	r3,r2,815624 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8155c4:	0005303a 	rdctl	r2,status
  8155c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8155cc:	e0fffb17 	ldw	r3,-20(fp)
  8155d0:	00bfff84 	movi	r2,-2
  8155d4:	1884703a 	and	r2,r3,r2
  8155d8:	1001703a 	wrctl	status,r2
  
  return context;
  8155dc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8155e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8155e4:	e0bffc17 	ldw	r2,-16(fp)
  8155e8:	10800817 	ldw	r2,32(r2)
  8155ec:	10c00054 	ori	r3,r2,1
  8155f0:	e0bffc17 	ldw	r2,-16(fp)
  8155f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8155f8:	e0bffc17 	ldw	r2,-16(fp)
  8155fc:	10800017 	ldw	r2,0(r2)
  815600:	10800104 	addi	r2,r2,4
  815604:	1007883a 	mov	r3,r2
  815608:	e0bffc17 	ldw	r2,-16(fp)
  81560c:	10800817 	ldw	r2,32(r2)
  815610:	18800035 	stwio	r2,0(r3)
  815614:	e0bffa17 	ldw	r2,-24(fp)
  815618:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81561c:	e0bff917 	ldw	r2,-28(fp)
  815620:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  815624:	e0fff517 	ldw	r3,-44(fp)
  815628:	e0bffd17 	ldw	r2,-12(fp)
  81562c:	18800426 	beq	r3,r2,815640 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  815630:	e0fff517 	ldw	r3,-44(fp)
  815634:	e0bffd17 	ldw	r2,-12(fp)
  815638:	1885c83a 	sub	r2,r3,r2
  81563c:	00000606 	br	815658 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  815640:	e0bfff17 	ldw	r2,-4(fp)
  815644:	1090000c 	andi	r2,r2,16384
  815648:	10000226 	beq	r2,zero,815654 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  81564c:	00bffd44 	movi	r2,-11
  815650:	00000106 	br	815658 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  815654:	00bffec4 	movi	r2,-5
}
  815658:	e037883a 	mov	sp,fp
  81565c:	dfc00117 	ldw	ra,4(sp)
  815660:	df000017 	ldw	fp,0(sp)
  815664:	dec00204 	addi	sp,sp,8
  815668:	f800283a 	ret

0081566c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81566c:	defff304 	addi	sp,sp,-52
  815670:	dfc00c15 	stw	ra,48(sp)
  815674:	df000b15 	stw	fp,44(sp)
  815678:	df000b04 	addi	fp,sp,44
  81567c:	e13ffc15 	stw	r4,-16(fp)
  815680:	e17ffd15 	stw	r5,-12(fp)
  815684:	e1bffe15 	stw	r6,-8(fp)
  815688:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81568c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  815690:	e0bffd17 	ldw	r2,-12(fp)
  815694:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  815698:	00003706 	br	815778 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81569c:	e0bffc17 	ldw	r2,-16(fp)
  8156a0:	10800c17 	ldw	r2,48(r2)
  8156a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8156a8:	e0bffc17 	ldw	r2,-16(fp)
  8156ac:	10800d17 	ldw	r2,52(r2)
  8156b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8156b4:	e0fff917 	ldw	r3,-28(fp)
  8156b8:	e0bff517 	ldw	r2,-44(fp)
  8156bc:	1880062e 	bgeu	r3,r2,8156d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8156c0:	e0fff517 	ldw	r3,-44(fp)
  8156c4:	e0bff917 	ldw	r2,-28(fp)
  8156c8:	1885c83a 	sub	r2,r3,r2
  8156cc:	10bfffc4 	addi	r2,r2,-1
  8156d0:	e0bff615 	stw	r2,-40(fp)
  8156d4:	00000b06 	br	815704 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8156d8:	e0bff517 	ldw	r2,-44(fp)
  8156dc:	10000526 	beq	r2,zero,8156f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8156e0:	00c20004 	movi	r3,2048
  8156e4:	e0bff917 	ldw	r2,-28(fp)
  8156e8:	1885c83a 	sub	r2,r3,r2
  8156ec:	e0bff615 	stw	r2,-40(fp)
  8156f0:	00000406 	br	815704 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8156f4:	00c1ffc4 	movi	r3,2047
  8156f8:	e0bff917 	ldw	r2,-28(fp)
  8156fc:	1885c83a 	sub	r2,r3,r2
  815700:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  815704:	e0bff617 	ldw	r2,-40(fp)
  815708:	10001e26 	beq	r2,zero,815784 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  81570c:	e0fffe17 	ldw	r3,-8(fp)
  815710:	e0bff617 	ldw	r2,-40(fp)
  815714:	1880022e 	bgeu	r3,r2,815720 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  815718:	e0bffe17 	ldw	r2,-8(fp)
  81571c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  815720:	e0bffc17 	ldw	r2,-16(fp)
  815724:	10c20e04 	addi	r3,r2,2104
  815728:	e0bff917 	ldw	r2,-28(fp)
  81572c:	1885883a 	add	r2,r3,r2
  815730:	e1bff617 	ldw	r6,-40(fp)
  815734:	e17ffd17 	ldw	r5,-12(fp)
  815738:	1009883a 	mov	r4,r2
  81573c:	080e2200 	call	80e220 <memcpy>
      ptr   += n;
  815740:	e0fffd17 	ldw	r3,-12(fp)
  815744:	e0bff617 	ldw	r2,-40(fp)
  815748:	1885883a 	add	r2,r3,r2
  81574c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  815750:	e0fffe17 	ldw	r3,-8(fp)
  815754:	e0bff617 	ldw	r2,-40(fp)
  815758:	1885c83a 	sub	r2,r3,r2
  81575c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815760:	e0fff917 	ldw	r3,-28(fp)
  815764:	e0bff617 	ldw	r2,-40(fp)
  815768:	1885883a 	add	r2,r3,r2
  81576c:	10c1ffcc 	andi	r3,r2,2047
  815770:	e0bffc17 	ldw	r2,-16(fp)
  815774:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  815778:	e0bffe17 	ldw	r2,-8(fp)
  81577c:	00bfc716 	blt	zero,r2,81569c <__alt_mem_onchip_mem+0xff80d69c>
  815780:	00000106 	br	815788 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  815784:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815788:	0005303a 	rdctl	r2,status
  81578c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815790:	e0fffb17 	ldw	r3,-20(fp)
  815794:	00bfff84 	movi	r2,-2
  815798:	1884703a 	and	r2,r3,r2
  81579c:	1001703a 	wrctl	status,r2
  
  return context;
  8157a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8157a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8157a8:	e0bffc17 	ldw	r2,-16(fp)
  8157ac:	10800817 	ldw	r2,32(r2)
  8157b0:	10c00094 	ori	r3,r2,2
  8157b4:	e0bffc17 	ldw	r2,-16(fp)
  8157b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8157bc:	e0bffc17 	ldw	r2,-16(fp)
  8157c0:	10800017 	ldw	r2,0(r2)
  8157c4:	10800104 	addi	r2,r2,4
  8157c8:	1007883a 	mov	r3,r2
  8157cc:	e0bffc17 	ldw	r2,-16(fp)
  8157d0:	10800817 	ldw	r2,32(r2)
  8157d4:	18800035 	stwio	r2,0(r3)
  8157d8:	e0bffa17 	ldw	r2,-24(fp)
  8157dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8157e0:	e0bff817 	ldw	r2,-32(fp)
  8157e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8157e8:	e0bffe17 	ldw	r2,-8(fp)
  8157ec:	0080100e 	bge	zero,r2,815830 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8157f0:	e0bfff17 	ldw	r2,-4(fp)
  8157f4:	1090000c 	andi	r2,r2,16384
  8157f8:	1000101e 	bne	r2,zero,81583c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8157fc:	0001883a 	nop
  815800:	e0bffc17 	ldw	r2,-16(fp)
  815804:	10c00d17 	ldw	r3,52(r2)
  815808:	e0bff517 	ldw	r2,-44(fp)
  81580c:	1880051e 	bne	r3,r2,815824 <altera_avalon_jtag_uart_write+0x1b8>
  815810:	e0bffc17 	ldw	r2,-16(fp)
  815814:	10c00917 	ldw	r3,36(r2)
  815818:	e0bffc17 	ldw	r2,-16(fp)
  81581c:	10800117 	ldw	r2,4(r2)
  815820:	18bff736 	bltu	r3,r2,815800 <__alt_mem_onchip_mem+0xff80d800>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  815824:	e0bffc17 	ldw	r2,-16(fp)
  815828:	10800917 	ldw	r2,36(r2)
  81582c:	1000051e 	bne	r2,zero,815844 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  815830:	e0bffe17 	ldw	r2,-8(fp)
  815834:	00bfd016 	blt	zero,r2,815778 <__alt_mem_onchip_mem+0xff80d778>
  815838:	00000306 	br	815848 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  81583c:	0001883a 	nop
  815840:	00000106 	br	815848 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  815844:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  815848:	e0fffd17 	ldw	r3,-12(fp)
  81584c:	e0bff717 	ldw	r2,-36(fp)
  815850:	18800426 	beq	r3,r2,815864 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  815854:	e0fffd17 	ldw	r3,-12(fp)
  815858:	e0bff717 	ldw	r2,-36(fp)
  81585c:	1885c83a 	sub	r2,r3,r2
  815860:	00000606 	br	81587c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  815864:	e0bfff17 	ldw	r2,-4(fp)
  815868:	1090000c 	andi	r2,r2,16384
  81586c:	10000226 	beq	r2,zero,815878 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  815870:	00bffd44 	movi	r2,-11
  815874:	00000106 	br	81587c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  815878:	00bffec4 	movi	r2,-5
}
  81587c:	e037883a 	mov	sp,fp
  815880:	dfc00117 	ldw	ra,4(sp)
  815884:	df000017 	ldw	fp,0(sp)
  815888:	dec00204 	addi	sp,sp,8
  81588c:	f800283a 	ret

00815890 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  815890:	defffa04 	addi	sp,sp,-24
  815894:	dfc00515 	stw	ra,20(sp)
  815898:	df000415 	stw	fp,16(sp)
  81589c:	df000404 	addi	fp,sp,16
  8158a0:	e13ffe15 	stw	r4,-8(fp)
  8158a4:	2805883a 	mov	r2,r5
  8158a8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8158ac:	e0bffe17 	ldw	r2,-8(fp)
  8158b0:	10800017 	ldw	r2,0(r2)
  8158b4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8158b8:	008003f4 	movhi	r2,15
  8158bc:	10909004 	addi	r2,r2,16960
  8158c0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8158c4:	e0bffe17 	ldw	r2,-8(fp)
  8158c8:	10800803 	ldbu	r2,32(r2)
  8158cc:	10803fcc 	andi	r2,r2,255
  8158d0:	1080201c 	xori	r2,r2,128
  8158d4:	10bfe004 	addi	r2,r2,-128
  8158d8:	1000151e 	bne	r2,zero,815930 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8158dc:	00000906 	br	815904 <lcd_write_command+0x74>
    if (--i == 0)
  8158e0:	e0bffc17 	ldw	r2,-16(fp)
  8158e4:	10bfffc4 	addi	r2,r2,-1
  8158e8:	e0bffc15 	stw	r2,-16(fp)
  8158ec:	e0bffc17 	ldw	r2,-16(fp)
  8158f0:	1000041e 	bne	r2,zero,815904 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8158f4:	e0bffe17 	ldw	r2,-8(fp)
  8158f8:	00c00044 	movi	r3,1
  8158fc:	10c00805 	stb	r3,32(r2)
      return;
  815900:	00000c06 	br	815934 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  815904:	e0bffd17 	ldw	r2,-12(fp)
  815908:	10800104 	addi	r2,r2,4
  81590c:	10800037 	ldwio	r2,0(r2)
  815910:	1080200c 	andi	r2,r2,128
  815914:	103ff21e 	bne	r2,zero,8158e0 <__alt_mem_onchip_mem+0xff80d8e0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  815918:	01001904 	movi	r4,100
  81591c:	08179880 	call	817988 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  815920:	e0bffd17 	ldw	r2,-12(fp)
  815924:	e0ffff03 	ldbu	r3,-4(fp)
  815928:	10c00035 	stwio	r3,0(r2)
  81592c:	00000106 	br	815934 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  815930:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  815934:	e037883a 	mov	sp,fp
  815938:	dfc00117 	ldw	ra,4(sp)
  81593c:	df000017 	ldw	fp,0(sp)
  815940:	dec00204 	addi	sp,sp,8
  815944:	f800283a 	ret

00815948 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  815948:	defffa04 	addi	sp,sp,-24
  81594c:	dfc00515 	stw	ra,20(sp)
  815950:	df000415 	stw	fp,16(sp)
  815954:	df000404 	addi	fp,sp,16
  815958:	e13ffe15 	stw	r4,-8(fp)
  81595c:	2805883a 	mov	r2,r5
  815960:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  815964:	e0bffe17 	ldw	r2,-8(fp)
  815968:	10800017 	ldw	r2,0(r2)
  81596c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  815970:	008003f4 	movhi	r2,15
  815974:	10909004 	addi	r2,r2,16960
  815978:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81597c:	e0bffe17 	ldw	r2,-8(fp)
  815980:	10800803 	ldbu	r2,32(r2)
  815984:	10803fcc 	andi	r2,r2,255
  815988:	1080201c 	xori	r2,r2,128
  81598c:	10bfe004 	addi	r2,r2,-128
  815990:	10001d1e 	bne	r2,zero,815a08 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  815994:	00000906 	br	8159bc <lcd_write_data+0x74>
    if (--i == 0)
  815998:	e0bffc17 	ldw	r2,-16(fp)
  81599c:	10bfffc4 	addi	r2,r2,-1
  8159a0:	e0bffc15 	stw	r2,-16(fp)
  8159a4:	e0bffc17 	ldw	r2,-16(fp)
  8159a8:	1000041e 	bne	r2,zero,8159bc <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8159ac:	e0bffe17 	ldw	r2,-8(fp)
  8159b0:	00c00044 	movi	r3,1
  8159b4:	10c00805 	stb	r3,32(r2)
      return;
  8159b8:	00001406 	br	815a0c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8159bc:	e0bffd17 	ldw	r2,-12(fp)
  8159c0:	10800104 	addi	r2,r2,4
  8159c4:	10800037 	ldwio	r2,0(r2)
  8159c8:	1080200c 	andi	r2,r2,128
  8159cc:	103ff21e 	bne	r2,zero,815998 <__alt_mem_onchip_mem+0xff80d998>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8159d0:	01001904 	movi	r4,100
  8159d4:	08179880 	call	817988 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8159d8:	e0bffd17 	ldw	r2,-12(fp)
  8159dc:	10800204 	addi	r2,r2,8
  8159e0:	1007883a 	mov	r3,r2
  8159e4:	e0bfff03 	ldbu	r2,-4(fp)
  8159e8:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8159ec:	e0bffe17 	ldw	r2,-8(fp)
  8159f0:	108008c3 	ldbu	r2,35(r2)
  8159f4:	10800044 	addi	r2,r2,1
  8159f8:	1007883a 	mov	r3,r2
  8159fc:	e0bffe17 	ldw	r2,-8(fp)
  815a00:	10c008c5 	stb	r3,35(r2)
  815a04:	00000106 	br	815a0c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  815a08:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  815a0c:	e037883a 	mov	sp,fp
  815a10:	dfc00117 	ldw	ra,4(sp)
  815a14:	df000017 	ldw	fp,0(sp)
  815a18:	dec00204 	addi	sp,sp,8
  815a1c:	f800283a 	ret

00815a20 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  815a20:	defffc04 	addi	sp,sp,-16
  815a24:	dfc00315 	stw	ra,12(sp)
  815a28:	df000215 	stw	fp,8(sp)
  815a2c:	df000204 	addi	fp,sp,8
  815a30:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  815a34:	01400044 	movi	r5,1
  815a38:	e13fff17 	ldw	r4,-4(fp)
  815a3c:	08158900 	call	815890 <lcd_write_command>

  sp->x = 0;
  815a40:	e0bfff17 	ldw	r2,-4(fp)
  815a44:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  815a48:	e0bfff17 	ldw	r2,-4(fp)
  815a4c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  815a50:	e0bfff17 	ldw	r2,-4(fp)
  815a54:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815a58:	e03ffe15 	stw	zero,-8(fp)
  815a5c:	00001b06 	br	815acc <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  815a60:	e0bffe17 	ldw	r2,-8(fp)
  815a64:	108018e4 	muli	r2,r2,99
  815a68:	10801004 	addi	r2,r2,64
  815a6c:	e0ffff17 	ldw	r3,-4(fp)
  815a70:	1885883a 	add	r2,r3,r2
  815a74:	01801444 	movi	r6,81
  815a78:	01400804 	movi	r5,32
  815a7c:	1009883a 	mov	r4,r2
  815a80:	080e3680 	call	80e368 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  815a84:	e0bffe17 	ldw	r2,-8(fp)
  815a88:	108018e4 	muli	r2,r2,99
  815a8c:	10800c04 	addi	r2,r2,48
  815a90:	e0ffff17 	ldw	r3,-4(fp)
  815a94:	1885883a 	add	r2,r3,r2
  815a98:	01800404 	movi	r6,16
  815a9c:	01400804 	movi	r5,32
  815aa0:	1009883a 	mov	r4,r2
  815aa4:	080e3680 	call	80e368 <memset>
    sp->line[y].width = 0;
  815aa8:	e0ffff17 	ldw	r3,-4(fp)
  815aac:	e0bffe17 	ldw	r2,-8(fp)
  815ab0:	108018e4 	muli	r2,r2,99
  815ab4:	1885883a 	add	r2,r3,r2
  815ab8:	10802444 	addi	r2,r2,145
  815abc:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815ac0:	e0bffe17 	ldw	r2,-8(fp)
  815ac4:	10800044 	addi	r2,r2,1
  815ac8:	e0bffe15 	stw	r2,-8(fp)
  815acc:	e0bffe17 	ldw	r2,-8(fp)
  815ad0:	10800090 	cmplti	r2,r2,2
  815ad4:	103fe21e 	bne	r2,zero,815a60 <__alt_mem_onchip_mem+0xff80da60>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  815ad8:	0001883a 	nop
  815adc:	e037883a 	mov	sp,fp
  815ae0:	dfc00117 	ldw	ra,4(sp)
  815ae4:	df000017 	ldw	fp,0(sp)
  815ae8:	dec00204 	addi	sp,sp,8
  815aec:	f800283a 	ret

00815af0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  815af0:	defff704 	addi	sp,sp,-36
  815af4:	dfc00815 	stw	ra,32(sp)
  815af8:	df000715 	stw	fp,28(sp)
  815afc:	df000704 	addi	fp,sp,28
  815b00:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  815b04:	e0bfff17 	ldw	r2,-4(fp)
  815b08:	10800943 	ldbu	r2,37(r2)
  815b0c:	10803fcc 	andi	r2,r2,255
  815b10:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815b14:	e03ff915 	stw	zero,-28(fp)
  815b18:	00006706 	br	815cb8 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  815b1c:	e0ffff17 	ldw	r3,-4(fp)
  815b20:	e0bff917 	ldw	r2,-28(fp)
  815b24:	108018e4 	muli	r2,r2,99
  815b28:	1885883a 	add	r2,r3,r2
  815b2c:	10802444 	addi	r2,r2,145
  815b30:	10800003 	ldbu	r2,0(r2)
  815b34:	10803fcc 	andi	r2,r2,255
  815b38:	1080201c 	xori	r2,r2,128
  815b3c:	10bfe004 	addi	r2,r2,-128
  815b40:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  815b44:	e0ffff17 	ldw	r3,-4(fp)
  815b48:	e0bff917 	ldw	r2,-28(fp)
  815b4c:	108018e4 	muli	r2,r2,99
  815b50:	1885883a 	add	r2,r3,r2
  815b54:	10802484 	addi	r2,r2,146
  815b58:	10800003 	ldbu	r2,0(r2)
  815b5c:	10c03fcc 	andi	r3,r2,255
  815b60:	e0bffc17 	ldw	r2,-16(fp)
  815b64:	1885383a 	mul	r2,r3,r2
  815b68:	1005d23a 	srai	r2,r2,8
  815b6c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  815b70:	e0fffb17 	ldw	r3,-20(fp)
  815b74:	e0bffd17 	ldw	r2,-12(fp)
  815b78:	18800116 	blt	r3,r2,815b80 <lcd_repaint_screen+0x90>
      offset = 0;
  815b7c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  815b80:	e03ffa15 	stw	zero,-24(fp)
  815b84:	00004606 	br	815ca0 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  815b88:	e0fffa17 	ldw	r3,-24(fp)
  815b8c:	e0bffb17 	ldw	r2,-20(fp)
  815b90:	1885883a 	add	r2,r3,r2
  815b94:	e17ffd17 	ldw	r5,-12(fp)
  815b98:	1009883a 	mov	r4,r2
  815b9c:	0812e300 	call	812e30 <__modsi3>
  815ba0:	1009883a 	mov	r4,r2
  815ba4:	e0ffff17 	ldw	r3,-4(fp)
  815ba8:	e0bff917 	ldw	r2,-28(fp)
  815bac:	108018e4 	muli	r2,r2,99
  815bb0:	1885883a 	add	r2,r3,r2
  815bb4:	1105883a 	add	r2,r2,r4
  815bb8:	10801004 	addi	r2,r2,64
  815bbc:	10800003 	ldbu	r2,0(r2)
  815bc0:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  815bc4:	e0ffff17 	ldw	r3,-4(fp)
  815bc8:	e0bff917 	ldw	r2,-28(fp)
  815bcc:	108018e4 	muli	r2,r2,99
  815bd0:	1887883a 	add	r3,r3,r2
  815bd4:	e0bffa17 	ldw	r2,-24(fp)
  815bd8:	1885883a 	add	r2,r3,r2
  815bdc:	10800c04 	addi	r2,r2,48
  815be0:	10800003 	ldbu	r2,0(r2)
  815be4:	10c03fcc 	andi	r3,r2,255
  815be8:	18c0201c 	xori	r3,r3,128
  815bec:	18ffe004 	addi	r3,r3,-128
  815bf0:	e0bffe07 	ldb	r2,-8(fp)
  815bf4:	18802726 	beq	r3,r2,815c94 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  815bf8:	e0fff917 	ldw	r3,-28(fp)
  815bfc:	d0a01004 	addi	r2,gp,-32704
  815c00:	1885883a 	add	r2,r3,r2
  815c04:	10800003 	ldbu	r2,0(r2)
  815c08:	1007883a 	mov	r3,r2
  815c0c:	e0bffa17 	ldw	r2,-24(fp)
  815c10:	1885883a 	add	r2,r3,r2
  815c14:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  815c18:	e0fffe43 	ldbu	r3,-7(fp)
  815c1c:	e0bfff17 	ldw	r2,-4(fp)
  815c20:	108008c3 	ldbu	r2,35(r2)
  815c24:	10803fcc 	andi	r2,r2,255
  815c28:	1080201c 	xori	r2,r2,128
  815c2c:	10bfe004 	addi	r2,r2,-128
  815c30:	18800a26 	beq	r3,r2,815c5c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  815c34:	e0fffe43 	ldbu	r3,-7(fp)
  815c38:	00bfe004 	movi	r2,-128
  815c3c:	1884b03a 	or	r2,r3,r2
  815c40:	10803fcc 	andi	r2,r2,255
  815c44:	100b883a 	mov	r5,r2
  815c48:	e13fff17 	ldw	r4,-4(fp)
  815c4c:	08158900 	call	815890 <lcd_write_command>
          sp->address = address;
  815c50:	e0fffe43 	ldbu	r3,-7(fp)
  815c54:	e0bfff17 	ldw	r2,-4(fp)
  815c58:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  815c5c:	e0bffe03 	ldbu	r2,-8(fp)
  815c60:	10803fcc 	andi	r2,r2,255
  815c64:	100b883a 	mov	r5,r2
  815c68:	e13fff17 	ldw	r4,-4(fp)
  815c6c:	08159480 	call	815948 <lcd_write_data>
        sp->line[y].visible[x] = c;
  815c70:	e0ffff17 	ldw	r3,-4(fp)
  815c74:	e0bff917 	ldw	r2,-28(fp)
  815c78:	108018e4 	muli	r2,r2,99
  815c7c:	1887883a 	add	r3,r3,r2
  815c80:	e0bffa17 	ldw	r2,-24(fp)
  815c84:	1885883a 	add	r2,r3,r2
  815c88:	10800c04 	addi	r2,r2,48
  815c8c:	e0fffe03 	ldbu	r3,-8(fp)
  815c90:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  815c94:	e0bffa17 	ldw	r2,-24(fp)
  815c98:	10800044 	addi	r2,r2,1
  815c9c:	e0bffa15 	stw	r2,-24(fp)
  815ca0:	e0bffa17 	ldw	r2,-24(fp)
  815ca4:	10800410 	cmplti	r2,r2,16
  815ca8:	103fb71e 	bne	r2,zero,815b88 <__alt_mem_onchip_mem+0xff80db88>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815cac:	e0bff917 	ldw	r2,-28(fp)
  815cb0:	10800044 	addi	r2,r2,1
  815cb4:	e0bff915 	stw	r2,-28(fp)
  815cb8:	e0bff917 	ldw	r2,-28(fp)
  815cbc:	10800090 	cmplti	r2,r2,2
  815cc0:	103f961e 	bne	r2,zero,815b1c <__alt_mem_onchip_mem+0xff80db1c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  815cc4:	0001883a 	nop
  815cc8:	e037883a 	mov	sp,fp
  815ccc:	dfc00117 	ldw	ra,4(sp)
  815cd0:	df000017 	ldw	fp,0(sp)
  815cd4:	dec00204 	addi	sp,sp,8
  815cd8:	f800283a 	ret

00815cdc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  815cdc:	defffc04 	addi	sp,sp,-16
  815ce0:	dfc00315 	stw	ra,12(sp)
  815ce4:	df000215 	stw	fp,8(sp)
  815ce8:	df000204 	addi	fp,sp,8
  815cec:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815cf0:	e03ffe15 	stw	zero,-8(fp)
  815cf4:	00001d06 	br	815d6c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  815cf8:	e0bffe17 	ldw	r2,-8(fp)
  815cfc:	00800f16 	blt	zero,r2,815d3c <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  815d00:	e0bffe17 	ldw	r2,-8(fp)
  815d04:	108018e4 	muli	r2,r2,99
  815d08:	10801004 	addi	r2,r2,64
  815d0c:	e0ffff17 	ldw	r3,-4(fp)
  815d10:	1889883a 	add	r4,r3,r2
  815d14:	e0bffe17 	ldw	r2,-8(fp)
  815d18:	10800044 	addi	r2,r2,1
  815d1c:	108018e4 	muli	r2,r2,99
  815d20:	10801004 	addi	r2,r2,64
  815d24:	e0ffff17 	ldw	r3,-4(fp)
  815d28:	1885883a 	add	r2,r3,r2
  815d2c:	01801404 	movi	r6,80
  815d30:	100b883a 	mov	r5,r2
  815d34:	080e2200 	call	80e220 <memcpy>
  815d38:	00000906 	br	815d60 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  815d3c:	e0bffe17 	ldw	r2,-8(fp)
  815d40:	108018e4 	muli	r2,r2,99
  815d44:	10801004 	addi	r2,r2,64
  815d48:	e0ffff17 	ldw	r3,-4(fp)
  815d4c:	1885883a 	add	r2,r3,r2
  815d50:	01801404 	movi	r6,80
  815d54:	01400804 	movi	r5,32
  815d58:	1009883a 	mov	r4,r2
  815d5c:	080e3680 	call	80e368 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815d60:	e0bffe17 	ldw	r2,-8(fp)
  815d64:	10800044 	addi	r2,r2,1
  815d68:	e0bffe15 	stw	r2,-8(fp)
  815d6c:	e0bffe17 	ldw	r2,-8(fp)
  815d70:	10800090 	cmplti	r2,r2,2
  815d74:	103fe01e 	bne	r2,zero,815cf8 <__alt_mem_onchip_mem+0xff80dcf8>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  815d78:	e0bfff17 	ldw	r2,-4(fp)
  815d7c:	10800883 	ldbu	r2,34(r2)
  815d80:	10bfffc4 	addi	r2,r2,-1
  815d84:	1007883a 	mov	r3,r2
  815d88:	e0bfff17 	ldw	r2,-4(fp)
  815d8c:	10c00885 	stb	r3,34(r2)
}
  815d90:	0001883a 	nop
  815d94:	e037883a 	mov	sp,fp
  815d98:	dfc00117 	ldw	ra,4(sp)
  815d9c:	df000017 	ldw	fp,0(sp)
  815da0:	dec00204 	addi	sp,sp,8
  815da4:	f800283a 	ret

00815da8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  815da8:	defff904 	addi	sp,sp,-28
  815dac:	dfc00615 	stw	ra,24(sp)
  815db0:	df000515 	stw	fp,20(sp)
  815db4:	df000504 	addi	fp,sp,20
  815db8:	e13ffe15 	stw	r4,-8(fp)
  815dbc:	2805883a 	mov	r2,r5
  815dc0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  815dc4:	e03ffb15 	stw	zero,-20(fp)
  815dc8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  815dcc:	e0bffe17 	ldw	r2,-8(fp)
  815dd0:	10800a03 	ldbu	r2,40(r2)
  815dd4:	10803fcc 	andi	r2,r2,255
  815dd8:	1080201c 	xori	r2,r2,128
  815ddc:	10bfe004 	addi	r2,r2,-128
  815de0:	108016d8 	cmpnei	r2,r2,91
  815de4:	1000411e 	bne	r2,zero,815eec <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  815de8:	e0bffe17 	ldw	r2,-8(fp)
  815dec:	10800a04 	addi	r2,r2,40
  815df0:	10800044 	addi	r2,r2,1
  815df4:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  815df8:	00000c06 	br	815e2c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  815dfc:	e0bffb17 	ldw	r2,-20(fp)
  815e00:	10c002a4 	muli	r3,r2,10
  815e04:	e0bffd17 	ldw	r2,-12(fp)
  815e08:	11000044 	addi	r4,r2,1
  815e0c:	e13ffd15 	stw	r4,-12(fp)
  815e10:	10800003 	ldbu	r2,0(r2)
  815e14:	10803fcc 	andi	r2,r2,255
  815e18:	1080201c 	xori	r2,r2,128
  815e1c:	10bfe004 	addi	r2,r2,-128
  815e20:	10bff404 	addi	r2,r2,-48
  815e24:	1885883a 	add	r2,r3,r2
  815e28:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  815e2c:	d0e01217 	ldw	r3,-32696(gp)
  815e30:	e0bffd17 	ldw	r2,-12(fp)
  815e34:	10800003 	ldbu	r2,0(r2)
  815e38:	10803fcc 	andi	r2,r2,255
  815e3c:	1080201c 	xori	r2,r2,128
  815e40:	10bfe004 	addi	r2,r2,-128
  815e44:	10800044 	addi	r2,r2,1
  815e48:	1885883a 	add	r2,r3,r2
  815e4c:	10800003 	ldbu	r2,0(r2)
  815e50:	10803fcc 	andi	r2,r2,255
  815e54:	1080010c 	andi	r2,r2,4
  815e58:	103fe81e 	bne	r2,zero,815dfc <__alt_mem_onchip_mem+0xff80ddfc>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  815e5c:	e0bffd17 	ldw	r2,-12(fp)
  815e60:	10800003 	ldbu	r2,0(r2)
  815e64:	10803fcc 	andi	r2,r2,255
  815e68:	1080201c 	xori	r2,r2,128
  815e6c:	10bfe004 	addi	r2,r2,-128
  815e70:	10800ed8 	cmpnei	r2,r2,59
  815e74:	10001f1e 	bne	r2,zero,815ef4 <lcd_handle_escape+0x14c>
    {
      ptr++;
  815e78:	e0bffd17 	ldw	r2,-12(fp)
  815e7c:	10800044 	addi	r2,r2,1
  815e80:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  815e84:	00000c06 	br	815eb8 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  815e88:	e0bffc17 	ldw	r2,-16(fp)
  815e8c:	10c002a4 	muli	r3,r2,10
  815e90:	e0bffd17 	ldw	r2,-12(fp)
  815e94:	11000044 	addi	r4,r2,1
  815e98:	e13ffd15 	stw	r4,-12(fp)
  815e9c:	10800003 	ldbu	r2,0(r2)
  815ea0:	10803fcc 	andi	r2,r2,255
  815ea4:	1080201c 	xori	r2,r2,128
  815ea8:	10bfe004 	addi	r2,r2,-128
  815eac:	10bff404 	addi	r2,r2,-48
  815eb0:	1885883a 	add	r2,r3,r2
  815eb4:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  815eb8:	d0e01217 	ldw	r3,-32696(gp)
  815ebc:	e0bffd17 	ldw	r2,-12(fp)
  815ec0:	10800003 	ldbu	r2,0(r2)
  815ec4:	10803fcc 	andi	r2,r2,255
  815ec8:	1080201c 	xori	r2,r2,128
  815ecc:	10bfe004 	addi	r2,r2,-128
  815ed0:	10800044 	addi	r2,r2,1
  815ed4:	1885883a 	add	r2,r3,r2
  815ed8:	10800003 	ldbu	r2,0(r2)
  815edc:	10803fcc 	andi	r2,r2,255
  815ee0:	1080010c 	andi	r2,r2,4
  815ee4:	103fe81e 	bne	r2,zero,815e88 <__alt_mem_onchip_mem+0xff80de88>
  815ee8:	00000206 	br	815ef4 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  815eec:	00bfffc4 	movi	r2,-1
  815ef0:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  815ef4:	e0bfff07 	ldb	r2,-4(fp)
  815ef8:	10c012a0 	cmpeqi	r3,r2,74
  815efc:	1800291e 	bne	r3,zero,815fa4 <lcd_handle_escape+0x1fc>
  815f00:	10c012c8 	cmpgei	r3,r2,75
  815f04:	1800031e 	bne	r3,zero,815f14 <lcd_handle_escape+0x16c>
  815f08:	10801220 	cmpeqi	r2,r2,72
  815f0c:	1000061e 	bne	r2,zero,815f28 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  815f10:	00004a06 	br	81603c <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  815f14:	10c012e0 	cmpeqi	r3,r2,75
  815f18:	1800281e 	bne	r3,zero,815fbc <lcd_handle_escape+0x214>
  815f1c:	108019a0 	cmpeqi	r2,r2,102
  815f20:	1000011e 	bne	r2,zero,815f28 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  815f24:	00004506 	br	81603c <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  815f28:	e0bffc17 	ldw	r2,-16(fp)
  815f2c:	0080050e 	bge	zero,r2,815f44 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  815f30:	e0bffc17 	ldw	r2,-16(fp)
  815f34:	10bfffc4 	addi	r2,r2,-1
  815f38:	1007883a 	mov	r3,r2
  815f3c:	e0bffe17 	ldw	r2,-8(fp)
  815f40:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  815f44:	e0bffb17 	ldw	r2,-20(fp)
  815f48:	0080370e 	bge	zero,r2,816028 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  815f4c:	e0bffb17 	ldw	r2,-20(fp)
  815f50:	10bfffc4 	addi	r2,r2,-1
  815f54:	1007883a 	mov	r3,r2
  815f58:	e0bffe17 	ldw	r2,-8(fp)
  815f5c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  815f60:	e0bffe17 	ldw	r2,-8(fp)
  815f64:	10800883 	ldbu	r2,34(r2)
  815f68:	10803fcc 	andi	r2,r2,255
  815f6c:	10800170 	cmpltui	r2,r2,5
  815f70:	1000061e 	bne	r2,zero,815f8c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  815f74:	e0bffe17 	ldw	r2,-8(fp)
  815f78:	00c00104 	movi	r3,4
  815f7c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  815f80:	00000206 	br	815f8c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  815f84:	e13ffe17 	ldw	r4,-8(fp)
  815f88:	0815cdc0 	call	815cdc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  815f8c:	e0bffe17 	ldw	r2,-8(fp)
  815f90:	10800883 	ldbu	r2,34(r2)
  815f94:	10803fcc 	andi	r2,r2,255
  815f98:	108000e8 	cmpgeui	r2,r2,3
  815f9c:	103ff91e 	bne	r2,zero,815f84 <__alt_mem_onchip_mem+0xff80df84>
        lcd_scroll_up(sp);
    }
    break;
  815fa0:	00002106 	br	816028 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  815fa4:	e0bffb17 	ldw	r2,-20(fp)
  815fa8:	10800098 	cmpnei	r2,r2,2
  815fac:	1000201e 	bne	r2,zero,816030 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  815fb0:	e13ffe17 	ldw	r4,-8(fp)
  815fb4:	0815a200 	call	815a20 <lcd_clear_screen>
    break;
  815fb8:	00001d06 	br	816030 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  815fbc:	e0bffb17 	ldw	r2,-20(fp)
  815fc0:	00801d16 	blt	zero,r2,816038 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  815fc4:	e0bffe17 	ldw	r2,-8(fp)
  815fc8:	10800843 	ldbu	r2,33(r2)
  815fcc:	10803fcc 	andi	r2,r2,255
  815fd0:	10801428 	cmpgeui	r2,r2,80
  815fd4:	1000181e 	bne	r2,zero,816038 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  815fd8:	e0bffe17 	ldw	r2,-8(fp)
  815fdc:	10800883 	ldbu	r2,34(r2)
  815fe0:	10803fcc 	andi	r2,r2,255
  815fe4:	108018e4 	muli	r2,r2,99
  815fe8:	10801004 	addi	r2,r2,64
  815fec:	e0fffe17 	ldw	r3,-8(fp)
  815ff0:	1887883a 	add	r3,r3,r2
  815ff4:	e0bffe17 	ldw	r2,-8(fp)
  815ff8:	10800843 	ldbu	r2,33(r2)
  815ffc:	10803fcc 	andi	r2,r2,255
  816000:	1889883a 	add	r4,r3,r2
  816004:	e0bffe17 	ldw	r2,-8(fp)
  816008:	10800843 	ldbu	r2,33(r2)
  81600c:	10803fcc 	andi	r2,r2,255
  816010:	00c01404 	movi	r3,80
  816014:	1885c83a 	sub	r2,r3,r2
  816018:	100d883a 	mov	r6,r2
  81601c:	01400804 	movi	r5,32
  816020:	080e3680 	call	80e368 <memset>
    }
    break;
  816024:	00000406 	br	816038 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  816028:	0001883a 	nop
  81602c:	00000306 	br	81603c <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  816030:	0001883a 	nop
  816034:	00000106 	br	81603c <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  816038:	0001883a 	nop
  }
}
  81603c:	0001883a 	nop
  816040:	e037883a 	mov	sp,fp
  816044:	dfc00117 	ldw	ra,4(sp)
  816048:	df000017 	ldw	fp,0(sp)
  81604c:	dec00204 	addi	sp,sp,8
  816050:	f800283a 	ret

00816054 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  816054:	defff304 	addi	sp,sp,-52
  816058:	dfc00c15 	stw	ra,48(sp)
  81605c:	df000b15 	stw	fp,44(sp)
  816060:	df000b04 	addi	fp,sp,44
  816064:	e13ffc15 	stw	r4,-16(fp)
  816068:	e17ffd15 	stw	r5,-12(fp)
  81606c:	e1bffe15 	stw	r6,-8(fp)
  816070:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  816074:	e0bffe17 	ldw	r2,-8(fp)
  816078:	e0fffd17 	ldw	r3,-12(fp)
  81607c:	1885883a 	add	r2,r3,r2
  816080:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  816084:	e0bffc17 	ldw	r2,-16(fp)
  816088:	00c00044 	movi	r3,1
  81608c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  816090:	00009906 	br	8162f8 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  816094:	e0bffd17 	ldw	r2,-12(fp)
  816098:	10800003 	ldbu	r2,0(r2)
  81609c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8160a0:	e0bffc17 	ldw	r2,-16(fp)
  8160a4:	10800903 	ldbu	r2,36(r2)
  8160a8:	10803fcc 	andi	r2,r2,255
  8160ac:	1080201c 	xori	r2,r2,128
  8160b0:	10bfe004 	addi	r2,r2,-128
  8160b4:	10003716 	blt	r2,zero,816194 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8160b8:	e0bffc17 	ldw	r2,-16(fp)
  8160bc:	10800903 	ldbu	r2,36(r2)
  8160c0:	10803fcc 	andi	r2,r2,255
  8160c4:	1080201c 	xori	r2,r2,128
  8160c8:	10bfe004 	addi	r2,r2,-128
  8160cc:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8160d0:	e0bffa17 	ldw	r2,-24(fp)
  8160d4:	1000031e 	bne	r2,zero,8160e4 <altera_avalon_lcd_16207_write+0x90>
  8160d8:	e0bff907 	ldb	r2,-28(fp)
  8160dc:	108016d8 	cmpnei	r2,r2,91
  8160e0:	10000d1e 	bne	r2,zero,816118 <altera_avalon_lcd_16207_write+0xc4>
  8160e4:	e0bffa17 	ldw	r2,-24(fp)
  8160e8:	10001826 	beq	r2,zero,81614c <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8160ec:	d0e01217 	ldw	r3,-32696(gp)
  8160f0:	e0bff907 	ldb	r2,-28(fp)
  8160f4:	10800044 	addi	r2,r2,1
  8160f8:	1885883a 	add	r2,r3,r2
  8160fc:	10800003 	ldbu	r2,0(r2)
  816100:	10803fcc 	andi	r2,r2,255
  816104:	1080010c 	andi	r2,r2,4
  816108:	1000101e 	bne	r2,zero,81614c <altera_avalon_lcd_16207_write+0xf8>
  81610c:	e0bff907 	ldb	r2,-28(fp)
  816110:	10800ee0 	cmpeqi	r2,r2,59
  816114:	10000d1e 	bne	r2,zero,81614c <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  816118:	e0fffc17 	ldw	r3,-16(fp)
  81611c:	e0bffa17 	ldw	r2,-24(fp)
  816120:	1885883a 	add	r2,r3,r2
  816124:	10800a04 	addi	r2,r2,40
  816128:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  81612c:	e0bff907 	ldb	r2,-28(fp)
  816130:	100b883a 	mov	r5,r2
  816134:	e13ffc17 	ldw	r4,-16(fp)
  816138:	0815da80 	call	815da8 <lcd_handle_escape>

        sp->esccount = -1;
  81613c:	e0bffc17 	ldw	r2,-16(fp)
  816140:	00ffffc4 	movi	r3,-1
  816144:	10c00905 	stb	r3,36(r2)
  816148:	00006806 	br	8162ec <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  81614c:	e0bffc17 	ldw	r2,-16(fp)
  816150:	10800903 	ldbu	r2,36(r2)
  816154:	10803fcc 	andi	r2,r2,255
  816158:	108001e8 	cmpgeui	r2,r2,7
  81615c:	1000631e 	bne	r2,zero,8162ec <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  816160:	e0fffc17 	ldw	r3,-16(fp)
  816164:	e0bffa17 	ldw	r2,-24(fp)
  816168:	1885883a 	add	r2,r3,r2
  81616c:	10800a04 	addi	r2,r2,40
  816170:	e0fff903 	ldbu	r3,-28(fp)
  816174:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  816178:	e0bffc17 	ldw	r2,-16(fp)
  81617c:	10800903 	ldbu	r2,36(r2)
  816180:	10800044 	addi	r2,r2,1
  816184:	1007883a 	mov	r3,r2
  816188:	e0bffc17 	ldw	r2,-16(fp)
  81618c:	10c00905 	stb	r3,36(r2)
  816190:	00005606 	br	8162ec <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  816194:	e0bff907 	ldb	r2,-28(fp)
  816198:	108006d8 	cmpnei	r2,r2,27
  81619c:	1000031e 	bne	r2,zero,8161ac <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  8161a0:	e0bffc17 	ldw	r2,-16(fp)
  8161a4:	10000905 	stb	zero,36(r2)
  8161a8:	00005006 	br	8162ec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  8161ac:	e0bff907 	ldb	r2,-28(fp)
  8161b0:	10800358 	cmpnei	r2,r2,13
  8161b4:	1000031e 	bne	r2,zero,8161c4 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8161b8:	e0bffc17 	ldw	r2,-16(fp)
  8161bc:	10000845 	stb	zero,33(r2)
  8161c0:	00004a06 	br	8162ec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8161c4:	e0bff907 	ldb	r2,-28(fp)
  8161c8:	10800298 	cmpnei	r2,r2,10
  8161cc:	1000101e 	bne	r2,zero,816210 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8161d0:	e0bffc17 	ldw	r2,-16(fp)
  8161d4:	10000845 	stb	zero,33(r2)
      sp->y++;
  8161d8:	e0bffc17 	ldw	r2,-16(fp)
  8161dc:	10800883 	ldbu	r2,34(r2)
  8161e0:	10800044 	addi	r2,r2,1
  8161e4:	1007883a 	mov	r3,r2
  8161e8:	e0bffc17 	ldw	r2,-16(fp)
  8161ec:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8161f0:	e0bffc17 	ldw	r2,-16(fp)
  8161f4:	10800883 	ldbu	r2,34(r2)
  8161f8:	10803fcc 	andi	r2,r2,255
  8161fc:	108000f0 	cmpltui	r2,r2,3
  816200:	10003a1e 	bne	r2,zero,8162ec <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  816204:	e13ffc17 	ldw	r4,-16(fp)
  816208:	0815cdc0 	call	815cdc <lcd_scroll_up>
  81620c:	00003706 	br	8162ec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  816210:	e0bff907 	ldb	r2,-28(fp)
  816214:	10800218 	cmpnei	r2,r2,8
  816218:	10000b1e 	bne	r2,zero,816248 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  81621c:	e0bffc17 	ldw	r2,-16(fp)
  816220:	10800843 	ldbu	r2,33(r2)
  816224:	10803fcc 	andi	r2,r2,255
  816228:	10003026 	beq	r2,zero,8162ec <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  81622c:	e0bffc17 	ldw	r2,-16(fp)
  816230:	10800843 	ldbu	r2,33(r2)
  816234:	10bfffc4 	addi	r2,r2,-1
  816238:	1007883a 	mov	r3,r2
  81623c:	e0bffc17 	ldw	r2,-16(fp)
  816240:	10c00845 	stb	r3,33(r2)
  816244:	00002906 	br	8162ec <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  816248:	d0e01217 	ldw	r3,-32696(gp)
  81624c:	e0bff907 	ldb	r2,-28(fp)
  816250:	10800044 	addi	r2,r2,1
  816254:	1885883a 	add	r2,r3,r2
  816258:	10800003 	ldbu	r2,0(r2)
  81625c:	10803fcc 	andi	r2,r2,255
  816260:	1080201c 	xori	r2,r2,128
  816264:	10bfe004 	addi	r2,r2,-128
  816268:	108025cc 	andi	r2,r2,151
  81626c:	10001f26 	beq	r2,zero,8162ec <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  816270:	e0bffc17 	ldw	r2,-16(fp)
  816274:	10800883 	ldbu	r2,34(r2)
  816278:	10803fcc 	andi	r2,r2,255
  81627c:	108000b0 	cmpltui	r2,r2,2
  816280:	1000021e 	bne	r2,zero,81628c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  816284:	e13ffc17 	ldw	r4,-16(fp)
  816288:	0815cdc0 	call	815cdc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81628c:	e0bffc17 	ldw	r2,-16(fp)
  816290:	10800843 	ldbu	r2,33(r2)
  816294:	10803fcc 	andi	r2,r2,255
  816298:	10801428 	cmpgeui	r2,r2,80
  81629c:	10000d1e 	bne	r2,zero,8162d4 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  8162a0:	e0bffc17 	ldw	r2,-16(fp)
  8162a4:	10800883 	ldbu	r2,34(r2)
  8162a8:	10c03fcc 	andi	r3,r2,255
  8162ac:	e0bffc17 	ldw	r2,-16(fp)
  8162b0:	10800843 	ldbu	r2,33(r2)
  8162b4:	10803fcc 	andi	r2,r2,255
  8162b8:	e13ffc17 	ldw	r4,-16(fp)
  8162bc:	18c018e4 	muli	r3,r3,99
  8162c0:	20c7883a 	add	r3,r4,r3
  8162c4:	1885883a 	add	r2,r3,r2
  8162c8:	10801004 	addi	r2,r2,64
  8162cc:	e0fff903 	ldbu	r3,-28(fp)
  8162d0:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8162d4:	e0bffc17 	ldw	r2,-16(fp)
  8162d8:	10800843 	ldbu	r2,33(r2)
  8162dc:	10800044 	addi	r2,r2,1
  8162e0:	1007883a 	mov	r3,r2
  8162e4:	e0bffc17 	ldw	r2,-16(fp)
  8162e8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8162ec:	e0bffd17 	ldw	r2,-12(fp)
  8162f0:	10800044 	addi	r2,r2,1
  8162f4:	e0bffd15 	stw	r2,-12(fp)
  8162f8:	e0fffd17 	ldw	r3,-12(fp)
  8162fc:	e0bff817 	ldw	r2,-32(fp)
  816300:	18bf6436 	bltu	r3,r2,816094 <__alt_mem_onchip_mem+0xff80e094>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  816304:	00800404 	movi	r2,16
  816308:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81630c:	e03ff515 	stw	zero,-44(fp)
  816310:	00003706 	br	8163f0 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  816314:	00801404 	movi	r2,80
  816318:	e0bff715 	stw	r2,-36(fp)
  81631c:	00001106 	br	816364 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  816320:	e0bff717 	ldw	r2,-36(fp)
  816324:	10bfffc4 	addi	r2,r2,-1
  816328:	e13ffc17 	ldw	r4,-16(fp)
  81632c:	e0fff517 	ldw	r3,-44(fp)
  816330:	18c018e4 	muli	r3,r3,99
  816334:	20c7883a 	add	r3,r4,r3
  816338:	1885883a 	add	r2,r3,r2
  81633c:	10801004 	addi	r2,r2,64
  816340:	10800003 	ldbu	r2,0(r2)
  816344:	10803fcc 	andi	r2,r2,255
  816348:	1080201c 	xori	r2,r2,128
  81634c:	10bfe004 	addi	r2,r2,-128
  816350:	10800820 	cmpeqi	r2,r2,32
  816354:	10000626 	beq	r2,zero,816370 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  816358:	e0bff717 	ldw	r2,-36(fp)
  81635c:	10bfffc4 	addi	r2,r2,-1
  816360:	e0bff715 	stw	r2,-36(fp)
  816364:	e0bff717 	ldw	r2,-36(fp)
  816368:	00bfed16 	blt	zero,r2,816320 <__alt_mem_onchip_mem+0xff80e320>
  81636c:	00000106 	br	816374 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  816370:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  816374:	e0bff717 	ldw	r2,-36(fp)
  816378:	10800448 	cmpgei	r2,r2,17
  81637c:	1000031e 	bne	r2,zero,81638c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  816380:	00800404 	movi	r2,16
  816384:	e0bff715 	stw	r2,-36(fp)
  816388:	00000306 	br	816398 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  81638c:	e0bff717 	ldw	r2,-36(fp)
  816390:	10800044 	addi	r2,r2,1
  816394:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  816398:	e0bff717 	ldw	r2,-36(fp)
  81639c:	1009883a 	mov	r4,r2
  8163a0:	e0fffc17 	ldw	r3,-16(fp)
  8163a4:	e0bff517 	ldw	r2,-44(fp)
  8163a8:	108018e4 	muli	r2,r2,99
  8163ac:	1885883a 	add	r2,r3,r2
  8163b0:	10802444 	addi	r2,r2,145
  8163b4:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8163b8:	e0fff617 	ldw	r3,-40(fp)
  8163bc:	e0bff717 	ldw	r2,-36(fp)
  8163c0:	1880020e 	bge	r3,r2,8163cc <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8163c4:	e0bff717 	ldw	r2,-36(fp)
  8163c8:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8163cc:	e0fffc17 	ldw	r3,-16(fp)
  8163d0:	e0bff517 	ldw	r2,-44(fp)
  8163d4:	108018e4 	muli	r2,r2,99
  8163d8:	1885883a 	add	r2,r3,r2
  8163dc:	10802484 	addi	r2,r2,146
  8163e0:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8163e4:	e0bff517 	ldw	r2,-44(fp)
  8163e8:	10800044 	addi	r2,r2,1
  8163ec:	e0bff515 	stw	r2,-44(fp)
  8163f0:	e0bff517 	ldw	r2,-44(fp)
  8163f4:	10800090 	cmplti	r2,r2,2
  8163f8:	103fc61e 	bne	r2,zero,816314 <__alt_mem_onchip_mem+0xff80e314>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8163fc:	e0bff617 	ldw	r2,-40(fp)
  816400:	10800448 	cmpgei	r2,r2,17
  816404:	1000031e 	bne	r2,zero,816414 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  816408:	e0bffc17 	ldw	r2,-16(fp)
  81640c:	10000985 	stb	zero,38(r2)
  816410:	00002e06 	br	8164cc <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  816414:	e0bff617 	ldw	r2,-40(fp)
  816418:	1085883a 	add	r2,r2,r2
  81641c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  816420:	e0bff617 	ldw	r2,-40(fp)
  816424:	1007883a 	mov	r3,r2
  816428:	e0bffc17 	ldw	r2,-16(fp)
  81642c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816430:	e03ff515 	stw	zero,-44(fp)
  816434:	00002206 	br	8164c0 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  816438:	e0fffc17 	ldw	r3,-16(fp)
  81643c:	e0bff517 	ldw	r2,-44(fp)
  816440:	108018e4 	muli	r2,r2,99
  816444:	1885883a 	add	r2,r3,r2
  816448:	10802444 	addi	r2,r2,145
  81644c:	10800003 	ldbu	r2,0(r2)
  816450:	10803fcc 	andi	r2,r2,255
  816454:	1080201c 	xori	r2,r2,128
  816458:	10bfe004 	addi	r2,r2,-128
  81645c:	10800450 	cmplti	r2,r2,17
  816460:	1000141e 	bne	r2,zero,8164b4 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  816464:	e0fffc17 	ldw	r3,-16(fp)
  816468:	e0bff517 	ldw	r2,-44(fp)
  81646c:	108018e4 	muli	r2,r2,99
  816470:	1885883a 	add	r2,r3,r2
  816474:	10802444 	addi	r2,r2,145
  816478:	10800003 	ldbu	r2,0(r2)
  81647c:	10803fcc 	andi	r2,r2,255
  816480:	1080201c 	xori	r2,r2,128
  816484:	10bfe004 	addi	r2,r2,-128
  816488:	1004923a 	slli	r2,r2,8
  81648c:	e17ff617 	ldw	r5,-40(fp)
  816490:	1009883a 	mov	r4,r2
  816494:	0812dac0 	call	812dac <__divsi3>
  816498:	1009883a 	mov	r4,r2
  81649c:	e0fffc17 	ldw	r3,-16(fp)
  8164a0:	e0bff517 	ldw	r2,-44(fp)
  8164a4:	108018e4 	muli	r2,r2,99
  8164a8:	1885883a 	add	r2,r3,r2
  8164ac:	10802484 	addi	r2,r2,146
  8164b0:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8164b4:	e0bff517 	ldw	r2,-44(fp)
  8164b8:	10800044 	addi	r2,r2,1
  8164bc:	e0bff515 	stw	r2,-44(fp)
  8164c0:	e0bff517 	ldw	r2,-44(fp)
  8164c4:	10800090 	cmplti	r2,r2,2
  8164c8:	103fdb1e 	bne	r2,zero,816438 <__alt_mem_onchip_mem+0xff80e438>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8164cc:	e0bffc17 	ldw	r2,-16(fp)
  8164d0:	10800943 	ldbu	r2,37(r2)
  8164d4:	10803fcc 	andi	r2,r2,255
  8164d8:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8164dc:	e13ffc17 	ldw	r4,-16(fp)
  8164e0:	0815af00 	call	815af0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8164e4:	e0bffc17 	ldw	r2,-16(fp)
  8164e8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8164ec:	e0bffc17 	ldw	r2,-16(fp)
  8164f0:	10800943 	ldbu	r2,37(r2)
  8164f4:	10c03fcc 	andi	r3,r2,255
  8164f8:	e0bffb17 	ldw	r2,-20(fp)
  8164fc:	18800426 	beq	r3,r2,816510 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  816500:	e0bffc17 	ldw	r2,-16(fp)
  816504:	00c00044 	movi	r3,1
  816508:	10c009c5 	stb	r3,39(r2)
  }
  81650c:	003fef06 	br	8164cc <__alt_mem_onchip_mem+0xff80e4cc>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  816510:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  816514:	e0bffe17 	ldw	r2,-8(fp)
}
  816518:	e037883a 	mov	sp,fp
  81651c:	dfc00117 	ldw	ra,4(sp)
  816520:	df000017 	ldw	fp,0(sp)
  816524:	dec00204 	addi	sp,sp,8
  816528:	f800283a 	ret

0081652c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  81652c:	defffc04 	addi	sp,sp,-16
  816530:	dfc00315 	stw	ra,12(sp)
  816534:	df000215 	stw	fp,8(sp)
  816538:	df000204 	addi	fp,sp,8
  81653c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  816540:	e0bfff17 	ldw	r2,-4(fp)
  816544:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  816548:	e0bffe17 	ldw	r2,-8(fp)
  81654c:	10800943 	ldbu	r2,37(r2)
  816550:	10803fcc 	andi	r2,r2,255
  816554:	10c00044 	addi	r3,r2,1
  816558:	e0bffe17 	ldw	r2,-8(fp)
  81655c:	10800983 	ldbu	r2,38(r2)
  816560:	10803fcc 	andi	r2,r2,255
  816564:	18800316 	blt	r3,r2,816574 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  816568:	e0bffe17 	ldw	r2,-8(fp)
  81656c:	10000945 	stb	zero,37(r2)
  816570:	00000606 	br	81658c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  816574:	e0bffe17 	ldw	r2,-8(fp)
  816578:	10800943 	ldbu	r2,37(r2)
  81657c:	10800044 	addi	r2,r2,1
  816580:	1007883a 	mov	r3,r2
  816584:	e0bffe17 	ldw	r2,-8(fp)
  816588:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  81658c:	e0bffe17 	ldw	r2,-8(fp)
  816590:	10800983 	ldbu	r2,38(r2)
  816594:	10803fcc 	andi	r2,r2,255
  816598:	10000826 	beq	r2,zero,8165bc <alt_lcd_16207_timeout+0x90>
  81659c:	e0bffe17 	ldw	r2,-8(fp)
  8165a0:	108009c3 	ldbu	r2,39(r2)
  8165a4:	10803fcc 	andi	r2,r2,255
  8165a8:	1080201c 	xori	r2,r2,128
  8165ac:	10bfe004 	addi	r2,r2,-128
  8165b0:	1000021e 	bne	r2,zero,8165bc <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8165b4:	e13ffe17 	ldw	r4,-8(fp)
  8165b8:	0815af00 	call	815af0 <lcd_repaint_screen>

  return sp->period;
  8165bc:	e0bffe17 	ldw	r2,-8(fp)
  8165c0:	10800717 	ldw	r2,28(r2)
}
  8165c4:	e037883a 	mov	sp,fp
  8165c8:	dfc00117 	ldw	ra,4(sp)
  8165cc:	df000017 	ldw	fp,0(sp)
  8165d0:	dec00204 	addi	sp,sp,8
  8165d4:	f800283a 	ret

008165d8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8165d8:	defffc04 	addi	sp,sp,-16
  8165dc:	dfc00315 	stw	ra,12(sp)
  8165e0:	df000215 	stw	fp,8(sp)
  8165e4:	df000204 	addi	fp,sp,8
  8165e8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8165ec:	e0bfff17 	ldw	r2,-4(fp)
  8165f0:	10800017 	ldw	r2,0(r2)
  8165f4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8165f8:	e0bfff17 	ldw	r2,-4(fp)
  8165fc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  816600:	010ea604 	movi	r4,15000
  816604:	08179880 	call	817988 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  816608:	e0bffe17 	ldw	r2,-8(fp)
  81660c:	00c00c04 	movi	r3,48
  816610:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  816614:	01040104 	movi	r4,4100
  816618:	08179880 	call	817988 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81661c:	e0bffe17 	ldw	r2,-8(fp)
  816620:	00c00c04 	movi	r3,48
  816624:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  816628:	0100fa04 	movi	r4,1000
  81662c:	08179880 	call	817988 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  816630:	e0bffe17 	ldw	r2,-8(fp)
  816634:	00c00c04 	movi	r3,48
  816638:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  81663c:	01400e04 	movi	r5,56
  816640:	e13fff17 	ldw	r4,-4(fp)
  816644:	08158900 	call	815890 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  816648:	01400204 	movi	r5,8
  81664c:	e13fff17 	ldw	r4,-4(fp)
  816650:	08158900 	call	815890 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  816654:	e13fff17 	ldw	r4,-4(fp)
  816658:	0815a200 	call	815a20 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  81665c:	01400184 	movi	r5,6
  816660:	e13fff17 	ldw	r4,-4(fp)
  816664:	08158900 	call	815890 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  816668:	01400304 	movi	r5,12
  81666c:	e13fff17 	ldw	r4,-4(fp)
  816670:	08158900 	call	815890 <lcd_write_command>

  sp->esccount = -1;
  816674:	e0bfff17 	ldw	r2,-4(fp)
  816678:	00ffffc4 	movi	r3,-1
  81667c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  816680:	e0bfff17 	ldw	r2,-4(fp)
  816684:	10800a04 	addi	r2,r2,40
  816688:	01800204 	movi	r6,8
  81668c:	000b883a 	mov	r5,zero
  816690:	1009883a 	mov	r4,r2
  816694:	080e3680 	call	80e368 <memset>

  sp->scrollpos = 0;
  816698:	e0bfff17 	ldw	r2,-4(fp)
  81669c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8166a0:	e0bfff17 	ldw	r2,-4(fp)
  8166a4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8166a8:	e0bfff17 	ldw	r2,-4(fp)
  8166ac:	100009c5 	stb	zero,39(r2)
  8166b0:	d0a75617 	ldw	r2,-25256(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8166b4:	01400284 	movi	r5,10
  8166b8:	1009883a 	mov	r4,r2
  8166bc:	0812ea40 	call	812ea4 <__udivsi3>
  8166c0:	1007883a 	mov	r3,r2
  8166c4:	e0bfff17 	ldw	r2,-4(fp)
  8166c8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8166cc:	e0bfff17 	ldw	r2,-4(fp)
  8166d0:	10c00104 	addi	r3,r2,4
  8166d4:	e0bfff17 	ldw	r2,-4(fp)
  8166d8:	10800717 	ldw	r2,28(r2)
  8166dc:	e1ffff17 	ldw	r7,-4(fp)
  8166e0:	01802074 	movhi	r6,129
  8166e4:	31994b04 	addi	r6,r6,25900
  8166e8:	100b883a 	mov	r5,r2
  8166ec:	1809883a 	mov	r4,r3
  8166f0:	08141100 	call	814110 <alt_alarm_start>
}
  8166f4:	0001883a 	nop
  8166f8:	e037883a 	mov	sp,fp
  8166fc:	dfc00117 	ldw	ra,4(sp)
  816700:	df000017 	ldw	fp,0(sp)
  816704:	dec00204 	addi	sp,sp,8
  816708:	f800283a 	ret

0081670c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81670c:	defffa04 	addi	sp,sp,-24
  816710:	dfc00515 	stw	ra,20(sp)
  816714:	df000415 	stw	fp,16(sp)
  816718:	df000404 	addi	fp,sp,16
  81671c:	e13ffd15 	stw	r4,-12(fp)
  816720:	e17ffe15 	stw	r5,-8(fp)
  816724:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  816728:	e0bffd17 	ldw	r2,-12(fp)
  81672c:	10800017 	ldw	r2,0(r2)
  816730:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  816734:	e0bffc17 	ldw	r2,-16(fp)
  816738:	10c00a04 	addi	r3,r2,40
  81673c:	e0bffd17 	ldw	r2,-12(fp)
  816740:	10800217 	ldw	r2,8(r2)
  816744:	100f883a 	mov	r7,r2
  816748:	e1bfff17 	ldw	r6,-4(fp)
  81674c:	e17ffe17 	ldw	r5,-8(fp)
  816750:	1809883a 	mov	r4,r3
  816754:	08160540 	call	816054 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  816758:	e037883a 	mov	sp,fp
  81675c:	dfc00117 	ldw	ra,4(sp)
  816760:	df000017 	ldw	fp,0(sp)
  816764:	dec00204 	addi	sp,sp,8
  816768:	f800283a 	ret

0081676c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81676c:	defffa04 	addi	sp,sp,-24
  816770:	dfc00515 	stw	ra,20(sp)
  816774:	df000415 	stw	fp,16(sp)
  816778:	df000404 	addi	fp,sp,16
  81677c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  816780:	0007883a 	mov	r3,zero
  816784:	e0bfff17 	ldw	r2,-4(fp)
  816788:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81678c:	e0bfff17 	ldw	r2,-4(fp)
  816790:	10800104 	addi	r2,r2,4
  816794:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816798:	0005303a 	rdctl	r2,status
  81679c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8167a0:	e0fffd17 	ldw	r3,-12(fp)
  8167a4:	00bfff84 	movi	r2,-2
  8167a8:	1884703a 	and	r2,r3,r2
  8167ac:	1001703a 	wrctl	status,r2
  
  return context;
  8167b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8167b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8167b8:	0814ae80 	call	814ae8 <alt_tick>
  8167bc:	e0bffc17 	ldw	r2,-16(fp)
  8167c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8167c4:	e0bffe17 	ldw	r2,-8(fp)
  8167c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8167cc:	0001883a 	nop
  8167d0:	e037883a 	mov	sp,fp
  8167d4:	dfc00117 	ldw	ra,4(sp)
  8167d8:	df000017 	ldw	fp,0(sp)
  8167dc:	dec00204 	addi	sp,sp,8
  8167e0:	f800283a 	ret

008167e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8167e4:	defff804 	addi	sp,sp,-32
  8167e8:	dfc00715 	stw	ra,28(sp)
  8167ec:	df000615 	stw	fp,24(sp)
  8167f0:	df000604 	addi	fp,sp,24
  8167f4:	e13ffc15 	stw	r4,-16(fp)
  8167f8:	e17ffd15 	stw	r5,-12(fp)
  8167fc:	e1bffe15 	stw	r6,-8(fp)
  816800:	e1ffff15 	stw	r7,-4(fp)
  816804:	e0bfff17 	ldw	r2,-4(fp)
  816808:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81680c:	d0a75617 	ldw	r2,-25256(gp)
  816810:	1000021e 	bne	r2,zero,81681c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  816814:	e0bffb17 	ldw	r2,-20(fp)
  816818:	d0a75615 	stw	r2,-25256(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81681c:	e0bffc17 	ldw	r2,-16(fp)
  816820:	10800104 	addi	r2,r2,4
  816824:	00c001c4 	movi	r3,7
  816828:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  81682c:	d8000015 	stw	zero,0(sp)
  816830:	e1fffc17 	ldw	r7,-16(fp)
  816834:	01802074 	movhi	r6,129
  816838:	3199db04 	addi	r6,r6,26476
  81683c:	e17ffe17 	ldw	r5,-8(fp)
  816840:	e13ffd17 	ldw	r4,-12(fp)
  816844:	08173540 	call	817354 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  816848:	0001883a 	nop
  81684c:	e037883a 	mov	sp,fp
  816850:	dfc00117 	ldw	ra,4(sp)
  816854:	df000017 	ldw	fp,0(sp)
  816858:	dec00204 	addi	sp,sp,8
  81685c:	f800283a 	ret

00816860 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  816860:	defffa04 	addi	sp,sp,-24
  816864:	dfc00515 	stw	ra,20(sp)
  816868:	df000415 	stw	fp,16(sp)
  81686c:	df000404 	addi	fp,sp,16
  816870:	e13ffd15 	stw	r4,-12(fp)
  816874:	e17ffe15 	stw	r5,-8(fp)
  816878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81687c:	e0bffd17 	ldw	r2,-12(fp)
  816880:	10800017 	ldw	r2,0(r2)
  816884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  816888:	e0bffc17 	ldw	r2,-16(fp)
  81688c:	10c00a04 	addi	r3,r2,40
  816890:	e0bffd17 	ldw	r2,-12(fp)
  816894:	10800217 	ldw	r2,8(r2)
  816898:	100f883a 	mov	r7,r2
  81689c:	e1bfff17 	ldw	r6,-4(fp)
  8168a0:	e17ffe17 	ldw	r5,-8(fp)
  8168a4:	1809883a 	mov	r4,r3
  8168a8:	0816d740 	call	816d74 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8168ac:	e037883a 	mov	sp,fp
  8168b0:	dfc00117 	ldw	ra,4(sp)
  8168b4:	df000017 	ldw	fp,0(sp)
  8168b8:	dec00204 	addi	sp,sp,8
  8168bc:	f800283a 	ret

008168c0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8168c0:	defffa04 	addi	sp,sp,-24
  8168c4:	dfc00515 	stw	ra,20(sp)
  8168c8:	df000415 	stw	fp,16(sp)
  8168cc:	df000404 	addi	fp,sp,16
  8168d0:	e13ffd15 	stw	r4,-12(fp)
  8168d4:	e17ffe15 	stw	r5,-8(fp)
  8168d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8168dc:	e0bffd17 	ldw	r2,-12(fp)
  8168e0:	10800017 	ldw	r2,0(r2)
  8168e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8168e8:	e0bffc17 	ldw	r2,-16(fp)
  8168ec:	10c00a04 	addi	r3,r2,40
  8168f0:	e0bffd17 	ldw	r2,-12(fp)
  8168f4:	10800217 	ldw	r2,8(r2)
  8168f8:	100f883a 	mov	r7,r2
  8168fc:	e1bfff17 	ldw	r6,-4(fp)
  816900:	e17ffe17 	ldw	r5,-8(fp)
  816904:	1809883a 	mov	r4,r3
  816908:	0816f8c0 	call	816f8c <altera_avalon_uart_write>
      fd->fd_flags);
}
  81690c:	e037883a 	mov	sp,fp
  816910:	dfc00117 	ldw	ra,4(sp)
  816914:	df000017 	ldw	fp,0(sp)
  816918:	dec00204 	addi	sp,sp,8
  81691c:	f800283a 	ret

00816920 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  816920:	defffc04 	addi	sp,sp,-16
  816924:	dfc00315 	stw	ra,12(sp)
  816928:	df000215 	stw	fp,8(sp)
  81692c:	df000204 	addi	fp,sp,8
  816930:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  816934:	e0bfff17 	ldw	r2,-4(fp)
  816938:	10800017 	ldw	r2,0(r2)
  81693c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  816940:	e0bffe17 	ldw	r2,-8(fp)
  816944:	10c00a04 	addi	r3,r2,40
  816948:	e0bfff17 	ldw	r2,-4(fp)
  81694c:	10800217 	ldw	r2,8(r2)
  816950:	100b883a 	mov	r5,r2
  816954:	1809883a 	mov	r4,r3
  816958:	0816ce40 	call	816ce4 <altera_avalon_uart_close>
}
  81695c:	e037883a 	mov	sp,fp
  816960:	dfc00117 	ldw	ra,4(sp)
  816964:	df000017 	ldw	fp,0(sp)
  816968:	dec00204 	addi	sp,sp,8
  81696c:	f800283a 	ret

00816970 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  816970:	defff804 	addi	sp,sp,-32
  816974:	dfc00715 	stw	ra,28(sp)
  816978:	df000615 	stw	fp,24(sp)
  81697c:	df000604 	addi	fp,sp,24
  816980:	e13ffd15 	stw	r4,-12(fp)
  816984:	e17ffe15 	stw	r5,-8(fp)
  816988:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  81698c:	e0bffd17 	ldw	r2,-12(fp)
  816990:	10800017 	ldw	r2,0(r2)
  816994:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  816998:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81699c:	1000041e 	bne	r2,zero,8169b0 <altera_avalon_uart_init+0x40>
  8169a0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8169a4:	1000021e 	bne	r2,zero,8169b0 <altera_avalon_uart_init+0x40>
  8169a8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8169ac:	10000226 	beq	r2,zero,8169b8 <altera_avalon_uart_init+0x48>
  8169b0:	00800044 	movi	r2,1
  8169b4:	00000106 	br	8169bc <altera_avalon_uart_init+0x4c>
  8169b8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8169bc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8169c0:	e0bffc17 	ldw	r2,-16(fp)
  8169c4:	10000f1e 	bne	r2,zero,816a04 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8169c8:	e0bffd17 	ldw	r2,-12(fp)
  8169cc:	00c32004 	movi	r3,3200
  8169d0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8169d4:	e0bffb17 	ldw	r2,-20(fp)
  8169d8:	10800304 	addi	r2,r2,12
  8169dc:	e0fffd17 	ldw	r3,-12(fp)
  8169e0:	18c00117 	ldw	r3,4(r3)
  8169e4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8169e8:	d8000015 	stw	zero,0(sp)
  8169ec:	e1fffd17 	ldw	r7,-12(fp)
  8169f0:	01802074 	movhi	r6,129
  8169f4:	319a8704 	addi	r6,r6,27164
  8169f8:	e17fff17 	ldw	r5,-4(fp)
  8169fc:	e13ffe17 	ldw	r4,-8(fp)
  816a00:	08173540 	call	817354 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  816a04:	0001883a 	nop
  816a08:	e037883a 	mov	sp,fp
  816a0c:	dfc00117 	ldw	ra,4(sp)
  816a10:	df000017 	ldw	fp,0(sp)
  816a14:	dec00204 	addi	sp,sp,8
  816a18:	f800283a 	ret

00816a1c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  816a1c:	defffa04 	addi	sp,sp,-24
  816a20:	dfc00515 	stw	ra,20(sp)
  816a24:	df000415 	stw	fp,16(sp)
  816a28:	df000404 	addi	fp,sp,16
  816a2c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  816a30:	e0bfff17 	ldw	r2,-4(fp)
  816a34:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  816a38:	e0bffc17 	ldw	r2,-16(fp)
  816a3c:	10800017 	ldw	r2,0(r2)
  816a40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  816a44:	e0bffd17 	ldw	r2,-12(fp)
  816a48:	10800204 	addi	r2,r2,8
  816a4c:	10800037 	ldwio	r2,0(r2)
  816a50:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  816a54:	e0bffd17 	ldw	r2,-12(fp)
  816a58:	10800204 	addi	r2,r2,8
  816a5c:	0007883a 	mov	r3,zero
  816a60:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  816a64:	e0bffd17 	ldw	r2,-12(fp)
  816a68:	10800204 	addi	r2,r2,8
  816a6c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  816a70:	e0bffe17 	ldw	r2,-8(fp)
  816a74:	1080200c 	andi	r2,r2,128
  816a78:	10000326 	beq	r2,zero,816a88 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  816a7c:	e17ffe17 	ldw	r5,-8(fp)
  816a80:	e13ffc17 	ldw	r4,-16(fp)
  816a84:	0816ab80 	call	816ab8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  816a88:	e0bffe17 	ldw	r2,-8(fp)
  816a8c:	1081100c 	andi	r2,r2,1088
  816a90:	10000326 	beq	r2,zero,816aa0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  816a94:	e17ffe17 	ldw	r5,-8(fp)
  816a98:	e13ffc17 	ldw	r4,-16(fp)
  816a9c:	0816b9c0 	call	816b9c <altera_avalon_uart_txirq>
  }
  

}
  816aa0:	0001883a 	nop
  816aa4:	e037883a 	mov	sp,fp
  816aa8:	dfc00117 	ldw	ra,4(sp)
  816aac:	df000017 	ldw	fp,0(sp)
  816ab0:	dec00204 	addi	sp,sp,8
  816ab4:	f800283a 	ret

00816ab8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  816ab8:	defffc04 	addi	sp,sp,-16
  816abc:	df000315 	stw	fp,12(sp)
  816ac0:	df000304 	addi	fp,sp,12
  816ac4:	e13ffe15 	stw	r4,-8(fp)
  816ac8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  816acc:	e0bfff17 	ldw	r2,-4(fp)
  816ad0:	108000cc 	andi	r2,r2,3
  816ad4:	10002c1e 	bne	r2,zero,816b88 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  816ad8:	e0bffe17 	ldw	r2,-8(fp)
  816adc:	10800317 	ldw	r2,12(r2)
  816ae0:	e0bffe17 	ldw	r2,-8(fp)
  816ae4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  816ae8:	e0bffe17 	ldw	r2,-8(fp)
  816aec:	10800317 	ldw	r2,12(r2)
  816af0:	10800044 	addi	r2,r2,1
  816af4:	10800fcc 	andi	r2,r2,63
  816af8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  816afc:	e0bffe17 	ldw	r2,-8(fp)
  816b00:	10800317 	ldw	r2,12(r2)
  816b04:	e0fffe17 	ldw	r3,-8(fp)
  816b08:	18c00017 	ldw	r3,0(r3)
  816b0c:	18c00037 	ldwio	r3,0(r3)
  816b10:	1809883a 	mov	r4,r3
  816b14:	e0fffe17 	ldw	r3,-8(fp)
  816b18:	1885883a 	add	r2,r3,r2
  816b1c:	10800704 	addi	r2,r2,28
  816b20:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  816b24:	e0bffe17 	ldw	r2,-8(fp)
  816b28:	e0fffd17 	ldw	r3,-12(fp)
  816b2c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  816b30:	e0bffe17 	ldw	r2,-8(fp)
  816b34:	10800317 	ldw	r2,12(r2)
  816b38:	10800044 	addi	r2,r2,1
  816b3c:	10800fcc 	andi	r2,r2,63
  816b40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  816b44:	e0bffe17 	ldw	r2,-8(fp)
  816b48:	10c00217 	ldw	r3,8(r2)
  816b4c:	e0bffd17 	ldw	r2,-12(fp)
  816b50:	18800e1e 	bne	r3,r2,816b8c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  816b54:	e0bffe17 	ldw	r2,-8(fp)
  816b58:	10c00117 	ldw	r3,4(r2)
  816b5c:	00bfdfc4 	movi	r2,-129
  816b60:	1886703a 	and	r3,r3,r2
  816b64:	e0bffe17 	ldw	r2,-8(fp)
  816b68:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  816b6c:	e0bffe17 	ldw	r2,-8(fp)
  816b70:	10800017 	ldw	r2,0(r2)
  816b74:	10800304 	addi	r2,r2,12
  816b78:	e0fffe17 	ldw	r3,-8(fp)
  816b7c:	18c00117 	ldw	r3,4(r3)
  816b80:	10c00035 	stwio	r3,0(r2)
  816b84:	00000106 	br	816b8c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  816b88:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  816b8c:	e037883a 	mov	sp,fp
  816b90:	df000017 	ldw	fp,0(sp)
  816b94:	dec00104 	addi	sp,sp,4
  816b98:	f800283a 	ret

00816b9c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  816b9c:	defffb04 	addi	sp,sp,-20
  816ba0:	df000415 	stw	fp,16(sp)
  816ba4:	df000404 	addi	fp,sp,16
  816ba8:	e13ffc15 	stw	r4,-16(fp)
  816bac:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  816bb0:	e0bffc17 	ldw	r2,-16(fp)
  816bb4:	10c00417 	ldw	r3,16(r2)
  816bb8:	e0bffc17 	ldw	r2,-16(fp)
  816bbc:	10800517 	ldw	r2,20(r2)
  816bc0:	18803226 	beq	r3,r2,816c8c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  816bc4:	e0bffc17 	ldw	r2,-16(fp)
  816bc8:	10800617 	ldw	r2,24(r2)
  816bcc:	1080008c 	andi	r2,r2,2
  816bd0:	10000326 	beq	r2,zero,816be0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  816bd4:	e0bffd17 	ldw	r2,-12(fp)
  816bd8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  816bdc:	10001d26 	beq	r2,zero,816c54 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  816be0:	e0bffc17 	ldw	r2,-16(fp)
  816be4:	10800417 	ldw	r2,16(r2)
  816be8:	e0bffc17 	ldw	r2,-16(fp)
  816bec:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  816bf0:	e0bffc17 	ldw	r2,-16(fp)
  816bf4:	10800017 	ldw	r2,0(r2)
  816bf8:	10800104 	addi	r2,r2,4
  816bfc:	e0fffc17 	ldw	r3,-16(fp)
  816c00:	18c00417 	ldw	r3,16(r3)
  816c04:	e13ffc17 	ldw	r4,-16(fp)
  816c08:	20c7883a 	add	r3,r4,r3
  816c0c:	18c01704 	addi	r3,r3,92
  816c10:	18c00003 	ldbu	r3,0(r3)
  816c14:	18c03fcc 	andi	r3,r3,255
  816c18:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  816c1c:	e0bffc17 	ldw	r2,-16(fp)
  816c20:	10800417 	ldw	r2,16(r2)
  816c24:	10800044 	addi	r2,r2,1
  816c28:	e0fffc17 	ldw	r3,-16(fp)
  816c2c:	18800415 	stw	r2,16(r3)
  816c30:	10c00fcc 	andi	r3,r2,63
  816c34:	e0bffc17 	ldw	r2,-16(fp)
  816c38:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  816c3c:	e0bffc17 	ldw	r2,-16(fp)
  816c40:	10800117 	ldw	r2,4(r2)
  816c44:	10c01014 	ori	r3,r2,64
  816c48:	e0bffc17 	ldw	r2,-16(fp)
  816c4c:	10c00115 	stw	r3,4(r2)
  816c50:	00000e06 	br	816c8c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  816c54:	e0bffc17 	ldw	r2,-16(fp)
  816c58:	10800017 	ldw	r2,0(r2)
  816c5c:	10800204 	addi	r2,r2,8
  816c60:	10800037 	ldwio	r2,0(r2)
  816c64:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  816c68:	e0bffd17 	ldw	r2,-12(fp)
  816c6c:	1082000c 	andi	r2,r2,2048
  816c70:	1000061e 	bne	r2,zero,816c8c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  816c74:	e0bffc17 	ldw	r2,-16(fp)
  816c78:	10c00117 	ldw	r3,4(r2)
  816c7c:	00bfefc4 	movi	r2,-65
  816c80:	1886703a 	and	r3,r3,r2
  816c84:	e0bffc17 	ldw	r2,-16(fp)
  816c88:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  816c8c:	e0bffc17 	ldw	r2,-16(fp)
  816c90:	10c00417 	ldw	r3,16(r2)
  816c94:	e0bffc17 	ldw	r2,-16(fp)
  816c98:	10800517 	ldw	r2,20(r2)
  816c9c:	1880061e 	bne	r3,r2,816cb8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  816ca0:	e0bffc17 	ldw	r2,-16(fp)
  816ca4:	10c00117 	ldw	r3,4(r2)
  816ca8:	00beefc4 	movi	r2,-1089
  816cac:	1886703a 	and	r3,r3,r2
  816cb0:	e0bffc17 	ldw	r2,-16(fp)
  816cb4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816cb8:	e0bffc17 	ldw	r2,-16(fp)
  816cbc:	10800017 	ldw	r2,0(r2)
  816cc0:	10800304 	addi	r2,r2,12
  816cc4:	e0fffc17 	ldw	r3,-16(fp)
  816cc8:	18c00117 	ldw	r3,4(r3)
  816ccc:	10c00035 	stwio	r3,0(r2)
}
  816cd0:	0001883a 	nop
  816cd4:	e037883a 	mov	sp,fp
  816cd8:	df000017 	ldw	fp,0(sp)
  816cdc:	dec00104 	addi	sp,sp,4
  816ce0:	f800283a 	ret

00816ce4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  816ce4:	defffd04 	addi	sp,sp,-12
  816ce8:	df000215 	stw	fp,8(sp)
  816cec:	df000204 	addi	fp,sp,8
  816cf0:	e13ffe15 	stw	r4,-8(fp)
  816cf4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  816cf8:	00000506 	br	816d10 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  816cfc:	e0bfff17 	ldw	r2,-4(fp)
  816d00:	1090000c 	andi	r2,r2,16384
  816d04:	10000226 	beq	r2,zero,816d10 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  816d08:	00bffd44 	movi	r2,-11
  816d0c:	00000606 	br	816d28 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  816d10:	e0bffe17 	ldw	r2,-8(fp)
  816d14:	10c00417 	ldw	r3,16(r2)
  816d18:	e0bffe17 	ldw	r2,-8(fp)
  816d1c:	10800517 	ldw	r2,20(r2)
  816d20:	18bff61e 	bne	r3,r2,816cfc <__alt_mem_onchip_mem+0xff80ecfc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  816d24:	0005883a 	mov	r2,zero
}
  816d28:	e037883a 	mov	sp,fp
  816d2c:	df000017 	ldw	fp,0(sp)
  816d30:	dec00104 	addi	sp,sp,4
  816d34:	f800283a 	ret

00816d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816d38:	defffe04 	addi	sp,sp,-8
  816d3c:	dfc00115 	stw	ra,4(sp)
  816d40:	df000015 	stw	fp,0(sp)
  816d44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  816d48:	d0a00c17 	ldw	r2,-32720(gp)
  816d4c:	10000326 	beq	r2,zero,816d5c <alt_get_errno+0x24>
  816d50:	d0a00c17 	ldw	r2,-32720(gp)
  816d54:	103ee83a 	callr	r2
  816d58:	00000106 	br	816d60 <alt_get_errno+0x28>
  816d5c:	d0a75204 	addi	r2,gp,-25272
}
  816d60:	e037883a 	mov	sp,fp
  816d64:	dfc00117 	ldw	ra,4(sp)
  816d68:	df000017 	ldw	fp,0(sp)
  816d6c:	dec00204 	addi	sp,sp,8
  816d70:	f800283a 	ret

00816d74 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  816d74:	defff204 	addi	sp,sp,-56
  816d78:	dfc00d15 	stw	ra,52(sp)
  816d7c:	df000c15 	stw	fp,48(sp)
  816d80:	df000c04 	addi	fp,sp,48
  816d84:	e13ffc15 	stw	r4,-16(fp)
  816d88:	e17ffd15 	stw	r5,-12(fp)
  816d8c:	e1bffe15 	stw	r6,-8(fp)
  816d90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  816d94:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  816d98:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  816d9c:	e0bfff17 	ldw	r2,-4(fp)
  816da0:	1090000c 	andi	r2,r2,16384
  816da4:	1005003a 	cmpeq	r2,r2,zero
  816da8:	10803fcc 	andi	r2,r2,255
  816dac:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  816db0:	00001306 	br	816e00 <altera_avalon_uart_read+0x8c>
    {
      count++;
  816db4:	e0bff517 	ldw	r2,-44(fp)
  816db8:	10800044 	addi	r2,r2,1
  816dbc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  816dc0:	e0bffd17 	ldw	r2,-12(fp)
  816dc4:	10c00044 	addi	r3,r2,1
  816dc8:	e0fffd15 	stw	r3,-12(fp)
  816dcc:	e0fffc17 	ldw	r3,-16(fp)
  816dd0:	18c00217 	ldw	r3,8(r3)
  816dd4:	e13ffc17 	ldw	r4,-16(fp)
  816dd8:	20c7883a 	add	r3,r4,r3
  816ddc:	18c00704 	addi	r3,r3,28
  816de0:	18c00003 	ldbu	r3,0(r3)
  816de4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  816de8:	e0bffc17 	ldw	r2,-16(fp)
  816dec:	10800217 	ldw	r2,8(r2)
  816df0:	10800044 	addi	r2,r2,1
  816df4:	10c00fcc 	andi	r3,r2,63
  816df8:	e0bffc17 	ldw	r2,-16(fp)
  816dfc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  816e00:	e0fff517 	ldw	r3,-44(fp)
  816e04:	e0bffe17 	ldw	r2,-8(fp)
  816e08:	1880050e 	bge	r3,r2,816e20 <altera_avalon_uart_read+0xac>
  816e0c:	e0bffc17 	ldw	r2,-16(fp)
  816e10:	10c00217 	ldw	r3,8(r2)
  816e14:	e0bffc17 	ldw	r2,-16(fp)
  816e18:	10800317 	ldw	r2,12(r2)
  816e1c:	18bfe51e 	bne	r3,r2,816db4 <__alt_mem_onchip_mem+0xff80edb4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  816e20:	e0bff517 	ldw	r2,-44(fp)
  816e24:	1000251e 	bne	r2,zero,816ebc <altera_avalon_uart_read+0x148>
  816e28:	e0bffc17 	ldw	r2,-16(fp)
  816e2c:	10c00217 	ldw	r3,8(r2)
  816e30:	e0bffc17 	ldw	r2,-16(fp)
  816e34:	10800317 	ldw	r2,12(r2)
  816e38:	1880201e 	bne	r3,r2,816ebc <altera_avalon_uart_read+0x148>
    {
      if (!block)
  816e3c:	e0bff617 	ldw	r2,-40(fp)
  816e40:	1000071e 	bne	r2,zero,816e60 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  816e44:	0816d380 	call	816d38 <alt_get_errno>
  816e48:	1007883a 	mov	r3,r2
  816e4c:	008002c4 	movi	r2,11
  816e50:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  816e54:	00800044 	movi	r2,1
  816e58:	e0bff405 	stb	r2,-48(fp)
        break;
  816e5c:	00001b06 	br	816ecc <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816e60:	0005303a 	rdctl	r2,status
  816e64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816e68:	e0fff917 	ldw	r3,-28(fp)
  816e6c:	00bfff84 	movi	r2,-2
  816e70:	1884703a 	and	r2,r3,r2
  816e74:	1001703a 	wrctl	status,r2
  
  return context;
  816e78:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  816e7c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  816e80:	e0bffc17 	ldw	r2,-16(fp)
  816e84:	10800117 	ldw	r2,4(r2)
  816e88:	10c02014 	ori	r3,r2,128
  816e8c:	e0bffc17 	ldw	r2,-16(fp)
  816e90:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816e94:	e0bffc17 	ldw	r2,-16(fp)
  816e98:	10800017 	ldw	r2,0(r2)
  816e9c:	10800304 	addi	r2,r2,12
  816ea0:	e0fffc17 	ldw	r3,-16(fp)
  816ea4:	18c00117 	ldw	r3,4(r3)
  816ea8:	10c00035 	stwio	r3,0(r2)
  816eac:	e0bff817 	ldw	r2,-32(fp)
  816eb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816eb4:	e0bffa17 	ldw	r2,-24(fp)
  816eb8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  816ebc:	e0bff517 	ldw	r2,-44(fp)
  816ec0:	1000021e 	bne	r2,zero,816ecc <altera_avalon_uart_read+0x158>
  816ec4:	e0bffe17 	ldw	r2,-8(fp)
  816ec8:	103fcd1e 	bne	r2,zero,816e00 <__alt_mem_onchip_mem+0xff80ee00>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816ecc:	0005303a 	rdctl	r2,status
  816ed0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816ed4:	e0fffb17 	ldw	r3,-20(fp)
  816ed8:	00bfff84 	movi	r2,-2
  816edc:	1884703a 	and	r2,r3,r2
  816ee0:	1001703a 	wrctl	status,r2
  
  return context;
  816ee4:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  816ee8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  816eec:	e0bffc17 	ldw	r2,-16(fp)
  816ef0:	10800117 	ldw	r2,4(r2)
  816ef4:	10c02014 	ori	r3,r2,128
  816ef8:	e0bffc17 	ldw	r2,-16(fp)
  816efc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816f00:	e0bffc17 	ldw	r2,-16(fp)
  816f04:	10800017 	ldw	r2,0(r2)
  816f08:	10800304 	addi	r2,r2,12
  816f0c:	e0fffc17 	ldw	r3,-16(fp)
  816f10:	18c00117 	ldw	r3,4(r3)
  816f14:	10c00035 	stwio	r3,0(r2)
  816f18:	e0bff817 	ldw	r2,-32(fp)
  816f1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816f20:	e0bff717 	ldw	r2,-36(fp)
  816f24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  816f28:	e0bff403 	ldbu	r2,-48(fp)
  816f2c:	10000226 	beq	r2,zero,816f38 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  816f30:	00bffd44 	movi	r2,-11
  816f34:	00000106 	br	816f3c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  816f38:	e0bff517 	ldw	r2,-44(fp)
  }
}
  816f3c:	e037883a 	mov	sp,fp
  816f40:	dfc00117 	ldw	ra,4(sp)
  816f44:	df000017 	ldw	fp,0(sp)
  816f48:	dec00204 	addi	sp,sp,8
  816f4c:	f800283a 	ret

00816f50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816f50:	defffe04 	addi	sp,sp,-8
  816f54:	dfc00115 	stw	ra,4(sp)
  816f58:	df000015 	stw	fp,0(sp)
  816f5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  816f60:	d0a00c17 	ldw	r2,-32720(gp)
  816f64:	10000326 	beq	r2,zero,816f74 <alt_get_errno+0x24>
  816f68:	d0a00c17 	ldw	r2,-32720(gp)
  816f6c:	103ee83a 	callr	r2
  816f70:	00000106 	br	816f78 <alt_get_errno+0x28>
  816f74:	d0a75204 	addi	r2,gp,-25272
}
  816f78:	e037883a 	mov	sp,fp
  816f7c:	dfc00117 	ldw	ra,4(sp)
  816f80:	df000017 	ldw	fp,0(sp)
  816f84:	dec00204 	addi	sp,sp,8
  816f88:	f800283a 	ret

00816f8c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  816f8c:	defff204 	addi	sp,sp,-56
  816f90:	dfc00d15 	stw	ra,52(sp)
  816f94:	df000c15 	stw	fp,48(sp)
  816f98:	df000c04 	addi	fp,sp,48
  816f9c:	e13ffc15 	stw	r4,-16(fp)
  816fa0:	e17ffd15 	stw	r5,-12(fp)
  816fa4:	e1bffe15 	stw	r6,-8(fp)
  816fa8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  816fac:	e0bffe17 	ldw	r2,-8(fp)
  816fb0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  816fb4:	e0bfff17 	ldw	r2,-4(fp)
  816fb8:	1090000c 	andi	r2,r2,16384
  816fbc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  816fc0:	00003c06 	br	8170b4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  816fc4:	e0bffc17 	ldw	r2,-16(fp)
  816fc8:	10800517 	ldw	r2,20(r2)
  816fcc:	10800044 	addi	r2,r2,1
  816fd0:	10800fcc 	andi	r2,r2,63
  816fd4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  816fd8:	e0bffc17 	ldw	r2,-16(fp)
  816fdc:	10c00417 	ldw	r3,16(r2)
  816fe0:	e0bff717 	ldw	r2,-36(fp)
  816fe4:	1880221e 	bne	r3,r2,817070 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  816fe8:	e0bff517 	ldw	r2,-44(fp)
  816fec:	10000526 	beq	r2,zero,817004 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  816ff0:	0816f500 	call	816f50 <alt_get_errno>
  816ff4:	1007883a 	mov	r3,r2
  816ff8:	008002c4 	movi	r2,11
  816ffc:	18800015 	stw	r2,0(r3)
        break;
  817000:	00002e06 	br	8170bc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817004:	0005303a 	rdctl	r2,status
  817008:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81700c:	e0fff917 	ldw	r3,-28(fp)
  817010:	00bfff84 	movi	r2,-2
  817014:	1884703a 	and	r2,r3,r2
  817018:	1001703a 	wrctl	status,r2
  
  return context;
  81701c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  817020:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  817024:	e0bffc17 	ldw	r2,-16(fp)
  817028:	10800117 	ldw	r2,4(r2)
  81702c:	10c11014 	ori	r3,r2,1088
  817030:	e0bffc17 	ldw	r2,-16(fp)
  817034:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  817038:	e0bffc17 	ldw	r2,-16(fp)
  81703c:	10800017 	ldw	r2,0(r2)
  817040:	10800304 	addi	r2,r2,12
  817044:	e0fffc17 	ldw	r3,-16(fp)
  817048:	18c00117 	ldw	r3,4(r3)
  81704c:	10c00035 	stwio	r3,0(r2)
  817050:	e0bff817 	ldw	r2,-32(fp)
  817054:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817058:	e0bff617 	ldw	r2,-40(fp)
  81705c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  817060:	e0bffc17 	ldw	r2,-16(fp)
  817064:	10c00417 	ldw	r3,16(r2)
  817068:	e0bff717 	ldw	r2,-36(fp)
  81706c:	18bffc26 	beq	r3,r2,817060 <__alt_mem_onchip_mem+0xff80f060>
      }
    }

    count--;
  817070:	e0bff417 	ldw	r2,-48(fp)
  817074:	10bfffc4 	addi	r2,r2,-1
  817078:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  81707c:	e0bffc17 	ldw	r2,-16(fp)
  817080:	10c00517 	ldw	r3,20(r2)
  817084:	e0bffd17 	ldw	r2,-12(fp)
  817088:	11000044 	addi	r4,r2,1
  81708c:	e13ffd15 	stw	r4,-12(fp)
  817090:	10800003 	ldbu	r2,0(r2)
  817094:	1009883a 	mov	r4,r2
  817098:	e0bffc17 	ldw	r2,-16(fp)
  81709c:	10c5883a 	add	r2,r2,r3
  8170a0:	10801704 	addi	r2,r2,92
  8170a4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8170a8:	e0bffc17 	ldw	r2,-16(fp)
  8170ac:	e0fff717 	ldw	r3,-36(fp)
  8170b0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8170b4:	e0bff417 	ldw	r2,-48(fp)
  8170b8:	103fc21e 	bne	r2,zero,816fc4 <__alt_mem_onchip_mem+0xff80efc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8170bc:	0005303a 	rdctl	r2,status
  8170c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8170c4:	e0fffb17 	ldw	r3,-20(fp)
  8170c8:	00bfff84 	movi	r2,-2
  8170cc:	1884703a 	and	r2,r3,r2
  8170d0:	1001703a 	wrctl	status,r2
  
  return context;
  8170d4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8170d8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8170dc:	e0bffc17 	ldw	r2,-16(fp)
  8170e0:	10800117 	ldw	r2,4(r2)
  8170e4:	10c11014 	ori	r3,r2,1088
  8170e8:	e0bffc17 	ldw	r2,-16(fp)
  8170ec:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8170f0:	e0bffc17 	ldw	r2,-16(fp)
  8170f4:	10800017 	ldw	r2,0(r2)
  8170f8:	10800304 	addi	r2,r2,12
  8170fc:	e0fffc17 	ldw	r3,-16(fp)
  817100:	18c00117 	ldw	r3,4(r3)
  817104:	10c00035 	stwio	r3,0(r2)
  817108:	e0bff817 	ldw	r2,-32(fp)
  81710c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817110:	e0bffa17 	ldw	r2,-24(fp)
  817114:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  817118:	e0fffe17 	ldw	r3,-8(fp)
  81711c:	e0bff417 	ldw	r2,-48(fp)
  817120:	1885c83a 	sub	r2,r3,r2
}
  817124:	e037883a 	mov	sp,fp
  817128:	dfc00117 	ldw	ra,4(sp)
  81712c:	df000017 	ldw	fp,0(sp)
  817130:	dec00204 	addi	sp,sp,8
  817134:	f800283a 	ret

00817138 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  817138:	defffe04 	addi	sp,sp,-8
  81713c:	df000115 	stw	fp,4(sp)
  817140:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  817144:	e03fff15 	stw	zero,-4(fp)
  817148:	00000506 	br	817160 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81714c:	e0bfff17 	ldw	r2,-4(fp)
  817150:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  817154:	e0bfff17 	ldw	r2,-4(fp)
  817158:	10800804 	addi	r2,r2,32
  81715c:	e0bfff15 	stw	r2,-4(fp)
  817160:	e0bfff17 	ldw	r2,-4(fp)
  817164:	10820030 	cmpltui	r2,r2,2048
  817168:	103ff81e 	bne	r2,zero,81714c <__alt_mem_onchip_mem+0xff80f14c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81716c:	0001883a 	nop
  817170:	e037883a 	mov	sp,fp
  817174:	df000017 	ldw	fp,0(sp)
  817178:	dec00104 	addi	sp,sp,4
  81717c:	f800283a 	ret

00817180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817180:	defffe04 	addi	sp,sp,-8
  817184:	dfc00115 	stw	ra,4(sp)
  817188:	df000015 	stw	fp,0(sp)
  81718c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817190:	d0a00c17 	ldw	r2,-32720(gp)
  817194:	10000326 	beq	r2,zero,8171a4 <alt_get_errno+0x24>
  817198:	d0a00c17 	ldw	r2,-32720(gp)
  81719c:	103ee83a 	callr	r2
  8171a0:	00000106 	br	8171a8 <alt_get_errno+0x28>
  8171a4:	d0a75204 	addi	r2,gp,-25272
}
  8171a8:	e037883a 	mov	sp,fp
  8171ac:	dfc00117 	ldw	ra,4(sp)
  8171b0:	df000017 	ldw	fp,0(sp)
  8171b4:	dec00204 	addi	sp,sp,8
  8171b8:	f800283a 	ret

008171bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8171bc:	defffa04 	addi	sp,sp,-24
  8171c0:	dfc00515 	stw	ra,20(sp)
  8171c4:	df000415 	stw	fp,16(sp)
  8171c8:	df000404 	addi	fp,sp,16
  8171cc:	e13ffe15 	stw	r4,-8(fp)
  8171d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8171d4:	e0bffe17 	ldw	r2,-8(fp)
  8171d8:	10000326 	beq	r2,zero,8171e8 <alt_dev_llist_insert+0x2c>
  8171dc:	e0bffe17 	ldw	r2,-8(fp)
  8171e0:	10800217 	ldw	r2,8(r2)
  8171e4:	1000061e 	bne	r2,zero,817200 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8171e8:	08171800 	call	817180 <alt_get_errno>
  8171ec:	1007883a 	mov	r3,r2
  8171f0:	00800584 	movi	r2,22
  8171f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8171f8:	00bffa84 	movi	r2,-22
  8171fc:	00001306 	br	81724c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  817200:	e0bffe17 	ldw	r2,-8(fp)
  817204:	e0ffff17 	ldw	r3,-4(fp)
  817208:	e0fffc15 	stw	r3,-16(fp)
  81720c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  817210:	e0bffd17 	ldw	r2,-12(fp)
  817214:	e0fffc17 	ldw	r3,-16(fp)
  817218:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81721c:	e0bffc17 	ldw	r2,-16(fp)
  817220:	10c00017 	ldw	r3,0(r2)
  817224:	e0bffd17 	ldw	r2,-12(fp)
  817228:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81722c:	e0bffc17 	ldw	r2,-16(fp)
  817230:	10800017 	ldw	r2,0(r2)
  817234:	e0fffd17 	ldw	r3,-12(fp)
  817238:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81723c:	e0bffc17 	ldw	r2,-16(fp)
  817240:	e0fffd17 	ldw	r3,-12(fp)
  817244:	10c00015 	stw	r3,0(r2)

  return 0;  
  817248:	0005883a 	mov	r2,zero
}
  81724c:	e037883a 	mov	sp,fp
  817250:	dfc00117 	ldw	ra,4(sp)
  817254:	df000017 	ldw	fp,0(sp)
  817258:	dec00204 	addi	sp,sp,8
  81725c:	f800283a 	ret

00817260 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  817260:	defffd04 	addi	sp,sp,-12
  817264:	dfc00215 	stw	ra,8(sp)
  817268:	df000115 	stw	fp,4(sp)
  81726c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  817270:	008020b4 	movhi	r2,130
  817274:	10a08b04 	addi	r2,r2,-32212
  817278:	e0bfff15 	stw	r2,-4(fp)
  81727c:	00000606 	br	817298 <_do_ctors+0x38>
        (*ctor) (); 
  817280:	e0bfff17 	ldw	r2,-4(fp)
  817284:	10800017 	ldw	r2,0(r2)
  817288:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81728c:	e0bfff17 	ldw	r2,-4(fp)
  817290:	10bfff04 	addi	r2,r2,-4
  817294:	e0bfff15 	stw	r2,-4(fp)
  817298:	e0ffff17 	ldw	r3,-4(fp)
  81729c:	008020b4 	movhi	r2,130
  8172a0:	10a08c04 	addi	r2,r2,-32208
  8172a4:	18bff62e 	bgeu	r3,r2,817280 <__alt_mem_onchip_mem+0xff80f280>
        (*ctor) (); 
}
  8172a8:	0001883a 	nop
  8172ac:	e037883a 	mov	sp,fp
  8172b0:	dfc00117 	ldw	ra,4(sp)
  8172b4:	df000017 	ldw	fp,0(sp)
  8172b8:	dec00204 	addi	sp,sp,8
  8172bc:	f800283a 	ret

008172c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8172c0:	defffd04 	addi	sp,sp,-12
  8172c4:	dfc00215 	stw	ra,8(sp)
  8172c8:	df000115 	stw	fp,4(sp)
  8172cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8172d0:	008020b4 	movhi	r2,130
  8172d4:	10a08b04 	addi	r2,r2,-32212
  8172d8:	e0bfff15 	stw	r2,-4(fp)
  8172dc:	00000606 	br	8172f8 <_do_dtors+0x38>
        (*dtor) (); 
  8172e0:	e0bfff17 	ldw	r2,-4(fp)
  8172e4:	10800017 	ldw	r2,0(r2)
  8172e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8172ec:	e0bfff17 	ldw	r2,-4(fp)
  8172f0:	10bfff04 	addi	r2,r2,-4
  8172f4:	e0bfff15 	stw	r2,-4(fp)
  8172f8:	e0ffff17 	ldw	r3,-4(fp)
  8172fc:	008020b4 	movhi	r2,130
  817300:	10a08c04 	addi	r2,r2,-32208
  817304:	18bff62e 	bgeu	r3,r2,8172e0 <__alt_mem_onchip_mem+0xff80f2e0>
        (*dtor) (); 
}
  817308:	0001883a 	nop
  81730c:	e037883a 	mov	sp,fp
  817310:	dfc00117 	ldw	ra,4(sp)
  817314:	df000017 	ldw	fp,0(sp)
  817318:	dec00204 	addi	sp,sp,8
  81731c:	f800283a 	ret

00817320 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  817320:	defffe04 	addi	sp,sp,-8
  817324:	dfc00115 	stw	ra,4(sp)
  817328:	df000015 	stw	fp,0(sp)
  81732c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  817330:	01440004 	movi	r5,4096
  817334:	0009883a 	mov	r4,zero
  817338:	0817d700 	call	817d70 <alt_icache_flush>
#endif
}
  81733c:	0001883a 	nop
  817340:	e037883a 	mov	sp,fp
  817344:	dfc00117 	ldw	ra,4(sp)
  817348:	df000017 	ldw	fp,0(sp)
  81734c:	dec00204 	addi	sp,sp,8
  817350:	f800283a 	ret

00817354 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  817354:	defff904 	addi	sp,sp,-28
  817358:	dfc00615 	stw	ra,24(sp)
  81735c:	df000515 	stw	fp,20(sp)
  817360:	df000504 	addi	fp,sp,20
  817364:	e13ffc15 	stw	r4,-16(fp)
  817368:	e17ffd15 	stw	r5,-12(fp)
  81736c:	e1bffe15 	stw	r6,-8(fp)
  817370:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  817374:	e0800217 	ldw	r2,8(fp)
  817378:	d8800015 	stw	r2,0(sp)
  81737c:	e1ffff17 	ldw	r7,-4(fp)
  817380:	e1bffe17 	ldw	r6,-8(fp)
  817384:	e17ffd17 	ldw	r5,-12(fp)
  817388:	e13ffc17 	ldw	r4,-16(fp)
  81738c:	08175040 	call	817504 <alt_iic_isr_register>
}  
  817390:	e037883a 	mov	sp,fp
  817394:	dfc00117 	ldw	ra,4(sp)
  817398:	df000017 	ldw	fp,0(sp)
  81739c:	dec00204 	addi	sp,sp,8
  8173a0:	f800283a 	ret

008173a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8173a4:	defff904 	addi	sp,sp,-28
  8173a8:	df000615 	stw	fp,24(sp)
  8173ac:	df000604 	addi	fp,sp,24
  8173b0:	e13ffe15 	stw	r4,-8(fp)
  8173b4:	e17fff15 	stw	r5,-4(fp)
  8173b8:	e0bfff17 	ldw	r2,-4(fp)
  8173bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8173c0:	0005303a 	rdctl	r2,status
  8173c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8173c8:	e0fffb17 	ldw	r3,-20(fp)
  8173cc:	00bfff84 	movi	r2,-2
  8173d0:	1884703a 	and	r2,r3,r2
  8173d4:	1001703a 	wrctl	status,r2
  
  return context;
  8173d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8173dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8173e0:	00c00044 	movi	r3,1
  8173e4:	e0bffa17 	ldw	r2,-24(fp)
  8173e8:	1884983a 	sll	r2,r3,r2
  8173ec:	1007883a 	mov	r3,r2
  8173f0:	d0a75817 	ldw	r2,-25248(gp)
  8173f4:	1884b03a 	or	r2,r3,r2
  8173f8:	d0a75815 	stw	r2,-25248(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8173fc:	d0a75817 	ldw	r2,-25248(gp)
  817400:	100170fa 	wrctl	ienable,r2
  817404:	e0bffc17 	ldw	r2,-16(fp)
  817408:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81740c:	e0bffd17 	ldw	r2,-12(fp)
  817410:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  817414:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  817418:	0001883a 	nop
}
  81741c:	e037883a 	mov	sp,fp
  817420:	df000017 	ldw	fp,0(sp)
  817424:	dec00104 	addi	sp,sp,4
  817428:	f800283a 	ret

0081742c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  81742c:	defff904 	addi	sp,sp,-28
  817430:	df000615 	stw	fp,24(sp)
  817434:	df000604 	addi	fp,sp,24
  817438:	e13ffe15 	stw	r4,-8(fp)
  81743c:	e17fff15 	stw	r5,-4(fp)
  817440:	e0bfff17 	ldw	r2,-4(fp)
  817444:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817448:	0005303a 	rdctl	r2,status
  81744c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817450:	e0fffb17 	ldw	r3,-20(fp)
  817454:	00bfff84 	movi	r2,-2
  817458:	1884703a 	and	r2,r3,r2
  81745c:	1001703a 	wrctl	status,r2
  
  return context;
  817460:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  817464:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  817468:	00c00044 	movi	r3,1
  81746c:	e0bffa17 	ldw	r2,-24(fp)
  817470:	1884983a 	sll	r2,r3,r2
  817474:	0084303a 	nor	r2,zero,r2
  817478:	1007883a 	mov	r3,r2
  81747c:	d0a75817 	ldw	r2,-25248(gp)
  817480:	1884703a 	and	r2,r3,r2
  817484:	d0a75815 	stw	r2,-25248(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  817488:	d0a75817 	ldw	r2,-25248(gp)
  81748c:	100170fa 	wrctl	ienable,r2
  817490:	e0bffc17 	ldw	r2,-16(fp)
  817494:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817498:	e0bffd17 	ldw	r2,-12(fp)
  81749c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8174a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8174a4:	0001883a 	nop
}
  8174a8:	e037883a 	mov	sp,fp
  8174ac:	df000017 	ldw	fp,0(sp)
  8174b0:	dec00104 	addi	sp,sp,4
  8174b4:	f800283a 	ret

008174b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8174b8:	defffc04 	addi	sp,sp,-16
  8174bc:	df000315 	stw	fp,12(sp)
  8174c0:	df000304 	addi	fp,sp,12
  8174c4:	e13ffe15 	stw	r4,-8(fp)
  8174c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8174cc:	000530fa 	rdctl	r2,ienable
  8174d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8174d4:	00c00044 	movi	r3,1
  8174d8:	e0bfff17 	ldw	r2,-4(fp)
  8174dc:	1884983a 	sll	r2,r3,r2
  8174e0:	1007883a 	mov	r3,r2
  8174e4:	e0bffd17 	ldw	r2,-12(fp)
  8174e8:	1884703a 	and	r2,r3,r2
  8174ec:	1004c03a 	cmpne	r2,r2,zero
  8174f0:	10803fcc 	andi	r2,r2,255
}
  8174f4:	e037883a 	mov	sp,fp
  8174f8:	df000017 	ldw	fp,0(sp)
  8174fc:	dec00104 	addi	sp,sp,4
  817500:	f800283a 	ret

00817504 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  817504:	defff504 	addi	sp,sp,-44
  817508:	dfc00a15 	stw	ra,40(sp)
  81750c:	df000915 	stw	fp,36(sp)
  817510:	df000904 	addi	fp,sp,36
  817514:	e13ffc15 	stw	r4,-16(fp)
  817518:	e17ffd15 	stw	r5,-12(fp)
  81751c:	e1bffe15 	stw	r6,-8(fp)
  817520:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  817524:	00bffa84 	movi	r2,-22
  817528:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  81752c:	e0bffd17 	ldw	r2,-12(fp)
  817530:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  817534:	e0bff817 	ldw	r2,-32(fp)
  817538:	10800808 	cmpgei	r2,r2,32
  81753c:	1000271e 	bne	r2,zero,8175dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817540:	0005303a 	rdctl	r2,status
  817544:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817548:	e0fffb17 	ldw	r3,-20(fp)
  81754c:	00bfff84 	movi	r2,-2
  817550:	1884703a 	and	r2,r3,r2
  817554:	1001703a 	wrctl	status,r2
  
  return context;
  817558:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81755c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  817560:	008020b4 	movhi	r2,130
  817564:	10b09004 	addi	r2,r2,-15808
  817568:	e0fff817 	ldw	r3,-32(fp)
  81756c:	180690fa 	slli	r3,r3,3
  817570:	10c5883a 	add	r2,r2,r3
  817574:	e0fffe17 	ldw	r3,-8(fp)
  817578:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  81757c:	008020b4 	movhi	r2,130
  817580:	10b09004 	addi	r2,r2,-15808
  817584:	e0fff817 	ldw	r3,-32(fp)
  817588:	180690fa 	slli	r3,r3,3
  81758c:	10c5883a 	add	r2,r2,r3
  817590:	10800104 	addi	r2,r2,4
  817594:	e0ffff17 	ldw	r3,-4(fp)
  817598:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81759c:	e0bffe17 	ldw	r2,-8(fp)
  8175a0:	10000526 	beq	r2,zero,8175b8 <alt_iic_isr_register+0xb4>
  8175a4:	e0bff817 	ldw	r2,-32(fp)
  8175a8:	100b883a 	mov	r5,r2
  8175ac:	e13ffc17 	ldw	r4,-16(fp)
  8175b0:	08173a40 	call	8173a4 <alt_ic_irq_enable>
  8175b4:	00000406 	br	8175c8 <alt_iic_isr_register+0xc4>
  8175b8:	e0bff817 	ldw	r2,-32(fp)
  8175bc:	100b883a 	mov	r5,r2
  8175c0:	e13ffc17 	ldw	r4,-16(fp)
  8175c4:	081742c0 	call	81742c <alt_ic_irq_disable>
  8175c8:	e0bff715 	stw	r2,-36(fp)
  8175cc:	e0bffa17 	ldw	r2,-24(fp)
  8175d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8175d4:	e0bff917 	ldw	r2,-28(fp)
  8175d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8175dc:	e0bff717 	ldw	r2,-36(fp)
}
  8175e0:	e037883a 	mov	sp,fp
  8175e4:	dfc00117 	ldw	ra,4(sp)
  8175e8:	df000017 	ldw	fp,0(sp)
  8175ec:	dec00204 	addi	sp,sp,8
  8175f0:	f800283a 	ret

008175f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8175f4:	defff904 	addi	sp,sp,-28
  8175f8:	dfc00615 	stw	ra,24(sp)
  8175fc:	df000515 	stw	fp,20(sp)
  817600:	df000504 	addi	fp,sp,20
  817604:	e13ffc15 	stw	r4,-16(fp)
  817608:	e17ffd15 	stw	r5,-12(fp)
  81760c:	e1bffe15 	stw	r6,-8(fp)
  817610:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  817614:	e1bfff17 	ldw	r6,-4(fp)
  817618:	e17ffe17 	ldw	r5,-8(fp)
  81761c:	e13ffd17 	ldw	r4,-12(fp)
  817620:	08178340 	call	817834 <open>
  817624:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  817628:	e0bffb17 	ldw	r2,-20(fp)
  81762c:	10001c16 	blt	r2,zero,8176a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  817630:	008020b4 	movhi	r2,130
  817634:	10a42304 	addi	r2,r2,-28532
  817638:	e0fffb17 	ldw	r3,-20(fp)
  81763c:	18c00324 	muli	r3,r3,12
  817640:	10c5883a 	add	r2,r2,r3
  817644:	10c00017 	ldw	r3,0(r2)
  817648:	e0bffc17 	ldw	r2,-16(fp)
  81764c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  817650:	008020b4 	movhi	r2,130
  817654:	10a42304 	addi	r2,r2,-28532
  817658:	e0fffb17 	ldw	r3,-20(fp)
  81765c:	18c00324 	muli	r3,r3,12
  817660:	10c5883a 	add	r2,r2,r3
  817664:	10800104 	addi	r2,r2,4
  817668:	10c00017 	ldw	r3,0(r2)
  81766c:	e0bffc17 	ldw	r2,-16(fp)
  817670:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  817674:	008020b4 	movhi	r2,130
  817678:	10a42304 	addi	r2,r2,-28532
  81767c:	e0fffb17 	ldw	r3,-20(fp)
  817680:	18c00324 	muli	r3,r3,12
  817684:	10c5883a 	add	r2,r2,r3
  817688:	10800204 	addi	r2,r2,8
  81768c:	10c00017 	ldw	r3,0(r2)
  817690:	e0bffc17 	ldw	r2,-16(fp)
  817694:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  817698:	e13ffb17 	ldw	r4,-20(fp)
  81769c:	08149380 	call	814938 <alt_release_fd>
  }
} 
  8176a0:	0001883a 	nop
  8176a4:	e037883a 	mov	sp,fp
  8176a8:	dfc00117 	ldw	ra,4(sp)
  8176ac:	df000017 	ldw	fp,0(sp)
  8176b0:	dec00204 	addi	sp,sp,8
  8176b4:	f800283a 	ret

008176b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8176b8:	defffb04 	addi	sp,sp,-20
  8176bc:	dfc00415 	stw	ra,16(sp)
  8176c0:	df000315 	stw	fp,12(sp)
  8176c4:	df000304 	addi	fp,sp,12
  8176c8:	e13ffd15 	stw	r4,-12(fp)
  8176cc:	e17ffe15 	stw	r5,-8(fp)
  8176d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8176d4:	01c07fc4 	movi	r7,511
  8176d8:	01800044 	movi	r6,1
  8176dc:	e17ffd17 	ldw	r5,-12(fp)
  8176e0:	010020b4 	movhi	r4,130
  8176e4:	21242604 	addi	r4,r4,-28520
  8176e8:	08175f40 	call	8175f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8176ec:	01c07fc4 	movi	r7,511
  8176f0:	000d883a 	mov	r6,zero
  8176f4:	e17ffe17 	ldw	r5,-8(fp)
  8176f8:	010020b4 	movhi	r4,130
  8176fc:	21242304 	addi	r4,r4,-28532
  817700:	08175f40 	call	8175f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  817704:	01c07fc4 	movi	r7,511
  817708:	01800044 	movi	r6,1
  81770c:	e17fff17 	ldw	r5,-4(fp)
  817710:	010020b4 	movhi	r4,130
  817714:	21242904 	addi	r4,r4,-28508
  817718:	08175f40 	call	8175f4 <alt_open_fd>
}  
  81771c:	0001883a 	nop
  817720:	e037883a 	mov	sp,fp
  817724:	dfc00117 	ldw	ra,4(sp)
  817728:	df000017 	ldw	fp,0(sp)
  81772c:	dec00204 	addi	sp,sp,8
  817730:	f800283a 	ret

00817734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817734:	defffe04 	addi	sp,sp,-8
  817738:	dfc00115 	stw	ra,4(sp)
  81773c:	df000015 	stw	fp,0(sp)
  817740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817744:	d0a00c17 	ldw	r2,-32720(gp)
  817748:	10000326 	beq	r2,zero,817758 <alt_get_errno+0x24>
  81774c:	d0a00c17 	ldw	r2,-32720(gp)
  817750:	103ee83a 	callr	r2
  817754:	00000106 	br	81775c <alt_get_errno+0x28>
  817758:	d0a75204 	addi	r2,gp,-25272
}
  81775c:	e037883a 	mov	sp,fp
  817760:	dfc00117 	ldw	ra,4(sp)
  817764:	df000017 	ldw	fp,0(sp)
  817768:	dec00204 	addi	sp,sp,8
  81776c:	f800283a 	ret

00817770 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  817770:	defffd04 	addi	sp,sp,-12
  817774:	df000215 	stw	fp,8(sp)
  817778:	df000204 	addi	fp,sp,8
  81777c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  817780:	e0bfff17 	ldw	r2,-4(fp)
  817784:	10800217 	ldw	r2,8(r2)
  817788:	10d00034 	orhi	r3,r2,16384
  81778c:	e0bfff17 	ldw	r2,-4(fp)
  817790:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  817794:	e03ffe15 	stw	zero,-8(fp)
  817798:	00001d06 	br	817810 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81779c:	008020b4 	movhi	r2,130
  8177a0:	10a42304 	addi	r2,r2,-28532
  8177a4:	e0fffe17 	ldw	r3,-8(fp)
  8177a8:	18c00324 	muli	r3,r3,12
  8177ac:	10c5883a 	add	r2,r2,r3
  8177b0:	10c00017 	ldw	r3,0(r2)
  8177b4:	e0bfff17 	ldw	r2,-4(fp)
  8177b8:	10800017 	ldw	r2,0(r2)
  8177bc:	1880111e 	bne	r3,r2,817804 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8177c0:	008020b4 	movhi	r2,130
  8177c4:	10a42304 	addi	r2,r2,-28532
  8177c8:	e0fffe17 	ldw	r3,-8(fp)
  8177cc:	18c00324 	muli	r3,r3,12
  8177d0:	10c5883a 	add	r2,r2,r3
  8177d4:	10800204 	addi	r2,r2,8
  8177d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8177dc:	1000090e 	bge	r2,zero,817804 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8177e0:	e0bffe17 	ldw	r2,-8(fp)
  8177e4:	10c00324 	muli	r3,r2,12
  8177e8:	008020b4 	movhi	r2,130
  8177ec:	10a42304 	addi	r2,r2,-28532
  8177f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8177f4:	e0bfff17 	ldw	r2,-4(fp)
  8177f8:	18800226 	beq	r3,r2,817804 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8177fc:	00bffcc4 	movi	r2,-13
  817800:	00000806 	br	817824 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  817804:	e0bffe17 	ldw	r2,-8(fp)
  817808:	10800044 	addi	r2,r2,1
  81780c:	e0bffe15 	stw	r2,-8(fp)
  817810:	d0a00b17 	ldw	r2,-32724(gp)
  817814:	1007883a 	mov	r3,r2
  817818:	e0bffe17 	ldw	r2,-8(fp)
  81781c:	18bfdf2e 	bgeu	r3,r2,81779c <__alt_mem_onchip_mem+0xff80f79c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  817820:	0005883a 	mov	r2,zero
}
  817824:	e037883a 	mov	sp,fp
  817828:	df000017 	ldw	fp,0(sp)
  81782c:	dec00104 	addi	sp,sp,4
  817830:	f800283a 	ret

00817834 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  817834:	defff604 	addi	sp,sp,-40
  817838:	dfc00915 	stw	ra,36(sp)
  81783c:	df000815 	stw	fp,32(sp)
  817840:	df000804 	addi	fp,sp,32
  817844:	e13ffd15 	stw	r4,-12(fp)
  817848:	e17ffe15 	stw	r5,-8(fp)
  81784c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  817850:	00bfffc4 	movi	r2,-1
  817854:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  817858:	00bffb44 	movi	r2,-19
  81785c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  817860:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  817864:	d1600904 	addi	r5,gp,-32732
  817868:	e13ffd17 	ldw	r4,-12(fp)
  81786c:	0817b340 	call	817b34 <alt_find_dev>
  817870:	e0bff815 	stw	r2,-32(fp)
  817874:	e0bff817 	ldw	r2,-32(fp)
  817878:	1000051e 	bne	r2,zero,817890 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81787c:	e13ffd17 	ldw	r4,-12(fp)
  817880:	0817bc40 	call	817bc4 <alt_find_file>
  817884:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  817888:	00800044 	movi	r2,1
  81788c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  817890:	e0bff817 	ldw	r2,-32(fp)
  817894:	10002926 	beq	r2,zero,81793c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  817898:	e13ff817 	ldw	r4,-32(fp)
  81789c:	0817ccc0 	call	817ccc <alt_get_fd>
  8178a0:	e0bff915 	stw	r2,-28(fp)
  8178a4:	e0bff917 	ldw	r2,-28(fp)
  8178a8:	1000030e 	bge	r2,zero,8178b8 <open+0x84>
    {
      status = index;
  8178ac:	e0bff917 	ldw	r2,-28(fp)
  8178b0:	e0bffa15 	stw	r2,-24(fp)
  8178b4:	00002306 	br	817944 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  8178b8:	e0bff917 	ldw	r2,-28(fp)
  8178bc:	10c00324 	muli	r3,r2,12
  8178c0:	008020b4 	movhi	r2,130
  8178c4:	10a42304 	addi	r2,r2,-28532
  8178c8:	1885883a 	add	r2,r3,r2
  8178cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8178d0:	e0fffe17 	ldw	r3,-8(fp)
  8178d4:	00900034 	movhi	r2,16384
  8178d8:	10bfffc4 	addi	r2,r2,-1
  8178dc:	1886703a 	and	r3,r3,r2
  8178e0:	e0bffc17 	ldw	r2,-16(fp)
  8178e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8178e8:	e0bffb17 	ldw	r2,-20(fp)
  8178ec:	1000051e 	bne	r2,zero,817904 <open+0xd0>
  8178f0:	e13ffc17 	ldw	r4,-16(fp)
  8178f4:	08177700 	call	817770 <alt_file_locked>
  8178f8:	e0bffa15 	stw	r2,-24(fp)
  8178fc:	e0bffa17 	ldw	r2,-24(fp)
  817900:	10001016 	blt	r2,zero,817944 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  817904:	e0bff817 	ldw	r2,-32(fp)
  817908:	10800317 	ldw	r2,12(r2)
  81790c:	10000826 	beq	r2,zero,817930 <open+0xfc>
  817910:	e0bff817 	ldw	r2,-32(fp)
  817914:	10800317 	ldw	r2,12(r2)
  817918:	e1ffff17 	ldw	r7,-4(fp)
  81791c:	e1bffe17 	ldw	r6,-8(fp)
  817920:	e17ffd17 	ldw	r5,-12(fp)
  817924:	e13ffc17 	ldw	r4,-16(fp)
  817928:	103ee83a 	callr	r2
  81792c:	00000106 	br	817934 <open+0x100>
  817930:	0005883a 	mov	r2,zero
  817934:	e0bffa15 	stw	r2,-24(fp)
  817938:	00000206 	br	817944 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81793c:	00bffb44 	movi	r2,-19
  817940:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  817944:	e0bffa17 	ldw	r2,-24(fp)
  817948:	1000090e 	bge	r2,zero,817970 <open+0x13c>
  {
    alt_release_fd (index);  
  81794c:	e13ff917 	ldw	r4,-28(fp)
  817950:	08149380 	call	814938 <alt_release_fd>
    ALT_ERRNO = -status;
  817954:	08177340 	call	817734 <alt_get_errno>
  817958:	1007883a 	mov	r3,r2
  81795c:	e0bffa17 	ldw	r2,-24(fp)
  817960:	0085c83a 	sub	r2,zero,r2
  817964:	18800015 	stw	r2,0(r3)
    return -1;
  817968:	00bfffc4 	movi	r2,-1
  81796c:	00000106 	br	817974 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  817970:	e0bff917 	ldw	r2,-28(fp)
}
  817974:	e037883a 	mov	sp,fp
  817978:	dfc00117 	ldw	ra,4(sp)
  81797c:	df000017 	ldw	fp,0(sp)
  817980:	dec00204 	addi	sp,sp,8
  817984:	f800283a 	ret

00817988 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  817988:	defffd04 	addi	sp,sp,-12
  81798c:	dfc00215 	stw	ra,8(sp)
  817990:	df000115 	stw	fp,4(sp)
  817994:	df000104 	addi	fp,sp,4
  817998:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81799c:	e13fff17 	ldw	r4,-4(fp)
  8179a0:	08179dc0 	call	8179dc <alt_busy_sleep>
}
  8179a4:	e037883a 	mov	sp,fp
  8179a8:	dfc00117 	ldw	ra,4(sp)
  8179ac:	df000017 	ldw	fp,0(sp)
  8179b0:	dec00204 	addi	sp,sp,8
  8179b4:	f800283a 	ret

008179b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8179b8:	deffff04 	addi	sp,sp,-4
  8179bc:	df000015 	stw	fp,0(sp)
  8179c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8179c4:	000170fa 	wrctl	ienable,zero
}
  8179c8:	0001883a 	nop
  8179cc:	e037883a 	mov	sp,fp
  8179d0:	df000017 	ldw	fp,0(sp)
  8179d4:	dec00104 	addi	sp,sp,4
  8179d8:	f800283a 	ret

008179dc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8179dc:	defffa04 	addi	sp,sp,-24
  8179e0:	dfc00515 	stw	ra,20(sp)
  8179e4:	df000415 	stw	fp,16(sp)
  8179e8:	df000404 	addi	fp,sp,16
  8179ec:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8179f0:	008000c4 	movi	r2,3
  8179f4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8179f8:	e0fffd17 	ldw	r3,-12(fp)
  8179fc:	008003f4 	movhi	r2,15
  817a00:	10909004 	addi	r2,r2,16960
  817a04:	1885383a 	mul	r2,r3,r2
  817a08:	100b883a 	mov	r5,r2
  817a0c:	0100bef4 	movhi	r4,763
  817a10:	213c2004 	addi	r4,r4,-3968
  817a14:	0812ea40 	call	812ea4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  817a18:	100b883a 	mov	r5,r2
  817a1c:	01200034 	movhi	r4,32768
  817a20:	213fffc4 	addi	r4,r4,-1
  817a24:	0812ea40 	call	812ea4 <__udivsi3>
  817a28:	100b883a 	mov	r5,r2
  817a2c:	e13fff17 	ldw	r4,-4(fp)
  817a30:	0812ea40 	call	812ea4 <__udivsi3>
  817a34:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  817a38:	e0bffe17 	ldw	r2,-8(fp)
  817a3c:	10002a26 	beq	r2,zero,817ae8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  817a40:	e03ffc15 	stw	zero,-16(fp)
  817a44:	00001706 	br	817aa4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  817a48:	00a00034 	movhi	r2,32768
  817a4c:	10bfffc4 	addi	r2,r2,-1
  817a50:	10bfffc4 	addi	r2,r2,-1
  817a54:	103ffe1e 	bne	r2,zero,817a50 <__alt_mem_onchip_mem+0xff80fa50>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  817a58:	e0fffd17 	ldw	r3,-12(fp)
  817a5c:	008003f4 	movhi	r2,15
  817a60:	10909004 	addi	r2,r2,16960
  817a64:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  817a68:	100b883a 	mov	r5,r2
  817a6c:	0100bef4 	movhi	r4,763
  817a70:	213c2004 	addi	r4,r4,-3968
  817a74:	0812ea40 	call	812ea4 <__udivsi3>
  817a78:	100b883a 	mov	r5,r2
  817a7c:	01200034 	movhi	r4,32768
  817a80:	213fffc4 	addi	r4,r4,-1
  817a84:	0812ea40 	call	812ea4 <__udivsi3>
  817a88:	1007883a 	mov	r3,r2
  817a8c:	e0bfff17 	ldw	r2,-4(fp)
  817a90:	10c5c83a 	sub	r2,r2,r3
  817a94:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  817a98:	e0bffc17 	ldw	r2,-16(fp)
  817a9c:	10800044 	addi	r2,r2,1
  817aa0:	e0bffc15 	stw	r2,-16(fp)
  817aa4:	e0fffc17 	ldw	r3,-16(fp)
  817aa8:	e0bffe17 	ldw	r2,-8(fp)
  817aac:	18bfe616 	blt	r3,r2,817a48 <__alt_mem_onchip_mem+0xff80fa48>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  817ab0:	e0fffd17 	ldw	r3,-12(fp)
  817ab4:	008003f4 	movhi	r2,15
  817ab8:	10909004 	addi	r2,r2,16960
  817abc:	1885383a 	mul	r2,r3,r2
  817ac0:	100b883a 	mov	r5,r2
  817ac4:	0100bef4 	movhi	r4,763
  817ac8:	213c2004 	addi	r4,r4,-3968
  817acc:	0812ea40 	call	812ea4 <__udivsi3>
  817ad0:	1007883a 	mov	r3,r2
  817ad4:	e0bfff17 	ldw	r2,-4(fp)
  817ad8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  817adc:	10bfffc4 	addi	r2,r2,-1
  817ae0:	103ffe1e 	bne	r2,zero,817adc <__alt_mem_onchip_mem+0xff80fadc>
  817ae4:	00000d06 	br	817b1c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  817ae8:	e0fffd17 	ldw	r3,-12(fp)
  817aec:	008003f4 	movhi	r2,15
  817af0:	10909004 	addi	r2,r2,16960
  817af4:	1885383a 	mul	r2,r3,r2
  817af8:	100b883a 	mov	r5,r2
  817afc:	0100bef4 	movhi	r4,763
  817b00:	213c2004 	addi	r4,r4,-3968
  817b04:	0812ea40 	call	812ea4 <__udivsi3>
  817b08:	1007883a 	mov	r3,r2
  817b0c:	e0bfff17 	ldw	r2,-4(fp)
  817b10:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  817b14:	10bfffc4 	addi	r2,r2,-1
  817b18:	00bffe16 	blt	zero,r2,817b14 <__alt_mem_onchip_mem+0xff80fb14>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  817b1c:	0005883a 	mov	r2,zero
}
  817b20:	e037883a 	mov	sp,fp
  817b24:	dfc00117 	ldw	ra,4(sp)
  817b28:	df000017 	ldw	fp,0(sp)
  817b2c:	dec00204 	addi	sp,sp,8
  817b30:	f800283a 	ret

00817b34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  817b34:	defffa04 	addi	sp,sp,-24
  817b38:	dfc00515 	stw	ra,20(sp)
  817b3c:	df000415 	stw	fp,16(sp)
  817b40:	df000404 	addi	fp,sp,16
  817b44:	e13ffe15 	stw	r4,-8(fp)
  817b48:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  817b4c:	e0bfff17 	ldw	r2,-4(fp)
  817b50:	10800017 	ldw	r2,0(r2)
  817b54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  817b58:	e13ffe17 	ldw	r4,-8(fp)
  817b5c:	080f76c0 	call	80f76c <strlen>
  817b60:	10800044 	addi	r2,r2,1
  817b64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  817b68:	00000d06 	br	817ba0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  817b6c:	e0bffc17 	ldw	r2,-16(fp)
  817b70:	10800217 	ldw	r2,8(r2)
  817b74:	e0fffd17 	ldw	r3,-12(fp)
  817b78:	180d883a 	mov	r6,r3
  817b7c:	e17ffe17 	ldw	r5,-8(fp)
  817b80:	1009883a 	mov	r4,r2
  817b84:	0817ee80 	call	817ee8 <memcmp>
  817b88:	1000021e 	bne	r2,zero,817b94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  817b8c:	e0bffc17 	ldw	r2,-16(fp)
  817b90:	00000706 	br	817bb0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  817b94:	e0bffc17 	ldw	r2,-16(fp)
  817b98:	10800017 	ldw	r2,0(r2)
  817b9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  817ba0:	e0fffc17 	ldw	r3,-16(fp)
  817ba4:	e0bfff17 	ldw	r2,-4(fp)
  817ba8:	18bff01e 	bne	r3,r2,817b6c <__alt_mem_onchip_mem+0xff80fb6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  817bac:	0005883a 	mov	r2,zero
}
  817bb0:	e037883a 	mov	sp,fp
  817bb4:	dfc00117 	ldw	ra,4(sp)
  817bb8:	df000017 	ldw	fp,0(sp)
  817bbc:	dec00204 	addi	sp,sp,8
  817bc0:	f800283a 	ret

00817bc4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  817bc4:	defffb04 	addi	sp,sp,-20
  817bc8:	dfc00415 	stw	ra,16(sp)
  817bcc:	df000315 	stw	fp,12(sp)
  817bd0:	df000304 	addi	fp,sp,12
  817bd4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  817bd8:	d0a00717 	ldw	r2,-32740(gp)
  817bdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  817be0:	00003106 	br	817ca8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  817be4:	e0bffd17 	ldw	r2,-12(fp)
  817be8:	10800217 	ldw	r2,8(r2)
  817bec:	1009883a 	mov	r4,r2
  817bf0:	080f76c0 	call	80f76c <strlen>
  817bf4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  817bf8:	e0bffd17 	ldw	r2,-12(fp)
  817bfc:	10c00217 	ldw	r3,8(r2)
  817c00:	e0bffe17 	ldw	r2,-8(fp)
  817c04:	10bfffc4 	addi	r2,r2,-1
  817c08:	1885883a 	add	r2,r3,r2
  817c0c:	10800003 	ldbu	r2,0(r2)
  817c10:	10803fcc 	andi	r2,r2,255
  817c14:	1080201c 	xori	r2,r2,128
  817c18:	10bfe004 	addi	r2,r2,-128
  817c1c:	10800bd8 	cmpnei	r2,r2,47
  817c20:	1000031e 	bne	r2,zero,817c30 <alt_find_file+0x6c>
    {
      len -= 1;
  817c24:	e0bffe17 	ldw	r2,-8(fp)
  817c28:	10bfffc4 	addi	r2,r2,-1
  817c2c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  817c30:	e0bffe17 	ldw	r2,-8(fp)
  817c34:	e0ffff17 	ldw	r3,-4(fp)
  817c38:	1885883a 	add	r2,r3,r2
  817c3c:	10800003 	ldbu	r2,0(r2)
  817c40:	10803fcc 	andi	r2,r2,255
  817c44:	1080201c 	xori	r2,r2,128
  817c48:	10bfe004 	addi	r2,r2,-128
  817c4c:	10800be0 	cmpeqi	r2,r2,47
  817c50:	1000081e 	bne	r2,zero,817c74 <alt_find_file+0xb0>
  817c54:	e0bffe17 	ldw	r2,-8(fp)
  817c58:	e0ffff17 	ldw	r3,-4(fp)
  817c5c:	1885883a 	add	r2,r3,r2
  817c60:	10800003 	ldbu	r2,0(r2)
  817c64:	10803fcc 	andi	r2,r2,255
  817c68:	1080201c 	xori	r2,r2,128
  817c6c:	10bfe004 	addi	r2,r2,-128
  817c70:	10000a1e 	bne	r2,zero,817c9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  817c74:	e0bffd17 	ldw	r2,-12(fp)
  817c78:	10800217 	ldw	r2,8(r2)
  817c7c:	e0fffe17 	ldw	r3,-8(fp)
  817c80:	180d883a 	mov	r6,r3
  817c84:	e17fff17 	ldw	r5,-4(fp)
  817c88:	1009883a 	mov	r4,r2
  817c8c:	0817ee80 	call	817ee8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  817c90:	1000021e 	bne	r2,zero,817c9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  817c94:	e0bffd17 	ldw	r2,-12(fp)
  817c98:	00000706 	br	817cb8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  817c9c:	e0bffd17 	ldw	r2,-12(fp)
  817ca0:	10800017 	ldw	r2,0(r2)
  817ca4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  817ca8:	e0fffd17 	ldw	r3,-12(fp)
  817cac:	d0a00704 	addi	r2,gp,-32740
  817cb0:	18bfcc1e 	bne	r3,r2,817be4 <__alt_mem_onchip_mem+0xff80fbe4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  817cb4:	0005883a 	mov	r2,zero
}
  817cb8:	e037883a 	mov	sp,fp
  817cbc:	dfc00117 	ldw	ra,4(sp)
  817cc0:	df000017 	ldw	fp,0(sp)
  817cc4:	dec00204 	addi	sp,sp,8
  817cc8:	f800283a 	ret

00817ccc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  817ccc:	defffc04 	addi	sp,sp,-16
  817cd0:	df000315 	stw	fp,12(sp)
  817cd4:	df000304 	addi	fp,sp,12
  817cd8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  817cdc:	00bffa04 	movi	r2,-24
  817ce0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  817ce4:	e03ffd15 	stw	zero,-12(fp)
  817ce8:	00001906 	br	817d50 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  817cec:	008020b4 	movhi	r2,130
  817cf0:	10a42304 	addi	r2,r2,-28532
  817cf4:	e0fffd17 	ldw	r3,-12(fp)
  817cf8:	18c00324 	muli	r3,r3,12
  817cfc:	10c5883a 	add	r2,r2,r3
  817d00:	10800017 	ldw	r2,0(r2)
  817d04:	10000f1e 	bne	r2,zero,817d44 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  817d08:	008020b4 	movhi	r2,130
  817d0c:	10a42304 	addi	r2,r2,-28532
  817d10:	e0fffd17 	ldw	r3,-12(fp)
  817d14:	18c00324 	muli	r3,r3,12
  817d18:	10c5883a 	add	r2,r2,r3
  817d1c:	e0ffff17 	ldw	r3,-4(fp)
  817d20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  817d24:	d0e00b17 	ldw	r3,-32724(gp)
  817d28:	e0bffd17 	ldw	r2,-12(fp)
  817d2c:	1880020e 	bge	r3,r2,817d38 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  817d30:	e0bffd17 	ldw	r2,-12(fp)
  817d34:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
  817d38:	e0bffd17 	ldw	r2,-12(fp)
  817d3c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  817d40:	00000606 	br	817d5c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  817d44:	e0bffd17 	ldw	r2,-12(fp)
  817d48:	10800044 	addi	r2,r2,1
  817d4c:	e0bffd15 	stw	r2,-12(fp)
  817d50:	e0bffd17 	ldw	r2,-12(fp)
  817d54:	10800810 	cmplti	r2,r2,32
  817d58:	103fe41e 	bne	r2,zero,817cec <__alt_mem_onchip_mem+0xff80fcec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  817d5c:	e0bffe17 	ldw	r2,-8(fp)
}
  817d60:	e037883a 	mov	sp,fp
  817d64:	df000017 	ldw	fp,0(sp)
  817d68:	dec00104 	addi	sp,sp,4
  817d6c:	f800283a 	ret

00817d70 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  817d70:	defffb04 	addi	sp,sp,-20
  817d74:	df000415 	stw	fp,16(sp)
  817d78:	df000404 	addi	fp,sp,16
  817d7c:	e13ffe15 	stw	r4,-8(fp)
  817d80:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  817d84:	e0bfff17 	ldw	r2,-4(fp)
  817d88:	10840070 	cmpltui	r2,r2,4097
  817d8c:	1000021e 	bne	r2,zero,817d98 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  817d90:	00840004 	movi	r2,4096
  817d94:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  817d98:	e0fffe17 	ldw	r3,-8(fp)
  817d9c:	e0bfff17 	ldw	r2,-4(fp)
  817da0:	1885883a 	add	r2,r3,r2
  817da4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  817da8:	e0bffe17 	ldw	r2,-8(fp)
  817dac:	e0bffc15 	stw	r2,-16(fp)
  817db0:	00000506 	br	817dc8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  817db4:	e0bffc17 	ldw	r2,-16(fp)
  817db8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  817dbc:	e0bffc17 	ldw	r2,-16(fp)
  817dc0:	10800804 	addi	r2,r2,32
  817dc4:	e0bffc15 	stw	r2,-16(fp)
  817dc8:	e0fffc17 	ldw	r3,-16(fp)
  817dcc:	e0bffd17 	ldw	r2,-12(fp)
  817dd0:	18bff836 	bltu	r3,r2,817db4 <__alt_mem_onchip_mem+0xff80fdb4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  817dd4:	e0bffe17 	ldw	r2,-8(fp)
  817dd8:	108007cc 	andi	r2,r2,31
  817ddc:	10000226 	beq	r2,zero,817de8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  817de0:	e0bffc17 	ldw	r2,-16(fp)
  817de4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  817de8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  817dec:	0001883a 	nop
  817df0:	e037883a 	mov	sp,fp
  817df4:	df000017 	ldw	fp,0(sp)
  817df8:	dec00104 	addi	sp,sp,4
  817dfc:	f800283a 	ret

00817e00 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  817e00:	defffe04 	addi	sp,sp,-8
  817e04:	df000115 	stw	fp,4(sp)
  817e08:	df000104 	addi	fp,sp,4
  817e0c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  817e10:	e0bfff17 	ldw	r2,-4(fp)
  817e14:	10bffe84 	addi	r2,r2,-6
  817e18:	10c00428 	cmpgeui	r3,r2,16
  817e1c:	18001a1e 	bne	r3,zero,817e88 <alt_exception_cause_generated_bad_addr+0x88>
  817e20:	100690ba 	slli	r3,r2,2
  817e24:	00802074 	movhi	r2,129
  817e28:	109f8e04 	addi	r2,r2,32312
  817e2c:	1885883a 	add	r2,r3,r2
  817e30:	10800017 	ldw	r2,0(r2)
  817e34:	1000683a 	jmp	r2
  817e38:	00817e78 	rdprs	r2,zero,1529
  817e3c:	00817e78 	rdprs	r2,zero,1529
  817e40:	00817e88 	cmpgei	r2,zero,1530
  817e44:	00817e88 	cmpgei	r2,zero,1530
  817e48:	00817e88 	cmpgei	r2,zero,1530
  817e4c:	00817e78 	rdprs	r2,zero,1529
  817e50:	00817e80 	call	817e8 <__alt_mem_sdram-0x77e818>
  817e54:	00817e88 	cmpgei	r2,zero,1530
  817e58:	00817e78 	rdprs	r2,zero,1529
  817e5c:	00817e78 	rdprs	r2,zero,1529
  817e60:	00817e88 	cmpgei	r2,zero,1530
  817e64:	00817e78 	rdprs	r2,zero,1529
  817e68:	00817e80 	call	817e8 <__alt_mem_sdram-0x77e818>
  817e6c:	00817e88 	cmpgei	r2,zero,1530
  817e70:	00817e88 	cmpgei	r2,zero,1530
  817e74:	00817e78 	rdprs	r2,zero,1529
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  817e78:	00800044 	movi	r2,1
  817e7c:	00000306 	br	817e8c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  817e80:	0005883a 	mov	r2,zero
  817e84:	00000106 	br	817e8c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  817e88:	0005883a 	mov	r2,zero
  }
}
  817e8c:	e037883a 	mov	sp,fp
  817e90:	df000017 	ldw	fp,0(sp)
  817e94:	dec00104 	addi	sp,sp,4
  817e98:	f800283a 	ret

00817e9c <atexit>:
  817e9c:	200b883a 	mov	r5,r4
  817ea0:	000f883a 	mov	r7,zero
  817ea4:	000d883a 	mov	r6,zero
  817ea8:	0009883a 	mov	r4,zero
  817eac:	0817f641 	jmpi	817f64 <__register_exitproc>

00817eb0 <exit>:
  817eb0:	defffe04 	addi	sp,sp,-8
  817eb4:	000b883a 	mov	r5,zero
  817eb8:	dc000015 	stw	r16,0(sp)
  817ebc:	dfc00115 	stw	ra,4(sp)
  817ec0:	2021883a 	mov	r16,r4
  817ec4:	081807c0 	call	81807c <__call_exitprocs>
  817ec8:	008020b4 	movhi	r2,130
  817ecc:	10a91504 	addi	r2,r2,-23468
  817ed0:	11000017 	ldw	r4,0(r2)
  817ed4:	20800f17 	ldw	r2,60(r4)
  817ed8:	10000126 	beq	r2,zero,817ee0 <exit+0x30>
  817edc:	103ee83a 	callr	r2
  817ee0:	8009883a 	mov	r4,r16
  817ee4:	08181fc0 	call	8181fc <_exit>

00817ee8 <memcmp>:
  817ee8:	01c000c4 	movi	r7,3
  817eec:	3980192e 	bgeu	r7,r6,817f54 <memcmp+0x6c>
  817ef0:	2144b03a 	or	r2,r4,r5
  817ef4:	11c4703a 	and	r2,r2,r7
  817ef8:	10000f26 	beq	r2,zero,817f38 <memcmp+0x50>
  817efc:	20800003 	ldbu	r2,0(r4)
  817f00:	28c00003 	ldbu	r3,0(r5)
  817f04:	10c0151e 	bne	r2,r3,817f5c <memcmp+0x74>
  817f08:	31bfff84 	addi	r6,r6,-2
  817f0c:	01ffffc4 	movi	r7,-1
  817f10:	00000406 	br	817f24 <memcmp+0x3c>
  817f14:	20800003 	ldbu	r2,0(r4)
  817f18:	28c00003 	ldbu	r3,0(r5)
  817f1c:	31bfffc4 	addi	r6,r6,-1
  817f20:	10c00e1e 	bne	r2,r3,817f5c <memcmp+0x74>
  817f24:	21000044 	addi	r4,r4,1
  817f28:	29400044 	addi	r5,r5,1
  817f2c:	31fff91e 	bne	r6,r7,817f14 <__alt_mem_onchip_mem+0xff80ff14>
  817f30:	0005883a 	mov	r2,zero
  817f34:	f800283a 	ret
  817f38:	20c00017 	ldw	r3,0(r4)
  817f3c:	28800017 	ldw	r2,0(r5)
  817f40:	18bfee1e 	bne	r3,r2,817efc <__alt_mem_onchip_mem+0xff80fefc>
  817f44:	31bfff04 	addi	r6,r6,-4
  817f48:	21000104 	addi	r4,r4,4
  817f4c:	29400104 	addi	r5,r5,4
  817f50:	39bff936 	bltu	r7,r6,817f38 <__alt_mem_onchip_mem+0xff80ff38>
  817f54:	303fe91e 	bne	r6,zero,817efc <__alt_mem_onchip_mem+0xff80fefc>
  817f58:	003ff506 	br	817f30 <__alt_mem_onchip_mem+0xff80ff30>
  817f5c:	10c5c83a 	sub	r2,r2,r3
  817f60:	f800283a 	ret

00817f64 <__register_exitproc>:
  817f64:	defffa04 	addi	sp,sp,-24
  817f68:	dc000315 	stw	r16,12(sp)
  817f6c:	040020b4 	movhi	r16,130
  817f70:	84291504 	addi	r16,r16,-23468
  817f74:	80c00017 	ldw	r3,0(r16)
  817f78:	dc400415 	stw	r17,16(sp)
  817f7c:	dfc00515 	stw	ra,20(sp)
  817f80:	18805217 	ldw	r2,328(r3)
  817f84:	2023883a 	mov	r17,r4
  817f88:	10003726 	beq	r2,zero,818068 <__register_exitproc+0x104>
  817f8c:	10c00117 	ldw	r3,4(r2)
  817f90:	010007c4 	movi	r4,31
  817f94:	20c00e16 	blt	r4,r3,817fd0 <__register_exitproc+0x6c>
  817f98:	1a000044 	addi	r8,r3,1
  817f9c:	8800221e 	bne	r17,zero,818028 <__register_exitproc+0xc4>
  817fa0:	18c00084 	addi	r3,r3,2
  817fa4:	18c7883a 	add	r3,r3,r3
  817fa8:	18c7883a 	add	r3,r3,r3
  817fac:	12000115 	stw	r8,4(r2)
  817fb0:	10c7883a 	add	r3,r2,r3
  817fb4:	19400015 	stw	r5,0(r3)
  817fb8:	0005883a 	mov	r2,zero
  817fbc:	dfc00517 	ldw	ra,20(sp)
  817fc0:	dc400417 	ldw	r17,16(sp)
  817fc4:	dc000317 	ldw	r16,12(sp)
  817fc8:	dec00604 	addi	sp,sp,24
  817fcc:	f800283a 	ret
  817fd0:	00800034 	movhi	r2,0
  817fd4:	10800004 	addi	r2,r2,0
  817fd8:	10002626 	beq	r2,zero,818074 <__register_exitproc+0x110>
  817fdc:	01006404 	movi	r4,400
  817fe0:	d9400015 	stw	r5,0(sp)
  817fe4:	d9800115 	stw	r6,4(sp)
  817fe8:	d9c00215 	stw	r7,8(sp)
  817fec:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  817ff0:	d9400017 	ldw	r5,0(sp)
  817ff4:	d9800117 	ldw	r6,4(sp)
  817ff8:	d9c00217 	ldw	r7,8(sp)
  817ffc:	10001d26 	beq	r2,zero,818074 <__register_exitproc+0x110>
  818000:	81000017 	ldw	r4,0(r16)
  818004:	10000115 	stw	zero,4(r2)
  818008:	02000044 	movi	r8,1
  81800c:	22405217 	ldw	r9,328(r4)
  818010:	0007883a 	mov	r3,zero
  818014:	12400015 	stw	r9,0(r2)
  818018:	20805215 	stw	r2,328(r4)
  81801c:	10006215 	stw	zero,392(r2)
  818020:	10006315 	stw	zero,396(r2)
  818024:	883fde26 	beq	r17,zero,817fa0 <__alt_mem_onchip_mem+0xff80ffa0>
  818028:	18c9883a 	add	r4,r3,r3
  81802c:	2109883a 	add	r4,r4,r4
  818030:	1109883a 	add	r4,r2,r4
  818034:	21802215 	stw	r6,136(r4)
  818038:	01800044 	movi	r6,1
  81803c:	12406217 	ldw	r9,392(r2)
  818040:	30cc983a 	sll	r6,r6,r3
  818044:	4992b03a 	or	r9,r9,r6
  818048:	12406215 	stw	r9,392(r2)
  81804c:	21c04215 	stw	r7,264(r4)
  818050:	01000084 	movi	r4,2
  818054:	893fd21e 	bne	r17,r4,817fa0 <__alt_mem_onchip_mem+0xff80ffa0>
  818058:	11006317 	ldw	r4,396(r2)
  81805c:	218cb03a 	or	r6,r4,r6
  818060:	11806315 	stw	r6,396(r2)
  818064:	003fce06 	br	817fa0 <__alt_mem_onchip_mem+0xff80ffa0>
  818068:	18805304 	addi	r2,r3,332
  81806c:	18805215 	stw	r2,328(r3)
  818070:	003fc606 	br	817f8c <__alt_mem_onchip_mem+0xff80ff8c>
  818074:	00bfffc4 	movi	r2,-1
  818078:	003fd006 	br	817fbc <__alt_mem_onchip_mem+0xff80ffbc>

0081807c <__call_exitprocs>:
  81807c:	defff504 	addi	sp,sp,-44
  818080:	df000915 	stw	fp,36(sp)
  818084:	dd400615 	stw	r21,24(sp)
  818088:	dc800315 	stw	r18,12(sp)
  81808c:	dfc00a15 	stw	ra,40(sp)
  818090:	ddc00815 	stw	r23,32(sp)
  818094:	dd800715 	stw	r22,28(sp)
  818098:	dd000515 	stw	r20,20(sp)
  81809c:	dcc00415 	stw	r19,16(sp)
  8180a0:	dc400215 	stw	r17,8(sp)
  8180a4:	dc000115 	stw	r16,4(sp)
  8180a8:	d9000015 	stw	r4,0(sp)
  8180ac:	2839883a 	mov	fp,r5
  8180b0:	04800044 	movi	r18,1
  8180b4:	057fffc4 	movi	r21,-1
  8180b8:	008020b4 	movhi	r2,130
  8180bc:	10a91504 	addi	r2,r2,-23468
  8180c0:	12000017 	ldw	r8,0(r2)
  8180c4:	45005217 	ldw	r20,328(r8)
  8180c8:	44c05204 	addi	r19,r8,328
  8180cc:	a0001c26 	beq	r20,zero,818140 <__call_exitprocs+0xc4>
  8180d0:	a0800117 	ldw	r2,4(r20)
  8180d4:	15ffffc4 	addi	r23,r2,-1
  8180d8:	b8000d16 	blt	r23,zero,818110 <__call_exitprocs+0x94>
  8180dc:	14000044 	addi	r16,r2,1
  8180e0:	8421883a 	add	r16,r16,r16
  8180e4:	8421883a 	add	r16,r16,r16
  8180e8:	84402004 	addi	r17,r16,128
  8180ec:	a463883a 	add	r17,r20,r17
  8180f0:	a421883a 	add	r16,r20,r16
  8180f4:	e0001e26 	beq	fp,zero,818170 <__call_exitprocs+0xf4>
  8180f8:	80804017 	ldw	r2,256(r16)
  8180fc:	e0801c26 	beq	fp,r2,818170 <__call_exitprocs+0xf4>
  818100:	bdffffc4 	addi	r23,r23,-1
  818104:	843fff04 	addi	r16,r16,-4
  818108:	8c7fff04 	addi	r17,r17,-4
  81810c:	bd7ff91e 	bne	r23,r21,8180f4 <__alt_mem_onchip_mem+0xff8100f4>
  818110:	00800034 	movhi	r2,0
  818114:	10800004 	addi	r2,r2,0
  818118:	10000926 	beq	r2,zero,818140 <__call_exitprocs+0xc4>
  81811c:	a0800117 	ldw	r2,4(r20)
  818120:	1000301e 	bne	r2,zero,8181e4 <__call_exitprocs+0x168>
  818124:	a0800017 	ldw	r2,0(r20)
  818128:	10003226 	beq	r2,zero,8181f4 <__call_exitprocs+0x178>
  81812c:	a009883a 	mov	r4,r20
  818130:	98800015 	stw	r2,0(r19)
  818134:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  818138:	9d000017 	ldw	r20,0(r19)
  81813c:	a03fe41e 	bne	r20,zero,8180d0 <__alt_mem_onchip_mem+0xff8100d0>
  818140:	dfc00a17 	ldw	ra,40(sp)
  818144:	df000917 	ldw	fp,36(sp)
  818148:	ddc00817 	ldw	r23,32(sp)
  81814c:	dd800717 	ldw	r22,28(sp)
  818150:	dd400617 	ldw	r21,24(sp)
  818154:	dd000517 	ldw	r20,20(sp)
  818158:	dcc00417 	ldw	r19,16(sp)
  81815c:	dc800317 	ldw	r18,12(sp)
  818160:	dc400217 	ldw	r17,8(sp)
  818164:	dc000117 	ldw	r16,4(sp)
  818168:	dec00b04 	addi	sp,sp,44
  81816c:	f800283a 	ret
  818170:	a0800117 	ldw	r2,4(r20)
  818174:	80c00017 	ldw	r3,0(r16)
  818178:	10bfffc4 	addi	r2,r2,-1
  81817c:	15c01426 	beq	r2,r23,8181d0 <__call_exitprocs+0x154>
  818180:	80000015 	stw	zero,0(r16)
  818184:	183fde26 	beq	r3,zero,818100 <__alt_mem_onchip_mem+0xff810100>
  818188:	95c8983a 	sll	r4,r18,r23
  81818c:	a0806217 	ldw	r2,392(r20)
  818190:	a5800117 	ldw	r22,4(r20)
  818194:	2084703a 	and	r2,r4,r2
  818198:	10000b26 	beq	r2,zero,8181c8 <__call_exitprocs+0x14c>
  81819c:	a0806317 	ldw	r2,396(r20)
  8181a0:	2088703a 	and	r4,r4,r2
  8181a4:	20000c1e 	bne	r4,zero,8181d8 <__call_exitprocs+0x15c>
  8181a8:	89400017 	ldw	r5,0(r17)
  8181ac:	d9000017 	ldw	r4,0(sp)
  8181b0:	183ee83a 	callr	r3
  8181b4:	a0800117 	ldw	r2,4(r20)
  8181b8:	15bfbf1e 	bne	r2,r22,8180b8 <__alt_mem_onchip_mem+0xff8100b8>
  8181bc:	98800017 	ldw	r2,0(r19)
  8181c0:	153fcf26 	beq	r2,r20,818100 <__alt_mem_onchip_mem+0xff810100>
  8181c4:	003fbc06 	br	8180b8 <__alt_mem_onchip_mem+0xff8100b8>
  8181c8:	183ee83a 	callr	r3
  8181cc:	003ff906 	br	8181b4 <__alt_mem_onchip_mem+0xff8101b4>
  8181d0:	a5c00115 	stw	r23,4(r20)
  8181d4:	003feb06 	br	818184 <__alt_mem_onchip_mem+0xff810184>
  8181d8:	89000017 	ldw	r4,0(r17)
  8181dc:	183ee83a 	callr	r3
  8181e0:	003ff406 	br	8181b4 <__alt_mem_onchip_mem+0xff8101b4>
  8181e4:	a0800017 	ldw	r2,0(r20)
  8181e8:	a027883a 	mov	r19,r20
  8181ec:	1029883a 	mov	r20,r2
  8181f0:	003fb606 	br	8180cc <__alt_mem_onchip_mem+0xff8100cc>
  8181f4:	0005883a 	mov	r2,zero
  8181f8:	003ffb06 	br	8181e8 <__alt_mem_onchip_mem+0xff8101e8>

008181fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8181fc:	defffd04 	addi	sp,sp,-12
  818200:	df000215 	stw	fp,8(sp)
  818204:	df000204 	addi	fp,sp,8
  818208:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81820c:	0001883a 	nop
  818210:	e0bfff17 	ldw	r2,-4(fp)
  818214:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  818218:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81821c:	10000226 	beq	r2,zero,818228 <_exit+0x2c>
    ALT_SIM_FAIL();
  818220:	002af070 	cmpltui	zero,zero,43969
  818224:	00000106 	br	81822c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  818228:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81822c:	003fff06 	br	81822c <__alt_mem_onchip_mem+0xff81022c>
