
303_real_real.elf:     file format elf32-littlenios2
303_real_real.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010004 memsz 0x00010004 flags r-x
    LOAD off    0x00011024 vaddr 0x00810024 paddr 0x00811c80 align 2**12
         filesz 0x00001c5c memsz 0x00001c5c flags rw-
    LOAD off    0x000138dc vaddr 0x008138dc paddr 0x008138dc align 2**12
         filesz 0x00000000 memsz 0x000001bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f9f8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003e8  0080fc3c  0080fc3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c5c  00810024  00811c80  00011024  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001bc  008138dc  008138dc  000138dc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00813a98  00813a98  00012c80  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00012c80  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012c80  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c60  00000000  00000000  00012ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001bc36  00000000  00000000  00013908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000747f  00000000  00000000  0002f53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a05f  00000000  00000000  000369bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001cd4  00000000  00000000  00040a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b85  00000000  00000000  000426f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007ba8  00000000  00000000  00046275  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0004de20  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000ca8  00000000  00000000  0004de80  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000519e1  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000519e4  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000519e7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000519e8  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  000519e9  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  000519f2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  000519fb  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00051a04  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001d  00000000  00000000  00051a10  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  00051a2d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080fc3c l    d  .rodata	00000000 .rodata
00810024 l    d  .rwdata	00000000 .rwdata
008138dc l    d  .bss	00000000 .bss
00813a98 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../303_real_real_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 c_heart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 scchart_heart.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00808ec0 l     F .text	00000008 __fp_unlock
00808ed4 l     F .text	0000019c __sinit.part.1
00809070 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00810024 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080bc48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080bd54 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080bd80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080be6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080bf4c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080c038 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080c20c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00811c68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080c5fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080c730 l     F .text	00000034 alt_dev_reg
008109f8 l     O .rwdata	00001060 jtag_uart
00811a58 l     O .rwdata	00000120 lcd
00811b78 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ca58 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080cc64 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00811c74 l     O .rwdata	00000004 colstart
0080d29c l     F .text	000000b8 lcd_write_command
0080d354 l     F .text	000000d8 lcd_write_data
0080d42c l     F .text	000000d0 lcd_clear_screen
0080d4fc l     F .text	000001ec lcd_repaint_screen
0080d6e8 l     F .text	000000cc lcd_scroll_up
0080d7b4 l     F .text	000002ac lcd_handle_escape
0080df38 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080e178 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080e428 l     F .text	0000009c altera_avalon_uart_irq
0080e4c4 l     F .text	000000e4 altera_avalon_uart_rxirq
0080e5a8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080e744 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080e95c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080eb8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080f000 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080f140 l     F .text	0000003c alt_get_errno
0080f17c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080fea3 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081390c g     O .bss	00000004 alt_instruction_exception_handler
0080b914 g     F .text	00000054 _isatty_r
0080c148 g     F .text	0000007c alt_main
00808d54 g     F .text	000000c0 _puts_r
00813998 g     O .bss	00000100 alt_irq
0080b63c g     F .text	00000060 _lseek_r
00811c80 g       *ABS*	00000000 __flash_rwdata_start
00813a98 g       *ABS*	00000000 __alt_heap_start
0080abf0 g     F .text	0000005c __sseek
00809210 g     F .text	00000010 __sinit
00809078 g     F .text	00000068 __sfmoreglue
0080c1e8 g     F .text	00000024 __malloc_unlock
0080a2dc g     F .text	0000015c memmove
008091f8 g     F .text	00000018 _cleanup
00808148 g     F .text	000000dc .hidden __gtdf2
0080f3c4 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080b8b8 g     F .text	0000005c _fstat_r
008138f0 g     O .bss	00000004 errno
0080ab6c g     F .text	00000008 __seofread
008138f8 g     O .bss	00000004 alt_argv
00811c3d g     O .rwdata	00000001 ignore_a
00819c3c g       *ABS*	00000000 _gp
0080f394 g     F .text	00000030 usleep
008073f0 g     F .text	00000220 reset
00810878 g     O .rwdata	00000180 alt_fd_list
0080f540 g     F .text	00000090 alt_find_dev
0080a194 g     F .text	00000148 memcpy
00808ec8 g     F .text	0000000c _cleanup_r
00808c14 g     F .text	000000dc .hidden __floatsidf
0080f0c4 g     F .text	0000007c alt_io_redirect
00808224 g     F .text	000000f4 .hidden __ltdf2
0080fc3c g       *ABS*	00000000 __DTOR_END__
00800384 g     F .text	00000024 PVARP_interrupt
00808e14 g     F .text	00000014 puts
0080f80c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080ce5c g     F .text	0000021c altera_avalon_jtag_uart_read
0080ba60 g     F .text	00000064 .hidden __udivsi3
0080bea8 g     F .text	000000a4 isatty
008138df g     O .bss	00000001 need_v_pulse
0080f77c g     F .text	00000090 alt_icache_flush
008138ec g     O .bss	00000004 __malloc_top_pad
00809260 g     F .text	000004bc __sfvwrite_r
0080aac4 g     F .text	00000054 _sbrk_r
008138e3 g     O .bss	00000001 char_recieve
0080b858 g     F .text	00000060 _read_r
00811c60 g     O .rwdata	00000004 alt_max_fd
0080ae5c g     F .text	000000f0 _fclose_r
0080b1d8 g     F .text	00000030 fflush
008138e8 g     O .bss	00000004 __malloc_max_sbrked_mem
008138e2 g     O .bss	00000001 ap
0080789c g     F .text	000008ac .hidden __adddf3
0080c074 g     F .text	000000d4 lseek
00811c40 g     O .rwdata	00000004 _global_impure_ptr
0080a560 g     F .text	00000564 _realloc_r
00813a98 g       *ABS*	00000000 __bss_end
0080ef10 g     F .text	000000f0 alt_iic_isr_register
0080c4f4 g     F .text	00000108 alt_tick
0080e37c g     F .text	000000ac altera_avalon_uart_init
00809230 g     F .text	00000018 __fp_lock_all
0080eec4 g     F .text	0000004c alt_ic_irq_enabled
0080c458 g     F .text	0000009c alt_alarm_stop
00813908 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00810850 g     O .rwdata	00000028 alt_dev_null
008138e0 g     O .bss	00000001 started
0080eb44 g     F .text	00000048 alt_dcache_flush_all
008138dc g     O .bss	00000001 can_vpulse
00811c80 g       *ABS*	00000000 __ram_rwdata_end
00811c58 g     O .rwdata	00000008 alt_dev_list
0080c638 g     F .text	000000f8 write
00810024 g       *ABS*	00000000 __ram_rodata_end
0080bdbc g     F .text	000000b0 fstat
00808224 g     F .text	000000f4 .hidden __ledf2
00800530 g     F .text	00000050 uart_tx
0080bac4 g     F .text	00000058 .hidden __umodsi3
00800290 g     F .text	000000f4 start_cycle
00813a98 g       *ABS*	00000000 end
0080da60 g     F .text	000004d8 altera_avalon_lcd_16207_write
0080e998 g     F .text	000001ac altera_avalon_uart_write
0080c998 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080fc3c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080e1f0 g     F .text	0000007c alt_avalon_timer_sc_init
0080e2cc g     F .text	00000060 altera_avalon_uart_write_fd
00808cf0 g     F .text	00000064 .hidden __clzsi2
0080e32c g     F .text	00000050 altera_avalon_uart_close_fd
0080d078 g     F .text	00000224 altera_avalon_jtag_uart_write
00809220 g     F .text	00000004 __sfp_lock_acquire
0080a0b0 g     F .text	000000e4 memchr
0080b32c g     F .text	00000310 _free_r
0080fa88 g     F .text	00000180 __call_exitprocs
00811c48 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00813900 g     O .bss	00000004 _alt_tick_rate
00813904 g     O .bss	00000004 _alt_nticks
0080c248 g     F .text	000000fc read
0080c79c g     F .text	00000098 alt_sys_init
00813938 g     O .bss	00000018 URI_LRI
0080f970 g     F .text	00000118 __register_exitproc
0080cd04 g     F .text	00000068 altera_avalon_jtag_uart_close
00810024 g       *ABS*	00000000 __ram_rwdata_start
0080fc3c g       *ABS*	00000000 __ram_rodata_start
00813910 g     O .bss	00000028 __malloc_current_mallinfo
00800580 g     F .text	00000058 uart_rx
0080c834 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080f6d8 g     F .text	000000a4 alt_get_fd
0080f3e8 g     F .text	00000158 alt_busy_sleep
0080ae08 g     F .text	00000054 _close_r
008003a8 g     F .text	00000024 VRP_interrupt
0080f8f4 g     F .text	0000007c memcmp
0080c8f4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00813a98 g       *ABS*	00000000 __alt_stack_base
0080c944 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080acb4 g     F .text	00000154 __swsetup_r
00807610 g     F .text	0000028c tick
008090e0 g     F .text	00000118 __sfp
00810448 g     O .rwdata	00000408 __malloc_av_
0080922c g     F .text	00000004 __sinit_lock_release
0080ab18 g     F .text	00000054 __sread
0080f5d0 g     F .text	00000108 alt_find_file
00811c3c g     O .rwdata	00000001 ignore_v
0080ebc8 g     F .text	000000a4 alt_dev_llist_insert
0080c1c4 g     F .text	00000024 __malloc_lock
0080c3a8 g     F .text	000000b0 sbrk
0080b17c g     F .text	0000005c _fflush_r
008138dc g       *ABS*	00000000 __bss_start
0080a438 g     F .text	00000128 memset
008005d8 g     F .text	00000238 main
00813950 g     O .bss	00000018 VRP
008138fc g     O .bss	00000004 alt_envp
008138e4 g     O .bss	00000004 __malloc_max_total_mem
0080c894 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080dfe4 g     F .text	00000134 altera_avalon_lcd_16207_init
0080ac4c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080af4c g     F .text	00000014 fclose
008098a4 g     F .text	0000080c _malloc_r
00811c64 g     O .rwdata	00000004 alt_errno
008138e1 g     O .bss	00000001 vp
0080971c g     F .text	000000c4 _fwalk
0080b968 g     F .text	00000084 .hidden __divsi3
0080b208 g     F .text	00000124 _malloc_trim_r
0080fc3c g       *ABS*	00000000 __CTOR_END__
0080fc3c g       *ABS*	00000000 __flash_rodata_start
0080fc3c g       *ABS*	00000000 __DTOR_LIST__
0080c764 g     F .text	00000038 alt_irq_init
0080c344 g     F .text	00000064 alt_release_fd
008003cc g     F .text	00000054 URI_LRI_interrupt
0080fc56 g     O .rodata	00000100 .hidden __clz_tab
0080f8a8 g     F .text	00000014 atexit
00800420 g     F .text	00000070 AEI_AVI_interrupt
0080ac54 g     F .text	00000060 _write_r
00811c44 g     O .rwdata	00000004 _impure_ptr
008138f4 g     O .bss	00000004 alt_argc
0080af60 g     F .text	0000021c __sflush_r
0080eccc g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00809248 g     F .text	00000018 __fp_unlock_all
008138de g     O .bss	00000001 is_recent_a
0080e118 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00811c50 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00813968 g     O .bss	00000018 AEI_AVI
0080ed60 g     F .text	00000050 alt_ic_isr_register
00811c80 g       *ABS*	00000000 _edata
0080e26c g     F .text	00000060 altera_avalon_uart_read_fd
00813a98 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080cd6c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00800490 g     F .text	0000003c extern_v_interrupt
0080ee38 g     F .text	0000008c alt_ic_irq_disable
0080ab74 g     F .text	0000007c __swrite
00811c4c g     O .rwdata	00000004 __malloc_trim_threshold
0080f8bc g     F .text	00000038 exit
00813980 g     O .bss	00000018 PVARP
008097e0 g     F .text	000000c4 _fwalk_reent
0080b9ec g     F .text	00000074 .hidden __modsi3
00800810 g     F .text	00006be0 logic
00811c7c g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00809224 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008138dd g     O .bss	00000001 reset_cycle
0080fda2 g     O .rodata	00000101 _ctype_
0080e6f0 g     F .text	00000054 altera_avalon_uart_close
0080fc08 g     F .text	00000034 _exit
0080bb1c g     F .text	0000012c alt_alarm_start
0080b69c g     F .text	000001bc __smakebuf_r
00808e28 g     F .text	00000098 strlen
0080f240 g     F .text	00000154 open
00808148 g     F .text	000000dc .hidden __gedf2
0080ed2c g     F .text	00000034 alt_icache_flush_all
00811c78 g     O .rwdata	00000004 alt_priority_mask
0080edb0 g     F .text	00000088 alt_ic_irq_enable
0080e780 g     F .text	000001dc altera_avalon_uart_read
00808318 g     F .text	000008fc .hidden __subdf3
00811c6c g     O .rwdata	00000008 alt_alarm_list
0080ec6c g     F .text	00000060 _do_ctors
0080bc84 g     F .text	000000d0 close
0080bfb4 g     F .text	00000084 alt_load
008004cc g     F .text	00000064 extern_a_interrupt
00809228 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	108e6604 	addi	r2,r2,14744
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	108e6604 	addi	r2,r2,14744
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73417 	ldw	r2,-25392(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73417 	ldw	r2,-25392(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6a70f14 	ori	gp,gp,39996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	108e3714 	ori	r2,r2,14556

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18cea614 	ori	r3,r3,15000

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080bfb40 	call	80bfb4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080c1480 	call	80c148 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <start_cycle>:
volatile alt_u8 need_v_pulse = 0;
volatile alt_u8 started = 0;

volatile alt_u8 vp = 0, ap = 0;

void start_cycle(){
  800290:	defffe04 	addi	sp,sp,-8
  800294:	dfc00115 	stw	ra,4(sp)
  800298:	df000015 	stw	fp,0(sp)
  80029c:	d839883a 	mov	fp,sp
	if (started){
  8002a0:	d0a72903 	ldbu	r2,-25436(gp)
  8002a4:	10803fcc 	andi	r2,r2,255
  8002a8:	10000c26 	beq	r2,zero,8002dc <start_cycle+0x4c>
		alt_alarm_stop(&URI_LRI);
  8002ac:	01002074 	movhi	r4,129
  8002b0:	210e4e04 	addi	r4,r4,14648
  8002b4:	080c4580 	call	80c458 <alt_alarm_stop>
		alt_alarm_stop(&PVARP);
  8002b8:	01002074 	movhi	r4,129
  8002bc:	210e6004 	addi	r4,r4,14720
  8002c0:	080c4580 	call	80c458 <alt_alarm_stop>
		alt_alarm_stop(&VRP);
  8002c4:	01002074 	movhi	r4,129
  8002c8:	210e5404 	addi	r4,r4,14672
  8002cc:	080c4580 	call	80c458 <alt_alarm_stop>
		alt_alarm_stop(&AEI_AVI);
  8002d0:	01002074 	movhi	r4,129
  8002d4:	210e5a04 	addi	r4,r4,14696
  8002d8:	080c4580 	call	80c458 <alt_alarm_stop>
	}
	started = 1;
  8002dc:	00800044 	movi	r2,1
  8002e0:	d0a72905 	stb	r2,-25436(gp)
	alt_alarm_start(&URI_LRI, URI_VALUE, URI_LRI_interrupt, NULL);
  8002e4:	000f883a 	mov	r7,zero
  8002e8:	01802034 	movhi	r6,128
  8002ec:	3180f304 	addi	r6,r6,972
  8002f0:	0140e104 	movi	r5,900
  8002f4:	01002074 	movhi	r4,129
  8002f8:	210e4e04 	addi	r4,r4,14648
  8002fc:	080bb1c0 	call	80bb1c <alt_alarm_start>
	alt_alarm_start(&PVARP, PVARP_VALUE, PVARP_interrupt, NULL);
  800300:	000f883a 	mov	r7,zero
  800304:	01802034 	movhi	r6,128
  800308:	3180e104 	addi	r6,r6,900
  80030c:	01400c84 	movi	r5,50
  800310:	01002074 	movhi	r4,129
  800314:	210e6004 	addi	r4,r4,14720
  800318:	080bb1c0 	call	80bb1c <alt_alarm_start>
	alt_alarm_start(&VRP, VRP_VALUE, VRP_interrupt, NULL);
  80031c:	000f883a 	mov	r7,zero
  800320:	01802034 	movhi	r6,128
  800324:	3180ea04 	addi	r6,r6,936
  800328:	01402584 	movi	r5,150
  80032c:	01002074 	movhi	r4,129
  800330:	210e5404 	addi	r4,r4,14672
  800334:	080bb1c0 	call	80bb1c <alt_alarm_start>
	alt_alarm_start(&AEI_AVI, AEI_VALUE, AEI_AVI_interrupt, NULL);
  800338:	000f883a 	mov	r7,zero
  80033c:	01802034 	movhi	r6,128
  800340:	31810804 	addi	r6,r6,1056
  800344:	0140c804 	movi	r5,800
  800348:	01002074 	movhi	r4,129
  80034c:	210e5a04 	addi	r4,r4,14696
  800350:	080bb1c0 	call	80bb1c <alt_alarm_start>
	ignore_a = 1;
  800354:	00800044 	movi	r2,1
  800358:	d0a00045 	stb	r2,-32767(gp)
	ignore_v = 1;
  80035c:	00800044 	movi	r2,1
  800360:	d0a00005 	stb	r2,-32768(gp)
	can_vpulse = 0;
  800364:	d0272805 	stb	zero,-25440(gp)
	need_v_pulse = 0;
  800368:	d02728c5 	stb	zero,-25437(gp)
}
  80036c:	0001883a 	nop
  800370:	e037883a 	mov	sp,fp
  800374:	dfc00117 	ldw	ra,4(sp)
  800378:	df000017 	ldw	fp,0(sp)
  80037c:	dec00204 	addi	sp,sp,8
  800380:	f800283a 	ret

00800384 <PVARP_interrupt>:

alt_u32 PVARP_interrupt(){
  800384:	deffff04 	addi	sp,sp,-4
  800388:	df000015 	stw	fp,0(sp)
  80038c:	d839883a 	mov	fp,sp
	ignore_a = 0;
  800390:	d0200045 	stb	zero,-32767(gp)
	return LRI_VALUE; // value so it does not trigger when unwanted
  800394:	0080ed84 	movi	r2,950
}
  800398:	e037883a 	mov	sp,fp
  80039c:	df000017 	ldw	fp,0(sp)
  8003a0:	dec00104 	addi	sp,sp,4
  8003a4:	f800283a 	ret

008003a8 <VRP_interrupt>:

alt_u32 VRP_interrupt(){
  8003a8:	deffff04 	addi	sp,sp,-4
  8003ac:	df000015 	stw	fp,0(sp)
  8003b0:	d839883a 	mov	fp,sp
	ignore_v = 0;
  8003b4:	d0200005 	stb	zero,-32768(gp)
	return LRI_VALUE; // value so it does not trigger when unwanted
  8003b8:	0080ed84 	movi	r2,950
}
  8003bc:	e037883a 	mov	sp,fp
  8003c0:	df000017 	ldw	fp,0(sp)
  8003c4:	dec00104 	addi	sp,sp,4
  8003c8:	f800283a 	ret

008003cc <URI_LRI_interrupt>:

alt_u32 URI_LRI_interrupt(){
  8003cc:	deffff04 	addi	sp,sp,-4
  8003d0:	df000015 	stw	fp,0(sp)
  8003d4:	d839883a 	mov	fp,sp
	if (!can_vpulse){ // URI timeout
  8003d8:	d0a72803 	ldbu	r2,-25440(gp)
  8003dc:	10803fcc 	andi	r2,r2,255
  8003e0:	1000041e 	bne	r2,zero,8003f4 <URI_LRI_interrupt+0x28>
		can_vpulse = 1;
  8003e4:	00800044 	movi	r2,1
  8003e8:	d0a72805 	stb	r2,-25440(gp)
		return LRI_VALUE - URI_VALUE;
  8003ec:	00800c84 	movi	r2,50
  8003f0:	00000706 	br	800410 <URI_LRI_interrupt+0x44>
	} else { // LRI timeout
		vp = 1;
  8003f4:	00800044 	movi	r2,1
  8003f8:	d0a72945 	stb	r2,-25435(gp)
		is_recent_a = 0;
  8003fc:	d0272885 	stb	zero,-25438(gp)
		reset_cycle = 1;
  800400:	00800044 	movi	r2,1
  800404:	d0a72845 	stb	r2,-25439(gp)
		can_vpulse = 0;
  800408:	d0272805 	stb	zero,-25440(gp)
		return URI_VALUE;
  80040c:	0080e104 	movi	r2,900
	}
}
  800410:	e037883a 	mov	sp,fp
  800414:	df000017 	ldw	fp,0(sp)
  800418:	dec00104 	addi	sp,sp,4
  80041c:	f800283a 	ret

00800420 <AEI_AVI_interrupt>:

alt_u32 AEI_AVI_interrupt(){
  800420:	deffff04 	addi	sp,sp,-4
  800424:	df000015 	stw	fp,0(sp)
  800428:	d839883a 	mov	fp,sp
	if (is_recent_a){ // most recent is a a
  80042c:	d0a72883 	ldbu	r2,-25438(gp)
  800430:	10803fcc 	andi	r2,r2,255
  800434:	10000d26 	beq	r2,zero,80046c <AEI_AVI_interrupt+0x4c>
		if (can_vpulse){
  800438:	d0a72803 	ldbu	r2,-25440(gp)
  80043c:	10803fcc 	andi	r2,r2,255
  800440:	10000626 	beq	r2,zero,80045c <AEI_AVI_interrupt+0x3c>
			vp = 1;
  800444:	00800044 	movi	r2,1
  800448:	d0a72945 	stb	r2,-25435(gp)
			is_recent_a = 0;
  80044c:	d0272885 	stb	zero,-25438(gp)
			reset_cycle = 1;
  800450:	00800044 	movi	r2,1
  800454:	d0a72845 	stb	r2,-25439(gp)
  800458:	00000206 	br	800464 <AEI_AVI_interrupt+0x44>
		} else {
			need_v_pulse = 1;
  80045c:	00800044 	movi	r2,1
  800460:	d0a728c5 	stb	r2,-25437(gp)
		}
		return LRI_VALUE; // large value
  800464:	0080ed84 	movi	r2,950
  800468:	00000506 	br	800480 <AEI_AVI_interrupt+0x60>
	} else { // most recent is a v
		ap = 1;
  80046c:	00800044 	movi	r2,1
  800470:	d0a72985 	stb	r2,-25434(gp)
		is_recent_a = 1;
  800474:	00800044 	movi	r2,1
  800478:	d0a72885 	stb	r2,-25438(gp)
		return AVI_VALUE;
  80047c:	00804b04 	movi	r2,300
	}
}
  800480:	e037883a 	mov	sp,fp
  800484:	df000017 	ldw	fp,0(sp)
  800488:	dec00104 	addi	sp,sp,4
  80048c:	f800283a 	ret

00800490 <extern_v_interrupt>:

void extern_v_interrupt(){
  800490:	deffff04 	addi	sp,sp,-4
  800494:	df000015 	stw	fp,0(sp)
  800498:	d839883a 	mov	fp,sp
	if (!ignore_v){
  80049c:	d0a00003 	ldbu	r2,-32768(gp)
  8004a0:	10803fcc 	andi	r2,r2,255
  8004a4:	1000041e 	bne	r2,zero,8004b8 <extern_v_interrupt+0x28>
		can_vpulse = 0;
  8004a8:	d0272805 	stb	zero,-25440(gp)
		reset_cycle = 1;
  8004ac:	00800044 	movi	r2,1
  8004b0:	d0a72845 	stb	r2,-25439(gp)
		is_recent_a = 0;
  8004b4:	d0272885 	stb	zero,-25438(gp)
	}
}
  8004b8:	0001883a 	nop
  8004bc:	e037883a 	mov	sp,fp
  8004c0:	df000017 	ldw	fp,0(sp)
  8004c4:	dec00104 	addi	sp,sp,4
  8004c8:	f800283a 	ret

008004cc <extern_a_interrupt>:

void extern_a_interrupt(){
  8004cc:	defffe04 	addi	sp,sp,-8
  8004d0:	dfc00115 	stw	ra,4(sp)
  8004d4:	df000015 	stw	fp,0(sp)
  8004d8:	d839883a 	mov	fp,sp
	if (!ignore_a){
  8004dc:	d0a00043 	ldbu	r2,-32767(gp)
  8004e0:	10803fcc 	andi	r2,r2,255
  8004e4:	10000c1e 	bne	r2,zero,800518 <extern_a_interrupt+0x4c>
		alt_alarm_stop(&AEI_AVI);
  8004e8:	01002074 	movhi	r4,129
  8004ec:	210e5a04 	addi	r4,r4,14696
  8004f0:	080c4580 	call	80c458 <alt_alarm_stop>
		alt_alarm_start(&AEI_AVI, AVI_VALUE, AEI_AVI_interrupt, NULL);
  8004f4:	000f883a 	mov	r7,zero
  8004f8:	01802034 	movhi	r6,128
  8004fc:	31810804 	addi	r6,r6,1056
  800500:	01404b04 	movi	r5,300
  800504:	01002074 	movhi	r4,129
  800508:	210e5a04 	addi	r4,r4,14696
  80050c:	080bb1c0 	call	80bb1c <alt_alarm_start>
		is_recent_a = 1;
  800510:	00800044 	movi	r2,1
  800514:	d0a72885 	stb	r2,-25438(gp)
	}
}
  800518:	0001883a 	nop
  80051c:	e037883a 	mov	sp,fp
  800520:	dfc00117 	ldw	ra,4(sp)
  800524:	df000017 	ldw	fp,0(sp)
  800528:	dec00204 	addi	sp,sp,8
  80052c:	f800283a 	ret

00800530 <uart_tx>:

extern volatile alt_u8 vp, ap;

volatile char char_recieve;

void uart_tx(char character_to_send) {
  800530:	defffe04 	addi	sp,sp,-8
  800534:	df000115 	stw	fp,4(sp)
  800538:	df000104 	addi	fp,sp,4
  80053c:	2005883a 	mov	r2,r4
  800540:	e0bfff05 	stb	r2,-4(fp)
	while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK)); //wait til ready to transmit
  800544:	0001883a 	nop
  800548:	00804074 	movhi	r2,257
  80054c:	10841204 	addi	r2,r2,4168
  800550:	10800037 	ldwio	r2,0(r2)
  800554:	1080100c 	andi	r2,r2,64
  800558:	103ffb26 	beq	r2,zero,800548 <__alt_mem_onchip_mem+0xff7f8548>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, character_to_send);
  80055c:	e0ffff07 	ldb	r3,-4(fp)
  800560:	00804074 	movhi	r2,257
  800564:	10841104 	addi	r2,r2,4164
  800568:	10c00035 	stwio	r3,0(r2)
}
  80056c:	0001883a 	nop
  800570:	e037883a 	mov	sp,fp
  800574:	df000017 	ldw	fp,0(sp)
  800578:	dec00104 	addi	sp,sp,4
  80057c:	f800283a 	ret

00800580 <uart_rx>:

int uart_rx(char *character_to_receive) {
  800580:	defffe04 	addi	sp,sp,-8
  800584:	df000115 	stw	fp,4(sp)
  800588:	df000104 	addi	fp,sp,4
  80058c:	e13fff15 	stw	r4,-4(fp)
	if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK) { //if data is available
  800590:	00804074 	movhi	r2,257
  800594:	10841204 	addi	r2,r2,4168
  800598:	10800037 	ldwio	r2,0(r2)
  80059c:	1080200c 	andi	r2,r2,128
  8005a0:	10000826 	beq	r2,zero,8005c4 <uart_rx+0x44>
		*character_to_receive = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE); //store data
  8005a4:	00804074 	movhi	r2,257
  8005a8:	10841004 	addi	r2,r2,4160
  8005ac:	10800037 	ldwio	r2,0(r2)
  8005b0:	1007883a 	mov	r3,r2
  8005b4:	e0bfff17 	ldw	r2,-4(fp)
  8005b8:	10c00005 	stb	r3,0(r2)
		return 1;
  8005bc:	00800044 	movi	r2,1
  8005c0:	00000106 	br	8005c8 <uart_rx+0x48>
	}
	return 0;
  8005c4:	0005883a 	mov	r2,zero
}
  8005c8:	e037883a 	mov	sp,fp
  8005cc:	df000017 	ldw	fp,0(sp)
  8005d0:	dec00104 	addi	sp,sp,4
  8005d4:	f800283a 	ret

008005d8 <main>:




int main() {
  8005d8:	deff9004 	addi	sp,sp,-448
  8005dc:	dfc06f15 	stw	ra,444(sp)
  8005e0:	df006e15 	stw	fp,440(sp)
  8005e4:	df006e04 	addi	fp,sp,440
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, 0);
  8005e8:	0007883a 	mov	r3,zero
  8005ec:	00804074 	movhi	r2,257
  8005f0:	10841304 	addi	r2,r2,4172
  8005f4:	10c00035 	stwio	r3,0(r2)

	printf("not stuck\n");
  8005f8:	01002074 	movhi	r4,129
  8005fc:	213f0f04 	addi	r4,r4,-964
  800600:	0808e140 	call	808e14 <puts>

	TickData t;
	reset(&t);
  800604:	e0bf9304 	addi	r2,fp,-436
  800608:	1009883a 	mov	r4,r2
  80060c:	08073f00 	call	8073f0 <reset>

	printf("start\n");
  800610:	01002074 	movhi	r4,129
  800614:	213f1204 	addi	r4,r4,-952
  800618:	0808e140 	call	808e14 <puts>

	alt_u8 key, key0_pre, key1_pre;

	start_cycle();
  80061c:	08002900 	call	800290 <start_cycle>

  while (1){

	  if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 1){
  800620:	00804074 	movhi	r2,257
  800624:	10842404 	addi	r2,r2,4240
  800628:	10800037 	ldwio	r2,0(r2)
  80062c:	1080004c 	andi	r2,r2,1
  800630:	10003c26 	beq	r2,zero,800724 <main+0x14c>
	  		  key = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  800634:	00804074 	movhi	r2,257
  800638:	10842804 	addi	r2,r2,4256
  80063c:	10800037 	ldwio	r2,0(r2)
  800640:	e0bf9285 	stb	r2,-438(fp)
	  		  t.VS = 0;
  800644:	e03faa45 	stb	zero,-343(fp)
	  		  t.AS = 0;
  800648:	e03faa05 	stb	zero,-344(fp)
	  	  	  if ((~key & 0x01) == 1 && key0_pre == 0){ // key 0 rising
  80064c:	e0bf9283 	ldbu	r2,-438(fp)
  800650:	1080004c 	andi	r2,r2,1
  800654:	10000b1e 	bne	r2,zero,800684 <main+0xac>
  800658:	e0bf9203 	ldbu	r2,-440(fp)
  80065c:	1000091e 	bne	r2,zero,800684 <main+0xac>

	  	  		  if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2){
  800660:	00804074 	movhi	r2,257
  800664:	10842404 	addi	r2,r2,4240
  800668:	10800037 	ldwio	r2,0(r2)
  80066c:	1080008c 	andi	r2,r2,2
  800670:	10000326 	beq	r2,zero,800680 <main+0xa8>
	  	  			  t.VS = 1;
  800674:	00800044 	movi	r2,1
  800678:	e0bfaa45 	stb	r2,-343(fp)
  80067c:	00000106 	br	800684 <main+0xac>
	  	  		  }
	  	  		  else {
	  	  			  extern_v_interrupt();
  800680:	08004900 	call	800490 <extern_v_interrupt>
	  	  		  }
	  	  	  }
	  	  	  key0_pre = ~key & 0x01;
  800684:	e0bf9283 	ldbu	r2,-438(fp)
  800688:	1080004c 	andi	r2,r2,1
  80068c:	1005003a 	cmpeq	r2,r2,zero
  800690:	e0bf9205 	stb	r2,-440(fp)

	  	  	  if ((~key & 0x02) >> 1 == 1 && key1_pre == 0){ // key 1 rising
  800694:	e0bf9283 	ldbu	r2,-438(fp)
  800698:	0084303a 	nor	r2,zero,r2
  80069c:	1080008c 	andi	r2,r2,2
  8006a0:	1005d07a 	srai	r2,r2,1
  8006a4:	10800058 	cmpnei	r2,r2,1
  8006a8:	10000b1e 	bne	r2,zero,8006d8 <main+0x100>
  8006ac:	e0bf9243 	ldbu	r2,-439(fp)
  8006b0:	1000091e 	bne	r2,zero,8006d8 <main+0x100>

	  	  		  if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2){
  8006b4:	00804074 	movhi	r2,257
  8006b8:	10842404 	addi	r2,r2,4240
  8006bc:	10800037 	ldwio	r2,0(r2)
  8006c0:	1080008c 	andi	r2,r2,2
  8006c4:	10000326 	beq	r2,zero,8006d4 <main+0xfc>
	  	  			  t.AS = 1;
  8006c8:	00800044 	movi	r2,1
  8006cc:	e0bfaa05 	stb	r2,-344(fp)
  8006d0:	00000106 	br	8006d8 <main+0x100>
	  	  		  }
	  	  		  else {
	  	  			  extern_a_interrupt();
  8006d4:	08004cc0 	call	8004cc <extern_a_interrupt>
	  	  		  }
	  	  	  }
	  	  	  key1_pre = ~key & 0x02 >> 1;
  8006d8:	e0bf9283 	ldbu	r2,-438(fp)
  8006dc:	1080004c 	andi	r2,r2,1
  8006e0:	1005003a 	cmpeq	r2,r2,zero
  8006e4:	e0bf9245 	stb	r2,-439(fp)

	  	  	  if (vp){
  8006e8:	d0a72943 	ldbu	r2,-25435(gp)
  8006ec:	10803fcc 	andi	r2,r2,255
  8006f0:	10000426 	beq	r2,zero,800704 <main+0x12c>
	  	  		  vp = 0;
  8006f4:	d0272945 	stb	zero,-25435(gp)
	  	  		  printf ("V\n");
  8006f8:	01002074 	movhi	r4,129
  8006fc:	213f1404 	addi	r4,r4,-944
  800700:	0808e140 	call	808e14 <puts>
	  	  	  }
	  	      if (ap){
  800704:	d0a72983 	ldbu	r2,-25434(gp)
  800708:	10803fcc 	andi	r2,r2,255
  80070c:	10002226 	beq	r2,zero,800798 <main+0x1c0>
	  	  		  ap = 0;
  800710:	d0272985 	stb	zero,-25434(gp)
	  	  		  printf ("A\n");
  800714:	01002074 	movhi	r4,129
  800718:	213f1504 	addi	r4,r4,-940
  80071c:	0808e140 	call	808e14 <puts>
  800720:	00001d06 	br	800798 <main+0x1c0>

	  	  	  // LED PLACEHOLDER
	  	  }

	  	  else {
	  		  uart_rx(&char_recieve);
  800724:	d12729c4 	addi	r4,gp,-25433
  800728:	08005800 	call	800580 <uart_rx>
	  		  if (char_recieve == 'A'){
  80072c:	d0a729c3 	ldbu	r2,-25433(gp)
  800730:	10803fcc 	andi	r2,r2,255
  800734:	1080201c 	xori	r2,r2,128
  800738:	10bfe004 	addi	r2,r2,-128
  80073c:	10801058 	cmpnei	r2,r2,65
  800740:	1000011e 	bne	r2,zero,800748 <main+0x170>
	  			  extern_a_interrupt();
  800744:	08004cc0 	call	8004cc <extern_a_interrupt>
	  		  }
	  		  if (char_recieve == 'V'){
  800748:	d0a729c3 	ldbu	r2,-25433(gp)
  80074c:	10803fcc 	andi	r2,r2,255
  800750:	1080201c 	xori	r2,r2,128
  800754:	10bfe004 	addi	r2,r2,-128
  800758:	10801598 	cmpnei	r2,r2,86
  80075c:	1000011e 	bne	r2,zero,800764 <main+0x18c>
	  			  extern_v_interrupt();
  800760:	08004900 	call	800490 <extern_v_interrupt>
	  		  }

	  		  if (vp){
  800764:	d0a72943 	ldbu	r2,-25435(gp)
  800768:	10803fcc 	andi	r2,r2,255
  80076c:	10000326 	beq	r2,zero,80077c <main+0x1a4>
	  			  vp = 0;
  800770:	d0272945 	stb	zero,-25435(gp)
	  			  uart_tx('V');
  800774:	01001584 	movi	r4,86
  800778:	08005300 	call	800530 <uart_tx>
	  		  }
	  		  if (ap){
  80077c:	d0a72983 	ldbu	r2,-25434(gp)
  800780:	10803fcc 	andi	r2,r2,255
  800784:	10000326 	beq	r2,zero,800794 <main+0x1bc>
	  		 	  ap = 0;
  800788:	d0272985 	stb	zero,-25434(gp)
	  		 	  uart_tx('A');
  80078c:	01001044 	movi	r4,65
  800790:	08005300 	call	800530 <uart_tx>
	  		  }
	  		  char_recieve = '\0';
  800794:	d02729c5 	stb	zero,-25433(gp)



	  	  }

	  if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2){ // if its on then sccharts
  800798:	00804074 	movhi	r2,257
  80079c:	10842404 	addi	r2,r2,4240
  8007a0:	10800037 	ldwio	r2,0(r2)
  8007a4:	1080008c 	andi	r2,r2,2
  8007a8:	10000826 	beq	r2,zero,8007cc <main+0x1f4>
		  tick(&t);
  8007ac:	e0bf9304 	addi	r2,fp,-436
  8007b0:	1009883a 	mov	r4,r2
  8007b4:	08076100 	call	807610 <tick>
		  ap = t.AP;
  8007b8:	e0bfaa83 	ldbu	r2,-342(fp)
  8007bc:	d0a72985 	stb	r2,-25434(gp)
		  vp = t.VP;
  8007c0:	e0bfaac3 	ldbu	r2,-341(fp)
  8007c4:	d0a72945 	stb	r2,-25435(gp)
  8007c8:	003f9506 	br	800620 <__alt_mem_onchip_mem+0xff7f8620>
	  }
	  else {
		  if (reset_cycle){ // a v event has occurred and timers must be reset
  8007cc:	d0a72843 	ldbu	r2,-25439(gp)
  8007d0:	10803fcc 	andi	r2,r2,255
  8007d4:	10000226 	beq	r2,zero,8007e0 <main+0x208>
		  	  reset_cycle = 0; // reset everything
  8007d8:	d0272845 	stb	zero,-25439(gp)
		    start_cycle();
  8007dc:	08002900 	call	800290 <start_cycle>
		  }
		  if (can_vpulse && need_v_pulse){
  8007e0:	d0a72803 	ldbu	r2,-25440(gp)
  8007e4:	10803fcc 	andi	r2,r2,255
  8007e8:	103f8d26 	beq	r2,zero,800620 <__alt_mem_onchip_mem+0xff7f8620>
  8007ec:	d0a728c3 	ldbu	r2,-25437(gp)
  8007f0:	10803fcc 	andi	r2,r2,255
  8007f4:	103f8a26 	beq	r2,zero,800620 <__alt_mem_onchip_mem+0xff7f8620>
		   need_v_pulse = 0;
  8007f8:	d02728c5 	stb	zero,-25437(gp)
		   vp = 1;
  8007fc:	00800044 	movi	r2,1
  800800:	d0a72945 	stb	r2,-25435(gp)
		   reset_cycle = 1;
  800804:	00800044 	movi	r2,1
  800808:	d0a72845 	stb	r2,-25439(gp)
	  }




  }
  80080c:	003f8406 	br	800620 <__alt_mem_onchip_mem+0xff7f8620>

00800810 <logic>:
#include "timing.h"
#include <stdio.h>

#include "scchart_heart.h"

void logic(TickData* d) {
  800810:	defffa04 	addi	sp,sp,-24
  800814:	dfc00515 	stw	ra,20(sp)
  800818:	df000415 	stw	fp,16(sp)
  80081c:	dc800315 	stw	r18,12(sp)
  800820:	dc400215 	stw	r17,8(sp)
  800824:	dc000115 	stw	r16,4(sp)
  800828:	df000404 	addi	fp,sp,16
  80082c:	e13ffc15 	stw	r4,-16(fp)
  d->_g30 = d->_pg9;
  800830:	e0bffc17 	ldw	r2,-16(fp)
  800834:	10c063c3 	ldbu	r3,399(r2)
  800838:	e0bffc17 	ldw	r2,-16(fp)
  80083c:	10c023c5 	stb	r3,143(r2)
  if (d->_g30) {
  800840:	e0bffc17 	ldw	r2,-16(fp)
  800844:	108023c3 	ldbu	r2,143(r2)
  800848:	10803fcc 	andi	r2,r2,255
  80084c:	1080201c 	xori	r2,r2,128
  800850:	10bfe004 	addi	r2,r2,-128
  800854:	10001226 	beq	r2,zero,8008a0 <logic+0x90>
    d->_region0_null_URI += d->deltaT;
  800858:	e13ffc17 	ldw	r4,-16(fp)
  80085c:	20800717 	ldw	r2,28(r4)
  800860:	20c00817 	ldw	r3,32(r4)
  800864:	e1bffc17 	ldw	r6,-16(fp)
  800868:	31001317 	ldw	r4,76(r6)
  80086c:	31401417 	ldw	r5,80(r6)
  800870:	200d883a 	mov	r6,r4
  800874:	280f883a 	mov	r7,r5
  800878:	1009883a 	mov	r4,r2
  80087c:	180b883a 	mov	r5,r3
  800880:	080789c0 	call	80789c <__adddf3>
  800884:	1009883a 	mov	r4,r2
  800888:	180b883a 	mov	r5,r3
  80088c:	2005883a 	mov	r2,r4
  800890:	2807883a 	mov	r3,r5
  800894:	e13ffc17 	ldw	r4,-16(fp)
  800898:	20800715 	stw	r2,28(r4)
  80089c:	20c00815 	stw	r3,32(r4)
  }
  d->_g31_e1 = !d->_g30;
  8008a0:	e0bffc17 	ldw	r2,-16(fp)
  8008a4:	108023c3 	ldbu	r2,143(r2)
  8008a8:	10803fcc 	andi	r2,r2,255
  8008ac:	1080201c 	xori	r2,r2,128
  8008b0:	10bfe004 	addi	r2,r2,-128
  8008b4:	1005003a 	cmpeq	r2,r2,zero
  8008b8:	1007883a 	mov	r3,r2
  8008bc:	e0bffc17 	ldw	r2,-16(fp)
  8008c0:	10c05cc5 	stb	r3,371(r2)
  d->AP = 0;
  8008c4:	e0bffc17 	ldw	r2,-16(fp)
  8008c8:	10001785 	stb	zero,94(r2)
  d->VP = 0;
  8008cc:	e0bffc17 	ldw	r2,-16(fp)
  8008d0:	100017c5 	stb	zero,95(r2)
  d->VR = 0;
  8008d4:	e0bffc17 	ldw	r2,-16(fp)
  8008d8:	10001805 	stb	zero,96(r2)
  d->AR = 0;
  8008dc:	e0bffc17 	ldw	r2,-16(fp)
  8008e0:	10001845 	stb	zero,97(r2)
  d->a = 0;
  8008e4:	e0bffc17 	ldw	r2,-16(fp)
  8008e8:	10001885 	stb	zero,98(r2)
  d->v = 0;
  8008ec:	e0bffc17 	ldw	r2,-16(fp)
  8008f0:	100018c5 	stb	zero,99(r2)
  d->VS_i = 0;
  8008f4:	e0bffc17 	ldw	r2,-16(fp)
  8008f8:	10001905 	stb	zero,100(r2)
  d->_pre_VS_i = d->_reg_VS_i;
  8008fc:	e0bffc17 	ldw	r2,-16(fp)
  800900:	10c019c3 	ldbu	r3,103(r2)
  800904:	e0bffc17 	ldw	r2,-16(fp)
  800908:	10c01a05 	stb	r3,104(r2)
  d->_g235 = d->_pg217;
  80090c:	e0bffc17 	ldw	r2,-16(fp)
  800910:	10c06403 	ldbu	r3,400(r2)
  800914:	e0bffc17 	ldw	r2,-16(fp)
  800918:	10c04485 	stb	r3,274(r2)
  d->_cg235 = d->_pre_VS_i;
  80091c:	e0bffc17 	ldw	r2,-16(fp)
  800920:	10c01a03 	ldbu	r3,104(r2)
  800924:	e0bffc17 	ldw	r2,-16(fp)
  800928:	10c05bc5 	stb	r3,367(r2)
  d->_g236 = d->_g235 && d->_cg235;
  80092c:	e0bffc17 	ldw	r2,-16(fp)
  800930:	10804483 	ldbu	r2,274(r2)
  800934:	10803fcc 	andi	r2,r2,255
  800938:	1080201c 	xori	r2,r2,128
  80093c:	10bfe004 	addi	r2,r2,-128
  800940:	10000826 	beq	r2,zero,800964 <logic+0x154>
  800944:	e0bffc17 	ldw	r2,-16(fp)
  800948:	10805bc3 	ldbu	r2,367(r2)
  80094c:	10803fcc 	andi	r2,r2,255
  800950:	1080201c 	xori	r2,r2,128
  800954:	10bfe004 	addi	r2,r2,-128
  800958:	10000226 	beq	r2,zero,800964 <logic+0x154>
  80095c:	00800044 	movi	r2,1
  800960:	00000106 	br	800968 <logic+0x158>
  800964:	0005883a 	mov	r2,zero
  800968:	1007883a 	mov	r3,r2
  80096c:	e0bffc17 	ldw	r2,-16(fp)
  800970:	10c044c5 	stb	r3,275(r2)
  if (d->_g236) {
  800974:	e0bffc17 	ldw	r2,-16(fp)
  800978:	108044c3 	ldbu	r2,275(r2)
  80097c:	10803fcc 	andi	r2,r2,255
  800980:	1080201c 	xori	r2,r2,128
  800984:	10bfe004 	addi	r2,r2,-128
  800988:	10000626 	beq	r2,zero,8009a4 <logic+0x194>
    d->v |= 1;
  80098c:	e0bffc17 	ldw	r2,-16(fp)
  800990:	108018c3 	ldbu	r2,99(r2)
  800994:	10800054 	ori	r2,r2,1
  800998:	1007883a 	mov	r3,r2
  80099c:	e0bffc17 	ldw	r2,-16(fp)
  8009a0:	10c018c5 	stb	r3,99(r2)
  }
  d->_pre_VP = d->_reg_VP;
  8009a4:	e0bffc17 	ldw	r2,-16(fp)
  8009a8:	10c01943 	ldbu	r3,101(r2)
  8009ac:	e0bffc17 	ldw	r2,-16(fp)
  8009b0:	10c01985 	stb	r3,102(r2)
  d->_g235 = d->_g235 && !d->_cg235;
  8009b4:	e0bffc17 	ldw	r2,-16(fp)
  8009b8:	10804483 	ldbu	r2,274(r2)
  8009bc:	10803fcc 	andi	r2,r2,255
  8009c0:	1080201c 	xori	r2,r2,128
  8009c4:	10bfe004 	addi	r2,r2,-128
  8009c8:	10000826 	beq	r2,zero,8009ec <logic+0x1dc>
  8009cc:	e0bffc17 	ldw	r2,-16(fp)
  8009d0:	10805bc3 	ldbu	r2,367(r2)
  8009d4:	10803fcc 	andi	r2,r2,255
  8009d8:	1080201c 	xori	r2,r2,128
  8009dc:	10bfe004 	addi	r2,r2,-128
  8009e0:	1000021e 	bne	r2,zero,8009ec <logic+0x1dc>
  8009e4:	00800044 	movi	r2,1
  8009e8:	00000106 	br	8009f0 <logic+0x1e0>
  8009ec:	0005883a 	mov	r2,zero
  8009f0:	1007883a 	mov	r3,r2
  8009f4:	e0bffc17 	ldw	r2,-16(fp)
  8009f8:	10c04485 	stb	r3,274(r2)
  d->_cg237 = d->_pre_VP;
  8009fc:	e0bffc17 	ldw	r2,-16(fp)
  800a00:	10c01983 	ldbu	r3,102(r2)
  800a04:	e0bffc17 	ldw	r2,-16(fp)
  800a08:	10c05b85 	stb	r3,366(r2)
  d->_g238 = d->_g235 && d->_cg237;
  800a0c:	e0bffc17 	ldw	r2,-16(fp)
  800a10:	10804483 	ldbu	r2,274(r2)
  800a14:	10803fcc 	andi	r2,r2,255
  800a18:	1080201c 	xori	r2,r2,128
  800a1c:	10bfe004 	addi	r2,r2,-128
  800a20:	10000826 	beq	r2,zero,800a44 <logic+0x234>
  800a24:	e0bffc17 	ldw	r2,-16(fp)
  800a28:	10805b83 	ldbu	r2,366(r2)
  800a2c:	10803fcc 	andi	r2,r2,255
  800a30:	1080201c 	xori	r2,r2,128
  800a34:	10bfe004 	addi	r2,r2,-128
  800a38:	10000226 	beq	r2,zero,800a44 <logic+0x234>
  800a3c:	00800044 	movi	r2,1
  800a40:	00000106 	br	800a48 <logic+0x238>
  800a44:	0005883a 	mov	r2,zero
  800a48:	1007883a 	mov	r3,r2
  800a4c:	e0bffc17 	ldw	r2,-16(fp)
  800a50:	10c04505 	stb	r3,276(r2)
  if (d->_g238) {
  800a54:	e0bffc17 	ldw	r2,-16(fp)
  800a58:	10804503 	ldbu	r2,276(r2)
  800a5c:	10803fcc 	andi	r2,r2,255
  800a60:	1080201c 	xori	r2,r2,128
  800a64:	10bfe004 	addi	r2,r2,-128
  800a68:	10000626 	beq	r2,zero,800a84 <logic+0x274>
    d->v |= 1;
  800a6c:	e0bffc17 	ldw	r2,-16(fp)
  800a70:	108018c3 	ldbu	r2,99(r2)
  800a74:	10800054 	ori	r2,r2,1
  800a78:	1007883a 	mov	r3,r2
  800a7c:	e0bffc17 	ldw	r2,-16(fp)
  800a80:	10c018c5 	stb	r3,99(r2)
  }
  d->_g34 = d->_pg13;
  800a84:	e0bffc17 	ldw	r2,-16(fp)
  800a88:	10c06443 	ldbu	r3,401(r2)
  800a8c:	e0bffc17 	ldw	r2,-16(fp)
  800a90:	10c02445 	stb	r3,145(r2)
  d->_cg34 = d->v;
  800a94:	e0bffc17 	ldw	r2,-16(fp)
  800a98:	10c018c3 	ldbu	r3,99(r2)
  800a9c:	e0bffc17 	ldw	r2,-16(fp)
  800aa0:	10c048c5 	stb	r3,291(r2)
  d->_g35 = d->_g34 && d->_cg34;
  800aa4:	e0bffc17 	ldw	r2,-16(fp)
  800aa8:	10802443 	ldbu	r2,145(r2)
  800aac:	10803fcc 	andi	r2,r2,255
  800ab0:	1080201c 	xori	r2,r2,128
  800ab4:	10bfe004 	addi	r2,r2,-128
  800ab8:	10000826 	beq	r2,zero,800adc <logic+0x2cc>
  800abc:	e0bffc17 	ldw	r2,-16(fp)
  800ac0:	108048c3 	ldbu	r2,291(r2)
  800ac4:	10803fcc 	andi	r2,r2,255
  800ac8:	1080201c 	xori	r2,r2,128
  800acc:	10bfe004 	addi	r2,r2,-128
  800ad0:	10000226 	beq	r2,zero,800adc <logic+0x2cc>
  800ad4:	00800044 	movi	r2,1
  800ad8:	00000106 	br	800ae0 <logic+0x2d0>
  800adc:	0005883a 	mov	r2,zero
  800ae0:	1007883a 	mov	r3,r2
  800ae4:	e0bffc17 	ldw	r2,-16(fp)
  800ae8:	10c02485 	stb	r3,146(r2)
  if (d->_g35) {
  800aec:	e0bffc17 	ldw	r2,-16(fp)
  800af0:	10802483 	ldbu	r2,146(r2)
  800af4:	10803fcc 	andi	r2,r2,255
  800af8:	1080201c 	xori	r2,r2,128
  800afc:	10bfe004 	addi	r2,r2,-128
  800b00:	10000326 	beq	r2,zero,800b10 <logic+0x300>
    d->_heart2_local__Atrig2 = 1;
  800b04:	e0bffc17 	ldw	r2,-16(fp)
  800b08:	00c00044 	movi	r3,1
  800b0c:	10c01ac5 	stb	r3,107(r2)
  }
  d->_cg30 = d->_heart2_local__Atrig2;
  800b10:	e0bffc17 	ldw	r2,-16(fp)
  800b14:	10c01ac3 	ldbu	r3,107(r2)
  800b18:	e0bffc17 	ldw	r2,-16(fp)
  800b1c:	10c04885 	stb	r3,290(r2)
  d->_g31 = d->_g30 && d->_cg30;
  800b20:	e0bffc17 	ldw	r2,-16(fp)
  800b24:	108023c3 	ldbu	r2,143(r2)
  800b28:	10803fcc 	andi	r2,r2,255
  800b2c:	1080201c 	xori	r2,r2,128
  800b30:	10bfe004 	addi	r2,r2,-128
  800b34:	10000826 	beq	r2,zero,800b58 <logic+0x348>
  800b38:	e0bffc17 	ldw	r2,-16(fp)
  800b3c:	10804883 	ldbu	r2,290(r2)
  800b40:	10803fcc 	andi	r2,r2,255
  800b44:	1080201c 	xori	r2,r2,128
  800b48:	10bfe004 	addi	r2,r2,-128
  800b4c:	10000226 	beq	r2,zero,800b58 <logic+0x348>
  800b50:	00800044 	movi	r2,1
  800b54:	00000106 	br	800b5c <logic+0x34c>
  800b58:	0005883a 	mov	r2,zero
  800b5c:	1007883a 	mov	r3,r2
  800b60:	e0bffc17 	ldw	r2,-16(fp)
  800b64:	10c02405 	stb	r3,144(r2)
  d->_g35_e2 = !d->_g34;
  800b68:	e0bffc17 	ldw	r2,-16(fp)
  800b6c:	10802443 	ldbu	r2,145(r2)
  800b70:	10803fcc 	andi	r2,r2,255
  800b74:	1080201c 	xori	r2,r2,128
  800b78:	10bfe004 	addi	r2,r2,-128
  800b7c:	1005003a 	cmpeq	r2,r2,zero
  800b80:	1007883a 	mov	r3,r2
  800b84:	e0bffc17 	ldw	r2,-16(fp)
  800b88:	10c05d05 	stb	r3,372(r2)
  d->_g35_e2 = (d->_g31_e1 || d->_g31) && (d->_g35_e2 || d->_g35) && (d->_g31 || d->_g35);
  800b8c:	e0bffc17 	ldw	r2,-16(fp)
  800b90:	10805cc3 	ldbu	r2,371(r2)
  800b94:	10803fcc 	andi	r2,r2,255
  800b98:	1080201c 	xori	r2,r2,128
  800b9c:	10bfe004 	addi	r2,r2,-128
  800ba0:	1000061e 	bne	r2,zero,800bbc <logic+0x3ac>
  800ba4:	e0bffc17 	ldw	r2,-16(fp)
  800ba8:	10802403 	ldbu	r2,144(r2)
  800bac:	10803fcc 	andi	r2,r2,255
  800bb0:	1080201c 	xori	r2,r2,128
  800bb4:	10bfe004 	addi	r2,r2,-128
  800bb8:	10001a26 	beq	r2,zero,800c24 <logic+0x414>
  800bbc:	e0bffc17 	ldw	r2,-16(fp)
  800bc0:	10805d03 	ldbu	r2,372(r2)
  800bc4:	10803fcc 	andi	r2,r2,255
  800bc8:	1080201c 	xori	r2,r2,128
  800bcc:	10bfe004 	addi	r2,r2,-128
  800bd0:	1000061e 	bne	r2,zero,800bec <logic+0x3dc>
  800bd4:	e0bffc17 	ldw	r2,-16(fp)
  800bd8:	10802483 	ldbu	r2,146(r2)
  800bdc:	10803fcc 	andi	r2,r2,255
  800be0:	1080201c 	xori	r2,r2,128
  800be4:	10bfe004 	addi	r2,r2,-128
  800be8:	10000e26 	beq	r2,zero,800c24 <logic+0x414>
  800bec:	e0bffc17 	ldw	r2,-16(fp)
  800bf0:	10802403 	ldbu	r2,144(r2)
  800bf4:	10803fcc 	andi	r2,r2,255
  800bf8:	1080201c 	xori	r2,r2,128
  800bfc:	10bfe004 	addi	r2,r2,-128
  800c00:	1000061e 	bne	r2,zero,800c1c <logic+0x40c>
  800c04:	e0bffc17 	ldw	r2,-16(fp)
  800c08:	10802483 	ldbu	r2,146(r2)
  800c0c:	10803fcc 	andi	r2,r2,255
  800c10:	1080201c 	xori	r2,r2,128
  800c14:	10bfe004 	addi	r2,r2,-128
  800c18:	10000226 	beq	r2,zero,800c24 <logic+0x414>
  800c1c:	00800044 	movi	r2,1
  800c20:	00000106 	br	800c28 <logic+0x418>
  800c24:	0005883a 	mov	r2,zero
  800c28:	1007883a 	mov	r3,r2
  800c2c:	e0bffc17 	ldw	r2,-16(fp)
  800c30:	10c05d05 	stb	r3,372(r2)
  if (d->_g35_e2) {
  800c34:	e0bffc17 	ldw	r2,-16(fp)
  800c38:	10805d03 	ldbu	r2,372(r2)
  800c3c:	10803fcc 	andi	r2,r2,255
  800c40:	1080201c 	xori	r2,r2,128
  800c44:	10bfe004 	addi	r2,r2,-128
  800c48:	10000526 	beq	r2,zero,800c60 <logic+0x450>
    d->_region0_null_URI = 0;
  800c4c:	e0bffc17 	ldw	r2,-16(fp)
  800c50:	10000715 	stw	zero,28(r2)
  800c54:	10000815 	stw	zero,32(r2)
    d->ready = 0;
  800c58:	e0bffc17 	ldw	r2,-16(fp)
  800c5c:	10000605 	stb	zero,24(r2)
  }
  d->_g31 = d->_pg7_e1;
  800c60:	e0bffc17 	ldw	r2,-16(fp)
  800c64:	10c06483 	ldbu	r3,402(r2)
  800c68:	e0bffc17 	ldw	r2,-16(fp)
  800c6c:	10c02405 	stb	r3,144(r2)
  if (d->_g31) {
  800c70:	e0bffc17 	ldw	r2,-16(fp)
  800c74:	10802403 	ldbu	r2,144(r2)
  800c78:	10803fcc 	andi	r2,r2,255
  800c7c:	1080201c 	xori	r2,r2,128
  800c80:	10bfe004 	addi	r2,r2,-128
  800c84:	10001226 	beq	r2,zero,800cd0 <logic+0x4c0>
    d->_region0_null_URI += d->deltaT;
  800c88:	e13ffc17 	ldw	r4,-16(fp)
  800c8c:	20800717 	ldw	r2,28(r4)
  800c90:	20c00817 	ldw	r3,32(r4)
  800c94:	e1bffc17 	ldw	r6,-16(fp)
  800c98:	31001317 	ldw	r4,76(r6)
  800c9c:	31401417 	ldw	r5,80(r6)
  800ca0:	200d883a 	mov	r6,r4
  800ca4:	280f883a 	mov	r7,r5
  800ca8:	1009883a 	mov	r4,r2
  800cac:	180b883a 	mov	r5,r3
  800cb0:	080789c0 	call	80789c <__adddf3>
  800cb4:	1009883a 	mov	r4,r2
  800cb8:	180b883a 	mov	r5,r3
  800cbc:	2005883a 	mov	r2,r4
  800cc0:	2807883a 	mov	r3,r5
  800cc4:	e13ffc17 	ldw	r4,-16(fp)
  800cc8:	20800715 	stw	r2,28(r4)
  800ccc:	20c00815 	stw	r3,32(r4)
  }
  d->_g31_e1 = !d->_g31;
  800cd0:	e0bffc17 	ldw	r2,-16(fp)
  800cd4:	10802403 	ldbu	r2,144(r2)
  800cd8:	10803fcc 	andi	r2,r2,255
  800cdc:	1080201c 	xori	r2,r2,128
  800ce0:	10bfe004 	addi	r2,r2,-128
  800ce4:	1005003a 	cmpeq	r2,r2,zero
  800ce8:	1007883a 	mov	r3,r2
  800cec:	e0bffc17 	ldw	r2,-16(fp)
  800cf0:	10c05cc5 	stb	r3,371(r2)
  d->_g35 = d->_pg36;
  800cf4:	e0bffc17 	ldw	r2,-16(fp)
  800cf8:	10c064c3 	ldbu	r3,403(r2)
  800cfc:	e0bffc17 	ldw	r2,-16(fp)
  800d00:	10c02485 	stb	r3,146(r2)
  d->_cg21 = d->_region0_null_URI >= d->URI_time;
  800d04:	e0bffc17 	ldw	r2,-16(fp)
  800d08:	14000717 	ldw	r16,28(r2)
  800d0c:	14400817 	ldw	r17,32(r2)
  800d10:	e0bffc17 	ldw	r2,-16(fp)
  800d14:	10800217 	ldw	r2,8(r2)
  800d18:	1009883a 	mov	r4,r2
  800d1c:	0808c140 	call	808c14 <__floatsidf>
  800d20:	1009883a 	mov	r4,r2
  800d24:	180b883a 	mov	r5,r3
  800d28:	04800044 	movi	r18,1
  800d2c:	200d883a 	mov	r6,r4
  800d30:	280f883a 	mov	r7,r5
  800d34:	8009883a 	mov	r4,r16
  800d38:	880b883a 	mov	r5,r17
  800d3c:	08081480 	call	808148 <__gedf2>
  800d40:	1000010e 	bge	r2,zero,800d48 <logic+0x538>
  800d44:	0025883a 	mov	r18,zero
  800d48:	9007883a 	mov	r3,r18
  800d4c:	e0bffc17 	ldw	r2,-16(fp)
  800d50:	10c047c5 	stb	r3,287(r2)
  d->_g22 = d->_g35 && d->_cg21;
  800d54:	e0bffc17 	ldw	r2,-16(fp)
  800d58:	10802483 	ldbu	r2,146(r2)
  800d5c:	10803fcc 	andi	r2,r2,255
  800d60:	1080201c 	xori	r2,r2,128
  800d64:	10bfe004 	addi	r2,r2,-128
  800d68:	10000826 	beq	r2,zero,800d8c <logic+0x57c>
  800d6c:	e0bffc17 	ldw	r2,-16(fp)
  800d70:	108047c3 	ldbu	r2,287(r2)
  800d74:	10803fcc 	andi	r2,r2,255
  800d78:	1080201c 	xori	r2,r2,128
  800d7c:	10bfe004 	addi	r2,r2,-128
  800d80:	10000226 	beq	r2,zero,800d8c <logic+0x57c>
  800d84:	00800044 	movi	r2,1
  800d88:	00000106 	br	800d90 <logic+0x580>
  800d8c:	0005883a 	mov	r2,zero
  800d90:	1007883a 	mov	r3,r2
  800d94:	e0bffc17 	ldw	r2,-16(fp)
  800d98:	10c02245 	stb	r3,137(r2)
  if (d->_g22) {
  800d9c:	e0bffc17 	ldw	r2,-16(fp)
  800da0:	10802243 	ldbu	r2,137(r2)
  800da4:	10803fcc 	andi	r2,r2,255
  800da8:	1080201c 	xori	r2,r2,128
  800dac:	10bfe004 	addi	r2,r2,-128
  800db0:	10000326 	beq	r2,zero,800dc0 <logic+0x5b0>
    d->_heart2_local__Atrig = 1;
  800db4:	e0bffc17 	ldw	r2,-16(fp)
  800db8:	00c00044 	movi	r3,1
  800dbc:	10c01a45 	stb	r3,105(r2)
  }
  d->_g24 = d->_g35 && !d->_cg21;
  800dc0:	e0bffc17 	ldw	r2,-16(fp)
  800dc4:	10802483 	ldbu	r2,146(r2)
  800dc8:	10803fcc 	andi	r2,r2,255
  800dcc:	1080201c 	xori	r2,r2,128
  800dd0:	10bfe004 	addi	r2,r2,-128
  800dd4:	10000826 	beq	r2,zero,800df8 <logic+0x5e8>
  800dd8:	e0bffc17 	ldw	r2,-16(fp)
  800ddc:	108047c3 	ldbu	r2,287(r2)
  800de0:	10803fcc 	andi	r2,r2,255
  800de4:	1080201c 	xori	r2,r2,128
  800de8:	10bfe004 	addi	r2,r2,-128
  800dec:	1000021e 	bne	r2,zero,800df8 <logic+0x5e8>
  800df0:	00800044 	movi	r2,1
  800df4:	00000106 	br	800dfc <logic+0x5ec>
  800df8:	0005883a 	mov	r2,zero
  800dfc:	1007883a 	mov	r3,r2
  800e00:	e0bffc17 	ldw	r2,-16(fp)
  800e04:	10c022c5 	stb	r3,139(r2)
  d->_cg24 = d->v;
  800e08:	e0bffc17 	ldw	r2,-16(fp)
  800e0c:	10c018c3 	ldbu	r3,99(r2)
  800e10:	e0bffc17 	ldw	r2,-16(fp)
  800e14:	10c04785 	stb	r3,286(r2)
  d->_g25 = d->_g24 && d->_cg24;
  800e18:	e0bffc17 	ldw	r2,-16(fp)
  800e1c:	108022c3 	ldbu	r2,139(r2)
  800e20:	10803fcc 	andi	r2,r2,255
  800e24:	1080201c 	xori	r2,r2,128
  800e28:	10bfe004 	addi	r2,r2,-128
  800e2c:	10000826 	beq	r2,zero,800e50 <logic+0x640>
  800e30:	e0bffc17 	ldw	r2,-16(fp)
  800e34:	10804783 	ldbu	r2,286(r2)
  800e38:	10803fcc 	andi	r2,r2,255
  800e3c:	1080201c 	xori	r2,r2,128
  800e40:	10bfe004 	addi	r2,r2,-128
  800e44:	10000226 	beq	r2,zero,800e50 <logic+0x640>
  800e48:	00800044 	movi	r2,1
  800e4c:	00000106 	br	800e54 <logic+0x644>
  800e50:	0005883a 	mov	r2,zero
  800e54:	1007883a 	mov	r3,r2
  800e58:	e0bffc17 	ldw	r2,-16(fp)
  800e5c:	10c02305 	stb	r3,140(r2)
  if (d->_g25) {
  800e60:	e0bffc17 	ldw	r2,-16(fp)
  800e64:	10802303 	ldbu	r2,140(r2)
  800e68:	10803fcc 	andi	r2,r2,255
  800e6c:	1080201c 	xori	r2,r2,128
  800e70:	10bfe004 	addi	r2,r2,-128
  800e74:	10000326 	beq	r2,zero,800e84 <logic+0x674>
    d->_heart2_local__Atrig1 = 1;
  800e78:	e0bffc17 	ldw	r2,-16(fp)
  800e7c:	00c00044 	movi	r3,1
  800e80:	10c01a85 	stb	r3,106(r2)
  }
  d->_cg6 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  800e84:	e0bffc17 	ldw	r2,-16(fp)
  800e88:	10801a43 	ldbu	r2,105(r2)
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	1080201c 	xori	r2,r2,128
  800e94:	10bfe004 	addi	r2,r2,-128
  800e98:	1000061e 	bne	r2,zero,800eb4 <logic+0x6a4>
  800e9c:	e0bffc17 	ldw	r2,-16(fp)
  800ea0:	10801a83 	ldbu	r2,106(r2)
  800ea4:	10803fcc 	andi	r2,r2,255
  800ea8:	1080201c 	xori	r2,r2,128
  800eac:	10bfe004 	addi	r2,r2,-128
  800eb0:	10000226 	beq	r2,zero,800ebc <logic+0x6ac>
  800eb4:	00800044 	movi	r2,1
  800eb8:	00000106 	br	800ec0 <logic+0x6b0>
  800ebc:	0005883a 	mov	r2,zero
  800ec0:	1007883a 	mov	r3,r2
  800ec4:	e0bffc17 	ldw	r2,-16(fp)
  800ec8:	10c045c5 	stb	r3,279(r2)
  d->_g7 = d->_g31 && d->_cg6;
  800ecc:	e0bffc17 	ldw	r2,-16(fp)
  800ed0:	10802403 	ldbu	r2,144(r2)
  800ed4:	10803fcc 	andi	r2,r2,255
  800ed8:	1080201c 	xori	r2,r2,128
  800edc:	10bfe004 	addi	r2,r2,-128
  800ee0:	10000826 	beq	r2,zero,800f04 <logic+0x6f4>
  800ee4:	e0bffc17 	ldw	r2,-16(fp)
  800ee8:	108045c3 	ldbu	r2,279(r2)
  800eec:	10803fcc 	andi	r2,r2,255
  800ef0:	1080201c 	xori	r2,r2,128
  800ef4:	10bfe004 	addi	r2,r2,-128
  800ef8:	10000226 	beq	r2,zero,800f04 <logic+0x6f4>
  800efc:	00800044 	movi	r2,1
  800f00:	00000106 	br	800f08 <logic+0x6f8>
  800f04:	0005883a 	mov	r2,zero
  800f08:	1007883a 	mov	r3,r2
  800f0c:	e0bffc17 	ldw	r2,-16(fp)
  800f10:	10c01fc5 	stb	r3,127(r2)
  d->_g17 = d->_pg37;
  800f14:	e0bffc17 	ldw	r2,-16(fp)
  800f18:	10c06503 	ldbu	r3,404(r2)
  800f1c:	e0bffc17 	ldw	r2,-16(fp)
  800f20:	10c02185 	stb	r3,134(r2)
  d->_g11 = d->_pg14;
  800f24:	e0bffc17 	ldw	r2,-16(fp)
  800f28:	10c06543 	ldbu	r3,405(r2)
  800f2c:	e0bffc17 	ldw	r2,-16(fp)
  800f30:	10c02045 	stb	r3,129(r2)
  d->_g14_e2 = !(d->_g17 || d->_g11);
  800f34:	e0bffc17 	ldw	r2,-16(fp)
  800f38:	10802183 	ldbu	r2,134(r2)
  800f3c:	10803fcc 	andi	r2,r2,255
  800f40:	1080201c 	xori	r2,r2,128
  800f44:	10bfe004 	addi	r2,r2,-128
  800f48:	1000081e 	bne	r2,zero,800f6c <logic+0x75c>
  800f4c:	e0bffc17 	ldw	r2,-16(fp)
  800f50:	10802043 	ldbu	r2,129(r2)
  800f54:	10803fcc 	andi	r2,r2,255
  800f58:	1080201c 	xori	r2,r2,128
  800f5c:	10bfe004 	addi	r2,r2,-128
  800f60:	1000021e 	bne	r2,zero,800f6c <logic+0x75c>
  800f64:	00800044 	movi	r2,1
  800f68:	00000106 	br	800f70 <logic+0x760>
  800f6c:	0005883a 	mov	r2,zero
  800f70:	1007883a 	mov	r3,r2
  800f74:	e0bffc17 	ldw	r2,-16(fp)
  800f78:	10c05c45 	stb	r3,369(r2)
  d->sleepT = 1000.0;
  800f7c:	e0fffc17 	ldw	r3,-16(fp)
  800f80:	18001515 	stw	zero,84(r3)
  800f84:	009023f4 	movhi	r2,16527
  800f88:	10900004 	addi	r2,r2,16384
  800f8c:	18801615 	stw	r2,88(r3)
  d->_g11 = d->_g11 || d->_g17;
  800f90:	e0bffc17 	ldw	r2,-16(fp)
  800f94:	10802043 	ldbu	r2,129(r2)
  800f98:	10803fcc 	andi	r2,r2,255
  800f9c:	1080201c 	xori	r2,r2,128
  800fa0:	10bfe004 	addi	r2,r2,-128
  800fa4:	1000061e 	bne	r2,zero,800fc0 <logic+0x7b0>
  800fa8:	e0bffc17 	ldw	r2,-16(fp)
  800fac:	10802183 	ldbu	r2,134(r2)
  800fb0:	10803fcc 	andi	r2,r2,255
  800fb4:	1080201c 	xori	r2,r2,128
  800fb8:	10bfe004 	addi	r2,r2,-128
  800fbc:	10000226 	beq	r2,zero,800fc8 <logic+0x7b8>
  800fc0:	00800044 	movi	r2,1
  800fc4:	00000106 	br	800fcc <logic+0x7bc>
  800fc8:	0005883a 	mov	r2,zero
  800fcc:	1007883a 	mov	r3,r2
  800fd0:	e0bffc17 	ldw	r2,-16(fp)
  800fd4:	10c02045 	stb	r3,129(r2)
  d->_cg12 = d->_region0_null_URI < d->URI_time;
  800fd8:	e0bffc17 	ldw	r2,-16(fp)
  800fdc:	14000717 	ldw	r16,28(r2)
  800fe0:	14400817 	ldw	r17,32(r2)
  800fe4:	e0bffc17 	ldw	r2,-16(fp)
  800fe8:	10800217 	ldw	r2,8(r2)
  800fec:	1009883a 	mov	r4,r2
  800ff0:	0808c140 	call	808c14 <__floatsidf>
  800ff4:	1009883a 	mov	r4,r2
  800ff8:	180b883a 	mov	r5,r3
  800ffc:	04800044 	movi	r18,1
  801000:	200d883a 	mov	r6,r4
  801004:	280f883a 	mov	r7,r5
  801008:	8009883a 	mov	r4,r16
  80100c:	880b883a 	mov	r5,r17
  801010:	08082240 	call	808224 <__ledf2>
  801014:	10000116 	blt	r2,zero,80101c <logic+0x80c>
  801018:	0025883a 	mov	r18,zero
  80101c:	9007883a 	mov	r3,r18
  801020:	e0bffc17 	ldw	r2,-16(fp)
  801024:	10c046c5 	stb	r3,283(r2)
  d->_g17 = d->_g11 && d->_cg12;
  801028:	e0bffc17 	ldw	r2,-16(fp)
  80102c:	10802043 	ldbu	r2,129(r2)
  801030:	10803fcc 	andi	r2,r2,255
  801034:	1080201c 	xori	r2,r2,128
  801038:	10bfe004 	addi	r2,r2,-128
  80103c:	10000826 	beq	r2,zero,801060 <logic+0x850>
  801040:	e0bffc17 	ldw	r2,-16(fp)
  801044:	108046c3 	ldbu	r2,283(r2)
  801048:	10803fcc 	andi	r2,r2,255
  80104c:	1080201c 	xori	r2,r2,128
  801050:	10bfe004 	addi	r2,r2,-128
  801054:	10000226 	beq	r2,zero,801060 <logic+0x850>
  801058:	00800044 	movi	r2,1
  80105c:	00000106 	br	801064 <logic+0x854>
  801060:	0005883a 	mov	r2,zero
  801064:	1007883a 	mov	r3,r2
  801068:	e0bffc17 	ldw	r2,-16(fp)
  80106c:	10c02185 	stb	r3,134(r2)
  if (d->_g17) {
  801070:	e0bffc17 	ldw	r2,-16(fp)
  801074:	10802183 	ldbu	r2,134(r2)
  801078:	10803fcc 	andi	r2,r2,255
  80107c:	1080201c 	xori	r2,r2,128
  801080:	10bfe004 	addi	r2,r2,-128
  801084:	10003426 	beq	r2,zero,801158 <logic+0x948>
    d->sleepT = (d->sleepT < (d->URI_time - d->_region0_null_URI)) ? d->sleepT : (d->URI_time - d->_region0_null_URI);
  801088:	e0bffc17 	ldw	r2,-16(fp)
  80108c:	14001517 	ldw	r16,84(r2)
  801090:	14401617 	ldw	r17,88(r2)
  801094:	e0bffc17 	ldw	r2,-16(fp)
  801098:	10800217 	ldw	r2,8(r2)
  80109c:	1009883a 	mov	r4,r2
  8010a0:	0808c140 	call	808c14 <__floatsidf>
  8010a4:	1011883a 	mov	r8,r2
  8010a8:	1813883a 	mov	r9,r3
  8010ac:	e13ffc17 	ldw	r4,-16(fp)
  8010b0:	20800717 	ldw	r2,28(r4)
  8010b4:	20c00817 	ldw	r3,32(r4)
  8010b8:	100d883a 	mov	r6,r2
  8010bc:	180f883a 	mov	r7,r3
  8010c0:	4009883a 	mov	r4,r8
  8010c4:	480b883a 	mov	r5,r9
  8010c8:	08083180 	call	808318 <__subdf3>
  8010cc:	1009883a 	mov	r4,r2
  8010d0:	180b883a 	mov	r5,r3
  8010d4:	2005883a 	mov	r2,r4
  8010d8:	2807883a 	mov	r3,r5
  8010dc:	100d883a 	mov	r6,r2
  8010e0:	180f883a 	mov	r7,r3
  8010e4:	8009883a 	mov	r4,r16
  8010e8:	880b883a 	mov	r5,r17
  8010ec:	08082240 	call	808224 <__ledf2>
  8010f0:	1000040e 	bge	r2,zero,801104 <logic+0x8f4>
  8010f4:	e13ffc17 	ldw	r4,-16(fp)
  8010f8:	20801517 	ldw	r2,84(r4)
  8010fc:	20c01617 	ldw	r3,88(r4)
  801100:	00001206 	br	80114c <logic+0x93c>
  801104:	e0bffc17 	ldw	r2,-16(fp)
  801108:	10800217 	ldw	r2,8(r2)
  80110c:	1009883a 	mov	r4,r2
  801110:	0808c140 	call	808c14 <__floatsidf>
  801114:	1011883a 	mov	r8,r2
  801118:	1813883a 	mov	r9,r3
  80111c:	e13ffc17 	ldw	r4,-16(fp)
  801120:	20800717 	ldw	r2,28(r4)
  801124:	20c00817 	ldw	r3,32(r4)
  801128:	100d883a 	mov	r6,r2
  80112c:	180f883a 	mov	r7,r3
  801130:	4009883a 	mov	r4,r8
  801134:	480b883a 	mov	r5,r9
  801138:	08083180 	call	808318 <__subdf3>
  80113c:	1009883a 	mov	r4,r2
  801140:	180b883a 	mov	r5,r3
  801144:	2005883a 	mov	r2,r4
  801148:	2807883a 	mov	r3,r5
  80114c:	e13ffc17 	ldw	r4,-16(fp)
  801150:	20801515 	stw	r2,84(r4)
  801154:	20c01615 	stw	r3,88(r4)
  }
  d->_cg13 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  801158:	e0bffc17 	ldw	r2,-16(fp)
  80115c:	10801a43 	ldbu	r2,105(r2)
  801160:	10803fcc 	andi	r2,r2,255
  801164:	1080201c 	xori	r2,r2,128
  801168:	10bfe004 	addi	r2,r2,-128
  80116c:	1000061e 	bne	r2,zero,801188 <logic+0x978>
  801170:	e0bffc17 	ldw	r2,-16(fp)
  801174:	10801a83 	ldbu	r2,106(r2)
  801178:	10803fcc 	andi	r2,r2,255
  80117c:	1080201c 	xori	r2,r2,128
  801180:	10bfe004 	addi	r2,r2,-128
  801184:	10000226 	beq	r2,zero,801190 <logic+0x980>
  801188:	00800044 	movi	r2,1
  80118c:	00000106 	br	801194 <logic+0x984>
  801190:	0005883a 	mov	r2,zero
  801194:	1007883a 	mov	r3,r2
  801198:	e0bffc17 	ldw	r2,-16(fp)
  80119c:	10c04685 	stb	r3,282(r2)
  d->_g12 = d->_g11 && !d->_cg12;
  8011a0:	e0bffc17 	ldw	r2,-16(fp)
  8011a4:	10802043 	ldbu	r2,129(r2)
  8011a8:	10803fcc 	andi	r2,r2,255
  8011ac:	1080201c 	xori	r2,r2,128
  8011b0:	10bfe004 	addi	r2,r2,-128
  8011b4:	10000826 	beq	r2,zero,8011d8 <logic+0x9c8>
  8011b8:	e0bffc17 	ldw	r2,-16(fp)
  8011bc:	108046c3 	ldbu	r2,283(r2)
  8011c0:	10803fcc 	andi	r2,r2,255
  8011c4:	1080201c 	xori	r2,r2,128
  8011c8:	10bfe004 	addi	r2,r2,-128
  8011cc:	1000021e 	bne	r2,zero,8011d8 <logic+0x9c8>
  8011d0:	00800044 	movi	r2,1
  8011d4:	00000106 	br	8011dc <logic+0x9cc>
  8011d8:	0005883a 	mov	r2,zero
  8011dc:	1007883a 	mov	r3,r2
  8011e0:	e0bffc17 	ldw	r2,-16(fp)
  8011e4:	10c02085 	stb	r3,130(r2)
  d->_cg15 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  8011e8:	e0bffc17 	ldw	r2,-16(fp)
  8011ec:	10801a43 	ldbu	r2,105(r2)
  8011f0:	10803fcc 	andi	r2,r2,255
  8011f4:	1080201c 	xori	r2,r2,128
  8011f8:	10bfe004 	addi	r2,r2,-128
  8011fc:	1000061e 	bne	r2,zero,801218 <logic+0xa08>
  801200:	e0bffc17 	ldw	r2,-16(fp)
  801204:	10801a83 	ldbu	r2,106(r2)
  801208:	10803fcc 	andi	r2,r2,255
  80120c:	1080201c 	xori	r2,r2,128
  801210:	10bfe004 	addi	r2,r2,-128
  801214:	10000226 	beq	r2,zero,801220 <logic+0xa10>
  801218:	00800044 	movi	r2,1
  80121c:	00000106 	br	801224 <logic+0xa14>
  801220:	0005883a 	mov	r2,zero
  801224:	1007883a 	mov	r3,r2
  801228:	e0bffc17 	ldw	r2,-16(fp)
  80122c:	10c04705 	stb	r3,284(r2)
  d->_g14 = d->_g17 && d->_cg13 || d->_g12 && d->_cg15;
  801230:	e0bffc17 	ldw	r2,-16(fp)
  801234:	10802183 	ldbu	r2,134(r2)
  801238:	10803fcc 	andi	r2,r2,255
  80123c:	1080201c 	xori	r2,r2,128
  801240:	10bfe004 	addi	r2,r2,-128
  801244:	10000626 	beq	r2,zero,801260 <logic+0xa50>
  801248:	e0bffc17 	ldw	r2,-16(fp)
  80124c:	10804683 	ldbu	r2,282(r2)
  801250:	10803fcc 	andi	r2,r2,255
  801254:	1080201c 	xori	r2,r2,128
  801258:	10bfe004 	addi	r2,r2,-128
  80125c:	10000c1e 	bne	r2,zero,801290 <logic+0xa80>
  801260:	e0bffc17 	ldw	r2,-16(fp)
  801264:	10802083 	ldbu	r2,130(r2)
  801268:	10803fcc 	andi	r2,r2,255
  80126c:	1080201c 	xori	r2,r2,128
  801270:	10bfe004 	addi	r2,r2,-128
  801274:	10000826 	beq	r2,zero,801298 <logic+0xa88>
  801278:	e0bffc17 	ldw	r2,-16(fp)
  80127c:	10804703 	ldbu	r2,284(r2)
  801280:	10803fcc 	andi	r2,r2,255
  801284:	1080201c 	xori	r2,r2,128
  801288:	10bfe004 	addi	r2,r2,-128
  80128c:	10000226 	beq	r2,zero,801298 <logic+0xa88>
  801290:	00800044 	movi	r2,1
  801294:	00000106 	br	80129c <logic+0xa8c>
  801298:	0005883a 	mov	r2,zero
  80129c:	1007883a 	mov	r3,r2
  8012a0:	e0bffc17 	ldw	r2,-16(fp)
  8012a4:	10c02105 	stb	r3,132(r2)
  d->_g21 = !d->_g35;
  8012a8:	e0bffc17 	ldw	r2,-16(fp)
  8012ac:	10802483 	ldbu	r2,146(r2)
  8012b0:	10803fcc 	andi	r2,r2,255
  8012b4:	1080201c 	xori	r2,r2,128
  8012b8:	10bfe004 	addi	r2,r2,-128
  8012bc:	1005003a 	cmpeq	r2,r2,zero
  8012c0:	1007883a 	mov	r3,r2
  8012c4:	e0bffc17 	ldw	r2,-16(fp)
  8012c8:	10c02205 	stb	r3,136(r2)
  d->_g22 = d->_g22 || d->_g25;
  8012cc:	e0bffc17 	ldw	r2,-16(fp)
  8012d0:	10802243 	ldbu	r2,137(r2)
  8012d4:	10803fcc 	andi	r2,r2,255
  8012d8:	1080201c 	xori	r2,r2,128
  8012dc:	10bfe004 	addi	r2,r2,-128
  8012e0:	1000061e 	bne	r2,zero,8012fc <logic+0xaec>
  8012e4:	e0bffc17 	ldw	r2,-16(fp)
  8012e8:	10802303 	ldbu	r2,140(r2)
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	1080201c 	xori	r2,r2,128
  8012f4:	10bfe004 	addi	r2,r2,-128
  8012f8:	10000226 	beq	r2,zero,801304 <logic+0xaf4>
  8012fc:	00800044 	movi	r2,1
  801300:	00000106 	br	801308 <logic+0xaf8>
  801304:	0005883a 	mov	r2,zero
  801308:	1007883a 	mov	r3,r2
  80130c:	e0bffc17 	ldw	r2,-16(fp)
  801310:	10c02245 	stb	r3,137(r2)
  d->_g25 = (d->_g31_e1 || d->_g7) && (d->_g14_e2 || d->_g14) && (d->_g21 || d->_g22) && (d->_g7 || d->_g14 || d->_g22);
  801314:	e0bffc17 	ldw	r2,-16(fp)
  801318:	10805cc3 	ldbu	r2,371(r2)
  80131c:	10803fcc 	andi	r2,r2,255
  801320:	1080201c 	xori	r2,r2,128
  801324:	10bfe004 	addi	r2,r2,-128
  801328:	1000061e 	bne	r2,zero,801344 <logic+0xb34>
  80132c:	e0bffc17 	ldw	r2,-16(fp)
  801330:	10801fc3 	ldbu	r2,127(r2)
  801334:	10803fcc 	andi	r2,r2,255
  801338:	1080201c 	xori	r2,r2,128
  80133c:	10bfe004 	addi	r2,r2,-128
  801340:	10002c26 	beq	r2,zero,8013f4 <logic+0xbe4>
  801344:	e0bffc17 	ldw	r2,-16(fp)
  801348:	10805c43 	ldbu	r2,369(r2)
  80134c:	10803fcc 	andi	r2,r2,255
  801350:	1080201c 	xori	r2,r2,128
  801354:	10bfe004 	addi	r2,r2,-128
  801358:	1000061e 	bne	r2,zero,801374 <logic+0xb64>
  80135c:	e0bffc17 	ldw	r2,-16(fp)
  801360:	10802103 	ldbu	r2,132(r2)
  801364:	10803fcc 	andi	r2,r2,255
  801368:	1080201c 	xori	r2,r2,128
  80136c:	10bfe004 	addi	r2,r2,-128
  801370:	10002026 	beq	r2,zero,8013f4 <logic+0xbe4>
  801374:	e0bffc17 	ldw	r2,-16(fp)
  801378:	10802203 	ldbu	r2,136(r2)
  80137c:	10803fcc 	andi	r2,r2,255
  801380:	1080201c 	xori	r2,r2,128
  801384:	10bfe004 	addi	r2,r2,-128
  801388:	1000061e 	bne	r2,zero,8013a4 <logic+0xb94>
  80138c:	e0bffc17 	ldw	r2,-16(fp)
  801390:	10802243 	ldbu	r2,137(r2)
  801394:	10803fcc 	andi	r2,r2,255
  801398:	1080201c 	xori	r2,r2,128
  80139c:	10bfe004 	addi	r2,r2,-128
  8013a0:	10001426 	beq	r2,zero,8013f4 <logic+0xbe4>
  8013a4:	e0bffc17 	ldw	r2,-16(fp)
  8013a8:	10801fc3 	ldbu	r2,127(r2)
  8013ac:	10803fcc 	andi	r2,r2,255
  8013b0:	1080201c 	xori	r2,r2,128
  8013b4:	10bfe004 	addi	r2,r2,-128
  8013b8:	10000c1e 	bne	r2,zero,8013ec <logic+0xbdc>
  8013bc:	e0bffc17 	ldw	r2,-16(fp)
  8013c0:	10802103 	ldbu	r2,132(r2)
  8013c4:	10803fcc 	andi	r2,r2,255
  8013c8:	1080201c 	xori	r2,r2,128
  8013cc:	10bfe004 	addi	r2,r2,-128
  8013d0:	1000061e 	bne	r2,zero,8013ec <logic+0xbdc>
  8013d4:	e0bffc17 	ldw	r2,-16(fp)
  8013d8:	10802243 	ldbu	r2,137(r2)
  8013dc:	10803fcc 	andi	r2,r2,255
  8013e0:	1080201c 	xori	r2,r2,128
  8013e4:	10bfe004 	addi	r2,r2,-128
  8013e8:	10000226 	beq	r2,zero,8013f4 <logic+0xbe4>
  8013ec:	00800044 	movi	r2,1
  8013f0:	00000106 	br	8013f8 <logic+0xbe8>
  8013f4:	0005883a 	mov	r2,zero
  8013f8:	1007883a 	mov	r3,r2
  8013fc:	e0bffc17 	ldw	r2,-16(fp)
  801400:	10c02305 	stb	r3,140(r2)
  d->_cg26 = d->_heart2_local__Atrig;
  801404:	e0bffc17 	ldw	r2,-16(fp)
  801408:	10c01a43 	ldbu	r3,105(r2)
  80140c:	e0bffc17 	ldw	r2,-16(fp)
  801410:	10c04805 	stb	r3,288(r2)
  d->_g23_e3 = d->_g25 && !d->_cg26;
  801414:	e0bffc17 	ldw	r2,-16(fp)
  801418:	10802303 	ldbu	r2,140(r2)
  80141c:	10803fcc 	andi	r2,r2,255
  801420:	1080201c 	xori	r2,r2,128
  801424:	10bfe004 	addi	r2,r2,-128
  801428:	10000826 	beq	r2,zero,80144c <logic+0xc3c>
  80142c:	e0bffc17 	ldw	r2,-16(fp)
  801430:	10804803 	ldbu	r2,288(r2)
  801434:	10803fcc 	andi	r2,r2,255
  801438:	1080201c 	xori	r2,r2,128
  80143c:	10bfe004 	addi	r2,r2,-128
  801440:	1000021e 	bne	r2,zero,80144c <logic+0xc3c>
  801444:	00800044 	movi	r2,1
  801448:	00000106 	br	801450 <logic+0xc40>
  80144c:	0005883a 	mov	r2,zero
  801450:	1007883a 	mov	r3,r2
  801454:	e0bffc17 	ldw	r2,-16(fp)
  801458:	10c05c85 	stb	r3,370(r2)
  if (d->_g23_e3) {
  80145c:	e0bffc17 	ldw	r2,-16(fp)
  801460:	10805c83 	ldbu	r2,370(r2)
  801464:	10803fcc 	andi	r2,r2,255
  801468:	1080201c 	xori	r2,r2,128
  80146c:	10bfe004 	addi	r2,r2,-128
  801470:	10000326 	beq	r2,zero,801480 <logic+0xc70>
    d->_region0_null_URI = 0;
  801474:	e0bffc17 	ldw	r2,-16(fp)
  801478:	10000715 	stw	zero,28(r2)
  80147c:	10000815 	stw	zero,32(r2)
  }
  d->_g23 = d->_GO || d->_g35_e2 || d->_g23_e3;
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	10804543 	ldbu	r2,277(r2)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	10000c1e 	bne	r2,zero,8014c8 <logic+0xcb8>
  801498:	e0bffc17 	ldw	r2,-16(fp)
  80149c:	10805d03 	ldbu	r2,372(r2)
  8014a0:	10803fcc 	andi	r2,r2,255
  8014a4:	1080201c 	xori	r2,r2,128
  8014a8:	10bfe004 	addi	r2,r2,-128
  8014ac:	1000061e 	bne	r2,zero,8014c8 <logic+0xcb8>
  8014b0:	e0bffc17 	ldw	r2,-16(fp)
  8014b4:	10805c83 	ldbu	r2,370(r2)
  8014b8:	10803fcc 	andi	r2,r2,255
  8014bc:	1080201c 	xori	r2,r2,128
  8014c0:	10bfe004 	addi	r2,r2,-128
  8014c4:	10000226 	beq	r2,zero,8014d0 <logic+0xcc0>
  8014c8:	00800044 	movi	r2,1
  8014cc:	00000106 	br	8014d4 <logic+0xcc4>
  8014d0:	0005883a 	mov	r2,zero
  8014d4:	1007883a 	mov	r3,r2
  8014d8:	e0bffc17 	ldw	r2,-16(fp)
  8014dc:	10c02285 	stb	r3,138(r2)
  if (d->_g23) {
  8014e0:	e0bffc17 	ldw	r2,-16(fp)
  8014e4:	10802283 	ldbu	r2,138(r2)
  8014e8:	10803fcc 	andi	r2,r2,255
  8014ec:	1080201c 	xori	r2,r2,128
  8014f0:	10bfe004 	addi	r2,r2,-128
  8014f4:	10000426 	beq	r2,zero,801508 <logic+0xcf8>
    d->_heart2_local__Atrig = 0;
  8014f8:	e0bffc17 	ldw	r2,-16(fp)
  8014fc:	10001a45 	stb	zero,105(r2)
    d->_heart2_local__Atrig1 = 0;
  801500:	e0bffc17 	ldw	r2,-16(fp)
  801504:	10001a85 	stb	zero,106(r2)
  }
  d->_cg4 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  801508:	e0bffc17 	ldw	r2,-16(fp)
  80150c:	10801a43 	ldbu	r2,105(r2)
  801510:	10803fcc 	andi	r2,r2,255
  801514:	1080201c 	xori	r2,r2,128
  801518:	10bfe004 	addi	r2,r2,-128
  80151c:	1000061e 	bne	r2,zero,801538 <logic+0xd28>
  801520:	e0bffc17 	ldw	r2,-16(fp)
  801524:	10801a83 	ldbu	r2,106(r2)
  801528:	10803fcc 	andi	r2,r2,255
  80152c:	1080201c 	xori	r2,r2,128
  801530:	10bfe004 	addi	r2,r2,-128
  801534:	10000226 	beq	r2,zero,801540 <logic+0xd30>
  801538:	00800044 	movi	r2,1
  80153c:	00000106 	br	801544 <logic+0xd34>
  801540:	0005883a 	mov	r2,zero
  801544:	1007883a 	mov	r3,r2
  801548:	e0bffc17 	ldw	r2,-16(fp)
  80154c:	10c04585 	stb	r3,278(r2)
  d->_g7_e1 = d->_g23 && !d->_cg4 || d->_g31 && !d->_cg6;
  801550:	e0bffc17 	ldw	r2,-16(fp)
  801554:	10802283 	ldbu	r2,138(r2)
  801558:	10803fcc 	andi	r2,r2,255
  80155c:	1080201c 	xori	r2,r2,128
  801560:	10bfe004 	addi	r2,r2,-128
  801564:	10000626 	beq	r2,zero,801580 <logic+0xd70>
  801568:	e0bffc17 	ldw	r2,-16(fp)
  80156c:	10804583 	ldbu	r2,278(r2)
  801570:	10803fcc 	andi	r2,r2,255
  801574:	1080201c 	xori	r2,r2,128
  801578:	10bfe004 	addi	r2,r2,-128
  80157c:	10000c26 	beq	r2,zero,8015b0 <logic+0xda0>
  801580:	e0bffc17 	ldw	r2,-16(fp)
  801584:	10802403 	ldbu	r2,144(r2)
  801588:	10803fcc 	andi	r2,r2,255
  80158c:	1080201c 	xori	r2,r2,128
  801590:	10bfe004 	addi	r2,r2,-128
  801594:	10000826 	beq	r2,zero,8015b8 <logic+0xda8>
  801598:	e0bffc17 	ldw	r2,-16(fp)
  80159c:	108045c3 	ldbu	r2,279(r2)
  8015a0:	10803fcc 	andi	r2,r2,255
  8015a4:	1080201c 	xori	r2,r2,128
  8015a8:	10bfe004 	addi	r2,r2,-128
  8015ac:	1000021e 	bne	r2,zero,8015b8 <logic+0xda8>
  8015b0:	00800044 	movi	r2,1
  8015b4:	00000106 	br	8015bc <logic+0xdac>
  8015b8:	0005883a 	mov	r2,zero
  8015bc:	1007883a 	mov	r3,r2
  8015c0:	e0bffc17 	ldw	r2,-16(fp)
  8015c4:	10c05c05 	stb	r3,368(r2)
  d->_cg8 = d->_region0_null_URI < d->URI_time;
  8015c8:	e0bffc17 	ldw	r2,-16(fp)
  8015cc:	14000717 	ldw	r16,28(r2)
  8015d0:	14400817 	ldw	r17,32(r2)
  8015d4:	e0bffc17 	ldw	r2,-16(fp)
  8015d8:	10800217 	ldw	r2,8(r2)
  8015dc:	1009883a 	mov	r4,r2
  8015e0:	0808c140 	call	808c14 <__floatsidf>
  8015e4:	1009883a 	mov	r4,r2
  8015e8:	180b883a 	mov	r5,r3
  8015ec:	04800044 	movi	r18,1
  8015f0:	200d883a 	mov	r6,r4
  8015f4:	280f883a 	mov	r7,r5
  8015f8:	8009883a 	mov	r4,r16
  8015fc:	880b883a 	mov	r5,r17
  801600:	08082240 	call	808224 <__ledf2>
  801604:	10000116 	blt	r2,zero,80160c <logic+0xdfc>
  801608:	0025883a 	mov	r18,zero
  80160c:	9007883a 	mov	r3,r18
  801610:	e0bffc17 	ldw	r2,-16(fp)
  801614:	10c04605 	stb	r3,280(r2)
  d->_g7 = d->_g23 && d->_cg8;
  801618:	e0bffc17 	ldw	r2,-16(fp)
  80161c:	10802283 	ldbu	r2,138(r2)
  801620:	10803fcc 	andi	r2,r2,255
  801624:	1080201c 	xori	r2,r2,128
  801628:	10bfe004 	addi	r2,r2,-128
  80162c:	10000826 	beq	r2,zero,801650 <logic+0xe40>
  801630:	e0bffc17 	ldw	r2,-16(fp)
  801634:	10804603 	ldbu	r2,280(r2)
  801638:	10803fcc 	andi	r2,r2,255
  80163c:	1080201c 	xori	r2,r2,128
  801640:	10bfe004 	addi	r2,r2,-128
  801644:	10000226 	beq	r2,zero,801650 <logic+0xe40>
  801648:	00800044 	movi	r2,1
  80164c:	00000106 	br	801654 <logic+0xe44>
  801650:	0005883a 	mov	r2,zero
  801654:	1007883a 	mov	r3,r2
  801658:	e0bffc17 	ldw	r2,-16(fp)
  80165c:	10c01fc5 	stb	r3,127(r2)
  if (d->_g7) {
  801660:	e0bffc17 	ldw	r2,-16(fp)
  801664:	10801fc3 	ldbu	r2,127(r2)
  801668:	10803fcc 	andi	r2,r2,255
  80166c:	1080201c 	xori	r2,r2,128
  801670:	10bfe004 	addi	r2,r2,-128
  801674:	10003426 	beq	r2,zero,801748 <logic+0xf38>
    d->sleepT = (d->sleepT < (d->URI_time - d->_region0_null_URI)) ? d->sleepT : (d->URI_time - d->_region0_null_URI);
  801678:	e0bffc17 	ldw	r2,-16(fp)
  80167c:	14001517 	ldw	r16,84(r2)
  801680:	14401617 	ldw	r17,88(r2)
  801684:	e0bffc17 	ldw	r2,-16(fp)
  801688:	10800217 	ldw	r2,8(r2)
  80168c:	1009883a 	mov	r4,r2
  801690:	0808c140 	call	808c14 <__floatsidf>
  801694:	1011883a 	mov	r8,r2
  801698:	1813883a 	mov	r9,r3
  80169c:	e13ffc17 	ldw	r4,-16(fp)
  8016a0:	20800717 	ldw	r2,28(r4)
  8016a4:	20c00817 	ldw	r3,32(r4)
  8016a8:	100d883a 	mov	r6,r2
  8016ac:	180f883a 	mov	r7,r3
  8016b0:	4009883a 	mov	r4,r8
  8016b4:	480b883a 	mov	r5,r9
  8016b8:	08083180 	call	808318 <__subdf3>
  8016bc:	1009883a 	mov	r4,r2
  8016c0:	180b883a 	mov	r5,r3
  8016c4:	2005883a 	mov	r2,r4
  8016c8:	2807883a 	mov	r3,r5
  8016cc:	100d883a 	mov	r6,r2
  8016d0:	180f883a 	mov	r7,r3
  8016d4:	8009883a 	mov	r4,r16
  8016d8:	880b883a 	mov	r5,r17
  8016dc:	08082240 	call	808224 <__ledf2>
  8016e0:	1000040e 	bge	r2,zero,8016f4 <logic+0xee4>
  8016e4:	e13ffc17 	ldw	r4,-16(fp)
  8016e8:	20801517 	ldw	r2,84(r4)
  8016ec:	20c01617 	ldw	r3,88(r4)
  8016f0:	00001206 	br	80173c <logic+0xf2c>
  8016f4:	e0bffc17 	ldw	r2,-16(fp)
  8016f8:	10800217 	ldw	r2,8(r2)
  8016fc:	1009883a 	mov	r4,r2
  801700:	0808c140 	call	808c14 <__floatsidf>
  801704:	1011883a 	mov	r8,r2
  801708:	1813883a 	mov	r9,r3
  80170c:	e13ffc17 	ldw	r4,-16(fp)
  801710:	20800717 	ldw	r2,28(r4)
  801714:	20c00817 	ldw	r3,32(r4)
  801718:	100d883a 	mov	r6,r2
  80171c:	180f883a 	mov	r7,r3
  801720:	4009883a 	mov	r4,r8
  801724:	480b883a 	mov	r5,r9
  801728:	08083180 	call	808318 <__subdf3>
  80172c:	1009883a 	mov	r4,r2
  801730:	180b883a 	mov	r5,r3
  801734:	2005883a 	mov	r2,r4
  801738:	2807883a 	mov	r3,r5
  80173c:	e13ffc17 	ldw	r4,-16(fp)
  801740:	20801515 	stw	r2,84(r4)
  801744:	20c01615 	stw	r3,88(r4)
  }
  d->_cg9 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  801748:	e0bffc17 	ldw	r2,-16(fp)
  80174c:	10801a43 	ldbu	r2,105(r2)
  801750:	10803fcc 	andi	r2,r2,255
  801754:	1080201c 	xori	r2,r2,128
  801758:	10bfe004 	addi	r2,r2,-128
  80175c:	1000061e 	bne	r2,zero,801778 <logic+0xf68>
  801760:	e0bffc17 	ldw	r2,-16(fp)
  801764:	10801a83 	ldbu	r2,106(r2)
  801768:	10803fcc 	andi	r2,r2,255
  80176c:	1080201c 	xori	r2,r2,128
  801770:	10bfe004 	addi	r2,r2,-128
  801774:	10000226 	beq	r2,zero,801780 <logic+0xf70>
  801778:	00800044 	movi	r2,1
  80177c:	00000106 	br	801784 <logic+0xf74>
  801780:	0005883a 	mov	r2,zero
  801784:	1007883a 	mov	r3,r2
  801788:	e0bffc17 	ldw	r2,-16(fp)
  80178c:	10c04645 	stb	r3,281(r2)
  d->_g14 = d->_g7 && !d->_cg9 || d->_g17 && !d->_cg13;
  801790:	e0bffc17 	ldw	r2,-16(fp)
  801794:	10801fc3 	ldbu	r2,127(r2)
  801798:	10803fcc 	andi	r2,r2,255
  80179c:	1080201c 	xori	r2,r2,128
  8017a0:	10bfe004 	addi	r2,r2,-128
  8017a4:	10000626 	beq	r2,zero,8017c0 <logic+0xfb0>
  8017a8:	e0bffc17 	ldw	r2,-16(fp)
  8017ac:	10804643 	ldbu	r2,281(r2)
  8017b0:	10803fcc 	andi	r2,r2,255
  8017b4:	1080201c 	xori	r2,r2,128
  8017b8:	10bfe004 	addi	r2,r2,-128
  8017bc:	10000c26 	beq	r2,zero,8017f0 <logic+0xfe0>
  8017c0:	e0bffc17 	ldw	r2,-16(fp)
  8017c4:	10802183 	ldbu	r2,134(r2)
  8017c8:	10803fcc 	andi	r2,r2,255
  8017cc:	1080201c 	xori	r2,r2,128
  8017d0:	10bfe004 	addi	r2,r2,-128
  8017d4:	10000826 	beq	r2,zero,8017f8 <logic+0xfe8>
  8017d8:	e0bffc17 	ldw	r2,-16(fp)
  8017dc:	10804683 	ldbu	r2,282(r2)
  8017e0:	10803fcc 	andi	r2,r2,255
  8017e4:	1080201c 	xori	r2,r2,128
  8017e8:	10bfe004 	addi	r2,r2,-128
  8017ec:	1000021e 	bne	r2,zero,8017f8 <logic+0xfe8>
  8017f0:	00800044 	movi	r2,1
  8017f4:	00000106 	br	8017fc <logic+0xfec>
  8017f8:	0005883a 	mov	r2,zero
  8017fc:	1007883a 	mov	r3,r2
  801800:	e0bffc17 	ldw	r2,-16(fp)
  801804:	10c02105 	stb	r3,132(r2)
  d->_g14_e2 = d->_g23 && !d->_cg8;
  801808:	e0bffc17 	ldw	r2,-16(fp)
  80180c:	10802283 	ldbu	r2,138(r2)
  801810:	10803fcc 	andi	r2,r2,255
  801814:	1080201c 	xori	r2,r2,128
  801818:	10bfe004 	addi	r2,r2,-128
  80181c:	10000826 	beq	r2,zero,801840 <logic+0x1030>
  801820:	e0bffc17 	ldw	r2,-16(fp)
  801824:	10804603 	ldbu	r2,280(r2)
  801828:	10803fcc 	andi	r2,r2,255
  80182c:	1080201c 	xori	r2,r2,128
  801830:	10bfe004 	addi	r2,r2,-128
  801834:	1000021e 	bne	r2,zero,801840 <logic+0x1030>
  801838:	00800044 	movi	r2,1
  80183c:	00000106 	br	801844 <logic+0x1034>
  801840:	0005883a 	mov	r2,zero
  801844:	1007883a 	mov	r3,r2
  801848:	e0bffc17 	ldw	r2,-16(fp)
  80184c:	10c05c45 	stb	r3,369(r2)
  d->_cg18 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  801850:	e0bffc17 	ldw	r2,-16(fp)
  801854:	10801a43 	ldbu	r2,105(r2)
  801858:	10803fcc 	andi	r2,r2,255
  80185c:	1080201c 	xori	r2,r2,128
  801860:	10bfe004 	addi	r2,r2,-128
  801864:	1000061e 	bne	r2,zero,801880 <logic+0x1070>
  801868:	e0bffc17 	ldw	r2,-16(fp)
  80186c:	10801a83 	ldbu	r2,106(r2)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	1080201c 	xori	r2,r2,128
  801878:	10bfe004 	addi	r2,r2,-128
  80187c:	10000226 	beq	r2,zero,801888 <logic+0x1078>
  801880:	00800044 	movi	r2,1
  801884:	00000106 	br	80188c <logic+0x107c>
  801888:	0005883a 	mov	r2,zero
  80188c:	1007883a 	mov	r3,r2
  801890:	e0bffc17 	ldw	r2,-16(fp)
  801894:	10c04745 	stb	r3,285(r2)
  d->_g37 = d->_g12 && !d->_cg15 || d->_g14_e2 && !d->_cg18;
  801898:	e0bffc17 	ldw	r2,-16(fp)
  80189c:	10802083 	ldbu	r2,130(r2)
  8018a0:	10803fcc 	andi	r2,r2,255
  8018a4:	1080201c 	xori	r2,r2,128
  8018a8:	10bfe004 	addi	r2,r2,-128
  8018ac:	10000626 	beq	r2,zero,8018c8 <logic+0x10b8>
  8018b0:	e0bffc17 	ldw	r2,-16(fp)
  8018b4:	10804703 	ldbu	r2,284(r2)
  8018b8:	10803fcc 	andi	r2,r2,255
  8018bc:	1080201c 	xori	r2,r2,128
  8018c0:	10bfe004 	addi	r2,r2,-128
  8018c4:	10000c26 	beq	r2,zero,8018f8 <logic+0x10e8>
  8018c8:	e0bffc17 	ldw	r2,-16(fp)
  8018cc:	10805c43 	ldbu	r2,369(r2)
  8018d0:	10803fcc 	andi	r2,r2,255
  8018d4:	1080201c 	xori	r2,r2,128
  8018d8:	10bfe004 	addi	r2,r2,-128
  8018dc:	10000826 	beq	r2,zero,801900 <logic+0x10f0>
  8018e0:	e0bffc17 	ldw	r2,-16(fp)
  8018e4:	10804743 	ldbu	r2,285(r2)
  8018e8:	10803fcc 	andi	r2,r2,255
  8018ec:	1080201c 	xori	r2,r2,128
  8018f0:	10bfe004 	addi	r2,r2,-128
  8018f4:	1000021e 	bne	r2,zero,801900 <logic+0x10f0>
  8018f8:	00800044 	movi	r2,1
  8018fc:	00000106 	br	801904 <logic+0x10f4>
  801900:	0005883a 	mov	r2,zero
  801904:	1007883a 	mov	r3,r2
  801908:	e0bffc17 	ldw	r2,-16(fp)
  80190c:	10c02505 	stb	r3,148(r2)
  d->_g36 = d->_g23 || d->_g24 && !d->_cg24;
  801910:	e0bffc17 	ldw	r2,-16(fp)
  801914:	10802283 	ldbu	r2,138(r2)
  801918:	10803fcc 	andi	r2,r2,255
  80191c:	1080201c 	xori	r2,r2,128
  801920:	10bfe004 	addi	r2,r2,-128
  801924:	10000c1e 	bne	r2,zero,801958 <logic+0x1148>
  801928:	e0bffc17 	ldw	r2,-16(fp)
  80192c:	108022c3 	ldbu	r2,139(r2)
  801930:	10803fcc 	andi	r2,r2,255
  801934:	1080201c 	xori	r2,r2,128
  801938:	10bfe004 	addi	r2,r2,-128
  80193c:	10000826 	beq	r2,zero,801960 <logic+0x1150>
  801940:	e0bffc17 	ldw	r2,-16(fp)
  801944:	10804783 	ldbu	r2,286(r2)
  801948:	10803fcc 	andi	r2,r2,255
  80194c:	1080201c 	xori	r2,r2,128
  801950:	10bfe004 	addi	r2,r2,-128
  801954:	1000021e 	bne	r2,zero,801960 <logic+0x1150>
  801958:	00800044 	movi	r2,1
  80195c:	00000106 	br	801964 <logic+0x1154>
  801960:	0005883a 	mov	r2,zero
  801964:	1007883a 	mov	r3,r2
  801968:	e0bffc17 	ldw	r2,-16(fp)
  80196c:	10c024c5 	stb	r3,147(r2)
  d->_g6 = d->_g25 && d->_cg26;
  801970:	e0bffc17 	ldw	r2,-16(fp)
  801974:	10802303 	ldbu	r2,140(r2)
  801978:	10803fcc 	andi	r2,r2,255
  80197c:	1080201c 	xori	r2,r2,128
  801980:	10bfe004 	addi	r2,r2,-128
  801984:	10000826 	beq	r2,zero,8019a8 <logic+0x1198>
  801988:	e0bffc17 	ldw	r2,-16(fp)
  80198c:	10804803 	ldbu	r2,288(r2)
  801990:	10803fcc 	andi	r2,r2,255
  801994:	1080201c 	xori	r2,r2,128
  801998:	10bfe004 	addi	r2,r2,-128
  80199c:	10000226 	beq	r2,zero,8019a8 <logic+0x1198>
  8019a0:	00800044 	movi	r2,1
  8019a4:	00000106 	br	8019ac <logic+0x119c>
  8019a8:	0005883a 	mov	r2,zero
  8019ac:	1007883a 	mov	r3,r2
  8019b0:	e0bffc17 	ldw	r2,-16(fp)
  8019b4:	10c01f85 	stb	r3,126(r2)
  if (d->_g6) {
  8019b8:	e0bffc17 	ldw	r2,-16(fp)
  8019bc:	10801f83 	ldbu	r2,126(r2)
  8019c0:	10803fcc 	andi	r2,r2,255
  8019c4:	1080201c 	xori	r2,r2,128
  8019c8:	10bfe004 	addi	r2,r2,-128
  8019cc:	10000526 	beq	r2,zero,8019e4 <logic+0x11d4>
    d->ready = 1;
  8019d0:	e0bffc17 	ldw	r2,-16(fp)
  8019d4:	00c00044 	movi	r3,1
  8019d8:	10c00605 	stb	r3,24(r2)
    d->_heart2_local__Atrig2 = 0;
  8019dc:	e0bffc17 	ldw	r2,-16(fp)
  8019e0:	10001ac5 	stb	zero,107(r2)
  }
  d->_cg28 = d->_heart2_local__Atrig2;
  8019e4:	e0bffc17 	ldw	r2,-16(fp)
  8019e8:	10c01ac3 	ldbu	r3,107(r2)
  8019ec:	e0bffc17 	ldw	r2,-16(fp)
  8019f0:	10c04845 	stb	r3,289(r2)
  d->_g9 = d->_g6 && !d->_cg28 || d->_g30 && !d->_cg30;
  8019f4:	e0bffc17 	ldw	r2,-16(fp)
  8019f8:	10801f83 	ldbu	r2,126(r2)
  8019fc:	10803fcc 	andi	r2,r2,255
  801a00:	1080201c 	xori	r2,r2,128
  801a04:	10bfe004 	addi	r2,r2,-128
  801a08:	10000626 	beq	r2,zero,801a24 <logic+0x1214>
  801a0c:	e0bffc17 	ldw	r2,-16(fp)
  801a10:	10804843 	ldbu	r2,289(r2)
  801a14:	10803fcc 	andi	r2,r2,255
  801a18:	1080201c 	xori	r2,r2,128
  801a1c:	10bfe004 	addi	r2,r2,-128
  801a20:	10000c26 	beq	r2,zero,801a54 <logic+0x1244>
  801a24:	e0bffc17 	ldw	r2,-16(fp)
  801a28:	108023c3 	ldbu	r2,143(r2)
  801a2c:	10803fcc 	andi	r2,r2,255
  801a30:	1080201c 	xori	r2,r2,128
  801a34:	10bfe004 	addi	r2,r2,-128
  801a38:	10000826 	beq	r2,zero,801a5c <logic+0x124c>
  801a3c:	e0bffc17 	ldw	r2,-16(fp)
  801a40:	10804883 	ldbu	r2,290(r2)
  801a44:	10803fcc 	andi	r2,r2,255
  801a48:	1080201c 	xori	r2,r2,128
  801a4c:	10bfe004 	addi	r2,r2,-128
  801a50:	1000021e 	bne	r2,zero,801a5c <logic+0x124c>
  801a54:	00800044 	movi	r2,1
  801a58:	00000106 	br	801a60 <logic+0x1250>
  801a5c:	0005883a 	mov	r2,zero
  801a60:	1007883a 	mov	r3,r2
  801a64:	e0bffc17 	ldw	r2,-16(fp)
  801a68:	10c02005 	stb	r3,128(r2)
  d->_g13 = d->_g6 || d->_g34 && !d->_cg34;
  801a6c:	e0bffc17 	ldw	r2,-16(fp)
  801a70:	10801f83 	ldbu	r2,126(r2)
  801a74:	10803fcc 	andi	r2,r2,255
  801a78:	1080201c 	xori	r2,r2,128
  801a7c:	10bfe004 	addi	r2,r2,-128
  801a80:	10000c1e 	bne	r2,zero,801ab4 <logic+0x12a4>
  801a84:	e0bffc17 	ldw	r2,-16(fp)
  801a88:	10802443 	ldbu	r2,145(r2)
  801a8c:	10803fcc 	andi	r2,r2,255
  801a90:	1080201c 	xori	r2,r2,128
  801a94:	10bfe004 	addi	r2,r2,-128
  801a98:	10000826 	beq	r2,zero,801abc <logic+0x12ac>
  801a9c:	e0bffc17 	ldw	r2,-16(fp)
  801aa0:	108048c3 	ldbu	r2,291(r2)
  801aa4:	10803fcc 	andi	r2,r2,255
  801aa8:	1080201c 	xori	r2,r2,128
  801aac:	10bfe004 	addi	r2,r2,-128
  801ab0:	1000021e 	bne	r2,zero,801abc <logic+0x12ac>
  801ab4:	00800044 	movi	r2,1
  801ab8:	00000106 	br	801ac0 <logic+0x12b0>
  801abc:	0005883a 	mov	r2,zero
  801ac0:	1007883a 	mov	r3,r2
  801ac4:	e0bffc17 	ldw	r2,-16(fp)
  801ac8:	10c020c5 	stb	r3,131(r2)
  d->_g15 = d->_pg46;
  801acc:	e0bffc17 	ldw	r2,-16(fp)
  801ad0:	10c06583 	ldbu	r3,406(r2)
  801ad4:	e0bffc17 	ldw	r2,-16(fp)
  801ad8:	10c02145 	stb	r3,133(r2)
  if (d->_g15) {
  801adc:	e0bffc17 	ldw	r2,-16(fp)
  801ae0:	10802143 	ldbu	r2,133(r2)
  801ae4:	10803fcc 	andi	r2,r2,255
  801ae8:	1080201c 	xori	r2,r2,128
  801aec:	10bfe004 	addi	r2,r2,-128
  801af0:	10001226 	beq	r2,zero,801b3c <logic+0x132c>
    d->_region1_null_LRI += d->deltaT;
  801af4:	e13ffc17 	ldw	r4,-16(fp)
  801af8:	20800917 	ldw	r2,36(r4)
  801afc:	20c00a17 	ldw	r3,40(r4)
  801b00:	e1bffc17 	ldw	r6,-16(fp)
  801b04:	31001317 	ldw	r4,76(r6)
  801b08:	31401417 	ldw	r5,80(r6)
  801b0c:	200d883a 	mov	r6,r4
  801b10:	280f883a 	mov	r7,r5
  801b14:	1009883a 	mov	r4,r2
  801b18:	180b883a 	mov	r5,r3
  801b1c:	080789c0 	call	80789c <__adddf3>
  801b20:	1009883a 	mov	r4,r2
  801b24:	180b883a 	mov	r5,r3
  801b28:	2005883a 	mov	r2,r4
  801b2c:	2807883a 	mov	r3,r5
  801b30:	e13ffc17 	ldw	r4,-16(fp)
  801b34:	20800915 	stw	r2,36(r4)
  801b38:	20c00a15 	stw	r3,40(r4)
  }
  d->_g18 = !d->_g15;
  801b3c:	e0bffc17 	ldw	r2,-16(fp)
  801b40:	10802143 	ldbu	r2,133(r2)
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1080201c 	xori	r2,r2,128
  801b4c:	10bfe004 	addi	r2,r2,-128
  801b50:	1005003a 	cmpeq	r2,r2,zero
  801b54:	1007883a 	mov	r3,r2
  801b58:	e0bffc17 	ldw	r2,-16(fp)
  801b5c:	10c021c5 	stb	r3,135(r2)
  d->_g24 = d->_pg50;
  801b60:	e0bffc17 	ldw	r2,-16(fp)
  801b64:	10c065c3 	ldbu	r3,407(r2)
  801b68:	e0bffc17 	ldw	r2,-16(fp)
  801b6c:	10c022c5 	stb	r3,139(r2)
  d->_cg71 = d->v;
  801b70:	e0bffc17 	ldw	r2,-16(fp)
  801b74:	10c018c3 	ldbu	r3,99(r2)
  801b78:	e0bffc17 	ldw	r2,-16(fp)
  801b7c:	10c04c45 	stb	r3,305(r2)
  d->_g3 = d->_g24 && d->_cg71;
  801b80:	e0bffc17 	ldw	r2,-16(fp)
  801b84:	108022c3 	ldbu	r2,139(r2)
  801b88:	10803fcc 	andi	r2,r2,255
  801b8c:	1080201c 	xori	r2,r2,128
  801b90:	10bfe004 	addi	r2,r2,-128
  801b94:	10000826 	beq	r2,zero,801bb8 <logic+0x13a8>
  801b98:	e0bffc17 	ldw	r2,-16(fp)
  801b9c:	10804c43 	ldbu	r2,305(r2)
  801ba0:	10803fcc 	andi	r2,r2,255
  801ba4:	1080201c 	xori	r2,r2,128
  801ba8:	10bfe004 	addi	r2,r2,-128
  801bac:	10000226 	beq	r2,zero,801bb8 <logic+0x13a8>
  801bb0:	00800044 	movi	r2,1
  801bb4:	00000106 	br	801bbc <logic+0x13ac>
  801bb8:	0005883a 	mov	r2,zero
  801bbc:	1007883a 	mov	r3,r2
  801bc0:	e0bffc17 	ldw	r2,-16(fp)
  801bc4:	10c01f45 	stb	r3,125(r2)
  if (d->_g3) {
  801bc8:	e0bffc17 	ldw	r2,-16(fp)
  801bcc:	10801f43 	ldbu	r2,125(r2)
  801bd0:	10803fcc 	andi	r2,r2,255
  801bd4:	1080201c 	xori	r2,r2,128
  801bd8:	10bfe004 	addi	r2,r2,-128
  801bdc:	10000326 	beq	r2,zero,801bec <logic+0x13dc>
    d->_heart2_local__Atrig5 = 1;
  801be0:	e0bffc17 	ldw	r2,-16(fp)
  801be4:	00c00044 	movi	r3,1
  801be8:	10c01b85 	stb	r3,110(r2)
  }
  d->_cg67 = d->_heart2_local__Atrig5;
  801bec:	e0bffc17 	ldw	r2,-16(fp)
  801bf0:	10c01b83 	ldbu	r3,110(r2)
  801bf4:	e0bffc17 	ldw	r2,-16(fp)
  801bf8:	10c04c05 	stb	r3,304(r2)
  d->_g26 = d->_g15 && d->_cg67;
  801bfc:	e0bffc17 	ldw	r2,-16(fp)
  801c00:	10802143 	ldbu	r2,133(r2)
  801c04:	10803fcc 	andi	r2,r2,255
  801c08:	1080201c 	xori	r2,r2,128
  801c0c:	10bfe004 	addi	r2,r2,-128
  801c10:	10000826 	beq	r2,zero,801c34 <logic+0x1424>
  801c14:	e0bffc17 	ldw	r2,-16(fp)
  801c18:	10804c03 	ldbu	r2,304(r2)
  801c1c:	10803fcc 	andi	r2,r2,255
  801c20:	1080201c 	xori	r2,r2,128
  801c24:	10bfe004 	addi	r2,r2,-128
  801c28:	10000226 	beq	r2,zero,801c34 <logic+0x1424>
  801c2c:	00800044 	movi	r2,1
  801c30:	00000106 	br	801c38 <logic+0x1428>
  801c34:	0005883a 	mov	r2,zero
  801c38:	1007883a 	mov	r3,r2
  801c3c:	e0bffc17 	ldw	r2,-16(fp)
  801c40:	10c02345 	stb	r3,141(r2)
  d->_g30 = !d->_g24;
  801c44:	e0bffc17 	ldw	r2,-16(fp)
  801c48:	108022c3 	ldbu	r2,139(r2)
  801c4c:	10803fcc 	andi	r2,r2,255
  801c50:	1080201c 	xori	r2,r2,128
  801c54:	10bfe004 	addi	r2,r2,-128
  801c58:	1005003a 	cmpeq	r2,r2,zero
  801c5c:	1007883a 	mov	r3,r2
  801c60:	e0bffc17 	ldw	r2,-16(fp)
  801c64:	10c023c5 	stb	r3,143(r2)
  d->_g27 = (d->_g18 || d->_g26) && (d->_g30 || d->_g3) && (d->_g26 || d->_g3);
  801c68:	e0bffc17 	ldw	r2,-16(fp)
  801c6c:	108021c3 	ldbu	r2,135(r2)
  801c70:	10803fcc 	andi	r2,r2,255
  801c74:	1080201c 	xori	r2,r2,128
  801c78:	10bfe004 	addi	r2,r2,-128
  801c7c:	1000061e 	bne	r2,zero,801c98 <logic+0x1488>
  801c80:	e0bffc17 	ldw	r2,-16(fp)
  801c84:	10802343 	ldbu	r2,141(r2)
  801c88:	10803fcc 	andi	r2,r2,255
  801c8c:	1080201c 	xori	r2,r2,128
  801c90:	10bfe004 	addi	r2,r2,-128
  801c94:	10001a26 	beq	r2,zero,801d00 <logic+0x14f0>
  801c98:	e0bffc17 	ldw	r2,-16(fp)
  801c9c:	108023c3 	ldbu	r2,143(r2)
  801ca0:	10803fcc 	andi	r2,r2,255
  801ca4:	1080201c 	xori	r2,r2,128
  801ca8:	10bfe004 	addi	r2,r2,-128
  801cac:	1000061e 	bne	r2,zero,801cc8 <logic+0x14b8>
  801cb0:	e0bffc17 	ldw	r2,-16(fp)
  801cb4:	10801f43 	ldbu	r2,125(r2)
  801cb8:	10803fcc 	andi	r2,r2,255
  801cbc:	1080201c 	xori	r2,r2,128
  801cc0:	10bfe004 	addi	r2,r2,-128
  801cc4:	10000e26 	beq	r2,zero,801d00 <logic+0x14f0>
  801cc8:	e0bffc17 	ldw	r2,-16(fp)
  801ccc:	10802343 	ldbu	r2,141(r2)
  801cd0:	10803fcc 	andi	r2,r2,255
  801cd4:	1080201c 	xori	r2,r2,128
  801cd8:	10bfe004 	addi	r2,r2,-128
  801cdc:	1000061e 	bne	r2,zero,801cf8 <logic+0x14e8>
  801ce0:	e0bffc17 	ldw	r2,-16(fp)
  801ce4:	10801f43 	ldbu	r2,125(r2)
  801ce8:	10803fcc 	andi	r2,r2,255
  801cec:	1080201c 	xori	r2,r2,128
  801cf0:	10bfe004 	addi	r2,r2,-128
  801cf4:	10000226 	beq	r2,zero,801d00 <logic+0x14f0>
  801cf8:	00800044 	movi	r2,1
  801cfc:	00000106 	br	801d04 <logic+0x14f4>
  801d00:	0005883a 	mov	r2,zero
  801d04:	1007883a 	mov	r3,r2
  801d08:	e0bffc17 	ldw	r2,-16(fp)
  801d0c:	10c02385 	stb	r3,142(r2)
  if (d->_g27) {
  801d10:	e0bffc17 	ldw	r2,-16(fp)
  801d14:	10802383 	ldbu	r2,142(r2)
  801d18:	10803fcc 	andi	r2,r2,255
  801d1c:	1080201c 	xori	r2,r2,128
  801d20:	10bfe004 	addi	r2,r2,-128
  801d24:	10000326 	beq	r2,zero,801d34 <logic+0x1524>
    d->_region1_null_LRI = 0;
  801d28:	e0bffc17 	ldw	r2,-16(fp)
  801d2c:	10000915 	stw	zero,36(r2)
  801d30:	10000a15 	stw	zero,40(r2)
  }
  d->_g34 = d->_pg44_e1;
  801d34:	e0bffc17 	ldw	r2,-16(fp)
  801d38:	10c06603 	ldbu	r3,408(r2)
  801d3c:	e0bffc17 	ldw	r2,-16(fp)
  801d40:	10c02445 	stb	r3,145(r2)
  if (d->_g34) {
  801d44:	e0bffc17 	ldw	r2,-16(fp)
  801d48:	10802443 	ldbu	r2,145(r2)
  801d4c:	10803fcc 	andi	r2,r2,255
  801d50:	1080201c 	xori	r2,r2,128
  801d54:	10bfe004 	addi	r2,r2,-128
  801d58:	10001226 	beq	r2,zero,801da4 <logic+0x1594>
    d->_region1_null_LRI += d->deltaT;
  801d5c:	e13ffc17 	ldw	r4,-16(fp)
  801d60:	20800917 	ldw	r2,36(r4)
  801d64:	20c00a17 	ldw	r3,40(r4)
  801d68:	e1bffc17 	ldw	r6,-16(fp)
  801d6c:	31001317 	ldw	r4,76(r6)
  801d70:	31401417 	ldw	r5,80(r6)
  801d74:	200d883a 	mov	r6,r4
  801d78:	280f883a 	mov	r7,r5
  801d7c:	1009883a 	mov	r4,r2
  801d80:	180b883a 	mov	r5,r3
  801d84:	080789c0 	call	80789c <__adddf3>
  801d88:	1009883a 	mov	r4,r2
  801d8c:	180b883a 	mov	r5,r3
  801d90:	2005883a 	mov	r2,r4
  801d94:	2807883a 	mov	r3,r5
  801d98:	e13ffc17 	ldw	r4,-16(fp)
  801d9c:	20800915 	stw	r2,36(r4)
  801da0:	20c00a15 	stw	r3,40(r4)
  }
  d->_g72_e2 = !d->_g34;
  801da4:	e0bffc17 	ldw	r2,-16(fp)
  801da8:	10802443 	ldbu	r2,145(r2)
  801dac:	10803fcc 	andi	r2,r2,255
  801db0:	1080201c 	xori	r2,r2,128
  801db4:	10bfe004 	addi	r2,r2,-128
  801db8:	1005003a 	cmpeq	r2,r2,zero
  801dbc:	1007883a 	mov	r3,r2
  801dc0:	e0bffc17 	ldw	r2,-16(fp)
  801dc4:	10c05e45 	stb	r3,377(r2)
  d->_g68_e1 = d->_pg74;
  801dc8:	e0bffc17 	ldw	r2,-16(fp)
  801dcc:	10c06643 	ldbu	r3,409(r2)
  801dd0:	e0bffc17 	ldw	r2,-16(fp)
  801dd4:	10c05e05 	stb	r3,376(r2)
  d->_cg58 = d->_region1_null_LRI >= d->LRI_time;
  801dd8:	e0bffc17 	ldw	r2,-16(fp)
  801ddc:	14000917 	ldw	r16,36(r2)
  801de0:	14400a17 	ldw	r17,40(r2)
  801de4:	e0bffc17 	ldw	r2,-16(fp)
  801de8:	10800317 	ldw	r2,12(r2)
  801dec:	1009883a 	mov	r4,r2
  801df0:	0808c140 	call	808c14 <__floatsidf>
  801df4:	1009883a 	mov	r4,r2
  801df8:	180b883a 	mov	r5,r3
  801dfc:	04800044 	movi	r18,1
  801e00:	200d883a 	mov	r6,r4
  801e04:	280f883a 	mov	r7,r5
  801e08:	8009883a 	mov	r4,r16
  801e0c:	880b883a 	mov	r5,r17
  801e10:	08081480 	call	808148 <__gedf2>
  801e14:	1000010e 	bge	r2,zero,801e1c <logic+0x160c>
  801e18:	0025883a 	mov	r18,zero
  801e1c:	9007883a 	mov	r3,r18
  801e20:	e0bffc17 	ldw	r2,-16(fp)
  801e24:	10c04b45 	stb	r3,301(r2)
  d->_g68 = d->_g68_e1 && d->_cg58;
  801e28:	e0bffc17 	ldw	r2,-16(fp)
  801e2c:	10805e03 	ldbu	r2,376(r2)
  801e30:	10803fcc 	andi	r2,r2,255
  801e34:	1080201c 	xori	r2,r2,128
  801e38:	10bfe004 	addi	r2,r2,-128
  801e3c:	10000826 	beq	r2,zero,801e60 <logic+0x1650>
  801e40:	e0bffc17 	ldw	r2,-16(fp)
  801e44:	10804b43 	ldbu	r2,301(r2)
  801e48:	10803fcc 	andi	r2,r2,255
  801e4c:	1080201c 	xori	r2,r2,128
  801e50:	10bfe004 	addi	r2,r2,-128
  801e54:	10000226 	beq	r2,zero,801e60 <logic+0x1650>
  801e58:	00800044 	movi	r2,1
  801e5c:	00000106 	br	801e64 <logic+0x1654>
  801e60:	0005883a 	mov	r2,zero
  801e64:	1007883a 	mov	r3,r2
  801e68:	e0bffc17 	ldw	r2,-16(fp)
  801e6c:	10c02a05 	stb	r3,168(r2)
  if (d->_g68) {
  801e70:	e0bffc17 	ldw	r2,-16(fp)
  801e74:	10802a03 	ldbu	r2,168(r2)
  801e78:	10803fcc 	andi	r2,r2,255
  801e7c:	1080201c 	xori	r2,r2,128
  801e80:	10bfe004 	addi	r2,r2,-128
  801e84:	10000326 	beq	r2,zero,801e94 <logic+0x1684>
    d->_heart2_local__Atrig3 = 1;
  801e88:	e0bffc17 	ldw	r2,-16(fp)
  801e8c:	00c00044 	movi	r3,1
  801e90:	10c01b05 	stb	r3,108(r2)
  }
  d->_g72 = d->_g68_e1 && !d->_cg58;
  801e94:	e0bffc17 	ldw	r2,-16(fp)
  801e98:	10805e03 	ldbu	r2,376(r2)
  801e9c:	10803fcc 	andi	r2,r2,255
  801ea0:	1080201c 	xori	r2,r2,128
  801ea4:	10bfe004 	addi	r2,r2,-128
  801ea8:	10000826 	beq	r2,zero,801ecc <logic+0x16bc>
  801eac:	e0bffc17 	ldw	r2,-16(fp)
  801eb0:	10804b43 	ldbu	r2,301(r2)
  801eb4:	10803fcc 	andi	r2,r2,255
  801eb8:	1080201c 	xori	r2,r2,128
  801ebc:	10bfe004 	addi	r2,r2,-128
  801ec0:	1000021e 	bne	r2,zero,801ecc <logic+0x16bc>
  801ec4:	00800044 	movi	r2,1
  801ec8:	00000106 	br	801ed0 <logic+0x16c0>
  801ecc:	0005883a 	mov	r2,zero
  801ed0:	1007883a 	mov	r3,r2
  801ed4:	e0bffc17 	ldw	r2,-16(fp)
  801ed8:	10c02a85 	stb	r3,170(r2)
  d->_cg61 = d->v;
  801edc:	e0bffc17 	ldw	r2,-16(fp)
  801ee0:	10c018c3 	ldbu	r3,99(r2)
  801ee4:	e0bffc17 	ldw	r2,-16(fp)
  801ee8:	10c04b05 	stb	r3,300(r2)
  d->_g62 = d->_g72 && d->_cg61;
  801eec:	e0bffc17 	ldw	r2,-16(fp)
  801ef0:	10802a83 	ldbu	r2,170(r2)
  801ef4:	10803fcc 	andi	r2,r2,255
  801ef8:	1080201c 	xori	r2,r2,128
  801efc:	10bfe004 	addi	r2,r2,-128
  801f00:	10000826 	beq	r2,zero,801f24 <logic+0x1714>
  801f04:	e0bffc17 	ldw	r2,-16(fp)
  801f08:	10804b03 	ldbu	r2,300(r2)
  801f0c:	10803fcc 	andi	r2,r2,255
  801f10:	1080201c 	xori	r2,r2,128
  801f14:	10bfe004 	addi	r2,r2,-128
  801f18:	10000226 	beq	r2,zero,801f24 <logic+0x1714>
  801f1c:	00800044 	movi	r2,1
  801f20:	00000106 	br	801f28 <logic+0x1718>
  801f24:	0005883a 	mov	r2,zero
  801f28:	1007883a 	mov	r3,r2
  801f2c:	e0bffc17 	ldw	r2,-16(fp)
  801f30:	10c02905 	stb	r3,164(r2)
  if (d->_g62) {
  801f34:	e0bffc17 	ldw	r2,-16(fp)
  801f38:	10802903 	ldbu	r2,164(r2)
  801f3c:	10803fcc 	andi	r2,r2,255
  801f40:	1080201c 	xori	r2,r2,128
  801f44:	10bfe004 	addi	r2,r2,-128
  801f48:	10000326 	beq	r2,zero,801f58 <logic+0x1748>
    d->_heart2_local__Atrig4 = 1;
  801f4c:	e0bffc17 	ldw	r2,-16(fp)
  801f50:	00c00044 	movi	r3,1
  801f54:	10c01b45 	stb	r3,109(r2)
  }
  d->_cg43 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  801f58:	e0bffc17 	ldw	r2,-16(fp)
  801f5c:	10801b03 	ldbu	r2,108(r2)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	1080201c 	xori	r2,r2,128
  801f68:	10bfe004 	addi	r2,r2,-128
  801f6c:	1000061e 	bne	r2,zero,801f88 <logic+0x1778>
  801f70:	e0bffc17 	ldw	r2,-16(fp)
  801f74:	10801b43 	ldbu	r2,109(r2)
  801f78:	10803fcc 	andi	r2,r2,255
  801f7c:	1080201c 	xori	r2,r2,128
  801f80:	10bfe004 	addi	r2,r2,-128
  801f84:	10000226 	beq	r2,zero,801f90 <logic+0x1780>
  801f88:	00800044 	movi	r2,1
  801f8c:	00000106 	br	801f94 <logic+0x1784>
  801f90:	0005883a 	mov	r2,zero
  801f94:	1007883a 	mov	r3,r2
  801f98:	e0bffc17 	ldw	r2,-16(fp)
  801f9c:	10c04945 	stb	r3,293(r2)
  d->_g44 = d->_g34 && d->_cg43;
  801fa0:	e0bffc17 	ldw	r2,-16(fp)
  801fa4:	10802443 	ldbu	r2,145(r2)
  801fa8:	10803fcc 	andi	r2,r2,255
  801fac:	1080201c 	xori	r2,r2,128
  801fb0:	10bfe004 	addi	r2,r2,-128
  801fb4:	10000826 	beq	r2,zero,801fd8 <logic+0x17c8>
  801fb8:	e0bffc17 	ldw	r2,-16(fp)
  801fbc:	10804943 	ldbu	r2,293(r2)
  801fc0:	10803fcc 	andi	r2,r2,255
  801fc4:	1080201c 	xori	r2,r2,128
  801fc8:	10bfe004 	addi	r2,r2,-128
  801fcc:	10000226 	beq	r2,zero,801fd8 <logic+0x17c8>
  801fd0:	00800044 	movi	r2,1
  801fd4:	00000106 	br	801fdc <logic+0x17cc>
  801fd8:	0005883a 	mov	r2,zero
  801fdc:	1007883a 	mov	r3,r2
  801fe0:	e0bffc17 	ldw	r2,-16(fp)
  801fe4:	10c025c5 	stb	r3,151(r2)
  d->_g54 = d->_pg73;
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10c06683 	ldbu	r3,410(r2)
  801ff0:	e0bffc17 	ldw	r2,-16(fp)
  801ff4:	10c02785 	stb	r3,158(r2)
  d->_g48 = d->_pg51_e2;
  801ff8:	e0bffc17 	ldw	r2,-16(fp)
  801ffc:	10c066c3 	ldbu	r3,411(r2)
  802000:	e0bffc17 	ldw	r2,-16(fp)
  802004:	10c02645 	stb	r3,153(r2)
  d->_g51_e2 = !(d->_g54 || d->_g48);
  802008:	e0bffc17 	ldw	r2,-16(fp)
  80200c:	10802783 	ldbu	r2,158(r2)
  802010:	10803fcc 	andi	r2,r2,255
  802014:	1080201c 	xori	r2,r2,128
  802018:	10bfe004 	addi	r2,r2,-128
  80201c:	1000081e 	bne	r2,zero,802040 <logic+0x1830>
  802020:	e0bffc17 	ldw	r2,-16(fp)
  802024:	10802643 	ldbu	r2,153(r2)
  802028:	10803fcc 	andi	r2,r2,255
  80202c:	1080201c 	xori	r2,r2,128
  802030:	10bfe004 	addi	r2,r2,-128
  802034:	1000021e 	bne	r2,zero,802040 <logic+0x1830>
  802038:	00800044 	movi	r2,1
  80203c:	00000106 	br	802044 <logic+0x1834>
  802040:	0005883a 	mov	r2,zero
  802044:	1007883a 	mov	r3,r2
  802048:	e0bffc17 	ldw	r2,-16(fp)
  80204c:	10c05d85 	stb	r3,374(r2)
  d->_g48 = d->_g48 || d->_g54;
  802050:	e0bffc17 	ldw	r2,-16(fp)
  802054:	10802643 	ldbu	r2,153(r2)
  802058:	10803fcc 	andi	r2,r2,255
  80205c:	1080201c 	xori	r2,r2,128
  802060:	10bfe004 	addi	r2,r2,-128
  802064:	1000061e 	bne	r2,zero,802080 <logic+0x1870>
  802068:	e0bffc17 	ldw	r2,-16(fp)
  80206c:	10802783 	ldbu	r2,158(r2)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1080201c 	xori	r2,r2,128
  802078:	10bfe004 	addi	r2,r2,-128
  80207c:	10000226 	beq	r2,zero,802088 <logic+0x1878>
  802080:	00800044 	movi	r2,1
  802084:	00000106 	br	80208c <logic+0x187c>
  802088:	0005883a 	mov	r2,zero
  80208c:	1007883a 	mov	r3,r2
  802090:	e0bffc17 	ldw	r2,-16(fp)
  802094:	10c02645 	stb	r3,153(r2)
  d->_cg49 = d->_region1_null_LRI < d->LRI_time;
  802098:	e0bffc17 	ldw	r2,-16(fp)
  80209c:	14000917 	ldw	r16,36(r2)
  8020a0:	14400a17 	ldw	r17,40(r2)
  8020a4:	e0bffc17 	ldw	r2,-16(fp)
  8020a8:	10800317 	ldw	r2,12(r2)
  8020ac:	1009883a 	mov	r4,r2
  8020b0:	0808c140 	call	808c14 <__floatsidf>
  8020b4:	1009883a 	mov	r4,r2
  8020b8:	180b883a 	mov	r5,r3
  8020bc:	04800044 	movi	r18,1
  8020c0:	200d883a 	mov	r6,r4
  8020c4:	280f883a 	mov	r7,r5
  8020c8:	8009883a 	mov	r4,r16
  8020cc:	880b883a 	mov	r5,r17
  8020d0:	08082240 	call	808224 <__ledf2>
  8020d4:	10000116 	blt	r2,zero,8020dc <logic+0x18cc>
  8020d8:	0025883a 	mov	r18,zero
  8020dc:	9007883a 	mov	r3,r18
  8020e0:	e0bffc17 	ldw	r2,-16(fp)
  8020e4:	10c04a45 	stb	r3,297(r2)
  d->_g54 = d->_g48 && d->_cg49;
  8020e8:	e0bffc17 	ldw	r2,-16(fp)
  8020ec:	10802643 	ldbu	r2,153(r2)
  8020f0:	10803fcc 	andi	r2,r2,255
  8020f4:	1080201c 	xori	r2,r2,128
  8020f8:	10bfe004 	addi	r2,r2,-128
  8020fc:	10000826 	beq	r2,zero,802120 <logic+0x1910>
  802100:	e0bffc17 	ldw	r2,-16(fp)
  802104:	10804a43 	ldbu	r2,297(r2)
  802108:	10803fcc 	andi	r2,r2,255
  80210c:	1080201c 	xori	r2,r2,128
  802110:	10bfe004 	addi	r2,r2,-128
  802114:	10000226 	beq	r2,zero,802120 <logic+0x1910>
  802118:	00800044 	movi	r2,1
  80211c:	00000106 	br	802124 <logic+0x1914>
  802120:	0005883a 	mov	r2,zero
  802124:	1007883a 	mov	r3,r2
  802128:	e0bffc17 	ldw	r2,-16(fp)
  80212c:	10c02785 	stb	r3,158(r2)
  if (d->_g54) {
  802130:	e0bffc17 	ldw	r2,-16(fp)
  802134:	10802783 	ldbu	r2,158(r2)
  802138:	10803fcc 	andi	r2,r2,255
  80213c:	1080201c 	xori	r2,r2,128
  802140:	10bfe004 	addi	r2,r2,-128
  802144:	10003426 	beq	r2,zero,802218 <logic+0x1a08>
    d->sleepT = (d->sleepT < (d->LRI_time - d->_region1_null_LRI)) ? d->sleepT : (d->LRI_time - d->_region1_null_LRI);
  802148:	e0bffc17 	ldw	r2,-16(fp)
  80214c:	14001517 	ldw	r16,84(r2)
  802150:	14401617 	ldw	r17,88(r2)
  802154:	e0bffc17 	ldw	r2,-16(fp)
  802158:	10800317 	ldw	r2,12(r2)
  80215c:	1009883a 	mov	r4,r2
  802160:	0808c140 	call	808c14 <__floatsidf>
  802164:	1011883a 	mov	r8,r2
  802168:	1813883a 	mov	r9,r3
  80216c:	e13ffc17 	ldw	r4,-16(fp)
  802170:	20800917 	ldw	r2,36(r4)
  802174:	20c00a17 	ldw	r3,40(r4)
  802178:	100d883a 	mov	r6,r2
  80217c:	180f883a 	mov	r7,r3
  802180:	4009883a 	mov	r4,r8
  802184:	480b883a 	mov	r5,r9
  802188:	08083180 	call	808318 <__subdf3>
  80218c:	1009883a 	mov	r4,r2
  802190:	180b883a 	mov	r5,r3
  802194:	2005883a 	mov	r2,r4
  802198:	2807883a 	mov	r3,r5
  80219c:	100d883a 	mov	r6,r2
  8021a0:	180f883a 	mov	r7,r3
  8021a4:	8009883a 	mov	r4,r16
  8021a8:	880b883a 	mov	r5,r17
  8021ac:	08082240 	call	808224 <__ledf2>
  8021b0:	1000040e 	bge	r2,zero,8021c4 <logic+0x19b4>
  8021b4:	e13ffc17 	ldw	r4,-16(fp)
  8021b8:	20801517 	ldw	r2,84(r4)
  8021bc:	20c01617 	ldw	r3,88(r4)
  8021c0:	00001206 	br	80220c <logic+0x19fc>
  8021c4:	e0bffc17 	ldw	r2,-16(fp)
  8021c8:	10800317 	ldw	r2,12(r2)
  8021cc:	1009883a 	mov	r4,r2
  8021d0:	0808c140 	call	808c14 <__floatsidf>
  8021d4:	1011883a 	mov	r8,r2
  8021d8:	1813883a 	mov	r9,r3
  8021dc:	e13ffc17 	ldw	r4,-16(fp)
  8021e0:	20800917 	ldw	r2,36(r4)
  8021e4:	20c00a17 	ldw	r3,40(r4)
  8021e8:	100d883a 	mov	r6,r2
  8021ec:	180f883a 	mov	r7,r3
  8021f0:	4009883a 	mov	r4,r8
  8021f4:	480b883a 	mov	r5,r9
  8021f8:	08083180 	call	808318 <__subdf3>
  8021fc:	1009883a 	mov	r4,r2
  802200:	180b883a 	mov	r5,r3
  802204:	2005883a 	mov	r2,r4
  802208:	2807883a 	mov	r3,r5
  80220c:	e13ffc17 	ldw	r4,-16(fp)
  802210:	20801515 	stw	r2,84(r4)
  802214:	20c01615 	stw	r3,88(r4)
  }
  d->_cg50 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802218:	e0bffc17 	ldw	r2,-16(fp)
  80221c:	10801b03 	ldbu	r2,108(r2)
  802220:	10803fcc 	andi	r2,r2,255
  802224:	1080201c 	xori	r2,r2,128
  802228:	10bfe004 	addi	r2,r2,-128
  80222c:	1000061e 	bne	r2,zero,802248 <logic+0x1a38>
  802230:	e0bffc17 	ldw	r2,-16(fp)
  802234:	10801b43 	ldbu	r2,109(r2)
  802238:	10803fcc 	andi	r2,r2,255
  80223c:	1080201c 	xori	r2,r2,128
  802240:	10bfe004 	addi	r2,r2,-128
  802244:	10000226 	beq	r2,zero,802250 <logic+0x1a40>
  802248:	00800044 	movi	r2,1
  80224c:	00000106 	br	802254 <logic+0x1a44>
  802250:	0005883a 	mov	r2,zero
  802254:	1007883a 	mov	r3,r2
  802258:	e0bffc17 	ldw	r2,-16(fp)
  80225c:	10c04a05 	stb	r3,296(r2)
  d->_g49 = d->_g48 && !d->_cg49;
  802260:	e0bffc17 	ldw	r2,-16(fp)
  802264:	10802643 	ldbu	r2,153(r2)
  802268:	10803fcc 	andi	r2,r2,255
  80226c:	1080201c 	xori	r2,r2,128
  802270:	10bfe004 	addi	r2,r2,-128
  802274:	10000826 	beq	r2,zero,802298 <logic+0x1a88>
  802278:	e0bffc17 	ldw	r2,-16(fp)
  80227c:	10804a43 	ldbu	r2,297(r2)
  802280:	10803fcc 	andi	r2,r2,255
  802284:	1080201c 	xori	r2,r2,128
  802288:	10bfe004 	addi	r2,r2,-128
  80228c:	1000021e 	bne	r2,zero,802298 <logic+0x1a88>
  802290:	00800044 	movi	r2,1
  802294:	00000106 	br	80229c <logic+0x1a8c>
  802298:	0005883a 	mov	r2,zero
  80229c:	1007883a 	mov	r3,r2
  8022a0:	e0bffc17 	ldw	r2,-16(fp)
  8022a4:	10c02685 	stb	r3,154(r2)
  d->_cg52 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  8022a8:	e0bffc17 	ldw	r2,-16(fp)
  8022ac:	10801b03 	ldbu	r2,108(r2)
  8022b0:	10803fcc 	andi	r2,r2,255
  8022b4:	1080201c 	xori	r2,r2,128
  8022b8:	10bfe004 	addi	r2,r2,-128
  8022bc:	1000061e 	bne	r2,zero,8022d8 <logic+0x1ac8>
  8022c0:	e0bffc17 	ldw	r2,-16(fp)
  8022c4:	10801b43 	ldbu	r2,109(r2)
  8022c8:	10803fcc 	andi	r2,r2,255
  8022cc:	1080201c 	xori	r2,r2,128
  8022d0:	10bfe004 	addi	r2,r2,-128
  8022d4:	10000226 	beq	r2,zero,8022e0 <logic+0x1ad0>
  8022d8:	00800044 	movi	r2,1
  8022dc:	00000106 	br	8022e4 <logic+0x1ad4>
  8022e0:	0005883a 	mov	r2,zero
  8022e4:	1007883a 	mov	r3,r2
  8022e8:	e0bffc17 	ldw	r2,-16(fp)
  8022ec:	10c04a85 	stb	r3,298(r2)
  d->_g51 = d->_g54 && d->_cg50 || d->_g49 && d->_cg52;
  8022f0:	e0bffc17 	ldw	r2,-16(fp)
  8022f4:	10802783 	ldbu	r2,158(r2)
  8022f8:	10803fcc 	andi	r2,r2,255
  8022fc:	1080201c 	xori	r2,r2,128
  802300:	10bfe004 	addi	r2,r2,-128
  802304:	10000626 	beq	r2,zero,802320 <logic+0x1b10>
  802308:	e0bffc17 	ldw	r2,-16(fp)
  80230c:	10804a03 	ldbu	r2,296(r2)
  802310:	10803fcc 	andi	r2,r2,255
  802314:	1080201c 	xori	r2,r2,128
  802318:	10bfe004 	addi	r2,r2,-128
  80231c:	10000c1e 	bne	r2,zero,802350 <logic+0x1b40>
  802320:	e0bffc17 	ldw	r2,-16(fp)
  802324:	10802683 	ldbu	r2,154(r2)
  802328:	10803fcc 	andi	r2,r2,255
  80232c:	1080201c 	xori	r2,r2,128
  802330:	10bfe004 	addi	r2,r2,-128
  802334:	10000826 	beq	r2,zero,802358 <logic+0x1b48>
  802338:	e0bffc17 	ldw	r2,-16(fp)
  80233c:	10804a83 	ldbu	r2,298(r2)
  802340:	10803fcc 	andi	r2,r2,255
  802344:	1080201c 	xori	r2,r2,128
  802348:	10bfe004 	addi	r2,r2,-128
  80234c:	10000226 	beq	r2,zero,802358 <logic+0x1b48>
  802350:	00800044 	movi	r2,1
  802354:	00000106 	br	80235c <logic+0x1b4c>
  802358:	0005883a 	mov	r2,zero
  80235c:	1007883a 	mov	r3,r2
  802360:	e0bffc17 	ldw	r2,-16(fp)
  802364:	10c02705 	stb	r3,156(r2)
  d->_g58 = !d->_g68_e1;
  802368:	e0bffc17 	ldw	r2,-16(fp)
  80236c:	10805e03 	ldbu	r2,376(r2)
  802370:	10803fcc 	andi	r2,r2,255
  802374:	1080201c 	xori	r2,r2,128
  802378:	10bfe004 	addi	r2,r2,-128
  80237c:	1005003a 	cmpeq	r2,r2,zero
  802380:	1007883a 	mov	r3,r2
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	10c02805 	stb	r3,160(r2)
  d->_g62 = d->_g68 || d->_g62;
  80238c:	e0bffc17 	ldw	r2,-16(fp)
  802390:	10802a03 	ldbu	r2,168(r2)
  802394:	10803fcc 	andi	r2,r2,255
  802398:	1080201c 	xori	r2,r2,128
  80239c:	10bfe004 	addi	r2,r2,-128
  8023a0:	1000061e 	bne	r2,zero,8023bc <logic+0x1bac>
  8023a4:	e0bffc17 	ldw	r2,-16(fp)
  8023a8:	10802903 	ldbu	r2,164(r2)
  8023ac:	10803fcc 	andi	r2,r2,255
  8023b0:	1080201c 	xori	r2,r2,128
  8023b4:	10bfe004 	addi	r2,r2,-128
  8023b8:	10000226 	beq	r2,zero,8023c4 <logic+0x1bb4>
  8023bc:	00800044 	movi	r2,1
  8023c0:	00000106 	br	8023c8 <logic+0x1bb8>
  8023c4:	0005883a 	mov	r2,zero
  8023c8:	1007883a 	mov	r3,r2
  8023cc:	e0bffc17 	ldw	r2,-16(fp)
  8023d0:	10c02905 	stb	r3,164(r2)
  d->_g59 = (d->_g72_e2 || d->_g44) && (d->_g51_e2 || d->_g51) && (d->_g58 || d->_g62) && (d->_g44 || d->_g51 || d->_g62);
  8023d4:	e0bffc17 	ldw	r2,-16(fp)
  8023d8:	10805e43 	ldbu	r2,377(r2)
  8023dc:	10803fcc 	andi	r2,r2,255
  8023e0:	1080201c 	xori	r2,r2,128
  8023e4:	10bfe004 	addi	r2,r2,-128
  8023e8:	1000061e 	bne	r2,zero,802404 <logic+0x1bf4>
  8023ec:	e0bffc17 	ldw	r2,-16(fp)
  8023f0:	108025c3 	ldbu	r2,151(r2)
  8023f4:	10803fcc 	andi	r2,r2,255
  8023f8:	1080201c 	xori	r2,r2,128
  8023fc:	10bfe004 	addi	r2,r2,-128
  802400:	10002c26 	beq	r2,zero,8024b4 <logic+0x1ca4>
  802404:	e0bffc17 	ldw	r2,-16(fp)
  802408:	10805d83 	ldbu	r2,374(r2)
  80240c:	10803fcc 	andi	r2,r2,255
  802410:	1080201c 	xori	r2,r2,128
  802414:	10bfe004 	addi	r2,r2,-128
  802418:	1000061e 	bne	r2,zero,802434 <logic+0x1c24>
  80241c:	e0bffc17 	ldw	r2,-16(fp)
  802420:	10802703 	ldbu	r2,156(r2)
  802424:	10803fcc 	andi	r2,r2,255
  802428:	1080201c 	xori	r2,r2,128
  80242c:	10bfe004 	addi	r2,r2,-128
  802430:	10002026 	beq	r2,zero,8024b4 <logic+0x1ca4>
  802434:	e0bffc17 	ldw	r2,-16(fp)
  802438:	10802803 	ldbu	r2,160(r2)
  80243c:	10803fcc 	andi	r2,r2,255
  802440:	1080201c 	xori	r2,r2,128
  802444:	10bfe004 	addi	r2,r2,-128
  802448:	1000061e 	bne	r2,zero,802464 <logic+0x1c54>
  80244c:	e0bffc17 	ldw	r2,-16(fp)
  802450:	10802903 	ldbu	r2,164(r2)
  802454:	10803fcc 	andi	r2,r2,255
  802458:	1080201c 	xori	r2,r2,128
  80245c:	10bfe004 	addi	r2,r2,-128
  802460:	10001426 	beq	r2,zero,8024b4 <logic+0x1ca4>
  802464:	e0bffc17 	ldw	r2,-16(fp)
  802468:	108025c3 	ldbu	r2,151(r2)
  80246c:	10803fcc 	andi	r2,r2,255
  802470:	1080201c 	xori	r2,r2,128
  802474:	10bfe004 	addi	r2,r2,-128
  802478:	10000c1e 	bne	r2,zero,8024ac <logic+0x1c9c>
  80247c:	e0bffc17 	ldw	r2,-16(fp)
  802480:	10802703 	ldbu	r2,156(r2)
  802484:	10803fcc 	andi	r2,r2,255
  802488:	1080201c 	xori	r2,r2,128
  80248c:	10bfe004 	addi	r2,r2,-128
  802490:	1000061e 	bne	r2,zero,8024ac <logic+0x1c9c>
  802494:	e0bffc17 	ldw	r2,-16(fp)
  802498:	10802903 	ldbu	r2,164(r2)
  80249c:	10803fcc 	andi	r2,r2,255
  8024a0:	1080201c 	xori	r2,r2,128
  8024a4:	10bfe004 	addi	r2,r2,-128
  8024a8:	10000226 	beq	r2,zero,8024b4 <logic+0x1ca4>
  8024ac:	00800044 	movi	r2,1
  8024b0:	00000106 	br	8024b8 <logic+0x1ca8>
  8024b4:	0005883a 	mov	r2,zero
  8024b8:	1007883a 	mov	r3,r2
  8024bc:	e0bffc17 	ldw	r2,-16(fp)
  8024c0:	10c02845 	stb	r3,161(r2)
  d->_cg63 = d->_heart2_local__Atrig3;
  8024c4:	e0bffc17 	ldw	r2,-16(fp)
  8024c8:	10c01b03 	ldbu	r3,108(r2)
  8024cc:	e0bffc17 	ldw	r2,-16(fp)
  8024d0:	10c04b85 	stb	r3,302(r2)
  d->_g51 = d->_g59 && !d->_cg63;
  8024d4:	e0bffc17 	ldw	r2,-16(fp)
  8024d8:	10802843 	ldbu	r2,161(r2)
  8024dc:	10803fcc 	andi	r2,r2,255
  8024e0:	1080201c 	xori	r2,r2,128
  8024e4:	10bfe004 	addi	r2,r2,-128
  8024e8:	10000826 	beq	r2,zero,80250c <logic+0x1cfc>
  8024ec:	e0bffc17 	ldw	r2,-16(fp)
  8024f0:	10804b83 	ldbu	r2,302(r2)
  8024f4:	10803fcc 	andi	r2,r2,255
  8024f8:	1080201c 	xori	r2,r2,128
  8024fc:	10bfe004 	addi	r2,r2,-128
  802500:	1000021e 	bne	r2,zero,80250c <logic+0x1cfc>
  802504:	00800044 	movi	r2,1
  802508:	00000106 	br	802510 <logic+0x1d00>
  80250c:	0005883a 	mov	r2,zero
  802510:	1007883a 	mov	r3,r2
  802514:	e0bffc17 	ldw	r2,-16(fp)
  802518:	10c02705 	stb	r3,156(r2)
  if (d->_g51) {
  80251c:	e0bffc17 	ldw	r2,-16(fp)
  802520:	10802703 	ldbu	r2,156(r2)
  802524:	10803fcc 	andi	r2,r2,255
  802528:	1080201c 	xori	r2,r2,128
  80252c:	10bfe004 	addi	r2,r2,-128
  802530:	10000326 	beq	r2,zero,802540 <logic+0x1d30>
    d->_region1_null_LRI = 0;
  802534:	e0bffc17 	ldw	r2,-16(fp)
  802538:	10000915 	stw	zero,36(r2)
  80253c:	10000a15 	stw	zero,40(r2)
  }
  d->_g60_e3 = d->_GO || d->_g27 || d->_g51;
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10804543 	ldbu	r2,277(r2)
  802548:	10803fcc 	andi	r2,r2,255
  80254c:	1080201c 	xori	r2,r2,128
  802550:	10bfe004 	addi	r2,r2,-128
  802554:	10000c1e 	bne	r2,zero,802588 <logic+0x1d78>
  802558:	e0bffc17 	ldw	r2,-16(fp)
  80255c:	10802383 	ldbu	r2,142(r2)
  802560:	10803fcc 	andi	r2,r2,255
  802564:	1080201c 	xori	r2,r2,128
  802568:	10bfe004 	addi	r2,r2,-128
  80256c:	1000061e 	bne	r2,zero,802588 <logic+0x1d78>
  802570:	e0bffc17 	ldw	r2,-16(fp)
  802574:	10802703 	ldbu	r2,156(r2)
  802578:	10803fcc 	andi	r2,r2,255
  80257c:	1080201c 	xori	r2,r2,128
  802580:	10bfe004 	addi	r2,r2,-128
  802584:	10000226 	beq	r2,zero,802590 <logic+0x1d80>
  802588:	00800044 	movi	r2,1
  80258c:	00000106 	br	802594 <logic+0x1d84>
  802590:	0005883a 	mov	r2,zero
  802594:	1007883a 	mov	r3,r2
  802598:	e0bffc17 	ldw	r2,-16(fp)
  80259c:	10c05dc5 	stb	r3,375(r2)
  if (d->_g60_e3) {
  8025a0:	e0bffc17 	ldw	r2,-16(fp)
  8025a4:	10805dc3 	ldbu	r2,375(r2)
  8025a8:	10803fcc 	andi	r2,r2,255
  8025ac:	1080201c 	xori	r2,r2,128
  8025b0:	10bfe004 	addi	r2,r2,-128
  8025b4:	10000426 	beq	r2,zero,8025c8 <logic+0x1db8>
    d->_heart2_local__Atrig3 = 0;
  8025b8:	e0bffc17 	ldw	r2,-16(fp)
  8025bc:	10001b05 	stb	zero,108(r2)
    d->_heart2_local__Atrig4 = 0;
  8025c0:	e0bffc17 	ldw	r2,-16(fp)
  8025c4:	10001b45 	stb	zero,109(r2)
  }
  d->_cg41 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  8025c8:	e0bffc17 	ldw	r2,-16(fp)
  8025cc:	10801b03 	ldbu	r2,108(r2)
  8025d0:	10803fcc 	andi	r2,r2,255
  8025d4:	1080201c 	xori	r2,r2,128
  8025d8:	10bfe004 	addi	r2,r2,-128
  8025dc:	1000061e 	bne	r2,zero,8025f8 <logic+0x1de8>
  8025e0:	e0bffc17 	ldw	r2,-16(fp)
  8025e4:	10801b43 	ldbu	r2,109(r2)
  8025e8:	10803fcc 	andi	r2,r2,255
  8025ec:	1080201c 	xori	r2,r2,128
  8025f0:	10bfe004 	addi	r2,r2,-128
  8025f4:	10000226 	beq	r2,zero,802600 <logic+0x1df0>
  8025f8:	00800044 	movi	r2,1
  8025fc:	00000106 	br	802604 <logic+0x1df4>
  802600:	0005883a 	mov	r2,zero
  802604:	1007883a 	mov	r3,r2
  802608:	e0bffc17 	ldw	r2,-16(fp)
  80260c:	10c04905 	stb	r3,292(r2)
  d->_g44_e1 = d->_g60_e3 && !d->_cg41 || d->_g34 && !d->_cg43;
  802610:	e0bffc17 	ldw	r2,-16(fp)
  802614:	10805dc3 	ldbu	r2,375(r2)
  802618:	10803fcc 	andi	r2,r2,255
  80261c:	1080201c 	xori	r2,r2,128
  802620:	10bfe004 	addi	r2,r2,-128
  802624:	10000626 	beq	r2,zero,802640 <logic+0x1e30>
  802628:	e0bffc17 	ldw	r2,-16(fp)
  80262c:	10804903 	ldbu	r2,292(r2)
  802630:	10803fcc 	andi	r2,r2,255
  802634:	1080201c 	xori	r2,r2,128
  802638:	10bfe004 	addi	r2,r2,-128
  80263c:	10000c26 	beq	r2,zero,802670 <logic+0x1e60>
  802640:	e0bffc17 	ldw	r2,-16(fp)
  802644:	10802443 	ldbu	r2,145(r2)
  802648:	10803fcc 	andi	r2,r2,255
  80264c:	1080201c 	xori	r2,r2,128
  802650:	10bfe004 	addi	r2,r2,-128
  802654:	10000826 	beq	r2,zero,802678 <logic+0x1e68>
  802658:	e0bffc17 	ldw	r2,-16(fp)
  80265c:	10804943 	ldbu	r2,293(r2)
  802660:	10803fcc 	andi	r2,r2,255
  802664:	1080201c 	xori	r2,r2,128
  802668:	10bfe004 	addi	r2,r2,-128
  80266c:	1000021e 	bne	r2,zero,802678 <logic+0x1e68>
  802670:	00800044 	movi	r2,1
  802674:	00000106 	br	80267c <logic+0x1e6c>
  802678:	0005883a 	mov	r2,zero
  80267c:	1007883a 	mov	r3,r2
  802680:	e0bffc17 	ldw	r2,-16(fp)
  802684:	10c05d45 	stb	r3,373(r2)
  d->_cg45 = d->_region1_null_LRI < d->LRI_time;
  802688:	e0bffc17 	ldw	r2,-16(fp)
  80268c:	14000917 	ldw	r16,36(r2)
  802690:	14400a17 	ldw	r17,40(r2)
  802694:	e0bffc17 	ldw	r2,-16(fp)
  802698:	10800317 	ldw	r2,12(r2)
  80269c:	1009883a 	mov	r4,r2
  8026a0:	0808c140 	call	808c14 <__floatsidf>
  8026a4:	1009883a 	mov	r4,r2
  8026a8:	180b883a 	mov	r5,r3
  8026ac:	04800044 	movi	r18,1
  8026b0:	200d883a 	mov	r6,r4
  8026b4:	280f883a 	mov	r7,r5
  8026b8:	8009883a 	mov	r4,r16
  8026bc:	880b883a 	mov	r5,r17
  8026c0:	08082240 	call	808224 <__ledf2>
  8026c4:	10000116 	blt	r2,zero,8026cc <logic+0x1ebc>
  8026c8:	0025883a 	mov	r18,zero
  8026cc:	9007883a 	mov	r3,r18
  8026d0:	e0bffc17 	ldw	r2,-16(fp)
  8026d4:	10c04985 	stb	r3,294(r2)
  d->_g44 = d->_g60_e3 && d->_cg45;
  8026d8:	e0bffc17 	ldw	r2,-16(fp)
  8026dc:	10805dc3 	ldbu	r2,375(r2)
  8026e0:	10803fcc 	andi	r2,r2,255
  8026e4:	1080201c 	xori	r2,r2,128
  8026e8:	10bfe004 	addi	r2,r2,-128
  8026ec:	10000826 	beq	r2,zero,802710 <logic+0x1f00>
  8026f0:	e0bffc17 	ldw	r2,-16(fp)
  8026f4:	10804983 	ldbu	r2,294(r2)
  8026f8:	10803fcc 	andi	r2,r2,255
  8026fc:	1080201c 	xori	r2,r2,128
  802700:	10bfe004 	addi	r2,r2,-128
  802704:	10000226 	beq	r2,zero,802710 <logic+0x1f00>
  802708:	00800044 	movi	r2,1
  80270c:	00000106 	br	802714 <logic+0x1f04>
  802710:	0005883a 	mov	r2,zero
  802714:	1007883a 	mov	r3,r2
  802718:	e0bffc17 	ldw	r2,-16(fp)
  80271c:	10c025c5 	stb	r3,151(r2)
  if (d->_g44) {
  802720:	e0bffc17 	ldw	r2,-16(fp)
  802724:	108025c3 	ldbu	r2,151(r2)
  802728:	10803fcc 	andi	r2,r2,255
  80272c:	1080201c 	xori	r2,r2,128
  802730:	10bfe004 	addi	r2,r2,-128
  802734:	10003426 	beq	r2,zero,802808 <logic+0x1ff8>
    d->sleepT = (d->sleepT < (d->LRI_time - d->_region1_null_LRI)) ? d->sleepT : (d->LRI_time - d->_region1_null_LRI);
  802738:	e0bffc17 	ldw	r2,-16(fp)
  80273c:	14001517 	ldw	r16,84(r2)
  802740:	14401617 	ldw	r17,88(r2)
  802744:	e0bffc17 	ldw	r2,-16(fp)
  802748:	10800317 	ldw	r2,12(r2)
  80274c:	1009883a 	mov	r4,r2
  802750:	0808c140 	call	808c14 <__floatsidf>
  802754:	1011883a 	mov	r8,r2
  802758:	1813883a 	mov	r9,r3
  80275c:	e13ffc17 	ldw	r4,-16(fp)
  802760:	20800917 	ldw	r2,36(r4)
  802764:	20c00a17 	ldw	r3,40(r4)
  802768:	100d883a 	mov	r6,r2
  80276c:	180f883a 	mov	r7,r3
  802770:	4009883a 	mov	r4,r8
  802774:	480b883a 	mov	r5,r9
  802778:	08083180 	call	808318 <__subdf3>
  80277c:	1009883a 	mov	r4,r2
  802780:	180b883a 	mov	r5,r3
  802784:	2005883a 	mov	r2,r4
  802788:	2807883a 	mov	r3,r5
  80278c:	100d883a 	mov	r6,r2
  802790:	180f883a 	mov	r7,r3
  802794:	8009883a 	mov	r4,r16
  802798:	880b883a 	mov	r5,r17
  80279c:	08082240 	call	808224 <__ledf2>
  8027a0:	1000040e 	bge	r2,zero,8027b4 <logic+0x1fa4>
  8027a4:	e13ffc17 	ldw	r4,-16(fp)
  8027a8:	20801517 	ldw	r2,84(r4)
  8027ac:	20c01617 	ldw	r3,88(r4)
  8027b0:	00001206 	br	8027fc <logic+0x1fec>
  8027b4:	e0bffc17 	ldw	r2,-16(fp)
  8027b8:	10800317 	ldw	r2,12(r2)
  8027bc:	1009883a 	mov	r4,r2
  8027c0:	0808c140 	call	808c14 <__floatsidf>
  8027c4:	1011883a 	mov	r8,r2
  8027c8:	1813883a 	mov	r9,r3
  8027cc:	e13ffc17 	ldw	r4,-16(fp)
  8027d0:	20800917 	ldw	r2,36(r4)
  8027d4:	20c00a17 	ldw	r3,40(r4)
  8027d8:	100d883a 	mov	r6,r2
  8027dc:	180f883a 	mov	r7,r3
  8027e0:	4009883a 	mov	r4,r8
  8027e4:	480b883a 	mov	r5,r9
  8027e8:	08083180 	call	808318 <__subdf3>
  8027ec:	1009883a 	mov	r4,r2
  8027f0:	180b883a 	mov	r5,r3
  8027f4:	2005883a 	mov	r2,r4
  8027f8:	2807883a 	mov	r3,r5
  8027fc:	e13ffc17 	ldw	r4,-16(fp)
  802800:	20801515 	stw	r2,84(r4)
  802804:	20c01615 	stw	r3,88(r4)
  }
  d->_cg46 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802808:	e0bffc17 	ldw	r2,-16(fp)
  80280c:	10801b03 	ldbu	r2,108(r2)
  802810:	10803fcc 	andi	r2,r2,255
  802814:	1080201c 	xori	r2,r2,128
  802818:	10bfe004 	addi	r2,r2,-128
  80281c:	1000061e 	bne	r2,zero,802838 <logic+0x2028>
  802820:	e0bffc17 	ldw	r2,-16(fp)
  802824:	10801b43 	ldbu	r2,109(r2)
  802828:	10803fcc 	andi	r2,r2,255
  80282c:	1080201c 	xori	r2,r2,128
  802830:	10bfe004 	addi	r2,r2,-128
  802834:	10000226 	beq	r2,zero,802840 <logic+0x2030>
  802838:	00800044 	movi	r2,1
  80283c:	00000106 	br	802844 <logic+0x2034>
  802840:	0005883a 	mov	r2,zero
  802844:	1007883a 	mov	r3,r2
  802848:	e0bffc17 	ldw	r2,-16(fp)
  80284c:	10c049c5 	stb	r3,295(r2)
  d->_g51_e2 = d->_g44 && !d->_cg46 || d->_g54 && !d->_cg50;
  802850:	e0bffc17 	ldw	r2,-16(fp)
  802854:	108025c3 	ldbu	r2,151(r2)
  802858:	10803fcc 	andi	r2,r2,255
  80285c:	1080201c 	xori	r2,r2,128
  802860:	10bfe004 	addi	r2,r2,-128
  802864:	10000626 	beq	r2,zero,802880 <logic+0x2070>
  802868:	e0bffc17 	ldw	r2,-16(fp)
  80286c:	108049c3 	ldbu	r2,295(r2)
  802870:	10803fcc 	andi	r2,r2,255
  802874:	1080201c 	xori	r2,r2,128
  802878:	10bfe004 	addi	r2,r2,-128
  80287c:	10000c26 	beq	r2,zero,8028b0 <logic+0x20a0>
  802880:	e0bffc17 	ldw	r2,-16(fp)
  802884:	10802783 	ldbu	r2,158(r2)
  802888:	10803fcc 	andi	r2,r2,255
  80288c:	1080201c 	xori	r2,r2,128
  802890:	10bfe004 	addi	r2,r2,-128
  802894:	10000826 	beq	r2,zero,8028b8 <logic+0x20a8>
  802898:	e0bffc17 	ldw	r2,-16(fp)
  80289c:	10804a03 	ldbu	r2,296(r2)
  8028a0:	10803fcc 	andi	r2,r2,255
  8028a4:	1080201c 	xori	r2,r2,128
  8028a8:	10bfe004 	addi	r2,r2,-128
  8028ac:	1000021e 	bne	r2,zero,8028b8 <logic+0x20a8>
  8028b0:	00800044 	movi	r2,1
  8028b4:	00000106 	br	8028bc <logic+0x20ac>
  8028b8:	0005883a 	mov	r2,zero
  8028bc:	1007883a 	mov	r3,r2
  8028c0:	e0bffc17 	ldw	r2,-16(fp)
  8028c4:	10c05d85 	stb	r3,374(r2)
  d->_g60 = d->_g60_e3 && !d->_cg45;
  8028c8:	e0bffc17 	ldw	r2,-16(fp)
  8028cc:	10805dc3 	ldbu	r2,375(r2)
  8028d0:	10803fcc 	andi	r2,r2,255
  8028d4:	1080201c 	xori	r2,r2,128
  8028d8:	10bfe004 	addi	r2,r2,-128
  8028dc:	10000826 	beq	r2,zero,802900 <logic+0x20f0>
  8028e0:	e0bffc17 	ldw	r2,-16(fp)
  8028e4:	10804983 	ldbu	r2,294(r2)
  8028e8:	10803fcc 	andi	r2,r2,255
  8028ec:	1080201c 	xori	r2,r2,128
  8028f0:	10bfe004 	addi	r2,r2,-128
  8028f4:	1000021e 	bne	r2,zero,802900 <logic+0x20f0>
  8028f8:	00800044 	movi	r2,1
  8028fc:	00000106 	br	802904 <logic+0x20f4>
  802900:	0005883a 	mov	r2,zero
  802904:	1007883a 	mov	r3,r2
  802908:	e0bffc17 	ldw	r2,-16(fp)
  80290c:	10c02885 	stb	r3,162(r2)
  d->_cg55 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802910:	e0bffc17 	ldw	r2,-16(fp)
  802914:	10801b03 	ldbu	r2,108(r2)
  802918:	10803fcc 	andi	r2,r2,255
  80291c:	1080201c 	xori	r2,r2,128
  802920:	10bfe004 	addi	r2,r2,-128
  802924:	1000061e 	bne	r2,zero,802940 <logic+0x2130>
  802928:	e0bffc17 	ldw	r2,-16(fp)
  80292c:	10801b43 	ldbu	r2,109(r2)
  802930:	10803fcc 	andi	r2,r2,255
  802934:	1080201c 	xori	r2,r2,128
  802938:	10bfe004 	addi	r2,r2,-128
  80293c:	10000226 	beq	r2,zero,802948 <logic+0x2138>
  802940:	00800044 	movi	r2,1
  802944:	00000106 	br	80294c <logic+0x213c>
  802948:	0005883a 	mov	r2,zero
  80294c:	1007883a 	mov	r3,r2
  802950:	e0bffc17 	ldw	r2,-16(fp)
  802954:	10c04ac5 	stb	r3,299(r2)
  d->_g73 = d->_g49 && !d->_cg52 || d->_g60 && !d->_cg55;
  802958:	e0bffc17 	ldw	r2,-16(fp)
  80295c:	10802683 	ldbu	r2,154(r2)
  802960:	10803fcc 	andi	r2,r2,255
  802964:	1080201c 	xori	r2,r2,128
  802968:	10bfe004 	addi	r2,r2,-128
  80296c:	10000626 	beq	r2,zero,802988 <logic+0x2178>
  802970:	e0bffc17 	ldw	r2,-16(fp)
  802974:	10804a83 	ldbu	r2,298(r2)
  802978:	10803fcc 	andi	r2,r2,255
  80297c:	1080201c 	xori	r2,r2,128
  802980:	10bfe004 	addi	r2,r2,-128
  802984:	10000c26 	beq	r2,zero,8029b8 <logic+0x21a8>
  802988:	e0bffc17 	ldw	r2,-16(fp)
  80298c:	10802883 	ldbu	r2,162(r2)
  802990:	10803fcc 	andi	r2,r2,255
  802994:	1080201c 	xori	r2,r2,128
  802998:	10bfe004 	addi	r2,r2,-128
  80299c:	10000826 	beq	r2,zero,8029c0 <logic+0x21b0>
  8029a0:	e0bffc17 	ldw	r2,-16(fp)
  8029a4:	10804ac3 	ldbu	r2,299(r2)
  8029a8:	10803fcc 	andi	r2,r2,255
  8029ac:	1080201c 	xori	r2,r2,128
  8029b0:	10bfe004 	addi	r2,r2,-128
  8029b4:	1000021e 	bne	r2,zero,8029c0 <logic+0x21b0>
  8029b8:	00800044 	movi	r2,1
  8029bc:	00000106 	br	8029c4 <logic+0x21b4>
  8029c0:	0005883a 	mov	r2,zero
  8029c4:	1007883a 	mov	r3,r2
  8029c8:	e0bffc17 	ldw	r2,-16(fp)
  8029cc:	10c02ac5 	stb	r3,171(r2)
  d->_g74 = d->_g60_e3 || d->_g72 && !d->_cg61;
  8029d0:	e0bffc17 	ldw	r2,-16(fp)
  8029d4:	10805dc3 	ldbu	r2,375(r2)
  8029d8:	10803fcc 	andi	r2,r2,255
  8029dc:	1080201c 	xori	r2,r2,128
  8029e0:	10bfe004 	addi	r2,r2,-128
  8029e4:	10000c1e 	bne	r2,zero,802a18 <logic+0x2208>
  8029e8:	e0bffc17 	ldw	r2,-16(fp)
  8029ec:	10802a83 	ldbu	r2,170(r2)
  8029f0:	10803fcc 	andi	r2,r2,255
  8029f4:	1080201c 	xori	r2,r2,128
  8029f8:	10bfe004 	addi	r2,r2,-128
  8029fc:	10000826 	beq	r2,zero,802a20 <logic+0x2210>
  802a00:	e0bffc17 	ldw	r2,-16(fp)
  802a04:	10804b03 	ldbu	r2,300(r2)
  802a08:	10803fcc 	andi	r2,r2,255
  802a0c:	1080201c 	xori	r2,r2,128
  802a10:	10bfe004 	addi	r2,r2,-128
  802a14:	1000021e 	bne	r2,zero,802a20 <logic+0x2210>
  802a18:	00800044 	movi	r2,1
  802a1c:	00000106 	br	802a24 <logic+0x2214>
  802a20:	0005883a 	mov	r2,zero
  802a24:	1007883a 	mov	r3,r2
  802a28:	e0bffc17 	ldw	r2,-16(fp)
  802a2c:	10c02b05 	stb	r3,172(r2)
  d->_g43 = d->_g59 && d->_cg63;
  802a30:	e0bffc17 	ldw	r2,-16(fp)
  802a34:	10802843 	ldbu	r2,161(r2)
  802a38:	10803fcc 	andi	r2,r2,255
  802a3c:	1080201c 	xori	r2,r2,128
  802a40:	10bfe004 	addi	r2,r2,-128
  802a44:	10000826 	beq	r2,zero,802a68 <logic+0x2258>
  802a48:	e0bffc17 	ldw	r2,-16(fp)
  802a4c:	10804b83 	ldbu	r2,302(r2)
  802a50:	10803fcc 	andi	r2,r2,255
  802a54:	1080201c 	xori	r2,r2,128
  802a58:	10bfe004 	addi	r2,r2,-128
  802a5c:	10000226 	beq	r2,zero,802a68 <logic+0x2258>
  802a60:	00800044 	movi	r2,1
  802a64:	00000106 	br	802a6c <logic+0x225c>
  802a68:	0005883a 	mov	r2,zero
  802a6c:	1007883a 	mov	r3,r2
  802a70:	e0bffc17 	ldw	r2,-16(fp)
  802a74:	10c02585 	stb	r3,150(r2)
  if (d->_g43) {
  802a78:	e0bffc17 	ldw	r2,-16(fp)
  802a7c:	10802583 	ldbu	r2,150(r2)
  802a80:	10803fcc 	andi	r2,r2,255
  802a84:	1080201c 	xori	r2,r2,128
  802a88:	10bfe004 	addi	r2,r2,-128
  802a8c:	10000826 	beq	r2,zero,802ab0 <logic+0x22a0>
    d->VP |= 1;
  802a90:	e0bffc17 	ldw	r2,-16(fp)
  802a94:	108017c3 	ldbu	r2,95(r2)
  802a98:	10800054 	ori	r2,r2,1
  802a9c:	1007883a 	mov	r3,r2
  802aa0:	e0bffc17 	ldw	r2,-16(fp)
  802aa4:	10c017c5 	stb	r3,95(r2)
    d->_heart2_local__Atrig5 = 0;
  802aa8:	e0bffc17 	ldw	r2,-16(fp)
  802aac:	10001b85 	stb	zero,110(r2)
  }
  d->_cg65 = d->_heart2_local__Atrig5;
  802ab0:	e0bffc17 	ldw	r2,-16(fp)
  802ab4:	10c01b83 	ldbu	r3,110(r2)
  802ab8:	e0bffc17 	ldw	r2,-16(fp)
  802abc:	10c04bc5 	stb	r3,303(r2)
  d->_g46 = d->_g43 && !d->_cg65 || d->_g15 && !d->_cg67;
  802ac0:	e0bffc17 	ldw	r2,-16(fp)
  802ac4:	10802583 	ldbu	r2,150(r2)
  802ac8:	10803fcc 	andi	r2,r2,255
  802acc:	1080201c 	xori	r2,r2,128
  802ad0:	10bfe004 	addi	r2,r2,-128
  802ad4:	10000626 	beq	r2,zero,802af0 <logic+0x22e0>
  802ad8:	e0bffc17 	ldw	r2,-16(fp)
  802adc:	10804bc3 	ldbu	r2,303(r2)
  802ae0:	10803fcc 	andi	r2,r2,255
  802ae4:	1080201c 	xori	r2,r2,128
  802ae8:	10bfe004 	addi	r2,r2,-128
  802aec:	10000c26 	beq	r2,zero,802b20 <logic+0x2310>
  802af0:	e0bffc17 	ldw	r2,-16(fp)
  802af4:	10802143 	ldbu	r2,133(r2)
  802af8:	10803fcc 	andi	r2,r2,255
  802afc:	1080201c 	xori	r2,r2,128
  802b00:	10bfe004 	addi	r2,r2,-128
  802b04:	10000826 	beq	r2,zero,802b28 <logic+0x2318>
  802b08:	e0bffc17 	ldw	r2,-16(fp)
  802b0c:	10804c03 	ldbu	r2,304(r2)
  802b10:	10803fcc 	andi	r2,r2,255
  802b14:	1080201c 	xori	r2,r2,128
  802b18:	10bfe004 	addi	r2,r2,-128
  802b1c:	1000021e 	bne	r2,zero,802b28 <logic+0x2318>
  802b20:	00800044 	movi	r2,1
  802b24:	00000106 	br	802b2c <logic+0x231c>
  802b28:	0005883a 	mov	r2,zero
  802b2c:	1007883a 	mov	r3,r2
  802b30:	e0bffc17 	ldw	r2,-16(fp)
  802b34:	10c02605 	stb	r3,152(r2)
  d->_g50 = d->_g43 || d->_g24 && !d->_cg71;
  802b38:	e0bffc17 	ldw	r2,-16(fp)
  802b3c:	10802583 	ldbu	r2,150(r2)
  802b40:	10803fcc 	andi	r2,r2,255
  802b44:	1080201c 	xori	r2,r2,128
  802b48:	10bfe004 	addi	r2,r2,-128
  802b4c:	10000c1e 	bne	r2,zero,802b80 <logic+0x2370>
  802b50:	e0bffc17 	ldw	r2,-16(fp)
  802b54:	108022c3 	ldbu	r2,139(r2)
  802b58:	10803fcc 	andi	r2,r2,255
  802b5c:	1080201c 	xori	r2,r2,128
  802b60:	10bfe004 	addi	r2,r2,-128
  802b64:	10000826 	beq	r2,zero,802b88 <logic+0x2378>
  802b68:	e0bffc17 	ldw	r2,-16(fp)
  802b6c:	10804c43 	ldbu	r2,305(r2)
  802b70:	10803fcc 	andi	r2,r2,255
  802b74:	1080201c 	xori	r2,r2,128
  802b78:	10bfe004 	addi	r2,r2,-128
  802b7c:	1000021e 	bne	r2,zero,802b88 <logic+0x2378>
  802b80:	00800044 	movi	r2,1
  802b84:	00000106 	br	802b8c <logic+0x237c>
  802b88:	0005883a 	mov	r2,zero
  802b8c:	1007883a 	mov	r3,r2
  802b90:	e0bffc17 	ldw	r2,-16(fp)
  802b94:	10c026c5 	stb	r3,155(r2)
  d->_g55 = d->_pg83;
  802b98:	e0bffc17 	ldw	r2,-16(fp)
  802b9c:	10c06703 	ldbu	r3,412(r2)
  802ba0:	e0bffc17 	ldw	r2,-16(fp)
  802ba4:	10c027c5 	stb	r3,159(r2)
  if (d->_g55) {
  802ba8:	e0bffc17 	ldw	r2,-16(fp)
  802bac:	108027c3 	ldbu	r2,159(r2)
  802bb0:	10803fcc 	andi	r2,r2,255
  802bb4:	1080201c 	xori	r2,r2,128
  802bb8:	10bfe004 	addi	r2,r2,-128
  802bbc:	10001226 	beq	r2,zero,802c08 <logic+0x23f8>
    d->_region2_null_VRP += d->deltaT;
  802bc0:	e13ffc17 	ldw	r4,-16(fp)
  802bc4:	20800b17 	ldw	r2,44(r4)
  802bc8:	20c00c17 	ldw	r3,48(r4)
  802bcc:	e1bffc17 	ldw	r6,-16(fp)
  802bd0:	31001317 	ldw	r4,76(r6)
  802bd4:	31401417 	ldw	r5,80(r6)
  802bd8:	200d883a 	mov	r6,r4
  802bdc:	280f883a 	mov	r7,r5
  802be0:	1009883a 	mov	r4,r2
  802be4:	180b883a 	mov	r5,r3
  802be8:	080789c0 	call	80789c <__adddf3>
  802bec:	1009883a 	mov	r4,r2
  802bf0:	180b883a 	mov	r5,r3
  802bf4:	2005883a 	mov	r2,r4
  802bf8:	2807883a 	mov	r3,r5
  802bfc:	e13ffc17 	ldw	r4,-16(fp)
  802c00:	20800b15 	stw	r2,44(r4)
  802c04:	20c00c15 	stw	r3,48(r4)
  }
  d->_g52 = !d->_g55;
  802c08:	e0bffc17 	ldw	r2,-16(fp)
  802c0c:	108027c3 	ldbu	r2,159(r2)
  802c10:	10803fcc 	andi	r2,r2,255
  802c14:	1080201c 	xori	r2,r2,128
  802c18:	10bfe004 	addi	r2,r2,-128
  802c1c:	1005003a 	cmpeq	r2,r2,zero
  802c20:	1007883a 	mov	r3,r2
  802c24:	e0bffc17 	ldw	r2,-16(fp)
  802c28:	10c02745 	stb	r3,157(r2)
  d->_g40 = d->_pg89;
  802c2c:	e0bffc17 	ldw	r2,-16(fp)
  802c30:	10c06743 	ldbu	r3,413(r2)
  802c34:	e0bffc17 	ldw	r2,-16(fp)
  802c38:	10c02545 	stb	r3,149(r2)
  d->_cg108 = d->v;
  802c3c:	e0bffc17 	ldw	r2,-16(fp)
  802c40:	10c018c3 	ldbu	r3,99(r2)
  802c44:	e0bffc17 	ldw	r2,-16(fp)
  802c48:	10c05005 	stb	r3,320(r2)
  d->_g61 = d->_g40 && d->_cg108;
  802c4c:	e0bffc17 	ldw	r2,-16(fp)
  802c50:	10802543 	ldbu	r2,149(r2)
  802c54:	10803fcc 	andi	r2,r2,255
  802c58:	1080201c 	xori	r2,r2,128
  802c5c:	10bfe004 	addi	r2,r2,-128
  802c60:	10000826 	beq	r2,zero,802c84 <logic+0x2474>
  802c64:	e0bffc17 	ldw	r2,-16(fp)
  802c68:	10805003 	ldbu	r2,320(r2)
  802c6c:	10803fcc 	andi	r2,r2,255
  802c70:	1080201c 	xori	r2,r2,128
  802c74:	10bfe004 	addi	r2,r2,-128
  802c78:	10000226 	beq	r2,zero,802c84 <logic+0x2474>
  802c7c:	00800044 	movi	r2,1
  802c80:	00000106 	br	802c88 <logic+0x2478>
  802c84:	0005883a 	mov	r2,zero
  802c88:	1007883a 	mov	r3,r2
  802c8c:	e0bffc17 	ldw	r2,-16(fp)
  802c90:	10c028c5 	stb	r3,163(r2)
  if (d->_g61) {
  802c94:	e0bffc17 	ldw	r2,-16(fp)
  802c98:	108028c3 	ldbu	r2,163(r2)
  802c9c:	10803fcc 	andi	r2,r2,255
  802ca0:	1080201c 	xori	r2,r2,128
  802ca4:	10bfe004 	addi	r2,r2,-128
  802ca8:	10000326 	beq	r2,zero,802cb8 <logic+0x24a8>
    d->_heart2_local__Atrig8 = 1;
  802cac:	e0bffc17 	ldw	r2,-16(fp)
  802cb0:	00c00044 	movi	r3,1
  802cb4:	10c01c45 	stb	r3,113(r2)
  }
  d->_g63 = d->_g40 && !d->_cg108;
  802cb8:	e0bffc17 	ldw	r2,-16(fp)
  802cbc:	10802543 	ldbu	r2,149(r2)
  802cc0:	10803fcc 	andi	r2,r2,255
  802cc4:	1080201c 	xori	r2,r2,128
  802cc8:	10bfe004 	addi	r2,r2,-128
  802ccc:	10000826 	beq	r2,zero,802cf0 <logic+0x24e0>
  802cd0:	e0bffc17 	ldw	r2,-16(fp)
  802cd4:	10805003 	ldbu	r2,320(r2)
  802cd8:	10803fcc 	andi	r2,r2,255
  802cdc:	1080201c 	xori	r2,r2,128
  802ce0:	10bfe004 	addi	r2,r2,-128
  802ce4:	1000021e 	bne	r2,zero,802cf0 <logic+0x24e0>
  802ce8:	00800044 	movi	r2,1
  802cec:	00000106 	br	802cf4 <logic+0x24e4>
  802cf0:	0005883a 	mov	r2,zero
  802cf4:	1007883a 	mov	r3,r2
  802cf8:	e0bffc17 	ldw	r2,-16(fp)
  802cfc:	10c02945 	stb	r3,165(r2)
  d->_g67 = d->_g63 && d->VS;
  802d00:	e0bffc17 	ldw	r2,-16(fp)
  802d04:	10802943 	ldbu	r2,165(r2)
  802d08:	10803fcc 	andi	r2,r2,255
  802d0c:	1080201c 	xori	r2,r2,128
  802d10:	10bfe004 	addi	r2,r2,-128
  802d14:	10000826 	beq	r2,zero,802d38 <logic+0x2528>
  802d18:	e0bffc17 	ldw	r2,-16(fp)
  802d1c:	10801743 	ldbu	r2,93(r2)
  802d20:	10803fcc 	andi	r2,r2,255
  802d24:	1080201c 	xori	r2,r2,128
  802d28:	10bfe004 	addi	r2,r2,-128
  802d2c:	10000226 	beq	r2,zero,802d38 <logic+0x2528>
  802d30:	00800044 	movi	r2,1
  802d34:	00000106 	br	802d3c <logic+0x252c>
  802d38:	0005883a 	mov	r2,zero
  802d3c:	1007883a 	mov	r3,r2
  802d40:	e0bffc17 	ldw	r2,-16(fp)
  802d44:	10c029c5 	stb	r3,167(r2)
  if (d->_g67) {
  802d48:	e0bffc17 	ldw	r2,-16(fp)
  802d4c:	108029c3 	ldbu	r2,167(r2)
  802d50:	10803fcc 	andi	r2,r2,255
  802d54:	1080201c 	xori	r2,r2,128
  802d58:	10bfe004 	addi	r2,r2,-128
  802d5c:	10000326 	beq	r2,zero,802d6c <logic+0x255c>
    d->_heart2_local__Atrig9 = 1;
  802d60:	e0bffc17 	ldw	r2,-16(fp)
  802d64:	00c00044 	movi	r3,1
  802d68:	10c01c85 	stb	r3,114(r2)
  }
  d->_cg104 = d->_heart2_local__Atrig8 || d->_heart2_local__Atrig9;
  802d6c:	e0bffc17 	ldw	r2,-16(fp)
  802d70:	10801c43 	ldbu	r2,113(r2)
  802d74:	10803fcc 	andi	r2,r2,255
  802d78:	1080201c 	xori	r2,r2,128
  802d7c:	10bfe004 	addi	r2,r2,-128
  802d80:	1000061e 	bne	r2,zero,802d9c <logic+0x258c>
  802d84:	e0bffc17 	ldw	r2,-16(fp)
  802d88:	10801c83 	ldbu	r2,114(r2)
  802d8c:	10803fcc 	andi	r2,r2,255
  802d90:	1080201c 	xori	r2,r2,128
  802d94:	10bfe004 	addi	r2,r2,-128
  802d98:	10000226 	beq	r2,zero,802da4 <logic+0x2594>
  802d9c:	00800044 	movi	r2,1
  802da0:	00000106 	br	802da8 <logic+0x2598>
  802da4:	0005883a 	mov	r2,zero
  802da8:	1007883a 	mov	r3,r2
  802dac:	e0bffc17 	ldw	r2,-16(fp)
  802db0:	10c04f85 	stb	r3,318(r2)
  d->_g64 = d->_g55 && d->_cg104;
  802db4:	e0bffc17 	ldw	r2,-16(fp)
  802db8:	108027c3 	ldbu	r2,159(r2)
  802dbc:	10803fcc 	andi	r2,r2,255
  802dc0:	1080201c 	xori	r2,r2,128
  802dc4:	10bfe004 	addi	r2,r2,-128
  802dc8:	10000826 	beq	r2,zero,802dec <logic+0x25dc>
  802dcc:	e0bffc17 	ldw	r2,-16(fp)
  802dd0:	10804f83 	ldbu	r2,318(r2)
  802dd4:	10803fcc 	andi	r2,r2,255
  802dd8:	1080201c 	xori	r2,r2,128
  802ddc:	10bfe004 	addi	r2,r2,-128
  802de0:	10000226 	beq	r2,zero,802dec <logic+0x25dc>
  802de4:	00800044 	movi	r2,1
  802de8:	00000106 	br	802df0 <logic+0x25e0>
  802dec:	0005883a 	mov	r2,zero
  802df0:	1007883a 	mov	r3,r2
  802df4:	e0bffc17 	ldw	r2,-16(fp)
  802df8:	10c02985 	stb	r3,166(r2)
  d->_g71 = !d->_g40;
  802dfc:	e0bffc17 	ldw	r2,-16(fp)
  802e00:	10802543 	ldbu	r2,149(r2)
  802e04:	10803fcc 	andi	r2,r2,255
  802e08:	1080201c 	xori	r2,r2,128
  802e0c:	10bfe004 	addi	r2,r2,-128
  802e10:	1005003a 	cmpeq	r2,r2,zero
  802e14:	1007883a 	mov	r3,r2
  802e18:	e0bffc17 	ldw	r2,-16(fp)
  802e1c:	10c02a45 	stb	r3,169(r2)
  d->_g108 = d->_g61 || d->_g67;
  802e20:	e0bffc17 	ldw	r2,-16(fp)
  802e24:	108028c3 	ldbu	r2,163(r2)
  802e28:	10803fcc 	andi	r2,r2,255
  802e2c:	1080201c 	xori	r2,r2,128
  802e30:	10bfe004 	addi	r2,r2,-128
  802e34:	1000061e 	bne	r2,zero,802e50 <logic+0x2640>
  802e38:	e0bffc17 	ldw	r2,-16(fp)
  802e3c:	108029c3 	ldbu	r2,167(r2)
  802e40:	10803fcc 	andi	r2,r2,255
  802e44:	1080201c 	xori	r2,r2,128
  802e48:	10bfe004 	addi	r2,r2,-128
  802e4c:	10000226 	beq	r2,zero,802e58 <logic+0x2648>
  802e50:	00800044 	movi	r2,1
  802e54:	00000106 	br	802e5c <logic+0x264c>
  802e58:	0005883a 	mov	r2,zero
  802e5c:	1007883a 	mov	r3,r2
  802e60:	e0bffc17 	ldw	r2,-16(fp)
  802e64:	10c03045 	stb	r3,193(r2)
  d->_g112 = (d->_g52 || d->_g64) && (d->_g71 || d->_g108) && (d->_g64 || d->_g108);
  802e68:	e0bffc17 	ldw	r2,-16(fp)
  802e6c:	10802743 	ldbu	r2,157(r2)
  802e70:	10803fcc 	andi	r2,r2,255
  802e74:	1080201c 	xori	r2,r2,128
  802e78:	10bfe004 	addi	r2,r2,-128
  802e7c:	1000061e 	bne	r2,zero,802e98 <logic+0x2688>
  802e80:	e0bffc17 	ldw	r2,-16(fp)
  802e84:	10802983 	ldbu	r2,166(r2)
  802e88:	10803fcc 	andi	r2,r2,255
  802e8c:	1080201c 	xori	r2,r2,128
  802e90:	10bfe004 	addi	r2,r2,-128
  802e94:	10001a26 	beq	r2,zero,802f00 <logic+0x26f0>
  802e98:	e0bffc17 	ldw	r2,-16(fp)
  802e9c:	10802a43 	ldbu	r2,169(r2)
  802ea0:	10803fcc 	andi	r2,r2,255
  802ea4:	1080201c 	xori	r2,r2,128
  802ea8:	10bfe004 	addi	r2,r2,-128
  802eac:	1000061e 	bne	r2,zero,802ec8 <logic+0x26b8>
  802eb0:	e0bffc17 	ldw	r2,-16(fp)
  802eb4:	10803043 	ldbu	r2,193(r2)
  802eb8:	10803fcc 	andi	r2,r2,255
  802ebc:	1080201c 	xori	r2,r2,128
  802ec0:	10bfe004 	addi	r2,r2,-128
  802ec4:	10000e26 	beq	r2,zero,802f00 <logic+0x26f0>
  802ec8:	e0bffc17 	ldw	r2,-16(fp)
  802ecc:	10802983 	ldbu	r2,166(r2)
  802ed0:	10803fcc 	andi	r2,r2,255
  802ed4:	1080201c 	xori	r2,r2,128
  802ed8:	10bfe004 	addi	r2,r2,-128
  802edc:	1000061e 	bne	r2,zero,802ef8 <logic+0x26e8>
  802ee0:	e0bffc17 	ldw	r2,-16(fp)
  802ee4:	10803043 	ldbu	r2,193(r2)
  802ee8:	10803fcc 	andi	r2,r2,255
  802eec:	1080201c 	xori	r2,r2,128
  802ef0:	10bfe004 	addi	r2,r2,-128
  802ef4:	10000226 	beq	r2,zero,802f00 <logic+0x26f0>
  802ef8:	00800044 	movi	r2,1
  802efc:	00000106 	br	802f04 <logic+0x26f4>
  802f00:	0005883a 	mov	r2,zero
  802f04:	1007883a 	mov	r3,r2
  802f08:	e0bffc17 	ldw	r2,-16(fp)
  802f0c:	10c03145 	stb	r3,197(r2)
  d->_cg113 = d->_heart2_local__Atrig8;
  802f10:	e0bffc17 	ldw	r2,-16(fp)
  802f14:	10c01c43 	ldbu	r3,113(r2)
  802f18:	e0bffc17 	ldw	r2,-16(fp)
  802f1c:	10c05045 	stb	r3,321(r2)
  d->_g109 = d->_g112 && d->_cg113;
  802f20:	e0bffc17 	ldw	r2,-16(fp)
  802f24:	10803143 	ldbu	r2,197(r2)
  802f28:	10803fcc 	andi	r2,r2,255
  802f2c:	1080201c 	xori	r2,r2,128
  802f30:	10bfe004 	addi	r2,r2,-128
  802f34:	10000826 	beq	r2,zero,802f58 <logic+0x2748>
  802f38:	e0bffc17 	ldw	r2,-16(fp)
  802f3c:	10805043 	ldbu	r2,321(r2)
  802f40:	10803fcc 	andi	r2,r2,255
  802f44:	1080201c 	xori	r2,r2,128
  802f48:	10bfe004 	addi	r2,r2,-128
  802f4c:	10000226 	beq	r2,zero,802f58 <logic+0x2748>
  802f50:	00800044 	movi	r2,1
  802f54:	00000106 	br	802f5c <logic+0x274c>
  802f58:	0005883a 	mov	r2,zero
  802f5c:	1007883a 	mov	r3,r2
  802f60:	e0bffc17 	ldw	r2,-16(fp)
  802f64:	10c03085 	stb	r3,194(r2)
  if (d->_g109) {
  802f68:	e0bffc17 	ldw	r2,-16(fp)
  802f6c:	10803083 	ldbu	r2,194(r2)
  802f70:	10803fcc 	andi	r2,r2,255
  802f74:	1080201c 	xori	r2,r2,128
  802f78:	10bfe004 	addi	r2,r2,-128
  802f7c:	10000326 	beq	r2,zero,802f8c <logic+0x277c>
    d->_region2_null_VRP = 0;
  802f80:	e0bffc17 	ldw	r2,-16(fp)
  802f84:	10000b15 	stw	zero,44(r2)
  802f88:	10000c15 	stw	zero,48(r2)
  }
  d->_g105_e1 = d->_pg88;
  802f8c:	e0bffc17 	ldw	r2,-16(fp)
  802f90:	10c06783 	ldbu	r3,414(r2)
  802f94:	e0bffc17 	ldw	r2,-16(fp)
  802f98:	10c05f45 	stb	r3,381(r2)
  if (d->_g105_e1) {
  802f9c:	e0bffc17 	ldw	r2,-16(fp)
  802fa0:	10805f43 	ldbu	r2,381(r2)
  802fa4:	10803fcc 	andi	r2,r2,255
  802fa8:	1080201c 	xori	r2,r2,128
  802fac:	10bfe004 	addi	r2,r2,-128
  802fb0:	10001226 	beq	r2,zero,802ffc <logic+0x27ec>
    d->_region2_null_VRP += d->deltaT;
  802fb4:	e13ffc17 	ldw	r4,-16(fp)
  802fb8:	20800b17 	ldw	r2,44(r4)
  802fbc:	20c00c17 	ldw	r3,48(r4)
  802fc0:	e1bffc17 	ldw	r6,-16(fp)
  802fc4:	31001317 	ldw	r4,76(r6)
  802fc8:	31401417 	ldw	r5,80(r6)
  802fcc:	200d883a 	mov	r6,r4
  802fd0:	280f883a 	mov	r7,r5
  802fd4:	1009883a 	mov	r4,r2
  802fd8:	180b883a 	mov	r5,r3
  802fdc:	080789c0 	call	80789c <__adddf3>
  802fe0:	1009883a 	mov	r4,r2
  802fe4:	180b883a 	mov	r5,r3
  802fe8:	2005883a 	mov	r2,r4
  802fec:	2807883a 	mov	r3,r5
  802ff0:	e13ffc17 	ldw	r4,-16(fp)
  802ff4:	20800b15 	stw	r2,44(r4)
  802ff8:	20c00c15 	stw	r3,48(r4)
  }
  d->_g110 = !d->_g105_e1;
  802ffc:	e0bffc17 	ldw	r2,-16(fp)
  803000:	10805f43 	ldbu	r2,381(r2)
  803004:	10803fcc 	andi	r2,r2,255
  803008:	1080201c 	xori	r2,r2,128
  80300c:	10bfe004 	addi	r2,r2,-128
  803010:	1005003a 	cmpeq	r2,r2,zero
  803014:	1007883a 	mov	r3,r2
  803018:	e0bffc17 	ldw	r2,-16(fp)
  80301c:	10c030c5 	stb	r3,195(r2)
  d->_g105 = d->_pg114;
  803020:	e0bffc17 	ldw	r2,-16(fp)
  803024:	10c067c3 	ldbu	r3,415(r2)
  803028:	e0bffc17 	ldw	r2,-16(fp)
  80302c:	10c03005 	stb	r3,192(r2)
  d->_cg95 = d->_region2_null_VRP >= d->VRP_time;
  803030:	e0bffc17 	ldw	r2,-16(fp)
  803034:	14000b17 	ldw	r16,44(r2)
  803038:	14400c17 	ldw	r17,48(r2)
  80303c:	e0bffc17 	ldw	r2,-16(fp)
  803040:	10800017 	ldw	r2,0(r2)
  803044:	1009883a 	mov	r4,r2
  803048:	0808c140 	call	808c14 <__floatsidf>
  80304c:	1009883a 	mov	r4,r2
  803050:	180b883a 	mov	r5,r3
  803054:	04800044 	movi	r18,1
  803058:	200d883a 	mov	r6,r4
  80305c:	280f883a 	mov	r7,r5
  803060:	8009883a 	mov	r4,r16
  803064:	880b883a 	mov	r5,r17
  803068:	08081480 	call	808148 <__gedf2>
  80306c:	1000010e 	bge	r2,zero,803074 <logic+0x2864>
  803070:	0025883a 	mov	r18,zero
  803074:	9007883a 	mov	r3,r18
  803078:	e0bffc17 	ldw	r2,-16(fp)
  80307c:	10c04ec5 	stb	r3,315(r2)
  d->_g110_e2 = d->_g105 && d->_cg95;
  803080:	e0bffc17 	ldw	r2,-16(fp)
  803084:	10803003 	ldbu	r2,192(r2)
  803088:	10803fcc 	andi	r2,r2,255
  80308c:	1080201c 	xori	r2,r2,128
  803090:	10bfe004 	addi	r2,r2,-128
  803094:	10000826 	beq	r2,zero,8030b8 <logic+0x28a8>
  803098:	e0bffc17 	ldw	r2,-16(fp)
  80309c:	10804ec3 	ldbu	r2,315(r2)
  8030a0:	10803fcc 	andi	r2,r2,255
  8030a4:	1080201c 	xori	r2,r2,128
  8030a8:	10bfe004 	addi	r2,r2,-128
  8030ac:	10000226 	beq	r2,zero,8030b8 <logic+0x28a8>
  8030b0:	00800044 	movi	r2,1
  8030b4:	00000106 	br	8030bc <logic+0x28ac>
  8030b8:	0005883a 	mov	r2,zero
  8030bc:	1007883a 	mov	r3,r2
  8030c0:	e0bffc17 	ldw	r2,-16(fp)
  8030c4:	10c05f85 	stb	r3,382(r2)
  if (d->_g110_e2) {
  8030c8:	e0bffc17 	ldw	r2,-16(fp)
  8030cc:	10805f83 	ldbu	r2,382(r2)
  8030d0:	10803fcc 	andi	r2,r2,255
  8030d4:	1080201c 	xori	r2,r2,128
  8030d8:	10bfe004 	addi	r2,r2,-128
  8030dc:	10000326 	beq	r2,zero,8030ec <logic+0x28dc>
    d->_heart2_local__Atrig6 = 1;
  8030e0:	e0bffc17 	ldw	r2,-16(fp)
  8030e4:	00c00044 	movi	r3,1
  8030e8:	10c01bc5 	stb	r3,111(r2)
  }
  d->_g98 = d->_g105 && !d->_cg95;
  8030ec:	e0bffc17 	ldw	r2,-16(fp)
  8030f0:	10803003 	ldbu	r2,192(r2)
  8030f4:	10803fcc 	andi	r2,r2,255
  8030f8:	1080201c 	xori	r2,r2,128
  8030fc:	10bfe004 	addi	r2,r2,-128
  803100:	10000826 	beq	r2,zero,803124 <logic+0x2914>
  803104:	e0bffc17 	ldw	r2,-16(fp)
  803108:	10804ec3 	ldbu	r2,315(r2)
  80310c:	10803fcc 	andi	r2,r2,255
  803110:	1080201c 	xori	r2,r2,128
  803114:	10bfe004 	addi	r2,r2,-128
  803118:	1000021e 	bne	r2,zero,803124 <logic+0x2914>
  80311c:	00800044 	movi	r2,1
  803120:	00000106 	br	803128 <logic+0x2918>
  803124:	0005883a 	mov	r2,zero
  803128:	1007883a 	mov	r3,r2
  80312c:	e0bffc17 	ldw	r2,-16(fp)
  803130:	10c02ec5 	stb	r3,187(r2)
  d->_g99 = d->_g98 && d->VS;
  803134:	e0bffc17 	ldw	r2,-16(fp)
  803138:	10802ec3 	ldbu	r2,187(r2)
  80313c:	10803fcc 	andi	r2,r2,255
  803140:	1080201c 	xori	r2,r2,128
  803144:	10bfe004 	addi	r2,r2,-128
  803148:	10000826 	beq	r2,zero,80316c <logic+0x295c>
  80314c:	e0bffc17 	ldw	r2,-16(fp)
  803150:	10801743 	ldbu	r2,93(r2)
  803154:	10803fcc 	andi	r2,r2,255
  803158:	1080201c 	xori	r2,r2,128
  80315c:	10bfe004 	addi	r2,r2,-128
  803160:	10000226 	beq	r2,zero,80316c <logic+0x295c>
  803164:	00800044 	movi	r2,1
  803168:	00000106 	br	803170 <logic+0x2960>
  80316c:	0005883a 	mov	r2,zero
  803170:	1007883a 	mov	r3,r2
  803174:	e0bffc17 	ldw	r2,-16(fp)
  803178:	10c02f05 	stb	r3,188(r2)
  if (d->_g99) {
  80317c:	e0bffc17 	ldw	r2,-16(fp)
  803180:	10802f03 	ldbu	r2,188(r2)
  803184:	10803fcc 	andi	r2,r2,255
  803188:	1080201c 	xori	r2,r2,128
  80318c:	10bfe004 	addi	r2,r2,-128
  803190:	10000326 	beq	r2,zero,8031a0 <logic+0x2990>
    d->_heart2_local__Atrig7 = 1;
  803194:	e0bffc17 	ldw	r2,-16(fp)
  803198:	00c00044 	movi	r3,1
  80319c:	10c01c05 	stb	r3,112(r2)
  }
  d->_cg80 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  8031a0:	e0bffc17 	ldw	r2,-16(fp)
  8031a4:	10801bc3 	ldbu	r2,111(r2)
  8031a8:	10803fcc 	andi	r2,r2,255
  8031ac:	1080201c 	xori	r2,r2,128
  8031b0:	10bfe004 	addi	r2,r2,-128
  8031b4:	1000061e 	bne	r2,zero,8031d0 <logic+0x29c0>
  8031b8:	e0bffc17 	ldw	r2,-16(fp)
  8031bc:	10801c03 	ldbu	r2,112(r2)
  8031c0:	10803fcc 	andi	r2,r2,255
  8031c4:	1080201c 	xori	r2,r2,128
  8031c8:	10bfe004 	addi	r2,r2,-128
  8031cc:	10000226 	beq	r2,zero,8031d8 <logic+0x29c8>
  8031d0:	00800044 	movi	r2,1
  8031d4:	00000106 	br	8031dc <logic+0x29cc>
  8031d8:	0005883a 	mov	r2,zero
  8031dc:	1007883a 	mov	r3,r2
  8031e0:	e0bffc17 	ldw	r2,-16(fp)
  8031e4:	10c04cc5 	stb	r3,307(r2)
  d->_g81 = d->_g105_e1 && d->_cg80;
  8031e8:	e0bffc17 	ldw	r2,-16(fp)
  8031ec:	10805f43 	ldbu	r2,381(r2)
  8031f0:	10803fcc 	andi	r2,r2,255
  8031f4:	1080201c 	xori	r2,r2,128
  8031f8:	10bfe004 	addi	r2,r2,-128
  8031fc:	10000826 	beq	r2,zero,803220 <logic+0x2a10>
  803200:	e0bffc17 	ldw	r2,-16(fp)
  803204:	10804cc3 	ldbu	r2,307(r2)
  803208:	10803fcc 	andi	r2,r2,255
  80320c:	1080201c 	xori	r2,r2,128
  803210:	10bfe004 	addi	r2,r2,-128
  803214:	10000226 	beq	r2,zero,803220 <logic+0x2a10>
  803218:	00800044 	movi	r2,1
  80321c:	00000106 	br	803224 <logic+0x2a14>
  803220:	0005883a 	mov	r2,zero
  803224:	1007883a 	mov	r3,r2
  803228:	e0bffc17 	ldw	r2,-16(fp)
  80322c:	10c02bc5 	stb	r3,175(r2)
  d->_g91 = d->_pg116;
  803230:	e0bffc17 	ldw	r2,-16(fp)
  803234:	10c06803 	ldbu	r3,416(r2)
  803238:	e0bffc17 	ldw	r2,-16(fp)
  80323c:	10c02d85 	stb	r3,182(r2)
  d->_g85 = d->_pg97_e3;
  803240:	e0bffc17 	ldw	r2,-16(fp)
  803244:	10c06843 	ldbu	r3,417(r2)
  803248:	e0bffc17 	ldw	r2,-16(fp)
  80324c:	10c02c45 	stb	r3,177(r2)
  d->_g88_e2 = !(d->_g91 || d->_g85);
  803250:	e0bffc17 	ldw	r2,-16(fp)
  803254:	10802d83 	ldbu	r2,182(r2)
  803258:	10803fcc 	andi	r2,r2,255
  80325c:	1080201c 	xori	r2,r2,128
  803260:	10bfe004 	addi	r2,r2,-128
  803264:	1000081e 	bne	r2,zero,803288 <logic+0x2a78>
  803268:	e0bffc17 	ldw	r2,-16(fp)
  80326c:	10802c43 	ldbu	r2,177(r2)
  803270:	10803fcc 	andi	r2,r2,255
  803274:	1080201c 	xori	r2,r2,128
  803278:	10bfe004 	addi	r2,r2,-128
  80327c:	1000021e 	bne	r2,zero,803288 <logic+0x2a78>
  803280:	00800044 	movi	r2,1
  803284:	00000106 	br	80328c <logic+0x2a7c>
  803288:	0005883a 	mov	r2,zero
  80328c:	1007883a 	mov	r3,r2
  803290:	e0bffc17 	ldw	r2,-16(fp)
  803294:	10c05ec5 	stb	r3,379(r2)
  d->_g91 = d->_g85 || d->_g91;
  803298:	e0bffc17 	ldw	r2,-16(fp)
  80329c:	10802c43 	ldbu	r2,177(r2)
  8032a0:	10803fcc 	andi	r2,r2,255
  8032a4:	1080201c 	xori	r2,r2,128
  8032a8:	10bfe004 	addi	r2,r2,-128
  8032ac:	1000061e 	bne	r2,zero,8032c8 <logic+0x2ab8>
  8032b0:	e0bffc17 	ldw	r2,-16(fp)
  8032b4:	10802d83 	ldbu	r2,182(r2)
  8032b8:	10803fcc 	andi	r2,r2,255
  8032bc:	1080201c 	xori	r2,r2,128
  8032c0:	10bfe004 	addi	r2,r2,-128
  8032c4:	10000226 	beq	r2,zero,8032d0 <logic+0x2ac0>
  8032c8:	00800044 	movi	r2,1
  8032cc:	00000106 	br	8032d4 <logic+0x2ac4>
  8032d0:	0005883a 	mov	r2,zero
  8032d4:	1007883a 	mov	r3,r2
  8032d8:	e0bffc17 	ldw	r2,-16(fp)
  8032dc:	10c02d85 	stb	r3,182(r2)
  d->_cg86 = d->_region2_null_VRP < d->VRP_time;
  8032e0:	e0bffc17 	ldw	r2,-16(fp)
  8032e4:	14000b17 	ldw	r16,44(r2)
  8032e8:	14400c17 	ldw	r17,48(r2)
  8032ec:	e0bffc17 	ldw	r2,-16(fp)
  8032f0:	10800017 	ldw	r2,0(r2)
  8032f4:	1009883a 	mov	r4,r2
  8032f8:	0808c140 	call	808c14 <__floatsidf>
  8032fc:	1009883a 	mov	r4,r2
  803300:	180b883a 	mov	r5,r3
  803304:	04800044 	movi	r18,1
  803308:	200d883a 	mov	r6,r4
  80330c:	280f883a 	mov	r7,r5
  803310:	8009883a 	mov	r4,r16
  803314:	880b883a 	mov	r5,r17
  803318:	08082240 	call	808224 <__ledf2>
  80331c:	10000116 	blt	r2,zero,803324 <logic+0x2b14>
  803320:	0025883a 	mov	r18,zero
  803324:	9007883a 	mov	r3,r18
  803328:	e0bffc17 	ldw	r2,-16(fp)
  80332c:	10c04dc5 	stb	r3,311(r2)
  d->_g85 = d->_g91 && d->_cg86;
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	10802d83 	ldbu	r2,182(r2)
  803338:	10803fcc 	andi	r2,r2,255
  80333c:	1080201c 	xori	r2,r2,128
  803340:	10bfe004 	addi	r2,r2,-128
  803344:	10000826 	beq	r2,zero,803368 <logic+0x2b58>
  803348:	e0bffc17 	ldw	r2,-16(fp)
  80334c:	10804dc3 	ldbu	r2,311(r2)
  803350:	10803fcc 	andi	r2,r2,255
  803354:	1080201c 	xori	r2,r2,128
  803358:	10bfe004 	addi	r2,r2,-128
  80335c:	10000226 	beq	r2,zero,803368 <logic+0x2b58>
  803360:	00800044 	movi	r2,1
  803364:	00000106 	br	80336c <logic+0x2b5c>
  803368:	0005883a 	mov	r2,zero
  80336c:	1007883a 	mov	r3,r2
  803370:	e0bffc17 	ldw	r2,-16(fp)
  803374:	10c02c45 	stb	r3,177(r2)
  if (d->_g85) {
  803378:	e0bffc17 	ldw	r2,-16(fp)
  80337c:	10802c43 	ldbu	r2,177(r2)
  803380:	10803fcc 	andi	r2,r2,255
  803384:	1080201c 	xori	r2,r2,128
  803388:	10bfe004 	addi	r2,r2,-128
  80338c:	10003426 	beq	r2,zero,803460 <logic+0x2c50>
    d->sleepT = (d->sleepT < (d->VRP_time - d->_region2_null_VRP)) ? d->sleepT : (d->VRP_time - d->_region2_null_VRP);
  803390:	e0bffc17 	ldw	r2,-16(fp)
  803394:	14001517 	ldw	r16,84(r2)
  803398:	14401617 	ldw	r17,88(r2)
  80339c:	e0bffc17 	ldw	r2,-16(fp)
  8033a0:	10800017 	ldw	r2,0(r2)
  8033a4:	1009883a 	mov	r4,r2
  8033a8:	0808c140 	call	808c14 <__floatsidf>
  8033ac:	1011883a 	mov	r8,r2
  8033b0:	1813883a 	mov	r9,r3
  8033b4:	e13ffc17 	ldw	r4,-16(fp)
  8033b8:	20800b17 	ldw	r2,44(r4)
  8033bc:	20c00c17 	ldw	r3,48(r4)
  8033c0:	100d883a 	mov	r6,r2
  8033c4:	180f883a 	mov	r7,r3
  8033c8:	4009883a 	mov	r4,r8
  8033cc:	480b883a 	mov	r5,r9
  8033d0:	08083180 	call	808318 <__subdf3>
  8033d4:	1009883a 	mov	r4,r2
  8033d8:	180b883a 	mov	r5,r3
  8033dc:	2005883a 	mov	r2,r4
  8033e0:	2807883a 	mov	r3,r5
  8033e4:	100d883a 	mov	r6,r2
  8033e8:	180f883a 	mov	r7,r3
  8033ec:	8009883a 	mov	r4,r16
  8033f0:	880b883a 	mov	r5,r17
  8033f4:	08082240 	call	808224 <__ledf2>
  8033f8:	1000040e 	bge	r2,zero,80340c <logic+0x2bfc>
  8033fc:	e13ffc17 	ldw	r4,-16(fp)
  803400:	20801517 	ldw	r2,84(r4)
  803404:	20c01617 	ldw	r3,88(r4)
  803408:	00001206 	br	803454 <logic+0x2c44>
  80340c:	e0bffc17 	ldw	r2,-16(fp)
  803410:	10800017 	ldw	r2,0(r2)
  803414:	1009883a 	mov	r4,r2
  803418:	0808c140 	call	808c14 <__floatsidf>
  80341c:	1011883a 	mov	r8,r2
  803420:	1813883a 	mov	r9,r3
  803424:	e13ffc17 	ldw	r4,-16(fp)
  803428:	20800b17 	ldw	r2,44(r4)
  80342c:	20c00c17 	ldw	r3,48(r4)
  803430:	100d883a 	mov	r6,r2
  803434:	180f883a 	mov	r7,r3
  803438:	4009883a 	mov	r4,r8
  80343c:	480b883a 	mov	r5,r9
  803440:	08083180 	call	808318 <__subdf3>
  803444:	1009883a 	mov	r4,r2
  803448:	180b883a 	mov	r5,r3
  80344c:	2005883a 	mov	r2,r4
  803450:	2807883a 	mov	r3,r5
  803454:	e13ffc17 	ldw	r4,-16(fp)
  803458:	20801515 	stw	r2,84(r4)
  80345c:	20c01615 	stw	r3,88(r4)
  }
  d->_cg87 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803460:	e0bffc17 	ldw	r2,-16(fp)
  803464:	10801bc3 	ldbu	r2,111(r2)
  803468:	10803fcc 	andi	r2,r2,255
  80346c:	1080201c 	xori	r2,r2,128
  803470:	10bfe004 	addi	r2,r2,-128
  803474:	1000061e 	bne	r2,zero,803490 <logic+0x2c80>
  803478:	e0bffc17 	ldw	r2,-16(fp)
  80347c:	10801c03 	ldbu	r2,112(r2)
  803480:	10803fcc 	andi	r2,r2,255
  803484:	1080201c 	xori	r2,r2,128
  803488:	10bfe004 	addi	r2,r2,-128
  80348c:	10000226 	beq	r2,zero,803498 <logic+0x2c88>
  803490:	00800044 	movi	r2,1
  803494:	00000106 	br	80349c <logic+0x2c8c>
  803498:	0005883a 	mov	r2,zero
  80349c:	1007883a 	mov	r3,r2
  8034a0:	e0bffc17 	ldw	r2,-16(fp)
  8034a4:	10c04d85 	stb	r3,310(r2)
  d->_g86 = d->_g91 && !d->_cg86;
  8034a8:	e0bffc17 	ldw	r2,-16(fp)
  8034ac:	10802d83 	ldbu	r2,182(r2)
  8034b0:	10803fcc 	andi	r2,r2,255
  8034b4:	1080201c 	xori	r2,r2,128
  8034b8:	10bfe004 	addi	r2,r2,-128
  8034bc:	10000826 	beq	r2,zero,8034e0 <logic+0x2cd0>
  8034c0:	e0bffc17 	ldw	r2,-16(fp)
  8034c4:	10804dc3 	ldbu	r2,311(r2)
  8034c8:	10803fcc 	andi	r2,r2,255
  8034cc:	1080201c 	xori	r2,r2,128
  8034d0:	10bfe004 	addi	r2,r2,-128
  8034d4:	1000021e 	bne	r2,zero,8034e0 <logic+0x2cd0>
  8034d8:	00800044 	movi	r2,1
  8034dc:	00000106 	br	8034e4 <logic+0x2cd4>
  8034e0:	0005883a 	mov	r2,zero
  8034e4:	1007883a 	mov	r3,r2
  8034e8:	e0bffc17 	ldw	r2,-16(fp)
  8034ec:	10c02c85 	stb	r3,178(r2)
  d->_cg89 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  8034f0:	e0bffc17 	ldw	r2,-16(fp)
  8034f4:	10801bc3 	ldbu	r2,111(r2)
  8034f8:	10803fcc 	andi	r2,r2,255
  8034fc:	1080201c 	xori	r2,r2,128
  803500:	10bfe004 	addi	r2,r2,-128
  803504:	1000061e 	bne	r2,zero,803520 <logic+0x2d10>
  803508:	e0bffc17 	ldw	r2,-16(fp)
  80350c:	10801c03 	ldbu	r2,112(r2)
  803510:	10803fcc 	andi	r2,r2,255
  803514:	1080201c 	xori	r2,r2,128
  803518:	10bfe004 	addi	r2,r2,-128
  80351c:	10000226 	beq	r2,zero,803528 <logic+0x2d18>
  803520:	00800044 	movi	r2,1
  803524:	00000106 	br	80352c <logic+0x2d1c>
  803528:	0005883a 	mov	r2,zero
  80352c:	1007883a 	mov	r3,r2
  803530:	e0bffc17 	ldw	r2,-16(fp)
  803534:	10c04e05 	stb	r3,312(r2)
  d->_g88 = d->_g85 && d->_cg87 || d->_g86 && d->_cg89;
  803538:	e0bffc17 	ldw	r2,-16(fp)
  80353c:	10802c43 	ldbu	r2,177(r2)
  803540:	10803fcc 	andi	r2,r2,255
  803544:	1080201c 	xori	r2,r2,128
  803548:	10bfe004 	addi	r2,r2,-128
  80354c:	10000626 	beq	r2,zero,803568 <logic+0x2d58>
  803550:	e0bffc17 	ldw	r2,-16(fp)
  803554:	10804d83 	ldbu	r2,310(r2)
  803558:	10803fcc 	andi	r2,r2,255
  80355c:	1080201c 	xori	r2,r2,128
  803560:	10bfe004 	addi	r2,r2,-128
  803564:	10000c1e 	bne	r2,zero,803598 <logic+0x2d88>
  803568:	e0bffc17 	ldw	r2,-16(fp)
  80356c:	10802c83 	ldbu	r2,178(r2)
  803570:	10803fcc 	andi	r2,r2,255
  803574:	1080201c 	xori	r2,r2,128
  803578:	10bfe004 	addi	r2,r2,-128
  80357c:	10000826 	beq	r2,zero,8035a0 <logic+0x2d90>
  803580:	e0bffc17 	ldw	r2,-16(fp)
  803584:	10804e03 	ldbu	r2,312(r2)
  803588:	10803fcc 	andi	r2,r2,255
  80358c:	1080201c 	xori	r2,r2,128
  803590:	10bfe004 	addi	r2,r2,-128
  803594:	10000226 	beq	r2,zero,8035a0 <logic+0x2d90>
  803598:	00800044 	movi	r2,1
  80359c:	00000106 	br	8035a4 <logic+0x2d94>
  8035a0:	0005883a 	mov	r2,zero
  8035a4:	1007883a 	mov	r3,r2
  8035a8:	e0bffc17 	ldw	r2,-16(fp)
  8035ac:	10c02d05 	stb	r3,180(r2)
  d->_g95 = !d->_g105;
  8035b0:	e0bffc17 	ldw	r2,-16(fp)
  8035b4:	10803003 	ldbu	r2,192(r2)
  8035b8:	10803fcc 	andi	r2,r2,255
  8035bc:	1080201c 	xori	r2,r2,128
  8035c0:	10bfe004 	addi	r2,r2,-128
  8035c4:	1005003a 	cmpeq	r2,r2,zero
  8035c8:	1007883a 	mov	r3,r2
  8035cc:	e0bffc17 	ldw	r2,-16(fp)
  8035d0:	10c02e05 	stb	r3,184(r2)
  d->_g99 = d->_g110_e2 || d->_g99;
  8035d4:	e0bffc17 	ldw	r2,-16(fp)
  8035d8:	10805f83 	ldbu	r2,382(r2)
  8035dc:	10803fcc 	andi	r2,r2,255
  8035e0:	1080201c 	xori	r2,r2,128
  8035e4:	10bfe004 	addi	r2,r2,-128
  8035e8:	1000061e 	bne	r2,zero,803604 <logic+0x2df4>
  8035ec:	e0bffc17 	ldw	r2,-16(fp)
  8035f0:	10802f03 	ldbu	r2,188(r2)
  8035f4:	10803fcc 	andi	r2,r2,255
  8035f8:	1080201c 	xori	r2,r2,128
  8035fc:	10bfe004 	addi	r2,r2,-128
  803600:	10000226 	beq	r2,zero,80360c <logic+0x2dfc>
  803604:	00800044 	movi	r2,1
  803608:	00000106 	br	803610 <logic+0x2e00>
  80360c:	0005883a 	mov	r2,zero
  803610:	1007883a 	mov	r3,r2
  803614:	e0bffc17 	ldw	r2,-16(fp)
  803618:	10c02f05 	stb	r3,188(r2)
  d->_g96 = (d->_g110 || d->_g81) && (d->_g88_e2 || d->_g88) && (d->_g95 || d->_g99) && (d->_g81 || d->_g88 || d->_g99);
  80361c:	e0bffc17 	ldw	r2,-16(fp)
  803620:	108030c3 	ldbu	r2,195(r2)
  803624:	10803fcc 	andi	r2,r2,255
  803628:	1080201c 	xori	r2,r2,128
  80362c:	10bfe004 	addi	r2,r2,-128
  803630:	1000061e 	bne	r2,zero,80364c <logic+0x2e3c>
  803634:	e0bffc17 	ldw	r2,-16(fp)
  803638:	10802bc3 	ldbu	r2,175(r2)
  80363c:	10803fcc 	andi	r2,r2,255
  803640:	1080201c 	xori	r2,r2,128
  803644:	10bfe004 	addi	r2,r2,-128
  803648:	10002c26 	beq	r2,zero,8036fc <logic+0x2eec>
  80364c:	e0bffc17 	ldw	r2,-16(fp)
  803650:	10805ec3 	ldbu	r2,379(r2)
  803654:	10803fcc 	andi	r2,r2,255
  803658:	1080201c 	xori	r2,r2,128
  80365c:	10bfe004 	addi	r2,r2,-128
  803660:	1000061e 	bne	r2,zero,80367c <logic+0x2e6c>
  803664:	e0bffc17 	ldw	r2,-16(fp)
  803668:	10802d03 	ldbu	r2,180(r2)
  80366c:	10803fcc 	andi	r2,r2,255
  803670:	1080201c 	xori	r2,r2,128
  803674:	10bfe004 	addi	r2,r2,-128
  803678:	10002026 	beq	r2,zero,8036fc <logic+0x2eec>
  80367c:	e0bffc17 	ldw	r2,-16(fp)
  803680:	10802e03 	ldbu	r2,184(r2)
  803684:	10803fcc 	andi	r2,r2,255
  803688:	1080201c 	xori	r2,r2,128
  80368c:	10bfe004 	addi	r2,r2,-128
  803690:	1000061e 	bne	r2,zero,8036ac <logic+0x2e9c>
  803694:	e0bffc17 	ldw	r2,-16(fp)
  803698:	10802f03 	ldbu	r2,188(r2)
  80369c:	10803fcc 	andi	r2,r2,255
  8036a0:	1080201c 	xori	r2,r2,128
  8036a4:	10bfe004 	addi	r2,r2,-128
  8036a8:	10001426 	beq	r2,zero,8036fc <logic+0x2eec>
  8036ac:	e0bffc17 	ldw	r2,-16(fp)
  8036b0:	10802bc3 	ldbu	r2,175(r2)
  8036b4:	10803fcc 	andi	r2,r2,255
  8036b8:	1080201c 	xori	r2,r2,128
  8036bc:	10bfe004 	addi	r2,r2,-128
  8036c0:	10000c1e 	bne	r2,zero,8036f4 <logic+0x2ee4>
  8036c4:	e0bffc17 	ldw	r2,-16(fp)
  8036c8:	10802d03 	ldbu	r2,180(r2)
  8036cc:	10803fcc 	andi	r2,r2,255
  8036d0:	1080201c 	xori	r2,r2,128
  8036d4:	10bfe004 	addi	r2,r2,-128
  8036d8:	1000061e 	bne	r2,zero,8036f4 <logic+0x2ee4>
  8036dc:	e0bffc17 	ldw	r2,-16(fp)
  8036e0:	10802f03 	ldbu	r2,188(r2)
  8036e4:	10803fcc 	andi	r2,r2,255
  8036e8:	1080201c 	xori	r2,r2,128
  8036ec:	10bfe004 	addi	r2,r2,-128
  8036f0:	10000226 	beq	r2,zero,8036fc <logic+0x2eec>
  8036f4:	00800044 	movi	r2,1
  8036f8:	00000106 	br	803700 <logic+0x2ef0>
  8036fc:	0005883a 	mov	r2,zero
  803700:	1007883a 	mov	r3,r2
  803704:	e0bffc17 	ldw	r2,-16(fp)
  803708:	10c02e45 	stb	r3,185(r2)
  d->_cg100 = d->_heart2_local__Atrig6;
  80370c:	e0bffc17 	ldw	r2,-16(fp)
  803710:	10c01bc3 	ldbu	r3,111(r2)
  803714:	e0bffc17 	ldw	r2,-16(fp)
  803718:	10c04f05 	stb	r3,316(r2)
  d->_g81_e1 = d->_g96 && !d->_cg100;
  80371c:	e0bffc17 	ldw	r2,-16(fp)
  803720:	10802e43 	ldbu	r2,185(r2)
  803724:	10803fcc 	andi	r2,r2,255
  803728:	1080201c 	xori	r2,r2,128
  80372c:	10bfe004 	addi	r2,r2,-128
  803730:	10000826 	beq	r2,zero,803754 <logic+0x2f44>
  803734:	e0bffc17 	ldw	r2,-16(fp)
  803738:	10804f03 	ldbu	r2,316(r2)
  80373c:	10803fcc 	andi	r2,r2,255
  803740:	1080201c 	xori	r2,r2,128
  803744:	10bfe004 	addi	r2,r2,-128
  803748:	1000021e 	bne	r2,zero,803754 <logic+0x2f44>
  80374c:	00800044 	movi	r2,1
  803750:	00000106 	br	803758 <logic+0x2f48>
  803754:	0005883a 	mov	r2,zero
  803758:	1007883a 	mov	r3,r2
  80375c:	e0bffc17 	ldw	r2,-16(fp)
  803760:	10c05e85 	stb	r3,378(r2)
  if (d->_g81_e1) {
  803764:	e0bffc17 	ldw	r2,-16(fp)
  803768:	10805e83 	ldbu	r2,378(r2)
  80376c:	10803fcc 	andi	r2,r2,255
  803770:	1080201c 	xori	r2,r2,128
  803774:	10bfe004 	addi	r2,r2,-128
  803778:	10000626 	beq	r2,zero,803794 <logic+0x2f84>
    d->VR |= 1;
  80377c:	e0bffc17 	ldw	r2,-16(fp)
  803780:	10801803 	ldbu	r2,96(r2)
  803784:	10800054 	ori	r2,r2,1
  803788:	1007883a 	mov	r3,r2
  80378c:	e0bffc17 	ldw	r2,-16(fp)
  803790:	10c01805 	stb	r3,96(r2)
  }
  d->_g97 = d->_GO || d->_g109 || d->_g81_e1;
  803794:	e0bffc17 	ldw	r2,-16(fp)
  803798:	10804543 	ldbu	r2,277(r2)
  80379c:	10803fcc 	andi	r2,r2,255
  8037a0:	1080201c 	xori	r2,r2,128
  8037a4:	10bfe004 	addi	r2,r2,-128
  8037a8:	10000c1e 	bne	r2,zero,8037dc <logic+0x2fcc>
  8037ac:	e0bffc17 	ldw	r2,-16(fp)
  8037b0:	10803083 	ldbu	r2,194(r2)
  8037b4:	10803fcc 	andi	r2,r2,255
  8037b8:	1080201c 	xori	r2,r2,128
  8037bc:	10bfe004 	addi	r2,r2,-128
  8037c0:	1000061e 	bne	r2,zero,8037dc <logic+0x2fcc>
  8037c4:	e0bffc17 	ldw	r2,-16(fp)
  8037c8:	10805e83 	ldbu	r2,378(r2)
  8037cc:	10803fcc 	andi	r2,r2,255
  8037d0:	1080201c 	xori	r2,r2,128
  8037d4:	10bfe004 	addi	r2,r2,-128
  8037d8:	10000226 	beq	r2,zero,8037e4 <logic+0x2fd4>
  8037dc:	00800044 	movi	r2,1
  8037e0:	00000106 	br	8037e8 <logic+0x2fd8>
  8037e4:	0005883a 	mov	r2,zero
  8037e8:	1007883a 	mov	r3,r2
  8037ec:	e0bffc17 	ldw	r2,-16(fp)
  8037f0:	10c02e85 	stb	r3,186(r2)
  if (d->_g97) {
  8037f4:	e0bffc17 	ldw	r2,-16(fp)
  8037f8:	10802e83 	ldbu	r2,186(r2)
  8037fc:	10803fcc 	andi	r2,r2,255
  803800:	1080201c 	xori	r2,r2,128
  803804:	10bfe004 	addi	r2,r2,-128
  803808:	10000426 	beq	r2,zero,80381c <logic+0x300c>
    d->_heart2_local__Atrig6 = 0;
  80380c:	e0bffc17 	ldw	r2,-16(fp)
  803810:	10001bc5 	stb	zero,111(r2)
    d->_heart2_local__Atrig7 = 0;
  803814:	e0bffc17 	ldw	r2,-16(fp)
  803818:	10001c05 	stb	zero,112(r2)
  }
  d->_cg78 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  80381c:	e0bffc17 	ldw	r2,-16(fp)
  803820:	10801bc3 	ldbu	r2,111(r2)
  803824:	10803fcc 	andi	r2,r2,255
  803828:	1080201c 	xori	r2,r2,128
  80382c:	10bfe004 	addi	r2,r2,-128
  803830:	1000061e 	bne	r2,zero,80384c <logic+0x303c>
  803834:	e0bffc17 	ldw	r2,-16(fp)
  803838:	10801c03 	ldbu	r2,112(r2)
  80383c:	10803fcc 	andi	r2,r2,255
  803840:	1080201c 	xori	r2,r2,128
  803844:	10bfe004 	addi	r2,r2,-128
  803848:	10000226 	beq	r2,zero,803854 <logic+0x3044>
  80384c:	00800044 	movi	r2,1
  803850:	00000106 	br	803858 <logic+0x3048>
  803854:	0005883a 	mov	r2,zero
  803858:	1007883a 	mov	r3,r2
  80385c:	e0bffc17 	ldw	r2,-16(fp)
  803860:	10c04c85 	stb	r3,306(r2)
  d->_g88 = d->_g97 && !d->_cg78 || d->_g105_e1 && !d->_cg80;
  803864:	e0bffc17 	ldw	r2,-16(fp)
  803868:	10802e83 	ldbu	r2,186(r2)
  80386c:	10803fcc 	andi	r2,r2,255
  803870:	1080201c 	xori	r2,r2,128
  803874:	10bfe004 	addi	r2,r2,-128
  803878:	10000626 	beq	r2,zero,803894 <logic+0x3084>
  80387c:	e0bffc17 	ldw	r2,-16(fp)
  803880:	10804c83 	ldbu	r2,306(r2)
  803884:	10803fcc 	andi	r2,r2,255
  803888:	1080201c 	xori	r2,r2,128
  80388c:	10bfe004 	addi	r2,r2,-128
  803890:	10000c26 	beq	r2,zero,8038c4 <logic+0x30b4>
  803894:	e0bffc17 	ldw	r2,-16(fp)
  803898:	10805f43 	ldbu	r2,381(r2)
  80389c:	10803fcc 	andi	r2,r2,255
  8038a0:	1080201c 	xori	r2,r2,128
  8038a4:	10bfe004 	addi	r2,r2,-128
  8038a8:	10000826 	beq	r2,zero,8038cc <logic+0x30bc>
  8038ac:	e0bffc17 	ldw	r2,-16(fp)
  8038b0:	10804cc3 	ldbu	r2,307(r2)
  8038b4:	10803fcc 	andi	r2,r2,255
  8038b8:	1080201c 	xori	r2,r2,128
  8038bc:	10bfe004 	addi	r2,r2,-128
  8038c0:	1000021e 	bne	r2,zero,8038cc <logic+0x30bc>
  8038c4:	00800044 	movi	r2,1
  8038c8:	00000106 	br	8038d0 <logic+0x30c0>
  8038cc:	0005883a 	mov	r2,zero
  8038d0:	1007883a 	mov	r3,r2
  8038d4:	e0bffc17 	ldw	r2,-16(fp)
  8038d8:	10c02d05 	stb	r3,180(r2)
  d->_cg82 = d->_region2_null_VRP < d->VRP_time;
  8038dc:	e0bffc17 	ldw	r2,-16(fp)
  8038e0:	14000b17 	ldw	r16,44(r2)
  8038e4:	14400c17 	ldw	r17,48(r2)
  8038e8:	e0bffc17 	ldw	r2,-16(fp)
  8038ec:	10800017 	ldw	r2,0(r2)
  8038f0:	1009883a 	mov	r4,r2
  8038f4:	0808c140 	call	808c14 <__floatsidf>
  8038f8:	1009883a 	mov	r4,r2
  8038fc:	180b883a 	mov	r5,r3
  803900:	04800044 	movi	r18,1
  803904:	200d883a 	mov	r6,r4
  803908:	280f883a 	mov	r7,r5
  80390c:	8009883a 	mov	r4,r16
  803910:	880b883a 	mov	r5,r17
  803914:	08082240 	call	808224 <__ledf2>
  803918:	10000116 	blt	r2,zero,803920 <logic+0x3110>
  80391c:	0025883a 	mov	r18,zero
  803920:	9007883a 	mov	r3,r18
  803924:	e0bffc17 	ldw	r2,-16(fp)
  803928:	10c04d05 	stb	r3,308(r2)
  d->_g81 = d->_g97 && d->_cg82;
  80392c:	e0bffc17 	ldw	r2,-16(fp)
  803930:	10802e83 	ldbu	r2,186(r2)
  803934:	10803fcc 	andi	r2,r2,255
  803938:	1080201c 	xori	r2,r2,128
  80393c:	10bfe004 	addi	r2,r2,-128
  803940:	10000826 	beq	r2,zero,803964 <logic+0x3154>
  803944:	e0bffc17 	ldw	r2,-16(fp)
  803948:	10804d03 	ldbu	r2,308(r2)
  80394c:	10803fcc 	andi	r2,r2,255
  803950:	1080201c 	xori	r2,r2,128
  803954:	10bfe004 	addi	r2,r2,-128
  803958:	10000226 	beq	r2,zero,803964 <logic+0x3154>
  80395c:	00800044 	movi	r2,1
  803960:	00000106 	br	803968 <logic+0x3158>
  803964:	0005883a 	mov	r2,zero
  803968:	1007883a 	mov	r3,r2
  80396c:	e0bffc17 	ldw	r2,-16(fp)
  803970:	10c02bc5 	stb	r3,175(r2)
  if (d->_g81) {
  803974:	e0bffc17 	ldw	r2,-16(fp)
  803978:	10802bc3 	ldbu	r2,175(r2)
  80397c:	10803fcc 	andi	r2,r2,255
  803980:	1080201c 	xori	r2,r2,128
  803984:	10bfe004 	addi	r2,r2,-128
  803988:	10003426 	beq	r2,zero,803a5c <logic+0x324c>
    d->sleepT = (d->sleepT < (d->VRP_time - d->_region2_null_VRP)) ? d->sleepT : (d->VRP_time - d->_region2_null_VRP);
  80398c:	e0bffc17 	ldw	r2,-16(fp)
  803990:	14001517 	ldw	r16,84(r2)
  803994:	14401617 	ldw	r17,88(r2)
  803998:	e0bffc17 	ldw	r2,-16(fp)
  80399c:	10800017 	ldw	r2,0(r2)
  8039a0:	1009883a 	mov	r4,r2
  8039a4:	0808c140 	call	808c14 <__floatsidf>
  8039a8:	1011883a 	mov	r8,r2
  8039ac:	1813883a 	mov	r9,r3
  8039b0:	e13ffc17 	ldw	r4,-16(fp)
  8039b4:	20800b17 	ldw	r2,44(r4)
  8039b8:	20c00c17 	ldw	r3,48(r4)
  8039bc:	100d883a 	mov	r6,r2
  8039c0:	180f883a 	mov	r7,r3
  8039c4:	4009883a 	mov	r4,r8
  8039c8:	480b883a 	mov	r5,r9
  8039cc:	08083180 	call	808318 <__subdf3>
  8039d0:	1009883a 	mov	r4,r2
  8039d4:	180b883a 	mov	r5,r3
  8039d8:	2005883a 	mov	r2,r4
  8039dc:	2807883a 	mov	r3,r5
  8039e0:	100d883a 	mov	r6,r2
  8039e4:	180f883a 	mov	r7,r3
  8039e8:	8009883a 	mov	r4,r16
  8039ec:	880b883a 	mov	r5,r17
  8039f0:	08082240 	call	808224 <__ledf2>
  8039f4:	1000040e 	bge	r2,zero,803a08 <logic+0x31f8>
  8039f8:	e13ffc17 	ldw	r4,-16(fp)
  8039fc:	20801517 	ldw	r2,84(r4)
  803a00:	20c01617 	ldw	r3,88(r4)
  803a04:	00001206 	br	803a50 <logic+0x3240>
  803a08:	e0bffc17 	ldw	r2,-16(fp)
  803a0c:	10800017 	ldw	r2,0(r2)
  803a10:	1009883a 	mov	r4,r2
  803a14:	0808c140 	call	808c14 <__floatsidf>
  803a18:	1011883a 	mov	r8,r2
  803a1c:	1813883a 	mov	r9,r3
  803a20:	e13ffc17 	ldw	r4,-16(fp)
  803a24:	20800b17 	ldw	r2,44(r4)
  803a28:	20c00c17 	ldw	r3,48(r4)
  803a2c:	100d883a 	mov	r6,r2
  803a30:	180f883a 	mov	r7,r3
  803a34:	4009883a 	mov	r4,r8
  803a38:	480b883a 	mov	r5,r9
  803a3c:	08083180 	call	808318 <__subdf3>
  803a40:	1009883a 	mov	r4,r2
  803a44:	180b883a 	mov	r5,r3
  803a48:	2005883a 	mov	r2,r4
  803a4c:	2807883a 	mov	r3,r5
  803a50:	e13ffc17 	ldw	r4,-16(fp)
  803a54:	20801515 	stw	r2,84(r4)
  803a58:	20c01615 	stw	r3,88(r4)
  }
  d->_cg83 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803a5c:	e0bffc17 	ldw	r2,-16(fp)
  803a60:	10801bc3 	ldbu	r2,111(r2)
  803a64:	10803fcc 	andi	r2,r2,255
  803a68:	1080201c 	xori	r2,r2,128
  803a6c:	10bfe004 	addi	r2,r2,-128
  803a70:	1000061e 	bne	r2,zero,803a8c <logic+0x327c>
  803a74:	e0bffc17 	ldw	r2,-16(fp)
  803a78:	10801c03 	ldbu	r2,112(r2)
  803a7c:	10803fcc 	andi	r2,r2,255
  803a80:	1080201c 	xori	r2,r2,128
  803a84:	10bfe004 	addi	r2,r2,-128
  803a88:	10000226 	beq	r2,zero,803a94 <logic+0x3284>
  803a8c:	00800044 	movi	r2,1
  803a90:	00000106 	br	803a98 <logic+0x3288>
  803a94:	0005883a 	mov	r2,zero
  803a98:	1007883a 	mov	r3,r2
  803a9c:	e0bffc17 	ldw	r2,-16(fp)
  803aa0:	10c04d45 	stb	r3,309(r2)
  d->_g97_e3 = d->_g81 && !d->_cg83 || d->_g85 && !d->_cg87;
  803aa4:	e0bffc17 	ldw	r2,-16(fp)
  803aa8:	10802bc3 	ldbu	r2,175(r2)
  803aac:	10803fcc 	andi	r2,r2,255
  803ab0:	1080201c 	xori	r2,r2,128
  803ab4:	10bfe004 	addi	r2,r2,-128
  803ab8:	10000626 	beq	r2,zero,803ad4 <logic+0x32c4>
  803abc:	e0bffc17 	ldw	r2,-16(fp)
  803ac0:	10804d43 	ldbu	r2,309(r2)
  803ac4:	10803fcc 	andi	r2,r2,255
  803ac8:	1080201c 	xori	r2,r2,128
  803acc:	10bfe004 	addi	r2,r2,-128
  803ad0:	10000c26 	beq	r2,zero,803b04 <logic+0x32f4>
  803ad4:	e0bffc17 	ldw	r2,-16(fp)
  803ad8:	10802c43 	ldbu	r2,177(r2)
  803adc:	10803fcc 	andi	r2,r2,255
  803ae0:	1080201c 	xori	r2,r2,128
  803ae4:	10bfe004 	addi	r2,r2,-128
  803ae8:	10000826 	beq	r2,zero,803b0c <logic+0x32fc>
  803aec:	e0bffc17 	ldw	r2,-16(fp)
  803af0:	10804d83 	ldbu	r2,310(r2)
  803af4:	10803fcc 	andi	r2,r2,255
  803af8:	1080201c 	xori	r2,r2,128
  803afc:	10bfe004 	addi	r2,r2,-128
  803b00:	1000021e 	bne	r2,zero,803b0c <logic+0x32fc>
  803b04:	00800044 	movi	r2,1
  803b08:	00000106 	br	803b10 <logic+0x3300>
  803b0c:	0005883a 	mov	r2,zero
  803b10:	1007883a 	mov	r3,r2
  803b14:	e0bffc17 	ldw	r2,-16(fp)
  803b18:	10c05f05 	stb	r3,380(r2)
  d->_g88_e2 = d->_g97 && !d->_cg82;
  803b1c:	e0bffc17 	ldw	r2,-16(fp)
  803b20:	10802e83 	ldbu	r2,186(r2)
  803b24:	10803fcc 	andi	r2,r2,255
  803b28:	1080201c 	xori	r2,r2,128
  803b2c:	10bfe004 	addi	r2,r2,-128
  803b30:	10000826 	beq	r2,zero,803b54 <logic+0x3344>
  803b34:	e0bffc17 	ldw	r2,-16(fp)
  803b38:	10804d03 	ldbu	r2,308(r2)
  803b3c:	10803fcc 	andi	r2,r2,255
  803b40:	1080201c 	xori	r2,r2,128
  803b44:	10bfe004 	addi	r2,r2,-128
  803b48:	1000021e 	bne	r2,zero,803b54 <logic+0x3344>
  803b4c:	00800044 	movi	r2,1
  803b50:	00000106 	br	803b58 <logic+0x3348>
  803b54:	0005883a 	mov	r2,zero
  803b58:	1007883a 	mov	r3,r2
  803b5c:	e0bffc17 	ldw	r2,-16(fp)
  803b60:	10c05ec5 	stb	r3,379(r2)
  d->_cg92 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803b64:	e0bffc17 	ldw	r2,-16(fp)
  803b68:	10801bc3 	ldbu	r2,111(r2)
  803b6c:	10803fcc 	andi	r2,r2,255
  803b70:	1080201c 	xori	r2,r2,128
  803b74:	10bfe004 	addi	r2,r2,-128
  803b78:	1000061e 	bne	r2,zero,803b94 <logic+0x3384>
  803b7c:	e0bffc17 	ldw	r2,-16(fp)
  803b80:	10801c03 	ldbu	r2,112(r2)
  803b84:	10803fcc 	andi	r2,r2,255
  803b88:	1080201c 	xori	r2,r2,128
  803b8c:	10bfe004 	addi	r2,r2,-128
  803b90:	10000226 	beq	r2,zero,803b9c <logic+0x338c>
  803b94:	00800044 	movi	r2,1
  803b98:	00000106 	br	803ba0 <logic+0x3390>
  803b9c:	0005883a 	mov	r2,zero
  803ba0:	1007883a 	mov	r3,r2
  803ba4:	e0bffc17 	ldw	r2,-16(fp)
  803ba8:	10c04e45 	stb	r3,313(r2)
  d->_g116 = d->_g86 && !d->_cg89 || d->_g88_e2 && !d->_cg92;
  803bac:	e0bffc17 	ldw	r2,-16(fp)
  803bb0:	10802c83 	ldbu	r2,178(r2)
  803bb4:	10803fcc 	andi	r2,r2,255
  803bb8:	1080201c 	xori	r2,r2,128
  803bbc:	10bfe004 	addi	r2,r2,-128
  803bc0:	10000626 	beq	r2,zero,803bdc <logic+0x33cc>
  803bc4:	e0bffc17 	ldw	r2,-16(fp)
  803bc8:	10804e03 	ldbu	r2,312(r2)
  803bcc:	10803fcc 	andi	r2,r2,255
  803bd0:	1080201c 	xori	r2,r2,128
  803bd4:	10bfe004 	addi	r2,r2,-128
  803bd8:	10000c26 	beq	r2,zero,803c0c <logic+0x33fc>
  803bdc:	e0bffc17 	ldw	r2,-16(fp)
  803be0:	10805ec3 	ldbu	r2,379(r2)
  803be4:	10803fcc 	andi	r2,r2,255
  803be8:	1080201c 	xori	r2,r2,128
  803bec:	10bfe004 	addi	r2,r2,-128
  803bf0:	10000826 	beq	r2,zero,803c14 <logic+0x3404>
  803bf4:	e0bffc17 	ldw	r2,-16(fp)
  803bf8:	10804e43 	ldbu	r2,313(r2)
  803bfc:	10803fcc 	andi	r2,r2,255
  803c00:	1080201c 	xori	r2,r2,128
  803c04:	10bfe004 	addi	r2,r2,-128
  803c08:	1000021e 	bne	r2,zero,803c14 <logic+0x3404>
  803c0c:	00800044 	movi	r2,1
  803c10:	00000106 	br	803c18 <logic+0x3408>
  803c14:	0005883a 	mov	r2,zero
  803c18:	1007883a 	mov	r3,r2
  803c1c:	e0bffc17 	ldw	r2,-16(fp)
  803c20:	10c03245 	stb	r3,201(r2)
  d->_g114 = d->_g97 || d->_g98 && !d->VS;
  803c24:	e0bffc17 	ldw	r2,-16(fp)
  803c28:	10802e83 	ldbu	r2,186(r2)
  803c2c:	10803fcc 	andi	r2,r2,255
  803c30:	1080201c 	xori	r2,r2,128
  803c34:	10bfe004 	addi	r2,r2,-128
  803c38:	10000c1e 	bne	r2,zero,803c6c <logic+0x345c>
  803c3c:	e0bffc17 	ldw	r2,-16(fp)
  803c40:	10802ec3 	ldbu	r2,187(r2)
  803c44:	10803fcc 	andi	r2,r2,255
  803c48:	1080201c 	xori	r2,r2,128
  803c4c:	10bfe004 	addi	r2,r2,-128
  803c50:	10000826 	beq	r2,zero,803c74 <logic+0x3464>
  803c54:	e0bffc17 	ldw	r2,-16(fp)
  803c58:	10801743 	ldbu	r2,93(r2)
  803c5c:	10803fcc 	andi	r2,r2,255
  803c60:	1080201c 	xori	r2,r2,128
  803c64:	10bfe004 	addi	r2,r2,-128
  803c68:	1000021e 	bne	r2,zero,803c74 <logic+0x3464>
  803c6c:	00800044 	movi	r2,1
  803c70:	00000106 	br	803c78 <logic+0x3468>
  803c74:	0005883a 	mov	r2,zero
  803c78:	1007883a 	mov	r3,r2
  803c7c:	e0bffc17 	ldw	r2,-16(fp)
  803c80:	10c031c5 	stb	r3,199(r2)
  d->_g80 = d->_g112 && !d->_cg113;
  803c84:	e0bffc17 	ldw	r2,-16(fp)
  803c88:	10803143 	ldbu	r2,197(r2)
  803c8c:	10803fcc 	andi	r2,r2,255
  803c90:	1080201c 	xori	r2,r2,128
  803c94:	10bfe004 	addi	r2,r2,-128
  803c98:	10000826 	beq	r2,zero,803cbc <logic+0x34ac>
  803c9c:	e0bffc17 	ldw	r2,-16(fp)
  803ca0:	10805043 	ldbu	r2,321(r2)
  803ca4:	10803fcc 	andi	r2,r2,255
  803ca8:	1080201c 	xori	r2,r2,128
  803cac:	10bfe004 	addi	r2,r2,-128
  803cb0:	1000021e 	bne	r2,zero,803cbc <logic+0x34ac>
  803cb4:	00800044 	movi	r2,1
  803cb8:	00000106 	br	803cc0 <logic+0x34b0>
  803cbc:	0005883a 	mov	r2,zero
  803cc0:	1007883a 	mov	r3,r2
  803cc4:	e0bffc17 	ldw	r2,-16(fp)
  803cc8:	10c02b85 	stb	r3,174(r2)
  if (d->_g80) {
  803ccc:	e0bffc17 	ldw	r2,-16(fp)
  803cd0:	10802b83 	ldbu	r2,174(r2)
  803cd4:	10803fcc 	andi	r2,r2,255
  803cd8:	1080201c 	xori	r2,r2,128
  803cdc:	10bfe004 	addi	r2,r2,-128
  803ce0:	10000626 	beq	r2,zero,803cfc <logic+0x34ec>
    d->VS_i |= 1;
  803ce4:	e0bffc17 	ldw	r2,-16(fp)
  803ce8:	10801903 	ldbu	r2,100(r2)
  803cec:	10800054 	ori	r2,r2,1
  803cf0:	1007883a 	mov	r3,r2
  803cf4:	e0bffc17 	ldw	r2,-16(fp)
  803cf8:	10c01905 	stb	r3,100(r2)
  }
  d->_g87 = d->_g96 && d->_cg100 || d->_g80;
  803cfc:	e0bffc17 	ldw	r2,-16(fp)
  803d00:	10802e43 	ldbu	r2,185(r2)
  803d04:	10803fcc 	andi	r2,r2,255
  803d08:	1080201c 	xori	r2,r2,128
  803d0c:	10bfe004 	addi	r2,r2,-128
  803d10:	10000626 	beq	r2,zero,803d2c <logic+0x351c>
  803d14:	e0bffc17 	ldw	r2,-16(fp)
  803d18:	10804f03 	ldbu	r2,316(r2)
  803d1c:	10803fcc 	andi	r2,r2,255
  803d20:	1080201c 	xori	r2,r2,128
  803d24:	10bfe004 	addi	r2,r2,-128
  803d28:	1000061e 	bne	r2,zero,803d44 <logic+0x3534>
  803d2c:	e0bffc17 	ldw	r2,-16(fp)
  803d30:	10802b83 	ldbu	r2,174(r2)
  803d34:	10803fcc 	andi	r2,r2,255
  803d38:	1080201c 	xori	r2,r2,128
  803d3c:	10bfe004 	addi	r2,r2,-128
  803d40:	10000226 	beq	r2,zero,803d4c <logic+0x353c>
  803d44:	00800044 	movi	r2,1
  803d48:	00000106 	br	803d50 <logic+0x3540>
  803d4c:	0005883a 	mov	r2,zero
  803d50:	1007883a 	mov	r3,r2
  803d54:	e0bffc17 	ldw	r2,-16(fp)
  803d58:	10c02cc5 	stb	r3,179(r2)
  if (d->_g87) {
  803d5c:	e0bffc17 	ldw	r2,-16(fp)
  803d60:	10802cc3 	ldbu	r2,179(r2)
  803d64:	10803fcc 	andi	r2,r2,255
  803d68:	1080201c 	xori	r2,r2,128
  803d6c:	10bfe004 	addi	r2,r2,-128
  803d70:	10000426 	beq	r2,zero,803d84 <logic+0x3574>
    d->_heart2_local__Atrig8 = 0;
  803d74:	e0bffc17 	ldw	r2,-16(fp)
  803d78:	10001c45 	stb	zero,113(r2)
    d->_heart2_local__Atrig9 = 0;
  803d7c:	e0bffc17 	ldw	r2,-16(fp)
  803d80:	10001c85 	stb	zero,114(r2)
  }
  d->_cg102 = d->_heart2_local__Atrig8 || d->_heart2_local__Atrig9;
  803d84:	e0bffc17 	ldw	r2,-16(fp)
  803d88:	10801c43 	ldbu	r2,113(r2)
  803d8c:	10803fcc 	andi	r2,r2,255
  803d90:	1080201c 	xori	r2,r2,128
  803d94:	10bfe004 	addi	r2,r2,-128
  803d98:	1000061e 	bne	r2,zero,803db4 <logic+0x35a4>
  803d9c:	e0bffc17 	ldw	r2,-16(fp)
  803da0:	10801c83 	ldbu	r2,114(r2)
  803da4:	10803fcc 	andi	r2,r2,255
  803da8:	1080201c 	xori	r2,r2,128
  803dac:	10bfe004 	addi	r2,r2,-128
  803db0:	10000226 	beq	r2,zero,803dbc <logic+0x35ac>
  803db4:	00800044 	movi	r2,1
  803db8:	00000106 	br	803dc0 <logic+0x35b0>
  803dbc:	0005883a 	mov	r2,zero
  803dc0:	1007883a 	mov	r3,r2
  803dc4:	e0bffc17 	ldw	r2,-16(fp)
  803dc8:	10c04f45 	stb	r3,317(r2)
  d->_g83 = d->_g87 && !d->_cg102 || d->_g55 && !d->_cg104;
  803dcc:	e0bffc17 	ldw	r2,-16(fp)
  803dd0:	10802cc3 	ldbu	r2,179(r2)
  803dd4:	10803fcc 	andi	r2,r2,255
  803dd8:	1080201c 	xori	r2,r2,128
  803ddc:	10bfe004 	addi	r2,r2,-128
  803de0:	10000626 	beq	r2,zero,803dfc <logic+0x35ec>
  803de4:	e0bffc17 	ldw	r2,-16(fp)
  803de8:	10804f43 	ldbu	r2,317(r2)
  803dec:	10803fcc 	andi	r2,r2,255
  803df0:	1080201c 	xori	r2,r2,128
  803df4:	10bfe004 	addi	r2,r2,-128
  803df8:	10000c26 	beq	r2,zero,803e2c <logic+0x361c>
  803dfc:	e0bffc17 	ldw	r2,-16(fp)
  803e00:	108027c3 	ldbu	r2,159(r2)
  803e04:	10803fcc 	andi	r2,r2,255
  803e08:	1080201c 	xori	r2,r2,128
  803e0c:	10bfe004 	addi	r2,r2,-128
  803e10:	10000826 	beq	r2,zero,803e34 <logic+0x3624>
  803e14:	e0bffc17 	ldw	r2,-16(fp)
  803e18:	10804f83 	ldbu	r2,318(r2)
  803e1c:	10803fcc 	andi	r2,r2,255
  803e20:	1080201c 	xori	r2,r2,128
  803e24:	10bfe004 	addi	r2,r2,-128
  803e28:	1000021e 	bne	r2,zero,803e34 <logic+0x3624>
  803e2c:	00800044 	movi	r2,1
  803e30:	00000106 	br	803e38 <logic+0x3628>
  803e34:	0005883a 	mov	r2,zero
  803e38:	1007883a 	mov	r3,r2
  803e3c:	e0bffc17 	ldw	r2,-16(fp)
  803e40:	10c02c05 	stb	r3,176(r2)
  d->_g89 = d->_g87 || d->_g63 && !d->VS;
  803e44:	e0bffc17 	ldw	r2,-16(fp)
  803e48:	10802cc3 	ldbu	r2,179(r2)
  803e4c:	10803fcc 	andi	r2,r2,255
  803e50:	1080201c 	xori	r2,r2,128
  803e54:	10bfe004 	addi	r2,r2,-128
  803e58:	10000c1e 	bne	r2,zero,803e8c <logic+0x367c>
  803e5c:	e0bffc17 	ldw	r2,-16(fp)
  803e60:	10802943 	ldbu	r2,165(r2)
  803e64:	10803fcc 	andi	r2,r2,255
  803e68:	1080201c 	xori	r2,r2,128
  803e6c:	10bfe004 	addi	r2,r2,-128
  803e70:	10000826 	beq	r2,zero,803e94 <logic+0x3684>
  803e74:	e0bffc17 	ldw	r2,-16(fp)
  803e78:	10801743 	ldbu	r2,93(r2)
  803e7c:	10803fcc 	andi	r2,r2,255
  803e80:	1080201c 	xori	r2,r2,128
  803e84:	10bfe004 	addi	r2,r2,-128
  803e88:	1000021e 	bne	r2,zero,803e94 <logic+0x3684>
  803e8c:	00800044 	movi	r2,1
  803e90:	00000106 	br	803e98 <logic+0x3688>
  803e94:	0005883a 	mov	r2,zero
  803e98:	1007883a 	mov	r3,r2
  803e9c:	e0bffc17 	ldw	r2,-16(fp)
  803ea0:	10c02d45 	stb	r3,181(r2)
  d->_g92 = d->_pg129;
  803ea4:	e0bffc17 	ldw	r2,-16(fp)
  803ea8:	10c06883 	ldbu	r3,418(r2)
  803eac:	e0bffc17 	ldw	r2,-16(fp)
  803eb0:	10c02dc5 	stb	r3,183(r2)
  if (d->_g92) {
  803eb4:	e0bffc17 	ldw	r2,-16(fp)
  803eb8:	10802dc3 	ldbu	r2,183(r2)
  803ebc:	10803fcc 	andi	r2,r2,255
  803ec0:	1080201c 	xori	r2,r2,128
  803ec4:	10bfe004 	addi	r2,r2,-128
  803ec8:	10001226 	beq	r2,zero,803f14 <logic+0x3704>
    d->_region3_null_PVARP += d->deltaT;
  803ecc:	e13ffc17 	ldw	r4,-16(fp)
  803ed0:	20800d17 	ldw	r2,52(r4)
  803ed4:	20c00e17 	ldw	r3,56(r4)
  803ed8:	e1bffc17 	ldw	r6,-16(fp)
  803edc:	31001317 	ldw	r4,76(r6)
  803ee0:	31401417 	ldw	r5,80(r6)
  803ee4:	200d883a 	mov	r6,r4
  803ee8:	280f883a 	mov	r7,r5
  803eec:	1009883a 	mov	r4,r2
  803ef0:	180b883a 	mov	r5,r3
  803ef4:	080789c0 	call	80789c <__adddf3>
  803ef8:	1009883a 	mov	r4,r2
  803efc:	180b883a 	mov	r5,r3
  803f00:	2005883a 	mov	r2,r4
  803f04:	2807883a 	mov	r3,r5
  803f08:	e13ffc17 	ldw	r4,-16(fp)
  803f0c:	20800d15 	stw	r2,52(r4)
  803f10:	20c00e15 	stw	r3,56(r4)
  }
  d->_g77 = !d->_g92;
  803f14:	e0bffc17 	ldw	r2,-16(fp)
  803f18:	10802dc3 	ldbu	r2,183(r2)
  803f1c:	10803fcc 	andi	r2,r2,255
  803f20:	1080201c 	xori	r2,r2,128
  803f24:	10bfe004 	addi	r2,r2,-128
  803f28:	1005003a 	cmpeq	r2,r2,zero
  803f2c:	1007883a 	mov	r3,r2
  803f30:	e0bffc17 	ldw	r2,-16(fp)
  803f34:	10c02b45 	stb	r3,173(r2)
  d->_g98 = d->_pg134;
  803f38:	e0bffc17 	ldw	r2,-16(fp)
  803f3c:	10c068c3 	ldbu	r3,419(r2)
  803f40:	e0bffc17 	ldw	r2,-16(fp)
  803f44:	10c02ec5 	stb	r3,187(r2)
  d->_cg150 = d->v;
  803f48:	e0bffc17 	ldw	r2,-16(fp)
  803f4c:	10c018c3 	ldbu	r3,99(r2)
  803f50:	e0bffc17 	ldw	r2,-16(fp)
  803f54:	10c05405 	stb	r3,336(r2)
  d->_g113 = d->_g98 && d->_cg150;
  803f58:	e0bffc17 	ldw	r2,-16(fp)
  803f5c:	10802ec3 	ldbu	r2,187(r2)
  803f60:	10803fcc 	andi	r2,r2,255
  803f64:	1080201c 	xori	r2,r2,128
  803f68:	10bfe004 	addi	r2,r2,-128
  803f6c:	10000826 	beq	r2,zero,803f90 <logic+0x3780>
  803f70:	e0bffc17 	ldw	r2,-16(fp)
  803f74:	10805403 	ldbu	r2,336(r2)
  803f78:	10803fcc 	andi	r2,r2,255
  803f7c:	1080201c 	xori	r2,r2,128
  803f80:	10bfe004 	addi	r2,r2,-128
  803f84:	10000226 	beq	r2,zero,803f90 <logic+0x3780>
  803f88:	00800044 	movi	r2,1
  803f8c:	00000106 	br	803f94 <logic+0x3784>
  803f90:	0005883a 	mov	r2,zero
  803f94:	1007883a 	mov	r3,r2
  803f98:	e0bffc17 	ldw	r2,-16(fp)
  803f9c:	10c03185 	stb	r3,198(r2)
  if (d->_g113) {
  803fa0:	e0bffc17 	ldw	r2,-16(fp)
  803fa4:	10803183 	ldbu	r2,198(r2)
  803fa8:	10803fcc 	andi	r2,r2,255
  803fac:	1080201c 	xori	r2,r2,128
  803fb0:	10bfe004 	addi	r2,r2,-128
  803fb4:	10000326 	beq	r2,zero,803fc4 <logic+0x37b4>
    d->_heart2_local__Atrig12 = 1;
  803fb8:	e0bffc17 	ldw	r2,-16(fp)
  803fbc:	00c00044 	movi	r3,1
  803fc0:	10c01d45 	stb	r3,117(r2)
  }
  d->_g115 = d->_g98 && !d->_cg150;
  803fc4:	e0bffc17 	ldw	r2,-16(fp)
  803fc8:	10802ec3 	ldbu	r2,187(r2)
  803fcc:	10803fcc 	andi	r2,r2,255
  803fd0:	1080201c 	xori	r2,r2,128
  803fd4:	10bfe004 	addi	r2,r2,-128
  803fd8:	10000826 	beq	r2,zero,803ffc <logic+0x37ec>
  803fdc:	e0bffc17 	ldw	r2,-16(fp)
  803fe0:	10805403 	ldbu	r2,336(r2)
  803fe4:	10803fcc 	andi	r2,r2,255
  803fe8:	1080201c 	xori	r2,r2,128
  803fec:	10bfe004 	addi	r2,r2,-128
  803ff0:	1000021e 	bne	r2,zero,803ffc <logic+0x37ec>
  803ff4:	00800044 	movi	r2,1
  803ff8:	00000106 	br	804000 <logic+0x37f0>
  803ffc:	0005883a 	mov	r2,zero
  804000:	1007883a 	mov	r3,r2
  804004:	e0bffc17 	ldw	r2,-16(fp)
  804008:	10c03205 	stb	r3,200(r2)
  d->_g100 = d->_g115 && d->AS;
  80400c:	e0bffc17 	ldw	r2,-16(fp)
  804010:	10803203 	ldbu	r2,200(r2)
  804014:	10803fcc 	andi	r2,r2,255
  804018:	1080201c 	xori	r2,r2,128
  80401c:	10bfe004 	addi	r2,r2,-128
  804020:	10000826 	beq	r2,zero,804044 <logic+0x3834>
  804024:	e0bffc17 	ldw	r2,-16(fp)
  804028:	10801703 	ldbu	r2,92(r2)
  80402c:	10803fcc 	andi	r2,r2,255
  804030:	1080201c 	xori	r2,r2,128
  804034:	10bfe004 	addi	r2,r2,-128
  804038:	10000226 	beq	r2,zero,804044 <logic+0x3834>
  80403c:	00800044 	movi	r2,1
  804040:	00000106 	br	804048 <logic+0x3838>
  804044:	0005883a 	mov	r2,zero
  804048:	1007883a 	mov	r3,r2
  80404c:	e0bffc17 	ldw	r2,-16(fp)
  804050:	10c02f45 	stb	r3,189(r2)
  if (d->_g100) {
  804054:	e0bffc17 	ldw	r2,-16(fp)
  804058:	10802f43 	ldbu	r2,189(r2)
  80405c:	10803fcc 	andi	r2,r2,255
  804060:	1080201c 	xori	r2,r2,128
  804064:	10bfe004 	addi	r2,r2,-128
  804068:	10000326 	beq	r2,zero,804078 <logic+0x3868>
    d->_heart2_local__Atrig13 = 1;
  80406c:	e0bffc17 	ldw	r2,-16(fp)
  804070:	00c00044 	movi	r3,1
  804074:	10c01d85 	stb	r3,118(r2)
  }
  d->_cg146 = d->_heart2_local__Atrig12 || d->_heart2_local__Atrig13;
  804078:	e0bffc17 	ldw	r2,-16(fp)
  80407c:	10801d43 	ldbu	r2,117(r2)
  804080:	10803fcc 	andi	r2,r2,255
  804084:	1080201c 	xori	r2,r2,128
  804088:	10bfe004 	addi	r2,r2,-128
  80408c:	1000061e 	bne	r2,zero,8040a8 <logic+0x3898>
  804090:	e0bffc17 	ldw	r2,-16(fp)
  804094:	10801d83 	ldbu	r2,118(r2)
  804098:	10803fcc 	andi	r2,r2,255
  80409c:	1080201c 	xori	r2,r2,128
  8040a0:	10bfe004 	addi	r2,r2,-128
  8040a4:	10000226 	beq	r2,zero,8040b0 <logic+0x38a0>
  8040a8:	00800044 	movi	r2,1
  8040ac:	00000106 	br	8040b4 <logic+0x38a4>
  8040b0:	0005883a 	mov	r2,zero
  8040b4:	1007883a 	mov	r3,r2
  8040b8:	e0bffc17 	ldw	r2,-16(fp)
  8040bc:	10c05385 	stb	r3,334(r2)
  d->_g104 = d->_g92 && d->_cg146;
  8040c0:	e0bffc17 	ldw	r2,-16(fp)
  8040c4:	10802dc3 	ldbu	r2,183(r2)
  8040c8:	10803fcc 	andi	r2,r2,255
  8040cc:	1080201c 	xori	r2,r2,128
  8040d0:	10bfe004 	addi	r2,r2,-128
  8040d4:	10000826 	beq	r2,zero,8040f8 <logic+0x38e8>
  8040d8:	e0bffc17 	ldw	r2,-16(fp)
  8040dc:	10805383 	ldbu	r2,334(r2)
  8040e0:	10803fcc 	andi	r2,r2,255
  8040e4:	1080201c 	xori	r2,r2,128
  8040e8:	10bfe004 	addi	r2,r2,-128
  8040ec:	10000226 	beq	r2,zero,8040f8 <logic+0x38e8>
  8040f0:	00800044 	movi	r2,1
  8040f4:	00000106 	br	8040fc <logic+0x38ec>
  8040f8:	0005883a 	mov	r2,zero
  8040fc:	1007883a 	mov	r3,r2
  804100:	e0bffc17 	ldw	r2,-16(fp)
  804104:	10c02fc5 	stb	r3,191(r2)
  d->_g101 = !d->_g98;
  804108:	e0bffc17 	ldw	r2,-16(fp)
  80410c:	10802ec3 	ldbu	r2,187(r2)
  804110:	10803fcc 	andi	r2,r2,255
  804114:	1080201c 	xori	r2,r2,128
  804118:	10bfe004 	addi	r2,r2,-128
  80411c:	1005003a 	cmpeq	r2,r2,zero
  804120:	1007883a 	mov	r3,r2
  804124:	e0bffc17 	ldw	r2,-16(fp)
  804128:	10c02f85 	stb	r3,190(r2)
  d->_g111 = d->_g113 || d->_g100;
  80412c:	e0bffc17 	ldw	r2,-16(fp)
  804130:	10803183 	ldbu	r2,198(r2)
  804134:	10803fcc 	andi	r2,r2,255
  804138:	1080201c 	xori	r2,r2,128
  80413c:	10bfe004 	addi	r2,r2,-128
  804140:	1000061e 	bne	r2,zero,80415c <logic+0x394c>
  804144:	e0bffc17 	ldw	r2,-16(fp)
  804148:	10802f43 	ldbu	r2,189(r2)
  80414c:	10803fcc 	andi	r2,r2,255
  804150:	1080201c 	xori	r2,r2,128
  804154:	10bfe004 	addi	r2,r2,-128
  804158:	10000226 	beq	r2,zero,804164 <logic+0x3954>
  80415c:	00800044 	movi	r2,1
  804160:	00000106 	br	804168 <logic+0x3958>
  804164:	0005883a 	mov	r2,zero
  804168:	1007883a 	mov	r3,r2
  80416c:	e0bffc17 	ldw	r2,-16(fp)
  804170:	10c03105 	stb	r3,196(r2)
  d->_g150 = (d->_g77 || d->_g104) && (d->_g101 || d->_g111) && (d->_g104 || d->_g111);
  804174:	e0bffc17 	ldw	r2,-16(fp)
  804178:	10802b43 	ldbu	r2,173(r2)
  80417c:	10803fcc 	andi	r2,r2,255
  804180:	1080201c 	xori	r2,r2,128
  804184:	10bfe004 	addi	r2,r2,-128
  804188:	1000061e 	bne	r2,zero,8041a4 <logic+0x3994>
  80418c:	e0bffc17 	ldw	r2,-16(fp)
  804190:	10802fc3 	ldbu	r2,191(r2)
  804194:	10803fcc 	andi	r2,r2,255
  804198:	1080201c 	xori	r2,r2,128
  80419c:	10bfe004 	addi	r2,r2,-128
  8041a0:	10001a26 	beq	r2,zero,80420c <logic+0x39fc>
  8041a4:	e0bffc17 	ldw	r2,-16(fp)
  8041a8:	10802f83 	ldbu	r2,190(r2)
  8041ac:	10803fcc 	andi	r2,r2,255
  8041b0:	1080201c 	xori	r2,r2,128
  8041b4:	10bfe004 	addi	r2,r2,-128
  8041b8:	1000061e 	bne	r2,zero,8041d4 <logic+0x39c4>
  8041bc:	e0bffc17 	ldw	r2,-16(fp)
  8041c0:	10803103 	ldbu	r2,196(r2)
  8041c4:	10803fcc 	andi	r2,r2,255
  8041c8:	1080201c 	xori	r2,r2,128
  8041cc:	10bfe004 	addi	r2,r2,-128
  8041d0:	10000e26 	beq	r2,zero,80420c <logic+0x39fc>
  8041d4:	e0bffc17 	ldw	r2,-16(fp)
  8041d8:	10802fc3 	ldbu	r2,191(r2)
  8041dc:	10803fcc 	andi	r2,r2,255
  8041e0:	1080201c 	xori	r2,r2,128
  8041e4:	10bfe004 	addi	r2,r2,-128
  8041e8:	1000061e 	bne	r2,zero,804204 <logic+0x39f4>
  8041ec:	e0bffc17 	ldw	r2,-16(fp)
  8041f0:	10803103 	ldbu	r2,196(r2)
  8041f4:	10803fcc 	andi	r2,r2,255
  8041f8:	1080201c 	xori	r2,r2,128
  8041fc:	10bfe004 	addi	r2,r2,-128
  804200:	10000226 	beq	r2,zero,80420c <logic+0x39fc>
  804204:	00800044 	movi	r2,1
  804208:	00000106 	br	804210 <logic+0x3a00>
  80420c:	0005883a 	mov	r2,zero
  804210:	1007883a 	mov	r3,r2
  804214:	e0bffc17 	ldw	r2,-16(fp)
  804218:	10c03785 	stb	r3,222(r2)
  d->_cg155 = d->_heart2_local__Atrig12;
  80421c:	e0bffc17 	ldw	r2,-16(fp)
  804220:	10c01d43 	ldbu	r3,117(r2)
  804224:	e0bffc17 	ldw	r2,-16(fp)
  804228:	10c05445 	stb	r3,337(r2)
  d->_g154 = d->_g150 && d->_cg155;
  80422c:	e0bffc17 	ldw	r2,-16(fp)
  804230:	10803783 	ldbu	r2,222(r2)
  804234:	10803fcc 	andi	r2,r2,255
  804238:	1080201c 	xori	r2,r2,128
  80423c:	10bfe004 	addi	r2,r2,-128
  804240:	10000826 	beq	r2,zero,804264 <logic+0x3a54>
  804244:	e0bffc17 	ldw	r2,-16(fp)
  804248:	10805443 	ldbu	r2,337(r2)
  80424c:	10803fcc 	andi	r2,r2,255
  804250:	1080201c 	xori	r2,r2,128
  804254:	10bfe004 	addi	r2,r2,-128
  804258:	10000226 	beq	r2,zero,804264 <logic+0x3a54>
  80425c:	00800044 	movi	r2,1
  804260:	00000106 	br	804268 <logic+0x3a58>
  804264:	0005883a 	mov	r2,zero
  804268:	1007883a 	mov	r3,r2
  80426c:	e0bffc17 	ldw	r2,-16(fp)
  804270:	10c03885 	stb	r3,226(r2)
  if (d->_g154) {
  804274:	e0bffc17 	ldw	r2,-16(fp)
  804278:	10803883 	ldbu	r2,226(r2)
  80427c:	10803fcc 	andi	r2,r2,255
  804280:	1080201c 	xori	r2,r2,128
  804284:	10bfe004 	addi	r2,r2,-128
  804288:	10000326 	beq	r2,zero,804298 <logic+0x3a88>
    d->_region3_null_PVARP = 0;
  80428c:	e0bffc17 	ldw	r2,-16(fp)
  804290:	10000d15 	stw	zero,52(r2)
  804294:	10000e15 	stw	zero,56(r2)
  }
  d->_g151 = d->_pg130_e2;
  804298:	e0bffc17 	ldw	r2,-16(fp)
  80429c:	10c06903 	ldbu	r3,420(r2)
  8042a0:	e0bffc17 	ldw	r2,-16(fp)
  8042a4:	10c037c5 	stb	r3,223(r2)
  if (d->_g151) {
  8042a8:	e0bffc17 	ldw	r2,-16(fp)
  8042ac:	108037c3 	ldbu	r2,223(r2)
  8042b0:	10803fcc 	andi	r2,r2,255
  8042b4:	1080201c 	xori	r2,r2,128
  8042b8:	10bfe004 	addi	r2,r2,-128
  8042bc:	10001226 	beq	r2,zero,804308 <logic+0x3af8>
    d->_region3_null_PVARP += d->deltaT;
  8042c0:	e13ffc17 	ldw	r4,-16(fp)
  8042c4:	20800d17 	ldw	r2,52(r4)
  8042c8:	20c00e17 	ldw	r3,56(r4)
  8042cc:	e1bffc17 	ldw	r6,-16(fp)
  8042d0:	31001317 	ldw	r4,76(r6)
  8042d4:	31401417 	ldw	r5,80(r6)
  8042d8:	200d883a 	mov	r6,r4
  8042dc:	280f883a 	mov	r7,r5
  8042e0:	1009883a 	mov	r4,r2
  8042e4:	180b883a 	mov	r5,r3
  8042e8:	080789c0 	call	80789c <__adddf3>
  8042ec:	1009883a 	mov	r4,r2
  8042f0:	180b883a 	mov	r5,r3
  8042f4:	2005883a 	mov	r2,r4
  8042f8:	2807883a 	mov	r3,r5
  8042fc:	e13ffc17 	ldw	r4,-16(fp)
  804300:	20800d15 	stw	r2,52(r4)
  804304:	20c00e15 	stw	r3,56(r4)
  }
  d->_g147_e1 = !d->_g151;
  804308:	e0bffc17 	ldw	r2,-16(fp)
  80430c:	108037c3 	ldbu	r2,223(r2)
  804310:	10803fcc 	andi	r2,r2,255
  804314:	1080201c 	xori	r2,r2,128
  804318:	10bfe004 	addi	r2,r2,-128
  80431c:	1005003a 	cmpeq	r2,r2,zero
  804320:	1007883a 	mov	r3,r2
  804324:	e0bffc17 	ldw	r2,-16(fp)
  804328:	10c06085 	stb	r3,386(r2)
  d->_g152 = d->_pg158;
  80432c:	e0bffc17 	ldw	r2,-16(fp)
  804330:	10c06943 	ldbu	r3,421(r2)
  804334:	e0bffc17 	ldw	r2,-16(fp)
  804338:	10c03805 	stb	r3,224(r2)
  d->_cg137 = d->_region3_null_PVARP >= d->PVARP_time;
  80433c:	e0bffc17 	ldw	r2,-16(fp)
  804340:	14000d17 	ldw	r16,52(r2)
  804344:	14400e17 	ldw	r17,56(r2)
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	10800117 	ldw	r2,4(r2)
  804350:	1009883a 	mov	r4,r2
  804354:	0808c140 	call	808c14 <__floatsidf>
  804358:	1009883a 	mov	r4,r2
  80435c:	180b883a 	mov	r5,r3
  804360:	04800044 	movi	r18,1
  804364:	200d883a 	mov	r6,r4
  804368:	280f883a 	mov	r7,r5
  80436c:	8009883a 	mov	r4,r16
  804370:	880b883a 	mov	r5,r17
  804374:	08081480 	call	808148 <__gedf2>
  804378:	1000010e 	bge	r2,zero,804380 <logic+0x3b70>
  80437c:	0025883a 	mov	r18,zero
  804380:	9007883a 	mov	r3,r18
  804384:	e0bffc17 	ldw	r2,-16(fp)
  804388:	10c052c5 	stb	r3,331(r2)
  d->_g147 = d->_g152 && d->_cg137;
  80438c:	e0bffc17 	ldw	r2,-16(fp)
  804390:	10803803 	ldbu	r2,224(r2)
  804394:	10803fcc 	andi	r2,r2,255
  804398:	1080201c 	xori	r2,r2,128
  80439c:	10bfe004 	addi	r2,r2,-128
  8043a0:	10000826 	beq	r2,zero,8043c4 <logic+0x3bb4>
  8043a4:	e0bffc17 	ldw	r2,-16(fp)
  8043a8:	108052c3 	ldbu	r2,331(r2)
  8043ac:	10803fcc 	andi	r2,r2,255
  8043b0:	1080201c 	xori	r2,r2,128
  8043b4:	10bfe004 	addi	r2,r2,-128
  8043b8:	10000226 	beq	r2,zero,8043c4 <logic+0x3bb4>
  8043bc:	00800044 	movi	r2,1
  8043c0:	00000106 	br	8043c8 <logic+0x3bb8>
  8043c4:	0005883a 	mov	r2,zero
  8043c8:	1007883a 	mov	r3,r2
  8043cc:	e0bffc17 	ldw	r2,-16(fp)
  8043d0:	10c03745 	stb	r3,221(r2)
  if (d->_g147) {
  8043d4:	e0bffc17 	ldw	r2,-16(fp)
  8043d8:	10803743 	ldbu	r2,221(r2)
  8043dc:	10803fcc 	andi	r2,r2,255
  8043e0:	1080201c 	xori	r2,r2,128
  8043e4:	10bfe004 	addi	r2,r2,-128
  8043e8:	10000326 	beq	r2,zero,8043f8 <logic+0x3be8>
    d->_heart2_local__Atrig10 = 1;
  8043ec:	e0bffc17 	ldw	r2,-16(fp)
  8043f0:	00c00044 	movi	r3,1
  8043f4:	10c01cc5 	stb	r3,115(r2)
  }
  d->_g152_e2 = d->_g152 && !d->_cg137;
  8043f8:	e0bffc17 	ldw	r2,-16(fp)
  8043fc:	10803803 	ldbu	r2,224(r2)
  804400:	10803fcc 	andi	r2,r2,255
  804404:	1080201c 	xori	r2,r2,128
  804408:	10bfe004 	addi	r2,r2,-128
  80440c:	10000826 	beq	r2,zero,804430 <logic+0x3c20>
  804410:	e0bffc17 	ldw	r2,-16(fp)
  804414:	108052c3 	ldbu	r2,331(r2)
  804418:	10803fcc 	andi	r2,r2,255
  80441c:	1080201c 	xori	r2,r2,128
  804420:	10bfe004 	addi	r2,r2,-128
  804424:	1000021e 	bne	r2,zero,804430 <logic+0x3c20>
  804428:	00800044 	movi	r2,1
  80442c:	00000106 	br	804434 <logic+0x3c24>
  804430:	0005883a 	mov	r2,zero
  804434:	1007883a 	mov	r3,r2
  804438:	e0bffc17 	ldw	r2,-16(fp)
  80443c:	10c060c5 	stb	r3,387(r2)
  d->_g141 = d->_g152_e2 && d->AS;
  804440:	e0bffc17 	ldw	r2,-16(fp)
  804444:	108060c3 	ldbu	r2,387(r2)
  804448:	10803fcc 	andi	r2,r2,255
  80444c:	1080201c 	xori	r2,r2,128
  804450:	10bfe004 	addi	r2,r2,-128
  804454:	10000826 	beq	r2,zero,804478 <logic+0x3c68>
  804458:	e0bffc17 	ldw	r2,-16(fp)
  80445c:	10801703 	ldbu	r2,92(r2)
  804460:	10803fcc 	andi	r2,r2,255
  804464:	1080201c 	xori	r2,r2,128
  804468:	10bfe004 	addi	r2,r2,-128
  80446c:	10000226 	beq	r2,zero,804478 <logic+0x3c68>
  804470:	00800044 	movi	r2,1
  804474:	00000106 	br	80447c <logic+0x3c6c>
  804478:	0005883a 	mov	r2,zero
  80447c:	1007883a 	mov	r3,r2
  804480:	e0bffc17 	ldw	r2,-16(fp)
  804484:	10c03645 	stb	r3,217(r2)
  if (d->_g141) {
  804488:	e0bffc17 	ldw	r2,-16(fp)
  80448c:	10803643 	ldbu	r2,217(r2)
  804490:	10803fcc 	andi	r2,r2,255
  804494:	1080201c 	xori	r2,r2,128
  804498:	10bfe004 	addi	r2,r2,-128
  80449c:	10000326 	beq	r2,zero,8044ac <logic+0x3c9c>
    d->_heart2_local__Atrig11 = 1;
  8044a0:	e0bffc17 	ldw	r2,-16(fp)
  8044a4:	00c00044 	movi	r3,1
  8044a8:	10c01d05 	stb	r3,116(r2)
  }
  d->_cg122 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  8044ac:	e0bffc17 	ldw	r2,-16(fp)
  8044b0:	10801cc3 	ldbu	r2,115(r2)
  8044b4:	10803fcc 	andi	r2,r2,255
  8044b8:	1080201c 	xori	r2,r2,128
  8044bc:	10bfe004 	addi	r2,r2,-128
  8044c0:	1000061e 	bne	r2,zero,8044dc <logic+0x3ccc>
  8044c4:	e0bffc17 	ldw	r2,-16(fp)
  8044c8:	10801d03 	ldbu	r2,116(r2)
  8044cc:	10803fcc 	andi	r2,r2,255
  8044d0:	1080201c 	xori	r2,r2,128
  8044d4:	10bfe004 	addi	r2,r2,-128
  8044d8:	10000226 	beq	r2,zero,8044e4 <logic+0x3cd4>
  8044dc:	00800044 	movi	r2,1
  8044e0:	00000106 	br	8044e8 <logic+0x3cd8>
  8044e4:	0005883a 	mov	r2,zero
  8044e8:	1007883a 	mov	r3,r2
  8044ec:	e0bffc17 	ldw	r2,-16(fp)
  8044f0:	10c050c5 	stb	r3,323(r2)
  d->_g123 = d->_g151 && d->_cg122;
  8044f4:	e0bffc17 	ldw	r2,-16(fp)
  8044f8:	108037c3 	ldbu	r2,223(r2)
  8044fc:	10803fcc 	andi	r2,r2,255
  804500:	1080201c 	xori	r2,r2,128
  804504:	10bfe004 	addi	r2,r2,-128
  804508:	10000826 	beq	r2,zero,80452c <logic+0x3d1c>
  80450c:	e0bffc17 	ldw	r2,-16(fp)
  804510:	108050c3 	ldbu	r2,323(r2)
  804514:	10803fcc 	andi	r2,r2,255
  804518:	1080201c 	xori	r2,r2,128
  80451c:	10bfe004 	addi	r2,r2,-128
  804520:	10000226 	beq	r2,zero,80452c <logic+0x3d1c>
  804524:	00800044 	movi	r2,1
  804528:	00000106 	br	804530 <logic+0x3d20>
  80452c:	0005883a 	mov	r2,zero
  804530:	1007883a 	mov	r3,r2
  804534:	e0bffc17 	ldw	r2,-16(fp)
  804538:	10c03305 	stb	r3,204(r2)
  d->_g133 = d->_pg156;
  80453c:	e0bffc17 	ldw	r2,-16(fp)
  804540:	10c06983 	ldbu	r3,422(r2)
  804544:	e0bffc17 	ldw	r2,-16(fp)
  804548:	10c034c5 	stb	r3,211(r2)
  d->_g127 = d->_pg139;
  80454c:	e0bffc17 	ldw	r2,-16(fp)
  804550:	10c069c3 	ldbu	r3,423(r2)
  804554:	e0bffc17 	ldw	r2,-16(fp)
  804558:	10c03385 	stb	r3,206(r2)
  d->_g130_e2 = !(d->_g133 || d->_g127);
  80455c:	e0bffc17 	ldw	r2,-16(fp)
  804560:	108034c3 	ldbu	r2,211(r2)
  804564:	10803fcc 	andi	r2,r2,255
  804568:	1080201c 	xori	r2,r2,128
  80456c:	10bfe004 	addi	r2,r2,-128
  804570:	1000081e 	bne	r2,zero,804594 <logic+0x3d84>
  804574:	e0bffc17 	ldw	r2,-16(fp)
  804578:	10803383 	ldbu	r2,206(r2)
  80457c:	10803fcc 	andi	r2,r2,255
  804580:	1080201c 	xori	r2,r2,128
  804584:	10bfe004 	addi	r2,r2,-128
  804588:	1000021e 	bne	r2,zero,804594 <logic+0x3d84>
  80458c:	00800044 	movi	r2,1
  804590:	00000106 	br	804598 <logic+0x3d88>
  804594:	0005883a 	mov	r2,zero
  804598:	1007883a 	mov	r3,r2
  80459c:	e0bffc17 	ldw	r2,-16(fp)
  8045a0:	10c06005 	stb	r3,384(r2)
  d->_g127 = d->_g127 || d->_g133;
  8045a4:	e0bffc17 	ldw	r2,-16(fp)
  8045a8:	10803383 	ldbu	r2,206(r2)
  8045ac:	10803fcc 	andi	r2,r2,255
  8045b0:	1080201c 	xori	r2,r2,128
  8045b4:	10bfe004 	addi	r2,r2,-128
  8045b8:	1000061e 	bne	r2,zero,8045d4 <logic+0x3dc4>
  8045bc:	e0bffc17 	ldw	r2,-16(fp)
  8045c0:	108034c3 	ldbu	r2,211(r2)
  8045c4:	10803fcc 	andi	r2,r2,255
  8045c8:	1080201c 	xori	r2,r2,128
  8045cc:	10bfe004 	addi	r2,r2,-128
  8045d0:	10000226 	beq	r2,zero,8045dc <logic+0x3dcc>
  8045d4:	00800044 	movi	r2,1
  8045d8:	00000106 	br	8045e0 <logic+0x3dd0>
  8045dc:	0005883a 	mov	r2,zero
  8045e0:	1007883a 	mov	r3,r2
  8045e4:	e0bffc17 	ldw	r2,-16(fp)
  8045e8:	10c03385 	stb	r3,206(r2)
  d->_cg128 = d->_region3_null_PVARP < d->PVARP_time;
  8045ec:	e0bffc17 	ldw	r2,-16(fp)
  8045f0:	14000d17 	ldw	r16,52(r2)
  8045f4:	14400e17 	ldw	r17,56(r2)
  8045f8:	e0bffc17 	ldw	r2,-16(fp)
  8045fc:	10800117 	ldw	r2,4(r2)
  804600:	1009883a 	mov	r4,r2
  804604:	0808c140 	call	808c14 <__floatsidf>
  804608:	1009883a 	mov	r4,r2
  80460c:	180b883a 	mov	r5,r3
  804610:	04800044 	movi	r18,1
  804614:	200d883a 	mov	r6,r4
  804618:	280f883a 	mov	r7,r5
  80461c:	8009883a 	mov	r4,r16
  804620:	880b883a 	mov	r5,r17
  804624:	08082240 	call	808224 <__ledf2>
  804628:	10000116 	blt	r2,zero,804630 <logic+0x3e20>
  80462c:	0025883a 	mov	r18,zero
  804630:	9007883a 	mov	r3,r18
  804634:	e0bffc17 	ldw	r2,-16(fp)
  804638:	10c051c5 	stb	r3,327(r2)
  d->_g133 = d->_g127 && d->_cg128;
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	10803383 	ldbu	r2,206(r2)
  804644:	10803fcc 	andi	r2,r2,255
  804648:	1080201c 	xori	r2,r2,128
  80464c:	10bfe004 	addi	r2,r2,-128
  804650:	10000826 	beq	r2,zero,804674 <logic+0x3e64>
  804654:	e0bffc17 	ldw	r2,-16(fp)
  804658:	108051c3 	ldbu	r2,327(r2)
  80465c:	10803fcc 	andi	r2,r2,255
  804660:	1080201c 	xori	r2,r2,128
  804664:	10bfe004 	addi	r2,r2,-128
  804668:	10000226 	beq	r2,zero,804674 <logic+0x3e64>
  80466c:	00800044 	movi	r2,1
  804670:	00000106 	br	804678 <logic+0x3e68>
  804674:	0005883a 	mov	r2,zero
  804678:	1007883a 	mov	r3,r2
  80467c:	e0bffc17 	ldw	r2,-16(fp)
  804680:	10c034c5 	stb	r3,211(r2)
  if (d->_g133) {
  804684:	e0bffc17 	ldw	r2,-16(fp)
  804688:	108034c3 	ldbu	r2,211(r2)
  80468c:	10803fcc 	andi	r2,r2,255
  804690:	1080201c 	xori	r2,r2,128
  804694:	10bfe004 	addi	r2,r2,-128
  804698:	10003426 	beq	r2,zero,80476c <logic+0x3f5c>
    d->sleepT = (d->sleepT < (d->PVARP_time - d->_region3_null_PVARP)) ? d->sleepT : (d->PVARP_time - d->_region3_null_PVARP);
  80469c:	e0bffc17 	ldw	r2,-16(fp)
  8046a0:	14001517 	ldw	r16,84(r2)
  8046a4:	14401617 	ldw	r17,88(r2)
  8046a8:	e0bffc17 	ldw	r2,-16(fp)
  8046ac:	10800117 	ldw	r2,4(r2)
  8046b0:	1009883a 	mov	r4,r2
  8046b4:	0808c140 	call	808c14 <__floatsidf>
  8046b8:	1011883a 	mov	r8,r2
  8046bc:	1813883a 	mov	r9,r3
  8046c0:	e13ffc17 	ldw	r4,-16(fp)
  8046c4:	20800d17 	ldw	r2,52(r4)
  8046c8:	20c00e17 	ldw	r3,56(r4)
  8046cc:	100d883a 	mov	r6,r2
  8046d0:	180f883a 	mov	r7,r3
  8046d4:	4009883a 	mov	r4,r8
  8046d8:	480b883a 	mov	r5,r9
  8046dc:	08083180 	call	808318 <__subdf3>
  8046e0:	1009883a 	mov	r4,r2
  8046e4:	180b883a 	mov	r5,r3
  8046e8:	2005883a 	mov	r2,r4
  8046ec:	2807883a 	mov	r3,r5
  8046f0:	100d883a 	mov	r6,r2
  8046f4:	180f883a 	mov	r7,r3
  8046f8:	8009883a 	mov	r4,r16
  8046fc:	880b883a 	mov	r5,r17
  804700:	08082240 	call	808224 <__ledf2>
  804704:	1000040e 	bge	r2,zero,804718 <logic+0x3f08>
  804708:	e13ffc17 	ldw	r4,-16(fp)
  80470c:	20801517 	ldw	r2,84(r4)
  804710:	20c01617 	ldw	r3,88(r4)
  804714:	00001206 	br	804760 <logic+0x3f50>
  804718:	e0bffc17 	ldw	r2,-16(fp)
  80471c:	10800117 	ldw	r2,4(r2)
  804720:	1009883a 	mov	r4,r2
  804724:	0808c140 	call	808c14 <__floatsidf>
  804728:	1011883a 	mov	r8,r2
  80472c:	1813883a 	mov	r9,r3
  804730:	e13ffc17 	ldw	r4,-16(fp)
  804734:	20800d17 	ldw	r2,52(r4)
  804738:	20c00e17 	ldw	r3,56(r4)
  80473c:	100d883a 	mov	r6,r2
  804740:	180f883a 	mov	r7,r3
  804744:	4009883a 	mov	r4,r8
  804748:	480b883a 	mov	r5,r9
  80474c:	08083180 	call	808318 <__subdf3>
  804750:	1009883a 	mov	r4,r2
  804754:	180b883a 	mov	r5,r3
  804758:	2005883a 	mov	r2,r4
  80475c:	2807883a 	mov	r3,r5
  804760:	e13ffc17 	ldw	r4,-16(fp)
  804764:	20801515 	stw	r2,84(r4)
  804768:	20c01615 	stw	r3,88(r4)
  }
  d->_cg129 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  80476c:	e0bffc17 	ldw	r2,-16(fp)
  804770:	10801cc3 	ldbu	r2,115(r2)
  804774:	10803fcc 	andi	r2,r2,255
  804778:	1080201c 	xori	r2,r2,128
  80477c:	10bfe004 	addi	r2,r2,-128
  804780:	1000061e 	bne	r2,zero,80479c <logic+0x3f8c>
  804784:	e0bffc17 	ldw	r2,-16(fp)
  804788:	10801d03 	ldbu	r2,116(r2)
  80478c:	10803fcc 	andi	r2,r2,255
  804790:	1080201c 	xori	r2,r2,128
  804794:	10bfe004 	addi	r2,r2,-128
  804798:	10000226 	beq	r2,zero,8047a4 <logic+0x3f94>
  80479c:	00800044 	movi	r2,1
  8047a0:	00000106 	br	8047a8 <logic+0x3f98>
  8047a4:	0005883a 	mov	r2,zero
  8047a8:	1007883a 	mov	r3,r2
  8047ac:	e0bffc17 	ldw	r2,-16(fp)
  8047b0:	10c05185 	stb	r3,326(r2)
  d->_g128 = d->_g127 && !d->_cg128;
  8047b4:	e0bffc17 	ldw	r2,-16(fp)
  8047b8:	10803383 	ldbu	r2,206(r2)
  8047bc:	10803fcc 	andi	r2,r2,255
  8047c0:	1080201c 	xori	r2,r2,128
  8047c4:	10bfe004 	addi	r2,r2,-128
  8047c8:	10000826 	beq	r2,zero,8047ec <logic+0x3fdc>
  8047cc:	e0bffc17 	ldw	r2,-16(fp)
  8047d0:	108051c3 	ldbu	r2,327(r2)
  8047d4:	10803fcc 	andi	r2,r2,255
  8047d8:	1080201c 	xori	r2,r2,128
  8047dc:	10bfe004 	addi	r2,r2,-128
  8047e0:	1000021e 	bne	r2,zero,8047ec <logic+0x3fdc>
  8047e4:	00800044 	movi	r2,1
  8047e8:	00000106 	br	8047f0 <logic+0x3fe0>
  8047ec:	0005883a 	mov	r2,zero
  8047f0:	1007883a 	mov	r3,r2
  8047f4:	e0bffc17 	ldw	r2,-16(fp)
  8047f8:	10c033c5 	stb	r3,207(r2)
  d->_cg131 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  8047fc:	e0bffc17 	ldw	r2,-16(fp)
  804800:	10801cc3 	ldbu	r2,115(r2)
  804804:	10803fcc 	andi	r2,r2,255
  804808:	1080201c 	xori	r2,r2,128
  80480c:	10bfe004 	addi	r2,r2,-128
  804810:	1000061e 	bne	r2,zero,80482c <logic+0x401c>
  804814:	e0bffc17 	ldw	r2,-16(fp)
  804818:	10801d03 	ldbu	r2,116(r2)
  80481c:	10803fcc 	andi	r2,r2,255
  804820:	1080201c 	xori	r2,r2,128
  804824:	10bfe004 	addi	r2,r2,-128
  804828:	10000226 	beq	r2,zero,804834 <logic+0x4024>
  80482c:	00800044 	movi	r2,1
  804830:	00000106 	br	804838 <logic+0x4028>
  804834:	0005883a 	mov	r2,zero
  804838:	1007883a 	mov	r3,r2
  80483c:	e0bffc17 	ldw	r2,-16(fp)
  804840:	10c05205 	stb	r3,328(r2)
  d->_g130 = d->_g133 && d->_cg129 || d->_g128 && d->_cg131;
  804844:	e0bffc17 	ldw	r2,-16(fp)
  804848:	108034c3 	ldbu	r2,211(r2)
  80484c:	10803fcc 	andi	r2,r2,255
  804850:	1080201c 	xori	r2,r2,128
  804854:	10bfe004 	addi	r2,r2,-128
  804858:	10000626 	beq	r2,zero,804874 <logic+0x4064>
  80485c:	e0bffc17 	ldw	r2,-16(fp)
  804860:	10805183 	ldbu	r2,326(r2)
  804864:	10803fcc 	andi	r2,r2,255
  804868:	1080201c 	xori	r2,r2,128
  80486c:	10bfe004 	addi	r2,r2,-128
  804870:	10000c1e 	bne	r2,zero,8048a4 <logic+0x4094>
  804874:	e0bffc17 	ldw	r2,-16(fp)
  804878:	108033c3 	ldbu	r2,207(r2)
  80487c:	10803fcc 	andi	r2,r2,255
  804880:	1080201c 	xori	r2,r2,128
  804884:	10bfe004 	addi	r2,r2,-128
  804888:	10000826 	beq	r2,zero,8048ac <logic+0x409c>
  80488c:	e0bffc17 	ldw	r2,-16(fp)
  804890:	10805203 	ldbu	r2,328(r2)
  804894:	10803fcc 	andi	r2,r2,255
  804898:	1080201c 	xori	r2,r2,128
  80489c:	10bfe004 	addi	r2,r2,-128
  8048a0:	10000226 	beq	r2,zero,8048ac <logic+0x409c>
  8048a4:	00800044 	movi	r2,1
  8048a8:	00000106 	br	8048b0 <logic+0x40a0>
  8048ac:	0005883a 	mov	r2,zero
  8048b0:	1007883a 	mov	r3,r2
  8048b4:	e0bffc17 	ldw	r2,-16(fp)
  8048b8:	10c03445 	stb	r3,209(r2)
  d->_g137 = !d->_g152;
  8048bc:	e0bffc17 	ldw	r2,-16(fp)
  8048c0:	10803803 	ldbu	r2,224(r2)
  8048c4:	10803fcc 	andi	r2,r2,255
  8048c8:	1080201c 	xori	r2,r2,128
  8048cc:	10bfe004 	addi	r2,r2,-128
  8048d0:	1005003a 	cmpeq	r2,r2,zero
  8048d4:	1007883a 	mov	r3,r2
  8048d8:	e0bffc17 	ldw	r2,-16(fp)
  8048dc:	10c03545 	stb	r3,213(r2)
  d->_g138 = d->_g147 || d->_g141;
  8048e0:	e0bffc17 	ldw	r2,-16(fp)
  8048e4:	10803743 	ldbu	r2,221(r2)
  8048e8:	10803fcc 	andi	r2,r2,255
  8048ec:	1080201c 	xori	r2,r2,128
  8048f0:	10bfe004 	addi	r2,r2,-128
  8048f4:	1000061e 	bne	r2,zero,804910 <logic+0x4100>
  8048f8:	e0bffc17 	ldw	r2,-16(fp)
  8048fc:	10803643 	ldbu	r2,217(r2)
  804900:	10803fcc 	andi	r2,r2,255
  804904:	1080201c 	xori	r2,r2,128
  804908:	10bfe004 	addi	r2,r2,-128
  80490c:	10000226 	beq	r2,zero,804918 <logic+0x4108>
  804910:	00800044 	movi	r2,1
  804914:	00000106 	br	80491c <logic+0x410c>
  804918:	0005883a 	mov	r2,zero
  80491c:	1007883a 	mov	r3,r2
  804920:	e0bffc17 	ldw	r2,-16(fp)
  804924:	10c03585 	stb	r3,214(r2)
  d->_g141 = (d->_g147_e1 || d->_g123) && (d->_g130_e2 || d->_g130) && (d->_g137 || d->_g138) && (d->_g123 || d->_g130 || d->_g138);
  804928:	e0bffc17 	ldw	r2,-16(fp)
  80492c:	10806083 	ldbu	r2,386(r2)
  804930:	10803fcc 	andi	r2,r2,255
  804934:	1080201c 	xori	r2,r2,128
  804938:	10bfe004 	addi	r2,r2,-128
  80493c:	1000061e 	bne	r2,zero,804958 <logic+0x4148>
  804940:	e0bffc17 	ldw	r2,-16(fp)
  804944:	10803303 	ldbu	r2,204(r2)
  804948:	10803fcc 	andi	r2,r2,255
  80494c:	1080201c 	xori	r2,r2,128
  804950:	10bfe004 	addi	r2,r2,-128
  804954:	10002c26 	beq	r2,zero,804a08 <logic+0x41f8>
  804958:	e0bffc17 	ldw	r2,-16(fp)
  80495c:	10806003 	ldbu	r2,384(r2)
  804960:	10803fcc 	andi	r2,r2,255
  804964:	1080201c 	xori	r2,r2,128
  804968:	10bfe004 	addi	r2,r2,-128
  80496c:	1000061e 	bne	r2,zero,804988 <logic+0x4178>
  804970:	e0bffc17 	ldw	r2,-16(fp)
  804974:	10803443 	ldbu	r2,209(r2)
  804978:	10803fcc 	andi	r2,r2,255
  80497c:	1080201c 	xori	r2,r2,128
  804980:	10bfe004 	addi	r2,r2,-128
  804984:	10002026 	beq	r2,zero,804a08 <logic+0x41f8>
  804988:	e0bffc17 	ldw	r2,-16(fp)
  80498c:	10803543 	ldbu	r2,213(r2)
  804990:	10803fcc 	andi	r2,r2,255
  804994:	1080201c 	xori	r2,r2,128
  804998:	10bfe004 	addi	r2,r2,-128
  80499c:	1000061e 	bne	r2,zero,8049b8 <logic+0x41a8>
  8049a0:	e0bffc17 	ldw	r2,-16(fp)
  8049a4:	10803583 	ldbu	r2,214(r2)
  8049a8:	10803fcc 	andi	r2,r2,255
  8049ac:	1080201c 	xori	r2,r2,128
  8049b0:	10bfe004 	addi	r2,r2,-128
  8049b4:	10001426 	beq	r2,zero,804a08 <logic+0x41f8>
  8049b8:	e0bffc17 	ldw	r2,-16(fp)
  8049bc:	10803303 	ldbu	r2,204(r2)
  8049c0:	10803fcc 	andi	r2,r2,255
  8049c4:	1080201c 	xori	r2,r2,128
  8049c8:	10bfe004 	addi	r2,r2,-128
  8049cc:	10000c1e 	bne	r2,zero,804a00 <logic+0x41f0>
  8049d0:	e0bffc17 	ldw	r2,-16(fp)
  8049d4:	10803443 	ldbu	r2,209(r2)
  8049d8:	10803fcc 	andi	r2,r2,255
  8049dc:	1080201c 	xori	r2,r2,128
  8049e0:	10bfe004 	addi	r2,r2,-128
  8049e4:	1000061e 	bne	r2,zero,804a00 <logic+0x41f0>
  8049e8:	e0bffc17 	ldw	r2,-16(fp)
  8049ec:	10803583 	ldbu	r2,214(r2)
  8049f0:	10803fcc 	andi	r2,r2,255
  8049f4:	1080201c 	xori	r2,r2,128
  8049f8:	10bfe004 	addi	r2,r2,-128
  8049fc:	10000226 	beq	r2,zero,804a08 <logic+0x41f8>
  804a00:	00800044 	movi	r2,1
  804a04:	00000106 	br	804a0c <logic+0x41fc>
  804a08:	0005883a 	mov	r2,zero
  804a0c:	1007883a 	mov	r3,r2
  804a10:	e0bffc17 	ldw	r2,-16(fp)
  804a14:	10c03645 	stb	r3,217(r2)
  d->_cg142 = d->_heart2_local__Atrig10;
  804a18:	e0bffc17 	ldw	r2,-16(fp)
  804a1c:	10c01cc3 	ldbu	r3,115(r2)
  804a20:	e0bffc17 	ldw	r2,-16(fp)
  804a24:	10c05305 	stb	r3,332(r2)
  d->_g123 = d->_g141 && !d->_cg142;
  804a28:	e0bffc17 	ldw	r2,-16(fp)
  804a2c:	10803643 	ldbu	r2,217(r2)
  804a30:	10803fcc 	andi	r2,r2,255
  804a34:	1080201c 	xori	r2,r2,128
  804a38:	10bfe004 	addi	r2,r2,-128
  804a3c:	10000826 	beq	r2,zero,804a60 <logic+0x4250>
  804a40:	e0bffc17 	ldw	r2,-16(fp)
  804a44:	10805303 	ldbu	r2,332(r2)
  804a48:	10803fcc 	andi	r2,r2,255
  804a4c:	1080201c 	xori	r2,r2,128
  804a50:	10bfe004 	addi	r2,r2,-128
  804a54:	1000021e 	bne	r2,zero,804a60 <logic+0x4250>
  804a58:	00800044 	movi	r2,1
  804a5c:	00000106 	br	804a64 <logic+0x4254>
  804a60:	0005883a 	mov	r2,zero
  804a64:	1007883a 	mov	r3,r2
  804a68:	e0bffc17 	ldw	r2,-16(fp)
  804a6c:	10c03305 	stb	r3,204(r2)
  if (d->_g123) {
  804a70:	e0bffc17 	ldw	r2,-16(fp)
  804a74:	10803303 	ldbu	r2,204(r2)
  804a78:	10803fcc 	andi	r2,r2,255
  804a7c:	1080201c 	xori	r2,r2,128
  804a80:	10bfe004 	addi	r2,r2,-128
  804a84:	10000626 	beq	r2,zero,804aa0 <logic+0x4290>
    d->AR |= 1;
  804a88:	e0bffc17 	ldw	r2,-16(fp)
  804a8c:	10801843 	ldbu	r2,97(r2)
  804a90:	10800054 	ori	r2,r2,1
  804a94:	1007883a 	mov	r3,r2
  804a98:	e0bffc17 	ldw	r2,-16(fp)
  804a9c:	10c01845 	stb	r3,97(r2)
  }
  d->_g123_e1 = d->_GO || d->_g154 || d->_g123;
  804aa0:	e0bffc17 	ldw	r2,-16(fp)
  804aa4:	10804543 	ldbu	r2,277(r2)
  804aa8:	10803fcc 	andi	r2,r2,255
  804aac:	1080201c 	xori	r2,r2,128
  804ab0:	10bfe004 	addi	r2,r2,-128
  804ab4:	10000c1e 	bne	r2,zero,804ae8 <logic+0x42d8>
  804ab8:	e0bffc17 	ldw	r2,-16(fp)
  804abc:	10803883 	ldbu	r2,226(r2)
  804ac0:	10803fcc 	andi	r2,r2,255
  804ac4:	1080201c 	xori	r2,r2,128
  804ac8:	10bfe004 	addi	r2,r2,-128
  804acc:	1000061e 	bne	r2,zero,804ae8 <logic+0x42d8>
  804ad0:	e0bffc17 	ldw	r2,-16(fp)
  804ad4:	10803303 	ldbu	r2,204(r2)
  804ad8:	10803fcc 	andi	r2,r2,255
  804adc:	1080201c 	xori	r2,r2,128
  804ae0:	10bfe004 	addi	r2,r2,-128
  804ae4:	10000226 	beq	r2,zero,804af0 <logic+0x42e0>
  804ae8:	00800044 	movi	r2,1
  804aec:	00000106 	br	804af4 <logic+0x42e4>
  804af0:	0005883a 	mov	r2,zero
  804af4:	1007883a 	mov	r3,r2
  804af8:	e0bffc17 	ldw	r2,-16(fp)
  804afc:	10c05fc5 	stb	r3,383(r2)
  if (d->_g123_e1) {
  804b00:	e0bffc17 	ldw	r2,-16(fp)
  804b04:	10805fc3 	ldbu	r2,383(r2)
  804b08:	10803fcc 	andi	r2,r2,255
  804b0c:	1080201c 	xori	r2,r2,128
  804b10:	10bfe004 	addi	r2,r2,-128
  804b14:	10000426 	beq	r2,zero,804b28 <logic+0x4318>
    d->_heart2_local__Atrig10 = 0;
  804b18:	e0bffc17 	ldw	r2,-16(fp)
  804b1c:	10001cc5 	stb	zero,115(r2)
    d->_heart2_local__Atrig11 = 0;
  804b20:	e0bffc17 	ldw	r2,-16(fp)
  804b24:	10001d05 	stb	zero,116(r2)
  }
  d->_cg120 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804b28:	e0bffc17 	ldw	r2,-16(fp)
  804b2c:	10801cc3 	ldbu	r2,115(r2)
  804b30:	10803fcc 	andi	r2,r2,255
  804b34:	1080201c 	xori	r2,r2,128
  804b38:	10bfe004 	addi	r2,r2,-128
  804b3c:	1000061e 	bne	r2,zero,804b58 <logic+0x4348>
  804b40:	e0bffc17 	ldw	r2,-16(fp)
  804b44:	10801d03 	ldbu	r2,116(r2)
  804b48:	10803fcc 	andi	r2,r2,255
  804b4c:	1080201c 	xori	r2,r2,128
  804b50:	10bfe004 	addi	r2,r2,-128
  804b54:	10000226 	beq	r2,zero,804b60 <logic+0x4350>
  804b58:	00800044 	movi	r2,1
  804b5c:	00000106 	br	804b64 <logic+0x4354>
  804b60:	0005883a 	mov	r2,zero
  804b64:	1007883a 	mov	r3,r2
  804b68:	e0bffc17 	ldw	r2,-16(fp)
  804b6c:	10c05085 	stb	r3,322(r2)
  d->_g130_e2 = d->_g123_e1 && !d->_cg120 || d->_g151 && !d->_cg122;
  804b70:	e0bffc17 	ldw	r2,-16(fp)
  804b74:	10805fc3 	ldbu	r2,383(r2)
  804b78:	10803fcc 	andi	r2,r2,255
  804b7c:	1080201c 	xori	r2,r2,128
  804b80:	10bfe004 	addi	r2,r2,-128
  804b84:	10000626 	beq	r2,zero,804ba0 <logic+0x4390>
  804b88:	e0bffc17 	ldw	r2,-16(fp)
  804b8c:	10805083 	ldbu	r2,322(r2)
  804b90:	10803fcc 	andi	r2,r2,255
  804b94:	1080201c 	xori	r2,r2,128
  804b98:	10bfe004 	addi	r2,r2,-128
  804b9c:	10000c26 	beq	r2,zero,804bd0 <logic+0x43c0>
  804ba0:	e0bffc17 	ldw	r2,-16(fp)
  804ba4:	108037c3 	ldbu	r2,223(r2)
  804ba8:	10803fcc 	andi	r2,r2,255
  804bac:	1080201c 	xori	r2,r2,128
  804bb0:	10bfe004 	addi	r2,r2,-128
  804bb4:	10000826 	beq	r2,zero,804bd8 <logic+0x43c8>
  804bb8:	e0bffc17 	ldw	r2,-16(fp)
  804bbc:	108050c3 	ldbu	r2,323(r2)
  804bc0:	10803fcc 	andi	r2,r2,255
  804bc4:	1080201c 	xori	r2,r2,128
  804bc8:	10bfe004 	addi	r2,r2,-128
  804bcc:	1000021e 	bne	r2,zero,804bd8 <logic+0x43c8>
  804bd0:	00800044 	movi	r2,1
  804bd4:	00000106 	br	804bdc <logic+0x43cc>
  804bd8:	0005883a 	mov	r2,zero
  804bdc:	1007883a 	mov	r3,r2
  804be0:	e0bffc17 	ldw	r2,-16(fp)
  804be4:	10c06005 	stb	r3,384(r2)
  d->_cg124 = d->_region3_null_PVARP < d->PVARP_time;
  804be8:	e0bffc17 	ldw	r2,-16(fp)
  804bec:	14000d17 	ldw	r16,52(r2)
  804bf0:	14400e17 	ldw	r17,56(r2)
  804bf4:	e0bffc17 	ldw	r2,-16(fp)
  804bf8:	10800117 	ldw	r2,4(r2)
  804bfc:	1009883a 	mov	r4,r2
  804c00:	0808c140 	call	808c14 <__floatsidf>
  804c04:	1009883a 	mov	r4,r2
  804c08:	180b883a 	mov	r5,r3
  804c0c:	04800044 	movi	r18,1
  804c10:	200d883a 	mov	r6,r4
  804c14:	280f883a 	mov	r7,r5
  804c18:	8009883a 	mov	r4,r16
  804c1c:	880b883a 	mov	r5,r17
  804c20:	08082240 	call	808224 <__ledf2>
  804c24:	10000116 	blt	r2,zero,804c2c <logic+0x441c>
  804c28:	0025883a 	mov	r18,zero
  804c2c:	9007883a 	mov	r3,r18
  804c30:	e0bffc17 	ldw	r2,-16(fp)
  804c34:	10c05105 	stb	r3,324(r2)
  d->_g130 = d->_g123_e1 && d->_cg124;
  804c38:	e0bffc17 	ldw	r2,-16(fp)
  804c3c:	10805fc3 	ldbu	r2,383(r2)
  804c40:	10803fcc 	andi	r2,r2,255
  804c44:	1080201c 	xori	r2,r2,128
  804c48:	10bfe004 	addi	r2,r2,-128
  804c4c:	10000826 	beq	r2,zero,804c70 <logic+0x4460>
  804c50:	e0bffc17 	ldw	r2,-16(fp)
  804c54:	10805103 	ldbu	r2,324(r2)
  804c58:	10803fcc 	andi	r2,r2,255
  804c5c:	1080201c 	xori	r2,r2,128
  804c60:	10bfe004 	addi	r2,r2,-128
  804c64:	10000226 	beq	r2,zero,804c70 <logic+0x4460>
  804c68:	00800044 	movi	r2,1
  804c6c:	00000106 	br	804c74 <logic+0x4464>
  804c70:	0005883a 	mov	r2,zero
  804c74:	1007883a 	mov	r3,r2
  804c78:	e0bffc17 	ldw	r2,-16(fp)
  804c7c:	10c03445 	stb	r3,209(r2)
  if (d->_g130) {
  804c80:	e0bffc17 	ldw	r2,-16(fp)
  804c84:	10803443 	ldbu	r2,209(r2)
  804c88:	10803fcc 	andi	r2,r2,255
  804c8c:	1080201c 	xori	r2,r2,128
  804c90:	10bfe004 	addi	r2,r2,-128
  804c94:	10003426 	beq	r2,zero,804d68 <logic+0x4558>
    d->sleepT = (d->sleepT < (d->PVARP_time - d->_region3_null_PVARP)) ? d->sleepT : (d->PVARP_time - d->_region3_null_PVARP);
  804c98:	e0bffc17 	ldw	r2,-16(fp)
  804c9c:	14001517 	ldw	r16,84(r2)
  804ca0:	14401617 	ldw	r17,88(r2)
  804ca4:	e0bffc17 	ldw	r2,-16(fp)
  804ca8:	10800117 	ldw	r2,4(r2)
  804cac:	1009883a 	mov	r4,r2
  804cb0:	0808c140 	call	808c14 <__floatsidf>
  804cb4:	1011883a 	mov	r8,r2
  804cb8:	1813883a 	mov	r9,r3
  804cbc:	e13ffc17 	ldw	r4,-16(fp)
  804cc0:	20800d17 	ldw	r2,52(r4)
  804cc4:	20c00e17 	ldw	r3,56(r4)
  804cc8:	100d883a 	mov	r6,r2
  804ccc:	180f883a 	mov	r7,r3
  804cd0:	4009883a 	mov	r4,r8
  804cd4:	480b883a 	mov	r5,r9
  804cd8:	08083180 	call	808318 <__subdf3>
  804cdc:	1009883a 	mov	r4,r2
  804ce0:	180b883a 	mov	r5,r3
  804ce4:	2005883a 	mov	r2,r4
  804ce8:	2807883a 	mov	r3,r5
  804cec:	100d883a 	mov	r6,r2
  804cf0:	180f883a 	mov	r7,r3
  804cf4:	8009883a 	mov	r4,r16
  804cf8:	880b883a 	mov	r5,r17
  804cfc:	08082240 	call	808224 <__ledf2>
  804d00:	1000040e 	bge	r2,zero,804d14 <logic+0x4504>
  804d04:	e13ffc17 	ldw	r4,-16(fp)
  804d08:	20801517 	ldw	r2,84(r4)
  804d0c:	20c01617 	ldw	r3,88(r4)
  804d10:	00001206 	br	804d5c <logic+0x454c>
  804d14:	e0bffc17 	ldw	r2,-16(fp)
  804d18:	10800117 	ldw	r2,4(r2)
  804d1c:	1009883a 	mov	r4,r2
  804d20:	0808c140 	call	808c14 <__floatsidf>
  804d24:	1011883a 	mov	r8,r2
  804d28:	1813883a 	mov	r9,r3
  804d2c:	e13ffc17 	ldw	r4,-16(fp)
  804d30:	20800d17 	ldw	r2,52(r4)
  804d34:	20c00e17 	ldw	r3,56(r4)
  804d38:	100d883a 	mov	r6,r2
  804d3c:	180f883a 	mov	r7,r3
  804d40:	4009883a 	mov	r4,r8
  804d44:	480b883a 	mov	r5,r9
  804d48:	08083180 	call	808318 <__subdf3>
  804d4c:	1009883a 	mov	r4,r2
  804d50:	180b883a 	mov	r5,r3
  804d54:	2005883a 	mov	r2,r4
  804d58:	2807883a 	mov	r3,r5
  804d5c:	e13ffc17 	ldw	r4,-16(fp)
  804d60:	20801515 	stw	r2,84(r4)
  804d64:	20c01615 	stw	r3,88(r4)
  }
  d->_cg125 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804d68:	e0bffc17 	ldw	r2,-16(fp)
  804d6c:	10801cc3 	ldbu	r2,115(r2)
  804d70:	10803fcc 	andi	r2,r2,255
  804d74:	1080201c 	xori	r2,r2,128
  804d78:	10bfe004 	addi	r2,r2,-128
  804d7c:	1000061e 	bne	r2,zero,804d98 <logic+0x4588>
  804d80:	e0bffc17 	ldw	r2,-16(fp)
  804d84:	10801d03 	ldbu	r2,116(r2)
  804d88:	10803fcc 	andi	r2,r2,255
  804d8c:	1080201c 	xori	r2,r2,128
  804d90:	10bfe004 	addi	r2,r2,-128
  804d94:	10000226 	beq	r2,zero,804da0 <logic+0x4590>
  804d98:	00800044 	movi	r2,1
  804d9c:	00000106 	br	804da4 <logic+0x4594>
  804da0:	0005883a 	mov	r2,zero
  804da4:	1007883a 	mov	r3,r2
  804da8:	e0bffc17 	ldw	r2,-16(fp)
  804dac:	10c05145 	stb	r3,325(r2)
  d->_g139 = d->_g130 && !d->_cg125 || d->_g133 && !d->_cg129;
  804db0:	e0bffc17 	ldw	r2,-16(fp)
  804db4:	10803443 	ldbu	r2,209(r2)
  804db8:	10803fcc 	andi	r2,r2,255
  804dbc:	1080201c 	xori	r2,r2,128
  804dc0:	10bfe004 	addi	r2,r2,-128
  804dc4:	10000626 	beq	r2,zero,804de0 <logic+0x45d0>
  804dc8:	e0bffc17 	ldw	r2,-16(fp)
  804dcc:	10805143 	ldbu	r2,325(r2)
  804dd0:	10803fcc 	andi	r2,r2,255
  804dd4:	1080201c 	xori	r2,r2,128
  804dd8:	10bfe004 	addi	r2,r2,-128
  804ddc:	10000c26 	beq	r2,zero,804e10 <logic+0x4600>
  804de0:	e0bffc17 	ldw	r2,-16(fp)
  804de4:	108034c3 	ldbu	r2,211(r2)
  804de8:	10803fcc 	andi	r2,r2,255
  804dec:	1080201c 	xori	r2,r2,128
  804df0:	10bfe004 	addi	r2,r2,-128
  804df4:	10000826 	beq	r2,zero,804e18 <logic+0x4608>
  804df8:	e0bffc17 	ldw	r2,-16(fp)
  804dfc:	10805183 	ldbu	r2,326(r2)
  804e00:	10803fcc 	andi	r2,r2,255
  804e04:	1080201c 	xori	r2,r2,128
  804e08:	10bfe004 	addi	r2,r2,-128
  804e0c:	1000021e 	bne	r2,zero,804e18 <logic+0x4608>
  804e10:	00800044 	movi	r2,1
  804e14:	00000106 	br	804e1c <logic+0x460c>
  804e18:	0005883a 	mov	r2,zero
  804e1c:	1007883a 	mov	r3,r2
  804e20:	e0bffc17 	ldw	r2,-16(fp)
  804e24:	10c035c5 	stb	r3,215(r2)
  d->_g139_e3 = d->_g123_e1 && !d->_cg124;
  804e28:	e0bffc17 	ldw	r2,-16(fp)
  804e2c:	10805fc3 	ldbu	r2,383(r2)
  804e30:	10803fcc 	andi	r2,r2,255
  804e34:	1080201c 	xori	r2,r2,128
  804e38:	10bfe004 	addi	r2,r2,-128
  804e3c:	10000826 	beq	r2,zero,804e60 <logic+0x4650>
  804e40:	e0bffc17 	ldw	r2,-16(fp)
  804e44:	10805103 	ldbu	r2,324(r2)
  804e48:	10803fcc 	andi	r2,r2,255
  804e4c:	1080201c 	xori	r2,r2,128
  804e50:	10bfe004 	addi	r2,r2,-128
  804e54:	1000021e 	bne	r2,zero,804e60 <logic+0x4650>
  804e58:	00800044 	movi	r2,1
  804e5c:	00000106 	br	804e64 <logic+0x4654>
  804e60:	0005883a 	mov	r2,zero
  804e64:	1007883a 	mov	r3,r2
  804e68:	e0bffc17 	ldw	r2,-16(fp)
  804e6c:	10c06045 	stb	r3,385(r2)
  d->_cg134 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804e70:	e0bffc17 	ldw	r2,-16(fp)
  804e74:	10801cc3 	ldbu	r2,115(r2)
  804e78:	10803fcc 	andi	r2,r2,255
  804e7c:	1080201c 	xori	r2,r2,128
  804e80:	10bfe004 	addi	r2,r2,-128
  804e84:	1000061e 	bne	r2,zero,804ea0 <logic+0x4690>
  804e88:	e0bffc17 	ldw	r2,-16(fp)
  804e8c:	10801d03 	ldbu	r2,116(r2)
  804e90:	10803fcc 	andi	r2,r2,255
  804e94:	1080201c 	xori	r2,r2,128
  804e98:	10bfe004 	addi	r2,r2,-128
  804e9c:	10000226 	beq	r2,zero,804ea8 <logic+0x4698>
  804ea0:	00800044 	movi	r2,1
  804ea4:	00000106 	br	804eac <logic+0x469c>
  804ea8:	0005883a 	mov	r2,zero
  804eac:	1007883a 	mov	r3,r2
  804eb0:	e0bffc17 	ldw	r2,-16(fp)
  804eb4:	10c05245 	stb	r3,329(r2)
  d->_g156 = d->_g128 && !d->_cg131 || d->_g139_e3 && !d->_cg134;
  804eb8:	e0bffc17 	ldw	r2,-16(fp)
  804ebc:	108033c3 	ldbu	r2,207(r2)
  804ec0:	10803fcc 	andi	r2,r2,255
  804ec4:	1080201c 	xori	r2,r2,128
  804ec8:	10bfe004 	addi	r2,r2,-128
  804ecc:	10000626 	beq	r2,zero,804ee8 <logic+0x46d8>
  804ed0:	e0bffc17 	ldw	r2,-16(fp)
  804ed4:	10805203 	ldbu	r2,328(r2)
  804ed8:	10803fcc 	andi	r2,r2,255
  804edc:	1080201c 	xori	r2,r2,128
  804ee0:	10bfe004 	addi	r2,r2,-128
  804ee4:	10000c26 	beq	r2,zero,804f18 <logic+0x4708>
  804ee8:	e0bffc17 	ldw	r2,-16(fp)
  804eec:	10806043 	ldbu	r2,385(r2)
  804ef0:	10803fcc 	andi	r2,r2,255
  804ef4:	1080201c 	xori	r2,r2,128
  804ef8:	10bfe004 	addi	r2,r2,-128
  804efc:	10000826 	beq	r2,zero,804f20 <logic+0x4710>
  804f00:	e0bffc17 	ldw	r2,-16(fp)
  804f04:	10805243 	ldbu	r2,329(r2)
  804f08:	10803fcc 	andi	r2,r2,255
  804f0c:	1080201c 	xori	r2,r2,128
  804f10:	10bfe004 	addi	r2,r2,-128
  804f14:	1000021e 	bne	r2,zero,804f20 <logic+0x4710>
  804f18:	00800044 	movi	r2,1
  804f1c:	00000106 	br	804f24 <logic+0x4714>
  804f20:	0005883a 	mov	r2,zero
  804f24:	1007883a 	mov	r3,r2
  804f28:	e0bffc17 	ldw	r2,-16(fp)
  804f2c:	10c03905 	stb	r3,228(r2)
  d->_g158 = d->_g123_e1 || d->_g152_e2 && !d->AS;
  804f30:	e0bffc17 	ldw	r2,-16(fp)
  804f34:	10805fc3 	ldbu	r2,383(r2)
  804f38:	10803fcc 	andi	r2,r2,255
  804f3c:	1080201c 	xori	r2,r2,128
  804f40:	10bfe004 	addi	r2,r2,-128
  804f44:	10000c1e 	bne	r2,zero,804f78 <logic+0x4768>
  804f48:	e0bffc17 	ldw	r2,-16(fp)
  804f4c:	108060c3 	ldbu	r2,387(r2)
  804f50:	10803fcc 	andi	r2,r2,255
  804f54:	1080201c 	xori	r2,r2,128
  804f58:	10bfe004 	addi	r2,r2,-128
  804f5c:	10000826 	beq	r2,zero,804f80 <logic+0x4770>
  804f60:	e0bffc17 	ldw	r2,-16(fp)
  804f64:	10801703 	ldbu	r2,92(r2)
  804f68:	10803fcc 	andi	r2,r2,255
  804f6c:	1080201c 	xori	r2,r2,128
  804f70:	10bfe004 	addi	r2,r2,-128
  804f74:	1000021e 	bne	r2,zero,804f80 <logic+0x4770>
  804f78:	00800044 	movi	r2,1
  804f7c:	00000106 	br	804f84 <logic+0x4774>
  804f80:	0005883a 	mov	r2,zero
  804f84:	1007883a 	mov	r3,r2
  804f88:	e0bffc17 	ldw	r2,-16(fp)
  804f8c:	10c03985 	stb	r3,230(r2)
  d->_g122 = d->_g150 && !d->_cg155;
  804f90:	e0bffc17 	ldw	r2,-16(fp)
  804f94:	10803783 	ldbu	r2,222(r2)
  804f98:	10803fcc 	andi	r2,r2,255
  804f9c:	1080201c 	xori	r2,r2,128
  804fa0:	10bfe004 	addi	r2,r2,-128
  804fa4:	10000826 	beq	r2,zero,804fc8 <logic+0x47b8>
  804fa8:	e0bffc17 	ldw	r2,-16(fp)
  804fac:	10805443 	ldbu	r2,337(r2)
  804fb0:	10803fcc 	andi	r2,r2,255
  804fb4:	1080201c 	xori	r2,r2,128
  804fb8:	10bfe004 	addi	r2,r2,-128
  804fbc:	1000021e 	bne	r2,zero,804fc8 <logic+0x47b8>
  804fc0:	00800044 	movi	r2,1
  804fc4:	00000106 	br	804fcc <logic+0x47bc>
  804fc8:	0005883a 	mov	r2,zero
  804fcc:	1007883a 	mov	r3,r2
  804fd0:	e0bffc17 	ldw	r2,-16(fp)
  804fd4:	10c032c5 	stb	r3,203(r2)
  if (d->_g122) {
  804fd8:	e0bffc17 	ldw	r2,-16(fp)
  804fdc:	108032c3 	ldbu	r2,203(r2)
  804fe0:	10803fcc 	andi	r2,r2,255
  804fe4:	1080201c 	xori	r2,r2,128
  804fe8:	10bfe004 	addi	r2,r2,-128
  804fec:	10000626 	beq	r2,zero,805008 <logic+0x47f8>
    d->a |= 1;
  804ff0:	e0bffc17 	ldw	r2,-16(fp)
  804ff4:	10801883 	ldbu	r2,98(r2)
  804ff8:	10800054 	ori	r2,r2,1
  804ffc:	1007883a 	mov	r3,r2
  805000:	e0bffc17 	ldw	r2,-16(fp)
  805004:	10c01885 	stb	r3,98(r2)
  }
  d->_g125 = d->_g141 && d->_cg142 || d->_g122;
  805008:	e0bffc17 	ldw	r2,-16(fp)
  80500c:	10803643 	ldbu	r2,217(r2)
  805010:	10803fcc 	andi	r2,r2,255
  805014:	1080201c 	xori	r2,r2,128
  805018:	10bfe004 	addi	r2,r2,-128
  80501c:	10000626 	beq	r2,zero,805038 <logic+0x4828>
  805020:	e0bffc17 	ldw	r2,-16(fp)
  805024:	10805303 	ldbu	r2,332(r2)
  805028:	10803fcc 	andi	r2,r2,255
  80502c:	1080201c 	xori	r2,r2,128
  805030:	10bfe004 	addi	r2,r2,-128
  805034:	1000061e 	bne	r2,zero,805050 <logic+0x4840>
  805038:	e0bffc17 	ldw	r2,-16(fp)
  80503c:	108032c3 	ldbu	r2,203(r2)
  805040:	10803fcc 	andi	r2,r2,255
  805044:	1080201c 	xori	r2,r2,128
  805048:	10bfe004 	addi	r2,r2,-128
  80504c:	10000226 	beq	r2,zero,805058 <logic+0x4848>
  805050:	00800044 	movi	r2,1
  805054:	00000106 	br	80505c <logic+0x484c>
  805058:	0005883a 	mov	r2,zero
  80505c:	1007883a 	mov	r3,r2
  805060:	e0bffc17 	ldw	r2,-16(fp)
  805064:	10c03345 	stb	r3,205(r2)
  if (d->_g125) {
  805068:	e0bffc17 	ldw	r2,-16(fp)
  80506c:	10803343 	ldbu	r2,205(r2)
  805070:	10803fcc 	andi	r2,r2,255
  805074:	1080201c 	xori	r2,r2,128
  805078:	10bfe004 	addi	r2,r2,-128
  80507c:	10000426 	beq	r2,zero,805090 <logic+0x4880>
    d->_heart2_local__Atrig12 = 0;
  805080:	e0bffc17 	ldw	r2,-16(fp)
  805084:	10001d45 	stb	zero,117(r2)
    d->_heart2_local__Atrig13 = 0;
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	10001d85 	stb	zero,118(r2)
  }
  d->_cg144 = d->_heart2_local__Atrig12 || d->_heart2_local__Atrig13;
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	10801d43 	ldbu	r2,117(r2)
  805098:	10803fcc 	andi	r2,r2,255
  80509c:	1080201c 	xori	r2,r2,128
  8050a0:	10bfe004 	addi	r2,r2,-128
  8050a4:	1000061e 	bne	r2,zero,8050c0 <logic+0x48b0>
  8050a8:	e0bffc17 	ldw	r2,-16(fp)
  8050ac:	10801d83 	ldbu	r2,118(r2)
  8050b0:	10803fcc 	andi	r2,r2,255
  8050b4:	1080201c 	xori	r2,r2,128
  8050b8:	10bfe004 	addi	r2,r2,-128
  8050bc:	10000226 	beq	r2,zero,8050c8 <logic+0x48b8>
  8050c0:	00800044 	movi	r2,1
  8050c4:	00000106 	br	8050cc <logic+0x48bc>
  8050c8:	0005883a 	mov	r2,zero
  8050cc:	1007883a 	mov	r3,r2
  8050d0:	e0bffc17 	ldw	r2,-16(fp)
  8050d4:	10c05345 	stb	r3,333(r2)
  d->_g129 = d->_g125 && !d->_cg144 || d->_g92 && !d->_cg146;
  8050d8:	e0bffc17 	ldw	r2,-16(fp)
  8050dc:	10803343 	ldbu	r2,205(r2)
  8050e0:	10803fcc 	andi	r2,r2,255
  8050e4:	1080201c 	xori	r2,r2,128
  8050e8:	10bfe004 	addi	r2,r2,-128
  8050ec:	10000626 	beq	r2,zero,805108 <logic+0x48f8>
  8050f0:	e0bffc17 	ldw	r2,-16(fp)
  8050f4:	10805343 	ldbu	r2,333(r2)
  8050f8:	10803fcc 	andi	r2,r2,255
  8050fc:	1080201c 	xori	r2,r2,128
  805100:	10bfe004 	addi	r2,r2,-128
  805104:	10000c26 	beq	r2,zero,805138 <logic+0x4928>
  805108:	e0bffc17 	ldw	r2,-16(fp)
  80510c:	10802dc3 	ldbu	r2,183(r2)
  805110:	10803fcc 	andi	r2,r2,255
  805114:	1080201c 	xori	r2,r2,128
  805118:	10bfe004 	addi	r2,r2,-128
  80511c:	10000826 	beq	r2,zero,805140 <logic+0x4930>
  805120:	e0bffc17 	ldw	r2,-16(fp)
  805124:	10805383 	ldbu	r2,334(r2)
  805128:	10803fcc 	andi	r2,r2,255
  80512c:	1080201c 	xori	r2,r2,128
  805130:	10bfe004 	addi	r2,r2,-128
  805134:	1000021e 	bne	r2,zero,805140 <logic+0x4930>
  805138:	00800044 	movi	r2,1
  80513c:	00000106 	br	805144 <logic+0x4934>
  805140:	0005883a 	mov	r2,zero
  805144:	1007883a 	mov	r3,r2
  805148:	e0bffc17 	ldw	r2,-16(fp)
  80514c:	10c03405 	stb	r3,208(r2)
  d->_g134 = d->_g125 || d->_g115 && !d->AS;
  805150:	e0bffc17 	ldw	r2,-16(fp)
  805154:	10803343 	ldbu	r2,205(r2)
  805158:	10803fcc 	andi	r2,r2,255
  80515c:	1080201c 	xori	r2,r2,128
  805160:	10bfe004 	addi	r2,r2,-128
  805164:	10000c1e 	bne	r2,zero,805198 <logic+0x4988>
  805168:	e0bffc17 	ldw	r2,-16(fp)
  80516c:	10803203 	ldbu	r2,200(r2)
  805170:	10803fcc 	andi	r2,r2,255
  805174:	1080201c 	xori	r2,r2,128
  805178:	10bfe004 	addi	r2,r2,-128
  80517c:	10000826 	beq	r2,zero,8051a0 <logic+0x4990>
  805180:	e0bffc17 	ldw	r2,-16(fp)
  805184:	10801703 	ldbu	r2,92(r2)
  805188:	10803fcc 	andi	r2,r2,255
  80518c:	1080201c 	xori	r2,r2,128
  805190:	10bfe004 	addi	r2,r2,-128
  805194:	1000021e 	bne	r2,zero,8051a0 <logic+0x4990>
  805198:	00800044 	movi	r2,1
  80519c:	00000106 	br	8051a4 <logic+0x4994>
  8051a0:	0005883a 	mov	r2,zero
  8051a4:	1007883a 	mov	r3,r2
  8051a8:	e0bffc17 	ldw	r2,-16(fp)
  8051ac:	10c03505 	stb	r3,212(r2)
  d->_g131 = d->_pg179;
  8051b0:	e0bffc17 	ldw	r2,-16(fp)
  8051b4:	10c06a03 	ldbu	r3,424(r2)
  8051b8:	e0bffc17 	ldw	r2,-16(fp)
  8051bc:	10c03485 	stb	r3,210(r2)
  if (d->_g131) {
  8051c0:	e0bffc17 	ldw	r2,-16(fp)
  8051c4:	10803483 	ldbu	r2,210(r2)
  8051c8:	10803fcc 	andi	r2,r2,255
  8051cc:	1080201c 	xori	r2,r2,128
  8051d0:	10bfe004 	addi	r2,r2,-128
  8051d4:	10001226 	beq	r2,zero,805220 <logic+0x4a10>
    d->_region4_null_AEI += d->deltaT;
  8051d8:	e13ffc17 	ldw	r4,-16(fp)
  8051dc:	20800f17 	ldw	r2,60(r4)
  8051e0:	20c01017 	ldw	r3,64(r4)
  8051e4:	e1bffc17 	ldw	r6,-16(fp)
  8051e8:	31001317 	ldw	r4,76(r6)
  8051ec:	31401417 	ldw	r5,80(r6)
  8051f0:	200d883a 	mov	r6,r4
  8051f4:	280f883a 	mov	r7,r5
  8051f8:	1009883a 	mov	r4,r2
  8051fc:	180b883a 	mov	r5,r3
  805200:	080789c0 	call	80789c <__adddf3>
  805204:	1009883a 	mov	r4,r2
  805208:	180b883a 	mov	r5,r3
  80520c:	2005883a 	mov	r2,r4
  805210:	2807883a 	mov	r3,r5
  805214:	e13ffc17 	ldw	r4,-16(fp)
  805218:	20800f15 	stw	r2,60(r4)
  80521c:	20c01015 	stw	r3,64(r4)
  }
  d->_g119 = !d->_g131;
  805220:	e0bffc17 	ldw	r2,-16(fp)
  805224:	10803483 	ldbu	r2,210(r2)
  805228:	10803fcc 	andi	r2,r2,255
  80522c:	1080201c 	xori	r2,r2,128
  805230:	10bfe004 	addi	r2,r2,-128
  805234:	1005003a 	cmpeq	r2,r2,zero
  805238:	1007883a 	mov	r3,r2
  80523c:	e0bffc17 	ldw	r2,-16(fp)
  805240:	10c03285 	stb	r3,202(r2)
  d->_g140 = d->_pg181_e3;
  805244:	e0bffc17 	ldw	r2,-16(fp)
  805248:	10c06a43 	ldbu	r3,425(r2)
  80524c:	e0bffc17 	ldw	r2,-16(fp)
  805250:	10c03605 	stb	r3,216(r2)
  d->_cg193 = d->v;
  805254:	e0bffc17 	ldw	r2,-16(fp)
  805258:	10c018c3 	ldbu	r3,99(r2)
  80525c:	e0bffc17 	ldw	r2,-16(fp)
  805260:	10c057c5 	stb	r3,351(r2)
  d->_g155 = d->_g140 && d->_cg193;
  805264:	e0bffc17 	ldw	r2,-16(fp)
  805268:	10803603 	ldbu	r2,216(r2)
  80526c:	10803fcc 	andi	r2,r2,255
  805270:	1080201c 	xori	r2,r2,128
  805274:	10bfe004 	addi	r2,r2,-128
  805278:	10000826 	beq	r2,zero,80529c <logic+0x4a8c>
  80527c:	e0bffc17 	ldw	r2,-16(fp)
  805280:	108057c3 	ldbu	r2,351(r2)
  805284:	10803fcc 	andi	r2,r2,255
  805288:	1080201c 	xori	r2,r2,128
  80528c:	10bfe004 	addi	r2,r2,-128
  805290:	10000226 	beq	r2,zero,80529c <logic+0x4a8c>
  805294:	00800044 	movi	r2,1
  805298:	00000106 	br	8052a0 <logic+0x4a90>
  80529c:	0005883a 	mov	r2,zero
  8052a0:	1007883a 	mov	r3,r2
  8052a4:	e0bffc17 	ldw	r2,-16(fp)
  8052a8:	10c038c5 	stb	r3,227(r2)
  if (d->_g155) {
  8052ac:	e0bffc17 	ldw	r2,-16(fp)
  8052b0:	108038c3 	ldbu	r2,227(r2)
  8052b4:	10803fcc 	andi	r2,r2,255
  8052b8:	1080201c 	xori	r2,r2,128
  8052bc:	10bfe004 	addi	r2,r2,-128
  8052c0:	10000326 	beq	r2,zero,8052d0 <logic+0x4ac0>
    d->_heart2_local__Atrig16 = 1;
  8052c4:	e0bffc17 	ldw	r2,-16(fp)
  8052c8:	00c00044 	movi	r3,1
  8052cc:	10c01e45 	stb	r3,121(r2)
  }
  d->_cg189 = d->_heart2_local__Atrig16;
  8052d0:	e0bffc17 	ldw	r2,-16(fp)
  8052d4:	10c01e43 	ldbu	r3,121(r2)
  8052d8:	e0bffc17 	ldw	r2,-16(fp)
  8052dc:	10c05785 	stb	r3,350(r2)
  d->_g157 = d->_g131 && d->_cg189;
  8052e0:	e0bffc17 	ldw	r2,-16(fp)
  8052e4:	10803483 	ldbu	r2,210(r2)
  8052e8:	10803fcc 	andi	r2,r2,255
  8052ec:	1080201c 	xori	r2,r2,128
  8052f0:	10bfe004 	addi	r2,r2,-128
  8052f4:	10000826 	beq	r2,zero,805318 <logic+0x4b08>
  8052f8:	e0bffc17 	ldw	r2,-16(fp)
  8052fc:	10805783 	ldbu	r2,350(r2)
  805300:	10803fcc 	andi	r2,r2,255
  805304:	1080201c 	xori	r2,r2,128
  805308:	10bfe004 	addi	r2,r2,-128
  80530c:	10000226 	beq	r2,zero,805318 <logic+0x4b08>
  805310:	00800044 	movi	r2,1
  805314:	00000106 	br	80531c <logic+0x4b0c>
  805318:	0005883a 	mov	r2,zero
  80531c:	1007883a 	mov	r3,r2
  805320:	e0bffc17 	ldw	r2,-16(fp)
  805324:	10c03945 	stb	r3,229(r2)
  d->_g142 = !d->_g140;
  805328:	e0bffc17 	ldw	r2,-16(fp)
  80532c:	10803603 	ldbu	r2,216(r2)
  805330:	10803fcc 	andi	r2,r2,255
  805334:	1080201c 	xori	r2,r2,128
  805338:	10bfe004 	addi	r2,r2,-128
  80533c:	1005003a 	cmpeq	r2,r2,zero
  805340:	1007883a 	mov	r3,r2
  805344:	e0bffc17 	ldw	r2,-16(fp)
  805348:	10c03685 	stb	r3,218(r2)
  d->_g146 = (d->_g119 || d->_g157) && (d->_g142 || d->_g155) && (d->_g157 || d->_g155);
  80534c:	e0bffc17 	ldw	r2,-16(fp)
  805350:	10803283 	ldbu	r2,202(r2)
  805354:	10803fcc 	andi	r2,r2,255
  805358:	1080201c 	xori	r2,r2,128
  80535c:	10bfe004 	addi	r2,r2,-128
  805360:	1000061e 	bne	r2,zero,80537c <logic+0x4b6c>
  805364:	e0bffc17 	ldw	r2,-16(fp)
  805368:	10803943 	ldbu	r2,229(r2)
  80536c:	10803fcc 	andi	r2,r2,255
  805370:	1080201c 	xori	r2,r2,128
  805374:	10bfe004 	addi	r2,r2,-128
  805378:	10001a26 	beq	r2,zero,8053e4 <logic+0x4bd4>
  80537c:	e0bffc17 	ldw	r2,-16(fp)
  805380:	10803683 	ldbu	r2,218(r2)
  805384:	10803fcc 	andi	r2,r2,255
  805388:	1080201c 	xori	r2,r2,128
  80538c:	10bfe004 	addi	r2,r2,-128
  805390:	1000061e 	bne	r2,zero,8053ac <logic+0x4b9c>
  805394:	e0bffc17 	ldw	r2,-16(fp)
  805398:	108038c3 	ldbu	r2,227(r2)
  80539c:	10803fcc 	andi	r2,r2,255
  8053a0:	1080201c 	xori	r2,r2,128
  8053a4:	10bfe004 	addi	r2,r2,-128
  8053a8:	10000e26 	beq	r2,zero,8053e4 <logic+0x4bd4>
  8053ac:	e0bffc17 	ldw	r2,-16(fp)
  8053b0:	10803943 	ldbu	r2,229(r2)
  8053b4:	10803fcc 	andi	r2,r2,255
  8053b8:	1080201c 	xori	r2,r2,128
  8053bc:	10bfe004 	addi	r2,r2,-128
  8053c0:	1000061e 	bne	r2,zero,8053dc <logic+0x4bcc>
  8053c4:	e0bffc17 	ldw	r2,-16(fp)
  8053c8:	108038c3 	ldbu	r2,227(r2)
  8053cc:	10803fcc 	andi	r2,r2,255
  8053d0:	1080201c 	xori	r2,r2,128
  8053d4:	10bfe004 	addi	r2,r2,-128
  8053d8:	10000226 	beq	r2,zero,8053e4 <logic+0x4bd4>
  8053dc:	00800044 	movi	r2,1
  8053e0:	00000106 	br	8053e8 <logic+0x4bd8>
  8053e4:	0005883a 	mov	r2,zero
  8053e8:	1007883a 	mov	r3,r2
  8053ec:	e0bffc17 	ldw	r2,-16(fp)
  8053f0:	10c03705 	stb	r3,220(r2)
  if (d->_g146) {
  8053f4:	e0bffc17 	ldw	r2,-16(fp)
  8053f8:	10803703 	ldbu	r2,220(r2)
  8053fc:	10803fcc 	andi	r2,r2,255
  805400:	1080201c 	xori	r2,r2,128
  805404:	10bfe004 	addi	r2,r2,-128
  805408:	10000326 	beq	r2,zero,805418 <logic+0x4c08>
    d->_region4_null_AEI = 0;
  80540c:	e0bffc17 	ldw	r2,-16(fp)
  805410:	10000f15 	stw	zero,60(r2)
  805414:	10001015 	stw	zero,64(r2)
  }
  d->_g153 = d->_GO || d->_g146;
  805418:	e0bffc17 	ldw	r2,-16(fp)
  80541c:	10804543 	ldbu	r2,277(r2)
  805420:	10803fcc 	andi	r2,r2,255
  805424:	1080201c 	xori	r2,r2,128
  805428:	10bfe004 	addi	r2,r2,-128
  80542c:	1000061e 	bne	r2,zero,805448 <logic+0x4c38>
  805430:	e0bffc17 	ldw	r2,-16(fp)
  805434:	10803703 	ldbu	r2,220(r2)
  805438:	10803fcc 	andi	r2,r2,255
  80543c:	1080201c 	xori	r2,r2,128
  805440:	10bfe004 	addi	r2,r2,-128
  805444:	10000226 	beq	r2,zero,805450 <logic+0x4c40>
  805448:	00800044 	movi	r2,1
  80544c:	00000106 	br	805454 <logic+0x4c44>
  805450:	0005883a 	mov	r2,zero
  805454:	1007883a 	mov	r3,r2
  805458:	e0bffc17 	ldw	r2,-16(fp)
  80545c:	10c03845 	stb	r3,225(r2)
  if (d->_g153) {
  805460:	e0bffc17 	ldw	r2,-16(fp)
  805464:	10803843 	ldbu	r2,225(r2)
  805468:	10803fcc 	andi	r2,r2,255
  80546c:	1080201c 	xori	r2,r2,128
  805470:	10bfe004 	addi	r2,r2,-128
  805474:	10000426 	beq	r2,zero,805488 <logic+0x4c78>
    d->_heart2_local__Atrig14 = 0;
  805478:	e0bffc17 	ldw	r2,-16(fp)
  80547c:	10001dc5 	stb	zero,119(r2)
    d->_heart2_local__Atrig15 = 0;
  805480:	e0bffc17 	ldw	r2,-16(fp)
  805484:	10001e05 	stb	zero,120(r2)
  }
  d->_cg162 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805488:	e0bffc17 	ldw	r2,-16(fp)
  80548c:	10801dc3 	ldbu	r2,119(r2)
  805490:	10803fcc 	andi	r2,r2,255
  805494:	1080201c 	xori	r2,r2,128
  805498:	10bfe004 	addi	r2,r2,-128
  80549c:	1000061e 	bne	r2,zero,8054b8 <logic+0x4ca8>
  8054a0:	e0bffc17 	ldw	r2,-16(fp)
  8054a4:	10801e03 	ldbu	r2,120(r2)
  8054a8:	10803fcc 	andi	r2,r2,255
  8054ac:	1080201c 	xori	r2,r2,128
  8054b0:	10bfe004 	addi	r2,r2,-128
  8054b4:	10000226 	beq	r2,zero,8054c0 <logic+0x4cb0>
  8054b8:	00800044 	movi	r2,1
  8054bc:	00000106 	br	8054c4 <logic+0x4cb4>
  8054c0:	0005883a 	mov	r2,zero
  8054c4:	1007883a 	mov	r3,r2
  8054c8:	e0bffc17 	ldw	r2,-16(fp)
  8054cc:	10c05485 	stb	r3,338(r2)
  d->_g143 = d->_pg195;
  8054d0:	e0bffc17 	ldw	r2,-16(fp)
  8054d4:	10c06a83 	ldbu	r3,426(r2)
  8054d8:	e0bffc17 	ldw	r2,-16(fp)
  8054dc:	10c036c5 	stb	r3,219(r2)
  if (d->_g143) {
  8054e0:	e0bffc17 	ldw	r2,-16(fp)
  8054e4:	108036c3 	ldbu	r2,219(r2)
  8054e8:	10803fcc 	andi	r2,r2,255
  8054ec:	1080201c 	xori	r2,r2,128
  8054f0:	10bfe004 	addi	r2,r2,-128
  8054f4:	10001226 	beq	r2,zero,805540 <logic+0x4d30>
    d->_region4_null_AEI += d->deltaT;
  8054f8:	e13ffc17 	ldw	r4,-16(fp)
  8054fc:	20800f17 	ldw	r2,60(r4)
  805500:	20c01017 	ldw	r3,64(r4)
  805504:	e1bffc17 	ldw	r6,-16(fp)
  805508:	31001317 	ldw	r4,76(r6)
  80550c:	31401417 	ldw	r5,80(r6)
  805510:	200d883a 	mov	r6,r4
  805514:	280f883a 	mov	r7,r5
  805518:	1009883a 	mov	r4,r2
  80551c:	180b883a 	mov	r5,r3
  805520:	080789c0 	call	80789c <__adddf3>
  805524:	1009883a 	mov	r4,r2
  805528:	180b883a 	mov	r5,r3
  80552c:	2005883a 	mov	r2,r4
  805530:	2807883a 	mov	r3,r5
  805534:	e13ffc17 	ldw	r4,-16(fp)
  805538:	20800f15 	stw	r2,60(r4)
  80553c:	20c01015 	stw	r3,64(r4)
  }
  d->_g190_e1 = d->_pg173;
  805540:	e0bffc17 	ldw	r2,-16(fp)
  805544:	10c06ac3 	ldbu	r3,427(r2)
  805548:	e0bffc17 	ldw	r2,-16(fp)
  80554c:	10c061c5 	stb	r3,391(r2)
  d->_cg179 = d->_region4_null_AEI >= d->AEI_time;
  805550:	e0bffc17 	ldw	r2,-16(fp)
  805554:	14000f17 	ldw	r16,60(r2)
  805558:	14401017 	ldw	r17,64(r2)
  80555c:	e0bffc17 	ldw	r2,-16(fp)
  805560:	10800417 	ldw	r2,16(r2)
  805564:	1009883a 	mov	r4,r2
  805568:	0808c140 	call	808c14 <__floatsidf>
  80556c:	1009883a 	mov	r4,r2
  805570:	180b883a 	mov	r5,r3
  805574:	04800044 	movi	r18,1
  805578:	200d883a 	mov	r6,r4
  80557c:	280f883a 	mov	r7,r5
  805580:	8009883a 	mov	r4,r16
  805584:	880b883a 	mov	r5,r17
  805588:	08081480 	call	808148 <__gedf2>
  80558c:	1000010e 	bge	r2,zero,805594 <logic+0x4d84>
  805590:	0025883a 	mov	r18,zero
  805594:	9007883a 	mov	r3,r18
  805598:	e0bffc17 	ldw	r2,-16(fp)
  80559c:	10c056c5 	stb	r3,347(r2)
  d->_g190 = d->_g190_e1 && d->_cg179;
  8055a0:	e0bffc17 	ldw	r2,-16(fp)
  8055a4:	108061c3 	ldbu	r2,391(r2)
  8055a8:	10803fcc 	andi	r2,r2,255
  8055ac:	1080201c 	xori	r2,r2,128
  8055b0:	10bfe004 	addi	r2,r2,-128
  8055b4:	10000826 	beq	r2,zero,8055d8 <logic+0x4dc8>
  8055b8:	e0bffc17 	ldw	r2,-16(fp)
  8055bc:	108056c3 	ldbu	r2,347(r2)
  8055c0:	10803fcc 	andi	r2,r2,255
  8055c4:	1080201c 	xori	r2,r2,128
  8055c8:	10bfe004 	addi	r2,r2,-128
  8055cc:	10000226 	beq	r2,zero,8055d8 <logic+0x4dc8>
  8055d0:	00800044 	movi	r2,1
  8055d4:	00000106 	br	8055dc <logic+0x4dcc>
  8055d8:	0005883a 	mov	r2,zero
  8055dc:	1007883a 	mov	r3,r2
  8055e0:	e0bffc17 	ldw	r2,-16(fp)
  8055e4:	10c03ec5 	stb	r3,251(r2)
  if (d->_g190) {
  8055e8:	e0bffc17 	ldw	r2,-16(fp)
  8055ec:	10803ec3 	ldbu	r2,251(r2)
  8055f0:	10803fcc 	andi	r2,r2,255
  8055f4:	1080201c 	xori	r2,r2,128
  8055f8:	10bfe004 	addi	r2,r2,-128
  8055fc:	10000326 	beq	r2,zero,80560c <logic+0x4dfc>
    d->_heart2_local__Atrig14 = 1;
  805600:	e0bffc17 	ldw	r2,-16(fp)
  805604:	00c00044 	movi	r3,1
  805608:	10c01dc5 	stb	r3,119(r2)
  }
  d->_g194_e2 = d->_g190_e1 && !d->_cg179;
  80560c:	e0bffc17 	ldw	r2,-16(fp)
  805610:	108061c3 	ldbu	r2,391(r2)
  805614:	10803fcc 	andi	r2,r2,255
  805618:	1080201c 	xori	r2,r2,128
  80561c:	10bfe004 	addi	r2,r2,-128
  805620:	10000826 	beq	r2,zero,805644 <logic+0x4e34>
  805624:	e0bffc17 	ldw	r2,-16(fp)
  805628:	108056c3 	ldbu	r2,347(r2)
  80562c:	10803fcc 	andi	r2,r2,255
  805630:	1080201c 	xori	r2,r2,128
  805634:	10bfe004 	addi	r2,r2,-128
  805638:	1000021e 	bne	r2,zero,805644 <logic+0x4e34>
  80563c:	00800044 	movi	r2,1
  805640:	00000106 	br	805648 <logic+0x4e38>
  805644:	0005883a 	mov	r2,zero
  805648:	1007883a 	mov	r3,r2
  80564c:	e0bffc17 	ldw	r2,-16(fp)
  805650:	10c06205 	stb	r3,392(r2)
  d->_cg182 = d->a;
  805654:	e0bffc17 	ldw	r2,-16(fp)
  805658:	10c01883 	ldbu	r3,98(r2)
  80565c:	e0bffc17 	ldw	r2,-16(fp)
  805660:	10c05685 	stb	r3,346(r2)
  d->_g194 = d->_g194_e2 && d->_cg182;
  805664:	e0bffc17 	ldw	r2,-16(fp)
  805668:	10806203 	ldbu	r2,392(r2)
  80566c:	10803fcc 	andi	r2,r2,255
  805670:	1080201c 	xori	r2,r2,128
  805674:	10bfe004 	addi	r2,r2,-128
  805678:	10000826 	beq	r2,zero,80569c <logic+0x4e8c>
  80567c:	e0bffc17 	ldw	r2,-16(fp)
  805680:	10805683 	ldbu	r2,346(r2)
  805684:	10803fcc 	andi	r2,r2,255
  805688:	1080201c 	xori	r2,r2,128
  80568c:	10bfe004 	addi	r2,r2,-128
  805690:	10000226 	beq	r2,zero,80569c <logic+0x4e8c>
  805694:	00800044 	movi	r2,1
  805698:	00000106 	br	8056a0 <logic+0x4e90>
  80569c:	0005883a 	mov	r2,zero
  8056a0:	1007883a 	mov	r3,r2
  8056a4:	e0bffc17 	ldw	r2,-16(fp)
  8056a8:	10c03f45 	stb	r3,253(r2)
  if (d->_g194) {
  8056ac:	e0bffc17 	ldw	r2,-16(fp)
  8056b0:	10803f43 	ldbu	r2,253(r2)
  8056b4:	10803fcc 	andi	r2,r2,255
  8056b8:	1080201c 	xori	r2,r2,128
  8056bc:	10bfe004 	addi	r2,r2,-128
  8056c0:	10000326 	beq	r2,zero,8056d0 <logic+0x4ec0>
    d->_heart2_local__Atrig15 = 1;
  8056c4:	e0bffc17 	ldw	r2,-16(fp)
  8056c8:	00c00044 	movi	r3,1
  8056cc:	10c01e05 	stb	r3,120(r2)
  }
  d->_cg164 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  8056d0:	e0bffc17 	ldw	r2,-16(fp)
  8056d4:	10801dc3 	ldbu	r2,119(r2)
  8056d8:	10803fcc 	andi	r2,r2,255
  8056dc:	1080201c 	xori	r2,r2,128
  8056e0:	10bfe004 	addi	r2,r2,-128
  8056e4:	1000061e 	bne	r2,zero,805700 <logic+0x4ef0>
  8056e8:	e0bffc17 	ldw	r2,-16(fp)
  8056ec:	10801e03 	ldbu	r2,120(r2)
  8056f0:	10803fcc 	andi	r2,r2,255
  8056f4:	1080201c 	xori	r2,r2,128
  8056f8:	10bfe004 	addi	r2,r2,-128
  8056fc:	10000226 	beq	r2,zero,805708 <logic+0x4ef8>
  805700:	00800044 	movi	r2,1
  805704:	00000106 	br	80570c <logic+0x4efc>
  805708:	0005883a 	mov	r2,zero
  80570c:	1007883a 	mov	r3,r2
  805710:	e0bffc17 	ldw	r2,-16(fp)
  805714:	10c054c5 	stb	r3,339(r2)
  d->_g195 = d->_g153 && !d->_cg162 || d->_g143 && !d->_cg164;
  805718:	e0bffc17 	ldw	r2,-16(fp)
  80571c:	10803843 	ldbu	r2,225(r2)
  805720:	10803fcc 	andi	r2,r2,255
  805724:	1080201c 	xori	r2,r2,128
  805728:	10bfe004 	addi	r2,r2,-128
  80572c:	10000626 	beq	r2,zero,805748 <logic+0x4f38>
  805730:	e0bffc17 	ldw	r2,-16(fp)
  805734:	10805483 	ldbu	r2,338(r2)
  805738:	10803fcc 	andi	r2,r2,255
  80573c:	1080201c 	xori	r2,r2,128
  805740:	10bfe004 	addi	r2,r2,-128
  805744:	10000c26 	beq	r2,zero,805778 <logic+0x4f68>
  805748:	e0bffc17 	ldw	r2,-16(fp)
  80574c:	108036c3 	ldbu	r2,219(r2)
  805750:	10803fcc 	andi	r2,r2,255
  805754:	1080201c 	xori	r2,r2,128
  805758:	10bfe004 	addi	r2,r2,-128
  80575c:	10000826 	beq	r2,zero,805780 <logic+0x4f70>
  805760:	e0bffc17 	ldw	r2,-16(fp)
  805764:	108054c3 	ldbu	r2,339(r2)
  805768:	10803fcc 	andi	r2,r2,255
  80576c:	1080201c 	xori	r2,r2,128
  805770:	10bfe004 	addi	r2,r2,-128
  805774:	1000021e 	bne	r2,zero,805780 <logic+0x4f70>
  805778:	00800044 	movi	r2,1
  80577c:	00000106 	br	805784 <logic+0x4f74>
  805780:	0005883a 	mov	r2,zero
  805784:	1007883a 	mov	r3,r2
  805788:	e0bffc17 	ldw	r2,-16(fp)
  80578c:	10c03f85 	stb	r3,254(r2)
  d->_g165 = d->_g143 && d->_cg164;
  805790:	e0bffc17 	ldw	r2,-16(fp)
  805794:	108036c3 	ldbu	r2,219(r2)
  805798:	10803fcc 	andi	r2,r2,255
  80579c:	1080201c 	xori	r2,r2,128
  8057a0:	10bfe004 	addi	r2,r2,-128
  8057a4:	10000826 	beq	r2,zero,8057c8 <logic+0x4fb8>
  8057a8:	e0bffc17 	ldw	r2,-16(fp)
  8057ac:	108054c3 	ldbu	r2,339(r2)
  8057b0:	10803fcc 	andi	r2,r2,255
  8057b4:	1080201c 	xori	r2,r2,128
  8057b8:	10bfe004 	addi	r2,r2,-128
  8057bc:	10000226 	beq	r2,zero,8057c8 <logic+0x4fb8>
  8057c0:	00800044 	movi	r2,1
  8057c4:	00000106 	br	8057cc <logic+0x4fbc>
  8057c8:	0005883a 	mov	r2,zero
  8057cc:	1007883a 	mov	r3,r2
  8057d0:	e0bffc17 	ldw	r2,-16(fp)
  8057d4:	10c03a45 	stb	r3,233(r2)
  d->_cg166 = d->_region4_null_AEI < d->AEI_time;
  8057d8:	e0bffc17 	ldw	r2,-16(fp)
  8057dc:	14000f17 	ldw	r16,60(r2)
  8057e0:	14401017 	ldw	r17,64(r2)
  8057e4:	e0bffc17 	ldw	r2,-16(fp)
  8057e8:	10800417 	ldw	r2,16(r2)
  8057ec:	1009883a 	mov	r4,r2
  8057f0:	0808c140 	call	808c14 <__floatsidf>
  8057f4:	1009883a 	mov	r4,r2
  8057f8:	180b883a 	mov	r5,r3
  8057fc:	04800044 	movi	r18,1
  805800:	200d883a 	mov	r6,r4
  805804:	280f883a 	mov	r7,r5
  805808:	8009883a 	mov	r4,r16
  80580c:	880b883a 	mov	r5,r17
  805810:	08082240 	call	808224 <__ledf2>
  805814:	10000116 	blt	r2,zero,80581c <logic+0x500c>
  805818:	0025883a 	mov	r18,zero
  80581c:	9007883a 	mov	r3,r18
  805820:	e0bffc17 	ldw	r2,-16(fp)
  805824:	10c05505 	stb	r3,340(r2)
  d->_g167 = d->_g153 && d->_cg166;
  805828:	e0bffc17 	ldw	r2,-16(fp)
  80582c:	10803843 	ldbu	r2,225(r2)
  805830:	10803fcc 	andi	r2,r2,255
  805834:	1080201c 	xori	r2,r2,128
  805838:	10bfe004 	addi	r2,r2,-128
  80583c:	10000826 	beq	r2,zero,805860 <logic+0x5050>
  805840:	e0bffc17 	ldw	r2,-16(fp)
  805844:	10805503 	ldbu	r2,340(r2)
  805848:	10803fcc 	andi	r2,r2,255
  80584c:	1080201c 	xori	r2,r2,128
  805850:	10bfe004 	addi	r2,r2,-128
  805854:	10000226 	beq	r2,zero,805860 <logic+0x5050>
  805858:	00800044 	movi	r2,1
  80585c:	00000106 	br	805864 <logic+0x5054>
  805860:	0005883a 	mov	r2,zero
  805864:	1007883a 	mov	r3,r2
  805868:	e0bffc17 	ldw	r2,-16(fp)
  80586c:	10c03a85 	stb	r3,234(r2)
  if (d->_g167) {
  805870:	e0bffc17 	ldw	r2,-16(fp)
  805874:	10803a83 	ldbu	r2,234(r2)
  805878:	10803fcc 	andi	r2,r2,255
  80587c:	1080201c 	xori	r2,r2,128
  805880:	10bfe004 	addi	r2,r2,-128
  805884:	10003426 	beq	r2,zero,805958 <logic+0x5148>
    d->sleepT = (d->sleepT < (d->AEI_time - d->_region4_null_AEI)) ? d->sleepT : (d->AEI_time - d->_region4_null_AEI);
  805888:	e0bffc17 	ldw	r2,-16(fp)
  80588c:	14001517 	ldw	r16,84(r2)
  805890:	14401617 	ldw	r17,88(r2)
  805894:	e0bffc17 	ldw	r2,-16(fp)
  805898:	10800417 	ldw	r2,16(r2)
  80589c:	1009883a 	mov	r4,r2
  8058a0:	0808c140 	call	808c14 <__floatsidf>
  8058a4:	1011883a 	mov	r8,r2
  8058a8:	1813883a 	mov	r9,r3
  8058ac:	e13ffc17 	ldw	r4,-16(fp)
  8058b0:	20800f17 	ldw	r2,60(r4)
  8058b4:	20c01017 	ldw	r3,64(r4)
  8058b8:	100d883a 	mov	r6,r2
  8058bc:	180f883a 	mov	r7,r3
  8058c0:	4009883a 	mov	r4,r8
  8058c4:	480b883a 	mov	r5,r9
  8058c8:	08083180 	call	808318 <__subdf3>
  8058cc:	1009883a 	mov	r4,r2
  8058d0:	180b883a 	mov	r5,r3
  8058d4:	2005883a 	mov	r2,r4
  8058d8:	2807883a 	mov	r3,r5
  8058dc:	100d883a 	mov	r6,r2
  8058e0:	180f883a 	mov	r7,r3
  8058e4:	8009883a 	mov	r4,r16
  8058e8:	880b883a 	mov	r5,r17
  8058ec:	08082240 	call	808224 <__ledf2>
  8058f0:	1000040e 	bge	r2,zero,805904 <logic+0x50f4>
  8058f4:	e13ffc17 	ldw	r4,-16(fp)
  8058f8:	20801517 	ldw	r2,84(r4)
  8058fc:	20c01617 	ldw	r3,88(r4)
  805900:	00001206 	br	80594c <logic+0x513c>
  805904:	e0bffc17 	ldw	r2,-16(fp)
  805908:	10800417 	ldw	r2,16(r2)
  80590c:	1009883a 	mov	r4,r2
  805910:	0808c140 	call	808c14 <__floatsidf>
  805914:	1011883a 	mov	r8,r2
  805918:	1813883a 	mov	r9,r3
  80591c:	e13ffc17 	ldw	r4,-16(fp)
  805920:	20800f17 	ldw	r2,60(r4)
  805924:	20c01017 	ldw	r3,64(r4)
  805928:	100d883a 	mov	r6,r2
  80592c:	180f883a 	mov	r7,r3
  805930:	4009883a 	mov	r4,r8
  805934:	480b883a 	mov	r5,r9
  805938:	08083180 	call	808318 <__subdf3>
  80593c:	1009883a 	mov	r4,r2
  805940:	180b883a 	mov	r5,r3
  805944:	2005883a 	mov	r2,r4
  805948:	2807883a 	mov	r3,r5
  80594c:	e13ffc17 	ldw	r4,-16(fp)
  805950:	20801515 	stw	r2,84(r4)
  805954:	20c01615 	stw	r3,88(r4)
  }
  d->_cg167 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805958:	e0bffc17 	ldw	r2,-16(fp)
  80595c:	10801dc3 	ldbu	r2,119(r2)
  805960:	10803fcc 	andi	r2,r2,255
  805964:	1080201c 	xori	r2,r2,128
  805968:	10bfe004 	addi	r2,r2,-128
  80596c:	1000061e 	bne	r2,zero,805988 <logic+0x5178>
  805970:	e0bffc17 	ldw	r2,-16(fp)
  805974:	10801e03 	ldbu	r2,120(r2)
  805978:	10803fcc 	andi	r2,r2,255
  80597c:	1080201c 	xori	r2,r2,128
  805980:	10bfe004 	addi	r2,r2,-128
  805984:	10000226 	beq	r2,zero,805990 <logic+0x5180>
  805988:	00800044 	movi	r2,1
  80598c:	00000106 	br	805994 <logic+0x5184>
  805990:	0005883a 	mov	r2,zero
  805994:	1007883a 	mov	r3,r2
  805998:	e0bffc17 	ldw	r2,-16(fp)
  80599c:	10c05545 	stb	r3,341(r2)
  d->_g169 = d->_pg167;
  8059a0:	e0bffc17 	ldw	r2,-16(fp)
  8059a4:	10c06b03 	ldbu	r3,428(r2)
  8059a8:	e0bffc17 	ldw	r2,-16(fp)
  8059ac:	10c03ac5 	stb	r3,235(r2)
  d->_g175 = d->_pg176;
  8059b0:	e0bffc17 	ldw	r2,-16(fp)
  8059b4:	10c06b43 	ldbu	r3,429(r2)
  8059b8:	e0bffc17 	ldw	r2,-16(fp)
  8059bc:	10c03c05 	stb	r3,240(r2)
  d->_g170 = d->_g169 || d->_g175;
  8059c0:	e0bffc17 	ldw	r2,-16(fp)
  8059c4:	10803ac3 	ldbu	r2,235(r2)
  8059c8:	10803fcc 	andi	r2,r2,255
  8059cc:	1080201c 	xori	r2,r2,128
  8059d0:	10bfe004 	addi	r2,r2,-128
  8059d4:	1000061e 	bne	r2,zero,8059f0 <logic+0x51e0>
  8059d8:	e0bffc17 	ldw	r2,-16(fp)
  8059dc:	10803c03 	ldbu	r2,240(r2)
  8059e0:	10803fcc 	andi	r2,r2,255
  8059e4:	1080201c 	xori	r2,r2,128
  8059e8:	10bfe004 	addi	r2,r2,-128
  8059ec:	10000226 	beq	r2,zero,8059f8 <logic+0x51e8>
  8059f0:	00800044 	movi	r2,1
  8059f4:	00000106 	br	8059fc <logic+0x51ec>
  8059f8:	0005883a 	mov	r2,zero
  8059fc:	1007883a 	mov	r3,r2
  805a00:	e0bffc17 	ldw	r2,-16(fp)
  805a04:	10c03b05 	stb	r3,236(r2)
  d->_cg170 = d->_region4_null_AEI < d->AEI_time;
  805a08:	e0bffc17 	ldw	r2,-16(fp)
  805a0c:	14000f17 	ldw	r16,60(r2)
  805a10:	14401017 	ldw	r17,64(r2)
  805a14:	e0bffc17 	ldw	r2,-16(fp)
  805a18:	10800417 	ldw	r2,16(r2)
  805a1c:	1009883a 	mov	r4,r2
  805a20:	0808c140 	call	808c14 <__floatsidf>
  805a24:	1009883a 	mov	r4,r2
  805a28:	180b883a 	mov	r5,r3
  805a2c:	04800044 	movi	r18,1
  805a30:	200d883a 	mov	r6,r4
  805a34:	280f883a 	mov	r7,r5
  805a38:	8009883a 	mov	r4,r16
  805a3c:	880b883a 	mov	r5,r17
  805a40:	08082240 	call	808224 <__ledf2>
  805a44:	10000116 	blt	r2,zero,805a4c <logic+0x523c>
  805a48:	0025883a 	mov	r18,zero
  805a4c:	9007883a 	mov	r3,r18
  805a50:	e0bffc17 	ldw	r2,-16(fp)
  805a54:	10c055c5 	stb	r3,343(r2)
  d->_g171 = d->_g170 && d->_cg170;
  805a58:	e0bffc17 	ldw	r2,-16(fp)
  805a5c:	10803b03 	ldbu	r2,236(r2)
  805a60:	10803fcc 	andi	r2,r2,255
  805a64:	1080201c 	xori	r2,r2,128
  805a68:	10bfe004 	addi	r2,r2,-128
  805a6c:	10000826 	beq	r2,zero,805a90 <logic+0x5280>
  805a70:	e0bffc17 	ldw	r2,-16(fp)
  805a74:	108055c3 	ldbu	r2,343(r2)
  805a78:	10803fcc 	andi	r2,r2,255
  805a7c:	1080201c 	xori	r2,r2,128
  805a80:	10bfe004 	addi	r2,r2,-128
  805a84:	10000226 	beq	r2,zero,805a90 <logic+0x5280>
  805a88:	00800044 	movi	r2,1
  805a8c:	00000106 	br	805a94 <logic+0x5284>
  805a90:	0005883a 	mov	r2,zero
  805a94:	1007883a 	mov	r3,r2
  805a98:	e0bffc17 	ldw	r2,-16(fp)
  805a9c:	10c03b45 	stb	r3,237(r2)
  if (d->_g171) {
  805aa0:	e0bffc17 	ldw	r2,-16(fp)
  805aa4:	10803b43 	ldbu	r2,237(r2)
  805aa8:	10803fcc 	andi	r2,r2,255
  805aac:	1080201c 	xori	r2,r2,128
  805ab0:	10bfe004 	addi	r2,r2,-128
  805ab4:	10003426 	beq	r2,zero,805b88 <logic+0x5378>
    d->sleepT = (d->sleepT < (d->AEI_time - d->_region4_null_AEI)) ? d->sleepT : (d->AEI_time - d->_region4_null_AEI);
  805ab8:	e0bffc17 	ldw	r2,-16(fp)
  805abc:	14001517 	ldw	r16,84(r2)
  805ac0:	14401617 	ldw	r17,88(r2)
  805ac4:	e0bffc17 	ldw	r2,-16(fp)
  805ac8:	10800417 	ldw	r2,16(r2)
  805acc:	1009883a 	mov	r4,r2
  805ad0:	0808c140 	call	808c14 <__floatsidf>
  805ad4:	1011883a 	mov	r8,r2
  805ad8:	1813883a 	mov	r9,r3
  805adc:	e13ffc17 	ldw	r4,-16(fp)
  805ae0:	20800f17 	ldw	r2,60(r4)
  805ae4:	20c01017 	ldw	r3,64(r4)
  805ae8:	100d883a 	mov	r6,r2
  805aec:	180f883a 	mov	r7,r3
  805af0:	4009883a 	mov	r4,r8
  805af4:	480b883a 	mov	r5,r9
  805af8:	08083180 	call	808318 <__subdf3>
  805afc:	1009883a 	mov	r4,r2
  805b00:	180b883a 	mov	r5,r3
  805b04:	2005883a 	mov	r2,r4
  805b08:	2807883a 	mov	r3,r5
  805b0c:	100d883a 	mov	r6,r2
  805b10:	180f883a 	mov	r7,r3
  805b14:	8009883a 	mov	r4,r16
  805b18:	880b883a 	mov	r5,r17
  805b1c:	08082240 	call	808224 <__ledf2>
  805b20:	1000040e 	bge	r2,zero,805b34 <logic+0x5324>
  805b24:	e13ffc17 	ldw	r4,-16(fp)
  805b28:	20801517 	ldw	r2,84(r4)
  805b2c:	20c01617 	ldw	r3,88(r4)
  805b30:	00001206 	br	805b7c <logic+0x536c>
  805b34:	e0bffc17 	ldw	r2,-16(fp)
  805b38:	10800417 	ldw	r2,16(r2)
  805b3c:	1009883a 	mov	r4,r2
  805b40:	0808c140 	call	808c14 <__floatsidf>
  805b44:	1011883a 	mov	r8,r2
  805b48:	1813883a 	mov	r9,r3
  805b4c:	e13ffc17 	ldw	r4,-16(fp)
  805b50:	20800f17 	ldw	r2,60(r4)
  805b54:	20c01017 	ldw	r3,64(r4)
  805b58:	100d883a 	mov	r6,r2
  805b5c:	180f883a 	mov	r7,r3
  805b60:	4009883a 	mov	r4,r8
  805b64:	480b883a 	mov	r5,r9
  805b68:	08083180 	call	808318 <__subdf3>
  805b6c:	1009883a 	mov	r4,r2
  805b70:	180b883a 	mov	r5,r3
  805b74:	2005883a 	mov	r2,r4
  805b78:	2807883a 	mov	r3,r5
  805b7c:	e13ffc17 	ldw	r4,-16(fp)
  805b80:	20801515 	stw	r2,84(r4)
  805b84:	20c01615 	stw	r3,88(r4)
  }
  d->_cg171 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805b88:	e0bffc17 	ldw	r2,-16(fp)
  805b8c:	10801dc3 	ldbu	r2,119(r2)
  805b90:	10803fcc 	andi	r2,r2,255
  805b94:	1080201c 	xori	r2,r2,128
  805b98:	10bfe004 	addi	r2,r2,-128
  805b9c:	1000061e 	bne	r2,zero,805bb8 <logic+0x53a8>
  805ba0:	e0bffc17 	ldw	r2,-16(fp)
  805ba4:	10801e03 	ldbu	r2,120(r2)
  805ba8:	10803fcc 	andi	r2,r2,255
  805bac:	1080201c 	xori	r2,r2,128
  805bb0:	10bfe004 	addi	r2,r2,-128
  805bb4:	10000226 	beq	r2,zero,805bc0 <logic+0x53b0>
  805bb8:	00800044 	movi	r2,1
  805bbc:	00000106 	br	805bc4 <logic+0x53b4>
  805bc0:	0005883a 	mov	r2,zero
  805bc4:	1007883a 	mov	r3,r2
  805bc8:	e0bffc17 	ldw	r2,-16(fp)
  805bcc:	10c05585 	stb	r3,342(r2)
  d->_g167 = d->_g167 && !d->_cg167 || d->_g171 && !d->_cg171;
  805bd0:	e0bffc17 	ldw	r2,-16(fp)
  805bd4:	10803a83 	ldbu	r2,234(r2)
  805bd8:	10803fcc 	andi	r2,r2,255
  805bdc:	1080201c 	xori	r2,r2,128
  805be0:	10bfe004 	addi	r2,r2,-128
  805be4:	10000626 	beq	r2,zero,805c00 <logic+0x53f0>
  805be8:	e0bffc17 	ldw	r2,-16(fp)
  805bec:	10805543 	ldbu	r2,341(r2)
  805bf0:	10803fcc 	andi	r2,r2,255
  805bf4:	1080201c 	xori	r2,r2,128
  805bf8:	10bfe004 	addi	r2,r2,-128
  805bfc:	10000c26 	beq	r2,zero,805c30 <logic+0x5420>
  805c00:	e0bffc17 	ldw	r2,-16(fp)
  805c04:	10803b43 	ldbu	r2,237(r2)
  805c08:	10803fcc 	andi	r2,r2,255
  805c0c:	1080201c 	xori	r2,r2,128
  805c10:	10bfe004 	addi	r2,r2,-128
  805c14:	10000826 	beq	r2,zero,805c38 <logic+0x5428>
  805c18:	e0bffc17 	ldw	r2,-16(fp)
  805c1c:	10805583 	ldbu	r2,342(r2)
  805c20:	10803fcc 	andi	r2,r2,255
  805c24:	1080201c 	xori	r2,r2,128
  805c28:	10bfe004 	addi	r2,r2,-128
  805c2c:	1000021e 	bne	r2,zero,805c38 <logic+0x5428>
  805c30:	00800044 	movi	r2,1
  805c34:	00000106 	br	805c3c <logic+0x542c>
  805c38:	0005883a 	mov	r2,zero
  805c3c:	1007883a 	mov	r3,r2
  805c40:	e0bffc17 	ldw	r2,-16(fp)
  805c44:	10c03a85 	stb	r3,234(r2)
  d->_g170 = d->_g170 && !d->_cg170;
  805c48:	e0bffc17 	ldw	r2,-16(fp)
  805c4c:	10803b03 	ldbu	r2,236(r2)
  805c50:	10803fcc 	andi	r2,r2,255
  805c54:	1080201c 	xori	r2,r2,128
  805c58:	10bfe004 	addi	r2,r2,-128
  805c5c:	10000826 	beq	r2,zero,805c80 <logic+0x5470>
  805c60:	e0bffc17 	ldw	r2,-16(fp)
  805c64:	108055c3 	ldbu	r2,343(r2)
  805c68:	10803fcc 	andi	r2,r2,255
  805c6c:	1080201c 	xori	r2,r2,128
  805c70:	10bfe004 	addi	r2,r2,-128
  805c74:	1000021e 	bne	r2,zero,805c80 <logic+0x5470>
  805c78:	00800044 	movi	r2,1
  805c7c:	00000106 	br	805c84 <logic+0x5474>
  805c80:	0005883a 	mov	r2,zero
  805c84:	1007883a 	mov	r3,r2
  805c88:	e0bffc17 	ldw	r2,-16(fp)
  805c8c:	10c03b05 	stb	r3,236(r2)
  d->_cg173 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805c90:	e0bffc17 	ldw	r2,-16(fp)
  805c94:	10801dc3 	ldbu	r2,119(r2)
  805c98:	10803fcc 	andi	r2,r2,255
  805c9c:	1080201c 	xori	r2,r2,128
  805ca0:	10bfe004 	addi	r2,r2,-128
  805ca4:	1000061e 	bne	r2,zero,805cc0 <logic+0x54b0>
  805ca8:	e0bffc17 	ldw	r2,-16(fp)
  805cac:	10801e03 	ldbu	r2,120(r2)
  805cb0:	10803fcc 	andi	r2,r2,255
  805cb4:	1080201c 	xori	r2,r2,128
  805cb8:	10bfe004 	addi	r2,r2,-128
  805cbc:	10000226 	beq	r2,zero,805cc8 <logic+0x54b8>
  805cc0:	00800044 	movi	r2,1
  805cc4:	00000106 	br	805ccc <logic+0x54bc>
  805cc8:	0005883a 	mov	r2,zero
  805ccc:	1007883a 	mov	r3,r2
  805cd0:	e0bffc17 	ldw	r2,-16(fp)
  805cd4:	10c05605 	stb	r3,344(r2)
  d->_g171 = d->_g171 && d->_cg171 || d->_g170 && d->_cg173;
  805cd8:	e0bffc17 	ldw	r2,-16(fp)
  805cdc:	10803b43 	ldbu	r2,237(r2)
  805ce0:	10803fcc 	andi	r2,r2,255
  805ce4:	1080201c 	xori	r2,r2,128
  805ce8:	10bfe004 	addi	r2,r2,-128
  805cec:	10000626 	beq	r2,zero,805d08 <logic+0x54f8>
  805cf0:	e0bffc17 	ldw	r2,-16(fp)
  805cf4:	10805583 	ldbu	r2,342(r2)
  805cf8:	10803fcc 	andi	r2,r2,255
  805cfc:	1080201c 	xori	r2,r2,128
  805d00:	10bfe004 	addi	r2,r2,-128
  805d04:	10000c1e 	bne	r2,zero,805d38 <logic+0x5528>
  805d08:	e0bffc17 	ldw	r2,-16(fp)
  805d0c:	10803b03 	ldbu	r2,236(r2)
  805d10:	10803fcc 	andi	r2,r2,255
  805d14:	1080201c 	xori	r2,r2,128
  805d18:	10bfe004 	addi	r2,r2,-128
  805d1c:	10000826 	beq	r2,zero,805d40 <logic+0x5530>
  805d20:	e0bffc17 	ldw	r2,-16(fp)
  805d24:	10805603 	ldbu	r2,344(r2)
  805d28:	10803fcc 	andi	r2,r2,255
  805d2c:	1080201c 	xori	r2,r2,128
  805d30:	10bfe004 	addi	r2,r2,-128
  805d34:	10000226 	beq	r2,zero,805d40 <logic+0x5530>
  805d38:	00800044 	movi	r2,1
  805d3c:	00000106 	br	805d44 <logic+0x5534>
  805d40:	0005883a 	mov	r2,zero
  805d44:	1007883a 	mov	r3,r2
  805d48:	e0bffc17 	ldw	r2,-16(fp)
  805d4c:	10c03b45 	stb	r3,237(r2)
  d->_g176 = d->_g153 && !d->_cg166;
  805d50:	e0bffc17 	ldw	r2,-16(fp)
  805d54:	10803843 	ldbu	r2,225(r2)
  805d58:	10803fcc 	andi	r2,r2,255
  805d5c:	1080201c 	xori	r2,r2,128
  805d60:	10bfe004 	addi	r2,r2,-128
  805d64:	10000826 	beq	r2,zero,805d88 <logic+0x5578>
  805d68:	e0bffc17 	ldw	r2,-16(fp)
  805d6c:	10805503 	ldbu	r2,340(r2)
  805d70:	10803fcc 	andi	r2,r2,255
  805d74:	1080201c 	xori	r2,r2,128
  805d78:	10bfe004 	addi	r2,r2,-128
  805d7c:	1000021e 	bne	r2,zero,805d88 <logic+0x5578>
  805d80:	00800044 	movi	r2,1
  805d84:	00000106 	br	805d8c <logic+0x557c>
  805d88:	0005883a 	mov	r2,zero
  805d8c:	1007883a 	mov	r3,r2
  805d90:	e0bffc17 	ldw	r2,-16(fp)
  805d94:	10c03c45 	stb	r3,241(r2)
  d->_cg176 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805d98:	e0bffc17 	ldw	r2,-16(fp)
  805d9c:	10801dc3 	ldbu	r2,119(r2)
  805da0:	10803fcc 	andi	r2,r2,255
  805da4:	1080201c 	xori	r2,r2,128
  805da8:	10bfe004 	addi	r2,r2,-128
  805dac:	1000061e 	bne	r2,zero,805dc8 <logic+0x55b8>
  805db0:	e0bffc17 	ldw	r2,-16(fp)
  805db4:	10801e03 	ldbu	r2,120(r2)
  805db8:	10803fcc 	andi	r2,r2,255
  805dbc:	1080201c 	xori	r2,r2,128
  805dc0:	10bfe004 	addi	r2,r2,-128
  805dc4:	10000226 	beq	r2,zero,805dd0 <logic+0x55c0>
  805dc8:	00800044 	movi	r2,1
  805dcc:	00000106 	br	805dd4 <logic+0x55c4>
  805dd0:	0005883a 	mov	r2,zero
  805dd4:	1007883a 	mov	r3,r2
  805dd8:	e0bffc17 	ldw	r2,-16(fp)
  805ddc:	10c05645 	stb	r3,345(r2)
  d->_g176 = d->_g170 && !d->_cg173 || d->_g176 && !d->_cg176;
  805de0:	e0bffc17 	ldw	r2,-16(fp)
  805de4:	10803b03 	ldbu	r2,236(r2)
  805de8:	10803fcc 	andi	r2,r2,255
  805dec:	1080201c 	xori	r2,r2,128
  805df0:	10bfe004 	addi	r2,r2,-128
  805df4:	10000626 	beq	r2,zero,805e10 <logic+0x5600>
  805df8:	e0bffc17 	ldw	r2,-16(fp)
  805dfc:	10805603 	ldbu	r2,344(r2)
  805e00:	10803fcc 	andi	r2,r2,255
  805e04:	1080201c 	xori	r2,r2,128
  805e08:	10bfe004 	addi	r2,r2,-128
  805e0c:	10000c26 	beq	r2,zero,805e40 <logic+0x5630>
  805e10:	e0bffc17 	ldw	r2,-16(fp)
  805e14:	10803c43 	ldbu	r2,241(r2)
  805e18:	10803fcc 	andi	r2,r2,255
  805e1c:	1080201c 	xori	r2,r2,128
  805e20:	10bfe004 	addi	r2,r2,-128
  805e24:	10000826 	beq	r2,zero,805e48 <logic+0x5638>
  805e28:	e0bffc17 	ldw	r2,-16(fp)
  805e2c:	10805643 	ldbu	r2,345(r2)
  805e30:	10803fcc 	andi	r2,r2,255
  805e34:	1080201c 	xori	r2,r2,128
  805e38:	10bfe004 	addi	r2,r2,-128
  805e3c:	1000021e 	bne	r2,zero,805e48 <logic+0x5638>
  805e40:	00800044 	movi	r2,1
  805e44:	00000106 	br	805e4c <logic+0x563c>
  805e48:	0005883a 	mov	r2,zero
  805e4c:	1007883a 	mov	r3,r2
  805e50:	e0bffc17 	ldw	r2,-16(fp)
  805e54:	10c03c45 	stb	r3,241(r2)
  d->_g173 = d->_g153 || d->_g194_e2 && !d->_cg182;
  805e58:	e0bffc17 	ldw	r2,-16(fp)
  805e5c:	10803843 	ldbu	r2,225(r2)
  805e60:	10803fcc 	andi	r2,r2,255
  805e64:	1080201c 	xori	r2,r2,128
  805e68:	10bfe004 	addi	r2,r2,-128
  805e6c:	10000c1e 	bne	r2,zero,805ea0 <logic+0x5690>
  805e70:	e0bffc17 	ldw	r2,-16(fp)
  805e74:	10806203 	ldbu	r2,392(r2)
  805e78:	10803fcc 	andi	r2,r2,255
  805e7c:	1080201c 	xori	r2,r2,128
  805e80:	10bfe004 	addi	r2,r2,-128
  805e84:	10000826 	beq	r2,zero,805ea8 <logic+0x5698>
  805e88:	e0bffc17 	ldw	r2,-16(fp)
  805e8c:	10805683 	ldbu	r2,346(r2)
  805e90:	10803fcc 	andi	r2,r2,255
  805e94:	1080201c 	xori	r2,r2,128
  805e98:	10bfe004 	addi	r2,r2,-128
  805e9c:	1000021e 	bne	r2,zero,805ea8 <logic+0x5698>
  805ea0:	00800044 	movi	r2,1
  805ea4:	00000106 	br	805eac <logic+0x569c>
  805ea8:	0005883a 	mov	r2,zero
  805eac:	1007883a 	mov	r3,r2
  805eb0:	e0bffc17 	ldw	r2,-16(fp)
  805eb4:	10c03bc5 	stb	r3,239(r2)
  d->_g182 = d->_g190 || d->_g194;
  805eb8:	e0bffc17 	ldw	r2,-16(fp)
  805ebc:	10803ec3 	ldbu	r2,251(r2)
  805ec0:	10803fcc 	andi	r2,r2,255
  805ec4:	1080201c 	xori	r2,r2,128
  805ec8:	10bfe004 	addi	r2,r2,-128
  805ecc:	1000061e 	bne	r2,zero,805ee8 <logic+0x56d8>
  805ed0:	e0bffc17 	ldw	r2,-16(fp)
  805ed4:	10803f43 	ldbu	r2,253(r2)
  805ed8:	10803fcc 	andi	r2,r2,255
  805edc:	1080201c 	xori	r2,r2,128
  805ee0:	10bfe004 	addi	r2,r2,-128
  805ee4:	10000226 	beq	r2,zero,805ef0 <logic+0x56e0>
  805ee8:	00800044 	movi	r2,1
  805eec:	00000106 	br	805ef4 <logic+0x56e4>
  805ef0:	0005883a 	mov	r2,zero
  805ef4:	1007883a 	mov	r3,r2
  805ef8:	e0bffc17 	ldw	r2,-16(fp)
  805efc:	10c03d45 	stb	r3,245(r2)
  d->_g161 = !d->_g143;
  805f00:	e0bffc17 	ldw	r2,-16(fp)
  805f04:	108036c3 	ldbu	r2,219(r2)
  805f08:	10803fcc 	andi	r2,r2,255
  805f0c:	1080201c 	xori	r2,r2,128
  805f10:	10bfe004 	addi	r2,r2,-128
  805f14:	1005003a 	cmpeq	r2,r2,zero
  805f18:	1007883a 	mov	r3,r2
  805f1c:	e0bffc17 	ldw	r2,-16(fp)
  805f20:	10c039c5 	stb	r3,231(r2)
  d->_g183 = !(d->_g175 || d->_g169);
  805f24:	e0bffc17 	ldw	r2,-16(fp)
  805f28:	10803c03 	ldbu	r2,240(r2)
  805f2c:	10803fcc 	andi	r2,r2,255
  805f30:	1080201c 	xori	r2,r2,128
  805f34:	10bfe004 	addi	r2,r2,-128
  805f38:	1000081e 	bne	r2,zero,805f5c <logic+0x574c>
  805f3c:	e0bffc17 	ldw	r2,-16(fp)
  805f40:	10803ac3 	ldbu	r2,235(r2)
  805f44:	10803fcc 	andi	r2,r2,255
  805f48:	1080201c 	xori	r2,r2,128
  805f4c:	10bfe004 	addi	r2,r2,-128
  805f50:	1000021e 	bne	r2,zero,805f5c <logic+0x574c>
  805f54:	00800044 	movi	r2,1
  805f58:	00000106 	br	805f60 <logic+0x5750>
  805f5c:	0005883a 	mov	r2,zero
  805f60:	1007883a 	mov	r3,r2
  805f64:	e0bffc17 	ldw	r2,-16(fp)
  805f68:	10c03d85 	stb	r3,246(r2)
  d->_g180 = !d->_g190_e1;
  805f6c:	e0bffc17 	ldw	r2,-16(fp)
  805f70:	108061c3 	ldbu	r2,391(r2)
  805f74:	10803fcc 	andi	r2,r2,255
  805f78:	1080201c 	xori	r2,r2,128
  805f7c:	10bfe004 	addi	r2,r2,-128
  805f80:	1005003a 	cmpeq	r2,r2,zero
  805f84:	1007883a 	mov	r3,r2
  805f88:	e0bffc17 	ldw	r2,-16(fp)
  805f8c:	10c03cc5 	stb	r3,243(r2)
  d->_g164 = (d->_g161 || d->_g165) && (d->_g183 || d->_g171) && (d->_g180 || d->_g182) && (d->_g165 || d->_g171 || d->_g182);
  805f90:	e0bffc17 	ldw	r2,-16(fp)
  805f94:	108039c3 	ldbu	r2,231(r2)
  805f98:	10803fcc 	andi	r2,r2,255
  805f9c:	1080201c 	xori	r2,r2,128
  805fa0:	10bfe004 	addi	r2,r2,-128
  805fa4:	1000061e 	bne	r2,zero,805fc0 <logic+0x57b0>
  805fa8:	e0bffc17 	ldw	r2,-16(fp)
  805fac:	10803a43 	ldbu	r2,233(r2)
  805fb0:	10803fcc 	andi	r2,r2,255
  805fb4:	1080201c 	xori	r2,r2,128
  805fb8:	10bfe004 	addi	r2,r2,-128
  805fbc:	10002c26 	beq	r2,zero,806070 <logic+0x5860>
  805fc0:	e0bffc17 	ldw	r2,-16(fp)
  805fc4:	10803d83 	ldbu	r2,246(r2)
  805fc8:	10803fcc 	andi	r2,r2,255
  805fcc:	1080201c 	xori	r2,r2,128
  805fd0:	10bfe004 	addi	r2,r2,-128
  805fd4:	1000061e 	bne	r2,zero,805ff0 <logic+0x57e0>
  805fd8:	e0bffc17 	ldw	r2,-16(fp)
  805fdc:	10803b43 	ldbu	r2,237(r2)
  805fe0:	10803fcc 	andi	r2,r2,255
  805fe4:	1080201c 	xori	r2,r2,128
  805fe8:	10bfe004 	addi	r2,r2,-128
  805fec:	10002026 	beq	r2,zero,806070 <logic+0x5860>
  805ff0:	e0bffc17 	ldw	r2,-16(fp)
  805ff4:	10803cc3 	ldbu	r2,243(r2)
  805ff8:	10803fcc 	andi	r2,r2,255
  805ffc:	1080201c 	xori	r2,r2,128
  806000:	10bfe004 	addi	r2,r2,-128
  806004:	1000061e 	bne	r2,zero,806020 <logic+0x5810>
  806008:	e0bffc17 	ldw	r2,-16(fp)
  80600c:	10803d43 	ldbu	r2,245(r2)
  806010:	10803fcc 	andi	r2,r2,255
  806014:	1080201c 	xori	r2,r2,128
  806018:	10bfe004 	addi	r2,r2,-128
  80601c:	10001426 	beq	r2,zero,806070 <logic+0x5860>
  806020:	e0bffc17 	ldw	r2,-16(fp)
  806024:	10803a43 	ldbu	r2,233(r2)
  806028:	10803fcc 	andi	r2,r2,255
  80602c:	1080201c 	xori	r2,r2,128
  806030:	10bfe004 	addi	r2,r2,-128
  806034:	10000c1e 	bne	r2,zero,806068 <logic+0x5858>
  806038:	e0bffc17 	ldw	r2,-16(fp)
  80603c:	10803b43 	ldbu	r2,237(r2)
  806040:	10803fcc 	andi	r2,r2,255
  806044:	1080201c 	xori	r2,r2,128
  806048:	10bfe004 	addi	r2,r2,-128
  80604c:	1000061e 	bne	r2,zero,806068 <logic+0x5858>
  806050:	e0bffc17 	ldw	r2,-16(fp)
  806054:	10803d43 	ldbu	r2,245(r2)
  806058:	10803fcc 	andi	r2,r2,255
  80605c:	1080201c 	xori	r2,r2,128
  806060:	10bfe004 	addi	r2,r2,-128
  806064:	10000226 	beq	r2,zero,806070 <logic+0x5860>
  806068:	00800044 	movi	r2,1
  80606c:	00000106 	br	806074 <logic+0x5864>
  806070:	0005883a 	mov	r2,zero
  806074:	1007883a 	mov	r3,r2
  806078:	e0bffc17 	ldw	r2,-16(fp)
  80607c:	10c03a05 	stb	r3,232(r2)
  d->_cg184 = d->_heart2_local__Atrig14;
  806080:	e0bffc17 	ldw	r2,-16(fp)
  806084:	10c01dc3 	ldbu	r3,119(r2)
  806088:	e0bffc17 	ldw	r2,-16(fp)
  80608c:	10c05705 	stb	r3,348(r2)
  d->_g175 = d->_g164 && d->_cg184;
  806090:	e0bffc17 	ldw	r2,-16(fp)
  806094:	10803a03 	ldbu	r2,232(r2)
  806098:	10803fcc 	andi	r2,r2,255
  80609c:	1080201c 	xori	r2,r2,128
  8060a0:	10bfe004 	addi	r2,r2,-128
  8060a4:	10000826 	beq	r2,zero,8060c8 <logic+0x58b8>
  8060a8:	e0bffc17 	ldw	r2,-16(fp)
  8060ac:	10805703 	ldbu	r2,348(r2)
  8060b0:	10803fcc 	andi	r2,r2,255
  8060b4:	1080201c 	xori	r2,r2,128
  8060b8:	10bfe004 	addi	r2,r2,-128
  8060bc:	10000226 	beq	r2,zero,8060c8 <logic+0x58b8>
  8060c0:	00800044 	movi	r2,1
  8060c4:	00000106 	br	8060cc <logic+0x58bc>
  8060c8:	0005883a 	mov	r2,zero
  8060cc:	1007883a 	mov	r3,r2
  8060d0:	e0bffc17 	ldw	r2,-16(fp)
  8060d4:	10c03c05 	stb	r3,240(r2)
  if (d->_g175) {
  8060d8:	e0bffc17 	ldw	r2,-16(fp)
  8060dc:	10803c03 	ldbu	r2,240(r2)
  8060e0:	10803fcc 	andi	r2,r2,255
  8060e4:	1080201c 	xori	r2,r2,128
  8060e8:	10bfe004 	addi	r2,r2,-128
  8060ec:	10000c26 	beq	r2,zero,806120 <logic+0x5910>
    d->AP |= 1;
  8060f0:	e0bffc17 	ldw	r2,-16(fp)
  8060f4:	10801783 	ldbu	r2,94(r2)
  8060f8:	10800054 	ori	r2,r2,1
  8060fc:	1007883a 	mov	r3,r2
  806100:	e0bffc17 	ldw	r2,-16(fp)
  806104:	10c01785 	stb	r3,94(r2)
    d->a |= 1;
  806108:	e0bffc17 	ldw	r2,-16(fp)
  80610c:	10801883 	ldbu	r2,98(r2)
  806110:	10800054 	ori	r2,r2,1
  806114:	1007883a 	mov	r3,r2
  806118:	e0bffc17 	ldw	r2,-16(fp)
  80611c:	10c01885 	stb	r3,98(r2)
  }
  d->_g169 = d->_g175 || d->_g164 && !d->_cg184;
  806120:	e0bffc17 	ldw	r2,-16(fp)
  806124:	10803c03 	ldbu	r2,240(r2)
  806128:	10803fcc 	andi	r2,r2,255
  80612c:	1080201c 	xori	r2,r2,128
  806130:	10bfe004 	addi	r2,r2,-128
  806134:	10000c1e 	bne	r2,zero,806168 <logic+0x5958>
  806138:	e0bffc17 	ldw	r2,-16(fp)
  80613c:	10803a03 	ldbu	r2,232(r2)
  806140:	10803fcc 	andi	r2,r2,255
  806144:	1080201c 	xori	r2,r2,128
  806148:	10bfe004 	addi	r2,r2,-128
  80614c:	10000826 	beq	r2,zero,806170 <logic+0x5960>
  806150:	e0bffc17 	ldw	r2,-16(fp)
  806154:	10805703 	ldbu	r2,348(r2)
  806158:	10803fcc 	andi	r2,r2,255
  80615c:	1080201c 	xori	r2,r2,128
  806160:	10bfe004 	addi	r2,r2,-128
  806164:	1000021e 	bne	r2,zero,806170 <logic+0x5960>
  806168:	00800044 	movi	r2,1
  80616c:	00000106 	br	806174 <logic+0x5964>
  806170:	0005883a 	mov	r2,zero
  806174:	1007883a 	mov	r3,r2
  806178:	e0bffc17 	ldw	r2,-16(fp)
  80617c:	10c03ac5 	stb	r3,235(r2)
  if (d->_g169) {
  806180:	e0bffc17 	ldw	r2,-16(fp)
  806184:	10803ac3 	ldbu	r2,235(r2)
  806188:	10803fcc 	andi	r2,r2,255
  80618c:	1080201c 	xori	r2,r2,128
  806190:	10bfe004 	addi	r2,r2,-128
  806194:	10000226 	beq	r2,zero,8061a0 <logic+0x5990>
    d->_heart2_local__Atrig16 = 0;
  806198:	e0bffc17 	ldw	r2,-16(fp)
  80619c:	10001e45 	stb	zero,121(r2)
  }
  d->_cg187 = d->_heart2_local__Atrig16;
  8061a0:	e0bffc17 	ldw	r2,-16(fp)
  8061a4:	10c01e43 	ldbu	r3,121(r2)
  8061a8:	e0bffc17 	ldw	r2,-16(fp)
  8061ac:	10c05745 	stb	r3,349(r2)
  d->_g179 = d->_g169 && !d->_cg187 || d->_g131 && !d->_cg189;
  8061b0:	e0bffc17 	ldw	r2,-16(fp)
  8061b4:	10803ac3 	ldbu	r2,235(r2)
  8061b8:	10803fcc 	andi	r2,r2,255
  8061bc:	1080201c 	xori	r2,r2,128
  8061c0:	10bfe004 	addi	r2,r2,-128
  8061c4:	10000626 	beq	r2,zero,8061e0 <logic+0x59d0>
  8061c8:	e0bffc17 	ldw	r2,-16(fp)
  8061cc:	10805743 	ldbu	r2,349(r2)
  8061d0:	10803fcc 	andi	r2,r2,255
  8061d4:	1080201c 	xori	r2,r2,128
  8061d8:	10bfe004 	addi	r2,r2,-128
  8061dc:	10000c26 	beq	r2,zero,806210 <logic+0x5a00>
  8061e0:	e0bffc17 	ldw	r2,-16(fp)
  8061e4:	10803483 	ldbu	r2,210(r2)
  8061e8:	10803fcc 	andi	r2,r2,255
  8061ec:	1080201c 	xori	r2,r2,128
  8061f0:	10bfe004 	addi	r2,r2,-128
  8061f4:	10000826 	beq	r2,zero,806218 <logic+0x5a08>
  8061f8:	e0bffc17 	ldw	r2,-16(fp)
  8061fc:	10805783 	ldbu	r2,350(r2)
  806200:	10803fcc 	andi	r2,r2,255
  806204:	1080201c 	xori	r2,r2,128
  806208:	10bfe004 	addi	r2,r2,-128
  80620c:	1000021e 	bne	r2,zero,806218 <logic+0x5a08>
  806210:	00800044 	movi	r2,1
  806214:	00000106 	br	80621c <logic+0x5a0c>
  806218:	0005883a 	mov	r2,zero
  80621c:	1007883a 	mov	r3,r2
  806220:	e0bffc17 	ldw	r2,-16(fp)
  806224:	10c03c85 	stb	r3,242(r2)
  d->_g181_e3 = d->_g169 || d->_g140 && !d->_cg193;
  806228:	e0bffc17 	ldw	r2,-16(fp)
  80622c:	10803ac3 	ldbu	r2,235(r2)
  806230:	10803fcc 	andi	r2,r2,255
  806234:	1080201c 	xori	r2,r2,128
  806238:	10bfe004 	addi	r2,r2,-128
  80623c:	10000c1e 	bne	r2,zero,806270 <logic+0x5a60>
  806240:	e0bffc17 	ldw	r2,-16(fp)
  806244:	10803603 	ldbu	r2,216(r2)
  806248:	10803fcc 	andi	r2,r2,255
  80624c:	1080201c 	xori	r2,r2,128
  806250:	10bfe004 	addi	r2,r2,-128
  806254:	10000826 	beq	r2,zero,806278 <logic+0x5a68>
  806258:	e0bffc17 	ldw	r2,-16(fp)
  80625c:	108057c3 	ldbu	r2,351(r2)
  806260:	10803fcc 	andi	r2,r2,255
  806264:	1080201c 	xori	r2,r2,128
  806268:	10bfe004 	addi	r2,r2,-128
  80626c:	1000021e 	bne	r2,zero,806278 <logic+0x5a68>
  806270:	00800044 	movi	r2,1
  806274:	00000106 	br	80627c <logic+0x5a6c>
  806278:	0005883a 	mov	r2,zero
  80627c:	1007883a 	mov	r3,r2
  806280:	e0bffc17 	ldw	r2,-16(fp)
  806284:	10c06185 	stb	r3,390(r2)
  d->_g181 = d->_pg206;
  806288:	e0bffc17 	ldw	r2,-16(fp)
  80628c:	10c06b83 	ldbu	r3,430(r2)
  806290:	e0bffc17 	ldw	r2,-16(fp)
  806294:	10c03d05 	stb	r3,244(r2)
  if (d->_g181) {
  806298:	e0bffc17 	ldw	r2,-16(fp)
  80629c:	10803d03 	ldbu	r2,244(r2)
  8062a0:	10803fcc 	andi	r2,r2,255
  8062a4:	1080201c 	xori	r2,r2,128
  8062a8:	10bfe004 	addi	r2,r2,-128
  8062ac:	10001226 	beq	r2,zero,8062f8 <logic+0x5ae8>
    d->_region5_null_AVI += d->deltaT;
  8062b0:	e13ffc17 	ldw	r4,-16(fp)
  8062b4:	20801117 	ldw	r2,68(r4)
  8062b8:	20c01217 	ldw	r3,72(r4)
  8062bc:	e1bffc17 	ldw	r6,-16(fp)
  8062c0:	31001317 	ldw	r4,76(r6)
  8062c4:	31401417 	ldw	r5,80(r6)
  8062c8:	200d883a 	mov	r6,r4
  8062cc:	280f883a 	mov	r7,r5
  8062d0:	1009883a 	mov	r4,r2
  8062d4:	180b883a 	mov	r5,r3
  8062d8:	080789c0 	call	80789c <__adddf3>
  8062dc:	1009883a 	mov	r4,r2
  8062e0:	180b883a 	mov	r5,r3
  8062e4:	2005883a 	mov	r2,r4
  8062e8:	2807883a 	mov	r3,r5
  8062ec:	e13ffc17 	ldw	r4,-16(fp)
  8062f0:	20801115 	stw	r2,68(r4)
  8062f4:	20c01215 	stw	r3,72(r4)
  }
  d->_g165 = !d->_g181;
  8062f8:	e0bffc17 	ldw	r2,-16(fp)
  8062fc:	10803d03 	ldbu	r2,244(r2)
  806300:	10803fcc 	andi	r2,r2,255
  806304:	1080201c 	xori	r2,r2,128
  806308:	10bfe004 	addi	r2,r2,-128
  80630c:	1005003a 	cmpeq	r2,r2,zero
  806310:	1007883a 	mov	r3,r2
  806314:	e0bffc17 	ldw	r2,-16(fp)
  806318:	10c03a45 	stb	r3,233(r2)
  d->_g165_e1 = d->_pg213;
  80631c:	e0bffc17 	ldw	r2,-16(fp)
  806320:	10c06bc3 	ldbu	r3,431(r2)
  806324:	e0bffc17 	ldw	r2,-16(fp)
  806328:	10c06105 	stb	r3,388(r2)
  d->_cg225 = d->v;
  80632c:	e0bffc17 	ldw	r2,-16(fp)
  806330:	10c018c3 	ldbu	r3,99(r2)
  806334:	e0bffc17 	ldw	r2,-16(fp)
  806338:	10c05b45 	stb	r3,365(r2)
  d->_g172 = d->_g165_e1 && d->_cg225;
  80633c:	e0bffc17 	ldw	r2,-16(fp)
  806340:	10806103 	ldbu	r2,388(r2)
  806344:	10803fcc 	andi	r2,r2,255
  806348:	1080201c 	xori	r2,r2,128
  80634c:	10bfe004 	addi	r2,r2,-128
  806350:	10000826 	beq	r2,zero,806374 <logic+0x5b64>
  806354:	e0bffc17 	ldw	r2,-16(fp)
  806358:	10805b43 	ldbu	r2,365(r2)
  80635c:	10803fcc 	andi	r2,r2,255
  806360:	1080201c 	xori	r2,r2,128
  806364:	10bfe004 	addi	r2,r2,-128
  806368:	10000226 	beq	r2,zero,806374 <logic+0x5b64>
  80636c:	00800044 	movi	r2,1
  806370:	00000106 	br	806378 <logic+0x5b68>
  806374:	0005883a 	mov	r2,zero
  806378:	1007883a 	mov	r3,r2
  80637c:	e0bffc17 	ldw	r2,-16(fp)
  806380:	10c03b85 	stb	r3,238(r2)
  if (d->_g172) {
  806384:	e0bffc17 	ldw	r2,-16(fp)
  806388:	10803b83 	ldbu	r2,238(r2)
  80638c:	10803fcc 	andi	r2,r2,255
  806390:	1080201c 	xori	r2,r2,128
  806394:	10bfe004 	addi	r2,r2,-128
  806398:	10000326 	beq	r2,zero,8063a8 <logic+0x5b98>
    d->_heart2_local__Atrig18 = 1;
  80639c:	e0bffc17 	ldw	r2,-16(fp)
  8063a0:	00c00044 	movi	r3,1
  8063a4:	10c01ec5 	stb	r3,123(r2)
  }
  d->_g172_e2 = d->_g165_e1 && !d->_cg225;
  8063a8:	e0bffc17 	ldw	r2,-16(fp)
  8063ac:	10806103 	ldbu	r2,388(r2)
  8063b0:	10803fcc 	andi	r2,r2,255
  8063b4:	1080201c 	xori	r2,r2,128
  8063b8:	10bfe004 	addi	r2,r2,-128
  8063bc:	10000826 	beq	r2,zero,8063e0 <logic+0x5bd0>
  8063c0:	e0bffc17 	ldw	r2,-16(fp)
  8063c4:	10805b43 	ldbu	r2,365(r2)
  8063c8:	10803fcc 	andi	r2,r2,255
  8063cc:	1080201c 	xori	r2,r2,128
  8063d0:	10bfe004 	addi	r2,r2,-128
  8063d4:	1000021e 	bne	r2,zero,8063e0 <logic+0x5bd0>
  8063d8:	00800044 	movi	r2,1
  8063dc:	00000106 	br	8063e4 <logic+0x5bd4>
  8063e0:	0005883a 	mov	r2,zero
  8063e4:	1007883a 	mov	r3,r2
  8063e8:	e0bffc17 	ldw	r2,-16(fp)
  8063ec:	10c06145 	stb	r3,389(r2)
  d->_cg228 = d->ready && d->_region5_null_AVI >= d->AVI_time;
  8063f0:	e0bffc17 	ldw	r2,-16(fp)
  8063f4:	10800603 	ldbu	r2,24(r2)
  8063f8:	10803fcc 	andi	r2,r2,255
  8063fc:	1080201c 	xori	r2,r2,128
  806400:	10bfe004 	addi	r2,r2,-128
  806404:	10001126 	beq	r2,zero,80644c <logic+0x5c3c>
  806408:	e0bffc17 	ldw	r2,-16(fp)
  80640c:	14001117 	ldw	r16,68(r2)
  806410:	14401217 	ldw	r17,72(r2)
  806414:	e0bffc17 	ldw	r2,-16(fp)
  806418:	10800517 	ldw	r2,20(r2)
  80641c:	1009883a 	mov	r4,r2
  806420:	0808c140 	call	808c14 <__floatsidf>
  806424:	1009883a 	mov	r4,r2
  806428:	180b883a 	mov	r5,r3
  80642c:	200d883a 	mov	r6,r4
  806430:	280f883a 	mov	r7,r5
  806434:	8009883a 	mov	r4,r16
  806438:	880b883a 	mov	r5,r17
  80643c:	08081480 	call	808148 <__gedf2>
  806440:	10000216 	blt	r2,zero,80644c <logic+0x5c3c>
  806444:	00800044 	movi	r2,1
  806448:	00000106 	br	806450 <logic+0x5c40>
  80644c:	0005883a 	mov	r2,zero
  806450:	1007883a 	mov	r3,r2
  806454:	e0bffc17 	ldw	r2,-16(fp)
  806458:	10c05b05 	stb	r3,364(r2)
  d->_g185 = d->_g172_e2 && d->_cg228;
  80645c:	e0bffc17 	ldw	r2,-16(fp)
  806460:	10806143 	ldbu	r2,389(r2)
  806464:	10803fcc 	andi	r2,r2,255
  806468:	1080201c 	xori	r2,r2,128
  80646c:	10bfe004 	addi	r2,r2,-128
  806470:	10000826 	beq	r2,zero,806494 <logic+0x5c84>
  806474:	e0bffc17 	ldw	r2,-16(fp)
  806478:	10805b03 	ldbu	r2,364(r2)
  80647c:	10803fcc 	andi	r2,r2,255
  806480:	1080201c 	xori	r2,r2,128
  806484:	10bfe004 	addi	r2,r2,-128
  806488:	10000226 	beq	r2,zero,806494 <logic+0x5c84>
  80648c:	00800044 	movi	r2,1
  806490:	00000106 	br	806498 <logic+0x5c88>
  806494:	0005883a 	mov	r2,zero
  806498:	1007883a 	mov	r3,r2
  80649c:	e0bffc17 	ldw	r2,-16(fp)
  8064a0:	10c03e05 	stb	r3,248(r2)
  if (d->_g185) {
  8064a4:	e0bffc17 	ldw	r2,-16(fp)
  8064a8:	10803e03 	ldbu	r2,248(r2)
  8064ac:	10803fcc 	andi	r2,r2,255
  8064b0:	1080201c 	xori	r2,r2,128
  8064b4:	10bfe004 	addi	r2,r2,-128
  8064b8:	10000326 	beq	r2,zero,8064c8 <logic+0x5cb8>
    d->_heart2_local__Atrig19 = 1;
  8064bc:	e0bffc17 	ldw	r2,-16(fp)
  8064c0:	00c00044 	movi	r3,1
  8064c4:	10c01f05 	stb	r3,124(r2)
  }
  d->_cg210 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  8064c8:	e0bffc17 	ldw	r2,-16(fp)
  8064cc:	10801ec3 	ldbu	r2,123(r2)
  8064d0:	10803fcc 	andi	r2,r2,255
  8064d4:	1080201c 	xori	r2,r2,128
  8064d8:	10bfe004 	addi	r2,r2,-128
  8064dc:	1000061e 	bne	r2,zero,8064f8 <logic+0x5ce8>
  8064e0:	e0bffc17 	ldw	r2,-16(fp)
  8064e4:	10801f03 	ldbu	r2,124(r2)
  8064e8:	10803fcc 	andi	r2,r2,255
  8064ec:	1080201c 	xori	r2,r2,128
  8064f0:	10bfe004 	addi	r2,r2,-128
  8064f4:	10000226 	beq	r2,zero,806500 <logic+0x5cf0>
  8064f8:	00800044 	movi	r2,1
  8064fc:	00000106 	br	806504 <logic+0x5cf4>
  806500:	0005883a 	mov	r2,zero
  806504:	1007883a 	mov	r3,r2
  806508:	e0bffc17 	ldw	r2,-16(fp)
  80650c:	10c05945 	stb	r3,357(r2)
  d->_g184 = d->_g181 && d->_cg210;
  806510:	e0bffc17 	ldw	r2,-16(fp)
  806514:	10803d03 	ldbu	r2,244(r2)
  806518:	10803fcc 	andi	r2,r2,255
  80651c:	1080201c 	xori	r2,r2,128
  806520:	10bfe004 	addi	r2,r2,-128
  806524:	10000826 	beq	r2,zero,806548 <logic+0x5d38>
  806528:	e0bffc17 	ldw	r2,-16(fp)
  80652c:	10805943 	ldbu	r2,357(r2)
  806530:	10803fcc 	andi	r2,r2,255
  806534:	1080201c 	xori	r2,r2,128
  806538:	10bfe004 	addi	r2,r2,-128
  80653c:	10000226 	beq	r2,zero,806548 <logic+0x5d38>
  806540:	00800044 	movi	r2,1
  806544:	00000106 	br	80654c <logic+0x5d3c>
  806548:	0005883a 	mov	r2,zero
  80654c:	1007883a 	mov	r3,r2
  806550:	e0bffc17 	ldw	r2,-16(fp)
  806554:	10c03dc5 	stb	r3,247(r2)
  d->_g189 = d->_pg210;
  806558:	e0bffc17 	ldw	r2,-16(fp)
  80655c:	10c06c03 	ldbu	r3,432(r2)
  806560:	e0bffc17 	ldw	r2,-16(fp)
  806564:	10c03e85 	stb	r3,250(r2)
  d->_g193 = d->_pg202;
  806568:	e0bffc17 	ldw	r2,-16(fp)
  80656c:	10c06c43 	ldbu	r3,433(r2)
  806570:	e0bffc17 	ldw	r2,-16(fp)
  806574:	10c03f05 	stb	r3,252(r2)
  d->_g186 = !(d->_g189 || d->_g193);
  806578:	e0bffc17 	ldw	r2,-16(fp)
  80657c:	10803e83 	ldbu	r2,250(r2)
  806580:	10803fcc 	andi	r2,r2,255
  806584:	1080201c 	xori	r2,r2,128
  806588:	10bfe004 	addi	r2,r2,-128
  80658c:	1000081e 	bne	r2,zero,8065b0 <logic+0x5da0>
  806590:	e0bffc17 	ldw	r2,-16(fp)
  806594:	10803f03 	ldbu	r2,252(r2)
  806598:	10803fcc 	andi	r2,r2,255
  80659c:	1080201c 	xori	r2,r2,128
  8065a0:	10bfe004 	addi	r2,r2,-128
  8065a4:	1000021e 	bne	r2,zero,8065b0 <logic+0x5da0>
  8065a8:	00800044 	movi	r2,1
  8065ac:	00000106 	br	8065b4 <logic+0x5da4>
  8065b0:	0005883a 	mov	r2,zero
  8065b4:	1007883a 	mov	r3,r2
  8065b8:	e0bffc17 	ldw	r2,-16(fp)
  8065bc:	10c03e45 	stb	r3,249(r2)
  d->_g215 = d->_g193 || d->_g189;
  8065c0:	e0bffc17 	ldw	r2,-16(fp)
  8065c4:	10803f03 	ldbu	r2,252(r2)
  8065c8:	10803fcc 	andi	r2,r2,255
  8065cc:	1080201c 	xori	r2,r2,128
  8065d0:	10bfe004 	addi	r2,r2,-128
  8065d4:	1000061e 	bne	r2,zero,8065f0 <logic+0x5de0>
  8065d8:	e0bffc17 	ldw	r2,-16(fp)
  8065dc:	10803e83 	ldbu	r2,250(r2)
  8065e0:	10803fcc 	andi	r2,r2,255
  8065e4:	1080201c 	xori	r2,r2,128
  8065e8:	10bfe004 	addi	r2,r2,-128
  8065ec:	10000226 	beq	r2,zero,8065f8 <logic+0x5de8>
  8065f0:	00800044 	movi	r2,1
  8065f4:	00000106 	br	8065fc <logic+0x5dec>
  8065f8:	0005883a 	mov	r2,zero
  8065fc:	1007883a 	mov	r3,r2
  806600:	e0bffc17 	ldw	r2,-16(fp)
  806604:	10c041c5 	stb	r3,263(r2)
  d->_cg216 = d->_region5_null_AVI < d->AVI_time;
  806608:	e0bffc17 	ldw	r2,-16(fp)
  80660c:	14001117 	ldw	r16,68(r2)
  806610:	14401217 	ldw	r17,72(r2)
  806614:	e0bffc17 	ldw	r2,-16(fp)
  806618:	10800517 	ldw	r2,20(r2)
  80661c:	1009883a 	mov	r4,r2
  806620:	0808c140 	call	808c14 <__floatsidf>
  806624:	1009883a 	mov	r4,r2
  806628:	180b883a 	mov	r5,r3
  80662c:	04800044 	movi	r18,1
  806630:	200d883a 	mov	r6,r4
  806634:	280f883a 	mov	r7,r5
  806638:	8009883a 	mov	r4,r16
  80663c:	880b883a 	mov	r5,r17
  806640:	08082240 	call	808224 <__ledf2>
  806644:	10000116 	blt	r2,zero,80664c <logic+0x5e3c>
  806648:	0025883a 	mov	r18,zero
  80664c:	9007883a 	mov	r3,r18
  806650:	e0bffc17 	ldw	r2,-16(fp)
  806654:	10c05a45 	stb	r3,361(r2)
  d->_g221 = d->_g215 && d->_cg216;
  806658:	e0bffc17 	ldw	r2,-16(fp)
  80665c:	108041c3 	ldbu	r2,263(r2)
  806660:	10803fcc 	andi	r2,r2,255
  806664:	1080201c 	xori	r2,r2,128
  806668:	10bfe004 	addi	r2,r2,-128
  80666c:	10000826 	beq	r2,zero,806690 <logic+0x5e80>
  806670:	e0bffc17 	ldw	r2,-16(fp)
  806674:	10805a43 	ldbu	r2,361(r2)
  806678:	10803fcc 	andi	r2,r2,255
  80667c:	1080201c 	xori	r2,r2,128
  806680:	10bfe004 	addi	r2,r2,-128
  806684:	10000226 	beq	r2,zero,806690 <logic+0x5e80>
  806688:	00800044 	movi	r2,1
  80668c:	00000106 	br	806694 <logic+0x5e84>
  806690:	0005883a 	mov	r2,zero
  806694:	1007883a 	mov	r3,r2
  806698:	e0bffc17 	ldw	r2,-16(fp)
  80669c:	10c042c5 	stb	r3,267(r2)
  if (d->_g221) {
  8066a0:	e0bffc17 	ldw	r2,-16(fp)
  8066a4:	108042c3 	ldbu	r2,267(r2)
  8066a8:	10803fcc 	andi	r2,r2,255
  8066ac:	1080201c 	xori	r2,r2,128
  8066b0:	10bfe004 	addi	r2,r2,-128
  8066b4:	10003426 	beq	r2,zero,806788 <logic+0x5f78>
    d->sleepT = (d->sleepT < (d->AVI_time - d->_region5_null_AVI)) ? d->sleepT : (d->AVI_time - d->_region5_null_AVI);
  8066b8:	e0bffc17 	ldw	r2,-16(fp)
  8066bc:	14001517 	ldw	r16,84(r2)
  8066c0:	14401617 	ldw	r17,88(r2)
  8066c4:	e0bffc17 	ldw	r2,-16(fp)
  8066c8:	10800517 	ldw	r2,20(r2)
  8066cc:	1009883a 	mov	r4,r2
  8066d0:	0808c140 	call	808c14 <__floatsidf>
  8066d4:	1011883a 	mov	r8,r2
  8066d8:	1813883a 	mov	r9,r3
  8066dc:	e13ffc17 	ldw	r4,-16(fp)
  8066e0:	20801117 	ldw	r2,68(r4)
  8066e4:	20c01217 	ldw	r3,72(r4)
  8066e8:	100d883a 	mov	r6,r2
  8066ec:	180f883a 	mov	r7,r3
  8066f0:	4009883a 	mov	r4,r8
  8066f4:	480b883a 	mov	r5,r9
  8066f8:	08083180 	call	808318 <__subdf3>
  8066fc:	1009883a 	mov	r4,r2
  806700:	180b883a 	mov	r5,r3
  806704:	2005883a 	mov	r2,r4
  806708:	2807883a 	mov	r3,r5
  80670c:	100d883a 	mov	r6,r2
  806710:	180f883a 	mov	r7,r3
  806714:	8009883a 	mov	r4,r16
  806718:	880b883a 	mov	r5,r17
  80671c:	08082240 	call	808224 <__ledf2>
  806720:	1000040e 	bge	r2,zero,806734 <logic+0x5f24>
  806724:	e13ffc17 	ldw	r4,-16(fp)
  806728:	20801517 	ldw	r2,84(r4)
  80672c:	20c01617 	ldw	r3,88(r4)
  806730:	00001206 	br	80677c <logic+0x5f6c>
  806734:	e0bffc17 	ldw	r2,-16(fp)
  806738:	10800517 	ldw	r2,20(r2)
  80673c:	1009883a 	mov	r4,r2
  806740:	0808c140 	call	808c14 <__floatsidf>
  806744:	1011883a 	mov	r8,r2
  806748:	1813883a 	mov	r9,r3
  80674c:	e13ffc17 	ldw	r4,-16(fp)
  806750:	20801117 	ldw	r2,68(r4)
  806754:	20c01217 	ldw	r3,72(r4)
  806758:	100d883a 	mov	r6,r2
  80675c:	180f883a 	mov	r7,r3
  806760:	4009883a 	mov	r4,r8
  806764:	480b883a 	mov	r5,r9
  806768:	08083180 	call	808318 <__subdf3>
  80676c:	1009883a 	mov	r4,r2
  806770:	180b883a 	mov	r5,r3
  806774:	2005883a 	mov	r2,r4
  806778:	2807883a 	mov	r3,r5
  80677c:	e13ffc17 	ldw	r4,-16(fp)
  806780:	20801515 	stw	r2,84(r4)
  806784:	20c01615 	stw	r3,88(r4)
  }
  d->_cg217 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  806788:	e0bffc17 	ldw	r2,-16(fp)
  80678c:	10801ec3 	ldbu	r2,123(r2)
  806790:	10803fcc 	andi	r2,r2,255
  806794:	1080201c 	xori	r2,r2,128
  806798:	10bfe004 	addi	r2,r2,-128
  80679c:	1000061e 	bne	r2,zero,8067b8 <logic+0x5fa8>
  8067a0:	e0bffc17 	ldw	r2,-16(fp)
  8067a4:	10801f03 	ldbu	r2,124(r2)
  8067a8:	10803fcc 	andi	r2,r2,255
  8067ac:	1080201c 	xori	r2,r2,128
  8067b0:	10bfe004 	addi	r2,r2,-128
  8067b4:	10000226 	beq	r2,zero,8067c0 <logic+0x5fb0>
  8067b8:	00800044 	movi	r2,1
  8067bc:	00000106 	br	8067c4 <logic+0x5fb4>
  8067c0:	0005883a 	mov	r2,zero
  8067c4:	1007883a 	mov	r3,r2
  8067c8:	e0bffc17 	ldw	r2,-16(fp)
  8067cc:	10c05a05 	stb	r3,360(r2)
  d->_g216 = d->_g215 && !d->_cg216;
  8067d0:	e0bffc17 	ldw	r2,-16(fp)
  8067d4:	108041c3 	ldbu	r2,263(r2)
  8067d8:	10803fcc 	andi	r2,r2,255
  8067dc:	1080201c 	xori	r2,r2,128
  8067e0:	10bfe004 	addi	r2,r2,-128
  8067e4:	10000826 	beq	r2,zero,806808 <logic+0x5ff8>
  8067e8:	e0bffc17 	ldw	r2,-16(fp)
  8067ec:	10805a43 	ldbu	r2,361(r2)
  8067f0:	10803fcc 	andi	r2,r2,255
  8067f4:	1080201c 	xori	r2,r2,128
  8067f8:	10bfe004 	addi	r2,r2,-128
  8067fc:	1000021e 	bne	r2,zero,806808 <logic+0x5ff8>
  806800:	00800044 	movi	r2,1
  806804:	00000106 	br	80680c <logic+0x5ffc>
  806808:	0005883a 	mov	r2,zero
  80680c:	1007883a 	mov	r3,r2
  806810:	e0bffc17 	ldw	r2,-16(fp)
  806814:	10c04205 	stb	r3,264(r2)
  d->_cg219 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  806818:	e0bffc17 	ldw	r2,-16(fp)
  80681c:	10801ec3 	ldbu	r2,123(r2)
  806820:	10803fcc 	andi	r2,r2,255
  806824:	1080201c 	xori	r2,r2,128
  806828:	10bfe004 	addi	r2,r2,-128
  80682c:	1000061e 	bne	r2,zero,806848 <logic+0x6038>
  806830:	e0bffc17 	ldw	r2,-16(fp)
  806834:	10801f03 	ldbu	r2,124(r2)
  806838:	10803fcc 	andi	r2,r2,255
  80683c:	1080201c 	xori	r2,r2,128
  806840:	10bfe004 	addi	r2,r2,-128
  806844:	10000226 	beq	r2,zero,806850 <logic+0x6040>
  806848:	00800044 	movi	r2,1
  80684c:	00000106 	br	806854 <logic+0x6044>
  806850:	0005883a 	mov	r2,zero
  806854:	1007883a 	mov	r3,r2
  806858:	e0bffc17 	ldw	r2,-16(fp)
  80685c:	10c05a85 	stb	r3,362(r2)
  d->_g218 = d->_g221 && d->_cg217 || d->_g216 && d->_cg219;
  806860:	e0bffc17 	ldw	r2,-16(fp)
  806864:	108042c3 	ldbu	r2,267(r2)
  806868:	10803fcc 	andi	r2,r2,255
  80686c:	1080201c 	xori	r2,r2,128
  806870:	10bfe004 	addi	r2,r2,-128
  806874:	10000626 	beq	r2,zero,806890 <logic+0x6080>
  806878:	e0bffc17 	ldw	r2,-16(fp)
  80687c:	10805a03 	ldbu	r2,360(r2)
  806880:	10803fcc 	andi	r2,r2,255
  806884:	1080201c 	xori	r2,r2,128
  806888:	10bfe004 	addi	r2,r2,-128
  80688c:	10000c1e 	bne	r2,zero,8068c0 <logic+0x60b0>
  806890:	e0bffc17 	ldw	r2,-16(fp)
  806894:	10804203 	ldbu	r2,264(r2)
  806898:	10803fcc 	andi	r2,r2,255
  80689c:	1080201c 	xori	r2,r2,128
  8068a0:	10bfe004 	addi	r2,r2,-128
  8068a4:	10000826 	beq	r2,zero,8068c8 <logic+0x60b8>
  8068a8:	e0bffc17 	ldw	r2,-16(fp)
  8068ac:	10805a83 	ldbu	r2,362(r2)
  8068b0:	10803fcc 	andi	r2,r2,255
  8068b4:	1080201c 	xori	r2,r2,128
  8068b8:	10bfe004 	addi	r2,r2,-128
  8068bc:	10000226 	beq	r2,zero,8068c8 <logic+0x60b8>
  8068c0:	00800044 	movi	r2,1
  8068c4:	00000106 	br	8068cc <logic+0x60bc>
  8068c8:	0005883a 	mov	r2,zero
  8068cc:	1007883a 	mov	r3,r2
  8068d0:	e0bffc17 	ldw	r2,-16(fp)
  8068d4:	10c04285 	stb	r3,266(r2)
  d->_g225 = !d->_g165_e1;
  8068d8:	e0bffc17 	ldw	r2,-16(fp)
  8068dc:	10806103 	ldbu	r2,388(r2)
  8068e0:	10803fcc 	andi	r2,r2,255
  8068e4:	1080201c 	xori	r2,r2,128
  8068e8:	10bfe004 	addi	r2,r2,-128
  8068ec:	1005003a 	cmpeq	r2,r2,zero
  8068f0:	1007883a 	mov	r3,r2
  8068f4:	e0bffc17 	ldw	r2,-16(fp)
  8068f8:	10c04305 	stb	r3,268(r2)
  d->_g226 = d->_g172 || d->_g185;
  8068fc:	e0bffc17 	ldw	r2,-16(fp)
  806900:	10803b83 	ldbu	r2,238(r2)
  806904:	10803fcc 	andi	r2,r2,255
  806908:	1080201c 	xori	r2,r2,128
  80690c:	10bfe004 	addi	r2,r2,-128
  806910:	1000061e 	bne	r2,zero,80692c <logic+0x611c>
  806914:	e0bffc17 	ldw	r2,-16(fp)
  806918:	10803e03 	ldbu	r2,248(r2)
  80691c:	10803fcc 	andi	r2,r2,255
  806920:	1080201c 	xori	r2,r2,128
  806924:	10bfe004 	addi	r2,r2,-128
  806928:	10000226 	beq	r2,zero,806934 <logic+0x6124>
  80692c:	00800044 	movi	r2,1
  806930:	00000106 	br	806938 <logic+0x6128>
  806934:	0005883a 	mov	r2,zero
  806938:	1007883a 	mov	r3,r2
  80693c:	e0bffc17 	ldw	r2,-16(fp)
  806940:	10c04345 	stb	r3,269(r2)
  d->_g229 = (d->_g165 || d->_g184) && (d->_g186 || d->_g218) && (d->_g225 || d->_g226) && (d->_g184 || d->_g218 || d->_g226);
  806944:	e0bffc17 	ldw	r2,-16(fp)
  806948:	10803a43 	ldbu	r2,233(r2)
  80694c:	10803fcc 	andi	r2,r2,255
  806950:	1080201c 	xori	r2,r2,128
  806954:	10bfe004 	addi	r2,r2,-128
  806958:	1000061e 	bne	r2,zero,806974 <logic+0x6164>
  80695c:	e0bffc17 	ldw	r2,-16(fp)
  806960:	10803dc3 	ldbu	r2,247(r2)
  806964:	10803fcc 	andi	r2,r2,255
  806968:	1080201c 	xori	r2,r2,128
  80696c:	10bfe004 	addi	r2,r2,-128
  806970:	10002c26 	beq	r2,zero,806a24 <logic+0x6214>
  806974:	e0bffc17 	ldw	r2,-16(fp)
  806978:	10803e43 	ldbu	r2,249(r2)
  80697c:	10803fcc 	andi	r2,r2,255
  806980:	1080201c 	xori	r2,r2,128
  806984:	10bfe004 	addi	r2,r2,-128
  806988:	1000061e 	bne	r2,zero,8069a4 <logic+0x6194>
  80698c:	e0bffc17 	ldw	r2,-16(fp)
  806990:	10804283 	ldbu	r2,266(r2)
  806994:	10803fcc 	andi	r2,r2,255
  806998:	1080201c 	xori	r2,r2,128
  80699c:	10bfe004 	addi	r2,r2,-128
  8069a0:	10002026 	beq	r2,zero,806a24 <logic+0x6214>
  8069a4:	e0bffc17 	ldw	r2,-16(fp)
  8069a8:	10804303 	ldbu	r2,268(r2)
  8069ac:	10803fcc 	andi	r2,r2,255
  8069b0:	1080201c 	xori	r2,r2,128
  8069b4:	10bfe004 	addi	r2,r2,-128
  8069b8:	1000061e 	bne	r2,zero,8069d4 <logic+0x61c4>
  8069bc:	e0bffc17 	ldw	r2,-16(fp)
  8069c0:	10804343 	ldbu	r2,269(r2)
  8069c4:	10803fcc 	andi	r2,r2,255
  8069c8:	1080201c 	xori	r2,r2,128
  8069cc:	10bfe004 	addi	r2,r2,-128
  8069d0:	10001426 	beq	r2,zero,806a24 <logic+0x6214>
  8069d4:	e0bffc17 	ldw	r2,-16(fp)
  8069d8:	10803dc3 	ldbu	r2,247(r2)
  8069dc:	10803fcc 	andi	r2,r2,255
  8069e0:	1080201c 	xori	r2,r2,128
  8069e4:	10bfe004 	addi	r2,r2,-128
  8069e8:	10000c1e 	bne	r2,zero,806a1c <logic+0x620c>
  8069ec:	e0bffc17 	ldw	r2,-16(fp)
  8069f0:	10804283 	ldbu	r2,266(r2)
  8069f4:	10803fcc 	andi	r2,r2,255
  8069f8:	1080201c 	xori	r2,r2,128
  8069fc:	10bfe004 	addi	r2,r2,-128
  806a00:	1000061e 	bne	r2,zero,806a1c <logic+0x620c>
  806a04:	e0bffc17 	ldw	r2,-16(fp)
  806a08:	10804343 	ldbu	r2,269(r2)
  806a0c:	10803fcc 	andi	r2,r2,255
  806a10:	1080201c 	xori	r2,r2,128
  806a14:	10bfe004 	addi	r2,r2,-128
  806a18:	10000226 	beq	r2,zero,806a24 <logic+0x6214>
  806a1c:	00800044 	movi	r2,1
  806a20:	00000106 	br	806a28 <logic+0x6218>
  806a24:	0005883a 	mov	r2,zero
  806a28:	1007883a 	mov	r3,r2
  806a2c:	e0bffc17 	ldw	r2,-16(fp)
  806a30:	10c043c5 	stb	r3,271(r2)
  d->_cg230 = d->_heart2_local__Atrig18;
  806a34:	e0bffc17 	ldw	r2,-16(fp)
  806a38:	10c01ec3 	ldbu	r3,123(r2)
  806a3c:	e0bffc17 	ldw	r2,-16(fp)
  806a40:	10c05805 	stb	r3,352(r2)
  d->_g227_e3 = d->_g229 && !d->_cg230;
  806a44:	e0bffc17 	ldw	r2,-16(fp)
  806a48:	108043c3 	ldbu	r2,271(r2)
  806a4c:	10803fcc 	andi	r2,r2,255
  806a50:	1080201c 	xori	r2,r2,128
  806a54:	10bfe004 	addi	r2,r2,-128
  806a58:	10000826 	beq	r2,zero,806a7c <logic+0x626c>
  806a5c:	e0bffc17 	ldw	r2,-16(fp)
  806a60:	10805803 	ldbu	r2,352(r2)
  806a64:	10803fcc 	andi	r2,r2,255
  806a68:	1080201c 	xori	r2,r2,128
  806a6c:	10bfe004 	addi	r2,r2,-128
  806a70:	1000021e 	bne	r2,zero,806a7c <logic+0x626c>
  806a74:	00800044 	movi	r2,1
  806a78:	00000106 	br	806a80 <logic+0x6270>
  806a7c:	0005883a 	mov	r2,zero
  806a80:	1007883a 	mov	r3,r2
  806a84:	e0bffc17 	ldw	r2,-16(fp)
  806a88:	10c06345 	stb	r3,397(r2)
  if (d->_g227_e3) {
  806a8c:	e0bffc17 	ldw	r2,-16(fp)
  806a90:	10806343 	ldbu	r2,397(r2)
  806a94:	10803fcc 	andi	r2,r2,255
  806a98:	1080201c 	xori	r2,r2,128
  806a9c:	10bfe004 	addi	r2,r2,-128
  806aa0:	10000626 	beq	r2,zero,806abc <logic+0x62ac>
    d->VP |= 1;
  806aa4:	e0bffc17 	ldw	r2,-16(fp)
  806aa8:	108017c3 	ldbu	r2,95(r2)
  806aac:	10800054 	ori	r2,r2,1
  806ab0:	1007883a 	mov	r3,r2
  806ab4:	e0bffc17 	ldw	r2,-16(fp)
  806ab8:	10c017c5 	stb	r3,95(r2)
  }
  d->_g211 = d->_GO || d->_g229 && d->_cg230 || d->_g227_e3;
  806abc:	e0bffc17 	ldw	r2,-16(fp)
  806ac0:	10804543 	ldbu	r2,277(r2)
  806ac4:	10803fcc 	andi	r2,r2,255
  806ac8:	1080201c 	xori	r2,r2,128
  806acc:	10bfe004 	addi	r2,r2,-128
  806ad0:	1000121e 	bne	r2,zero,806b1c <logic+0x630c>
  806ad4:	e0bffc17 	ldw	r2,-16(fp)
  806ad8:	108043c3 	ldbu	r2,271(r2)
  806adc:	10803fcc 	andi	r2,r2,255
  806ae0:	1080201c 	xori	r2,r2,128
  806ae4:	10bfe004 	addi	r2,r2,-128
  806ae8:	10000626 	beq	r2,zero,806b04 <logic+0x62f4>
  806aec:	e0bffc17 	ldw	r2,-16(fp)
  806af0:	10805803 	ldbu	r2,352(r2)
  806af4:	10803fcc 	andi	r2,r2,255
  806af8:	1080201c 	xori	r2,r2,128
  806afc:	10bfe004 	addi	r2,r2,-128
  806b00:	1000061e 	bne	r2,zero,806b1c <logic+0x630c>
  806b04:	e0bffc17 	ldw	r2,-16(fp)
  806b08:	10806343 	ldbu	r2,397(r2)
  806b0c:	10803fcc 	andi	r2,r2,255
  806b10:	1080201c 	xori	r2,r2,128
  806b14:	10bfe004 	addi	r2,r2,-128
  806b18:	10000226 	beq	r2,zero,806b24 <logic+0x6314>
  806b1c:	00800044 	movi	r2,1
  806b20:	00000106 	br	806b28 <logic+0x6318>
  806b24:	0005883a 	mov	r2,zero
  806b28:	1007883a 	mov	r3,r2
  806b2c:	e0bffc17 	ldw	r2,-16(fp)
  806b30:	10c04145 	stb	r3,261(r2)
  if (d->_g211) {
  806b34:	e0bffc17 	ldw	r2,-16(fp)
  806b38:	10804143 	ldbu	r2,261(r2)
  806b3c:	10803fcc 	andi	r2,r2,255
  806b40:	1080201c 	xori	r2,r2,128
  806b44:	10bfe004 	addi	r2,r2,-128
  806b48:	10000226 	beq	r2,zero,806b54 <logic+0x6344>
    d->_heart2_local__Atrig17 = 0;
  806b4c:	e0bffc17 	ldw	r2,-16(fp)
  806b50:	10001e85 	stb	zero,122(r2)
  }
  d->_cg199 = d->_heart2_local__Atrig17;
  806b54:	e0bffc17 	ldw	r2,-16(fp)
  806b58:	10c01e83 	ldbu	r3,122(r2)
  806b5c:	e0bffc17 	ldw	r2,-16(fp)
  806b60:	10c05845 	stb	r3,353(r2)
  d->_g218_e2 = d->_pg231;
  806b64:	e0bffc17 	ldw	r2,-16(fp)
  806b68:	10c06c83 	ldbu	r3,434(r2)
  806b6c:	e0bffc17 	ldw	r2,-16(fp)
  806b70:	10c06305 	stb	r3,396(r2)
  d->_cg205 = d->a;
  806b74:	e0bffc17 	ldw	r2,-16(fp)
  806b78:	10c01883 	ldbu	r3,98(r2)
  806b7c:	e0bffc17 	ldw	r2,-16(fp)
  806b80:	10c058c5 	stb	r3,355(r2)
  d->_g218 = d->_g218_e2 && d->_cg205;
  806b84:	e0bffc17 	ldw	r2,-16(fp)
  806b88:	10806303 	ldbu	r2,396(r2)
  806b8c:	10803fcc 	andi	r2,r2,255
  806b90:	1080201c 	xori	r2,r2,128
  806b94:	10bfe004 	addi	r2,r2,-128
  806b98:	10000826 	beq	r2,zero,806bbc <logic+0x63ac>
  806b9c:	e0bffc17 	ldw	r2,-16(fp)
  806ba0:	108058c3 	ldbu	r2,355(r2)
  806ba4:	10803fcc 	andi	r2,r2,255
  806ba8:	1080201c 	xori	r2,r2,128
  806bac:	10bfe004 	addi	r2,r2,-128
  806bb0:	10000226 	beq	r2,zero,806bbc <logic+0x63ac>
  806bb4:	00800044 	movi	r2,1
  806bb8:	00000106 	br	806bc0 <logic+0x63b0>
  806bbc:	0005883a 	mov	r2,zero
  806bc0:	1007883a 	mov	r3,r2
  806bc4:	e0bffc17 	ldw	r2,-16(fp)
  806bc8:	10c04285 	stb	r3,266(r2)
  if (d->_g218) {
  806bcc:	e0bffc17 	ldw	r2,-16(fp)
  806bd0:	10804283 	ldbu	r2,266(r2)
  806bd4:	10803fcc 	andi	r2,r2,255
  806bd8:	1080201c 	xori	r2,r2,128
  806bdc:	10bfe004 	addi	r2,r2,-128
  806be0:	10000326 	beq	r2,zero,806bf0 <logic+0x63e0>
    d->_heart2_local__Atrig17 = 1;
  806be4:	e0bffc17 	ldw	r2,-16(fp)
  806be8:	00c00044 	movi	r3,1
  806bec:	10c01e85 	stb	r3,122(r2)
  }
  d->_g227 = d->_pg211_e1;
  806bf0:	e0bffc17 	ldw	r2,-16(fp)
  806bf4:	10c06cc3 	ldbu	r3,435(r2)
  806bf8:	e0bffc17 	ldw	r2,-16(fp)
  806bfc:	10c04385 	stb	r3,270(r2)
  if (d->_g227) {
  806c00:	e0bffc17 	ldw	r2,-16(fp)
  806c04:	10804383 	ldbu	r2,270(r2)
  806c08:	10803fcc 	andi	r2,r2,255
  806c0c:	1080201c 	xori	r2,r2,128
  806c10:	10bfe004 	addi	r2,r2,-128
  806c14:	10001226 	beq	r2,zero,806c60 <logic+0x6450>
    d->_region5_null_AVI += d->deltaT;
  806c18:	e13ffc17 	ldw	r4,-16(fp)
  806c1c:	20801117 	ldw	r2,68(r4)
  806c20:	20c01217 	ldw	r3,72(r4)
  806c24:	e1bffc17 	ldw	r6,-16(fp)
  806c28:	31001317 	ldw	r4,76(r6)
  806c2c:	31401417 	ldw	r5,80(r6)
  806c30:	200d883a 	mov	r6,r4
  806c34:	280f883a 	mov	r7,r5
  806c38:	1009883a 	mov	r4,r2
  806c3c:	180b883a 	mov	r5,r3
  806c40:	080789c0 	call	80789c <__adddf3>
  806c44:	1009883a 	mov	r4,r2
  806c48:	180b883a 	mov	r5,r3
  806c4c:	2005883a 	mov	r2,r4
  806c50:	2807883a 	mov	r3,r5
  806c54:	e13ffc17 	ldw	r4,-16(fp)
  806c58:	20801115 	stw	r2,68(r4)
  806c5c:	20c01215 	stw	r3,72(r4)
  }
  d->_cg201 = d->_heart2_local__Atrig17;
  806c60:	e0bffc17 	ldw	r2,-16(fp)
  806c64:	10c01e83 	ldbu	r3,122(r2)
  806c68:	e0bffc17 	ldw	r2,-16(fp)
  806c6c:	10c05885 	stb	r3,354(r2)
  d->_g211_e1 = d->_g211 && !d->_cg199 || d->_g227 && !d->_cg201;
  806c70:	e0bffc17 	ldw	r2,-16(fp)
  806c74:	10804143 	ldbu	r2,261(r2)
  806c78:	10803fcc 	andi	r2,r2,255
  806c7c:	1080201c 	xori	r2,r2,128
  806c80:	10bfe004 	addi	r2,r2,-128
  806c84:	10000626 	beq	r2,zero,806ca0 <logic+0x6490>
  806c88:	e0bffc17 	ldw	r2,-16(fp)
  806c8c:	10805843 	ldbu	r2,353(r2)
  806c90:	10803fcc 	andi	r2,r2,255
  806c94:	1080201c 	xori	r2,r2,128
  806c98:	10bfe004 	addi	r2,r2,-128
  806c9c:	10000c26 	beq	r2,zero,806cd0 <logic+0x64c0>
  806ca0:	e0bffc17 	ldw	r2,-16(fp)
  806ca4:	10804383 	ldbu	r2,270(r2)
  806ca8:	10803fcc 	andi	r2,r2,255
  806cac:	1080201c 	xori	r2,r2,128
  806cb0:	10bfe004 	addi	r2,r2,-128
  806cb4:	10000826 	beq	r2,zero,806cd8 <logic+0x64c8>
  806cb8:	e0bffc17 	ldw	r2,-16(fp)
  806cbc:	10805883 	ldbu	r2,354(r2)
  806cc0:	10803fcc 	andi	r2,r2,255
  806cc4:	1080201c 	xori	r2,r2,128
  806cc8:	10bfe004 	addi	r2,r2,-128
  806ccc:	1000021e 	bne	r2,zero,806cd8 <logic+0x64c8>
  806cd0:	00800044 	movi	r2,1
  806cd4:	00000106 	br	806cdc <logic+0x64cc>
  806cd8:	0005883a 	mov	r2,zero
  806cdc:	1007883a 	mov	r3,r2
  806ce0:	e0bffc17 	ldw	r2,-16(fp)
  806ce4:	10c062c5 	stb	r3,395(r2)
  d->_g230 = d->_g227 && d->_cg201;
  806ce8:	e0bffc17 	ldw	r2,-16(fp)
  806cec:	10804383 	ldbu	r2,270(r2)
  806cf0:	10803fcc 	andi	r2,r2,255
  806cf4:	1080201c 	xori	r2,r2,128
  806cf8:	10bfe004 	addi	r2,r2,-128
  806cfc:	10000826 	beq	r2,zero,806d20 <logic+0x6510>
  806d00:	e0bffc17 	ldw	r2,-16(fp)
  806d04:	10805883 	ldbu	r2,354(r2)
  806d08:	10803fcc 	andi	r2,r2,255
  806d0c:	1080201c 	xori	r2,r2,128
  806d10:	10bfe004 	addi	r2,r2,-128
  806d14:	10000226 	beq	r2,zero,806d20 <logic+0x6510>
  806d18:	00800044 	movi	r2,1
  806d1c:	00000106 	br	806d24 <logic+0x6514>
  806d20:	0005883a 	mov	r2,zero
  806d24:	1007883a 	mov	r3,r2
  806d28:	e0bffc17 	ldw	r2,-16(fp)
  806d2c:	10c04405 	stb	r3,272(r2)
  d->_g231 = d->_g211 || d->_g218_e2 && !d->_cg205;
  806d30:	e0bffc17 	ldw	r2,-16(fp)
  806d34:	10804143 	ldbu	r2,261(r2)
  806d38:	10803fcc 	andi	r2,r2,255
  806d3c:	1080201c 	xori	r2,r2,128
  806d40:	10bfe004 	addi	r2,r2,-128
  806d44:	10000c1e 	bne	r2,zero,806d78 <logic+0x6568>
  806d48:	e0bffc17 	ldw	r2,-16(fp)
  806d4c:	10806303 	ldbu	r2,396(r2)
  806d50:	10803fcc 	andi	r2,r2,255
  806d54:	1080201c 	xori	r2,r2,128
  806d58:	10bfe004 	addi	r2,r2,-128
  806d5c:	10000826 	beq	r2,zero,806d80 <logic+0x6570>
  806d60:	e0bffc17 	ldw	r2,-16(fp)
  806d64:	108058c3 	ldbu	r2,355(r2)
  806d68:	10803fcc 	andi	r2,r2,255
  806d6c:	1080201c 	xori	r2,r2,128
  806d70:	10bfe004 	addi	r2,r2,-128
  806d74:	1000021e 	bne	r2,zero,806d80 <logic+0x6570>
  806d78:	00800044 	movi	r2,1
  806d7c:	00000106 	br	806d84 <logic+0x6574>
  806d80:	0005883a 	mov	r2,zero
  806d84:	1007883a 	mov	r3,r2
  806d88:	e0bffc17 	ldw	r2,-16(fp)
  806d8c:	10c04445 	stb	r3,273(r2)
  d->_g198 = !d->_g227;
  806d90:	e0bffc17 	ldw	r2,-16(fp)
  806d94:	10804383 	ldbu	r2,270(r2)
  806d98:	10803fcc 	andi	r2,r2,255
  806d9c:	1080201c 	xori	r2,r2,128
  806da0:	10bfe004 	addi	r2,r2,-128
  806da4:	1005003a 	cmpeq	r2,r2,zero
  806da8:	1007883a 	mov	r3,r2
  806dac:	e0bffc17 	ldw	r2,-16(fp)
  806db0:	10c03fc5 	stb	r3,255(r2)
  d->_g201 = !d->_g218_e2;
  806db4:	e0bffc17 	ldw	r2,-16(fp)
  806db8:	10806303 	ldbu	r2,396(r2)
  806dbc:	10803fcc 	andi	r2,r2,255
  806dc0:	1080201c 	xori	r2,r2,128
  806dc4:	10bfe004 	addi	r2,r2,-128
  806dc8:	1005003a 	cmpeq	r2,r2,zero
  806dcc:	1007883a 	mov	r3,r2
  806dd0:	e0bffc17 	ldw	r2,-16(fp)
  806dd4:	10c04005 	stb	r3,256(r2)
  d->_g205 = (d->_g198 || d->_g230) && (d->_g201 || d->_g218) && (d->_g230 || d->_g218);
  806dd8:	e0bffc17 	ldw	r2,-16(fp)
  806ddc:	10803fc3 	ldbu	r2,255(r2)
  806de0:	10803fcc 	andi	r2,r2,255
  806de4:	1080201c 	xori	r2,r2,128
  806de8:	10bfe004 	addi	r2,r2,-128
  806dec:	1000061e 	bne	r2,zero,806e08 <logic+0x65f8>
  806df0:	e0bffc17 	ldw	r2,-16(fp)
  806df4:	10804403 	ldbu	r2,272(r2)
  806df8:	10803fcc 	andi	r2,r2,255
  806dfc:	1080201c 	xori	r2,r2,128
  806e00:	10bfe004 	addi	r2,r2,-128
  806e04:	10001a26 	beq	r2,zero,806e70 <logic+0x6660>
  806e08:	e0bffc17 	ldw	r2,-16(fp)
  806e0c:	10804003 	ldbu	r2,256(r2)
  806e10:	10803fcc 	andi	r2,r2,255
  806e14:	1080201c 	xori	r2,r2,128
  806e18:	10bfe004 	addi	r2,r2,-128
  806e1c:	1000061e 	bne	r2,zero,806e38 <logic+0x6628>
  806e20:	e0bffc17 	ldw	r2,-16(fp)
  806e24:	10804283 	ldbu	r2,266(r2)
  806e28:	10803fcc 	andi	r2,r2,255
  806e2c:	1080201c 	xori	r2,r2,128
  806e30:	10bfe004 	addi	r2,r2,-128
  806e34:	10000e26 	beq	r2,zero,806e70 <logic+0x6660>
  806e38:	e0bffc17 	ldw	r2,-16(fp)
  806e3c:	10804403 	ldbu	r2,272(r2)
  806e40:	10803fcc 	andi	r2,r2,255
  806e44:	1080201c 	xori	r2,r2,128
  806e48:	10bfe004 	addi	r2,r2,-128
  806e4c:	1000061e 	bne	r2,zero,806e68 <logic+0x6658>
  806e50:	e0bffc17 	ldw	r2,-16(fp)
  806e54:	10804283 	ldbu	r2,266(r2)
  806e58:	10803fcc 	andi	r2,r2,255
  806e5c:	1080201c 	xori	r2,r2,128
  806e60:	10bfe004 	addi	r2,r2,-128
  806e64:	10000226 	beq	r2,zero,806e70 <logic+0x6660>
  806e68:	00800044 	movi	r2,1
  806e6c:	00000106 	br	806e74 <logic+0x6664>
  806e70:	0005883a 	mov	r2,zero
  806e74:	1007883a 	mov	r3,r2
  806e78:	e0bffc17 	ldw	r2,-16(fp)
  806e7c:	10c04085 	stb	r3,258(r2)
  if (d->_g205) {
  806e80:	e0bffc17 	ldw	r2,-16(fp)
  806e84:	10804083 	ldbu	r2,258(r2)
  806e88:	10803fcc 	andi	r2,r2,255
  806e8c:	1080201c 	xori	r2,r2,128
  806e90:	10bfe004 	addi	r2,r2,-128
  806e94:	10000726 	beq	r2,zero,806eb4 <logic+0x66a4>
    d->_region5_null_AVI = 0;
  806e98:	e0bffc17 	ldw	r2,-16(fp)
  806e9c:	10001115 	stw	zero,68(r2)
  806ea0:	10001215 	stw	zero,72(r2)
    d->_heart2_local__Atrig18 = 0;
  806ea4:	e0bffc17 	ldw	r2,-16(fp)
  806ea8:	10001ec5 	stb	zero,123(r2)
    d->_heart2_local__Atrig19 = 0;
  806eac:	e0bffc17 	ldw	r2,-16(fp)
  806eb0:	10001f05 	stb	zero,124(r2)
  }
  d->_cg208 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  806eb4:	e0bffc17 	ldw	r2,-16(fp)
  806eb8:	10801ec3 	ldbu	r2,123(r2)
  806ebc:	10803fcc 	andi	r2,r2,255
  806ec0:	1080201c 	xori	r2,r2,128
  806ec4:	10bfe004 	addi	r2,r2,-128
  806ec8:	1000061e 	bne	r2,zero,806ee4 <logic+0x66d4>
  806ecc:	e0bffc17 	ldw	r2,-16(fp)
  806ed0:	10801f03 	ldbu	r2,124(r2)
  806ed4:	10803fcc 	andi	r2,r2,255
  806ed8:	1080201c 	xori	r2,r2,128
  806edc:	10bfe004 	addi	r2,r2,-128
  806ee0:	10000226 	beq	r2,zero,806eec <logic+0x66dc>
  806ee4:	00800044 	movi	r2,1
  806ee8:	00000106 	br	806ef0 <logic+0x66e0>
  806eec:	0005883a 	mov	r2,zero
  806ef0:	1007883a 	mov	r3,r2
  806ef4:	e0bffc17 	ldw	r2,-16(fp)
  806ef8:	10c05905 	stb	r3,356(r2)
  d->_g206 = d->_g205 && !d->_cg208 || d->_g181 && !d->_cg210;
  806efc:	e0bffc17 	ldw	r2,-16(fp)
  806f00:	10804083 	ldbu	r2,258(r2)
  806f04:	10803fcc 	andi	r2,r2,255
  806f08:	1080201c 	xori	r2,r2,128
  806f0c:	10bfe004 	addi	r2,r2,-128
  806f10:	10000626 	beq	r2,zero,806f2c <logic+0x671c>
  806f14:	e0bffc17 	ldw	r2,-16(fp)
  806f18:	10805903 	ldbu	r2,356(r2)
  806f1c:	10803fcc 	andi	r2,r2,255
  806f20:	1080201c 	xori	r2,r2,128
  806f24:	10bfe004 	addi	r2,r2,-128
  806f28:	10000c26 	beq	r2,zero,806f5c <logic+0x674c>
  806f2c:	e0bffc17 	ldw	r2,-16(fp)
  806f30:	10803d03 	ldbu	r2,244(r2)
  806f34:	10803fcc 	andi	r2,r2,255
  806f38:	1080201c 	xori	r2,r2,128
  806f3c:	10bfe004 	addi	r2,r2,-128
  806f40:	10000826 	beq	r2,zero,806f64 <logic+0x6754>
  806f44:	e0bffc17 	ldw	r2,-16(fp)
  806f48:	10805943 	ldbu	r2,357(r2)
  806f4c:	10803fcc 	andi	r2,r2,255
  806f50:	1080201c 	xori	r2,r2,128
  806f54:	10bfe004 	addi	r2,r2,-128
  806f58:	1000021e 	bne	r2,zero,806f64 <logic+0x6754>
  806f5c:	00800044 	movi	r2,1
  806f60:	00000106 	br	806f68 <logic+0x6758>
  806f64:	0005883a 	mov	r2,zero
  806f68:	1007883a 	mov	r3,r2
  806f6c:	e0bffc17 	ldw	r2,-16(fp)
  806f70:	10c040c5 	stb	r3,259(r2)
  d->_cg212 = d->_region5_null_AVI < d->AVI_time;
  806f74:	e0bffc17 	ldw	r2,-16(fp)
  806f78:	14001117 	ldw	r16,68(r2)
  806f7c:	14401217 	ldw	r17,72(r2)
  806f80:	e0bffc17 	ldw	r2,-16(fp)
  806f84:	10800517 	ldw	r2,20(r2)
  806f88:	1009883a 	mov	r4,r2
  806f8c:	0808c140 	call	808c14 <__floatsidf>
  806f90:	1009883a 	mov	r4,r2
  806f94:	180b883a 	mov	r5,r3
  806f98:	04800044 	movi	r18,1
  806f9c:	200d883a 	mov	r6,r4
  806fa0:	280f883a 	mov	r7,r5
  806fa4:	8009883a 	mov	r4,r16
  806fa8:	880b883a 	mov	r5,r17
  806fac:	08082240 	call	808224 <__ledf2>
  806fb0:	10000116 	blt	r2,zero,806fb8 <logic+0x67a8>
  806fb4:	0025883a 	mov	r18,zero
  806fb8:	9007883a 	mov	r3,r18
  806fbc:	e0bffc17 	ldw	r2,-16(fp)
  806fc0:	10c05985 	stb	r3,358(r2)
  d->_g206_e2 = d->_g205 && d->_cg212;
  806fc4:	e0bffc17 	ldw	r2,-16(fp)
  806fc8:	10804083 	ldbu	r2,258(r2)
  806fcc:	10803fcc 	andi	r2,r2,255
  806fd0:	1080201c 	xori	r2,r2,128
  806fd4:	10bfe004 	addi	r2,r2,-128
  806fd8:	10000826 	beq	r2,zero,806ffc <logic+0x67ec>
  806fdc:	e0bffc17 	ldw	r2,-16(fp)
  806fe0:	10805983 	ldbu	r2,358(r2)
  806fe4:	10803fcc 	andi	r2,r2,255
  806fe8:	1080201c 	xori	r2,r2,128
  806fec:	10bfe004 	addi	r2,r2,-128
  806ff0:	10000226 	beq	r2,zero,806ffc <logic+0x67ec>
  806ff4:	00800044 	movi	r2,1
  806ff8:	00000106 	br	807000 <logic+0x67f0>
  806ffc:	0005883a 	mov	r2,zero
  807000:	1007883a 	mov	r3,r2
  807004:	e0bffc17 	ldw	r2,-16(fp)
  807008:	10c06285 	stb	r3,394(r2)
  if (d->_g206_e2) {
  80700c:	e0bffc17 	ldw	r2,-16(fp)
  807010:	10806283 	ldbu	r2,394(r2)
  807014:	10803fcc 	andi	r2,r2,255
  807018:	1080201c 	xori	r2,r2,128
  80701c:	10bfe004 	addi	r2,r2,-128
  807020:	10003426 	beq	r2,zero,8070f4 <logic+0x68e4>
    d->sleepT = (d->sleepT < (d->AVI_time - d->_region5_null_AVI)) ? d->sleepT : (d->AVI_time - d->_region5_null_AVI);
  807024:	e0bffc17 	ldw	r2,-16(fp)
  807028:	14001517 	ldw	r16,84(r2)
  80702c:	14401617 	ldw	r17,88(r2)
  807030:	e0bffc17 	ldw	r2,-16(fp)
  807034:	10800517 	ldw	r2,20(r2)
  807038:	1009883a 	mov	r4,r2
  80703c:	0808c140 	call	808c14 <__floatsidf>
  807040:	1011883a 	mov	r8,r2
  807044:	1813883a 	mov	r9,r3
  807048:	e13ffc17 	ldw	r4,-16(fp)
  80704c:	20801117 	ldw	r2,68(r4)
  807050:	20c01217 	ldw	r3,72(r4)
  807054:	100d883a 	mov	r6,r2
  807058:	180f883a 	mov	r7,r3
  80705c:	4009883a 	mov	r4,r8
  807060:	480b883a 	mov	r5,r9
  807064:	08083180 	call	808318 <__subdf3>
  807068:	1009883a 	mov	r4,r2
  80706c:	180b883a 	mov	r5,r3
  807070:	2005883a 	mov	r2,r4
  807074:	2807883a 	mov	r3,r5
  807078:	100d883a 	mov	r6,r2
  80707c:	180f883a 	mov	r7,r3
  807080:	8009883a 	mov	r4,r16
  807084:	880b883a 	mov	r5,r17
  807088:	08082240 	call	808224 <__ledf2>
  80708c:	1000040e 	bge	r2,zero,8070a0 <logic+0x6890>
  807090:	e13ffc17 	ldw	r4,-16(fp)
  807094:	20801517 	ldw	r2,84(r4)
  807098:	20c01617 	ldw	r3,88(r4)
  80709c:	00001206 	br	8070e8 <logic+0x68d8>
  8070a0:	e0bffc17 	ldw	r2,-16(fp)
  8070a4:	10800517 	ldw	r2,20(r2)
  8070a8:	1009883a 	mov	r4,r2
  8070ac:	0808c140 	call	808c14 <__floatsidf>
  8070b0:	1011883a 	mov	r8,r2
  8070b4:	1813883a 	mov	r9,r3
  8070b8:	e13ffc17 	ldw	r4,-16(fp)
  8070bc:	20801117 	ldw	r2,68(r4)
  8070c0:	20c01217 	ldw	r3,72(r4)
  8070c4:	100d883a 	mov	r6,r2
  8070c8:	180f883a 	mov	r7,r3
  8070cc:	4009883a 	mov	r4,r8
  8070d0:	480b883a 	mov	r5,r9
  8070d4:	08083180 	call	808318 <__subdf3>
  8070d8:	1009883a 	mov	r4,r2
  8070dc:	180b883a 	mov	r5,r3
  8070e0:	2005883a 	mov	r2,r4
  8070e4:	2807883a 	mov	r3,r5
  8070e8:	e13ffc17 	ldw	r4,-16(fp)
  8070ec:	20801515 	stw	r2,84(r4)
  8070f0:	20c01615 	stw	r3,88(r4)
  }
  d->_cg213 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  8070f4:	e0bffc17 	ldw	r2,-16(fp)
  8070f8:	10801ec3 	ldbu	r2,123(r2)
  8070fc:	10803fcc 	andi	r2,r2,255
  807100:	1080201c 	xori	r2,r2,128
  807104:	10bfe004 	addi	r2,r2,-128
  807108:	1000061e 	bne	r2,zero,807124 <logic+0x6914>
  80710c:	e0bffc17 	ldw	r2,-16(fp)
  807110:	10801f03 	ldbu	r2,124(r2)
  807114:	10803fcc 	andi	r2,r2,255
  807118:	1080201c 	xori	r2,r2,128
  80711c:	10bfe004 	addi	r2,r2,-128
  807120:	10000226 	beq	r2,zero,80712c <logic+0x691c>
  807124:	00800044 	movi	r2,1
  807128:	00000106 	br	807130 <logic+0x6920>
  80712c:	0005883a 	mov	r2,zero
  807130:	1007883a 	mov	r3,r2
  807134:	e0bffc17 	ldw	r2,-16(fp)
  807138:	10c059c5 	stb	r3,359(r2)
  d->_g202 = d->_g206_e2 && !d->_cg213 || d->_g221 && !d->_cg217;
  80713c:	e0bffc17 	ldw	r2,-16(fp)
  807140:	10806283 	ldbu	r2,394(r2)
  807144:	10803fcc 	andi	r2,r2,255
  807148:	1080201c 	xori	r2,r2,128
  80714c:	10bfe004 	addi	r2,r2,-128
  807150:	10000626 	beq	r2,zero,80716c <logic+0x695c>
  807154:	e0bffc17 	ldw	r2,-16(fp)
  807158:	108059c3 	ldbu	r2,359(r2)
  80715c:	10803fcc 	andi	r2,r2,255
  807160:	1080201c 	xori	r2,r2,128
  807164:	10bfe004 	addi	r2,r2,-128
  807168:	10000c26 	beq	r2,zero,80719c <logic+0x698c>
  80716c:	e0bffc17 	ldw	r2,-16(fp)
  807170:	108042c3 	ldbu	r2,267(r2)
  807174:	10803fcc 	andi	r2,r2,255
  807178:	1080201c 	xori	r2,r2,128
  80717c:	10bfe004 	addi	r2,r2,-128
  807180:	10000826 	beq	r2,zero,8071a4 <logic+0x6994>
  807184:	e0bffc17 	ldw	r2,-16(fp)
  807188:	10805a03 	ldbu	r2,360(r2)
  80718c:	10803fcc 	andi	r2,r2,255
  807190:	1080201c 	xori	r2,r2,128
  807194:	10bfe004 	addi	r2,r2,-128
  807198:	1000021e 	bne	r2,zero,8071a4 <logic+0x6994>
  80719c:	00800044 	movi	r2,1
  8071a0:	00000106 	br	8071a8 <logic+0x6998>
  8071a4:	0005883a 	mov	r2,zero
  8071a8:	1007883a 	mov	r3,r2
  8071ac:	e0bffc17 	ldw	r2,-16(fp)
  8071b0:	10c04045 	stb	r3,257(r2)
  d->_g202_e1 = d->_g205 && !d->_cg212;
  8071b4:	e0bffc17 	ldw	r2,-16(fp)
  8071b8:	10804083 	ldbu	r2,258(r2)
  8071bc:	10803fcc 	andi	r2,r2,255
  8071c0:	1080201c 	xori	r2,r2,128
  8071c4:	10bfe004 	addi	r2,r2,-128
  8071c8:	10000826 	beq	r2,zero,8071ec <logic+0x69dc>
  8071cc:	e0bffc17 	ldw	r2,-16(fp)
  8071d0:	10805983 	ldbu	r2,358(r2)
  8071d4:	10803fcc 	andi	r2,r2,255
  8071d8:	1080201c 	xori	r2,r2,128
  8071dc:	10bfe004 	addi	r2,r2,-128
  8071e0:	1000021e 	bne	r2,zero,8071ec <logic+0x69dc>
  8071e4:	00800044 	movi	r2,1
  8071e8:	00000106 	br	8071f0 <logic+0x69e0>
  8071ec:	0005883a 	mov	r2,zero
  8071f0:	1007883a 	mov	r3,r2
  8071f4:	e0bffc17 	ldw	r2,-16(fp)
  8071f8:	10c06245 	stb	r3,393(r2)
  d->_cg222 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  8071fc:	e0bffc17 	ldw	r2,-16(fp)
  807200:	10801ec3 	ldbu	r2,123(r2)
  807204:	10803fcc 	andi	r2,r2,255
  807208:	1080201c 	xori	r2,r2,128
  80720c:	10bfe004 	addi	r2,r2,-128
  807210:	1000061e 	bne	r2,zero,80722c <logic+0x6a1c>
  807214:	e0bffc17 	ldw	r2,-16(fp)
  807218:	10801f03 	ldbu	r2,124(r2)
  80721c:	10803fcc 	andi	r2,r2,255
  807220:	1080201c 	xori	r2,r2,128
  807224:	10bfe004 	addi	r2,r2,-128
  807228:	10000226 	beq	r2,zero,807234 <logic+0x6a24>
  80722c:	00800044 	movi	r2,1
  807230:	00000106 	br	807238 <logic+0x6a28>
  807234:	0005883a 	mov	r2,zero
  807238:	1007883a 	mov	r3,r2
  80723c:	e0bffc17 	ldw	r2,-16(fp)
  807240:	10c05ac5 	stb	r3,363(r2)
  d->_g210 = d->_g216 && !d->_cg219 || d->_g202_e1 && !d->_cg222;
  807244:	e0bffc17 	ldw	r2,-16(fp)
  807248:	10804203 	ldbu	r2,264(r2)
  80724c:	10803fcc 	andi	r2,r2,255
  807250:	1080201c 	xori	r2,r2,128
  807254:	10bfe004 	addi	r2,r2,-128
  807258:	10000626 	beq	r2,zero,807274 <logic+0x6a64>
  80725c:	e0bffc17 	ldw	r2,-16(fp)
  807260:	10805a83 	ldbu	r2,362(r2)
  807264:	10803fcc 	andi	r2,r2,255
  807268:	1080201c 	xori	r2,r2,128
  80726c:	10bfe004 	addi	r2,r2,-128
  807270:	10000c26 	beq	r2,zero,8072a4 <logic+0x6a94>
  807274:	e0bffc17 	ldw	r2,-16(fp)
  807278:	10806243 	ldbu	r2,393(r2)
  80727c:	10803fcc 	andi	r2,r2,255
  807280:	1080201c 	xori	r2,r2,128
  807284:	10bfe004 	addi	r2,r2,-128
  807288:	10000826 	beq	r2,zero,8072ac <logic+0x6a9c>
  80728c:	e0bffc17 	ldw	r2,-16(fp)
  807290:	10805ac3 	ldbu	r2,363(r2)
  807294:	10803fcc 	andi	r2,r2,255
  807298:	1080201c 	xori	r2,r2,128
  80729c:	10bfe004 	addi	r2,r2,-128
  8072a0:	1000021e 	bne	r2,zero,8072ac <logic+0x6a9c>
  8072a4:	00800044 	movi	r2,1
  8072a8:	00000106 	br	8072b0 <logic+0x6aa0>
  8072ac:	0005883a 	mov	r2,zero
  8072b0:	1007883a 	mov	r3,r2
  8072b4:	e0bffc17 	ldw	r2,-16(fp)
  8072b8:	10c04105 	stb	r3,260(r2)
  d->_g213 = d->_g205 || d->_g172_e2 && !d->_cg228;
  8072bc:	e0bffc17 	ldw	r2,-16(fp)
  8072c0:	10804083 	ldbu	r2,258(r2)
  8072c4:	10803fcc 	andi	r2,r2,255
  8072c8:	1080201c 	xori	r2,r2,128
  8072cc:	10bfe004 	addi	r2,r2,-128
  8072d0:	10000c1e 	bne	r2,zero,807304 <logic+0x6af4>
  8072d4:	e0bffc17 	ldw	r2,-16(fp)
  8072d8:	10806143 	ldbu	r2,389(r2)
  8072dc:	10803fcc 	andi	r2,r2,255
  8072e0:	1080201c 	xori	r2,r2,128
  8072e4:	10bfe004 	addi	r2,r2,-128
  8072e8:	10000826 	beq	r2,zero,80730c <logic+0x6afc>
  8072ec:	e0bffc17 	ldw	r2,-16(fp)
  8072f0:	10805b03 	ldbu	r2,364(r2)
  8072f4:	10803fcc 	andi	r2,r2,255
  8072f8:	1080201c 	xori	r2,r2,128
  8072fc:	10bfe004 	addi	r2,r2,-128
  807300:	1000021e 	bne	r2,zero,80730c <logic+0x6afc>
  807304:	00800044 	movi	r2,1
  807308:	00000106 	br	807310 <logic+0x6b00>
  80730c:	0005883a 	mov	r2,zero
  807310:	1007883a 	mov	r3,r2
  807314:	e0bffc17 	ldw	r2,-16(fp)
  807318:	10c04185 	stb	r3,262(r2)
  d->_g217 = d->_GO || d->_g236 || d->_g238 || d->_g235 && !d->_cg237;
  80731c:	e0bffc17 	ldw	r2,-16(fp)
  807320:	10804543 	ldbu	r2,277(r2)
  807324:	10803fcc 	andi	r2,r2,255
  807328:	1080201c 	xori	r2,r2,128
  80732c:	10bfe004 	addi	r2,r2,-128
  807330:	1000181e 	bne	r2,zero,807394 <logic+0x6b84>
  807334:	e0bffc17 	ldw	r2,-16(fp)
  807338:	108044c3 	ldbu	r2,275(r2)
  80733c:	10803fcc 	andi	r2,r2,255
  807340:	1080201c 	xori	r2,r2,128
  807344:	10bfe004 	addi	r2,r2,-128
  807348:	1000121e 	bne	r2,zero,807394 <logic+0x6b84>
  80734c:	e0bffc17 	ldw	r2,-16(fp)
  807350:	10804503 	ldbu	r2,276(r2)
  807354:	10803fcc 	andi	r2,r2,255
  807358:	1080201c 	xori	r2,r2,128
  80735c:	10bfe004 	addi	r2,r2,-128
  807360:	10000c1e 	bne	r2,zero,807394 <logic+0x6b84>
  807364:	e0bffc17 	ldw	r2,-16(fp)
  807368:	10804483 	ldbu	r2,274(r2)
  80736c:	10803fcc 	andi	r2,r2,255
  807370:	1080201c 	xori	r2,r2,128
  807374:	10bfe004 	addi	r2,r2,-128
  807378:	10000826 	beq	r2,zero,80739c <logic+0x6b8c>
  80737c:	e0bffc17 	ldw	r2,-16(fp)
  807380:	10805b83 	ldbu	r2,366(r2)
  807384:	10803fcc 	andi	r2,r2,255
  807388:	1080201c 	xori	r2,r2,128
  80738c:	10bfe004 	addi	r2,r2,-128
  807390:	1000021e 	bne	r2,zero,80739c <logic+0x6b8c>
  807394:	00800044 	movi	r2,1
  807398:	00000106 	br	8073a0 <logic+0x6b90>
  80739c:	0005883a 	mov	r2,zero
  8073a0:	1007883a 	mov	r3,r2
  8073a4:	e0bffc17 	ldw	r2,-16(fp)
  8073a8:	10c04245 	stb	r3,265(r2)
  d->_reg_VP = d->VP;
  8073ac:	e0bffc17 	ldw	r2,-16(fp)
  8073b0:	10c017c3 	ldbu	r3,95(r2)
  8073b4:	e0bffc17 	ldw	r2,-16(fp)
  8073b8:	10c01945 	stb	r3,101(r2)
  d->_reg_VS_i = d->VS_i;
  8073bc:	e0bffc17 	ldw	r2,-16(fp)
  8073c0:	10c01903 	ldbu	r3,100(r2)
  8073c4:	e0bffc17 	ldw	r2,-16(fp)
  8073c8:	10c019c5 	stb	r3,103(r2)
}
  8073cc:	0001883a 	nop
  8073d0:	e6fffd04 	addi	sp,fp,-12
  8073d4:	dfc00417 	ldw	ra,16(sp)
  8073d8:	df000317 	ldw	fp,12(sp)
  8073dc:	dc800217 	ldw	r18,8(sp)
  8073e0:	dc400117 	ldw	r17,4(sp)
  8073e4:	dc000017 	ldw	r16,0(sp)
  8073e8:	dec00504 	addi	sp,sp,20
  8073ec:	f800283a 	ret

008073f0 <reset>:

void reset(TickData* d) {
  8073f0:	defffe04 	addi	sp,sp,-8
  8073f4:	df000115 	stw	fp,4(sp)
  8073f8:	df000104 	addi	fp,sp,4
  8073fc:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  807400:	e0bfff17 	ldw	r2,-4(fp)
  807404:	00c00044 	movi	r3,1
  807408:	10c04545 	stb	r3,277(r2)
  d->_TERM = 0;
  80740c:	e0bfff17 	ldw	r2,-4(fp)
  807410:	10006385 	stb	zero,398(r2)
  d->VRP_time = VRP_VALUE;
  807414:	e0bfff17 	ldw	r2,-4(fp)
  807418:	00c02584 	movi	r3,150
  80741c:	10c00015 	stw	r3,0(r2)
  d->PVARP_time = PVARP_VALUE;
  807420:	e0bfff17 	ldw	r2,-4(fp)
  807424:	00c00c84 	movi	r3,50
  807428:	10c00115 	stw	r3,4(r2)
  d->URI_time = URI_VALUE;
  80742c:	e0bfff17 	ldw	r2,-4(fp)
  807430:	00c0e104 	movi	r3,900
  807434:	10c00215 	stw	r3,8(r2)
  d->LRI_time = LRI_VALUE;
  807438:	e0bfff17 	ldw	r2,-4(fp)
  80743c:	00c0ed84 	movi	r3,950
  807440:	10c00315 	stw	r3,12(r2)
  d->AEI_time = AEI_VALUE;
  807444:	e0bfff17 	ldw	r2,-4(fp)
  807448:	00c0c804 	movi	r3,800
  80744c:	10c00415 	stw	r3,16(r2)
  d->AVI_time = AVI_VALUE;
  807450:	e0bfff17 	ldw	r2,-4(fp)
  807454:	00c04b04 	movi	r3,300
  807458:	10c00515 	stw	r3,20(r2)
  d->ready = 0;
  80745c:	e0bfff17 	ldw	r2,-4(fp)
  807460:	10000605 	stb	zero,24(r2)
  d->_region0_null_URI = 0.0;
  807464:	e0bfff17 	ldw	r2,-4(fp)
  807468:	10000715 	stw	zero,28(r2)
  80746c:	10000815 	stw	zero,32(r2)
  d->_region1_null_LRI = 0.0;
  807470:	e0bfff17 	ldw	r2,-4(fp)
  807474:	10000915 	stw	zero,36(r2)
  807478:	10000a15 	stw	zero,40(r2)
  d->_region2_null_VRP = 0.0;
  80747c:	e0bfff17 	ldw	r2,-4(fp)
  807480:	10000b15 	stw	zero,44(r2)
  807484:	10000c15 	stw	zero,48(r2)
  d->_region3_null_PVARP = 0.0;
  807488:	e0bfff17 	ldw	r2,-4(fp)
  80748c:	10000d15 	stw	zero,52(r2)
  807490:	10000e15 	stw	zero,56(r2)
  d->_region4_null_AEI = 0.0;
  807494:	e0bfff17 	ldw	r2,-4(fp)
  807498:	10000f15 	stw	zero,60(r2)
  80749c:	10001015 	stw	zero,64(r2)
  d->_region5_null_AVI = 0.0;
  8074a0:	e0bfff17 	ldw	r2,-4(fp)
  8074a4:	10001115 	stw	zero,68(r2)
  8074a8:	10001215 	stw	zero,72(r2)
  d->deltaT = 0.0;
  8074ac:	e0bfff17 	ldw	r2,-4(fp)
  8074b0:	10001315 	stw	zero,76(r2)
  8074b4:	10001415 	stw	zero,80(r2)
  d->sleepT = 0.0;
  8074b8:	e0bfff17 	ldw	r2,-4(fp)
  8074bc:	10001515 	stw	zero,84(r2)
  8074c0:	10001615 	stw	zero,88(r2)
  d->_reg_VP = 0;
  8074c4:	e0bfff17 	ldw	r2,-4(fp)
  8074c8:	10001945 	stb	zero,101(r2)
  d->_reg_VS_i = 0;
  8074cc:	e0bfff17 	ldw	r2,-4(fp)
  8074d0:	100019c5 	stb	zero,103(r2)
  d->_pg9 = 0;
  8074d4:	e0bfff17 	ldw	r2,-4(fp)
  8074d8:	100063c5 	stb	zero,399(r2)
  d->_pg217 = 0;
  8074dc:	e0bfff17 	ldw	r2,-4(fp)
  8074e0:	10006405 	stb	zero,400(r2)
  d->_pg13 = 0;
  8074e4:	e0bfff17 	ldw	r2,-4(fp)
  8074e8:	10006445 	stb	zero,401(r2)
  d->_pg7_e1 = 0;
  8074ec:	e0bfff17 	ldw	r2,-4(fp)
  8074f0:	10006485 	stb	zero,402(r2)
  d->_pg36 = 0;
  8074f4:	e0bfff17 	ldw	r2,-4(fp)
  8074f8:	100064c5 	stb	zero,403(r2)
  d->_pg37 = 0;
  8074fc:	e0bfff17 	ldw	r2,-4(fp)
  807500:	10006505 	stb	zero,404(r2)
  d->_pg14 = 0;
  807504:	e0bfff17 	ldw	r2,-4(fp)
  807508:	10006545 	stb	zero,405(r2)
  d->_pg46 = 0;
  80750c:	e0bfff17 	ldw	r2,-4(fp)
  807510:	10006585 	stb	zero,406(r2)
  d->_pg50 = 0;
  807514:	e0bfff17 	ldw	r2,-4(fp)
  807518:	100065c5 	stb	zero,407(r2)
  d->_pg44_e1 = 0;
  80751c:	e0bfff17 	ldw	r2,-4(fp)
  807520:	10006605 	stb	zero,408(r2)
  d->_pg74 = 0;
  807524:	e0bfff17 	ldw	r2,-4(fp)
  807528:	10006645 	stb	zero,409(r2)
  d->_pg73 = 0;
  80752c:	e0bfff17 	ldw	r2,-4(fp)
  807530:	10006685 	stb	zero,410(r2)
  d->_pg51_e2 = 0;
  807534:	e0bfff17 	ldw	r2,-4(fp)
  807538:	100066c5 	stb	zero,411(r2)
  d->_pg83 = 0;
  80753c:	e0bfff17 	ldw	r2,-4(fp)
  807540:	10006705 	stb	zero,412(r2)
  d->_pg89 = 0;
  807544:	e0bfff17 	ldw	r2,-4(fp)
  807548:	10006745 	stb	zero,413(r2)
  d->_pg88 = 0;
  80754c:	e0bfff17 	ldw	r2,-4(fp)
  807550:	10006785 	stb	zero,414(r2)
  d->_pg114 = 0;
  807554:	e0bfff17 	ldw	r2,-4(fp)
  807558:	100067c5 	stb	zero,415(r2)
  d->_pg116 = 0;
  80755c:	e0bfff17 	ldw	r2,-4(fp)
  807560:	10006805 	stb	zero,416(r2)
  d->_pg97_e3 = 0;
  807564:	e0bfff17 	ldw	r2,-4(fp)
  807568:	10006845 	stb	zero,417(r2)
  d->_pg129 = 0;
  80756c:	e0bfff17 	ldw	r2,-4(fp)
  807570:	10006885 	stb	zero,418(r2)
  d->_pg134 = 0;
  807574:	e0bfff17 	ldw	r2,-4(fp)
  807578:	100068c5 	stb	zero,419(r2)
  d->_pg130_e2 = 0;
  80757c:	e0bfff17 	ldw	r2,-4(fp)
  807580:	10006905 	stb	zero,420(r2)
  d->_pg158 = 0;
  807584:	e0bfff17 	ldw	r2,-4(fp)
  807588:	10006945 	stb	zero,421(r2)
  d->_pg156 = 0;
  80758c:	e0bfff17 	ldw	r2,-4(fp)
  807590:	10006985 	stb	zero,422(r2)
  d->_pg139 = 0;
  807594:	e0bfff17 	ldw	r2,-4(fp)
  807598:	100069c5 	stb	zero,423(r2)
  d->_pg179 = 0;
  80759c:	e0bfff17 	ldw	r2,-4(fp)
  8075a0:	10006a05 	stb	zero,424(r2)
  d->_pg181_e3 = 0;
  8075a4:	e0bfff17 	ldw	r2,-4(fp)
  8075a8:	10006a45 	stb	zero,425(r2)
  d->_pg195 = 0;
  8075ac:	e0bfff17 	ldw	r2,-4(fp)
  8075b0:	10006a85 	stb	zero,426(r2)
  d->_pg173 = 0;
  8075b4:	e0bfff17 	ldw	r2,-4(fp)
  8075b8:	10006ac5 	stb	zero,427(r2)
  d->_pg167 = 0;
  8075bc:	e0bfff17 	ldw	r2,-4(fp)
  8075c0:	10006b05 	stb	zero,428(r2)
  d->_pg176 = 0;
  8075c4:	e0bfff17 	ldw	r2,-4(fp)
  8075c8:	10006b45 	stb	zero,429(r2)
  d->_pg206 = 0;
  8075cc:	e0bfff17 	ldw	r2,-4(fp)
  8075d0:	10006b85 	stb	zero,430(r2)
  d->_pg213 = 0;
  8075d4:	e0bfff17 	ldw	r2,-4(fp)
  8075d8:	10006bc5 	stb	zero,431(r2)
  d->_pg210 = 0;
  8075dc:	e0bfff17 	ldw	r2,-4(fp)
  8075e0:	10006c05 	stb	zero,432(r2)
  d->_pg202 = 0;
  8075e4:	e0bfff17 	ldw	r2,-4(fp)
  8075e8:	10006c45 	stb	zero,433(r2)
  d->_pg231 = 0;
  8075ec:	e0bfff17 	ldw	r2,-4(fp)
  8075f0:	10006c85 	stb	zero,434(r2)
  d->_pg211_e1 = 0;
  8075f4:	e0bfff17 	ldw	r2,-4(fp)
  8075f8:	10006cc5 	stb	zero,435(r2)
}
  8075fc:	0001883a 	nop
  807600:	e037883a 	mov	sp,fp
  807604:	df000017 	ldw	fp,0(sp)
  807608:	dec00104 	addi	sp,sp,4
  80760c:	f800283a 	ret

00807610 <tick>:

void tick(TickData* d) {
  807610:	defffd04 	addi	sp,sp,-12
  807614:	dfc00215 	stw	ra,8(sp)
  807618:	df000115 	stw	fp,4(sp)
  80761c:	df000104 	addi	fp,sp,4
  807620:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  807624:	e13fff17 	ldw	r4,-4(fp)
  807628:	08008100 	call	800810 <logic>

  d->_pg9 = d->_g9;
  80762c:	e0bfff17 	ldw	r2,-4(fp)
  807630:	10c02003 	ldbu	r3,128(r2)
  807634:	e0bfff17 	ldw	r2,-4(fp)
  807638:	10c063c5 	stb	r3,399(r2)
  d->_pg217 = d->_g217;
  80763c:	e0bfff17 	ldw	r2,-4(fp)
  807640:	10c04243 	ldbu	r3,265(r2)
  807644:	e0bfff17 	ldw	r2,-4(fp)
  807648:	10c06405 	stb	r3,400(r2)
  d->_pg13 = d->_g13;
  80764c:	e0bfff17 	ldw	r2,-4(fp)
  807650:	10c020c3 	ldbu	r3,131(r2)
  807654:	e0bfff17 	ldw	r2,-4(fp)
  807658:	10c06445 	stb	r3,401(r2)
  d->_pg7_e1 = d->_g7_e1;
  80765c:	e0bfff17 	ldw	r2,-4(fp)
  807660:	10c05c03 	ldbu	r3,368(r2)
  807664:	e0bfff17 	ldw	r2,-4(fp)
  807668:	10c06485 	stb	r3,402(r2)
  d->_pg36 = d->_g36;
  80766c:	e0bfff17 	ldw	r2,-4(fp)
  807670:	10c024c3 	ldbu	r3,147(r2)
  807674:	e0bfff17 	ldw	r2,-4(fp)
  807678:	10c064c5 	stb	r3,403(r2)
  d->_pg37 = d->_g37;
  80767c:	e0bfff17 	ldw	r2,-4(fp)
  807680:	10c02503 	ldbu	r3,148(r2)
  807684:	e0bfff17 	ldw	r2,-4(fp)
  807688:	10c06505 	stb	r3,404(r2)
  d->_pg14 = d->_g14;
  80768c:	e0bfff17 	ldw	r2,-4(fp)
  807690:	10c02103 	ldbu	r3,132(r2)
  807694:	e0bfff17 	ldw	r2,-4(fp)
  807698:	10c06545 	stb	r3,405(r2)
  d->_pg46 = d->_g46;
  80769c:	e0bfff17 	ldw	r2,-4(fp)
  8076a0:	10c02603 	ldbu	r3,152(r2)
  8076a4:	e0bfff17 	ldw	r2,-4(fp)
  8076a8:	10c06585 	stb	r3,406(r2)
  d->_pg50 = d->_g50;
  8076ac:	e0bfff17 	ldw	r2,-4(fp)
  8076b0:	10c026c3 	ldbu	r3,155(r2)
  8076b4:	e0bfff17 	ldw	r2,-4(fp)
  8076b8:	10c065c5 	stb	r3,407(r2)
  d->_pg44_e1 = d->_g44_e1;
  8076bc:	e0bfff17 	ldw	r2,-4(fp)
  8076c0:	10c05d43 	ldbu	r3,373(r2)
  8076c4:	e0bfff17 	ldw	r2,-4(fp)
  8076c8:	10c06605 	stb	r3,408(r2)
  d->_pg74 = d->_g74;
  8076cc:	e0bfff17 	ldw	r2,-4(fp)
  8076d0:	10c02b03 	ldbu	r3,172(r2)
  8076d4:	e0bfff17 	ldw	r2,-4(fp)
  8076d8:	10c06645 	stb	r3,409(r2)
  d->_pg73 = d->_g73;
  8076dc:	e0bfff17 	ldw	r2,-4(fp)
  8076e0:	10c02ac3 	ldbu	r3,171(r2)
  8076e4:	e0bfff17 	ldw	r2,-4(fp)
  8076e8:	10c06685 	stb	r3,410(r2)
  d->_pg51_e2 = d->_g51_e2;
  8076ec:	e0bfff17 	ldw	r2,-4(fp)
  8076f0:	10c05d83 	ldbu	r3,374(r2)
  8076f4:	e0bfff17 	ldw	r2,-4(fp)
  8076f8:	10c066c5 	stb	r3,411(r2)
  d->_pg83 = d->_g83;
  8076fc:	e0bfff17 	ldw	r2,-4(fp)
  807700:	10c02c03 	ldbu	r3,176(r2)
  807704:	e0bfff17 	ldw	r2,-4(fp)
  807708:	10c06705 	stb	r3,412(r2)
  d->_pg89 = d->_g89;
  80770c:	e0bfff17 	ldw	r2,-4(fp)
  807710:	10c02d43 	ldbu	r3,181(r2)
  807714:	e0bfff17 	ldw	r2,-4(fp)
  807718:	10c06745 	stb	r3,413(r2)
  d->_pg88 = d->_g88;
  80771c:	e0bfff17 	ldw	r2,-4(fp)
  807720:	10c02d03 	ldbu	r3,180(r2)
  807724:	e0bfff17 	ldw	r2,-4(fp)
  807728:	10c06785 	stb	r3,414(r2)
  d->_pg114 = d->_g114;
  80772c:	e0bfff17 	ldw	r2,-4(fp)
  807730:	10c031c3 	ldbu	r3,199(r2)
  807734:	e0bfff17 	ldw	r2,-4(fp)
  807738:	10c067c5 	stb	r3,415(r2)
  d->_pg116 = d->_g116;
  80773c:	e0bfff17 	ldw	r2,-4(fp)
  807740:	10c03243 	ldbu	r3,201(r2)
  807744:	e0bfff17 	ldw	r2,-4(fp)
  807748:	10c06805 	stb	r3,416(r2)
  d->_pg97_e3 = d->_g97_e3;
  80774c:	e0bfff17 	ldw	r2,-4(fp)
  807750:	10c05f03 	ldbu	r3,380(r2)
  807754:	e0bfff17 	ldw	r2,-4(fp)
  807758:	10c06845 	stb	r3,417(r2)
  d->_pg129 = d->_g129;
  80775c:	e0bfff17 	ldw	r2,-4(fp)
  807760:	10c03403 	ldbu	r3,208(r2)
  807764:	e0bfff17 	ldw	r2,-4(fp)
  807768:	10c06885 	stb	r3,418(r2)
  d->_pg134 = d->_g134;
  80776c:	e0bfff17 	ldw	r2,-4(fp)
  807770:	10c03503 	ldbu	r3,212(r2)
  807774:	e0bfff17 	ldw	r2,-4(fp)
  807778:	10c068c5 	stb	r3,419(r2)
  d->_pg130_e2 = d->_g130_e2;
  80777c:	e0bfff17 	ldw	r2,-4(fp)
  807780:	10c06003 	ldbu	r3,384(r2)
  807784:	e0bfff17 	ldw	r2,-4(fp)
  807788:	10c06905 	stb	r3,420(r2)
  d->_pg158 = d->_g158;
  80778c:	e0bfff17 	ldw	r2,-4(fp)
  807790:	10c03983 	ldbu	r3,230(r2)
  807794:	e0bfff17 	ldw	r2,-4(fp)
  807798:	10c06945 	stb	r3,421(r2)
  d->_pg156 = d->_g156;
  80779c:	e0bfff17 	ldw	r2,-4(fp)
  8077a0:	10c03903 	ldbu	r3,228(r2)
  8077a4:	e0bfff17 	ldw	r2,-4(fp)
  8077a8:	10c06985 	stb	r3,422(r2)
  d->_pg139 = d->_g139;
  8077ac:	e0bfff17 	ldw	r2,-4(fp)
  8077b0:	10c035c3 	ldbu	r3,215(r2)
  8077b4:	e0bfff17 	ldw	r2,-4(fp)
  8077b8:	10c069c5 	stb	r3,423(r2)
  d->_pg179 = d->_g179;
  8077bc:	e0bfff17 	ldw	r2,-4(fp)
  8077c0:	10c03c83 	ldbu	r3,242(r2)
  8077c4:	e0bfff17 	ldw	r2,-4(fp)
  8077c8:	10c06a05 	stb	r3,424(r2)
  d->_pg181_e3 = d->_g181_e3;
  8077cc:	e0bfff17 	ldw	r2,-4(fp)
  8077d0:	10c06183 	ldbu	r3,390(r2)
  8077d4:	e0bfff17 	ldw	r2,-4(fp)
  8077d8:	10c06a45 	stb	r3,425(r2)
  d->_pg195 = d->_g195;
  8077dc:	e0bfff17 	ldw	r2,-4(fp)
  8077e0:	10c03f83 	ldbu	r3,254(r2)
  8077e4:	e0bfff17 	ldw	r2,-4(fp)
  8077e8:	10c06a85 	stb	r3,426(r2)
  d->_pg173 = d->_g173;
  8077ec:	e0bfff17 	ldw	r2,-4(fp)
  8077f0:	10c03bc3 	ldbu	r3,239(r2)
  8077f4:	e0bfff17 	ldw	r2,-4(fp)
  8077f8:	10c06ac5 	stb	r3,427(r2)
  d->_pg167 = d->_g167;
  8077fc:	e0bfff17 	ldw	r2,-4(fp)
  807800:	10c03a83 	ldbu	r3,234(r2)
  807804:	e0bfff17 	ldw	r2,-4(fp)
  807808:	10c06b05 	stb	r3,428(r2)
  d->_pg176 = d->_g176;
  80780c:	e0bfff17 	ldw	r2,-4(fp)
  807810:	10c03c43 	ldbu	r3,241(r2)
  807814:	e0bfff17 	ldw	r2,-4(fp)
  807818:	10c06b45 	stb	r3,429(r2)
  d->_pg206 = d->_g206;
  80781c:	e0bfff17 	ldw	r2,-4(fp)
  807820:	10c040c3 	ldbu	r3,259(r2)
  807824:	e0bfff17 	ldw	r2,-4(fp)
  807828:	10c06b85 	stb	r3,430(r2)
  d->_pg213 = d->_g213;
  80782c:	e0bfff17 	ldw	r2,-4(fp)
  807830:	10c04183 	ldbu	r3,262(r2)
  807834:	e0bfff17 	ldw	r2,-4(fp)
  807838:	10c06bc5 	stb	r3,431(r2)
  d->_pg210 = d->_g210;
  80783c:	e0bfff17 	ldw	r2,-4(fp)
  807840:	10c04103 	ldbu	r3,260(r2)
  807844:	e0bfff17 	ldw	r2,-4(fp)
  807848:	10c06c05 	stb	r3,432(r2)
  d->_pg202 = d->_g202;
  80784c:	e0bfff17 	ldw	r2,-4(fp)
  807850:	10c04043 	ldbu	r3,257(r2)
  807854:	e0bfff17 	ldw	r2,-4(fp)
  807858:	10c06c45 	stb	r3,433(r2)
  d->_pg231 = d->_g231;
  80785c:	e0bfff17 	ldw	r2,-4(fp)
  807860:	10c04443 	ldbu	r3,273(r2)
  807864:	e0bfff17 	ldw	r2,-4(fp)
  807868:	10c06c85 	stb	r3,434(r2)
  d->_pg211_e1 = d->_g211_e1;
  80786c:	e0bfff17 	ldw	r2,-4(fp)
  807870:	10c062c3 	ldbu	r3,395(r2)
  807874:	e0bfff17 	ldw	r2,-4(fp)
  807878:	10c06cc5 	stb	r3,435(r2)
  d->_GO = 0;
  80787c:	e0bfff17 	ldw	r2,-4(fp)
  807880:	10004545 	stb	zero,277(r2)
}
  807884:	0001883a 	nop
  807888:	e037883a 	mov	sp,fp
  80788c:	dfc00117 	ldw	ra,4(sp)
  807890:	df000017 	ldw	fp,0(sp)
  807894:	dec00204 	addi	sp,sp,8
  807898:	f800283a 	ret

0080789c <__adddf3>:
  80789c:	02c00434 	movhi	r11,16
  8078a0:	5affffc4 	addi	r11,r11,-1
  8078a4:	2806d7fa 	srli	r3,r5,31
  8078a8:	2ad4703a 	and	r10,r5,r11
  8078ac:	3ad2703a 	and	r9,r7,r11
  8078b0:	3804d53a 	srli	r2,r7,20
  8078b4:	3018d77a 	srli	r12,r6,29
  8078b8:	280ad53a 	srli	r5,r5,20
  8078bc:	501490fa 	slli	r10,r10,3
  8078c0:	2010d77a 	srli	r8,r4,29
  8078c4:	481290fa 	slli	r9,r9,3
  8078c8:	380ed7fa 	srli	r7,r7,31
  8078cc:	defffb04 	addi	sp,sp,-20
  8078d0:	dc800215 	stw	r18,8(sp)
  8078d4:	dc400115 	stw	r17,4(sp)
  8078d8:	dc000015 	stw	r16,0(sp)
  8078dc:	dfc00415 	stw	ra,16(sp)
  8078e0:	dcc00315 	stw	r19,12(sp)
  8078e4:	1c803fcc 	andi	r18,r3,255
  8078e8:	2c01ffcc 	andi	r16,r5,2047
  8078ec:	5210b03a 	or	r8,r10,r8
  8078f0:	202290fa 	slli	r17,r4,3
  8078f4:	1081ffcc 	andi	r2,r2,2047
  8078f8:	4b12b03a 	or	r9,r9,r12
  8078fc:	300c90fa 	slli	r6,r6,3
  807900:	91c07526 	beq	r18,r7,807ad8 <__adddf3+0x23c>
  807904:	8087c83a 	sub	r3,r16,r2
  807908:	00c0ab0e 	bge	zero,r3,807bb8 <__adddf3+0x31c>
  80790c:	10002a1e 	bne	r2,zero,8079b8 <__adddf3+0x11c>
  807910:	4984b03a 	or	r2,r9,r6
  807914:	1000961e 	bne	r2,zero,807b70 <__adddf3+0x2d4>
  807918:	888001cc 	andi	r2,r17,7
  80791c:	10000726 	beq	r2,zero,80793c <__adddf3+0xa0>
  807920:	888003cc 	andi	r2,r17,15
  807924:	00c00104 	movi	r3,4
  807928:	10c00426 	beq	r2,r3,80793c <__adddf3+0xa0>
  80792c:	88c7883a 	add	r3,r17,r3
  807930:	1c63803a 	cmpltu	r17,r3,r17
  807934:	4451883a 	add	r8,r8,r17
  807938:	1823883a 	mov	r17,r3
  80793c:	4080202c 	andhi	r2,r8,128
  807940:	10005926 	beq	r2,zero,807aa8 <__adddf3+0x20c>
  807944:	84000044 	addi	r16,r16,1
  807948:	0081ffc4 	movi	r2,2047
  80794c:	8080ba26 	beq	r16,r2,807c38 <__adddf3+0x39c>
  807950:	00bfe034 	movhi	r2,65408
  807954:	10bfffc4 	addi	r2,r2,-1
  807958:	4090703a 	and	r8,r8,r2
  80795c:	4004977a 	slli	r2,r8,29
  807960:	4010927a 	slli	r8,r8,9
  807964:	8822d0fa 	srli	r17,r17,3
  807968:	8401ffcc 	andi	r16,r16,2047
  80796c:	4010d33a 	srli	r8,r8,12
  807970:	9007883a 	mov	r3,r18
  807974:	1444b03a 	or	r2,r2,r17
  807978:	8401ffcc 	andi	r16,r16,2047
  80797c:	8020953a 	slli	r16,r16,20
  807980:	18c03fcc 	andi	r3,r3,255
  807984:	01000434 	movhi	r4,16
  807988:	213fffc4 	addi	r4,r4,-1
  80798c:	180697fa 	slli	r3,r3,31
  807990:	4110703a 	and	r8,r8,r4
  807994:	4410b03a 	or	r8,r8,r16
  807998:	40c6b03a 	or	r3,r8,r3
  80799c:	dfc00417 	ldw	ra,16(sp)
  8079a0:	dcc00317 	ldw	r19,12(sp)
  8079a4:	dc800217 	ldw	r18,8(sp)
  8079a8:	dc400117 	ldw	r17,4(sp)
  8079ac:	dc000017 	ldw	r16,0(sp)
  8079b0:	dec00504 	addi	sp,sp,20
  8079b4:	f800283a 	ret
  8079b8:	0081ffc4 	movi	r2,2047
  8079bc:	80bfd626 	beq	r16,r2,807918 <__alt_mem_onchip_mem+0xff7ff918>
  8079c0:	4a402034 	orhi	r9,r9,128
  8079c4:	00800e04 	movi	r2,56
  8079c8:	10c09f16 	blt	r2,r3,807c48 <__adddf3+0x3ac>
  8079cc:	008007c4 	movi	r2,31
  8079d0:	10c0c216 	blt	r2,r3,807cdc <__adddf3+0x440>
  8079d4:	00800804 	movi	r2,32
  8079d8:	10c5c83a 	sub	r2,r2,r3
  8079dc:	488a983a 	sll	r5,r9,r2
  8079e0:	30c8d83a 	srl	r4,r6,r3
  8079e4:	3084983a 	sll	r2,r6,r2
  8079e8:	48c6d83a 	srl	r3,r9,r3
  8079ec:	290cb03a 	or	r6,r5,r4
  8079f0:	1004c03a 	cmpne	r2,r2,zero
  8079f4:	308cb03a 	or	r6,r6,r2
  8079f8:	898dc83a 	sub	r6,r17,r6
  8079fc:	89a3803a 	cmpltu	r17,r17,r6
  807a00:	40d1c83a 	sub	r8,r8,r3
  807a04:	4451c83a 	sub	r8,r8,r17
  807a08:	3023883a 	mov	r17,r6
  807a0c:	4080202c 	andhi	r2,r8,128
  807a10:	10002326 	beq	r2,zero,807aa0 <__adddf3+0x204>
  807a14:	04c02034 	movhi	r19,128
  807a18:	9cffffc4 	addi	r19,r19,-1
  807a1c:	44e6703a 	and	r19,r8,r19
  807a20:	98007626 	beq	r19,zero,807bfc <__adddf3+0x360>
  807a24:	9809883a 	mov	r4,r19
  807a28:	0808cf00 	call	808cf0 <__clzsi2>
  807a2c:	10fffe04 	addi	r3,r2,-8
  807a30:	010007c4 	movi	r4,31
  807a34:	20c07716 	blt	r4,r3,807c14 <__adddf3+0x378>
  807a38:	00800804 	movi	r2,32
  807a3c:	10c5c83a 	sub	r2,r2,r3
  807a40:	8884d83a 	srl	r2,r17,r2
  807a44:	98d0983a 	sll	r8,r19,r3
  807a48:	88e2983a 	sll	r17,r17,r3
  807a4c:	1204b03a 	or	r2,r2,r8
  807a50:	1c007416 	blt	r3,r16,807c24 <__adddf3+0x388>
  807a54:	1c21c83a 	sub	r16,r3,r16
  807a58:	82000044 	addi	r8,r16,1
  807a5c:	00c007c4 	movi	r3,31
  807a60:	1a009116 	blt	r3,r8,807ca8 <__adddf3+0x40c>
  807a64:	00c00804 	movi	r3,32
  807a68:	1a07c83a 	sub	r3,r3,r8
  807a6c:	8a08d83a 	srl	r4,r17,r8
  807a70:	88e2983a 	sll	r17,r17,r3
  807a74:	10c6983a 	sll	r3,r2,r3
  807a78:	1210d83a 	srl	r8,r2,r8
  807a7c:	8804c03a 	cmpne	r2,r17,zero
  807a80:	1906b03a 	or	r3,r3,r4
  807a84:	18a2b03a 	or	r17,r3,r2
  807a88:	0021883a 	mov	r16,zero
  807a8c:	003fa206 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807a90:	1890b03a 	or	r8,r3,r2
  807a94:	40017d26 	beq	r8,zero,80808c <__adddf3+0x7f0>
  807a98:	1011883a 	mov	r8,r2
  807a9c:	1823883a 	mov	r17,r3
  807aa0:	888001cc 	andi	r2,r17,7
  807aa4:	103f9e1e 	bne	r2,zero,807920 <__alt_mem_onchip_mem+0xff7ff920>
  807aa8:	4004977a 	slli	r2,r8,29
  807aac:	8822d0fa 	srli	r17,r17,3
  807ab0:	4010d0fa 	srli	r8,r8,3
  807ab4:	9007883a 	mov	r3,r18
  807ab8:	1444b03a 	or	r2,r2,r17
  807abc:	0101ffc4 	movi	r4,2047
  807ac0:	81002426 	beq	r16,r4,807b54 <__adddf3+0x2b8>
  807ac4:	8120703a 	and	r16,r16,r4
  807ac8:	01000434 	movhi	r4,16
  807acc:	213fffc4 	addi	r4,r4,-1
  807ad0:	4110703a 	and	r8,r8,r4
  807ad4:	003fa806 	br	807978 <__alt_mem_onchip_mem+0xff7ff978>
  807ad8:	8089c83a 	sub	r4,r16,r2
  807adc:	01005e0e 	bge	zero,r4,807c58 <__adddf3+0x3bc>
  807ae0:	10002b26 	beq	r2,zero,807b90 <__adddf3+0x2f4>
  807ae4:	0081ffc4 	movi	r2,2047
  807ae8:	80bf8b26 	beq	r16,r2,807918 <__alt_mem_onchip_mem+0xff7ff918>
  807aec:	4a402034 	orhi	r9,r9,128
  807af0:	00800e04 	movi	r2,56
  807af4:	1100a40e 	bge	r2,r4,807d88 <__adddf3+0x4ec>
  807af8:	498cb03a 	or	r6,r9,r6
  807afc:	300ac03a 	cmpne	r5,r6,zero
  807b00:	0013883a 	mov	r9,zero
  807b04:	2c4b883a 	add	r5,r5,r17
  807b08:	2c63803a 	cmpltu	r17,r5,r17
  807b0c:	4a11883a 	add	r8,r9,r8
  807b10:	8a11883a 	add	r8,r17,r8
  807b14:	2823883a 	mov	r17,r5
  807b18:	4080202c 	andhi	r2,r8,128
  807b1c:	103fe026 	beq	r2,zero,807aa0 <__alt_mem_onchip_mem+0xff7ffaa0>
  807b20:	84000044 	addi	r16,r16,1
  807b24:	0081ffc4 	movi	r2,2047
  807b28:	8080d226 	beq	r16,r2,807e74 <__adddf3+0x5d8>
  807b2c:	00bfe034 	movhi	r2,65408
  807b30:	10bfffc4 	addi	r2,r2,-1
  807b34:	4090703a 	and	r8,r8,r2
  807b38:	880ad07a 	srli	r5,r17,1
  807b3c:	400897fa 	slli	r4,r8,31
  807b40:	88c0004c 	andi	r3,r17,1
  807b44:	28e2b03a 	or	r17,r5,r3
  807b48:	4010d07a 	srli	r8,r8,1
  807b4c:	2462b03a 	or	r17,r4,r17
  807b50:	003f7106 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807b54:	4088b03a 	or	r4,r8,r2
  807b58:	20014526 	beq	r4,zero,808070 <__adddf3+0x7d4>
  807b5c:	01000434 	movhi	r4,16
  807b60:	42000234 	orhi	r8,r8,8
  807b64:	213fffc4 	addi	r4,r4,-1
  807b68:	4110703a 	and	r8,r8,r4
  807b6c:	003f8206 	br	807978 <__alt_mem_onchip_mem+0xff7ff978>
  807b70:	18ffffc4 	addi	r3,r3,-1
  807b74:	1800491e 	bne	r3,zero,807c9c <__adddf3+0x400>
  807b78:	898bc83a 	sub	r5,r17,r6
  807b7c:	8963803a 	cmpltu	r17,r17,r5
  807b80:	4251c83a 	sub	r8,r8,r9
  807b84:	4451c83a 	sub	r8,r8,r17
  807b88:	2823883a 	mov	r17,r5
  807b8c:	003f9f06 	br	807a0c <__alt_mem_onchip_mem+0xff7ffa0c>
  807b90:	4984b03a 	or	r2,r9,r6
  807b94:	103f6026 	beq	r2,zero,807918 <__alt_mem_onchip_mem+0xff7ff918>
  807b98:	213fffc4 	addi	r4,r4,-1
  807b9c:	2000931e 	bne	r4,zero,807dec <__adddf3+0x550>
  807ba0:	898d883a 	add	r6,r17,r6
  807ba4:	3463803a 	cmpltu	r17,r6,r17
  807ba8:	4251883a 	add	r8,r8,r9
  807bac:	8a11883a 	add	r8,r17,r8
  807bb0:	3023883a 	mov	r17,r6
  807bb4:	003fd806 	br	807b18 <__alt_mem_onchip_mem+0xff7ffb18>
  807bb8:	1800541e 	bne	r3,zero,807d0c <__adddf3+0x470>
  807bbc:	80800044 	addi	r2,r16,1
  807bc0:	1081ffcc 	andi	r2,r2,2047
  807bc4:	00c00044 	movi	r3,1
  807bc8:	1880a00e 	bge	r3,r2,807e4c <__adddf3+0x5b0>
  807bcc:	8989c83a 	sub	r4,r17,r6
  807bd0:	8905803a 	cmpltu	r2,r17,r4
  807bd4:	4267c83a 	sub	r19,r8,r9
  807bd8:	98a7c83a 	sub	r19,r19,r2
  807bdc:	9880202c 	andhi	r2,r19,128
  807be0:	10006326 	beq	r2,zero,807d70 <__adddf3+0x4d4>
  807be4:	3463c83a 	sub	r17,r6,r17
  807be8:	4a07c83a 	sub	r3,r9,r8
  807bec:	344d803a 	cmpltu	r6,r6,r17
  807bf0:	19a7c83a 	sub	r19,r3,r6
  807bf4:	3825883a 	mov	r18,r7
  807bf8:	983f8a1e 	bne	r19,zero,807a24 <__alt_mem_onchip_mem+0xff7ffa24>
  807bfc:	8809883a 	mov	r4,r17
  807c00:	0808cf00 	call	808cf0 <__clzsi2>
  807c04:	10800804 	addi	r2,r2,32
  807c08:	10fffe04 	addi	r3,r2,-8
  807c0c:	010007c4 	movi	r4,31
  807c10:	20ff890e 	bge	r4,r3,807a38 <__alt_mem_onchip_mem+0xff7ffa38>
  807c14:	10bff604 	addi	r2,r2,-40
  807c18:	8884983a 	sll	r2,r17,r2
  807c1c:	0023883a 	mov	r17,zero
  807c20:	1c3f8c0e 	bge	r3,r16,807a54 <__alt_mem_onchip_mem+0xff7ffa54>
  807c24:	023fe034 	movhi	r8,65408
  807c28:	423fffc4 	addi	r8,r8,-1
  807c2c:	80e1c83a 	sub	r16,r16,r3
  807c30:	1210703a 	and	r8,r2,r8
  807c34:	003f3806 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807c38:	9007883a 	mov	r3,r18
  807c3c:	0011883a 	mov	r8,zero
  807c40:	0005883a 	mov	r2,zero
  807c44:	003f4c06 	br	807978 <__alt_mem_onchip_mem+0xff7ff978>
  807c48:	498cb03a 	or	r6,r9,r6
  807c4c:	300cc03a 	cmpne	r6,r6,zero
  807c50:	0007883a 	mov	r3,zero
  807c54:	003f6806 	br	8079f8 <__alt_mem_onchip_mem+0xff7ff9f8>
  807c58:	20009c1e 	bne	r4,zero,807ecc <__adddf3+0x630>
  807c5c:	80800044 	addi	r2,r16,1
  807c60:	1141ffcc 	andi	r5,r2,2047
  807c64:	01000044 	movi	r4,1
  807c68:	2140670e 	bge	r4,r5,807e08 <__adddf3+0x56c>
  807c6c:	0101ffc4 	movi	r4,2047
  807c70:	11007f26 	beq	r2,r4,807e70 <__adddf3+0x5d4>
  807c74:	898d883a 	add	r6,r17,r6
  807c78:	4247883a 	add	r3,r8,r9
  807c7c:	3451803a 	cmpltu	r8,r6,r17
  807c80:	40d1883a 	add	r8,r8,r3
  807c84:	402297fa 	slli	r17,r8,31
  807c88:	300cd07a 	srli	r6,r6,1
  807c8c:	4010d07a 	srli	r8,r8,1
  807c90:	1021883a 	mov	r16,r2
  807c94:	89a2b03a 	or	r17,r17,r6
  807c98:	003f1f06 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807c9c:	0081ffc4 	movi	r2,2047
  807ca0:	80bf481e 	bne	r16,r2,8079c4 <__alt_mem_onchip_mem+0xff7ff9c4>
  807ca4:	003f1c06 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807ca8:	843ff844 	addi	r16,r16,-31
  807cac:	01000804 	movi	r4,32
  807cb0:	1406d83a 	srl	r3,r2,r16
  807cb4:	41005026 	beq	r8,r4,807df8 <__adddf3+0x55c>
  807cb8:	01001004 	movi	r4,64
  807cbc:	2211c83a 	sub	r8,r4,r8
  807cc0:	1204983a 	sll	r2,r2,r8
  807cc4:	88a2b03a 	or	r17,r17,r2
  807cc8:	8822c03a 	cmpne	r17,r17,zero
  807ccc:	1c62b03a 	or	r17,r3,r17
  807cd0:	0011883a 	mov	r8,zero
  807cd4:	0021883a 	mov	r16,zero
  807cd8:	003f7106 	br	807aa0 <__alt_mem_onchip_mem+0xff7ffaa0>
  807cdc:	193ff804 	addi	r4,r3,-32
  807ce0:	00800804 	movi	r2,32
  807ce4:	4908d83a 	srl	r4,r9,r4
  807ce8:	18804526 	beq	r3,r2,807e00 <__adddf3+0x564>
  807cec:	00801004 	movi	r2,64
  807cf0:	10c5c83a 	sub	r2,r2,r3
  807cf4:	4886983a 	sll	r3,r9,r2
  807cf8:	198cb03a 	or	r6,r3,r6
  807cfc:	300cc03a 	cmpne	r6,r6,zero
  807d00:	218cb03a 	or	r6,r4,r6
  807d04:	0007883a 	mov	r3,zero
  807d08:	003f3b06 	br	8079f8 <__alt_mem_onchip_mem+0xff7ff9f8>
  807d0c:	80002a26 	beq	r16,zero,807db8 <__adddf3+0x51c>
  807d10:	0101ffc4 	movi	r4,2047
  807d14:	11006826 	beq	r2,r4,807eb8 <__adddf3+0x61c>
  807d18:	00c7c83a 	sub	r3,zero,r3
  807d1c:	42002034 	orhi	r8,r8,128
  807d20:	01000e04 	movi	r4,56
  807d24:	20c07c16 	blt	r4,r3,807f18 <__adddf3+0x67c>
  807d28:	010007c4 	movi	r4,31
  807d2c:	20c0da16 	blt	r4,r3,808098 <__adddf3+0x7fc>
  807d30:	01000804 	movi	r4,32
  807d34:	20c9c83a 	sub	r4,r4,r3
  807d38:	4114983a 	sll	r10,r8,r4
  807d3c:	88cad83a 	srl	r5,r17,r3
  807d40:	8908983a 	sll	r4,r17,r4
  807d44:	40c6d83a 	srl	r3,r8,r3
  807d48:	5162b03a 	or	r17,r10,r5
  807d4c:	2008c03a 	cmpne	r4,r4,zero
  807d50:	8922b03a 	or	r17,r17,r4
  807d54:	3463c83a 	sub	r17,r6,r17
  807d58:	48c7c83a 	sub	r3,r9,r3
  807d5c:	344d803a 	cmpltu	r6,r6,r17
  807d60:	1991c83a 	sub	r8,r3,r6
  807d64:	1021883a 	mov	r16,r2
  807d68:	3825883a 	mov	r18,r7
  807d6c:	003f2706 	br	807a0c <__alt_mem_onchip_mem+0xff7ffa0c>
  807d70:	24d0b03a 	or	r8,r4,r19
  807d74:	40001b1e 	bne	r8,zero,807de4 <__adddf3+0x548>
  807d78:	0005883a 	mov	r2,zero
  807d7c:	0007883a 	mov	r3,zero
  807d80:	0021883a 	mov	r16,zero
  807d84:	003f4d06 	br	807abc <__alt_mem_onchip_mem+0xff7ffabc>
  807d88:	008007c4 	movi	r2,31
  807d8c:	11003c16 	blt	r2,r4,807e80 <__adddf3+0x5e4>
  807d90:	00800804 	movi	r2,32
  807d94:	1105c83a 	sub	r2,r2,r4
  807d98:	488e983a 	sll	r7,r9,r2
  807d9c:	310ad83a 	srl	r5,r6,r4
  807da0:	3084983a 	sll	r2,r6,r2
  807da4:	4912d83a 	srl	r9,r9,r4
  807da8:	394ab03a 	or	r5,r7,r5
  807dac:	1004c03a 	cmpne	r2,r2,zero
  807db0:	288ab03a 	or	r5,r5,r2
  807db4:	003f5306 	br	807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807db8:	4448b03a 	or	r4,r8,r17
  807dbc:	20003e26 	beq	r4,zero,807eb8 <__adddf3+0x61c>
  807dc0:	00c6303a 	nor	r3,zero,r3
  807dc4:	18003a1e 	bne	r3,zero,807eb0 <__adddf3+0x614>
  807dc8:	3463c83a 	sub	r17,r6,r17
  807dcc:	4a07c83a 	sub	r3,r9,r8
  807dd0:	344d803a 	cmpltu	r6,r6,r17
  807dd4:	1991c83a 	sub	r8,r3,r6
  807dd8:	1021883a 	mov	r16,r2
  807ddc:	3825883a 	mov	r18,r7
  807de0:	003f0a06 	br	807a0c <__alt_mem_onchip_mem+0xff7ffa0c>
  807de4:	2023883a 	mov	r17,r4
  807de8:	003f0d06 	br	807a20 <__alt_mem_onchip_mem+0xff7ffa20>
  807dec:	0081ffc4 	movi	r2,2047
  807df0:	80bf3f1e 	bne	r16,r2,807af0 <__alt_mem_onchip_mem+0xff7ffaf0>
  807df4:	003ec806 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807df8:	0005883a 	mov	r2,zero
  807dfc:	003fb106 	br	807cc4 <__alt_mem_onchip_mem+0xff7ffcc4>
  807e00:	0007883a 	mov	r3,zero
  807e04:	003fbc06 	br	807cf8 <__alt_mem_onchip_mem+0xff7ffcf8>
  807e08:	4444b03a 	or	r2,r8,r17
  807e0c:	8000871e 	bne	r16,zero,80802c <__adddf3+0x790>
  807e10:	1000ba26 	beq	r2,zero,8080fc <__adddf3+0x860>
  807e14:	4984b03a 	or	r2,r9,r6
  807e18:	103ebf26 	beq	r2,zero,807918 <__alt_mem_onchip_mem+0xff7ff918>
  807e1c:	8985883a 	add	r2,r17,r6
  807e20:	4247883a 	add	r3,r8,r9
  807e24:	1451803a 	cmpltu	r8,r2,r17
  807e28:	40d1883a 	add	r8,r8,r3
  807e2c:	40c0202c 	andhi	r3,r8,128
  807e30:	1023883a 	mov	r17,r2
  807e34:	183f1a26 	beq	r3,zero,807aa0 <__alt_mem_onchip_mem+0xff7ffaa0>
  807e38:	00bfe034 	movhi	r2,65408
  807e3c:	10bfffc4 	addi	r2,r2,-1
  807e40:	2021883a 	mov	r16,r4
  807e44:	4090703a 	and	r8,r8,r2
  807e48:	003eb306 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807e4c:	4444b03a 	or	r2,r8,r17
  807e50:	8000291e 	bne	r16,zero,807ef8 <__adddf3+0x65c>
  807e54:	10004b1e 	bne	r2,zero,807f84 <__adddf3+0x6e8>
  807e58:	4990b03a 	or	r8,r9,r6
  807e5c:	40008b26 	beq	r8,zero,80808c <__adddf3+0x7f0>
  807e60:	4811883a 	mov	r8,r9
  807e64:	3023883a 	mov	r17,r6
  807e68:	3825883a 	mov	r18,r7
  807e6c:	003eaa06 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807e70:	1021883a 	mov	r16,r2
  807e74:	0011883a 	mov	r8,zero
  807e78:	0005883a 	mov	r2,zero
  807e7c:	003f0f06 	br	807abc <__alt_mem_onchip_mem+0xff7ffabc>
  807e80:	217ff804 	addi	r5,r4,-32
  807e84:	00800804 	movi	r2,32
  807e88:	494ad83a 	srl	r5,r9,r5
  807e8c:	20807d26 	beq	r4,r2,808084 <__adddf3+0x7e8>
  807e90:	00801004 	movi	r2,64
  807e94:	1109c83a 	sub	r4,r2,r4
  807e98:	4912983a 	sll	r9,r9,r4
  807e9c:	498cb03a 	or	r6,r9,r6
  807ea0:	300cc03a 	cmpne	r6,r6,zero
  807ea4:	298ab03a 	or	r5,r5,r6
  807ea8:	0013883a 	mov	r9,zero
  807eac:	003f1506 	br	807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807eb0:	0101ffc4 	movi	r4,2047
  807eb4:	113f9a1e 	bne	r2,r4,807d20 <__alt_mem_onchip_mem+0xff7ffd20>
  807eb8:	4811883a 	mov	r8,r9
  807ebc:	3023883a 	mov	r17,r6
  807ec0:	1021883a 	mov	r16,r2
  807ec4:	3825883a 	mov	r18,r7
  807ec8:	003e9306 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807ecc:	8000161e 	bne	r16,zero,807f28 <__adddf3+0x68c>
  807ed0:	444ab03a 	or	r5,r8,r17
  807ed4:	28005126 	beq	r5,zero,80801c <__adddf3+0x780>
  807ed8:	0108303a 	nor	r4,zero,r4
  807edc:	20004d1e 	bne	r4,zero,808014 <__adddf3+0x778>
  807ee0:	89a3883a 	add	r17,r17,r6
  807ee4:	4253883a 	add	r9,r8,r9
  807ee8:	898d803a 	cmpltu	r6,r17,r6
  807eec:	3251883a 	add	r8,r6,r9
  807ef0:	1021883a 	mov	r16,r2
  807ef4:	003f0806 	br	807b18 <__alt_mem_onchip_mem+0xff7ffb18>
  807ef8:	1000301e 	bne	r2,zero,807fbc <__adddf3+0x720>
  807efc:	4984b03a 	or	r2,r9,r6
  807f00:	10007126 	beq	r2,zero,8080c8 <__adddf3+0x82c>
  807f04:	4811883a 	mov	r8,r9
  807f08:	3023883a 	mov	r17,r6
  807f0c:	3825883a 	mov	r18,r7
  807f10:	0401ffc4 	movi	r16,2047
  807f14:	003e8006 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807f18:	4462b03a 	or	r17,r8,r17
  807f1c:	8822c03a 	cmpne	r17,r17,zero
  807f20:	0007883a 	mov	r3,zero
  807f24:	003f8b06 	br	807d54 <__alt_mem_onchip_mem+0xff7ffd54>
  807f28:	0141ffc4 	movi	r5,2047
  807f2c:	11403b26 	beq	r2,r5,80801c <__adddf3+0x780>
  807f30:	0109c83a 	sub	r4,zero,r4
  807f34:	42002034 	orhi	r8,r8,128
  807f38:	01400e04 	movi	r5,56
  807f3c:	29006716 	blt	r5,r4,8080dc <__adddf3+0x840>
  807f40:	014007c4 	movi	r5,31
  807f44:	29007016 	blt	r5,r4,808108 <__adddf3+0x86c>
  807f48:	01400804 	movi	r5,32
  807f4c:	290bc83a 	sub	r5,r5,r4
  807f50:	4154983a 	sll	r10,r8,r5
  807f54:	890ed83a 	srl	r7,r17,r4
  807f58:	894a983a 	sll	r5,r17,r5
  807f5c:	4108d83a 	srl	r4,r8,r4
  807f60:	51e2b03a 	or	r17,r10,r7
  807f64:	280ac03a 	cmpne	r5,r5,zero
  807f68:	8962b03a 	or	r17,r17,r5
  807f6c:	89a3883a 	add	r17,r17,r6
  807f70:	2253883a 	add	r9,r4,r9
  807f74:	898d803a 	cmpltu	r6,r17,r6
  807f78:	3251883a 	add	r8,r6,r9
  807f7c:	1021883a 	mov	r16,r2
  807f80:	003ee506 	br	807b18 <__alt_mem_onchip_mem+0xff7ffb18>
  807f84:	4984b03a 	or	r2,r9,r6
  807f88:	103e6326 	beq	r2,zero,807918 <__alt_mem_onchip_mem+0xff7ff918>
  807f8c:	8987c83a 	sub	r3,r17,r6
  807f90:	88c9803a 	cmpltu	r4,r17,r3
  807f94:	4245c83a 	sub	r2,r8,r9
  807f98:	1105c83a 	sub	r2,r2,r4
  807f9c:	1100202c 	andhi	r4,r2,128
  807fa0:	203ebb26 	beq	r4,zero,807a90 <__alt_mem_onchip_mem+0xff7ffa90>
  807fa4:	3463c83a 	sub	r17,r6,r17
  807fa8:	4a07c83a 	sub	r3,r9,r8
  807fac:	344d803a 	cmpltu	r6,r6,r17
  807fb0:	1991c83a 	sub	r8,r3,r6
  807fb4:	3825883a 	mov	r18,r7
  807fb8:	003e5706 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  807fbc:	4984b03a 	or	r2,r9,r6
  807fc0:	10002e26 	beq	r2,zero,80807c <__adddf3+0x7e0>
  807fc4:	4004d0fa 	srli	r2,r8,3
  807fc8:	8822d0fa 	srli	r17,r17,3
  807fcc:	4010977a 	slli	r8,r8,29
  807fd0:	10c0022c 	andhi	r3,r2,8
  807fd4:	4462b03a 	or	r17,r8,r17
  807fd8:	18000826 	beq	r3,zero,807ffc <__adddf3+0x760>
  807fdc:	4808d0fa 	srli	r4,r9,3
  807fe0:	20c0022c 	andhi	r3,r4,8
  807fe4:	1800051e 	bne	r3,zero,807ffc <__adddf3+0x760>
  807fe8:	300cd0fa 	srli	r6,r6,3
  807fec:	4806977a 	slli	r3,r9,29
  807ff0:	2005883a 	mov	r2,r4
  807ff4:	3825883a 	mov	r18,r7
  807ff8:	19a2b03a 	or	r17,r3,r6
  807ffc:	8810d77a 	srli	r8,r17,29
  808000:	100490fa 	slli	r2,r2,3
  808004:	882290fa 	slli	r17,r17,3
  808008:	0401ffc4 	movi	r16,2047
  80800c:	4090b03a 	or	r8,r8,r2
  808010:	003e4106 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  808014:	0141ffc4 	movi	r5,2047
  808018:	117fc71e 	bne	r2,r5,807f38 <__alt_mem_onchip_mem+0xff7fff38>
  80801c:	4811883a 	mov	r8,r9
  808020:	3023883a 	mov	r17,r6
  808024:	1021883a 	mov	r16,r2
  808028:	003e3b06 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  80802c:	10002f26 	beq	r2,zero,8080ec <__adddf3+0x850>
  808030:	4984b03a 	or	r2,r9,r6
  808034:	10001126 	beq	r2,zero,80807c <__adddf3+0x7e0>
  808038:	4004d0fa 	srli	r2,r8,3
  80803c:	8822d0fa 	srli	r17,r17,3
  808040:	4010977a 	slli	r8,r8,29
  808044:	10c0022c 	andhi	r3,r2,8
  808048:	4462b03a 	or	r17,r8,r17
  80804c:	183feb26 	beq	r3,zero,807ffc <__alt_mem_onchip_mem+0xff7ffffc>
  808050:	4808d0fa 	srli	r4,r9,3
  808054:	20c0022c 	andhi	r3,r4,8
  808058:	183fe81e 	bne	r3,zero,807ffc <__alt_mem_onchip_mem+0xff7ffffc>
  80805c:	300cd0fa 	srli	r6,r6,3
  808060:	4806977a 	slli	r3,r9,29
  808064:	2005883a 	mov	r2,r4
  808068:	19a2b03a 	or	r17,r3,r6
  80806c:	003fe306 	br	807ffc <__alt_mem_onchip_mem+0xff7ffffc>
  808070:	0011883a 	mov	r8,zero
  808074:	0005883a 	mov	r2,zero
  808078:	003e3f06 	br	807978 <__alt_mem_onchip_mem+0xff7ff978>
  80807c:	0401ffc4 	movi	r16,2047
  808080:	003e2506 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  808084:	0013883a 	mov	r9,zero
  808088:	003f8406 	br	807e9c <__alt_mem_onchip_mem+0xff7ffe9c>
  80808c:	0005883a 	mov	r2,zero
  808090:	0007883a 	mov	r3,zero
  808094:	003e8906 	br	807abc <__alt_mem_onchip_mem+0xff7ffabc>
  808098:	197ff804 	addi	r5,r3,-32
  80809c:	01000804 	movi	r4,32
  8080a0:	414ad83a 	srl	r5,r8,r5
  8080a4:	19002426 	beq	r3,r4,808138 <__adddf3+0x89c>
  8080a8:	01001004 	movi	r4,64
  8080ac:	20c7c83a 	sub	r3,r4,r3
  8080b0:	40c6983a 	sll	r3,r8,r3
  8080b4:	1c46b03a 	or	r3,r3,r17
  8080b8:	1806c03a 	cmpne	r3,r3,zero
  8080bc:	28e2b03a 	or	r17,r5,r3
  8080c0:	0007883a 	mov	r3,zero
  8080c4:	003f2306 	br	807d54 <__alt_mem_onchip_mem+0xff7ffd54>
  8080c8:	0007883a 	mov	r3,zero
  8080cc:	5811883a 	mov	r8,r11
  8080d0:	00bfffc4 	movi	r2,-1
  8080d4:	0401ffc4 	movi	r16,2047
  8080d8:	003e7806 	br	807abc <__alt_mem_onchip_mem+0xff7ffabc>
  8080dc:	4462b03a 	or	r17,r8,r17
  8080e0:	8822c03a 	cmpne	r17,r17,zero
  8080e4:	0009883a 	mov	r4,zero
  8080e8:	003fa006 	br	807f6c <__alt_mem_onchip_mem+0xff7fff6c>
  8080ec:	4811883a 	mov	r8,r9
  8080f0:	3023883a 	mov	r17,r6
  8080f4:	0401ffc4 	movi	r16,2047
  8080f8:	003e0706 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  8080fc:	4811883a 	mov	r8,r9
  808100:	3023883a 	mov	r17,r6
  808104:	003e0406 	br	807918 <__alt_mem_onchip_mem+0xff7ff918>
  808108:	21fff804 	addi	r7,r4,-32
  80810c:	01400804 	movi	r5,32
  808110:	41ced83a 	srl	r7,r8,r7
  808114:	21400a26 	beq	r4,r5,808140 <__adddf3+0x8a4>
  808118:	01401004 	movi	r5,64
  80811c:	2909c83a 	sub	r4,r5,r4
  808120:	4108983a 	sll	r4,r8,r4
  808124:	2448b03a 	or	r4,r4,r17
  808128:	2008c03a 	cmpne	r4,r4,zero
  80812c:	3922b03a 	or	r17,r7,r4
  808130:	0009883a 	mov	r4,zero
  808134:	003f8d06 	br	807f6c <__alt_mem_onchip_mem+0xff7fff6c>
  808138:	0007883a 	mov	r3,zero
  80813c:	003fdd06 	br	8080b4 <__alt_mem_onchip_mem+0xff8000b4>
  808140:	0009883a 	mov	r4,zero
  808144:	003ff706 	br	808124 <__alt_mem_onchip_mem+0xff800124>

00808148 <__gedf2>:
  808148:	2804d53a 	srli	r2,r5,20
  80814c:	3806d53a 	srli	r3,r7,20
  808150:	02000434 	movhi	r8,16
  808154:	423fffc4 	addi	r8,r8,-1
  808158:	1081ffcc 	andi	r2,r2,2047
  80815c:	0241ffc4 	movi	r9,2047
  808160:	2a14703a 	and	r10,r5,r8
  808164:	18c1ffcc 	andi	r3,r3,2047
  808168:	3a10703a 	and	r8,r7,r8
  80816c:	280ad7fa 	srli	r5,r5,31
  808170:	380ed7fa 	srli	r7,r7,31
  808174:	12401d26 	beq	r2,r9,8081ec <__gedf2+0xa4>
  808178:	0241ffc4 	movi	r9,2047
  80817c:	1a401226 	beq	r3,r9,8081c8 <__gedf2+0x80>
  808180:	1000081e 	bne	r2,zero,8081a4 <__gedf2+0x5c>
  808184:	2296b03a 	or	r11,r4,r10
  808188:	5813003a 	cmpeq	r9,r11,zero
  80818c:	1800091e 	bne	r3,zero,8081b4 <__gedf2+0x6c>
  808190:	3218b03a 	or	r12,r6,r8
  808194:	6000071e 	bne	r12,zero,8081b4 <__gedf2+0x6c>
  808198:	0005883a 	mov	r2,zero
  80819c:	5800101e 	bne	r11,zero,8081e0 <__gedf2+0x98>
  8081a0:	f800283a 	ret
  8081a4:	18000c1e 	bne	r3,zero,8081d8 <__gedf2+0x90>
  8081a8:	3212b03a 	or	r9,r6,r8
  8081ac:	48000c26 	beq	r9,zero,8081e0 <__gedf2+0x98>
  8081b0:	0013883a 	mov	r9,zero
  8081b4:	39c03fcc 	andi	r7,r7,255
  8081b8:	48000826 	beq	r9,zero,8081dc <__gedf2+0x94>
  8081bc:	38000926 	beq	r7,zero,8081e4 <__gedf2+0x9c>
  8081c0:	00800044 	movi	r2,1
  8081c4:	f800283a 	ret
  8081c8:	3212b03a 	or	r9,r6,r8
  8081cc:	483fec26 	beq	r9,zero,808180 <__alt_mem_onchip_mem+0xff800180>
  8081d0:	00bfff84 	movi	r2,-2
  8081d4:	f800283a 	ret
  8081d8:	39c03fcc 	andi	r7,r7,255
  8081dc:	29c00626 	beq	r5,r7,8081f8 <__gedf2+0xb0>
  8081e0:	283ff726 	beq	r5,zero,8081c0 <__alt_mem_onchip_mem+0xff8001c0>
  8081e4:	00bfffc4 	movi	r2,-1
  8081e8:	f800283a 	ret
  8081ec:	2292b03a 	or	r9,r4,r10
  8081f0:	483fe126 	beq	r9,zero,808178 <__alt_mem_onchip_mem+0xff800178>
  8081f4:	003ff606 	br	8081d0 <__alt_mem_onchip_mem+0xff8001d0>
  8081f8:	18bff916 	blt	r3,r2,8081e0 <__alt_mem_onchip_mem+0xff8001e0>
  8081fc:	10c00316 	blt	r2,r3,80820c <__gedf2+0xc4>
  808200:	42bff736 	bltu	r8,r10,8081e0 <__alt_mem_onchip_mem+0xff8001e0>
  808204:	52000326 	beq	r10,r8,808214 <__gedf2+0xcc>
  808208:	5200042e 	bgeu	r10,r8,80821c <__gedf2+0xd4>
  80820c:	283fec1e 	bne	r5,zero,8081c0 <__alt_mem_onchip_mem+0xff8001c0>
  808210:	003ff406 	br	8081e4 <__alt_mem_onchip_mem+0xff8001e4>
  808214:	313ff236 	bltu	r6,r4,8081e0 <__alt_mem_onchip_mem+0xff8001e0>
  808218:	21bffc36 	bltu	r4,r6,80820c <__alt_mem_onchip_mem+0xff80020c>
  80821c:	0005883a 	mov	r2,zero
  808220:	f800283a 	ret

00808224 <__ledf2>:
  808224:	2804d53a 	srli	r2,r5,20
  808228:	3810d53a 	srli	r8,r7,20
  80822c:	00c00434 	movhi	r3,16
  808230:	18ffffc4 	addi	r3,r3,-1
  808234:	1081ffcc 	andi	r2,r2,2047
  808238:	0241ffc4 	movi	r9,2047
  80823c:	28d4703a 	and	r10,r5,r3
  808240:	4201ffcc 	andi	r8,r8,2047
  808244:	38c6703a 	and	r3,r7,r3
  808248:	280ad7fa 	srli	r5,r5,31
  80824c:	380ed7fa 	srli	r7,r7,31
  808250:	12401f26 	beq	r2,r9,8082d0 <__ledf2+0xac>
  808254:	0241ffc4 	movi	r9,2047
  808258:	42401426 	beq	r8,r9,8082ac <__ledf2+0x88>
  80825c:	1000091e 	bne	r2,zero,808284 <__ledf2+0x60>
  808260:	2296b03a 	or	r11,r4,r10
  808264:	5813003a 	cmpeq	r9,r11,zero
  808268:	29403fcc 	andi	r5,r5,255
  80826c:	40000a1e 	bne	r8,zero,808298 <__ledf2+0x74>
  808270:	30d8b03a 	or	r12,r6,r3
  808274:	6000081e 	bne	r12,zero,808298 <__ledf2+0x74>
  808278:	0005883a 	mov	r2,zero
  80827c:	5800111e 	bne	r11,zero,8082c4 <__ledf2+0xa0>
  808280:	f800283a 	ret
  808284:	29403fcc 	andi	r5,r5,255
  808288:	40000c1e 	bne	r8,zero,8082bc <__ledf2+0x98>
  80828c:	30d2b03a 	or	r9,r6,r3
  808290:	48000c26 	beq	r9,zero,8082c4 <__ledf2+0xa0>
  808294:	0013883a 	mov	r9,zero
  808298:	39c03fcc 	andi	r7,r7,255
  80829c:	48000826 	beq	r9,zero,8082c0 <__ledf2+0x9c>
  8082a0:	38001126 	beq	r7,zero,8082e8 <__ledf2+0xc4>
  8082a4:	00800044 	movi	r2,1
  8082a8:	f800283a 	ret
  8082ac:	30d2b03a 	or	r9,r6,r3
  8082b0:	483fea26 	beq	r9,zero,80825c <__alt_mem_onchip_mem+0xff80025c>
  8082b4:	00800084 	movi	r2,2
  8082b8:	f800283a 	ret
  8082bc:	39c03fcc 	andi	r7,r7,255
  8082c0:	39400726 	beq	r7,r5,8082e0 <__ledf2+0xbc>
  8082c4:	2800081e 	bne	r5,zero,8082e8 <__ledf2+0xc4>
  8082c8:	00800044 	movi	r2,1
  8082cc:	f800283a 	ret
  8082d0:	2292b03a 	or	r9,r4,r10
  8082d4:	483fdf26 	beq	r9,zero,808254 <__alt_mem_onchip_mem+0xff800254>
  8082d8:	00800084 	movi	r2,2
  8082dc:	f800283a 	ret
  8082e0:	4080030e 	bge	r8,r2,8082f0 <__ledf2+0xcc>
  8082e4:	383fef26 	beq	r7,zero,8082a4 <__alt_mem_onchip_mem+0xff8002a4>
  8082e8:	00bfffc4 	movi	r2,-1
  8082ec:	f800283a 	ret
  8082f0:	123feb16 	blt	r2,r8,8082a0 <__alt_mem_onchip_mem+0xff8002a0>
  8082f4:	1abff336 	bltu	r3,r10,8082c4 <__alt_mem_onchip_mem+0xff8002c4>
  8082f8:	50c00326 	beq	r10,r3,808308 <__ledf2+0xe4>
  8082fc:	50c0042e 	bgeu	r10,r3,808310 <__ledf2+0xec>
  808300:	283fe81e 	bne	r5,zero,8082a4 <__alt_mem_onchip_mem+0xff8002a4>
  808304:	003ff806 	br	8082e8 <__alt_mem_onchip_mem+0xff8002e8>
  808308:	313fee36 	bltu	r6,r4,8082c4 <__alt_mem_onchip_mem+0xff8002c4>
  80830c:	21bffc36 	bltu	r4,r6,808300 <__alt_mem_onchip_mem+0xff800300>
  808310:	0005883a 	mov	r2,zero
  808314:	f800283a 	ret

00808318 <__subdf3>:
  808318:	02000434 	movhi	r8,16
  80831c:	423fffc4 	addi	r8,r8,-1
  808320:	defffb04 	addi	sp,sp,-20
  808324:	2a14703a 	and	r10,r5,r8
  808328:	3812d53a 	srli	r9,r7,20
  80832c:	3a10703a 	and	r8,r7,r8
  808330:	2006d77a 	srli	r3,r4,29
  808334:	3004d77a 	srli	r2,r6,29
  808338:	dc000015 	stw	r16,0(sp)
  80833c:	501490fa 	slli	r10,r10,3
  808340:	2820d53a 	srli	r16,r5,20
  808344:	401090fa 	slli	r8,r8,3
  808348:	dc800215 	stw	r18,8(sp)
  80834c:	dc400115 	stw	r17,4(sp)
  808350:	dfc00415 	stw	ra,16(sp)
  808354:	202290fa 	slli	r17,r4,3
  808358:	dcc00315 	stw	r19,12(sp)
  80835c:	4a41ffcc 	andi	r9,r9,2047
  808360:	0101ffc4 	movi	r4,2047
  808364:	2824d7fa 	srli	r18,r5,31
  808368:	8401ffcc 	andi	r16,r16,2047
  80836c:	50c6b03a 	or	r3,r10,r3
  808370:	380ed7fa 	srli	r7,r7,31
  808374:	408ab03a 	or	r5,r8,r2
  808378:	300c90fa 	slli	r6,r6,3
  80837c:	49009626 	beq	r9,r4,8085d8 <__subdf3+0x2c0>
  808380:	39c0005c 	xori	r7,r7,1
  808384:	8245c83a 	sub	r2,r16,r9
  808388:	3c807426 	beq	r7,r18,80855c <__subdf3+0x244>
  80838c:	0080af0e 	bge	zero,r2,80864c <__subdf3+0x334>
  808390:	48002a1e 	bne	r9,zero,80843c <__subdf3+0x124>
  808394:	2988b03a 	or	r4,r5,r6
  808398:	20009a1e 	bne	r4,zero,808604 <__subdf3+0x2ec>
  80839c:	888001cc 	andi	r2,r17,7
  8083a0:	10000726 	beq	r2,zero,8083c0 <__subdf3+0xa8>
  8083a4:	888003cc 	andi	r2,r17,15
  8083a8:	01000104 	movi	r4,4
  8083ac:	11000426 	beq	r2,r4,8083c0 <__subdf3+0xa8>
  8083b0:	890b883a 	add	r5,r17,r4
  8083b4:	2c63803a 	cmpltu	r17,r5,r17
  8083b8:	1c47883a 	add	r3,r3,r17
  8083bc:	2823883a 	mov	r17,r5
  8083c0:	1880202c 	andhi	r2,r3,128
  8083c4:	10005926 	beq	r2,zero,80852c <__subdf3+0x214>
  8083c8:	84000044 	addi	r16,r16,1
  8083cc:	0081ffc4 	movi	r2,2047
  8083d0:	8080be26 	beq	r16,r2,8086cc <__subdf3+0x3b4>
  8083d4:	017fe034 	movhi	r5,65408
  8083d8:	297fffc4 	addi	r5,r5,-1
  8083dc:	1946703a 	and	r3,r3,r5
  8083e0:	1804977a 	slli	r2,r3,29
  8083e4:	1806927a 	slli	r3,r3,9
  8083e8:	8822d0fa 	srli	r17,r17,3
  8083ec:	8401ffcc 	andi	r16,r16,2047
  8083f0:	180ad33a 	srli	r5,r3,12
  8083f4:	9100004c 	andi	r4,r18,1
  8083f8:	1444b03a 	or	r2,r2,r17
  8083fc:	80c1ffcc 	andi	r3,r16,2047
  808400:	1820953a 	slli	r16,r3,20
  808404:	20c03fcc 	andi	r3,r4,255
  808408:	180897fa 	slli	r4,r3,31
  80840c:	00c00434 	movhi	r3,16
  808410:	18ffffc4 	addi	r3,r3,-1
  808414:	28c6703a 	and	r3,r5,r3
  808418:	1c06b03a 	or	r3,r3,r16
  80841c:	1906b03a 	or	r3,r3,r4
  808420:	dfc00417 	ldw	ra,16(sp)
  808424:	dcc00317 	ldw	r19,12(sp)
  808428:	dc800217 	ldw	r18,8(sp)
  80842c:	dc400117 	ldw	r17,4(sp)
  808430:	dc000017 	ldw	r16,0(sp)
  808434:	dec00504 	addi	sp,sp,20
  808438:	f800283a 	ret
  80843c:	0101ffc4 	movi	r4,2047
  808440:	813fd626 	beq	r16,r4,80839c <__alt_mem_onchip_mem+0xff80039c>
  808444:	29402034 	orhi	r5,r5,128
  808448:	01000e04 	movi	r4,56
  80844c:	2080a316 	blt	r4,r2,8086dc <__subdf3+0x3c4>
  808450:	010007c4 	movi	r4,31
  808454:	2080c616 	blt	r4,r2,808770 <__subdf3+0x458>
  808458:	01000804 	movi	r4,32
  80845c:	2089c83a 	sub	r4,r4,r2
  808460:	2910983a 	sll	r8,r5,r4
  808464:	308ed83a 	srl	r7,r6,r2
  808468:	3108983a 	sll	r4,r6,r4
  80846c:	2884d83a 	srl	r2,r5,r2
  808470:	41ccb03a 	or	r6,r8,r7
  808474:	2008c03a 	cmpne	r4,r4,zero
  808478:	310cb03a 	or	r6,r6,r4
  80847c:	898dc83a 	sub	r6,r17,r6
  808480:	89a3803a 	cmpltu	r17,r17,r6
  808484:	1887c83a 	sub	r3,r3,r2
  808488:	1c47c83a 	sub	r3,r3,r17
  80848c:	3023883a 	mov	r17,r6
  808490:	1880202c 	andhi	r2,r3,128
  808494:	10002326 	beq	r2,zero,808524 <__subdf3+0x20c>
  808498:	04c02034 	movhi	r19,128
  80849c:	9cffffc4 	addi	r19,r19,-1
  8084a0:	1ce6703a 	and	r19,r3,r19
  8084a4:	98007a26 	beq	r19,zero,808690 <__subdf3+0x378>
  8084a8:	9809883a 	mov	r4,r19
  8084ac:	0808cf00 	call	808cf0 <__clzsi2>
  8084b0:	113ffe04 	addi	r4,r2,-8
  8084b4:	00c007c4 	movi	r3,31
  8084b8:	19007b16 	blt	r3,r4,8086a8 <__subdf3+0x390>
  8084bc:	00800804 	movi	r2,32
  8084c0:	1105c83a 	sub	r2,r2,r4
  8084c4:	8884d83a 	srl	r2,r17,r2
  8084c8:	9906983a 	sll	r3,r19,r4
  8084cc:	8922983a 	sll	r17,r17,r4
  8084d0:	10c4b03a 	or	r2,r2,r3
  8084d4:	24007816 	blt	r4,r16,8086b8 <__subdf3+0x3a0>
  8084d8:	2421c83a 	sub	r16,r4,r16
  8084dc:	80c00044 	addi	r3,r16,1
  8084e0:	010007c4 	movi	r4,31
  8084e4:	20c09516 	blt	r4,r3,80873c <__subdf3+0x424>
  8084e8:	01400804 	movi	r5,32
  8084ec:	28cbc83a 	sub	r5,r5,r3
  8084f0:	88c8d83a 	srl	r4,r17,r3
  8084f4:	8962983a 	sll	r17,r17,r5
  8084f8:	114a983a 	sll	r5,r2,r5
  8084fc:	10c6d83a 	srl	r3,r2,r3
  808500:	8804c03a 	cmpne	r2,r17,zero
  808504:	290ab03a 	or	r5,r5,r4
  808508:	28a2b03a 	or	r17,r5,r2
  80850c:	0021883a 	mov	r16,zero
  808510:	003fa206 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808514:	2090b03a 	or	r8,r4,r2
  808518:	40018e26 	beq	r8,zero,808b54 <__subdf3+0x83c>
  80851c:	1007883a 	mov	r3,r2
  808520:	2023883a 	mov	r17,r4
  808524:	888001cc 	andi	r2,r17,7
  808528:	103f9e1e 	bne	r2,zero,8083a4 <__alt_mem_onchip_mem+0xff8003a4>
  80852c:	1804977a 	slli	r2,r3,29
  808530:	8822d0fa 	srli	r17,r17,3
  808534:	1810d0fa 	srli	r8,r3,3
  808538:	9100004c 	andi	r4,r18,1
  80853c:	1444b03a 	or	r2,r2,r17
  808540:	00c1ffc4 	movi	r3,2047
  808544:	80c02826 	beq	r16,r3,8085e8 <__subdf3+0x2d0>
  808548:	01400434 	movhi	r5,16
  80854c:	297fffc4 	addi	r5,r5,-1
  808550:	80e0703a 	and	r16,r16,r3
  808554:	414a703a 	and	r5,r8,r5
  808558:	003fa806 	br	8083fc <__alt_mem_onchip_mem+0xff8003fc>
  80855c:	0080630e 	bge	zero,r2,8086ec <__subdf3+0x3d4>
  808560:	48003026 	beq	r9,zero,808624 <__subdf3+0x30c>
  808564:	0101ffc4 	movi	r4,2047
  808568:	813f8c26 	beq	r16,r4,80839c <__alt_mem_onchip_mem+0xff80039c>
  80856c:	29402034 	orhi	r5,r5,128
  808570:	01000e04 	movi	r4,56
  808574:	2080a90e 	bge	r4,r2,80881c <__subdf3+0x504>
  808578:	298cb03a 	or	r6,r5,r6
  80857c:	3012c03a 	cmpne	r9,r6,zero
  808580:	0005883a 	mov	r2,zero
  808584:	4c53883a 	add	r9,r9,r17
  808588:	4c63803a 	cmpltu	r17,r9,r17
  80858c:	10c7883a 	add	r3,r2,r3
  808590:	88c7883a 	add	r3,r17,r3
  808594:	4823883a 	mov	r17,r9
  808598:	1880202c 	andhi	r2,r3,128
  80859c:	1000d026 	beq	r2,zero,8088e0 <__subdf3+0x5c8>
  8085a0:	84000044 	addi	r16,r16,1
  8085a4:	0081ffc4 	movi	r2,2047
  8085a8:	8080fe26 	beq	r16,r2,8089a4 <__subdf3+0x68c>
  8085ac:	00bfe034 	movhi	r2,65408
  8085b0:	10bfffc4 	addi	r2,r2,-1
  8085b4:	1886703a 	and	r3,r3,r2
  8085b8:	880ad07a 	srli	r5,r17,1
  8085bc:	180497fa 	slli	r2,r3,31
  8085c0:	8900004c 	andi	r4,r17,1
  8085c4:	2922b03a 	or	r17,r5,r4
  8085c8:	1806d07a 	srli	r3,r3,1
  8085cc:	1462b03a 	or	r17,r2,r17
  8085d0:	3825883a 	mov	r18,r7
  8085d4:	003f7106 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  8085d8:	2984b03a 	or	r2,r5,r6
  8085dc:	103f6826 	beq	r2,zero,808380 <__alt_mem_onchip_mem+0xff800380>
  8085e0:	39c03fcc 	andi	r7,r7,255
  8085e4:	003f6706 	br	808384 <__alt_mem_onchip_mem+0xff800384>
  8085e8:	4086b03a 	or	r3,r8,r2
  8085ec:	18015226 	beq	r3,zero,808b38 <__subdf3+0x820>
  8085f0:	00c00434 	movhi	r3,16
  8085f4:	41400234 	orhi	r5,r8,8
  8085f8:	18ffffc4 	addi	r3,r3,-1
  8085fc:	28ca703a 	and	r5,r5,r3
  808600:	003f7e06 	br	8083fc <__alt_mem_onchip_mem+0xff8003fc>
  808604:	10bfffc4 	addi	r2,r2,-1
  808608:	1000491e 	bne	r2,zero,808730 <__subdf3+0x418>
  80860c:	898fc83a 	sub	r7,r17,r6
  808610:	89e3803a 	cmpltu	r17,r17,r7
  808614:	1947c83a 	sub	r3,r3,r5
  808618:	1c47c83a 	sub	r3,r3,r17
  80861c:	3823883a 	mov	r17,r7
  808620:	003f9b06 	br	808490 <__alt_mem_onchip_mem+0xff800490>
  808624:	2988b03a 	or	r4,r5,r6
  808628:	203f5c26 	beq	r4,zero,80839c <__alt_mem_onchip_mem+0xff80039c>
  80862c:	10bfffc4 	addi	r2,r2,-1
  808630:	1000931e 	bne	r2,zero,808880 <__subdf3+0x568>
  808634:	898d883a 	add	r6,r17,r6
  808638:	3463803a 	cmpltu	r17,r6,r17
  80863c:	1947883a 	add	r3,r3,r5
  808640:	88c7883a 	add	r3,r17,r3
  808644:	3023883a 	mov	r17,r6
  808648:	003fd306 	br	808598 <__alt_mem_onchip_mem+0xff800598>
  80864c:	1000541e 	bne	r2,zero,8087a0 <__subdf3+0x488>
  808650:	80800044 	addi	r2,r16,1
  808654:	1081ffcc 	andi	r2,r2,2047
  808658:	01000044 	movi	r4,1
  80865c:	2080a20e 	bge	r4,r2,8088e8 <__subdf3+0x5d0>
  808660:	8989c83a 	sub	r4,r17,r6
  808664:	8905803a 	cmpltu	r2,r17,r4
  808668:	1967c83a 	sub	r19,r3,r5
  80866c:	98a7c83a 	sub	r19,r19,r2
  808670:	9880202c 	andhi	r2,r19,128
  808674:	10006326 	beq	r2,zero,808804 <__subdf3+0x4ec>
  808678:	3463c83a 	sub	r17,r6,r17
  80867c:	28c7c83a 	sub	r3,r5,r3
  808680:	344d803a 	cmpltu	r6,r6,r17
  808684:	19a7c83a 	sub	r19,r3,r6
  808688:	3825883a 	mov	r18,r7
  80868c:	983f861e 	bne	r19,zero,8084a8 <__alt_mem_onchip_mem+0xff8004a8>
  808690:	8809883a 	mov	r4,r17
  808694:	0808cf00 	call	808cf0 <__clzsi2>
  808698:	10800804 	addi	r2,r2,32
  80869c:	113ffe04 	addi	r4,r2,-8
  8086a0:	00c007c4 	movi	r3,31
  8086a4:	193f850e 	bge	r3,r4,8084bc <__alt_mem_onchip_mem+0xff8004bc>
  8086a8:	10bff604 	addi	r2,r2,-40
  8086ac:	8884983a 	sll	r2,r17,r2
  8086b0:	0023883a 	mov	r17,zero
  8086b4:	243f880e 	bge	r4,r16,8084d8 <__alt_mem_onchip_mem+0xff8004d8>
  8086b8:	00ffe034 	movhi	r3,65408
  8086bc:	18ffffc4 	addi	r3,r3,-1
  8086c0:	8121c83a 	sub	r16,r16,r4
  8086c4:	10c6703a 	and	r3,r2,r3
  8086c8:	003f3406 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  8086cc:	9100004c 	andi	r4,r18,1
  8086d0:	000b883a 	mov	r5,zero
  8086d4:	0005883a 	mov	r2,zero
  8086d8:	003f4806 	br	8083fc <__alt_mem_onchip_mem+0xff8003fc>
  8086dc:	298cb03a 	or	r6,r5,r6
  8086e0:	300cc03a 	cmpne	r6,r6,zero
  8086e4:	0005883a 	mov	r2,zero
  8086e8:	003f6406 	br	80847c <__alt_mem_onchip_mem+0xff80047c>
  8086ec:	10009a1e 	bne	r2,zero,808958 <__subdf3+0x640>
  8086f0:	82400044 	addi	r9,r16,1
  8086f4:	4881ffcc 	andi	r2,r9,2047
  8086f8:	02800044 	movi	r10,1
  8086fc:	5080670e 	bge	r10,r2,80889c <__subdf3+0x584>
  808700:	0081ffc4 	movi	r2,2047
  808704:	4880af26 	beq	r9,r2,8089c4 <__subdf3+0x6ac>
  808708:	898d883a 	add	r6,r17,r6
  80870c:	1945883a 	add	r2,r3,r5
  808710:	3447803a 	cmpltu	r3,r6,r17
  808714:	1887883a 	add	r3,r3,r2
  808718:	182297fa 	slli	r17,r3,31
  80871c:	300cd07a 	srli	r6,r6,1
  808720:	1806d07a 	srli	r3,r3,1
  808724:	4821883a 	mov	r16,r9
  808728:	89a2b03a 	or	r17,r17,r6
  80872c:	003f1b06 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808730:	0101ffc4 	movi	r4,2047
  808734:	813f441e 	bne	r16,r4,808448 <__alt_mem_onchip_mem+0xff800448>
  808738:	003f1806 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  80873c:	843ff844 	addi	r16,r16,-31
  808740:	01400804 	movi	r5,32
  808744:	1408d83a 	srl	r4,r2,r16
  808748:	19405026 	beq	r3,r5,80888c <__subdf3+0x574>
  80874c:	01401004 	movi	r5,64
  808750:	28c7c83a 	sub	r3,r5,r3
  808754:	10c4983a 	sll	r2,r2,r3
  808758:	88a2b03a 	or	r17,r17,r2
  80875c:	8822c03a 	cmpne	r17,r17,zero
  808760:	2462b03a 	or	r17,r4,r17
  808764:	0007883a 	mov	r3,zero
  808768:	0021883a 	mov	r16,zero
  80876c:	003f6d06 	br	808524 <__alt_mem_onchip_mem+0xff800524>
  808770:	11fff804 	addi	r7,r2,-32
  808774:	01000804 	movi	r4,32
  808778:	29ced83a 	srl	r7,r5,r7
  80877c:	11004526 	beq	r2,r4,808894 <__subdf3+0x57c>
  808780:	01001004 	movi	r4,64
  808784:	2089c83a 	sub	r4,r4,r2
  808788:	2904983a 	sll	r2,r5,r4
  80878c:	118cb03a 	or	r6,r2,r6
  808790:	300cc03a 	cmpne	r6,r6,zero
  808794:	398cb03a 	or	r6,r7,r6
  808798:	0005883a 	mov	r2,zero
  80879c:	003f3706 	br	80847c <__alt_mem_onchip_mem+0xff80047c>
  8087a0:	80002a26 	beq	r16,zero,80884c <__subdf3+0x534>
  8087a4:	0101ffc4 	movi	r4,2047
  8087a8:	49006626 	beq	r9,r4,808944 <__subdf3+0x62c>
  8087ac:	0085c83a 	sub	r2,zero,r2
  8087b0:	18c02034 	orhi	r3,r3,128
  8087b4:	01000e04 	movi	r4,56
  8087b8:	20807e16 	blt	r4,r2,8089b4 <__subdf3+0x69c>
  8087bc:	010007c4 	movi	r4,31
  8087c0:	2080e716 	blt	r4,r2,808b60 <__subdf3+0x848>
  8087c4:	01000804 	movi	r4,32
  8087c8:	2089c83a 	sub	r4,r4,r2
  8087cc:	1914983a 	sll	r10,r3,r4
  8087d0:	8890d83a 	srl	r8,r17,r2
  8087d4:	8908983a 	sll	r4,r17,r4
  8087d8:	1884d83a 	srl	r2,r3,r2
  8087dc:	5222b03a 	or	r17,r10,r8
  8087e0:	2006c03a 	cmpne	r3,r4,zero
  8087e4:	88e2b03a 	or	r17,r17,r3
  8087e8:	3463c83a 	sub	r17,r6,r17
  8087ec:	2885c83a 	sub	r2,r5,r2
  8087f0:	344d803a 	cmpltu	r6,r6,r17
  8087f4:	1187c83a 	sub	r3,r2,r6
  8087f8:	4821883a 	mov	r16,r9
  8087fc:	3825883a 	mov	r18,r7
  808800:	003f2306 	br	808490 <__alt_mem_onchip_mem+0xff800490>
  808804:	24d0b03a 	or	r8,r4,r19
  808808:	40001b1e 	bne	r8,zero,808878 <__subdf3+0x560>
  80880c:	0005883a 	mov	r2,zero
  808810:	0009883a 	mov	r4,zero
  808814:	0021883a 	mov	r16,zero
  808818:	003f4906 	br	808540 <__alt_mem_onchip_mem+0xff800540>
  80881c:	010007c4 	movi	r4,31
  808820:	20803a16 	blt	r4,r2,80890c <__subdf3+0x5f4>
  808824:	01000804 	movi	r4,32
  808828:	2089c83a 	sub	r4,r4,r2
  80882c:	2912983a 	sll	r9,r5,r4
  808830:	3090d83a 	srl	r8,r6,r2
  808834:	3108983a 	sll	r4,r6,r4
  808838:	2884d83a 	srl	r2,r5,r2
  80883c:	4a12b03a 	or	r9,r9,r8
  808840:	2008c03a 	cmpne	r4,r4,zero
  808844:	4912b03a 	or	r9,r9,r4
  808848:	003f4e06 	br	808584 <__alt_mem_onchip_mem+0xff800584>
  80884c:	1c48b03a 	or	r4,r3,r17
  808850:	20003c26 	beq	r4,zero,808944 <__subdf3+0x62c>
  808854:	0084303a 	nor	r2,zero,r2
  808858:	1000381e 	bne	r2,zero,80893c <__subdf3+0x624>
  80885c:	3463c83a 	sub	r17,r6,r17
  808860:	28c5c83a 	sub	r2,r5,r3
  808864:	344d803a 	cmpltu	r6,r6,r17
  808868:	1187c83a 	sub	r3,r2,r6
  80886c:	4821883a 	mov	r16,r9
  808870:	3825883a 	mov	r18,r7
  808874:	003f0606 	br	808490 <__alt_mem_onchip_mem+0xff800490>
  808878:	2023883a 	mov	r17,r4
  80887c:	003f0906 	br	8084a4 <__alt_mem_onchip_mem+0xff8004a4>
  808880:	0101ffc4 	movi	r4,2047
  808884:	813f3a1e 	bne	r16,r4,808570 <__alt_mem_onchip_mem+0xff800570>
  808888:	003ec406 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  80888c:	0005883a 	mov	r2,zero
  808890:	003fb106 	br	808758 <__alt_mem_onchip_mem+0xff800758>
  808894:	0005883a 	mov	r2,zero
  808898:	003fbc06 	br	80878c <__alt_mem_onchip_mem+0xff80078c>
  80889c:	1c44b03a 	or	r2,r3,r17
  8088a0:	80008e1e 	bne	r16,zero,808adc <__subdf3+0x7c4>
  8088a4:	1000c826 	beq	r2,zero,808bc8 <__subdf3+0x8b0>
  8088a8:	2984b03a 	or	r2,r5,r6
  8088ac:	103ebb26 	beq	r2,zero,80839c <__alt_mem_onchip_mem+0xff80039c>
  8088b0:	8989883a 	add	r4,r17,r6
  8088b4:	1945883a 	add	r2,r3,r5
  8088b8:	2447803a 	cmpltu	r3,r4,r17
  8088bc:	1887883a 	add	r3,r3,r2
  8088c0:	1880202c 	andhi	r2,r3,128
  8088c4:	2023883a 	mov	r17,r4
  8088c8:	103f1626 	beq	r2,zero,808524 <__alt_mem_onchip_mem+0xff800524>
  8088cc:	00bfe034 	movhi	r2,65408
  8088d0:	10bfffc4 	addi	r2,r2,-1
  8088d4:	5021883a 	mov	r16,r10
  8088d8:	1886703a 	and	r3,r3,r2
  8088dc:	003eaf06 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  8088e0:	3825883a 	mov	r18,r7
  8088e4:	003f0f06 	br	808524 <__alt_mem_onchip_mem+0xff800524>
  8088e8:	1c44b03a 	or	r2,r3,r17
  8088ec:	8000251e 	bne	r16,zero,808984 <__subdf3+0x66c>
  8088f0:	1000661e 	bne	r2,zero,808a8c <__subdf3+0x774>
  8088f4:	2990b03a 	or	r8,r5,r6
  8088f8:	40009626 	beq	r8,zero,808b54 <__subdf3+0x83c>
  8088fc:	2807883a 	mov	r3,r5
  808900:	3023883a 	mov	r17,r6
  808904:	3825883a 	mov	r18,r7
  808908:	003ea406 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  80890c:	127ff804 	addi	r9,r2,-32
  808910:	01000804 	movi	r4,32
  808914:	2a52d83a 	srl	r9,r5,r9
  808918:	11008c26 	beq	r2,r4,808b4c <__subdf3+0x834>
  80891c:	01001004 	movi	r4,64
  808920:	2085c83a 	sub	r2,r4,r2
  808924:	2884983a 	sll	r2,r5,r2
  808928:	118cb03a 	or	r6,r2,r6
  80892c:	300cc03a 	cmpne	r6,r6,zero
  808930:	4992b03a 	or	r9,r9,r6
  808934:	0005883a 	mov	r2,zero
  808938:	003f1206 	br	808584 <__alt_mem_onchip_mem+0xff800584>
  80893c:	0101ffc4 	movi	r4,2047
  808940:	493f9c1e 	bne	r9,r4,8087b4 <__alt_mem_onchip_mem+0xff8007b4>
  808944:	2807883a 	mov	r3,r5
  808948:	3023883a 	mov	r17,r6
  80894c:	4821883a 	mov	r16,r9
  808950:	3825883a 	mov	r18,r7
  808954:	003e9106 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808958:	80001f1e 	bne	r16,zero,8089d8 <__subdf3+0x6c0>
  80895c:	1c48b03a 	or	r4,r3,r17
  808960:	20005a26 	beq	r4,zero,808acc <__subdf3+0x7b4>
  808964:	0084303a 	nor	r2,zero,r2
  808968:	1000561e 	bne	r2,zero,808ac4 <__subdf3+0x7ac>
  80896c:	89a3883a 	add	r17,r17,r6
  808970:	1945883a 	add	r2,r3,r5
  808974:	898d803a 	cmpltu	r6,r17,r6
  808978:	3087883a 	add	r3,r6,r2
  80897c:	4821883a 	mov	r16,r9
  808980:	003f0506 	br	808598 <__alt_mem_onchip_mem+0xff800598>
  808984:	10002b1e 	bne	r2,zero,808a34 <__subdf3+0x71c>
  808988:	2984b03a 	or	r2,r5,r6
  80898c:	10008026 	beq	r2,zero,808b90 <__subdf3+0x878>
  808990:	2807883a 	mov	r3,r5
  808994:	3023883a 	mov	r17,r6
  808998:	3825883a 	mov	r18,r7
  80899c:	0401ffc4 	movi	r16,2047
  8089a0:	003e7e06 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  8089a4:	3809883a 	mov	r4,r7
  8089a8:	0011883a 	mov	r8,zero
  8089ac:	0005883a 	mov	r2,zero
  8089b0:	003ee306 	br	808540 <__alt_mem_onchip_mem+0xff800540>
  8089b4:	1c62b03a 	or	r17,r3,r17
  8089b8:	8822c03a 	cmpne	r17,r17,zero
  8089bc:	0005883a 	mov	r2,zero
  8089c0:	003f8906 	br	8087e8 <__alt_mem_onchip_mem+0xff8007e8>
  8089c4:	3809883a 	mov	r4,r7
  8089c8:	4821883a 	mov	r16,r9
  8089cc:	0011883a 	mov	r8,zero
  8089d0:	0005883a 	mov	r2,zero
  8089d4:	003eda06 	br	808540 <__alt_mem_onchip_mem+0xff800540>
  8089d8:	0101ffc4 	movi	r4,2047
  8089dc:	49003b26 	beq	r9,r4,808acc <__subdf3+0x7b4>
  8089e0:	0085c83a 	sub	r2,zero,r2
  8089e4:	18c02034 	orhi	r3,r3,128
  8089e8:	01000e04 	movi	r4,56
  8089ec:	20806e16 	blt	r4,r2,808ba8 <__subdf3+0x890>
  8089f0:	010007c4 	movi	r4,31
  8089f4:	20807716 	blt	r4,r2,808bd4 <__subdf3+0x8bc>
  8089f8:	01000804 	movi	r4,32
  8089fc:	2089c83a 	sub	r4,r4,r2
  808a00:	1914983a 	sll	r10,r3,r4
  808a04:	8890d83a 	srl	r8,r17,r2
  808a08:	8908983a 	sll	r4,r17,r4
  808a0c:	1884d83a 	srl	r2,r3,r2
  808a10:	5222b03a 	or	r17,r10,r8
  808a14:	2006c03a 	cmpne	r3,r4,zero
  808a18:	88e2b03a 	or	r17,r17,r3
  808a1c:	89a3883a 	add	r17,r17,r6
  808a20:	1145883a 	add	r2,r2,r5
  808a24:	898d803a 	cmpltu	r6,r17,r6
  808a28:	3087883a 	add	r3,r6,r2
  808a2c:	4821883a 	mov	r16,r9
  808a30:	003ed906 	br	808598 <__alt_mem_onchip_mem+0xff800598>
  808a34:	2984b03a 	or	r2,r5,r6
  808a38:	10004226 	beq	r2,zero,808b44 <__subdf3+0x82c>
  808a3c:	1808d0fa 	srli	r4,r3,3
  808a40:	8822d0fa 	srli	r17,r17,3
  808a44:	1806977a 	slli	r3,r3,29
  808a48:	2080022c 	andhi	r2,r4,8
  808a4c:	1c62b03a 	or	r17,r3,r17
  808a50:	10000826 	beq	r2,zero,808a74 <__subdf3+0x75c>
  808a54:	2812d0fa 	srli	r9,r5,3
  808a58:	4880022c 	andhi	r2,r9,8
  808a5c:	1000051e 	bne	r2,zero,808a74 <__subdf3+0x75c>
  808a60:	300cd0fa 	srli	r6,r6,3
  808a64:	2804977a 	slli	r2,r5,29
  808a68:	4809883a 	mov	r4,r9
  808a6c:	3825883a 	mov	r18,r7
  808a70:	11a2b03a 	or	r17,r2,r6
  808a74:	8806d77a 	srli	r3,r17,29
  808a78:	200890fa 	slli	r4,r4,3
  808a7c:	882290fa 	slli	r17,r17,3
  808a80:	0401ffc4 	movi	r16,2047
  808a84:	1906b03a 	or	r3,r3,r4
  808a88:	003e4406 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808a8c:	2984b03a 	or	r2,r5,r6
  808a90:	103e4226 	beq	r2,zero,80839c <__alt_mem_onchip_mem+0xff80039c>
  808a94:	8989c83a 	sub	r4,r17,r6
  808a98:	8911803a 	cmpltu	r8,r17,r4
  808a9c:	1945c83a 	sub	r2,r3,r5
  808aa0:	1205c83a 	sub	r2,r2,r8
  808aa4:	1200202c 	andhi	r8,r2,128
  808aa8:	403e9a26 	beq	r8,zero,808514 <__alt_mem_onchip_mem+0xff800514>
  808aac:	3463c83a 	sub	r17,r6,r17
  808ab0:	28c5c83a 	sub	r2,r5,r3
  808ab4:	344d803a 	cmpltu	r6,r6,r17
  808ab8:	1187c83a 	sub	r3,r2,r6
  808abc:	3825883a 	mov	r18,r7
  808ac0:	003e3606 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808ac4:	0101ffc4 	movi	r4,2047
  808ac8:	493fc71e 	bne	r9,r4,8089e8 <__alt_mem_onchip_mem+0xff8009e8>
  808acc:	2807883a 	mov	r3,r5
  808ad0:	3023883a 	mov	r17,r6
  808ad4:	4821883a 	mov	r16,r9
  808ad8:	003e3006 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808adc:	10003626 	beq	r2,zero,808bb8 <__subdf3+0x8a0>
  808ae0:	2984b03a 	or	r2,r5,r6
  808ae4:	10001726 	beq	r2,zero,808b44 <__subdf3+0x82c>
  808ae8:	1808d0fa 	srli	r4,r3,3
  808aec:	8822d0fa 	srli	r17,r17,3
  808af0:	1806977a 	slli	r3,r3,29
  808af4:	2080022c 	andhi	r2,r4,8
  808af8:	1c62b03a 	or	r17,r3,r17
  808afc:	10000726 	beq	r2,zero,808b1c <__subdf3+0x804>
  808b00:	2812d0fa 	srli	r9,r5,3
  808b04:	4880022c 	andhi	r2,r9,8
  808b08:	1000041e 	bne	r2,zero,808b1c <__subdf3+0x804>
  808b0c:	300cd0fa 	srli	r6,r6,3
  808b10:	2804977a 	slli	r2,r5,29
  808b14:	4809883a 	mov	r4,r9
  808b18:	11a2b03a 	or	r17,r2,r6
  808b1c:	8806d77a 	srli	r3,r17,29
  808b20:	200890fa 	slli	r4,r4,3
  808b24:	882290fa 	slli	r17,r17,3
  808b28:	3825883a 	mov	r18,r7
  808b2c:	1906b03a 	or	r3,r3,r4
  808b30:	0401ffc4 	movi	r16,2047
  808b34:	003e1906 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808b38:	000b883a 	mov	r5,zero
  808b3c:	0005883a 	mov	r2,zero
  808b40:	003e2e06 	br	8083fc <__alt_mem_onchip_mem+0xff8003fc>
  808b44:	0401ffc4 	movi	r16,2047
  808b48:	003e1406 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808b4c:	0005883a 	mov	r2,zero
  808b50:	003f7506 	br	808928 <__alt_mem_onchip_mem+0xff800928>
  808b54:	0005883a 	mov	r2,zero
  808b58:	0009883a 	mov	r4,zero
  808b5c:	003e7806 	br	808540 <__alt_mem_onchip_mem+0xff800540>
  808b60:	123ff804 	addi	r8,r2,-32
  808b64:	01000804 	movi	r4,32
  808b68:	1a10d83a 	srl	r8,r3,r8
  808b6c:	11002526 	beq	r2,r4,808c04 <__subdf3+0x8ec>
  808b70:	01001004 	movi	r4,64
  808b74:	2085c83a 	sub	r2,r4,r2
  808b78:	1884983a 	sll	r2,r3,r2
  808b7c:	1444b03a 	or	r2,r2,r17
  808b80:	1004c03a 	cmpne	r2,r2,zero
  808b84:	40a2b03a 	or	r17,r8,r2
  808b88:	0005883a 	mov	r2,zero
  808b8c:	003f1606 	br	8087e8 <__alt_mem_onchip_mem+0xff8007e8>
  808b90:	02000434 	movhi	r8,16
  808b94:	0009883a 	mov	r4,zero
  808b98:	423fffc4 	addi	r8,r8,-1
  808b9c:	00bfffc4 	movi	r2,-1
  808ba0:	0401ffc4 	movi	r16,2047
  808ba4:	003e6606 	br	808540 <__alt_mem_onchip_mem+0xff800540>
  808ba8:	1c62b03a 	or	r17,r3,r17
  808bac:	8822c03a 	cmpne	r17,r17,zero
  808bb0:	0005883a 	mov	r2,zero
  808bb4:	003f9906 	br	808a1c <__alt_mem_onchip_mem+0xff800a1c>
  808bb8:	2807883a 	mov	r3,r5
  808bbc:	3023883a 	mov	r17,r6
  808bc0:	0401ffc4 	movi	r16,2047
  808bc4:	003df506 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808bc8:	2807883a 	mov	r3,r5
  808bcc:	3023883a 	mov	r17,r6
  808bd0:	003df206 	br	80839c <__alt_mem_onchip_mem+0xff80039c>
  808bd4:	123ff804 	addi	r8,r2,-32
  808bd8:	01000804 	movi	r4,32
  808bdc:	1a10d83a 	srl	r8,r3,r8
  808be0:	11000a26 	beq	r2,r4,808c0c <__subdf3+0x8f4>
  808be4:	01001004 	movi	r4,64
  808be8:	2085c83a 	sub	r2,r4,r2
  808bec:	1884983a 	sll	r2,r3,r2
  808bf0:	1444b03a 	or	r2,r2,r17
  808bf4:	1004c03a 	cmpne	r2,r2,zero
  808bf8:	40a2b03a 	or	r17,r8,r2
  808bfc:	0005883a 	mov	r2,zero
  808c00:	003f8606 	br	808a1c <__alt_mem_onchip_mem+0xff800a1c>
  808c04:	0005883a 	mov	r2,zero
  808c08:	003fdc06 	br	808b7c <__alt_mem_onchip_mem+0xff800b7c>
  808c0c:	0005883a 	mov	r2,zero
  808c10:	003ff706 	br	808bf0 <__alt_mem_onchip_mem+0xff800bf0>

00808c14 <__floatsidf>:
  808c14:	defffd04 	addi	sp,sp,-12
  808c18:	dfc00215 	stw	ra,8(sp)
  808c1c:	dc400115 	stw	r17,4(sp)
  808c20:	dc000015 	stw	r16,0(sp)
  808c24:	20002b26 	beq	r4,zero,808cd4 <__floatsidf+0xc0>
  808c28:	2023883a 	mov	r17,r4
  808c2c:	2020d7fa 	srli	r16,r4,31
  808c30:	20002d16 	blt	r4,zero,808ce8 <__floatsidf+0xd4>
  808c34:	8809883a 	mov	r4,r17
  808c38:	0808cf00 	call	808cf0 <__clzsi2>
  808c3c:	01410784 	movi	r5,1054
  808c40:	288bc83a 	sub	r5,r5,r2
  808c44:	01010cc4 	movi	r4,1075
  808c48:	2149c83a 	sub	r4,r4,r5
  808c4c:	00c007c4 	movi	r3,31
  808c50:	1900160e 	bge	r3,r4,808cac <__floatsidf+0x98>
  808c54:	00c104c4 	movi	r3,1043
  808c58:	1947c83a 	sub	r3,r3,r5
  808c5c:	88c6983a 	sll	r3,r17,r3
  808c60:	00800434 	movhi	r2,16
  808c64:	10bfffc4 	addi	r2,r2,-1
  808c68:	1886703a 	and	r3,r3,r2
  808c6c:	2941ffcc 	andi	r5,r5,2047
  808c70:	800d883a 	mov	r6,r16
  808c74:	0005883a 	mov	r2,zero
  808c78:	280a953a 	slli	r5,r5,20
  808c7c:	31803fcc 	andi	r6,r6,255
  808c80:	01000434 	movhi	r4,16
  808c84:	300c97fa 	slli	r6,r6,31
  808c88:	213fffc4 	addi	r4,r4,-1
  808c8c:	1906703a 	and	r3,r3,r4
  808c90:	1946b03a 	or	r3,r3,r5
  808c94:	1986b03a 	or	r3,r3,r6
  808c98:	dfc00217 	ldw	ra,8(sp)
  808c9c:	dc400117 	ldw	r17,4(sp)
  808ca0:	dc000017 	ldw	r16,0(sp)
  808ca4:	dec00304 	addi	sp,sp,12
  808ca8:	f800283a 	ret
  808cac:	00c002c4 	movi	r3,11
  808cb0:	1887c83a 	sub	r3,r3,r2
  808cb4:	88c6d83a 	srl	r3,r17,r3
  808cb8:	8904983a 	sll	r2,r17,r4
  808cbc:	01000434 	movhi	r4,16
  808cc0:	213fffc4 	addi	r4,r4,-1
  808cc4:	2941ffcc 	andi	r5,r5,2047
  808cc8:	1906703a 	and	r3,r3,r4
  808ccc:	800d883a 	mov	r6,r16
  808cd0:	003fe906 	br	808c78 <__alt_mem_onchip_mem+0xff800c78>
  808cd4:	000d883a 	mov	r6,zero
  808cd8:	000b883a 	mov	r5,zero
  808cdc:	0007883a 	mov	r3,zero
  808ce0:	0005883a 	mov	r2,zero
  808ce4:	003fe406 	br	808c78 <__alt_mem_onchip_mem+0xff800c78>
  808ce8:	0123c83a 	sub	r17,zero,r4
  808cec:	003fd106 	br	808c34 <__alt_mem_onchip_mem+0xff800c34>

00808cf0 <__clzsi2>:
  808cf0:	00bfffd4 	movui	r2,65535
  808cf4:	11000536 	bltu	r2,r4,808d0c <__clzsi2+0x1c>
  808cf8:	00803fc4 	movi	r2,255
  808cfc:	11000f36 	bltu	r2,r4,808d3c <__clzsi2+0x4c>
  808d00:	00800804 	movi	r2,32
  808d04:	0007883a 	mov	r3,zero
  808d08:	00000506 	br	808d20 <__clzsi2+0x30>
  808d0c:	00804034 	movhi	r2,256
  808d10:	10bfffc4 	addi	r2,r2,-1
  808d14:	11000c2e 	bgeu	r2,r4,808d48 <__clzsi2+0x58>
  808d18:	00800204 	movi	r2,8
  808d1c:	00c00604 	movi	r3,24
  808d20:	20c8d83a 	srl	r4,r4,r3
  808d24:	00c02074 	movhi	r3,129
  808d28:	18ff1584 	addi	r3,r3,-938
  808d2c:	1909883a 	add	r4,r3,r4
  808d30:	20c00003 	ldbu	r3,0(r4)
  808d34:	10c5c83a 	sub	r2,r2,r3
  808d38:	f800283a 	ret
  808d3c:	00800604 	movi	r2,24
  808d40:	00c00204 	movi	r3,8
  808d44:	003ff606 	br	808d20 <__alt_mem_onchip_mem+0xff800d20>
  808d48:	00800404 	movi	r2,16
  808d4c:	1007883a 	mov	r3,r2
  808d50:	003ff306 	br	808d20 <__alt_mem_onchip_mem+0xff800d20>

00808d54 <_puts_r>:
  808d54:	defff604 	addi	sp,sp,-40
  808d58:	dc000715 	stw	r16,28(sp)
  808d5c:	2021883a 	mov	r16,r4
  808d60:	2809883a 	mov	r4,r5
  808d64:	dc400815 	stw	r17,32(sp)
  808d68:	dfc00915 	stw	ra,36(sp)
  808d6c:	2823883a 	mov	r17,r5
  808d70:	0808e280 	call	808e28 <strlen>
  808d74:	10c00044 	addi	r3,r2,1
  808d78:	d8800115 	stw	r2,4(sp)
  808d7c:	00802074 	movhi	r2,129
  808d80:	10bf5604 	addi	r2,r2,-680
  808d84:	d8800215 	stw	r2,8(sp)
  808d88:	00800044 	movi	r2,1
  808d8c:	d8800315 	stw	r2,12(sp)
  808d90:	00800084 	movi	r2,2
  808d94:	dc400015 	stw	r17,0(sp)
  808d98:	d8c00615 	stw	r3,24(sp)
  808d9c:	dec00415 	stw	sp,16(sp)
  808da0:	d8800515 	stw	r2,20(sp)
  808da4:	80000226 	beq	r16,zero,808db0 <_puts_r+0x5c>
  808da8:	80800e17 	ldw	r2,56(r16)
  808dac:	10001426 	beq	r2,zero,808e00 <_puts_r+0xac>
  808db0:	81400217 	ldw	r5,8(r16)
  808db4:	2880030b 	ldhu	r2,12(r5)
  808db8:	10c8000c 	andi	r3,r2,8192
  808dbc:	1800061e 	bne	r3,zero,808dd8 <_puts_r+0x84>
  808dc0:	29001917 	ldw	r4,100(r5)
  808dc4:	00f7ffc4 	movi	r3,-8193
  808dc8:	10880014 	ori	r2,r2,8192
  808dcc:	20c6703a 	and	r3,r4,r3
  808dd0:	2880030d 	sth	r2,12(r5)
  808dd4:	28c01915 	stw	r3,100(r5)
  808dd8:	d9800404 	addi	r6,sp,16
  808ddc:	8009883a 	mov	r4,r16
  808de0:	08092600 	call	809260 <__sfvwrite_r>
  808de4:	1000091e 	bne	r2,zero,808e0c <_puts_r+0xb8>
  808de8:	00800284 	movi	r2,10
  808dec:	dfc00917 	ldw	ra,36(sp)
  808df0:	dc400817 	ldw	r17,32(sp)
  808df4:	dc000717 	ldw	r16,28(sp)
  808df8:	dec00a04 	addi	sp,sp,40
  808dfc:	f800283a 	ret
  808e00:	8009883a 	mov	r4,r16
  808e04:	08092100 	call	809210 <__sinit>
  808e08:	003fe906 	br	808db0 <__alt_mem_onchip_mem+0xff800db0>
  808e0c:	00bfffc4 	movi	r2,-1
  808e10:	003ff606 	br	808dec <__alt_mem_onchip_mem+0xff800dec>

00808e14 <puts>:
  808e14:	00802074 	movhi	r2,129
  808e18:	10871104 	addi	r2,r2,7236
  808e1c:	200b883a 	mov	r5,r4
  808e20:	11000017 	ldw	r4,0(r2)
  808e24:	0808d541 	jmpi	808d54 <_puts_r>

00808e28 <strlen>:
  808e28:	208000cc 	andi	r2,r4,3
  808e2c:	10002026 	beq	r2,zero,808eb0 <strlen+0x88>
  808e30:	20800007 	ldb	r2,0(r4)
  808e34:	10002026 	beq	r2,zero,808eb8 <strlen+0x90>
  808e38:	2005883a 	mov	r2,r4
  808e3c:	00000206 	br	808e48 <strlen+0x20>
  808e40:	10c00007 	ldb	r3,0(r2)
  808e44:	18001826 	beq	r3,zero,808ea8 <strlen+0x80>
  808e48:	10800044 	addi	r2,r2,1
  808e4c:	10c000cc 	andi	r3,r2,3
  808e50:	183ffb1e 	bne	r3,zero,808e40 <__alt_mem_onchip_mem+0xff800e40>
  808e54:	10c00017 	ldw	r3,0(r2)
  808e58:	01ffbff4 	movhi	r7,65279
  808e5c:	39ffbfc4 	addi	r7,r7,-257
  808e60:	00ca303a 	nor	r5,zero,r3
  808e64:	01a02074 	movhi	r6,32897
  808e68:	19c7883a 	add	r3,r3,r7
  808e6c:	31a02004 	addi	r6,r6,-32640
  808e70:	1946703a 	and	r3,r3,r5
  808e74:	1986703a 	and	r3,r3,r6
  808e78:	1800091e 	bne	r3,zero,808ea0 <strlen+0x78>
  808e7c:	10800104 	addi	r2,r2,4
  808e80:	10c00017 	ldw	r3,0(r2)
  808e84:	19cb883a 	add	r5,r3,r7
  808e88:	00c6303a 	nor	r3,zero,r3
  808e8c:	28c6703a 	and	r3,r5,r3
  808e90:	1986703a 	and	r3,r3,r6
  808e94:	183ff926 	beq	r3,zero,808e7c <__alt_mem_onchip_mem+0xff800e7c>
  808e98:	00000106 	br	808ea0 <strlen+0x78>
  808e9c:	10800044 	addi	r2,r2,1
  808ea0:	10c00007 	ldb	r3,0(r2)
  808ea4:	183ffd1e 	bne	r3,zero,808e9c <__alt_mem_onchip_mem+0xff800e9c>
  808ea8:	1105c83a 	sub	r2,r2,r4
  808eac:	f800283a 	ret
  808eb0:	2005883a 	mov	r2,r4
  808eb4:	003fe706 	br	808e54 <__alt_mem_onchip_mem+0xff800e54>
  808eb8:	0005883a 	mov	r2,zero
  808ebc:	f800283a 	ret

00808ec0 <__fp_unlock>:
  808ec0:	0005883a 	mov	r2,zero
  808ec4:	f800283a 	ret

00808ec8 <_cleanup_r>:
  808ec8:	01402074 	movhi	r5,129
  808ecc:	296b9704 	addi	r5,r5,-20900
  808ed0:	08097e01 	jmpi	8097e0 <_fwalk_reent>

00808ed4 <__sinit.part.1>:
  808ed4:	defff704 	addi	sp,sp,-36
  808ed8:	00c02074 	movhi	r3,129
  808edc:	dfc00815 	stw	ra,32(sp)
  808ee0:	ddc00715 	stw	r23,28(sp)
  808ee4:	dd800615 	stw	r22,24(sp)
  808ee8:	dd400515 	stw	r21,20(sp)
  808eec:	dd000415 	stw	r20,16(sp)
  808ef0:	dcc00315 	stw	r19,12(sp)
  808ef4:	dc800215 	stw	r18,8(sp)
  808ef8:	dc400115 	stw	r17,4(sp)
  808efc:	dc000015 	stw	r16,0(sp)
  808f00:	18e3b204 	addi	r3,r3,-28984
  808f04:	24000117 	ldw	r16,4(r4)
  808f08:	20c00f15 	stw	r3,60(r4)
  808f0c:	2080bb04 	addi	r2,r4,748
  808f10:	00c000c4 	movi	r3,3
  808f14:	20c0b915 	stw	r3,740(r4)
  808f18:	2080ba15 	stw	r2,744(r4)
  808f1c:	2000b815 	stw	zero,736(r4)
  808f20:	05c00204 	movi	r23,8
  808f24:	00800104 	movi	r2,4
  808f28:	2025883a 	mov	r18,r4
  808f2c:	b80d883a 	mov	r6,r23
  808f30:	81001704 	addi	r4,r16,92
  808f34:	000b883a 	mov	r5,zero
  808f38:	80000015 	stw	zero,0(r16)
  808f3c:	80000115 	stw	zero,4(r16)
  808f40:	80000215 	stw	zero,8(r16)
  808f44:	8080030d 	sth	r2,12(r16)
  808f48:	80001915 	stw	zero,100(r16)
  808f4c:	8000038d 	sth	zero,14(r16)
  808f50:	80000415 	stw	zero,16(r16)
  808f54:	80000515 	stw	zero,20(r16)
  808f58:	80000615 	stw	zero,24(r16)
  808f5c:	080a4380 	call	80a438 <memset>
  808f60:	05802074 	movhi	r22,129
  808f64:	94400217 	ldw	r17,8(r18)
  808f68:	05402074 	movhi	r21,129
  808f6c:	05002074 	movhi	r20,129
  808f70:	04c02074 	movhi	r19,129
  808f74:	b5aac604 	addi	r22,r22,-21736
  808f78:	ad6add04 	addi	r21,r21,-21644
  808f7c:	a52afc04 	addi	r20,r20,-21520
  808f80:	9ceb1304 	addi	r19,r19,-21428
  808f84:	85800815 	stw	r22,32(r16)
  808f88:	85400915 	stw	r21,36(r16)
  808f8c:	85000a15 	stw	r20,40(r16)
  808f90:	84c00b15 	stw	r19,44(r16)
  808f94:	84000715 	stw	r16,28(r16)
  808f98:	00800284 	movi	r2,10
  808f9c:	8880030d 	sth	r2,12(r17)
  808fa0:	00800044 	movi	r2,1
  808fa4:	b80d883a 	mov	r6,r23
  808fa8:	89001704 	addi	r4,r17,92
  808fac:	000b883a 	mov	r5,zero
  808fb0:	88000015 	stw	zero,0(r17)
  808fb4:	88000115 	stw	zero,4(r17)
  808fb8:	88000215 	stw	zero,8(r17)
  808fbc:	88001915 	stw	zero,100(r17)
  808fc0:	8880038d 	sth	r2,14(r17)
  808fc4:	88000415 	stw	zero,16(r17)
  808fc8:	88000515 	stw	zero,20(r17)
  808fcc:	88000615 	stw	zero,24(r17)
  808fd0:	080a4380 	call	80a438 <memset>
  808fd4:	94000317 	ldw	r16,12(r18)
  808fd8:	00800484 	movi	r2,18
  808fdc:	8c400715 	stw	r17,28(r17)
  808fe0:	8d800815 	stw	r22,32(r17)
  808fe4:	8d400915 	stw	r21,36(r17)
  808fe8:	8d000a15 	stw	r20,40(r17)
  808fec:	8cc00b15 	stw	r19,44(r17)
  808ff0:	8080030d 	sth	r2,12(r16)
  808ff4:	00800084 	movi	r2,2
  808ff8:	80000015 	stw	zero,0(r16)
  808ffc:	80000115 	stw	zero,4(r16)
  809000:	80000215 	stw	zero,8(r16)
  809004:	80001915 	stw	zero,100(r16)
  809008:	8080038d 	sth	r2,14(r16)
  80900c:	80000415 	stw	zero,16(r16)
  809010:	80000515 	stw	zero,20(r16)
  809014:	80000615 	stw	zero,24(r16)
  809018:	b80d883a 	mov	r6,r23
  80901c:	000b883a 	mov	r5,zero
  809020:	81001704 	addi	r4,r16,92
  809024:	080a4380 	call	80a438 <memset>
  809028:	00800044 	movi	r2,1
  80902c:	84000715 	stw	r16,28(r16)
  809030:	85800815 	stw	r22,32(r16)
  809034:	85400915 	stw	r21,36(r16)
  809038:	85000a15 	stw	r20,40(r16)
  80903c:	84c00b15 	stw	r19,44(r16)
  809040:	90800e15 	stw	r2,56(r18)
  809044:	dfc00817 	ldw	ra,32(sp)
  809048:	ddc00717 	ldw	r23,28(sp)
  80904c:	dd800617 	ldw	r22,24(sp)
  809050:	dd400517 	ldw	r21,20(sp)
  809054:	dd000417 	ldw	r20,16(sp)
  809058:	dcc00317 	ldw	r19,12(sp)
  80905c:	dc800217 	ldw	r18,8(sp)
  809060:	dc400117 	ldw	r17,4(sp)
  809064:	dc000017 	ldw	r16,0(sp)
  809068:	dec00904 	addi	sp,sp,36
  80906c:	f800283a 	ret

00809070 <__fp_lock>:
  809070:	0005883a 	mov	r2,zero
  809074:	f800283a 	ret

00809078 <__sfmoreglue>:
  809078:	defffc04 	addi	sp,sp,-16
  80907c:	dc400115 	stw	r17,4(sp)
  809080:	2c7fffc4 	addi	r17,r5,-1
  809084:	8c401a24 	muli	r17,r17,104
  809088:	dc800215 	stw	r18,8(sp)
  80908c:	2825883a 	mov	r18,r5
  809090:	89401d04 	addi	r5,r17,116
  809094:	dc000015 	stw	r16,0(sp)
  809098:	dfc00315 	stw	ra,12(sp)
  80909c:	08098a40 	call	8098a4 <_malloc_r>
  8090a0:	1021883a 	mov	r16,r2
  8090a4:	10000726 	beq	r2,zero,8090c4 <__sfmoreglue+0x4c>
  8090a8:	11000304 	addi	r4,r2,12
  8090ac:	10000015 	stw	zero,0(r2)
  8090b0:	14800115 	stw	r18,4(r2)
  8090b4:	11000215 	stw	r4,8(r2)
  8090b8:	89801a04 	addi	r6,r17,104
  8090bc:	000b883a 	mov	r5,zero
  8090c0:	080a4380 	call	80a438 <memset>
  8090c4:	8005883a 	mov	r2,r16
  8090c8:	dfc00317 	ldw	ra,12(sp)
  8090cc:	dc800217 	ldw	r18,8(sp)
  8090d0:	dc400117 	ldw	r17,4(sp)
  8090d4:	dc000017 	ldw	r16,0(sp)
  8090d8:	dec00404 	addi	sp,sp,16
  8090dc:	f800283a 	ret

008090e0 <__sfp>:
  8090e0:	defffb04 	addi	sp,sp,-20
  8090e4:	dc000015 	stw	r16,0(sp)
  8090e8:	04002074 	movhi	r16,129
  8090ec:	84071004 	addi	r16,r16,7232
  8090f0:	dcc00315 	stw	r19,12(sp)
  8090f4:	2027883a 	mov	r19,r4
  8090f8:	81000017 	ldw	r4,0(r16)
  8090fc:	dfc00415 	stw	ra,16(sp)
  809100:	dc800215 	stw	r18,8(sp)
  809104:	20800e17 	ldw	r2,56(r4)
  809108:	dc400115 	stw	r17,4(sp)
  80910c:	1000021e 	bne	r2,zero,809118 <__sfp+0x38>
  809110:	0808ed40 	call	808ed4 <__sinit.part.1>
  809114:	81000017 	ldw	r4,0(r16)
  809118:	2480b804 	addi	r18,r4,736
  80911c:	047fffc4 	movi	r17,-1
  809120:	91000117 	ldw	r4,4(r18)
  809124:	94000217 	ldw	r16,8(r18)
  809128:	213fffc4 	addi	r4,r4,-1
  80912c:	20000a16 	blt	r4,zero,809158 <__sfp+0x78>
  809130:	8080030f 	ldh	r2,12(r16)
  809134:	10000c26 	beq	r2,zero,809168 <__sfp+0x88>
  809138:	80c01d04 	addi	r3,r16,116
  80913c:	00000206 	br	809148 <__sfp+0x68>
  809140:	18bfe60f 	ldh	r2,-104(r3)
  809144:	10000826 	beq	r2,zero,809168 <__sfp+0x88>
  809148:	213fffc4 	addi	r4,r4,-1
  80914c:	1c3ffd04 	addi	r16,r3,-12
  809150:	18c01a04 	addi	r3,r3,104
  809154:	247ffa1e 	bne	r4,r17,809140 <__alt_mem_onchip_mem+0xff801140>
  809158:	90800017 	ldw	r2,0(r18)
  80915c:	10001d26 	beq	r2,zero,8091d4 <__sfp+0xf4>
  809160:	1025883a 	mov	r18,r2
  809164:	003fee06 	br	809120 <__alt_mem_onchip_mem+0xff801120>
  809168:	00bfffc4 	movi	r2,-1
  80916c:	8080038d 	sth	r2,14(r16)
  809170:	00800044 	movi	r2,1
  809174:	8080030d 	sth	r2,12(r16)
  809178:	80001915 	stw	zero,100(r16)
  80917c:	80000015 	stw	zero,0(r16)
  809180:	80000215 	stw	zero,8(r16)
  809184:	80000115 	stw	zero,4(r16)
  809188:	80000415 	stw	zero,16(r16)
  80918c:	80000515 	stw	zero,20(r16)
  809190:	80000615 	stw	zero,24(r16)
  809194:	01800204 	movi	r6,8
  809198:	000b883a 	mov	r5,zero
  80919c:	81001704 	addi	r4,r16,92
  8091a0:	080a4380 	call	80a438 <memset>
  8091a4:	8005883a 	mov	r2,r16
  8091a8:	80000c15 	stw	zero,48(r16)
  8091ac:	80000d15 	stw	zero,52(r16)
  8091b0:	80001115 	stw	zero,68(r16)
  8091b4:	80001215 	stw	zero,72(r16)
  8091b8:	dfc00417 	ldw	ra,16(sp)
  8091bc:	dcc00317 	ldw	r19,12(sp)
  8091c0:	dc800217 	ldw	r18,8(sp)
  8091c4:	dc400117 	ldw	r17,4(sp)
  8091c8:	dc000017 	ldw	r16,0(sp)
  8091cc:	dec00504 	addi	sp,sp,20
  8091d0:	f800283a 	ret
  8091d4:	01400104 	movi	r5,4
  8091d8:	9809883a 	mov	r4,r19
  8091dc:	08090780 	call	809078 <__sfmoreglue>
  8091e0:	90800015 	stw	r2,0(r18)
  8091e4:	103fde1e 	bne	r2,zero,809160 <__alt_mem_onchip_mem+0xff801160>
  8091e8:	00800304 	movi	r2,12
  8091ec:	98800015 	stw	r2,0(r19)
  8091f0:	0005883a 	mov	r2,zero
  8091f4:	003ff006 	br	8091b8 <__alt_mem_onchip_mem+0xff8011b8>

008091f8 <_cleanup>:
  8091f8:	00802074 	movhi	r2,129
  8091fc:	10871004 	addi	r2,r2,7232
  809200:	11000017 	ldw	r4,0(r2)
  809204:	01402074 	movhi	r5,129
  809208:	296b9704 	addi	r5,r5,-20900
  80920c:	08097e01 	jmpi	8097e0 <_fwalk_reent>

00809210 <__sinit>:
  809210:	20800e17 	ldw	r2,56(r4)
  809214:	10000126 	beq	r2,zero,80921c <__sinit+0xc>
  809218:	f800283a 	ret
  80921c:	0808ed41 	jmpi	808ed4 <__sinit.part.1>

00809220 <__sfp_lock_acquire>:
  809220:	f800283a 	ret

00809224 <__sfp_lock_release>:
  809224:	f800283a 	ret

00809228 <__sinit_lock_acquire>:
  809228:	f800283a 	ret

0080922c <__sinit_lock_release>:
  80922c:	f800283a 	ret

00809230 <__fp_lock_all>:
  809230:	00802074 	movhi	r2,129
  809234:	10871104 	addi	r2,r2,7236
  809238:	11000017 	ldw	r4,0(r2)
  80923c:	01402074 	movhi	r5,129
  809240:	29641c04 	addi	r5,r5,-28560
  809244:	080971c1 	jmpi	80971c <_fwalk>

00809248 <__fp_unlock_all>:
  809248:	00802074 	movhi	r2,129
  80924c:	10871104 	addi	r2,r2,7236
  809250:	11000017 	ldw	r4,0(r2)
  809254:	01402074 	movhi	r5,129
  809258:	2963b004 	addi	r5,r5,-28992
  80925c:	080971c1 	jmpi	80971c <_fwalk>

00809260 <__sfvwrite_r>:
  809260:	30800217 	ldw	r2,8(r6)
  809264:	10006726 	beq	r2,zero,809404 <__sfvwrite_r+0x1a4>
  809268:	28c0030b 	ldhu	r3,12(r5)
  80926c:	defff404 	addi	sp,sp,-48
  809270:	dd400715 	stw	r21,28(sp)
  809274:	dd000615 	stw	r20,24(sp)
  809278:	dc000215 	stw	r16,8(sp)
  80927c:	dfc00b15 	stw	ra,44(sp)
  809280:	df000a15 	stw	fp,40(sp)
  809284:	ddc00915 	stw	r23,36(sp)
  809288:	dd800815 	stw	r22,32(sp)
  80928c:	dcc00515 	stw	r19,20(sp)
  809290:	dc800415 	stw	r18,16(sp)
  809294:	dc400315 	stw	r17,12(sp)
  809298:	1880020c 	andi	r2,r3,8
  80929c:	2821883a 	mov	r16,r5
  8092a0:	202b883a 	mov	r21,r4
  8092a4:	3029883a 	mov	r20,r6
  8092a8:	10002726 	beq	r2,zero,809348 <__sfvwrite_r+0xe8>
  8092ac:	28800417 	ldw	r2,16(r5)
  8092b0:	10002526 	beq	r2,zero,809348 <__sfvwrite_r+0xe8>
  8092b4:	1880008c 	andi	r2,r3,2
  8092b8:	a4400017 	ldw	r17,0(r20)
  8092bc:	10002a26 	beq	r2,zero,809368 <__sfvwrite_r+0x108>
  8092c0:	05a00034 	movhi	r22,32768
  8092c4:	0027883a 	mov	r19,zero
  8092c8:	0025883a 	mov	r18,zero
  8092cc:	b5bf0004 	addi	r22,r22,-1024
  8092d0:	980d883a 	mov	r6,r19
  8092d4:	a809883a 	mov	r4,r21
  8092d8:	90004626 	beq	r18,zero,8093f4 <__sfvwrite_r+0x194>
  8092dc:	900f883a 	mov	r7,r18
  8092e0:	b480022e 	bgeu	r22,r18,8092ec <__sfvwrite_r+0x8c>
  8092e4:	01e00034 	movhi	r7,32768
  8092e8:	39ff0004 	addi	r7,r7,-1024
  8092ec:	80800917 	ldw	r2,36(r16)
  8092f0:	81400717 	ldw	r5,28(r16)
  8092f4:	103ee83a 	callr	r2
  8092f8:	0080570e 	bge	zero,r2,809458 <__sfvwrite_r+0x1f8>
  8092fc:	a0c00217 	ldw	r3,8(r20)
  809300:	98a7883a 	add	r19,r19,r2
  809304:	90a5c83a 	sub	r18,r18,r2
  809308:	1885c83a 	sub	r2,r3,r2
  80930c:	a0800215 	stw	r2,8(r20)
  809310:	103fef1e 	bne	r2,zero,8092d0 <__alt_mem_onchip_mem+0xff8012d0>
  809314:	0005883a 	mov	r2,zero
  809318:	dfc00b17 	ldw	ra,44(sp)
  80931c:	df000a17 	ldw	fp,40(sp)
  809320:	ddc00917 	ldw	r23,36(sp)
  809324:	dd800817 	ldw	r22,32(sp)
  809328:	dd400717 	ldw	r21,28(sp)
  80932c:	dd000617 	ldw	r20,24(sp)
  809330:	dcc00517 	ldw	r19,20(sp)
  809334:	dc800417 	ldw	r18,16(sp)
  809338:	dc400317 	ldw	r17,12(sp)
  80933c:	dc000217 	ldw	r16,8(sp)
  809340:	dec00c04 	addi	sp,sp,48
  809344:	f800283a 	ret
  809348:	800b883a 	mov	r5,r16
  80934c:	a809883a 	mov	r4,r21
  809350:	080acb40 	call	80acb4 <__swsetup_r>
  809354:	1000eb1e 	bne	r2,zero,809704 <__sfvwrite_r+0x4a4>
  809358:	80c0030b 	ldhu	r3,12(r16)
  80935c:	a4400017 	ldw	r17,0(r20)
  809360:	1880008c 	andi	r2,r3,2
  809364:	103fd61e 	bne	r2,zero,8092c0 <__alt_mem_onchip_mem+0xff8012c0>
  809368:	1880004c 	andi	r2,r3,1
  80936c:	10003f1e 	bne	r2,zero,80946c <__sfvwrite_r+0x20c>
  809370:	0039883a 	mov	fp,zero
  809374:	0025883a 	mov	r18,zero
  809378:	90001a26 	beq	r18,zero,8093e4 <__sfvwrite_r+0x184>
  80937c:	1880800c 	andi	r2,r3,512
  809380:	84c00217 	ldw	r19,8(r16)
  809384:	10002126 	beq	r2,zero,80940c <__sfvwrite_r+0x1ac>
  809388:	982f883a 	mov	r23,r19
  80938c:	94c09336 	bltu	r18,r19,8095dc <__sfvwrite_r+0x37c>
  809390:	1881200c 	andi	r2,r3,1152
  809394:	10009e1e 	bne	r2,zero,809610 <__sfvwrite_r+0x3b0>
  809398:	81000017 	ldw	r4,0(r16)
  80939c:	b80d883a 	mov	r6,r23
  8093a0:	e00b883a 	mov	r5,fp
  8093a4:	080a2dc0 	call	80a2dc <memmove>
  8093a8:	80c00217 	ldw	r3,8(r16)
  8093ac:	81000017 	ldw	r4,0(r16)
  8093b0:	9005883a 	mov	r2,r18
  8093b4:	1ce7c83a 	sub	r19,r3,r19
  8093b8:	25cf883a 	add	r7,r4,r23
  8093bc:	84c00215 	stw	r19,8(r16)
  8093c0:	81c00015 	stw	r7,0(r16)
  8093c4:	a0c00217 	ldw	r3,8(r20)
  8093c8:	e0b9883a 	add	fp,fp,r2
  8093cc:	90a5c83a 	sub	r18,r18,r2
  8093d0:	18a7c83a 	sub	r19,r3,r2
  8093d4:	a4c00215 	stw	r19,8(r20)
  8093d8:	983fce26 	beq	r19,zero,809314 <__alt_mem_onchip_mem+0xff801314>
  8093dc:	80c0030b 	ldhu	r3,12(r16)
  8093e0:	903fe61e 	bne	r18,zero,80937c <__alt_mem_onchip_mem+0xff80137c>
  8093e4:	8f000017 	ldw	fp,0(r17)
  8093e8:	8c800117 	ldw	r18,4(r17)
  8093ec:	8c400204 	addi	r17,r17,8
  8093f0:	003fe106 	br	809378 <__alt_mem_onchip_mem+0xff801378>
  8093f4:	8cc00017 	ldw	r19,0(r17)
  8093f8:	8c800117 	ldw	r18,4(r17)
  8093fc:	8c400204 	addi	r17,r17,8
  809400:	003fb306 	br	8092d0 <__alt_mem_onchip_mem+0xff8012d0>
  809404:	0005883a 	mov	r2,zero
  809408:	f800283a 	ret
  80940c:	81000017 	ldw	r4,0(r16)
  809410:	80800417 	ldw	r2,16(r16)
  809414:	11005736 	bltu	r2,r4,809574 <__sfvwrite_r+0x314>
  809418:	85c00517 	ldw	r23,20(r16)
  80941c:	95c05536 	bltu	r18,r23,809574 <__sfvwrite_r+0x314>
  809420:	00a00034 	movhi	r2,32768
  809424:	10bfffc4 	addi	r2,r2,-1
  809428:	9009883a 	mov	r4,r18
  80942c:	1480012e 	bgeu	r2,r18,809434 <__sfvwrite_r+0x1d4>
  809430:	1009883a 	mov	r4,r2
  809434:	b80b883a 	mov	r5,r23
  809438:	080b9680 	call	80b968 <__divsi3>
  80943c:	15cf383a 	mul	r7,r2,r23
  809440:	81400717 	ldw	r5,28(r16)
  809444:	80800917 	ldw	r2,36(r16)
  809448:	e00d883a 	mov	r6,fp
  80944c:	a809883a 	mov	r4,r21
  809450:	103ee83a 	callr	r2
  809454:	00bfdb16 	blt	zero,r2,8093c4 <__alt_mem_onchip_mem+0xff8013c4>
  809458:	8080030b 	ldhu	r2,12(r16)
  80945c:	10801014 	ori	r2,r2,64
  809460:	8080030d 	sth	r2,12(r16)
  809464:	00bfffc4 	movi	r2,-1
  809468:	003fab06 	br	809318 <__alt_mem_onchip_mem+0xff801318>
  80946c:	0027883a 	mov	r19,zero
  809470:	0011883a 	mov	r8,zero
  809474:	0039883a 	mov	fp,zero
  809478:	0025883a 	mov	r18,zero
  80947c:	90001f26 	beq	r18,zero,8094fc <__sfvwrite_r+0x29c>
  809480:	40005a26 	beq	r8,zero,8095ec <__sfvwrite_r+0x38c>
  809484:	982d883a 	mov	r22,r19
  809488:	94c0012e 	bgeu	r18,r19,809490 <__sfvwrite_r+0x230>
  80948c:	902d883a 	mov	r22,r18
  809490:	81000017 	ldw	r4,0(r16)
  809494:	80800417 	ldw	r2,16(r16)
  809498:	b02f883a 	mov	r23,r22
  80949c:	81c00517 	ldw	r7,20(r16)
  8094a0:	1100032e 	bgeu	r2,r4,8094b0 <__sfvwrite_r+0x250>
  8094a4:	80c00217 	ldw	r3,8(r16)
  8094a8:	38c7883a 	add	r3,r7,r3
  8094ac:	1d801816 	blt	r3,r22,809510 <__sfvwrite_r+0x2b0>
  8094b0:	b1c03e16 	blt	r22,r7,8095ac <__sfvwrite_r+0x34c>
  8094b4:	80800917 	ldw	r2,36(r16)
  8094b8:	81400717 	ldw	r5,28(r16)
  8094bc:	e00d883a 	mov	r6,fp
  8094c0:	da000115 	stw	r8,4(sp)
  8094c4:	a809883a 	mov	r4,r21
  8094c8:	103ee83a 	callr	r2
  8094cc:	102f883a 	mov	r23,r2
  8094d0:	da000117 	ldw	r8,4(sp)
  8094d4:	00bfe00e 	bge	zero,r2,809458 <__alt_mem_onchip_mem+0xff801458>
  8094d8:	9de7c83a 	sub	r19,r19,r23
  8094dc:	98001f26 	beq	r19,zero,80955c <__sfvwrite_r+0x2fc>
  8094e0:	a0800217 	ldw	r2,8(r20)
  8094e4:	e5f9883a 	add	fp,fp,r23
  8094e8:	95e5c83a 	sub	r18,r18,r23
  8094ec:	15efc83a 	sub	r23,r2,r23
  8094f0:	a5c00215 	stw	r23,8(r20)
  8094f4:	b83f8726 	beq	r23,zero,809314 <__alt_mem_onchip_mem+0xff801314>
  8094f8:	903fe11e 	bne	r18,zero,809480 <__alt_mem_onchip_mem+0xff801480>
  8094fc:	8f000017 	ldw	fp,0(r17)
  809500:	8c800117 	ldw	r18,4(r17)
  809504:	0011883a 	mov	r8,zero
  809508:	8c400204 	addi	r17,r17,8
  80950c:	003fdb06 	br	80947c <__alt_mem_onchip_mem+0xff80147c>
  809510:	180d883a 	mov	r6,r3
  809514:	e00b883a 	mov	r5,fp
  809518:	da000115 	stw	r8,4(sp)
  80951c:	d8c00015 	stw	r3,0(sp)
  809520:	080a2dc0 	call	80a2dc <memmove>
  809524:	d8c00017 	ldw	r3,0(sp)
  809528:	80800017 	ldw	r2,0(r16)
  80952c:	800b883a 	mov	r5,r16
  809530:	a809883a 	mov	r4,r21
  809534:	10c5883a 	add	r2,r2,r3
  809538:	80800015 	stw	r2,0(r16)
  80953c:	d8c00015 	stw	r3,0(sp)
  809540:	080b17c0 	call	80b17c <_fflush_r>
  809544:	d8c00017 	ldw	r3,0(sp)
  809548:	da000117 	ldw	r8,4(sp)
  80954c:	103fc21e 	bne	r2,zero,809458 <__alt_mem_onchip_mem+0xff801458>
  809550:	182f883a 	mov	r23,r3
  809554:	9de7c83a 	sub	r19,r19,r23
  809558:	983fe11e 	bne	r19,zero,8094e0 <__alt_mem_onchip_mem+0xff8014e0>
  80955c:	800b883a 	mov	r5,r16
  809560:	a809883a 	mov	r4,r21
  809564:	080b17c0 	call	80b17c <_fflush_r>
  809568:	103fbb1e 	bne	r2,zero,809458 <__alt_mem_onchip_mem+0xff801458>
  80956c:	0011883a 	mov	r8,zero
  809570:	003fdb06 	br	8094e0 <__alt_mem_onchip_mem+0xff8014e0>
  809574:	94c0012e 	bgeu	r18,r19,80957c <__sfvwrite_r+0x31c>
  809578:	9027883a 	mov	r19,r18
  80957c:	980d883a 	mov	r6,r19
  809580:	e00b883a 	mov	r5,fp
  809584:	080a2dc0 	call	80a2dc <memmove>
  809588:	80800217 	ldw	r2,8(r16)
  80958c:	80c00017 	ldw	r3,0(r16)
  809590:	14c5c83a 	sub	r2,r2,r19
  809594:	1cc7883a 	add	r3,r3,r19
  809598:	80800215 	stw	r2,8(r16)
  80959c:	80c00015 	stw	r3,0(r16)
  8095a0:	10004326 	beq	r2,zero,8096b0 <__sfvwrite_r+0x450>
  8095a4:	9805883a 	mov	r2,r19
  8095a8:	003f8606 	br	8093c4 <__alt_mem_onchip_mem+0xff8013c4>
  8095ac:	b00d883a 	mov	r6,r22
  8095b0:	e00b883a 	mov	r5,fp
  8095b4:	da000115 	stw	r8,4(sp)
  8095b8:	080a2dc0 	call	80a2dc <memmove>
  8095bc:	80800217 	ldw	r2,8(r16)
  8095c0:	80c00017 	ldw	r3,0(r16)
  8095c4:	da000117 	ldw	r8,4(sp)
  8095c8:	1585c83a 	sub	r2,r2,r22
  8095cc:	1dad883a 	add	r22,r3,r22
  8095d0:	80800215 	stw	r2,8(r16)
  8095d4:	85800015 	stw	r22,0(r16)
  8095d8:	003fbf06 	br	8094d8 <__alt_mem_onchip_mem+0xff8014d8>
  8095dc:	81000017 	ldw	r4,0(r16)
  8095e0:	9027883a 	mov	r19,r18
  8095e4:	902f883a 	mov	r23,r18
  8095e8:	003f6c06 	br	80939c <__alt_mem_onchip_mem+0xff80139c>
  8095ec:	900d883a 	mov	r6,r18
  8095f0:	01400284 	movi	r5,10
  8095f4:	e009883a 	mov	r4,fp
  8095f8:	080a0b00 	call	80a0b0 <memchr>
  8095fc:	10003e26 	beq	r2,zero,8096f8 <__sfvwrite_r+0x498>
  809600:	10800044 	addi	r2,r2,1
  809604:	1727c83a 	sub	r19,r2,fp
  809608:	02000044 	movi	r8,1
  80960c:	003f9d06 	br	809484 <__alt_mem_onchip_mem+0xff801484>
  809610:	80800517 	ldw	r2,20(r16)
  809614:	81400417 	ldw	r5,16(r16)
  809618:	81c00017 	ldw	r7,0(r16)
  80961c:	10a7883a 	add	r19,r2,r2
  809620:	9885883a 	add	r2,r19,r2
  809624:	1026d7fa 	srli	r19,r2,31
  809628:	396dc83a 	sub	r22,r7,r5
  80962c:	b1000044 	addi	r4,r22,1
  809630:	9885883a 	add	r2,r19,r2
  809634:	1027d07a 	srai	r19,r2,1
  809638:	2485883a 	add	r2,r4,r18
  80963c:	980d883a 	mov	r6,r19
  809640:	9880022e 	bgeu	r19,r2,80964c <__sfvwrite_r+0x3ec>
  809644:	1027883a 	mov	r19,r2
  809648:	100d883a 	mov	r6,r2
  80964c:	18c1000c 	andi	r3,r3,1024
  809650:	18001c26 	beq	r3,zero,8096c4 <__sfvwrite_r+0x464>
  809654:	300b883a 	mov	r5,r6
  809658:	a809883a 	mov	r4,r21
  80965c:	08098a40 	call	8098a4 <_malloc_r>
  809660:	102f883a 	mov	r23,r2
  809664:	10002926 	beq	r2,zero,80970c <__sfvwrite_r+0x4ac>
  809668:	81400417 	ldw	r5,16(r16)
  80966c:	b00d883a 	mov	r6,r22
  809670:	1009883a 	mov	r4,r2
  809674:	080a1940 	call	80a194 <memcpy>
  809678:	8080030b 	ldhu	r2,12(r16)
  80967c:	00fedfc4 	movi	r3,-1153
  809680:	10c4703a 	and	r2,r2,r3
  809684:	10802014 	ori	r2,r2,128
  809688:	8080030d 	sth	r2,12(r16)
  80968c:	bd89883a 	add	r4,r23,r22
  809690:	9d8fc83a 	sub	r7,r19,r22
  809694:	85c00415 	stw	r23,16(r16)
  809698:	84c00515 	stw	r19,20(r16)
  80969c:	81000015 	stw	r4,0(r16)
  8096a0:	9027883a 	mov	r19,r18
  8096a4:	81c00215 	stw	r7,8(r16)
  8096a8:	902f883a 	mov	r23,r18
  8096ac:	003f3b06 	br	80939c <__alt_mem_onchip_mem+0xff80139c>
  8096b0:	800b883a 	mov	r5,r16
  8096b4:	a809883a 	mov	r4,r21
  8096b8:	080b17c0 	call	80b17c <_fflush_r>
  8096bc:	103fb926 	beq	r2,zero,8095a4 <__alt_mem_onchip_mem+0xff8015a4>
  8096c0:	003f6506 	br	809458 <__alt_mem_onchip_mem+0xff801458>
  8096c4:	a809883a 	mov	r4,r21
  8096c8:	080a5600 	call	80a560 <_realloc_r>
  8096cc:	102f883a 	mov	r23,r2
  8096d0:	103fee1e 	bne	r2,zero,80968c <__alt_mem_onchip_mem+0xff80168c>
  8096d4:	81400417 	ldw	r5,16(r16)
  8096d8:	a809883a 	mov	r4,r21
  8096dc:	080b32c0 	call	80b32c <_free_r>
  8096e0:	8080030b 	ldhu	r2,12(r16)
  8096e4:	00ffdfc4 	movi	r3,-129
  8096e8:	1884703a 	and	r2,r3,r2
  8096ec:	00c00304 	movi	r3,12
  8096f0:	a8c00015 	stw	r3,0(r21)
  8096f4:	003f5906 	br	80945c <__alt_mem_onchip_mem+0xff80145c>
  8096f8:	94c00044 	addi	r19,r18,1
  8096fc:	02000044 	movi	r8,1
  809700:	003f6006 	br	809484 <__alt_mem_onchip_mem+0xff801484>
  809704:	00bfffc4 	movi	r2,-1
  809708:	003f0306 	br	809318 <__alt_mem_onchip_mem+0xff801318>
  80970c:	00800304 	movi	r2,12
  809710:	a8800015 	stw	r2,0(r21)
  809714:	8080030b 	ldhu	r2,12(r16)
  809718:	003f5006 	br	80945c <__alt_mem_onchip_mem+0xff80145c>

0080971c <_fwalk>:
  80971c:	defff704 	addi	sp,sp,-36
  809720:	dd000415 	stw	r20,16(sp)
  809724:	dfc00815 	stw	ra,32(sp)
  809728:	ddc00715 	stw	r23,28(sp)
  80972c:	dd800615 	stw	r22,24(sp)
  809730:	dd400515 	stw	r21,20(sp)
  809734:	dcc00315 	stw	r19,12(sp)
  809738:	dc800215 	stw	r18,8(sp)
  80973c:	dc400115 	stw	r17,4(sp)
  809740:	dc000015 	stw	r16,0(sp)
  809744:	2500b804 	addi	r20,r4,736
  809748:	a0002326 	beq	r20,zero,8097d8 <_fwalk+0xbc>
  80974c:	282b883a 	mov	r21,r5
  809750:	002f883a 	mov	r23,zero
  809754:	05800044 	movi	r22,1
  809758:	04ffffc4 	movi	r19,-1
  80975c:	a4400117 	ldw	r17,4(r20)
  809760:	a4800217 	ldw	r18,8(r20)
  809764:	8c7fffc4 	addi	r17,r17,-1
  809768:	88000d16 	blt	r17,zero,8097a0 <_fwalk+0x84>
  80976c:	94000304 	addi	r16,r18,12
  809770:	94800384 	addi	r18,r18,14
  809774:	8080000b 	ldhu	r2,0(r16)
  809778:	8c7fffc4 	addi	r17,r17,-1
  80977c:	813ffd04 	addi	r4,r16,-12
  809780:	b080042e 	bgeu	r22,r2,809794 <_fwalk+0x78>
  809784:	9080000f 	ldh	r2,0(r18)
  809788:	14c00226 	beq	r2,r19,809794 <_fwalk+0x78>
  80978c:	a83ee83a 	callr	r21
  809790:	b8aeb03a 	or	r23,r23,r2
  809794:	84001a04 	addi	r16,r16,104
  809798:	94801a04 	addi	r18,r18,104
  80979c:	8cfff51e 	bne	r17,r19,809774 <__alt_mem_onchip_mem+0xff801774>
  8097a0:	a5000017 	ldw	r20,0(r20)
  8097a4:	a03fed1e 	bne	r20,zero,80975c <__alt_mem_onchip_mem+0xff80175c>
  8097a8:	b805883a 	mov	r2,r23
  8097ac:	dfc00817 	ldw	ra,32(sp)
  8097b0:	ddc00717 	ldw	r23,28(sp)
  8097b4:	dd800617 	ldw	r22,24(sp)
  8097b8:	dd400517 	ldw	r21,20(sp)
  8097bc:	dd000417 	ldw	r20,16(sp)
  8097c0:	dcc00317 	ldw	r19,12(sp)
  8097c4:	dc800217 	ldw	r18,8(sp)
  8097c8:	dc400117 	ldw	r17,4(sp)
  8097cc:	dc000017 	ldw	r16,0(sp)
  8097d0:	dec00904 	addi	sp,sp,36
  8097d4:	f800283a 	ret
  8097d8:	002f883a 	mov	r23,zero
  8097dc:	003ff206 	br	8097a8 <__alt_mem_onchip_mem+0xff8017a8>

008097e0 <_fwalk_reent>:
  8097e0:	defff704 	addi	sp,sp,-36
  8097e4:	dd000415 	stw	r20,16(sp)
  8097e8:	dfc00815 	stw	ra,32(sp)
  8097ec:	ddc00715 	stw	r23,28(sp)
  8097f0:	dd800615 	stw	r22,24(sp)
  8097f4:	dd400515 	stw	r21,20(sp)
  8097f8:	dcc00315 	stw	r19,12(sp)
  8097fc:	dc800215 	stw	r18,8(sp)
  809800:	dc400115 	stw	r17,4(sp)
  809804:	dc000015 	stw	r16,0(sp)
  809808:	2500b804 	addi	r20,r4,736
  80980c:	a0002326 	beq	r20,zero,80989c <_fwalk_reent+0xbc>
  809810:	282b883a 	mov	r21,r5
  809814:	2027883a 	mov	r19,r4
  809818:	002f883a 	mov	r23,zero
  80981c:	05800044 	movi	r22,1
  809820:	04bfffc4 	movi	r18,-1
  809824:	a4400117 	ldw	r17,4(r20)
  809828:	a4000217 	ldw	r16,8(r20)
  80982c:	8c7fffc4 	addi	r17,r17,-1
  809830:	88000c16 	blt	r17,zero,809864 <_fwalk_reent+0x84>
  809834:	84000304 	addi	r16,r16,12
  809838:	8080000b 	ldhu	r2,0(r16)
  80983c:	8c7fffc4 	addi	r17,r17,-1
  809840:	817ffd04 	addi	r5,r16,-12
  809844:	b080052e 	bgeu	r22,r2,80985c <_fwalk_reent+0x7c>
  809848:	8080008f 	ldh	r2,2(r16)
  80984c:	9809883a 	mov	r4,r19
  809850:	14800226 	beq	r2,r18,80985c <_fwalk_reent+0x7c>
  809854:	a83ee83a 	callr	r21
  809858:	b8aeb03a 	or	r23,r23,r2
  80985c:	84001a04 	addi	r16,r16,104
  809860:	8cbff51e 	bne	r17,r18,809838 <__alt_mem_onchip_mem+0xff801838>
  809864:	a5000017 	ldw	r20,0(r20)
  809868:	a03fee1e 	bne	r20,zero,809824 <__alt_mem_onchip_mem+0xff801824>
  80986c:	b805883a 	mov	r2,r23
  809870:	dfc00817 	ldw	ra,32(sp)
  809874:	ddc00717 	ldw	r23,28(sp)
  809878:	dd800617 	ldw	r22,24(sp)
  80987c:	dd400517 	ldw	r21,20(sp)
  809880:	dd000417 	ldw	r20,16(sp)
  809884:	dcc00317 	ldw	r19,12(sp)
  809888:	dc800217 	ldw	r18,8(sp)
  80988c:	dc400117 	ldw	r17,4(sp)
  809890:	dc000017 	ldw	r16,0(sp)
  809894:	dec00904 	addi	sp,sp,36
  809898:	f800283a 	ret
  80989c:	002f883a 	mov	r23,zero
  8098a0:	003ff206 	br	80986c <__alt_mem_onchip_mem+0xff80186c>

008098a4 <_malloc_r>:
  8098a4:	defff504 	addi	sp,sp,-44
  8098a8:	dc800315 	stw	r18,12(sp)
  8098ac:	dfc00a15 	stw	ra,40(sp)
  8098b0:	df000915 	stw	fp,36(sp)
  8098b4:	ddc00815 	stw	r23,32(sp)
  8098b8:	dd800715 	stw	r22,28(sp)
  8098bc:	dd400615 	stw	r21,24(sp)
  8098c0:	dd000515 	stw	r20,20(sp)
  8098c4:	dcc00415 	stw	r19,16(sp)
  8098c8:	dc400215 	stw	r17,8(sp)
  8098cc:	dc000115 	stw	r16,4(sp)
  8098d0:	288002c4 	addi	r2,r5,11
  8098d4:	00c00584 	movi	r3,22
  8098d8:	2025883a 	mov	r18,r4
  8098dc:	18807f2e 	bgeu	r3,r2,809adc <_malloc_r+0x238>
  8098e0:	047ffe04 	movi	r17,-8
  8098e4:	1462703a 	and	r17,r2,r17
  8098e8:	8800a316 	blt	r17,zero,809b78 <_malloc_r+0x2d4>
  8098ec:	8940a236 	bltu	r17,r5,809b78 <_malloc_r+0x2d4>
  8098f0:	080c1c40 	call	80c1c4 <__malloc_lock>
  8098f4:	00807dc4 	movi	r2,503
  8098f8:	1441e92e 	bgeu	r2,r17,80a0a0 <_malloc_r+0x7fc>
  8098fc:	8804d27a 	srli	r2,r17,9
  809900:	1000a126 	beq	r2,zero,809b88 <_malloc_r+0x2e4>
  809904:	00c00104 	movi	r3,4
  809908:	18811e36 	bltu	r3,r2,809d84 <_malloc_r+0x4e0>
  80990c:	8804d1ba 	srli	r2,r17,6
  809910:	12000e44 	addi	r8,r2,57
  809914:	11c00e04 	addi	r7,r2,56
  809918:	4209883a 	add	r4,r8,r8
  80991c:	04c02074 	movhi	r19,129
  809920:	2109883a 	add	r4,r4,r4
  809924:	9cc11204 	addi	r19,r19,1096
  809928:	2109883a 	add	r4,r4,r4
  80992c:	9909883a 	add	r4,r19,r4
  809930:	24000117 	ldw	r16,4(r4)
  809934:	213ffe04 	addi	r4,r4,-8
  809938:	24009726 	beq	r4,r16,809b98 <_malloc_r+0x2f4>
  80993c:	80800117 	ldw	r2,4(r16)
  809940:	01bfff04 	movi	r6,-4
  809944:	014003c4 	movi	r5,15
  809948:	1184703a 	and	r2,r2,r6
  80994c:	1447c83a 	sub	r3,r2,r17
  809950:	28c00716 	blt	r5,r3,809970 <_malloc_r+0xcc>
  809954:	1800920e 	bge	r3,zero,809ba0 <_malloc_r+0x2fc>
  809958:	84000317 	ldw	r16,12(r16)
  80995c:	24008e26 	beq	r4,r16,809b98 <_malloc_r+0x2f4>
  809960:	80800117 	ldw	r2,4(r16)
  809964:	1184703a 	and	r2,r2,r6
  809968:	1447c83a 	sub	r3,r2,r17
  80996c:	28fff90e 	bge	r5,r3,809954 <__alt_mem_onchip_mem+0xff801954>
  809970:	3809883a 	mov	r4,r7
  809974:	01802074 	movhi	r6,129
  809978:	9c000417 	ldw	r16,16(r19)
  80997c:	31811204 	addi	r6,r6,1096
  809980:	32000204 	addi	r8,r6,8
  809984:	82013426 	beq	r16,r8,809e58 <_malloc_r+0x5b4>
  809988:	80c00117 	ldw	r3,4(r16)
  80998c:	00bfff04 	movi	r2,-4
  809990:	188e703a 	and	r7,r3,r2
  809994:	3c45c83a 	sub	r2,r7,r17
  809998:	00c003c4 	movi	r3,15
  80999c:	18811f16 	blt	r3,r2,809e1c <_malloc_r+0x578>
  8099a0:	32000515 	stw	r8,20(r6)
  8099a4:	32000415 	stw	r8,16(r6)
  8099a8:	10007f0e 	bge	r2,zero,809ba8 <_malloc_r+0x304>
  8099ac:	00807fc4 	movi	r2,511
  8099b0:	11c0fd36 	bltu	r2,r7,809da8 <_malloc_r+0x504>
  8099b4:	3806d0fa 	srli	r3,r7,3
  8099b8:	01c00044 	movi	r7,1
  8099bc:	30800117 	ldw	r2,4(r6)
  8099c0:	19400044 	addi	r5,r3,1
  8099c4:	294b883a 	add	r5,r5,r5
  8099c8:	1807d0ba 	srai	r3,r3,2
  8099cc:	294b883a 	add	r5,r5,r5
  8099d0:	294b883a 	add	r5,r5,r5
  8099d4:	298b883a 	add	r5,r5,r6
  8099d8:	38c6983a 	sll	r3,r7,r3
  8099dc:	29c00017 	ldw	r7,0(r5)
  8099e0:	2a7ffe04 	addi	r9,r5,-8
  8099e4:	1886b03a 	or	r3,r3,r2
  8099e8:	82400315 	stw	r9,12(r16)
  8099ec:	81c00215 	stw	r7,8(r16)
  8099f0:	30c00115 	stw	r3,4(r6)
  8099f4:	2c000015 	stw	r16,0(r5)
  8099f8:	3c000315 	stw	r16,12(r7)
  8099fc:	2005d0ba 	srai	r2,r4,2
  809a00:	01400044 	movi	r5,1
  809a04:	288a983a 	sll	r5,r5,r2
  809a08:	19406f36 	bltu	r3,r5,809bc8 <_malloc_r+0x324>
  809a0c:	28c4703a 	and	r2,r5,r3
  809a10:	10000a1e 	bne	r2,zero,809a3c <_malloc_r+0x198>
  809a14:	00bfff04 	movi	r2,-4
  809a18:	294b883a 	add	r5,r5,r5
  809a1c:	2088703a 	and	r4,r4,r2
  809a20:	28c4703a 	and	r2,r5,r3
  809a24:	21000104 	addi	r4,r4,4
  809a28:	1000041e 	bne	r2,zero,809a3c <_malloc_r+0x198>
  809a2c:	294b883a 	add	r5,r5,r5
  809a30:	28c4703a 	and	r2,r5,r3
  809a34:	21000104 	addi	r4,r4,4
  809a38:	103ffc26 	beq	r2,zero,809a2c <__alt_mem_onchip_mem+0xff801a2c>
  809a3c:	02bfff04 	movi	r10,-4
  809a40:	024003c4 	movi	r9,15
  809a44:	21800044 	addi	r6,r4,1
  809a48:	318d883a 	add	r6,r6,r6
  809a4c:	318d883a 	add	r6,r6,r6
  809a50:	318d883a 	add	r6,r6,r6
  809a54:	998d883a 	add	r6,r19,r6
  809a58:	333ffe04 	addi	r12,r6,-8
  809a5c:	2017883a 	mov	r11,r4
  809a60:	31800104 	addi	r6,r6,4
  809a64:	34000017 	ldw	r16,0(r6)
  809a68:	31fffd04 	addi	r7,r6,-12
  809a6c:	81c0041e 	bne	r16,r7,809a80 <_malloc_r+0x1dc>
  809a70:	0000fb06 	br	809e60 <_malloc_r+0x5bc>
  809a74:	1801030e 	bge	r3,zero,809e84 <_malloc_r+0x5e0>
  809a78:	84000317 	ldw	r16,12(r16)
  809a7c:	81c0f826 	beq	r16,r7,809e60 <_malloc_r+0x5bc>
  809a80:	80800117 	ldw	r2,4(r16)
  809a84:	1284703a 	and	r2,r2,r10
  809a88:	1447c83a 	sub	r3,r2,r17
  809a8c:	48fff90e 	bge	r9,r3,809a74 <__alt_mem_onchip_mem+0xff801a74>
  809a90:	80800317 	ldw	r2,12(r16)
  809a94:	81000217 	ldw	r4,8(r16)
  809a98:	89400054 	ori	r5,r17,1
  809a9c:	81400115 	stw	r5,4(r16)
  809aa0:	20800315 	stw	r2,12(r4)
  809aa4:	11000215 	stw	r4,8(r2)
  809aa8:	8463883a 	add	r17,r16,r17
  809aac:	9c400515 	stw	r17,20(r19)
  809ab0:	9c400415 	stw	r17,16(r19)
  809ab4:	18800054 	ori	r2,r3,1
  809ab8:	88800115 	stw	r2,4(r17)
  809abc:	8a000315 	stw	r8,12(r17)
  809ac0:	8a000215 	stw	r8,8(r17)
  809ac4:	88e3883a 	add	r17,r17,r3
  809ac8:	88c00015 	stw	r3,0(r17)
  809acc:	9009883a 	mov	r4,r18
  809ad0:	080c1e80 	call	80c1e8 <__malloc_unlock>
  809ad4:	80800204 	addi	r2,r16,8
  809ad8:	00001b06 	br	809b48 <_malloc_r+0x2a4>
  809adc:	04400404 	movi	r17,16
  809ae0:	89402536 	bltu	r17,r5,809b78 <_malloc_r+0x2d4>
  809ae4:	080c1c40 	call	80c1c4 <__malloc_lock>
  809ae8:	00800184 	movi	r2,6
  809aec:	01000084 	movi	r4,2
  809af0:	04c02074 	movhi	r19,129
  809af4:	1085883a 	add	r2,r2,r2
  809af8:	9cc11204 	addi	r19,r19,1096
  809afc:	1085883a 	add	r2,r2,r2
  809b00:	9885883a 	add	r2,r19,r2
  809b04:	14000117 	ldw	r16,4(r2)
  809b08:	10fffe04 	addi	r3,r2,-8
  809b0c:	80c0d926 	beq	r16,r3,809e74 <_malloc_r+0x5d0>
  809b10:	80c00117 	ldw	r3,4(r16)
  809b14:	81000317 	ldw	r4,12(r16)
  809b18:	00bfff04 	movi	r2,-4
  809b1c:	1884703a 	and	r2,r3,r2
  809b20:	81400217 	ldw	r5,8(r16)
  809b24:	8085883a 	add	r2,r16,r2
  809b28:	10c00117 	ldw	r3,4(r2)
  809b2c:	29000315 	stw	r4,12(r5)
  809b30:	21400215 	stw	r5,8(r4)
  809b34:	18c00054 	ori	r3,r3,1
  809b38:	10c00115 	stw	r3,4(r2)
  809b3c:	9009883a 	mov	r4,r18
  809b40:	080c1e80 	call	80c1e8 <__malloc_unlock>
  809b44:	80800204 	addi	r2,r16,8
  809b48:	dfc00a17 	ldw	ra,40(sp)
  809b4c:	df000917 	ldw	fp,36(sp)
  809b50:	ddc00817 	ldw	r23,32(sp)
  809b54:	dd800717 	ldw	r22,28(sp)
  809b58:	dd400617 	ldw	r21,24(sp)
  809b5c:	dd000517 	ldw	r20,20(sp)
  809b60:	dcc00417 	ldw	r19,16(sp)
  809b64:	dc800317 	ldw	r18,12(sp)
  809b68:	dc400217 	ldw	r17,8(sp)
  809b6c:	dc000117 	ldw	r16,4(sp)
  809b70:	dec00b04 	addi	sp,sp,44
  809b74:	f800283a 	ret
  809b78:	00800304 	movi	r2,12
  809b7c:	90800015 	stw	r2,0(r18)
  809b80:	0005883a 	mov	r2,zero
  809b84:	003ff006 	br	809b48 <__alt_mem_onchip_mem+0xff801b48>
  809b88:	01002004 	movi	r4,128
  809b8c:	02001004 	movi	r8,64
  809b90:	01c00fc4 	movi	r7,63
  809b94:	003f6106 	br	80991c <__alt_mem_onchip_mem+0xff80191c>
  809b98:	4009883a 	mov	r4,r8
  809b9c:	003f7506 	br	809974 <__alt_mem_onchip_mem+0xff801974>
  809ba0:	81000317 	ldw	r4,12(r16)
  809ba4:	003fde06 	br	809b20 <__alt_mem_onchip_mem+0xff801b20>
  809ba8:	81c5883a 	add	r2,r16,r7
  809bac:	11400117 	ldw	r5,4(r2)
  809bb0:	9009883a 	mov	r4,r18
  809bb4:	29400054 	ori	r5,r5,1
  809bb8:	11400115 	stw	r5,4(r2)
  809bbc:	080c1e80 	call	80c1e8 <__malloc_unlock>
  809bc0:	80800204 	addi	r2,r16,8
  809bc4:	003fe006 	br	809b48 <__alt_mem_onchip_mem+0xff801b48>
  809bc8:	9c000217 	ldw	r16,8(r19)
  809bcc:	00bfff04 	movi	r2,-4
  809bd0:	85800117 	ldw	r22,4(r16)
  809bd4:	b0ac703a 	and	r22,r22,r2
  809bd8:	b4400336 	bltu	r22,r17,809be8 <_malloc_r+0x344>
  809bdc:	b445c83a 	sub	r2,r22,r17
  809be0:	00c003c4 	movi	r3,15
  809be4:	18805d16 	blt	r3,r2,809d5c <_malloc_r+0x4b8>
  809be8:	05c02074 	movhi	r23,129
  809bec:	00802074 	movhi	r2,129
  809bf0:	108e3b04 	addi	r2,r2,14572
  809bf4:	bdc71204 	addi	r23,r23,7240
  809bf8:	15400017 	ldw	r21,0(r2)
  809bfc:	b8c00017 	ldw	r3,0(r23)
  809c00:	00bfffc4 	movi	r2,-1
  809c04:	858d883a 	add	r6,r16,r22
  809c08:	8d6b883a 	add	r21,r17,r21
  809c0c:	1880ea26 	beq	r3,r2,809fb8 <_malloc_r+0x714>
  809c10:	ad4403c4 	addi	r21,r21,4111
  809c14:	00bc0004 	movi	r2,-4096
  809c18:	a8aa703a 	and	r21,r21,r2
  809c1c:	a80b883a 	mov	r5,r21
  809c20:	9009883a 	mov	r4,r18
  809c24:	d9800015 	stw	r6,0(sp)
  809c28:	080aac40 	call	80aac4 <_sbrk_r>
  809c2c:	1029883a 	mov	r20,r2
  809c30:	00bfffc4 	movi	r2,-1
  809c34:	d9800017 	ldw	r6,0(sp)
  809c38:	a080e826 	beq	r20,r2,809fdc <_malloc_r+0x738>
  809c3c:	a180a636 	bltu	r20,r6,809ed8 <_malloc_r+0x634>
  809c40:	07002074 	movhi	fp,129
  809c44:	e70e4404 	addi	fp,fp,14608
  809c48:	e0800017 	ldw	r2,0(fp)
  809c4c:	a887883a 	add	r3,r21,r2
  809c50:	e0c00015 	stw	r3,0(fp)
  809c54:	3500e626 	beq	r6,r20,809ff0 <_malloc_r+0x74c>
  809c58:	b9000017 	ldw	r4,0(r23)
  809c5c:	00bfffc4 	movi	r2,-1
  809c60:	2080ee26 	beq	r4,r2,80a01c <_malloc_r+0x778>
  809c64:	a185c83a 	sub	r2,r20,r6
  809c68:	10c5883a 	add	r2,r2,r3
  809c6c:	e0800015 	stw	r2,0(fp)
  809c70:	a0c001cc 	andi	r3,r20,7
  809c74:	1800bc26 	beq	r3,zero,809f68 <_malloc_r+0x6c4>
  809c78:	a0e9c83a 	sub	r20,r20,r3
  809c7c:	00840204 	movi	r2,4104
  809c80:	a5000204 	addi	r20,r20,8
  809c84:	10c7c83a 	sub	r3,r2,r3
  809c88:	a545883a 	add	r2,r20,r21
  809c8c:	1083ffcc 	andi	r2,r2,4095
  809c90:	18abc83a 	sub	r21,r3,r2
  809c94:	a80b883a 	mov	r5,r21
  809c98:	9009883a 	mov	r4,r18
  809c9c:	080aac40 	call	80aac4 <_sbrk_r>
  809ca0:	00ffffc4 	movi	r3,-1
  809ca4:	10c0e126 	beq	r2,r3,80a02c <_malloc_r+0x788>
  809ca8:	1505c83a 	sub	r2,r2,r20
  809cac:	1545883a 	add	r2,r2,r21
  809cb0:	10800054 	ori	r2,r2,1
  809cb4:	e0c00017 	ldw	r3,0(fp)
  809cb8:	9d000215 	stw	r20,8(r19)
  809cbc:	a0800115 	stw	r2,4(r20)
  809cc0:	a8c7883a 	add	r3,r21,r3
  809cc4:	e0c00015 	stw	r3,0(fp)
  809cc8:	84c00e26 	beq	r16,r19,809d04 <_malloc_r+0x460>
  809ccc:	018003c4 	movi	r6,15
  809cd0:	3580a72e 	bgeu	r6,r22,809f70 <_malloc_r+0x6cc>
  809cd4:	81400117 	ldw	r5,4(r16)
  809cd8:	013ffe04 	movi	r4,-8
  809cdc:	b0bffd04 	addi	r2,r22,-12
  809ce0:	1104703a 	and	r2,r2,r4
  809ce4:	2900004c 	andi	r4,r5,1
  809ce8:	2088b03a 	or	r4,r4,r2
  809cec:	81000115 	stw	r4,4(r16)
  809cf0:	01400144 	movi	r5,5
  809cf4:	8089883a 	add	r4,r16,r2
  809cf8:	21400115 	stw	r5,4(r4)
  809cfc:	21400215 	stw	r5,8(r4)
  809d00:	3080cd36 	bltu	r6,r2,80a038 <_malloc_r+0x794>
  809d04:	00802074 	movhi	r2,129
  809d08:	108e3a04 	addi	r2,r2,14568
  809d0c:	11000017 	ldw	r4,0(r2)
  809d10:	20c0012e 	bgeu	r4,r3,809d18 <_malloc_r+0x474>
  809d14:	10c00015 	stw	r3,0(r2)
  809d18:	00802074 	movhi	r2,129
  809d1c:	108e3904 	addi	r2,r2,14564
  809d20:	11000017 	ldw	r4,0(r2)
  809d24:	9c000217 	ldw	r16,8(r19)
  809d28:	20c0012e 	bgeu	r4,r3,809d30 <_malloc_r+0x48c>
  809d2c:	10c00015 	stw	r3,0(r2)
  809d30:	80c00117 	ldw	r3,4(r16)
  809d34:	00bfff04 	movi	r2,-4
  809d38:	1886703a 	and	r3,r3,r2
  809d3c:	1c45c83a 	sub	r2,r3,r17
  809d40:	1c400236 	bltu	r3,r17,809d4c <_malloc_r+0x4a8>
  809d44:	00c003c4 	movi	r3,15
  809d48:	18800416 	blt	r3,r2,809d5c <_malloc_r+0x4b8>
  809d4c:	9009883a 	mov	r4,r18
  809d50:	080c1e80 	call	80c1e8 <__malloc_unlock>
  809d54:	0005883a 	mov	r2,zero
  809d58:	003f7b06 	br	809b48 <__alt_mem_onchip_mem+0xff801b48>
  809d5c:	88c00054 	ori	r3,r17,1
  809d60:	80c00115 	stw	r3,4(r16)
  809d64:	8463883a 	add	r17,r16,r17
  809d68:	10800054 	ori	r2,r2,1
  809d6c:	9c400215 	stw	r17,8(r19)
  809d70:	88800115 	stw	r2,4(r17)
  809d74:	9009883a 	mov	r4,r18
  809d78:	080c1e80 	call	80c1e8 <__malloc_unlock>
  809d7c:	80800204 	addi	r2,r16,8
  809d80:	003f7106 	br	809b48 <__alt_mem_onchip_mem+0xff801b48>
  809d84:	00c00504 	movi	r3,20
  809d88:	18804a2e 	bgeu	r3,r2,809eb4 <_malloc_r+0x610>
  809d8c:	00c01504 	movi	r3,84
  809d90:	18806e36 	bltu	r3,r2,809f4c <_malloc_r+0x6a8>
  809d94:	8804d33a 	srli	r2,r17,12
  809d98:	12001bc4 	addi	r8,r2,111
  809d9c:	11c01b84 	addi	r7,r2,110
  809da0:	4209883a 	add	r4,r8,r8
  809da4:	003edd06 	br	80991c <__alt_mem_onchip_mem+0xff80191c>
  809da8:	3804d27a 	srli	r2,r7,9
  809dac:	00c00104 	movi	r3,4
  809db0:	1880442e 	bgeu	r3,r2,809ec4 <_malloc_r+0x620>
  809db4:	00c00504 	movi	r3,20
  809db8:	18808136 	bltu	r3,r2,809fc0 <_malloc_r+0x71c>
  809dbc:	11401704 	addi	r5,r2,92
  809dc0:	10c016c4 	addi	r3,r2,91
  809dc4:	294b883a 	add	r5,r5,r5
  809dc8:	294b883a 	add	r5,r5,r5
  809dcc:	294b883a 	add	r5,r5,r5
  809dd0:	994b883a 	add	r5,r19,r5
  809dd4:	28800017 	ldw	r2,0(r5)
  809dd8:	01802074 	movhi	r6,129
  809ddc:	297ffe04 	addi	r5,r5,-8
  809de0:	31811204 	addi	r6,r6,1096
  809de4:	28806526 	beq	r5,r2,809f7c <_malloc_r+0x6d8>
  809de8:	01bfff04 	movi	r6,-4
  809dec:	10c00117 	ldw	r3,4(r2)
  809df0:	1986703a 	and	r3,r3,r6
  809df4:	38c0022e 	bgeu	r7,r3,809e00 <_malloc_r+0x55c>
  809df8:	10800217 	ldw	r2,8(r2)
  809dfc:	28bffb1e 	bne	r5,r2,809dec <__alt_mem_onchip_mem+0xff801dec>
  809e00:	11400317 	ldw	r5,12(r2)
  809e04:	98c00117 	ldw	r3,4(r19)
  809e08:	81400315 	stw	r5,12(r16)
  809e0c:	80800215 	stw	r2,8(r16)
  809e10:	2c000215 	stw	r16,8(r5)
  809e14:	14000315 	stw	r16,12(r2)
  809e18:	003ef806 	br	8099fc <__alt_mem_onchip_mem+0xff8019fc>
  809e1c:	88c00054 	ori	r3,r17,1
  809e20:	80c00115 	stw	r3,4(r16)
  809e24:	8463883a 	add	r17,r16,r17
  809e28:	34400515 	stw	r17,20(r6)
  809e2c:	34400415 	stw	r17,16(r6)
  809e30:	10c00054 	ori	r3,r2,1
  809e34:	8a000315 	stw	r8,12(r17)
  809e38:	8a000215 	stw	r8,8(r17)
  809e3c:	88c00115 	stw	r3,4(r17)
  809e40:	88a3883a 	add	r17,r17,r2
  809e44:	88800015 	stw	r2,0(r17)
  809e48:	9009883a 	mov	r4,r18
  809e4c:	080c1e80 	call	80c1e8 <__malloc_unlock>
  809e50:	80800204 	addi	r2,r16,8
  809e54:	003f3c06 	br	809b48 <__alt_mem_onchip_mem+0xff801b48>
  809e58:	30c00117 	ldw	r3,4(r6)
  809e5c:	003ee706 	br	8099fc <__alt_mem_onchip_mem+0xff8019fc>
  809e60:	5ac00044 	addi	r11,r11,1
  809e64:	588000cc 	andi	r2,r11,3
  809e68:	31800204 	addi	r6,r6,8
  809e6c:	103efd1e 	bne	r2,zero,809a64 <__alt_mem_onchip_mem+0xff801a64>
  809e70:	00002406 	br	809f04 <_malloc_r+0x660>
  809e74:	14000317 	ldw	r16,12(r2)
  809e78:	143f251e 	bne	r2,r16,809b10 <__alt_mem_onchip_mem+0xff801b10>
  809e7c:	21000084 	addi	r4,r4,2
  809e80:	003ebc06 	br	809974 <__alt_mem_onchip_mem+0xff801974>
  809e84:	8085883a 	add	r2,r16,r2
  809e88:	10c00117 	ldw	r3,4(r2)
  809e8c:	81000317 	ldw	r4,12(r16)
  809e90:	81400217 	ldw	r5,8(r16)
  809e94:	18c00054 	ori	r3,r3,1
  809e98:	10c00115 	stw	r3,4(r2)
  809e9c:	29000315 	stw	r4,12(r5)
  809ea0:	21400215 	stw	r5,8(r4)
  809ea4:	9009883a 	mov	r4,r18
  809ea8:	080c1e80 	call	80c1e8 <__malloc_unlock>
  809eac:	80800204 	addi	r2,r16,8
  809eb0:	003f2506 	br	809b48 <__alt_mem_onchip_mem+0xff801b48>
  809eb4:	12001704 	addi	r8,r2,92
  809eb8:	11c016c4 	addi	r7,r2,91
  809ebc:	4209883a 	add	r4,r8,r8
  809ec0:	003e9606 	br	80991c <__alt_mem_onchip_mem+0xff80191c>
  809ec4:	3804d1ba 	srli	r2,r7,6
  809ec8:	11400e44 	addi	r5,r2,57
  809ecc:	10c00e04 	addi	r3,r2,56
  809ed0:	294b883a 	add	r5,r5,r5
  809ed4:	003fbc06 	br	809dc8 <__alt_mem_onchip_mem+0xff801dc8>
  809ed8:	84ff5926 	beq	r16,r19,809c40 <__alt_mem_onchip_mem+0xff801c40>
  809edc:	00802074 	movhi	r2,129
  809ee0:	10811204 	addi	r2,r2,1096
  809ee4:	14000217 	ldw	r16,8(r2)
  809ee8:	00bfff04 	movi	r2,-4
  809eec:	80c00117 	ldw	r3,4(r16)
  809ef0:	1886703a 	and	r3,r3,r2
  809ef4:	003f9106 	br	809d3c <__alt_mem_onchip_mem+0xff801d3c>
  809ef8:	60800217 	ldw	r2,8(r12)
  809efc:	213fffc4 	addi	r4,r4,-1
  809f00:	1300651e 	bne	r2,r12,80a098 <_malloc_r+0x7f4>
  809f04:	208000cc 	andi	r2,r4,3
  809f08:	633ffe04 	addi	r12,r12,-8
  809f0c:	103ffa1e 	bne	r2,zero,809ef8 <__alt_mem_onchip_mem+0xff801ef8>
  809f10:	98800117 	ldw	r2,4(r19)
  809f14:	0146303a 	nor	r3,zero,r5
  809f18:	1884703a 	and	r2,r3,r2
  809f1c:	98800115 	stw	r2,4(r19)
  809f20:	294b883a 	add	r5,r5,r5
  809f24:	117f2836 	bltu	r2,r5,809bc8 <__alt_mem_onchip_mem+0xff801bc8>
  809f28:	283f2726 	beq	r5,zero,809bc8 <__alt_mem_onchip_mem+0xff801bc8>
  809f2c:	2886703a 	and	r3,r5,r2
  809f30:	5809883a 	mov	r4,r11
  809f34:	183ec31e 	bne	r3,zero,809a44 <__alt_mem_onchip_mem+0xff801a44>
  809f38:	294b883a 	add	r5,r5,r5
  809f3c:	2886703a 	and	r3,r5,r2
  809f40:	21000104 	addi	r4,r4,4
  809f44:	183ffc26 	beq	r3,zero,809f38 <__alt_mem_onchip_mem+0xff801f38>
  809f48:	003ebe06 	br	809a44 <__alt_mem_onchip_mem+0xff801a44>
  809f4c:	00c05504 	movi	r3,340
  809f50:	18801236 	bltu	r3,r2,809f9c <_malloc_r+0x6f8>
  809f54:	8804d3fa 	srli	r2,r17,15
  809f58:	12001e04 	addi	r8,r2,120
  809f5c:	11c01dc4 	addi	r7,r2,119
  809f60:	4209883a 	add	r4,r8,r8
  809f64:	003e6d06 	br	80991c <__alt_mem_onchip_mem+0xff80191c>
  809f68:	00c40004 	movi	r3,4096
  809f6c:	003f4606 	br	809c88 <__alt_mem_onchip_mem+0xff801c88>
  809f70:	00800044 	movi	r2,1
  809f74:	a0800115 	stw	r2,4(r20)
  809f78:	003f7406 	br	809d4c <__alt_mem_onchip_mem+0xff801d4c>
  809f7c:	1805d0ba 	srai	r2,r3,2
  809f80:	01c00044 	movi	r7,1
  809f84:	30c00117 	ldw	r3,4(r6)
  809f88:	388e983a 	sll	r7,r7,r2
  809f8c:	2805883a 	mov	r2,r5
  809f90:	38c6b03a 	or	r3,r7,r3
  809f94:	30c00115 	stw	r3,4(r6)
  809f98:	003f9b06 	br	809e08 <__alt_mem_onchip_mem+0xff801e08>
  809f9c:	00c15504 	movi	r3,1364
  809fa0:	18801a36 	bltu	r3,r2,80a00c <_malloc_r+0x768>
  809fa4:	8804d4ba 	srli	r2,r17,18
  809fa8:	12001f44 	addi	r8,r2,125
  809fac:	11c01f04 	addi	r7,r2,124
  809fb0:	4209883a 	add	r4,r8,r8
  809fb4:	003e5906 	br	80991c <__alt_mem_onchip_mem+0xff80191c>
  809fb8:	ad400404 	addi	r21,r21,16
  809fbc:	003f1706 	br	809c1c <__alt_mem_onchip_mem+0xff801c1c>
  809fc0:	00c01504 	movi	r3,84
  809fc4:	18802336 	bltu	r3,r2,80a054 <_malloc_r+0x7b0>
  809fc8:	3804d33a 	srli	r2,r7,12
  809fcc:	11401bc4 	addi	r5,r2,111
  809fd0:	10c01b84 	addi	r3,r2,110
  809fd4:	294b883a 	add	r5,r5,r5
  809fd8:	003f7b06 	br	809dc8 <__alt_mem_onchip_mem+0xff801dc8>
  809fdc:	9c000217 	ldw	r16,8(r19)
  809fe0:	00bfff04 	movi	r2,-4
  809fe4:	80c00117 	ldw	r3,4(r16)
  809fe8:	1886703a 	and	r3,r3,r2
  809fec:	003f5306 	br	809d3c <__alt_mem_onchip_mem+0xff801d3c>
  809ff0:	3083ffcc 	andi	r2,r6,4095
  809ff4:	103f181e 	bne	r2,zero,809c58 <__alt_mem_onchip_mem+0xff801c58>
  809ff8:	99000217 	ldw	r4,8(r19)
  809ffc:	b545883a 	add	r2,r22,r21
  80a000:	10800054 	ori	r2,r2,1
  80a004:	20800115 	stw	r2,4(r4)
  80a008:	003f3e06 	br	809d04 <__alt_mem_onchip_mem+0xff801d04>
  80a00c:	01003f84 	movi	r4,254
  80a010:	02001fc4 	movi	r8,127
  80a014:	01c01f84 	movi	r7,126
  80a018:	003e4006 	br	80991c <__alt_mem_onchip_mem+0xff80191c>
  80a01c:	00802074 	movhi	r2,129
  80a020:	10871204 	addi	r2,r2,7240
  80a024:	15000015 	stw	r20,0(r2)
  80a028:	003f1106 	br	809c70 <__alt_mem_onchip_mem+0xff801c70>
  80a02c:	00800044 	movi	r2,1
  80a030:	002b883a 	mov	r21,zero
  80a034:	003f1f06 	br	809cb4 <__alt_mem_onchip_mem+0xff801cb4>
  80a038:	81400204 	addi	r5,r16,8
  80a03c:	9009883a 	mov	r4,r18
  80a040:	080b32c0 	call	80b32c <_free_r>
  80a044:	00802074 	movhi	r2,129
  80a048:	108e4404 	addi	r2,r2,14608
  80a04c:	10c00017 	ldw	r3,0(r2)
  80a050:	003f2c06 	br	809d04 <__alt_mem_onchip_mem+0xff801d04>
  80a054:	00c05504 	movi	r3,340
  80a058:	18800536 	bltu	r3,r2,80a070 <_malloc_r+0x7cc>
  80a05c:	3804d3fa 	srli	r2,r7,15
  80a060:	11401e04 	addi	r5,r2,120
  80a064:	10c01dc4 	addi	r3,r2,119
  80a068:	294b883a 	add	r5,r5,r5
  80a06c:	003f5606 	br	809dc8 <__alt_mem_onchip_mem+0xff801dc8>
  80a070:	00c15504 	movi	r3,1364
  80a074:	18800536 	bltu	r3,r2,80a08c <_malloc_r+0x7e8>
  80a078:	3804d4ba 	srli	r2,r7,18
  80a07c:	11401f44 	addi	r5,r2,125
  80a080:	10c01f04 	addi	r3,r2,124
  80a084:	294b883a 	add	r5,r5,r5
  80a088:	003f4f06 	br	809dc8 <__alt_mem_onchip_mem+0xff801dc8>
  80a08c:	01403f84 	movi	r5,254
  80a090:	00c01f84 	movi	r3,126
  80a094:	003f4c06 	br	809dc8 <__alt_mem_onchip_mem+0xff801dc8>
  80a098:	98800117 	ldw	r2,4(r19)
  80a09c:	003fa006 	br	809f20 <__alt_mem_onchip_mem+0xff801f20>
  80a0a0:	8808d0fa 	srli	r4,r17,3
  80a0a4:	20800044 	addi	r2,r4,1
  80a0a8:	1085883a 	add	r2,r2,r2
  80a0ac:	003e9006 	br	809af0 <__alt_mem_onchip_mem+0xff801af0>

0080a0b0 <memchr>:
  80a0b0:	208000cc 	andi	r2,r4,3
  80a0b4:	280f883a 	mov	r7,r5
  80a0b8:	10003426 	beq	r2,zero,80a18c <memchr+0xdc>
  80a0bc:	30bfffc4 	addi	r2,r6,-1
  80a0c0:	30001a26 	beq	r6,zero,80a12c <memchr+0x7c>
  80a0c4:	20c00003 	ldbu	r3,0(r4)
  80a0c8:	29803fcc 	andi	r6,r5,255
  80a0cc:	30c0051e 	bne	r6,r3,80a0e4 <memchr+0x34>
  80a0d0:	00001806 	br	80a134 <memchr+0x84>
  80a0d4:	10001526 	beq	r2,zero,80a12c <memchr+0x7c>
  80a0d8:	20c00003 	ldbu	r3,0(r4)
  80a0dc:	10bfffc4 	addi	r2,r2,-1
  80a0e0:	30c01426 	beq	r6,r3,80a134 <memchr+0x84>
  80a0e4:	21000044 	addi	r4,r4,1
  80a0e8:	20c000cc 	andi	r3,r4,3
  80a0ec:	183ff91e 	bne	r3,zero,80a0d4 <__alt_mem_onchip_mem+0xff8020d4>
  80a0f0:	020000c4 	movi	r8,3
  80a0f4:	40801136 	bltu	r8,r2,80a13c <memchr+0x8c>
  80a0f8:	10000c26 	beq	r2,zero,80a12c <memchr+0x7c>
  80a0fc:	20c00003 	ldbu	r3,0(r4)
  80a100:	29403fcc 	andi	r5,r5,255
  80a104:	28c00b26 	beq	r5,r3,80a134 <memchr+0x84>
  80a108:	20c00044 	addi	r3,r4,1
  80a10c:	39803fcc 	andi	r6,r7,255
  80a110:	2089883a 	add	r4,r4,r2
  80a114:	00000306 	br	80a124 <memchr+0x74>
  80a118:	18c00044 	addi	r3,r3,1
  80a11c:	197fffc3 	ldbu	r5,-1(r3)
  80a120:	31400526 	beq	r6,r5,80a138 <memchr+0x88>
  80a124:	1805883a 	mov	r2,r3
  80a128:	20fffb1e 	bne	r4,r3,80a118 <__alt_mem_onchip_mem+0xff802118>
  80a12c:	0005883a 	mov	r2,zero
  80a130:	f800283a 	ret
  80a134:	2005883a 	mov	r2,r4
  80a138:	f800283a 	ret
  80a13c:	28c03fcc 	andi	r3,r5,255
  80a140:	1812923a 	slli	r9,r3,8
  80a144:	02ffbff4 	movhi	r11,65279
  80a148:	02a02074 	movhi	r10,32897
  80a14c:	48d2b03a 	or	r9,r9,r3
  80a150:	4806943a 	slli	r3,r9,16
  80a154:	5affbfc4 	addi	r11,r11,-257
  80a158:	52a02004 	addi	r10,r10,-32640
  80a15c:	48d2b03a 	or	r9,r9,r3
  80a160:	20c00017 	ldw	r3,0(r4)
  80a164:	48c6f03a 	xor	r3,r9,r3
  80a168:	1acd883a 	add	r6,r3,r11
  80a16c:	00c6303a 	nor	r3,zero,r3
  80a170:	30c6703a 	and	r3,r6,r3
  80a174:	1a86703a 	and	r3,r3,r10
  80a178:	183fe01e 	bne	r3,zero,80a0fc <__alt_mem_onchip_mem+0xff8020fc>
  80a17c:	10bfff04 	addi	r2,r2,-4
  80a180:	21000104 	addi	r4,r4,4
  80a184:	40bff636 	bltu	r8,r2,80a160 <__alt_mem_onchip_mem+0xff802160>
  80a188:	003fdb06 	br	80a0f8 <__alt_mem_onchip_mem+0xff8020f8>
  80a18c:	3005883a 	mov	r2,r6
  80a190:	003fd706 	br	80a0f0 <__alt_mem_onchip_mem+0xff8020f0>

0080a194 <memcpy>:
  80a194:	defffd04 	addi	sp,sp,-12
  80a198:	dfc00215 	stw	ra,8(sp)
  80a19c:	dc400115 	stw	r17,4(sp)
  80a1a0:	dc000015 	stw	r16,0(sp)
  80a1a4:	00c003c4 	movi	r3,15
  80a1a8:	2005883a 	mov	r2,r4
  80a1ac:	1980452e 	bgeu	r3,r6,80a2c4 <memcpy+0x130>
  80a1b0:	2906b03a 	or	r3,r5,r4
  80a1b4:	18c000cc 	andi	r3,r3,3
  80a1b8:	1800441e 	bne	r3,zero,80a2cc <memcpy+0x138>
  80a1bc:	347ffc04 	addi	r17,r6,-16
  80a1c0:	8822d13a 	srli	r17,r17,4
  80a1c4:	28c00104 	addi	r3,r5,4
  80a1c8:	23400104 	addi	r13,r4,4
  80a1cc:	8820913a 	slli	r16,r17,4
  80a1d0:	2b000204 	addi	r12,r5,8
  80a1d4:	22c00204 	addi	r11,r4,8
  80a1d8:	84000504 	addi	r16,r16,20
  80a1dc:	2a800304 	addi	r10,r5,12
  80a1e0:	22400304 	addi	r9,r4,12
  80a1e4:	2c21883a 	add	r16,r5,r16
  80a1e8:	2811883a 	mov	r8,r5
  80a1ec:	200f883a 	mov	r7,r4
  80a1f0:	41000017 	ldw	r4,0(r8)
  80a1f4:	1fc00017 	ldw	ra,0(r3)
  80a1f8:	63c00017 	ldw	r15,0(r12)
  80a1fc:	39000015 	stw	r4,0(r7)
  80a200:	53800017 	ldw	r14,0(r10)
  80a204:	6fc00015 	stw	ra,0(r13)
  80a208:	5bc00015 	stw	r15,0(r11)
  80a20c:	4b800015 	stw	r14,0(r9)
  80a210:	18c00404 	addi	r3,r3,16
  80a214:	39c00404 	addi	r7,r7,16
  80a218:	42000404 	addi	r8,r8,16
  80a21c:	6b400404 	addi	r13,r13,16
  80a220:	63000404 	addi	r12,r12,16
  80a224:	5ac00404 	addi	r11,r11,16
  80a228:	52800404 	addi	r10,r10,16
  80a22c:	4a400404 	addi	r9,r9,16
  80a230:	1c3fef1e 	bne	r3,r16,80a1f0 <__alt_mem_onchip_mem+0xff8021f0>
  80a234:	89c00044 	addi	r7,r17,1
  80a238:	380e913a 	slli	r7,r7,4
  80a23c:	310003cc 	andi	r4,r6,15
  80a240:	02c000c4 	movi	r11,3
  80a244:	11c7883a 	add	r3,r2,r7
  80a248:	29cb883a 	add	r5,r5,r7
  80a24c:	5900212e 	bgeu	r11,r4,80a2d4 <memcpy+0x140>
  80a250:	1813883a 	mov	r9,r3
  80a254:	2811883a 	mov	r8,r5
  80a258:	200f883a 	mov	r7,r4
  80a25c:	42800017 	ldw	r10,0(r8)
  80a260:	4a400104 	addi	r9,r9,4
  80a264:	39ffff04 	addi	r7,r7,-4
  80a268:	4abfff15 	stw	r10,-4(r9)
  80a26c:	42000104 	addi	r8,r8,4
  80a270:	59fffa36 	bltu	r11,r7,80a25c <__alt_mem_onchip_mem+0xff80225c>
  80a274:	213fff04 	addi	r4,r4,-4
  80a278:	2008d0ba 	srli	r4,r4,2
  80a27c:	318000cc 	andi	r6,r6,3
  80a280:	21000044 	addi	r4,r4,1
  80a284:	2109883a 	add	r4,r4,r4
  80a288:	2109883a 	add	r4,r4,r4
  80a28c:	1907883a 	add	r3,r3,r4
  80a290:	290b883a 	add	r5,r5,r4
  80a294:	30000626 	beq	r6,zero,80a2b0 <memcpy+0x11c>
  80a298:	198d883a 	add	r6,r3,r6
  80a29c:	29c00003 	ldbu	r7,0(r5)
  80a2a0:	18c00044 	addi	r3,r3,1
  80a2a4:	29400044 	addi	r5,r5,1
  80a2a8:	19ffffc5 	stb	r7,-1(r3)
  80a2ac:	19bffb1e 	bne	r3,r6,80a29c <__alt_mem_onchip_mem+0xff80229c>
  80a2b0:	dfc00217 	ldw	ra,8(sp)
  80a2b4:	dc400117 	ldw	r17,4(sp)
  80a2b8:	dc000017 	ldw	r16,0(sp)
  80a2bc:	dec00304 	addi	sp,sp,12
  80a2c0:	f800283a 	ret
  80a2c4:	2007883a 	mov	r3,r4
  80a2c8:	003ff206 	br	80a294 <__alt_mem_onchip_mem+0xff802294>
  80a2cc:	2007883a 	mov	r3,r4
  80a2d0:	003ff106 	br	80a298 <__alt_mem_onchip_mem+0xff802298>
  80a2d4:	200d883a 	mov	r6,r4
  80a2d8:	003fee06 	br	80a294 <__alt_mem_onchip_mem+0xff802294>

0080a2dc <memmove>:
  80a2dc:	2005883a 	mov	r2,r4
  80a2e0:	29000b2e 	bgeu	r5,r4,80a310 <memmove+0x34>
  80a2e4:	298f883a 	add	r7,r5,r6
  80a2e8:	21c0092e 	bgeu	r4,r7,80a310 <memmove+0x34>
  80a2ec:	2187883a 	add	r3,r4,r6
  80a2f0:	198bc83a 	sub	r5,r3,r6
  80a2f4:	30004826 	beq	r6,zero,80a418 <memmove+0x13c>
  80a2f8:	39ffffc4 	addi	r7,r7,-1
  80a2fc:	39000003 	ldbu	r4,0(r7)
  80a300:	18ffffc4 	addi	r3,r3,-1
  80a304:	19000005 	stb	r4,0(r3)
  80a308:	28fffb1e 	bne	r5,r3,80a2f8 <__alt_mem_onchip_mem+0xff8022f8>
  80a30c:	f800283a 	ret
  80a310:	00c003c4 	movi	r3,15
  80a314:	1980412e 	bgeu	r3,r6,80a41c <memmove+0x140>
  80a318:	2886b03a 	or	r3,r5,r2
  80a31c:	18c000cc 	andi	r3,r3,3
  80a320:	1800401e 	bne	r3,zero,80a424 <memmove+0x148>
  80a324:	33fffc04 	addi	r15,r6,-16
  80a328:	781ed13a 	srli	r15,r15,4
  80a32c:	28c00104 	addi	r3,r5,4
  80a330:	13400104 	addi	r13,r2,4
  80a334:	781c913a 	slli	r14,r15,4
  80a338:	2b000204 	addi	r12,r5,8
  80a33c:	12c00204 	addi	r11,r2,8
  80a340:	73800504 	addi	r14,r14,20
  80a344:	2a800304 	addi	r10,r5,12
  80a348:	12400304 	addi	r9,r2,12
  80a34c:	2b9d883a 	add	r14,r5,r14
  80a350:	2811883a 	mov	r8,r5
  80a354:	100f883a 	mov	r7,r2
  80a358:	41000017 	ldw	r4,0(r8)
  80a35c:	39c00404 	addi	r7,r7,16
  80a360:	18c00404 	addi	r3,r3,16
  80a364:	393ffc15 	stw	r4,-16(r7)
  80a368:	193ffc17 	ldw	r4,-16(r3)
  80a36c:	6b400404 	addi	r13,r13,16
  80a370:	5ac00404 	addi	r11,r11,16
  80a374:	693ffc15 	stw	r4,-16(r13)
  80a378:	61000017 	ldw	r4,0(r12)
  80a37c:	4a400404 	addi	r9,r9,16
  80a380:	42000404 	addi	r8,r8,16
  80a384:	593ffc15 	stw	r4,-16(r11)
  80a388:	51000017 	ldw	r4,0(r10)
  80a38c:	63000404 	addi	r12,r12,16
  80a390:	52800404 	addi	r10,r10,16
  80a394:	493ffc15 	stw	r4,-16(r9)
  80a398:	1bbfef1e 	bne	r3,r14,80a358 <__alt_mem_onchip_mem+0xff802358>
  80a39c:	79000044 	addi	r4,r15,1
  80a3a0:	2008913a 	slli	r4,r4,4
  80a3a4:	328003cc 	andi	r10,r6,15
  80a3a8:	02c000c4 	movi	r11,3
  80a3ac:	1107883a 	add	r3,r2,r4
  80a3b0:	290b883a 	add	r5,r5,r4
  80a3b4:	5a801e2e 	bgeu	r11,r10,80a430 <memmove+0x154>
  80a3b8:	1813883a 	mov	r9,r3
  80a3bc:	2811883a 	mov	r8,r5
  80a3c0:	500f883a 	mov	r7,r10
  80a3c4:	41000017 	ldw	r4,0(r8)
  80a3c8:	4a400104 	addi	r9,r9,4
  80a3cc:	39ffff04 	addi	r7,r7,-4
  80a3d0:	493fff15 	stw	r4,-4(r9)
  80a3d4:	42000104 	addi	r8,r8,4
  80a3d8:	59fffa36 	bltu	r11,r7,80a3c4 <__alt_mem_onchip_mem+0xff8023c4>
  80a3dc:	513fff04 	addi	r4,r10,-4
  80a3e0:	2008d0ba 	srli	r4,r4,2
  80a3e4:	318000cc 	andi	r6,r6,3
  80a3e8:	21000044 	addi	r4,r4,1
  80a3ec:	2109883a 	add	r4,r4,r4
  80a3f0:	2109883a 	add	r4,r4,r4
  80a3f4:	1907883a 	add	r3,r3,r4
  80a3f8:	290b883a 	add	r5,r5,r4
  80a3fc:	30000b26 	beq	r6,zero,80a42c <memmove+0x150>
  80a400:	198d883a 	add	r6,r3,r6
  80a404:	29c00003 	ldbu	r7,0(r5)
  80a408:	18c00044 	addi	r3,r3,1
  80a40c:	29400044 	addi	r5,r5,1
  80a410:	19ffffc5 	stb	r7,-1(r3)
  80a414:	19bffb1e 	bne	r3,r6,80a404 <__alt_mem_onchip_mem+0xff802404>
  80a418:	f800283a 	ret
  80a41c:	1007883a 	mov	r3,r2
  80a420:	003ff606 	br	80a3fc <__alt_mem_onchip_mem+0xff8023fc>
  80a424:	1007883a 	mov	r3,r2
  80a428:	003ff506 	br	80a400 <__alt_mem_onchip_mem+0xff802400>
  80a42c:	f800283a 	ret
  80a430:	500d883a 	mov	r6,r10
  80a434:	003ff106 	br	80a3fc <__alt_mem_onchip_mem+0xff8023fc>

0080a438 <memset>:
  80a438:	20c000cc 	andi	r3,r4,3
  80a43c:	2005883a 	mov	r2,r4
  80a440:	18004426 	beq	r3,zero,80a554 <memset+0x11c>
  80a444:	31ffffc4 	addi	r7,r6,-1
  80a448:	30004026 	beq	r6,zero,80a54c <memset+0x114>
  80a44c:	2813883a 	mov	r9,r5
  80a450:	200d883a 	mov	r6,r4
  80a454:	2007883a 	mov	r3,r4
  80a458:	00000406 	br	80a46c <memset+0x34>
  80a45c:	3a3fffc4 	addi	r8,r7,-1
  80a460:	31800044 	addi	r6,r6,1
  80a464:	38003926 	beq	r7,zero,80a54c <memset+0x114>
  80a468:	400f883a 	mov	r7,r8
  80a46c:	18c00044 	addi	r3,r3,1
  80a470:	32400005 	stb	r9,0(r6)
  80a474:	1a0000cc 	andi	r8,r3,3
  80a478:	403ff81e 	bne	r8,zero,80a45c <__alt_mem_onchip_mem+0xff80245c>
  80a47c:	010000c4 	movi	r4,3
  80a480:	21c02d2e 	bgeu	r4,r7,80a538 <memset+0x100>
  80a484:	29003fcc 	andi	r4,r5,255
  80a488:	200c923a 	slli	r6,r4,8
  80a48c:	3108b03a 	or	r4,r6,r4
  80a490:	200c943a 	slli	r6,r4,16
  80a494:	218cb03a 	or	r6,r4,r6
  80a498:	010003c4 	movi	r4,15
  80a49c:	21c0182e 	bgeu	r4,r7,80a500 <memset+0xc8>
  80a4a0:	3b3ffc04 	addi	r12,r7,-16
  80a4a4:	6018d13a 	srli	r12,r12,4
  80a4a8:	1a000104 	addi	r8,r3,4
  80a4ac:	1ac00204 	addi	r11,r3,8
  80a4b0:	6008913a 	slli	r4,r12,4
  80a4b4:	1a800304 	addi	r10,r3,12
  80a4b8:	1813883a 	mov	r9,r3
  80a4bc:	21000504 	addi	r4,r4,20
  80a4c0:	1909883a 	add	r4,r3,r4
  80a4c4:	49800015 	stw	r6,0(r9)
  80a4c8:	41800015 	stw	r6,0(r8)
  80a4cc:	59800015 	stw	r6,0(r11)
  80a4d0:	51800015 	stw	r6,0(r10)
  80a4d4:	42000404 	addi	r8,r8,16
  80a4d8:	4a400404 	addi	r9,r9,16
  80a4dc:	5ac00404 	addi	r11,r11,16
  80a4e0:	52800404 	addi	r10,r10,16
  80a4e4:	413ff71e 	bne	r8,r4,80a4c4 <__alt_mem_onchip_mem+0xff8024c4>
  80a4e8:	63000044 	addi	r12,r12,1
  80a4ec:	6018913a 	slli	r12,r12,4
  80a4f0:	39c003cc 	andi	r7,r7,15
  80a4f4:	010000c4 	movi	r4,3
  80a4f8:	1b07883a 	add	r3,r3,r12
  80a4fc:	21c00e2e 	bgeu	r4,r7,80a538 <memset+0x100>
  80a500:	1813883a 	mov	r9,r3
  80a504:	3811883a 	mov	r8,r7
  80a508:	010000c4 	movi	r4,3
  80a50c:	49800015 	stw	r6,0(r9)
  80a510:	423fff04 	addi	r8,r8,-4
  80a514:	4a400104 	addi	r9,r9,4
  80a518:	223ffc36 	bltu	r4,r8,80a50c <__alt_mem_onchip_mem+0xff80250c>
  80a51c:	393fff04 	addi	r4,r7,-4
  80a520:	2008d0ba 	srli	r4,r4,2
  80a524:	39c000cc 	andi	r7,r7,3
  80a528:	21000044 	addi	r4,r4,1
  80a52c:	2109883a 	add	r4,r4,r4
  80a530:	2109883a 	add	r4,r4,r4
  80a534:	1907883a 	add	r3,r3,r4
  80a538:	38000526 	beq	r7,zero,80a550 <memset+0x118>
  80a53c:	19cf883a 	add	r7,r3,r7
  80a540:	19400005 	stb	r5,0(r3)
  80a544:	18c00044 	addi	r3,r3,1
  80a548:	38fffd1e 	bne	r7,r3,80a540 <__alt_mem_onchip_mem+0xff802540>
  80a54c:	f800283a 	ret
  80a550:	f800283a 	ret
  80a554:	2007883a 	mov	r3,r4
  80a558:	300f883a 	mov	r7,r6
  80a55c:	003fc706 	br	80a47c <__alt_mem_onchip_mem+0xff80247c>

0080a560 <_realloc_r>:
  80a560:	defff604 	addi	sp,sp,-40
  80a564:	dc800215 	stw	r18,8(sp)
  80a568:	dfc00915 	stw	ra,36(sp)
  80a56c:	df000815 	stw	fp,32(sp)
  80a570:	ddc00715 	stw	r23,28(sp)
  80a574:	dd800615 	stw	r22,24(sp)
  80a578:	dd400515 	stw	r21,20(sp)
  80a57c:	dd000415 	stw	r20,16(sp)
  80a580:	dcc00315 	stw	r19,12(sp)
  80a584:	dc400115 	stw	r17,4(sp)
  80a588:	dc000015 	stw	r16,0(sp)
  80a58c:	3025883a 	mov	r18,r6
  80a590:	2800b726 	beq	r5,zero,80a870 <_realloc_r+0x310>
  80a594:	282b883a 	mov	r21,r5
  80a598:	2029883a 	mov	r20,r4
  80a59c:	080c1c40 	call	80c1c4 <__malloc_lock>
  80a5a0:	a8bfff17 	ldw	r2,-4(r21)
  80a5a4:	043fff04 	movi	r16,-4
  80a5a8:	90c002c4 	addi	r3,r18,11
  80a5ac:	01000584 	movi	r4,22
  80a5b0:	acfffe04 	addi	r19,r21,-8
  80a5b4:	1420703a 	and	r16,r2,r16
  80a5b8:	20c0332e 	bgeu	r4,r3,80a688 <_realloc_r+0x128>
  80a5bc:	047ffe04 	movi	r17,-8
  80a5c0:	1c62703a 	and	r17,r3,r17
  80a5c4:	8807883a 	mov	r3,r17
  80a5c8:	88005816 	blt	r17,zero,80a72c <_realloc_r+0x1cc>
  80a5cc:	8c805736 	bltu	r17,r18,80a72c <_realloc_r+0x1cc>
  80a5d0:	80c0300e 	bge	r16,r3,80a694 <_realloc_r+0x134>
  80a5d4:	07002074 	movhi	fp,129
  80a5d8:	e7011204 	addi	fp,fp,1096
  80a5dc:	e1c00217 	ldw	r7,8(fp)
  80a5e0:	9c09883a 	add	r4,r19,r16
  80a5e4:	22000117 	ldw	r8,4(r4)
  80a5e8:	21c06326 	beq	r4,r7,80a778 <_realloc_r+0x218>
  80a5ec:	017fff84 	movi	r5,-2
  80a5f0:	414a703a 	and	r5,r8,r5
  80a5f4:	214b883a 	add	r5,r4,r5
  80a5f8:	29800117 	ldw	r6,4(r5)
  80a5fc:	3180004c 	andi	r6,r6,1
  80a600:	30003f26 	beq	r6,zero,80a700 <_realloc_r+0x1a0>
  80a604:	1080004c 	andi	r2,r2,1
  80a608:	10008326 	beq	r2,zero,80a818 <_realloc_r+0x2b8>
  80a60c:	900b883a 	mov	r5,r18
  80a610:	a009883a 	mov	r4,r20
  80a614:	08098a40 	call	8098a4 <_malloc_r>
  80a618:	1025883a 	mov	r18,r2
  80a61c:	10011e26 	beq	r2,zero,80aa98 <_realloc_r+0x538>
  80a620:	a93fff17 	ldw	r4,-4(r21)
  80a624:	10fffe04 	addi	r3,r2,-8
  80a628:	00bfff84 	movi	r2,-2
  80a62c:	2084703a 	and	r2,r4,r2
  80a630:	9885883a 	add	r2,r19,r2
  80a634:	1880ee26 	beq	r3,r2,80a9f0 <_realloc_r+0x490>
  80a638:	81bfff04 	addi	r6,r16,-4
  80a63c:	00800904 	movi	r2,36
  80a640:	1180b836 	bltu	r2,r6,80a924 <_realloc_r+0x3c4>
  80a644:	00c004c4 	movi	r3,19
  80a648:	19809636 	bltu	r3,r6,80a8a4 <_realloc_r+0x344>
  80a64c:	9005883a 	mov	r2,r18
  80a650:	a807883a 	mov	r3,r21
  80a654:	19000017 	ldw	r4,0(r3)
  80a658:	11000015 	stw	r4,0(r2)
  80a65c:	19000117 	ldw	r4,4(r3)
  80a660:	11000115 	stw	r4,4(r2)
  80a664:	18c00217 	ldw	r3,8(r3)
  80a668:	10c00215 	stw	r3,8(r2)
  80a66c:	a80b883a 	mov	r5,r21
  80a670:	a009883a 	mov	r4,r20
  80a674:	080b32c0 	call	80b32c <_free_r>
  80a678:	a009883a 	mov	r4,r20
  80a67c:	080c1e80 	call	80c1e8 <__malloc_unlock>
  80a680:	9005883a 	mov	r2,r18
  80a684:	00001206 	br	80a6d0 <_realloc_r+0x170>
  80a688:	00c00404 	movi	r3,16
  80a68c:	1823883a 	mov	r17,r3
  80a690:	003fce06 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80a694:	a825883a 	mov	r18,r21
  80a698:	8445c83a 	sub	r2,r16,r17
  80a69c:	00c003c4 	movi	r3,15
  80a6a0:	18802636 	bltu	r3,r2,80a73c <_realloc_r+0x1dc>
  80a6a4:	99800117 	ldw	r6,4(r19)
  80a6a8:	9c07883a 	add	r3,r19,r16
  80a6ac:	3180004c 	andi	r6,r6,1
  80a6b0:	3420b03a 	or	r16,r6,r16
  80a6b4:	9c000115 	stw	r16,4(r19)
  80a6b8:	18800117 	ldw	r2,4(r3)
  80a6bc:	10800054 	ori	r2,r2,1
  80a6c0:	18800115 	stw	r2,4(r3)
  80a6c4:	a009883a 	mov	r4,r20
  80a6c8:	080c1e80 	call	80c1e8 <__malloc_unlock>
  80a6cc:	9005883a 	mov	r2,r18
  80a6d0:	dfc00917 	ldw	ra,36(sp)
  80a6d4:	df000817 	ldw	fp,32(sp)
  80a6d8:	ddc00717 	ldw	r23,28(sp)
  80a6dc:	dd800617 	ldw	r22,24(sp)
  80a6e0:	dd400517 	ldw	r21,20(sp)
  80a6e4:	dd000417 	ldw	r20,16(sp)
  80a6e8:	dcc00317 	ldw	r19,12(sp)
  80a6ec:	dc800217 	ldw	r18,8(sp)
  80a6f0:	dc400117 	ldw	r17,4(sp)
  80a6f4:	dc000017 	ldw	r16,0(sp)
  80a6f8:	dec00a04 	addi	sp,sp,40
  80a6fc:	f800283a 	ret
  80a700:	017fff04 	movi	r5,-4
  80a704:	414a703a 	and	r5,r8,r5
  80a708:	814d883a 	add	r6,r16,r5
  80a70c:	30c01f16 	blt	r6,r3,80a78c <_realloc_r+0x22c>
  80a710:	20800317 	ldw	r2,12(r4)
  80a714:	20c00217 	ldw	r3,8(r4)
  80a718:	a825883a 	mov	r18,r21
  80a71c:	3021883a 	mov	r16,r6
  80a720:	18800315 	stw	r2,12(r3)
  80a724:	10c00215 	stw	r3,8(r2)
  80a728:	003fdb06 	br	80a698 <__alt_mem_onchip_mem+0xff802698>
  80a72c:	00800304 	movi	r2,12
  80a730:	a0800015 	stw	r2,0(r20)
  80a734:	0005883a 	mov	r2,zero
  80a738:	003fe506 	br	80a6d0 <__alt_mem_onchip_mem+0xff8026d0>
  80a73c:	98c00117 	ldw	r3,4(r19)
  80a740:	9c4b883a 	add	r5,r19,r17
  80a744:	11000054 	ori	r4,r2,1
  80a748:	18c0004c 	andi	r3,r3,1
  80a74c:	1c62b03a 	or	r17,r3,r17
  80a750:	9c400115 	stw	r17,4(r19)
  80a754:	29000115 	stw	r4,4(r5)
  80a758:	2885883a 	add	r2,r5,r2
  80a75c:	10c00117 	ldw	r3,4(r2)
  80a760:	29400204 	addi	r5,r5,8
  80a764:	a009883a 	mov	r4,r20
  80a768:	18c00054 	ori	r3,r3,1
  80a76c:	10c00115 	stw	r3,4(r2)
  80a770:	080b32c0 	call	80b32c <_free_r>
  80a774:	003fd306 	br	80a6c4 <__alt_mem_onchip_mem+0xff8026c4>
  80a778:	017fff04 	movi	r5,-4
  80a77c:	414a703a 	and	r5,r8,r5
  80a780:	89800404 	addi	r6,r17,16
  80a784:	8151883a 	add	r8,r16,r5
  80a788:	4180590e 	bge	r8,r6,80a8f0 <_realloc_r+0x390>
  80a78c:	1080004c 	andi	r2,r2,1
  80a790:	103f9e1e 	bne	r2,zero,80a60c <__alt_mem_onchip_mem+0xff80260c>
  80a794:	adbffe17 	ldw	r22,-8(r21)
  80a798:	00bfff04 	movi	r2,-4
  80a79c:	9dadc83a 	sub	r22,r19,r22
  80a7a0:	b1800117 	ldw	r6,4(r22)
  80a7a4:	3084703a 	and	r2,r6,r2
  80a7a8:	20002026 	beq	r4,zero,80a82c <_realloc_r+0x2cc>
  80a7ac:	80af883a 	add	r23,r16,r2
  80a7b0:	b96f883a 	add	r23,r23,r5
  80a7b4:	21c05f26 	beq	r4,r7,80a934 <_realloc_r+0x3d4>
  80a7b8:	b8c01c16 	blt	r23,r3,80a82c <_realloc_r+0x2cc>
  80a7bc:	20800317 	ldw	r2,12(r4)
  80a7c0:	20c00217 	ldw	r3,8(r4)
  80a7c4:	81bfff04 	addi	r6,r16,-4
  80a7c8:	01000904 	movi	r4,36
  80a7cc:	18800315 	stw	r2,12(r3)
  80a7d0:	10c00215 	stw	r3,8(r2)
  80a7d4:	b0c00217 	ldw	r3,8(r22)
  80a7d8:	b0800317 	ldw	r2,12(r22)
  80a7dc:	b4800204 	addi	r18,r22,8
  80a7e0:	18800315 	stw	r2,12(r3)
  80a7e4:	10c00215 	stw	r3,8(r2)
  80a7e8:	21801b36 	bltu	r4,r6,80a858 <_realloc_r+0x2f8>
  80a7ec:	008004c4 	movi	r2,19
  80a7f0:	1180352e 	bgeu	r2,r6,80a8c8 <_realloc_r+0x368>
  80a7f4:	a8800017 	ldw	r2,0(r21)
  80a7f8:	b0800215 	stw	r2,8(r22)
  80a7fc:	a8800117 	ldw	r2,4(r21)
  80a800:	b0800315 	stw	r2,12(r22)
  80a804:	008006c4 	movi	r2,27
  80a808:	11807f36 	bltu	r2,r6,80aa08 <_realloc_r+0x4a8>
  80a80c:	b0800404 	addi	r2,r22,16
  80a810:	ad400204 	addi	r21,r21,8
  80a814:	00002d06 	br	80a8cc <_realloc_r+0x36c>
  80a818:	adbffe17 	ldw	r22,-8(r21)
  80a81c:	00bfff04 	movi	r2,-4
  80a820:	9dadc83a 	sub	r22,r19,r22
  80a824:	b1000117 	ldw	r4,4(r22)
  80a828:	2084703a 	and	r2,r4,r2
  80a82c:	b03f7726 	beq	r22,zero,80a60c <__alt_mem_onchip_mem+0xff80260c>
  80a830:	80af883a 	add	r23,r16,r2
  80a834:	b8ff7516 	blt	r23,r3,80a60c <__alt_mem_onchip_mem+0xff80260c>
  80a838:	b0800317 	ldw	r2,12(r22)
  80a83c:	b0c00217 	ldw	r3,8(r22)
  80a840:	81bfff04 	addi	r6,r16,-4
  80a844:	01000904 	movi	r4,36
  80a848:	18800315 	stw	r2,12(r3)
  80a84c:	10c00215 	stw	r3,8(r2)
  80a850:	b4800204 	addi	r18,r22,8
  80a854:	21bfe52e 	bgeu	r4,r6,80a7ec <__alt_mem_onchip_mem+0xff8027ec>
  80a858:	a80b883a 	mov	r5,r21
  80a85c:	9009883a 	mov	r4,r18
  80a860:	080a2dc0 	call	80a2dc <memmove>
  80a864:	b821883a 	mov	r16,r23
  80a868:	b027883a 	mov	r19,r22
  80a86c:	003f8a06 	br	80a698 <__alt_mem_onchip_mem+0xff802698>
  80a870:	300b883a 	mov	r5,r6
  80a874:	dfc00917 	ldw	ra,36(sp)
  80a878:	df000817 	ldw	fp,32(sp)
  80a87c:	ddc00717 	ldw	r23,28(sp)
  80a880:	dd800617 	ldw	r22,24(sp)
  80a884:	dd400517 	ldw	r21,20(sp)
  80a888:	dd000417 	ldw	r20,16(sp)
  80a88c:	dcc00317 	ldw	r19,12(sp)
  80a890:	dc800217 	ldw	r18,8(sp)
  80a894:	dc400117 	ldw	r17,4(sp)
  80a898:	dc000017 	ldw	r16,0(sp)
  80a89c:	dec00a04 	addi	sp,sp,40
  80a8a0:	08098a41 	jmpi	8098a4 <_malloc_r>
  80a8a4:	a8c00017 	ldw	r3,0(r21)
  80a8a8:	90c00015 	stw	r3,0(r18)
  80a8ac:	a8c00117 	ldw	r3,4(r21)
  80a8b0:	90c00115 	stw	r3,4(r18)
  80a8b4:	00c006c4 	movi	r3,27
  80a8b8:	19804536 	bltu	r3,r6,80a9d0 <_realloc_r+0x470>
  80a8bc:	90800204 	addi	r2,r18,8
  80a8c0:	a8c00204 	addi	r3,r21,8
  80a8c4:	003f6306 	br	80a654 <__alt_mem_onchip_mem+0xff802654>
  80a8c8:	9005883a 	mov	r2,r18
  80a8cc:	a8c00017 	ldw	r3,0(r21)
  80a8d0:	b821883a 	mov	r16,r23
  80a8d4:	b027883a 	mov	r19,r22
  80a8d8:	10c00015 	stw	r3,0(r2)
  80a8dc:	a8c00117 	ldw	r3,4(r21)
  80a8e0:	10c00115 	stw	r3,4(r2)
  80a8e4:	a8c00217 	ldw	r3,8(r21)
  80a8e8:	10c00215 	stw	r3,8(r2)
  80a8ec:	003f6a06 	br	80a698 <__alt_mem_onchip_mem+0xff802698>
  80a8f0:	9c67883a 	add	r19,r19,r17
  80a8f4:	4445c83a 	sub	r2,r8,r17
  80a8f8:	e4c00215 	stw	r19,8(fp)
  80a8fc:	10800054 	ori	r2,r2,1
  80a900:	98800115 	stw	r2,4(r19)
  80a904:	a8bfff17 	ldw	r2,-4(r21)
  80a908:	a009883a 	mov	r4,r20
  80a90c:	1080004c 	andi	r2,r2,1
  80a910:	1462b03a 	or	r17,r2,r17
  80a914:	ac7fff15 	stw	r17,-4(r21)
  80a918:	080c1e80 	call	80c1e8 <__malloc_unlock>
  80a91c:	a805883a 	mov	r2,r21
  80a920:	003f6b06 	br	80a6d0 <__alt_mem_onchip_mem+0xff8026d0>
  80a924:	a80b883a 	mov	r5,r21
  80a928:	9009883a 	mov	r4,r18
  80a92c:	080a2dc0 	call	80a2dc <memmove>
  80a930:	003f4e06 	br	80a66c <__alt_mem_onchip_mem+0xff80266c>
  80a934:	89000404 	addi	r4,r17,16
  80a938:	b93fbc16 	blt	r23,r4,80a82c <__alt_mem_onchip_mem+0xff80282c>
  80a93c:	b0800317 	ldw	r2,12(r22)
  80a940:	b0c00217 	ldw	r3,8(r22)
  80a944:	81bfff04 	addi	r6,r16,-4
  80a948:	01000904 	movi	r4,36
  80a94c:	18800315 	stw	r2,12(r3)
  80a950:	10c00215 	stw	r3,8(r2)
  80a954:	b4800204 	addi	r18,r22,8
  80a958:	21804336 	bltu	r4,r6,80aa68 <_realloc_r+0x508>
  80a95c:	008004c4 	movi	r2,19
  80a960:	11803f2e 	bgeu	r2,r6,80aa60 <_realloc_r+0x500>
  80a964:	a8800017 	ldw	r2,0(r21)
  80a968:	b0800215 	stw	r2,8(r22)
  80a96c:	a8800117 	ldw	r2,4(r21)
  80a970:	b0800315 	stw	r2,12(r22)
  80a974:	008006c4 	movi	r2,27
  80a978:	11803f36 	bltu	r2,r6,80aa78 <_realloc_r+0x518>
  80a97c:	b0800404 	addi	r2,r22,16
  80a980:	ad400204 	addi	r21,r21,8
  80a984:	a8c00017 	ldw	r3,0(r21)
  80a988:	10c00015 	stw	r3,0(r2)
  80a98c:	a8c00117 	ldw	r3,4(r21)
  80a990:	10c00115 	stw	r3,4(r2)
  80a994:	a8c00217 	ldw	r3,8(r21)
  80a998:	10c00215 	stw	r3,8(r2)
  80a99c:	b447883a 	add	r3,r22,r17
  80a9a0:	bc45c83a 	sub	r2,r23,r17
  80a9a4:	e0c00215 	stw	r3,8(fp)
  80a9a8:	10800054 	ori	r2,r2,1
  80a9ac:	18800115 	stw	r2,4(r3)
  80a9b0:	b0800117 	ldw	r2,4(r22)
  80a9b4:	a009883a 	mov	r4,r20
  80a9b8:	1080004c 	andi	r2,r2,1
  80a9bc:	1462b03a 	or	r17,r2,r17
  80a9c0:	b4400115 	stw	r17,4(r22)
  80a9c4:	080c1e80 	call	80c1e8 <__malloc_unlock>
  80a9c8:	9005883a 	mov	r2,r18
  80a9cc:	003f4006 	br	80a6d0 <__alt_mem_onchip_mem+0xff8026d0>
  80a9d0:	a8c00217 	ldw	r3,8(r21)
  80a9d4:	90c00215 	stw	r3,8(r18)
  80a9d8:	a8c00317 	ldw	r3,12(r21)
  80a9dc:	90c00315 	stw	r3,12(r18)
  80a9e0:	30801126 	beq	r6,r2,80aa28 <_realloc_r+0x4c8>
  80a9e4:	90800404 	addi	r2,r18,16
  80a9e8:	a8c00404 	addi	r3,r21,16
  80a9ec:	003f1906 	br	80a654 <__alt_mem_onchip_mem+0xff802654>
  80a9f0:	90ffff17 	ldw	r3,-4(r18)
  80a9f4:	00bfff04 	movi	r2,-4
  80a9f8:	a825883a 	mov	r18,r21
  80a9fc:	1884703a 	and	r2,r3,r2
  80aa00:	80a1883a 	add	r16,r16,r2
  80aa04:	003f2406 	br	80a698 <__alt_mem_onchip_mem+0xff802698>
  80aa08:	a8800217 	ldw	r2,8(r21)
  80aa0c:	b0800415 	stw	r2,16(r22)
  80aa10:	a8800317 	ldw	r2,12(r21)
  80aa14:	b0800515 	stw	r2,20(r22)
  80aa18:	31000a26 	beq	r6,r4,80aa44 <_realloc_r+0x4e4>
  80aa1c:	b0800604 	addi	r2,r22,24
  80aa20:	ad400404 	addi	r21,r21,16
  80aa24:	003fa906 	br	80a8cc <__alt_mem_onchip_mem+0xff8028cc>
  80aa28:	a9000417 	ldw	r4,16(r21)
  80aa2c:	90800604 	addi	r2,r18,24
  80aa30:	a8c00604 	addi	r3,r21,24
  80aa34:	91000415 	stw	r4,16(r18)
  80aa38:	a9000517 	ldw	r4,20(r21)
  80aa3c:	91000515 	stw	r4,20(r18)
  80aa40:	003f0406 	br	80a654 <__alt_mem_onchip_mem+0xff802654>
  80aa44:	a8c00417 	ldw	r3,16(r21)
  80aa48:	ad400604 	addi	r21,r21,24
  80aa4c:	b0800804 	addi	r2,r22,32
  80aa50:	b0c00615 	stw	r3,24(r22)
  80aa54:	a8ffff17 	ldw	r3,-4(r21)
  80aa58:	b0c00715 	stw	r3,28(r22)
  80aa5c:	003f9b06 	br	80a8cc <__alt_mem_onchip_mem+0xff8028cc>
  80aa60:	9005883a 	mov	r2,r18
  80aa64:	003fc706 	br	80a984 <__alt_mem_onchip_mem+0xff802984>
  80aa68:	a80b883a 	mov	r5,r21
  80aa6c:	9009883a 	mov	r4,r18
  80aa70:	080a2dc0 	call	80a2dc <memmove>
  80aa74:	003fc906 	br	80a99c <__alt_mem_onchip_mem+0xff80299c>
  80aa78:	a8800217 	ldw	r2,8(r21)
  80aa7c:	b0800415 	stw	r2,16(r22)
  80aa80:	a8800317 	ldw	r2,12(r21)
  80aa84:	b0800515 	stw	r2,20(r22)
  80aa88:	31000726 	beq	r6,r4,80aaa8 <_realloc_r+0x548>
  80aa8c:	b0800604 	addi	r2,r22,24
  80aa90:	ad400404 	addi	r21,r21,16
  80aa94:	003fbb06 	br	80a984 <__alt_mem_onchip_mem+0xff802984>
  80aa98:	a009883a 	mov	r4,r20
  80aa9c:	080c1e80 	call	80c1e8 <__malloc_unlock>
  80aaa0:	0005883a 	mov	r2,zero
  80aaa4:	003f0a06 	br	80a6d0 <__alt_mem_onchip_mem+0xff8026d0>
  80aaa8:	a8c00417 	ldw	r3,16(r21)
  80aaac:	ad400604 	addi	r21,r21,24
  80aab0:	b0800804 	addi	r2,r22,32
  80aab4:	b0c00615 	stw	r3,24(r22)
  80aab8:	a8ffff17 	ldw	r3,-4(r21)
  80aabc:	b0c00715 	stw	r3,28(r22)
  80aac0:	003fb006 	br	80a984 <__alt_mem_onchip_mem+0xff802984>

0080aac4 <_sbrk_r>:
  80aac4:	defffd04 	addi	sp,sp,-12
  80aac8:	dc000015 	stw	r16,0(sp)
  80aacc:	04002074 	movhi	r16,129
  80aad0:	dc400115 	stw	r17,4(sp)
  80aad4:	840e3c04 	addi	r16,r16,14576
  80aad8:	2023883a 	mov	r17,r4
  80aadc:	2809883a 	mov	r4,r5
  80aae0:	dfc00215 	stw	ra,8(sp)
  80aae4:	80000015 	stw	zero,0(r16)
  80aae8:	080c3a80 	call	80c3a8 <sbrk>
  80aaec:	00ffffc4 	movi	r3,-1
  80aaf0:	10c00526 	beq	r2,r3,80ab08 <_sbrk_r+0x44>
  80aaf4:	dfc00217 	ldw	ra,8(sp)
  80aaf8:	dc400117 	ldw	r17,4(sp)
  80aafc:	dc000017 	ldw	r16,0(sp)
  80ab00:	dec00304 	addi	sp,sp,12
  80ab04:	f800283a 	ret
  80ab08:	80c00017 	ldw	r3,0(r16)
  80ab0c:	183ff926 	beq	r3,zero,80aaf4 <__alt_mem_onchip_mem+0xff802af4>
  80ab10:	88c00015 	stw	r3,0(r17)
  80ab14:	003ff706 	br	80aaf4 <__alt_mem_onchip_mem+0xff802af4>

0080ab18 <__sread>:
  80ab18:	defffe04 	addi	sp,sp,-8
  80ab1c:	dc000015 	stw	r16,0(sp)
  80ab20:	2821883a 	mov	r16,r5
  80ab24:	2940038f 	ldh	r5,14(r5)
  80ab28:	dfc00115 	stw	ra,4(sp)
  80ab2c:	080b8580 	call	80b858 <_read_r>
  80ab30:	10000716 	blt	r2,zero,80ab50 <__sread+0x38>
  80ab34:	80c01417 	ldw	r3,80(r16)
  80ab38:	1887883a 	add	r3,r3,r2
  80ab3c:	80c01415 	stw	r3,80(r16)
  80ab40:	dfc00117 	ldw	ra,4(sp)
  80ab44:	dc000017 	ldw	r16,0(sp)
  80ab48:	dec00204 	addi	sp,sp,8
  80ab4c:	f800283a 	ret
  80ab50:	80c0030b 	ldhu	r3,12(r16)
  80ab54:	18fbffcc 	andi	r3,r3,61439
  80ab58:	80c0030d 	sth	r3,12(r16)
  80ab5c:	dfc00117 	ldw	ra,4(sp)
  80ab60:	dc000017 	ldw	r16,0(sp)
  80ab64:	dec00204 	addi	sp,sp,8
  80ab68:	f800283a 	ret

0080ab6c <__seofread>:
  80ab6c:	0005883a 	mov	r2,zero
  80ab70:	f800283a 	ret

0080ab74 <__swrite>:
  80ab74:	2880030b 	ldhu	r2,12(r5)
  80ab78:	defffb04 	addi	sp,sp,-20
  80ab7c:	dcc00315 	stw	r19,12(sp)
  80ab80:	dc800215 	stw	r18,8(sp)
  80ab84:	dc400115 	stw	r17,4(sp)
  80ab88:	dc000015 	stw	r16,0(sp)
  80ab8c:	dfc00415 	stw	ra,16(sp)
  80ab90:	10c0400c 	andi	r3,r2,256
  80ab94:	2821883a 	mov	r16,r5
  80ab98:	2023883a 	mov	r17,r4
  80ab9c:	3025883a 	mov	r18,r6
  80aba0:	3827883a 	mov	r19,r7
  80aba4:	18000526 	beq	r3,zero,80abbc <__swrite+0x48>
  80aba8:	2940038f 	ldh	r5,14(r5)
  80abac:	01c00084 	movi	r7,2
  80abb0:	000d883a 	mov	r6,zero
  80abb4:	080b63c0 	call	80b63c <_lseek_r>
  80abb8:	8080030b 	ldhu	r2,12(r16)
  80abbc:	8140038f 	ldh	r5,14(r16)
  80abc0:	10bbffcc 	andi	r2,r2,61439
  80abc4:	980f883a 	mov	r7,r19
  80abc8:	900d883a 	mov	r6,r18
  80abcc:	8809883a 	mov	r4,r17
  80abd0:	8080030d 	sth	r2,12(r16)
  80abd4:	dfc00417 	ldw	ra,16(sp)
  80abd8:	dcc00317 	ldw	r19,12(sp)
  80abdc:	dc800217 	ldw	r18,8(sp)
  80abe0:	dc400117 	ldw	r17,4(sp)
  80abe4:	dc000017 	ldw	r16,0(sp)
  80abe8:	dec00504 	addi	sp,sp,20
  80abec:	080ac541 	jmpi	80ac54 <_write_r>

0080abf0 <__sseek>:
  80abf0:	defffe04 	addi	sp,sp,-8
  80abf4:	dc000015 	stw	r16,0(sp)
  80abf8:	2821883a 	mov	r16,r5
  80abfc:	2940038f 	ldh	r5,14(r5)
  80ac00:	dfc00115 	stw	ra,4(sp)
  80ac04:	080b63c0 	call	80b63c <_lseek_r>
  80ac08:	00ffffc4 	movi	r3,-1
  80ac0c:	10c00826 	beq	r2,r3,80ac30 <__sseek+0x40>
  80ac10:	80c0030b 	ldhu	r3,12(r16)
  80ac14:	80801415 	stw	r2,80(r16)
  80ac18:	18c40014 	ori	r3,r3,4096
  80ac1c:	80c0030d 	sth	r3,12(r16)
  80ac20:	dfc00117 	ldw	ra,4(sp)
  80ac24:	dc000017 	ldw	r16,0(sp)
  80ac28:	dec00204 	addi	sp,sp,8
  80ac2c:	f800283a 	ret
  80ac30:	80c0030b 	ldhu	r3,12(r16)
  80ac34:	18fbffcc 	andi	r3,r3,61439
  80ac38:	80c0030d 	sth	r3,12(r16)
  80ac3c:	dfc00117 	ldw	ra,4(sp)
  80ac40:	dc000017 	ldw	r16,0(sp)
  80ac44:	dec00204 	addi	sp,sp,8
  80ac48:	f800283a 	ret

0080ac4c <__sclose>:
  80ac4c:	2940038f 	ldh	r5,14(r5)
  80ac50:	080ae081 	jmpi	80ae08 <_close_r>

0080ac54 <_write_r>:
  80ac54:	defffd04 	addi	sp,sp,-12
  80ac58:	2805883a 	mov	r2,r5
  80ac5c:	dc000015 	stw	r16,0(sp)
  80ac60:	04002074 	movhi	r16,129
  80ac64:	dc400115 	stw	r17,4(sp)
  80ac68:	300b883a 	mov	r5,r6
  80ac6c:	840e3c04 	addi	r16,r16,14576
  80ac70:	2023883a 	mov	r17,r4
  80ac74:	380d883a 	mov	r6,r7
  80ac78:	1009883a 	mov	r4,r2
  80ac7c:	dfc00215 	stw	ra,8(sp)
  80ac80:	80000015 	stw	zero,0(r16)
  80ac84:	080c6380 	call	80c638 <write>
  80ac88:	00ffffc4 	movi	r3,-1
  80ac8c:	10c00526 	beq	r2,r3,80aca4 <_write_r+0x50>
  80ac90:	dfc00217 	ldw	ra,8(sp)
  80ac94:	dc400117 	ldw	r17,4(sp)
  80ac98:	dc000017 	ldw	r16,0(sp)
  80ac9c:	dec00304 	addi	sp,sp,12
  80aca0:	f800283a 	ret
  80aca4:	80c00017 	ldw	r3,0(r16)
  80aca8:	183ff926 	beq	r3,zero,80ac90 <__alt_mem_onchip_mem+0xff802c90>
  80acac:	88c00015 	stw	r3,0(r17)
  80acb0:	003ff706 	br	80ac90 <__alt_mem_onchip_mem+0xff802c90>

0080acb4 <__swsetup_r>:
  80acb4:	00802074 	movhi	r2,129
  80acb8:	defffd04 	addi	sp,sp,-12
  80acbc:	10871104 	addi	r2,r2,7236
  80acc0:	dc400115 	stw	r17,4(sp)
  80acc4:	2023883a 	mov	r17,r4
  80acc8:	11000017 	ldw	r4,0(r2)
  80accc:	dc000015 	stw	r16,0(sp)
  80acd0:	dfc00215 	stw	ra,8(sp)
  80acd4:	2821883a 	mov	r16,r5
  80acd8:	20000226 	beq	r4,zero,80ace4 <__swsetup_r+0x30>
  80acdc:	20800e17 	ldw	r2,56(r4)
  80ace0:	10003126 	beq	r2,zero,80ada8 <__swsetup_r+0xf4>
  80ace4:	8080030b 	ldhu	r2,12(r16)
  80ace8:	10c0020c 	andi	r3,r2,8
  80acec:	1009883a 	mov	r4,r2
  80acf0:	18000f26 	beq	r3,zero,80ad30 <__swsetup_r+0x7c>
  80acf4:	80c00417 	ldw	r3,16(r16)
  80acf8:	18001526 	beq	r3,zero,80ad50 <__swsetup_r+0x9c>
  80acfc:	1100004c 	andi	r4,r2,1
  80ad00:	20001c1e 	bne	r4,zero,80ad74 <__swsetup_r+0xc0>
  80ad04:	1080008c 	andi	r2,r2,2
  80ad08:	1000291e 	bne	r2,zero,80adb0 <__swsetup_r+0xfc>
  80ad0c:	80800517 	ldw	r2,20(r16)
  80ad10:	80800215 	stw	r2,8(r16)
  80ad14:	18001c26 	beq	r3,zero,80ad88 <__swsetup_r+0xd4>
  80ad18:	0005883a 	mov	r2,zero
  80ad1c:	dfc00217 	ldw	ra,8(sp)
  80ad20:	dc400117 	ldw	r17,4(sp)
  80ad24:	dc000017 	ldw	r16,0(sp)
  80ad28:	dec00304 	addi	sp,sp,12
  80ad2c:	f800283a 	ret
  80ad30:	2080040c 	andi	r2,r4,16
  80ad34:	10002e26 	beq	r2,zero,80adf0 <__swsetup_r+0x13c>
  80ad38:	2080010c 	andi	r2,r4,4
  80ad3c:	10001e1e 	bne	r2,zero,80adb8 <__swsetup_r+0x104>
  80ad40:	80c00417 	ldw	r3,16(r16)
  80ad44:	20800214 	ori	r2,r4,8
  80ad48:	8080030d 	sth	r2,12(r16)
  80ad4c:	183feb1e 	bne	r3,zero,80acfc <__alt_mem_onchip_mem+0xff802cfc>
  80ad50:	1100a00c 	andi	r4,r2,640
  80ad54:	01408004 	movi	r5,512
  80ad58:	217fe826 	beq	r4,r5,80acfc <__alt_mem_onchip_mem+0xff802cfc>
  80ad5c:	800b883a 	mov	r5,r16
  80ad60:	8809883a 	mov	r4,r17
  80ad64:	080b69c0 	call	80b69c <__smakebuf_r>
  80ad68:	8080030b 	ldhu	r2,12(r16)
  80ad6c:	80c00417 	ldw	r3,16(r16)
  80ad70:	003fe206 	br	80acfc <__alt_mem_onchip_mem+0xff802cfc>
  80ad74:	80800517 	ldw	r2,20(r16)
  80ad78:	80000215 	stw	zero,8(r16)
  80ad7c:	0085c83a 	sub	r2,zero,r2
  80ad80:	80800615 	stw	r2,24(r16)
  80ad84:	183fe41e 	bne	r3,zero,80ad18 <__alt_mem_onchip_mem+0xff802d18>
  80ad88:	80c0030b 	ldhu	r3,12(r16)
  80ad8c:	0005883a 	mov	r2,zero
  80ad90:	1900200c 	andi	r4,r3,128
  80ad94:	203fe126 	beq	r4,zero,80ad1c <__alt_mem_onchip_mem+0xff802d1c>
  80ad98:	18c01014 	ori	r3,r3,64
  80ad9c:	80c0030d 	sth	r3,12(r16)
  80ada0:	00bfffc4 	movi	r2,-1
  80ada4:	003fdd06 	br	80ad1c <__alt_mem_onchip_mem+0xff802d1c>
  80ada8:	08092100 	call	809210 <__sinit>
  80adac:	003fcd06 	br	80ace4 <__alt_mem_onchip_mem+0xff802ce4>
  80adb0:	0005883a 	mov	r2,zero
  80adb4:	003fd606 	br	80ad10 <__alt_mem_onchip_mem+0xff802d10>
  80adb8:	81400c17 	ldw	r5,48(r16)
  80adbc:	28000626 	beq	r5,zero,80add8 <__swsetup_r+0x124>
  80adc0:	80801004 	addi	r2,r16,64
  80adc4:	28800326 	beq	r5,r2,80add4 <__swsetup_r+0x120>
  80adc8:	8809883a 	mov	r4,r17
  80adcc:	080b32c0 	call	80b32c <_free_r>
  80add0:	8100030b 	ldhu	r4,12(r16)
  80add4:	80000c15 	stw	zero,48(r16)
  80add8:	80c00417 	ldw	r3,16(r16)
  80addc:	00bff6c4 	movi	r2,-37
  80ade0:	1108703a 	and	r4,r2,r4
  80ade4:	80000115 	stw	zero,4(r16)
  80ade8:	80c00015 	stw	r3,0(r16)
  80adec:	003fd506 	br	80ad44 <__alt_mem_onchip_mem+0xff802d44>
  80adf0:	00800244 	movi	r2,9
  80adf4:	88800015 	stw	r2,0(r17)
  80adf8:	20801014 	ori	r2,r4,64
  80adfc:	8080030d 	sth	r2,12(r16)
  80ae00:	00bfffc4 	movi	r2,-1
  80ae04:	003fc506 	br	80ad1c <__alt_mem_onchip_mem+0xff802d1c>

0080ae08 <_close_r>:
  80ae08:	defffd04 	addi	sp,sp,-12
  80ae0c:	dc000015 	stw	r16,0(sp)
  80ae10:	04002074 	movhi	r16,129
  80ae14:	dc400115 	stw	r17,4(sp)
  80ae18:	840e3c04 	addi	r16,r16,14576
  80ae1c:	2023883a 	mov	r17,r4
  80ae20:	2809883a 	mov	r4,r5
  80ae24:	dfc00215 	stw	ra,8(sp)
  80ae28:	80000015 	stw	zero,0(r16)
  80ae2c:	080bc840 	call	80bc84 <close>
  80ae30:	00ffffc4 	movi	r3,-1
  80ae34:	10c00526 	beq	r2,r3,80ae4c <_close_r+0x44>
  80ae38:	dfc00217 	ldw	ra,8(sp)
  80ae3c:	dc400117 	ldw	r17,4(sp)
  80ae40:	dc000017 	ldw	r16,0(sp)
  80ae44:	dec00304 	addi	sp,sp,12
  80ae48:	f800283a 	ret
  80ae4c:	80c00017 	ldw	r3,0(r16)
  80ae50:	183ff926 	beq	r3,zero,80ae38 <__alt_mem_onchip_mem+0xff802e38>
  80ae54:	88c00015 	stw	r3,0(r17)
  80ae58:	003ff706 	br	80ae38 <__alt_mem_onchip_mem+0xff802e38>

0080ae5c <_fclose_r>:
  80ae5c:	28003926 	beq	r5,zero,80af44 <_fclose_r+0xe8>
  80ae60:	defffc04 	addi	sp,sp,-16
  80ae64:	dc400115 	stw	r17,4(sp)
  80ae68:	dc000015 	stw	r16,0(sp)
  80ae6c:	dfc00315 	stw	ra,12(sp)
  80ae70:	dc800215 	stw	r18,8(sp)
  80ae74:	2023883a 	mov	r17,r4
  80ae78:	2821883a 	mov	r16,r5
  80ae7c:	20000226 	beq	r4,zero,80ae88 <_fclose_r+0x2c>
  80ae80:	20800e17 	ldw	r2,56(r4)
  80ae84:	10002726 	beq	r2,zero,80af24 <_fclose_r+0xc8>
  80ae88:	8080030f 	ldh	r2,12(r16)
  80ae8c:	1000071e 	bne	r2,zero,80aeac <_fclose_r+0x50>
  80ae90:	0005883a 	mov	r2,zero
  80ae94:	dfc00317 	ldw	ra,12(sp)
  80ae98:	dc800217 	ldw	r18,8(sp)
  80ae9c:	dc400117 	ldw	r17,4(sp)
  80aea0:	dc000017 	ldw	r16,0(sp)
  80aea4:	dec00404 	addi	sp,sp,16
  80aea8:	f800283a 	ret
  80aeac:	800b883a 	mov	r5,r16
  80aeb0:	8809883a 	mov	r4,r17
  80aeb4:	080af600 	call	80af60 <__sflush_r>
  80aeb8:	1025883a 	mov	r18,r2
  80aebc:	80800b17 	ldw	r2,44(r16)
  80aec0:	10000426 	beq	r2,zero,80aed4 <_fclose_r+0x78>
  80aec4:	81400717 	ldw	r5,28(r16)
  80aec8:	8809883a 	mov	r4,r17
  80aecc:	103ee83a 	callr	r2
  80aed0:	10001616 	blt	r2,zero,80af2c <_fclose_r+0xd0>
  80aed4:	8080030b 	ldhu	r2,12(r16)
  80aed8:	1080200c 	andi	r2,r2,128
  80aedc:	1000151e 	bne	r2,zero,80af34 <_fclose_r+0xd8>
  80aee0:	81400c17 	ldw	r5,48(r16)
  80aee4:	28000526 	beq	r5,zero,80aefc <_fclose_r+0xa0>
  80aee8:	80801004 	addi	r2,r16,64
  80aeec:	28800226 	beq	r5,r2,80aef8 <_fclose_r+0x9c>
  80aef0:	8809883a 	mov	r4,r17
  80aef4:	080b32c0 	call	80b32c <_free_r>
  80aef8:	80000c15 	stw	zero,48(r16)
  80aefc:	81401117 	ldw	r5,68(r16)
  80af00:	28000326 	beq	r5,zero,80af10 <_fclose_r+0xb4>
  80af04:	8809883a 	mov	r4,r17
  80af08:	080b32c0 	call	80b32c <_free_r>
  80af0c:	80001115 	stw	zero,68(r16)
  80af10:	08092200 	call	809220 <__sfp_lock_acquire>
  80af14:	8000030d 	sth	zero,12(r16)
  80af18:	08092240 	call	809224 <__sfp_lock_release>
  80af1c:	9005883a 	mov	r2,r18
  80af20:	003fdc06 	br	80ae94 <__alt_mem_onchip_mem+0xff802e94>
  80af24:	08092100 	call	809210 <__sinit>
  80af28:	003fd706 	br	80ae88 <__alt_mem_onchip_mem+0xff802e88>
  80af2c:	04bfffc4 	movi	r18,-1
  80af30:	003fe806 	br	80aed4 <__alt_mem_onchip_mem+0xff802ed4>
  80af34:	81400417 	ldw	r5,16(r16)
  80af38:	8809883a 	mov	r4,r17
  80af3c:	080b32c0 	call	80b32c <_free_r>
  80af40:	003fe706 	br	80aee0 <__alt_mem_onchip_mem+0xff802ee0>
  80af44:	0005883a 	mov	r2,zero
  80af48:	f800283a 	ret

0080af4c <fclose>:
  80af4c:	00802074 	movhi	r2,129
  80af50:	10871104 	addi	r2,r2,7236
  80af54:	200b883a 	mov	r5,r4
  80af58:	11000017 	ldw	r4,0(r2)
  80af5c:	080ae5c1 	jmpi	80ae5c <_fclose_r>

0080af60 <__sflush_r>:
  80af60:	2880030b 	ldhu	r2,12(r5)
  80af64:	defffb04 	addi	sp,sp,-20
  80af68:	dcc00315 	stw	r19,12(sp)
  80af6c:	dc400115 	stw	r17,4(sp)
  80af70:	dfc00415 	stw	ra,16(sp)
  80af74:	dc800215 	stw	r18,8(sp)
  80af78:	dc000015 	stw	r16,0(sp)
  80af7c:	10c0020c 	andi	r3,r2,8
  80af80:	2823883a 	mov	r17,r5
  80af84:	2027883a 	mov	r19,r4
  80af88:	1800311e 	bne	r3,zero,80b050 <__sflush_r+0xf0>
  80af8c:	28c00117 	ldw	r3,4(r5)
  80af90:	10820014 	ori	r2,r2,2048
  80af94:	2880030d 	sth	r2,12(r5)
  80af98:	00c04b0e 	bge	zero,r3,80b0c8 <__sflush_r+0x168>
  80af9c:	8a000a17 	ldw	r8,40(r17)
  80afa0:	40002326 	beq	r8,zero,80b030 <__sflush_r+0xd0>
  80afa4:	9c000017 	ldw	r16,0(r19)
  80afa8:	10c4000c 	andi	r3,r2,4096
  80afac:	98000015 	stw	zero,0(r19)
  80afb0:	18004826 	beq	r3,zero,80b0d4 <__sflush_r+0x174>
  80afb4:	89801417 	ldw	r6,80(r17)
  80afb8:	10c0010c 	andi	r3,r2,4
  80afbc:	18000626 	beq	r3,zero,80afd8 <__sflush_r+0x78>
  80afc0:	88c00117 	ldw	r3,4(r17)
  80afc4:	88800c17 	ldw	r2,48(r17)
  80afc8:	30cdc83a 	sub	r6,r6,r3
  80afcc:	10000226 	beq	r2,zero,80afd8 <__sflush_r+0x78>
  80afd0:	88800f17 	ldw	r2,60(r17)
  80afd4:	308dc83a 	sub	r6,r6,r2
  80afd8:	89400717 	ldw	r5,28(r17)
  80afdc:	000f883a 	mov	r7,zero
  80afe0:	9809883a 	mov	r4,r19
  80afe4:	403ee83a 	callr	r8
  80afe8:	00ffffc4 	movi	r3,-1
  80afec:	10c04426 	beq	r2,r3,80b100 <__sflush_r+0x1a0>
  80aff0:	88c0030b 	ldhu	r3,12(r17)
  80aff4:	89000417 	ldw	r4,16(r17)
  80aff8:	88000115 	stw	zero,4(r17)
  80affc:	197dffcc 	andi	r5,r3,63487
  80b000:	8940030d 	sth	r5,12(r17)
  80b004:	89000015 	stw	r4,0(r17)
  80b008:	18c4000c 	andi	r3,r3,4096
  80b00c:	18002c1e 	bne	r3,zero,80b0c0 <__sflush_r+0x160>
  80b010:	89400c17 	ldw	r5,48(r17)
  80b014:	9c000015 	stw	r16,0(r19)
  80b018:	28000526 	beq	r5,zero,80b030 <__sflush_r+0xd0>
  80b01c:	88801004 	addi	r2,r17,64
  80b020:	28800226 	beq	r5,r2,80b02c <__sflush_r+0xcc>
  80b024:	9809883a 	mov	r4,r19
  80b028:	080b32c0 	call	80b32c <_free_r>
  80b02c:	88000c15 	stw	zero,48(r17)
  80b030:	0005883a 	mov	r2,zero
  80b034:	dfc00417 	ldw	ra,16(sp)
  80b038:	dcc00317 	ldw	r19,12(sp)
  80b03c:	dc800217 	ldw	r18,8(sp)
  80b040:	dc400117 	ldw	r17,4(sp)
  80b044:	dc000017 	ldw	r16,0(sp)
  80b048:	dec00504 	addi	sp,sp,20
  80b04c:	f800283a 	ret
  80b050:	2c800417 	ldw	r18,16(r5)
  80b054:	903ff626 	beq	r18,zero,80b030 <__alt_mem_onchip_mem+0xff803030>
  80b058:	2c000017 	ldw	r16,0(r5)
  80b05c:	108000cc 	andi	r2,r2,3
  80b060:	2c800015 	stw	r18,0(r5)
  80b064:	84a1c83a 	sub	r16,r16,r18
  80b068:	1000131e 	bne	r2,zero,80b0b8 <__sflush_r+0x158>
  80b06c:	28800517 	ldw	r2,20(r5)
  80b070:	88800215 	stw	r2,8(r17)
  80b074:	04000316 	blt	zero,r16,80b084 <__sflush_r+0x124>
  80b078:	003fed06 	br	80b030 <__alt_mem_onchip_mem+0xff803030>
  80b07c:	90a5883a 	add	r18,r18,r2
  80b080:	043feb0e 	bge	zero,r16,80b030 <__alt_mem_onchip_mem+0xff803030>
  80b084:	88800917 	ldw	r2,36(r17)
  80b088:	89400717 	ldw	r5,28(r17)
  80b08c:	800f883a 	mov	r7,r16
  80b090:	900d883a 	mov	r6,r18
  80b094:	9809883a 	mov	r4,r19
  80b098:	103ee83a 	callr	r2
  80b09c:	80a1c83a 	sub	r16,r16,r2
  80b0a0:	00bff616 	blt	zero,r2,80b07c <__alt_mem_onchip_mem+0xff80307c>
  80b0a4:	88c0030b 	ldhu	r3,12(r17)
  80b0a8:	00bfffc4 	movi	r2,-1
  80b0ac:	18c01014 	ori	r3,r3,64
  80b0b0:	88c0030d 	sth	r3,12(r17)
  80b0b4:	003fdf06 	br	80b034 <__alt_mem_onchip_mem+0xff803034>
  80b0b8:	0005883a 	mov	r2,zero
  80b0bc:	003fec06 	br	80b070 <__alt_mem_onchip_mem+0xff803070>
  80b0c0:	88801415 	stw	r2,80(r17)
  80b0c4:	003fd206 	br	80b010 <__alt_mem_onchip_mem+0xff803010>
  80b0c8:	28c00f17 	ldw	r3,60(r5)
  80b0cc:	00ffb316 	blt	zero,r3,80af9c <__alt_mem_onchip_mem+0xff802f9c>
  80b0d0:	003fd706 	br	80b030 <__alt_mem_onchip_mem+0xff803030>
  80b0d4:	89400717 	ldw	r5,28(r17)
  80b0d8:	000d883a 	mov	r6,zero
  80b0dc:	01c00044 	movi	r7,1
  80b0e0:	9809883a 	mov	r4,r19
  80b0e4:	403ee83a 	callr	r8
  80b0e8:	100d883a 	mov	r6,r2
  80b0ec:	00bfffc4 	movi	r2,-1
  80b0f0:	30801426 	beq	r6,r2,80b144 <__sflush_r+0x1e4>
  80b0f4:	8880030b 	ldhu	r2,12(r17)
  80b0f8:	8a000a17 	ldw	r8,40(r17)
  80b0fc:	003fae06 	br	80afb8 <__alt_mem_onchip_mem+0xff802fb8>
  80b100:	98c00017 	ldw	r3,0(r19)
  80b104:	183fba26 	beq	r3,zero,80aff0 <__alt_mem_onchip_mem+0xff802ff0>
  80b108:	01000744 	movi	r4,29
  80b10c:	19000626 	beq	r3,r4,80b128 <__sflush_r+0x1c8>
  80b110:	01000584 	movi	r4,22
  80b114:	19000426 	beq	r3,r4,80b128 <__sflush_r+0x1c8>
  80b118:	88c0030b 	ldhu	r3,12(r17)
  80b11c:	18c01014 	ori	r3,r3,64
  80b120:	88c0030d 	sth	r3,12(r17)
  80b124:	003fc306 	br	80b034 <__alt_mem_onchip_mem+0xff803034>
  80b128:	8880030b 	ldhu	r2,12(r17)
  80b12c:	88c00417 	ldw	r3,16(r17)
  80b130:	88000115 	stw	zero,4(r17)
  80b134:	10bdffcc 	andi	r2,r2,63487
  80b138:	8880030d 	sth	r2,12(r17)
  80b13c:	88c00015 	stw	r3,0(r17)
  80b140:	003fb306 	br	80b010 <__alt_mem_onchip_mem+0xff803010>
  80b144:	98800017 	ldw	r2,0(r19)
  80b148:	103fea26 	beq	r2,zero,80b0f4 <__alt_mem_onchip_mem+0xff8030f4>
  80b14c:	00c00744 	movi	r3,29
  80b150:	10c00226 	beq	r2,r3,80b15c <__sflush_r+0x1fc>
  80b154:	00c00584 	movi	r3,22
  80b158:	10c0031e 	bne	r2,r3,80b168 <__sflush_r+0x208>
  80b15c:	9c000015 	stw	r16,0(r19)
  80b160:	0005883a 	mov	r2,zero
  80b164:	003fb306 	br	80b034 <__alt_mem_onchip_mem+0xff803034>
  80b168:	88c0030b 	ldhu	r3,12(r17)
  80b16c:	3005883a 	mov	r2,r6
  80b170:	18c01014 	ori	r3,r3,64
  80b174:	88c0030d 	sth	r3,12(r17)
  80b178:	003fae06 	br	80b034 <__alt_mem_onchip_mem+0xff803034>

0080b17c <_fflush_r>:
  80b17c:	defffd04 	addi	sp,sp,-12
  80b180:	dc000115 	stw	r16,4(sp)
  80b184:	dfc00215 	stw	ra,8(sp)
  80b188:	2021883a 	mov	r16,r4
  80b18c:	20000226 	beq	r4,zero,80b198 <_fflush_r+0x1c>
  80b190:	20800e17 	ldw	r2,56(r4)
  80b194:	10000c26 	beq	r2,zero,80b1c8 <_fflush_r+0x4c>
  80b198:	2880030f 	ldh	r2,12(r5)
  80b19c:	1000051e 	bne	r2,zero,80b1b4 <_fflush_r+0x38>
  80b1a0:	0005883a 	mov	r2,zero
  80b1a4:	dfc00217 	ldw	ra,8(sp)
  80b1a8:	dc000117 	ldw	r16,4(sp)
  80b1ac:	dec00304 	addi	sp,sp,12
  80b1b0:	f800283a 	ret
  80b1b4:	8009883a 	mov	r4,r16
  80b1b8:	dfc00217 	ldw	ra,8(sp)
  80b1bc:	dc000117 	ldw	r16,4(sp)
  80b1c0:	dec00304 	addi	sp,sp,12
  80b1c4:	080af601 	jmpi	80af60 <__sflush_r>
  80b1c8:	d9400015 	stw	r5,0(sp)
  80b1cc:	08092100 	call	809210 <__sinit>
  80b1d0:	d9400017 	ldw	r5,0(sp)
  80b1d4:	003ff006 	br	80b198 <__alt_mem_onchip_mem+0xff803198>

0080b1d8 <fflush>:
  80b1d8:	20000526 	beq	r4,zero,80b1f0 <fflush+0x18>
  80b1dc:	00802074 	movhi	r2,129
  80b1e0:	10871104 	addi	r2,r2,7236
  80b1e4:	200b883a 	mov	r5,r4
  80b1e8:	11000017 	ldw	r4,0(r2)
  80b1ec:	080b17c1 	jmpi	80b17c <_fflush_r>
  80b1f0:	00802074 	movhi	r2,129
  80b1f4:	10871004 	addi	r2,r2,7232
  80b1f8:	11000017 	ldw	r4,0(r2)
  80b1fc:	01402074 	movhi	r5,129
  80b200:	296c5f04 	addi	r5,r5,-20100
  80b204:	08097e01 	jmpi	8097e0 <_fwalk_reent>

0080b208 <_malloc_trim_r>:
  80b208:	defffb04 	addi	sp,sp,-20
  80b20c:	dcc00315 	stw	r19,12(sp)
  80b210:	04c02074 	movhi	r19,129
  80b214:	dc800215 	stw	r18,8(sp)
  80b218:	dc400115 	stw	r17,4(sp)
  80b21c:	dc000015 	stw	r16,0(sp)
  80b220:	dfc00415 	stw	ra,16(sp)
  80b224:	2821883a 	mov	r16,r5
  80b228:	9cc11204 	addi	r19,r19,1096
  80b22c:	2025883a 	mov	r18,r4
  80b230:	080c1c40 	call	80c1c4 <__malloc_lock>
  80b234:	98800217 	ldw	r2,8(r19)
  80b238:	14400117 	ldw	r17,4(r2)
  80b23c:	00bfff04 	movi	r2,-4
  80b240:	88a2703a 	and	r17,r17,r2
  80b244:	8c21c83a 	sub	r16,r17,r16
  80b248:	8403fbc4 	addi	r16,r16,4079
  80b24c:	8020d33a 	srli	r16,r16,12
  80b250:	0083ffc4 	movi	r2,4095
  80b254:	843fffc4 	addi	r16,r16,-1
  80b258:	8020933a 	slli	r16,r16,12
  80b25c:	1400060e 	bge	r2,r16,80b278 <_malloc_trim_r+0x70>
  80b260:	000b883a 	mov	r5,zero
  80b264:	9009883a 	mov	r4,r18
  80b268:	080aac40 	call	80aac4 <_sbrk_r>
  80b26c:	98c00217 	ldw	r3,8(r19)
  80b270:	1c47883a 	add	r3,r3,r17
  80b274:	10c00a26 	beq	r2,r3,80b2a0 <_malloc_trim_r+0x98>
  80b278:	9009883a 	mov	r4,r18
  80b27c:	080c1e80 	call	80c1e8 <__malloc_unlock>
  80b280:	0005883a 	mov	r2,zero
  80b284:	dfc00417 	ldw	ra,16(sp)
  80b288:	dcc00317 	ldw	r19,12(sp)
  80b28c:	dc800217 	ldw	r18,8(sp)
  80b290:	dc400117 	ldw	r17,4(sp)
  80b294:	dc000017 	ldw	r16,0(sp)
  80b298:	dec00504 	addi	sp,sp,20
  80b29c:	f800283a 	ret
  80b2a0:	040bc83a 	sub	r5,zero,r16
  80b2a4:	9009883a 	mov	r4,r18
  80b2a8:	080aac40 	call	80aac4 <_sbrk_r>
  80b2ac:	00ffffc4 	movi	r3,-1
  80b2b0:	10c00d26 	beq	r2,r3,80b2e8 <_malloc_trim_r+0xe0>
  80b2b4:	00c02074 	movhi	r3,129
  80b2b8:	18ce4404 	addi	r3,r3,14608
  80b2bc:	18800017 	ldw	r2,0(r3)
  80b2c0:	99000217 	ldw	r4,8(r19)
  80b2c4:	8c23c83a 	sub	r17,r17,r16
  80b2c8:	8c400054 	ori	r17,r17,1
  80b2cc:	1421c83a 	sub	r16,r2,r16
  80b2d0:	24400115 	stw	r17,4(r4)
  80b2d4:	9009883a 	mov	r4,r18
  80b2d8:	1c000015 	stw	r16,0(r3)
  80b2dc:	080c1e80 	call	80c1e8 <__malloc_unlock>
  80b2e0:	00800044 	movi	r2,1
  80b2e4:	003fe706 	br	80b284 <__alt_mem_onchip_mem+0xff803284>
  80b2e8:	000b883a 	mov	r5,zero
  80b2ec:	9009883a 	mov	r4,r18
  80b2f0:	080aac40 	call	80aac4 <_sbrk_r>
  80b2f4:	99000217 	ldw	r4,8(r19)
  80b2f8:	014003c4 	movi	r5,15
  80b2fc:	1107c83a 	sub	r3,r2,r4
  80b300:	28ffdd0e 	bge	r5,r3,80b278 <__alt_mem_onchip_mem+0xff803278>
  80b304:	01402074 	movhi	r5,129
  80b308:	29471204 	addi	r5,r5,7240
  80b30c:	29400017 	ldw	r5,0(r5)
  80b310:	18c00054 	ori	r3,r3,1
  80b314:	20c00115 	stw	r3,4(r4)
  80b318:	00c02074 	movhi	r3,129
  80b31c:	1145c83a 	sub	r2,r2,r5
  80b320:	18ce4404 	addi	r3,r3,14608
  80b324:	18800015 	stw	r2,0(r3)
  80b328:	003fd306 	br	80b278 <__alt_mem_onchip_mem+0xff803278>

0080b32c <_free_r>:
  80b32c:	28004126 	beq	r5,zero,80b434 <_free_r+0x108>
  80b330:	defffd04 	addi	sp,sp,-12
  80b334:	dc400115 	stw	r17,4(sp)
  80b338:	dc000015 	stw	r16,0(sp)
  80b33c:	2023883a 	mov	r17,r4
  80b340:	2821883a 	mov	r16,r5
  80b344:	dfc00215 	stw	ra,8(sp)
  80b348:	080c1c40 	call	80c1c4 <__malloc_lock>
  80b34c:	81ffff17 	ldw	r7,-4(r16)
  80b350:	00bfff84 	movi	r2,-2
  80b354:	01002074 	movhi	r4,129
  80b358:	81bffe04 	addi	r6,r16,-8
  80b35c:	3884703a 	and	r2,r7,r2
  80b360:	21011204 	addi	r4,r4,1096
  80b364:	308b883a 	add	r5,r6,r2
  80b368:	2a400117 	ldw	r9,4(r5)
  80b36c:	22000217 	ldw	r8,8(r4)
  80b370:	00ffff04 	movi	r3,-4
  80b374:	48c6703a 	and	r3,r9,r3
  80b378:	2a005726 	beq	r5,r8,80b4d8 <_free_r+0x1ac>
  80b37c:	28c00115 	stw	r3,4(r5)
  80b380:	39c0004c 	andi	r7,r7,1
  80b384:	3800091e 	bne	r7,zero,80b3ac <_free_r+0x80>
  80b388:	823ffe17 	ldw	r8,-8(r16)
  80b38c:	22400204 	addi	r9,r4,8
  80b390:	320dc83a 	sub	r6,r6,r8
  80b394:	31c00217 	ldw	r7,8(r6)
  80b398:	1205883a 	add	r2,r2,r8
  80b39c:	3a406526 	beq	r7,r9,80b534 <_free_r+0x208>
  80b3a0:	32000317 	ldw	r8,12(r6)
  80b3a4:	3a000315 	stw	r8,12(r7)
  80b3a8:	41c00215 	stw	r7,8(r8)
  80b3ac:	28cf883a 	add	r7,r5,r3
  80b3b0:	39c00117 	ldw	r7,4(r7)
  80b3b4:	39c0004c 	andi	r7,r7,1
  80b3b8:	38003a26 	beq	r7,zero,80b4a4 <_free_r+0x178>
  80b3bc:	10c00054 	ori	r3,r2,1
  80b3c0:	30c00115 	stw	r3,4(r6)
  80b3c4:	3087883a 	add	r3,r6,r2
  80b3c8:	18800015 	stw	r2,0(r3)
  80b3cc:	00c07fc4 	movi	r3,511
  80b3d0:	18801936 	bltu	r3,r2,80b438 <_free_r+0x10c>
  80b3d4:	1004d0fa 	srli	r2,r2,3
  80b3d8:	01c00044 	movi	r7,1
  80b3dc:	21400117 	ldw	r5,4(r4)
  80b3e0:	10c00044 	addi	r3,r2,1
  80b3e4:	18c7883a 	add	r3,r3,r3
  80b3e8:	1005d0ba 	srai	r2,r2,2
  80b3ec:	18c7883a 	add	r3,r3,r3
  80b3f0:	18c7883a 	add	r3,r3,r3
  80b3f4:	1907883a 	add	r3,r3,r4
  80b3f8:	3884983a 	sll	r2,r7,r2
  80b3fc:	19c00017 	ldw	r7,0(r3)
  80b400:	1a3ffe04 	addi	r8,r3,-8
  80b404:	1144b03a 	or	r2,r2,r5
  80b408:	32000315 	stw	r8,12(r6)
  80b40c:	31c00215 	stw	r7,8(r6)
  80b410:	20800115 	stw	r2,4(r4)
  80b414:	19800015 	stw	r6,0(r3)
  80b418:	39800315 	stw	r6,12(r7)
  80b41c:	8809883a 	mov	r4,r17
  80b420:	dfc00217 	ldw	ra,8(sp)
  80b424:	dc400117 	ldw	r17,4(sp)
  80b428:	dc000017 	ldw	r16,0(sp)
  80b42c:	dec00304 	addi	sp,sp,12
  80b430:	080c1e81 	jmpi	80c1e8 <__malloc_unlock>
  80b434:	f800283a 	ret
  80b438:	100ad27a 	srli	r5,r2,9
  80b43c:	00c00104 	movi	r3,4
  80b440:	19404a36 	bltu	r3,r5,80b56c <_free_r+0x240>
  80b444:	100ad1ba 	srli	r5,r2,6
  80b448:	28c00e44 	addi	r3,r5,57
  80b44c:	18c7883a 	add	r3,r3,r3
  80b450:	29400e04 	addi	r5,r5,56
  80b454:	18c7883a 	add	r3,r3,r3
  80b458:	18c7883a 	add	r3,r3,r3
  80b45c:	1909883a 	add	r4,r3,r4
  80b460:	20c00017 	ldw	r3,0(r4)
  80b464:	01c02074 	movhi	r7,129
  80b468:	213ffe04 	addi	r4,r4,-8
  80b46c:	39c11204 	addi	r7,r7,1096
  80b470:	20c04426 	beq	r4,r3,80b584 <_free_r+0x258>
  80b474:	01ffff04 	movi	r7,-4
  80b478:	19400117 	ldw	r5,4(r3)
  80b47c:	29ca703a 	and	r5,r5,r7
  80b480:	1140022e 	bgeu	r2,r5,80b48c <_free_r+0x160>
  80b484:	18c00217 	ldw	r3,8(r3)
  80b488:	20fffb1e 	bne	r4,r3,80b478 <__alt_mem_onchip_mem+0xff803478>
  80b48c:	19000317 	ldw	r4,12(r3)
  80b490:	31000315 	stw	r4,12(r6)
  80b494:	30c00215 	stw	r3,8(r6)
  80b498:	21800215 	stw	r6,8(r4)
  80b49c:	19800315 	stw	r6,12(r3)
  80b4a0:	003fde06 	br	80b41c <__alt_mem_onchip_mem+0xff80341c>
  80b4a4:	29c00217 	ldw	r7,8(r5)
  80b4a8:	10c5883a 	add	r2,r2,r3
  80b4ac:	00c02074 	movhi	r3,129
  80b4b0:	18c11404 	addi	r3,r3,1104
  80b4b4:	38c03b26 	beq	r7,r3,80b5a4 <_free_r+0x278>
  80b4b8:	2a000317 	ldw	r8,12(r5)
  80b4bc:	11400054 	ori	r5,r2,1
  80b4c0:	3087883a 	add	r3,r6,r2
  80b4c4:	3a000315 	stw	r8,12(r7)
  80b4c8:	41c00215 	stw	r7,8(r8)
  80b4cc:	31400115 	stw	r5,4(r6)
  80b4d0:	18800015 	stw	r2,0(r3)
  80b4d4:	003fbd06 	br	80b3cc <__alt_mem_onchip_mem+0xff8033cc>
  80b4d8:	39c0004c 	andi	r7,r7,1
  80b4dc:	10c5883a 	add	r2,r2,r3
  80b4e0:	3800071e 	bne	r7,zero,80b500 <_free_r+0x1d4>
  80b4e4:	81fffe17 	ldw	r7,-8(r16)
  80b4e8:	31cdc83a 	sub	r6,r6,r7
  80b4ec:	30c00317 	ldw	r3,12(r6)
  80b4f0:	31400217 	ldw	r5,8(r6)
  80b4f4:	11c5883a 	add	r2,r2,r7
  80b4f8:	28c00315 	stw	r3,12(r5)
  80b4fc:	19400215 	stw	r5,8(r3)
  80b500:	10c00054 	ori	r3,r2,1
  80b504:	30c00115 	stw	r3,4(r6)
  80b508:	00c02074 	movhi	r3,129
  80b50c:	18c71304 	addi	r3,r3,7244
  80b510:	18c00017 	ldw	r3,0(r3)
  80b514:	21800215 	stw	r6,8(r4)
  80b518:	10ffc036 	bltu	r2,r3,80b41c <__alt_mem_onchip_mem+0xff80341c>
  80b51c:	00802074 	movhi	r2,129
  80b520:	108e3b04 	addi	r2,r2,14572
  80b524:	11400017 	ldw	r5,0(r2)
  80b528:	8809883a 	mov	r4,r17
  80b52c:	080b2080 	call	80b208 <_malloc_trim_r>
  80b530:	003fba06 	br	80b41c <__alt_mem_onchip_mem+0xff80341c>
  80b534:	28c9883a 	add	r4,r5,r3
  80b538:	21000117 	ldw	r4,4(r4)
  80b53c:	2100004c 	andi	r4,r4,1
  80b540:	2000391e 	bne	r4,zero,80b628 <_free_r+0x2fc>
  80b544:	29c00217 	ldw	r7,8(r5)
  80b548:	29000317 	ldw	r4,12(r5)
  80b54c:	1885883a 	add	r2,r3,r2
  80b550:	10c00054 	ori	r3,r2,1
  80b554:	39000315 	stw	r4,12(r7)
  80b558:	21c00215 	stw	r7,8(r4)
  80b55c:	30c00115 	stw	r3,4(r6)
  80b560:	308d883a 	add	r6,r6,r2
  80b564:	30800015 	stw	r2,0(r6)
  80b568:	003fac06 	br	80b41c <__alt_mem_onchip_mem+0xff80341c>
  80b56c:	00c00504 	movi	r3,20
  80b570:	19401536 	bltu	r3,r5,80b5c8 <_free_r+0x29c>
  80b574:	28c01704 	addi	r3,r5,92
  80b578:	18c7883a 	add	r3,r3,r3
  80b57c:	294016c4 	addi	r5,r5,91
  80b580:	003fb406 	br	80b454 <__alt_mem_onchip_mem+0xff803454>
  80b584:	280bd0ba 	srai	r5,r5,2
  80b588:	00c00044 	movi	r3,1
  80b58c:	38800117 	ldw	r2,4(r7)
  80b590:	194a983a 	sll	r5,r3,r5
  80b594:	2007883a 	mov	r3,r4
  80b598:	2884b03a 	or	r2,r5,r2
  80b59c:	38800115 	stw	r2,4(r7)
  80b5a0:	003fbb06 	br	80b490 <__alt_mem_onchip_mem+0xff803490>
  80b5a4:	21800515 	stw	r6,20(r4)
  80b5a8:	21800415 	stw	r6,16(r4)
  80b5ac:	10c00054 	ori	r3,r2,1
  80b5b0:	31c00315 	stw	r7,12(r6)
  80b5b4:	31c00215 	stw	r7,8(r6)
  80b5b8:	30c00115 	stw	r3,4(r6)
  80b5bc:	308d883a 	add	r6,r6,r2
  80b5c0:	30800015 	stw	r2,0(r6)
  80b5c4:	003f9506 	br	80b41c <__alt_mem_onchip_mem+0xff80341c>
  80b5c8:	00c01504 	movi	r3,84
  80b5cc:	19400536 	bltu	r3,r5,80b5e4 <_free_r+0x2b8>
  80b5d0:	100ad33a 	srli	r5,r2,12
  80b5d4:	28c01bc4 	addi	r3,r5,111
  80b5d8:	18c7883a 	add	r3,r3,r3
  80b5dc:	29401b84 	addi	r5,r5,110
  80b5e0:	003f9c06 	br	80b454 <__alt_mem_onchip_mem+0xff803454>
  80b5e4:	00c05504 	movi	r3,340
  80b5e8:	19400536 	bltu	r3,r5,80b600 <_free_r+0x2d4>
  80b5ec:	100ad3fa 	srli	r5,r2,15
  80b5f0:	28c01e04 	addi	r3,r5,120
  80b5f4:	18c7883a 	add	r3,r3,r3
  80b5f8:	29401dc4 	addi	r5,r5,119
  80b5fc:	003f9506 	br	80b454 <__alt_mem_onchip_mem+0xff803454>
  80b600:	00c15504 	movi	r3,1364
  80b604:	19400536 	bltu	r3,r5,80b61c <_free_r+0x2f0>
  80b608:	100ad4ba 	srli	r5,r2,18
  80b60c:	28c01f44 	addi	r3,r5,125
  80b610:	18c7883a 	add	r3,r3,r3
  80b614:	29401f04 	addi	r5,r5,124
  80b618:	003f8e06 	br	80b454 <__alt_mem_onchip_mem+0xff803454>
  80b61c:	00c03f84 	movi	r3,254
  80b620:	01401f84 	movi	r5,126
  80b624:	003f8b06 	br	80b454 <__alt_mem_onchip_mem+0xff803454>
  80b628:	10c00054 	ori	r3,r2,1
  80b62c:	30c00115 	stw	r3,4(r6)
  80b630:	308d883a 	add	r6,r6,r2
  80b634:	30800015 	stw	r2,0(r6)
  80b638:	003f7806 	br	80b41c <__alt_mem_onchip_mem+0xff80341c>

0080b63c <_lseek_r>:
  80b63c:	defffd04 	addi	sp,sp,-12
  80b640:	2805883a 	mov	r2,r5
  80b644:	dc000015 	stw	r16,0(sp)
  80b648:	04002074 	movhi	r16,129
  80b64c:	dc400115 	stw	r17,4(sp)
  80b650:	300b883a 	mov	r5,r6
  80b654:	840e3c04 	addi	r16,r16,14576
  80b658:	2023883a 	mov	r17,r4
  80b65c:	380d883a 	mov	r6,r7
  80b660:	1009883a 	mov	r4,r2
  80b664:	dfc00215 	stw	ra,8(sp)
  80b668:	80000015 	stw	zero,0(r16)
  80b66c:	080c0740 	call	80c074 <lseek>
  80b670:	00ffffc4 	movi	r3,-1
  80b674:	10c00526 	beq	r2,r3,80b68c <_lseek_r+0x50>
  80b678:	dfc00217 	ldw	ra,8(sp)
  80b67c:	dc400117 	ldw	r17,4(sp)
  80b680:	dc000017 	ldw	r16,0(sp)
  80b684:	dec00304 	addi	sp,sp,12
  80b688:	f800283a 	ret
  80b68c:	80c00017 	ldw	r3,0(r16)
  80b690:	183ff926 	beq	r3,zero,80b678 <__alt_mem_onchip_mem+0xff803678>
  80b694:	88c00015 	stw	r3,0(r17)
  80b698:	003ff706 	br	80b678 <__alt_mem_onchip_mem+0xff803678>

0080b69c <__smakebuf_r>:
  80b69c:	2880030b 	ldhu	r2,12(r5)
  80b6a0:	10c0008c 	andi	r3,r2,2
  80b6a4:	1800411e 	bne	r3,zero,80b7ac <__smakebuf_r+0x110>
  80b6a8:	deffec04 	addi	sp,sp,-80
  80b6ac:	dc000f15 	stw	r16,60(sp)
  80b6b0:	2821883a 	mov	r16,r5
  80b6b4:	2940038f 	ldh	r5,14(r5)
  80b6b8:	dc401015 	stw	r17,64(sp)
  80b6bc:	dfc01315 	stw	ra,76(sp)
  80b6c0:	dcc01215 	stw	r19,72(sp)
  80b6c4:	dc801115 	stw	r18,68(sp)
  80b6c8:	2023883a 	mov	r17,r4
  80b6cc:	28001c16 	blt	r5,zero,80b740 <__smakebuf_r+0xa4>
  80b6d0:	d80d883a 	mov	r6,sp
  80b6d4:	080b8b80 	call	80b8b8 <_fstat_r>
  80b6d8:	10001816 	blt	r2,zero,80b73c <__smakebuf_r+0xa0>
  80b6dc:	d8800117 	ldw	r2,4(sp)
  80b6e0:	00e00014 	movui	r3,32768
  80b6e4:	10bc000c 	andi	r2,r2,61440
  80b6e8:	14c80020 	cmpeqi	r19,r2,8192
  80b6ec:	10c03726 	beq	r2,r3,80b7cc <__smakebuf_r+0x130>
  80b6f0:	80c0030b 	ldhu	r3,12(r16)
  80b6f4:	18c20014 	ori	r3,r3,2048
  80b6f8:	80c0030d 	sth	r3,12(r16)
  80b6fc:	00c80004 	movi	r3,8192
  80b700:	10c0521e 	bne	r2,r3,80b84c <__smakebuf_r+0x1b0>
  80b704:	8140038f 	ldh	r5,14(r16)
  80b708:	8809883a 	mov	r4,r17
  80b70c:	080b9140 	call	80b914 <_isatty_r>
  80b710:	10004c26 	beq	r2,zero,80b844 <__smakebuf_r+0x1a8>
  80b714:	8080030b 	ldhu	r2,12(r16)
  80b718:	80c010c4 	addi	r3,r16,67
  80b71c:	80c00015 	stw	r3,0(r16)
  80b720:	10800054 	ori	r2,r2,1
  80b724:	8080030d 	sth	r2,12(r16)
  80b728:	00800044 	movi	r2,1
  80b72c:	80c00415 	stw	r3,16(r16)
  80b730:	80800515 	stw	r2,20(r16)
  80b734:	04810004 	movi	r18,1024
  80b738:	00000706 	br	80b758 <__smakebuf_r+0xbc>
  80b73c:	8080030b 	ldhu	r2,12(r16)
  80b740:	10c0200c 	andi	r3,r2,128
  80b744:	18001f1e 	bne	r3,zero,80b7c4 <__smakebuf_r+0x128>
  80b748:	04810004 	movi	r18,1024
  80b74c:	10820014 	ori	r2,r2,2048
  80b750:	8080030d 	sth	r2,12(r16)
  80b754:	0027883a 	mov	r19,zero
  80b758:	900b883a 	mov	r5,r18
  80b75c:	8809883a 	mov	r4,r17
  80b760:	08098a40 	call	8098a4 <_malloc_r>
  80b764:	10002c26 	beq	r2,zero,80b818 <__smakebuf_r+0x17c>
  80b768:	80c0030b 	ldhu	r3,12(r16)
  80b76c:	01002074 	movhi	r4,129
  80b770:	2123b204 	addi	r4,r4,-28984
  80b774:	89000f15 	stw	r4,60(r17)
  80b778:	18c02014 	ori	r3,r3,128
  80b77c:	80c0030d 	sth	r3,12(r16)
  80b780:	80800015 	stw	r2,0(r16)
  80b784:	80800415 	stw	r2,16(r16)
  80b788:	84800515 	stw	r18,20(r16)
  80b78c:	98001a1e 	bne	r19,zero,80b7f8 <__smakebuf_r+0x15c>
  80b790:	dfc01317 	ldw	ra,76(sp)
  80b794:	dcc01217 	ldw	r19,72(sp)
  80b798:	dc801117 	ldw	r18,68(sp)
  80b79c:	dc401017 	ldw	r17,64(sp)
  80b7a0:	dc000f17 	ldw	r16,60(sp)
  80b7a4:	dec01404 	addi	sp,sp,80
  80b7a8:	f800283a 	ret
  80b7ac:	288010c4 	addi	r2,r5,67
  80b7b0:	28800015 	stw	r2,0(r5)
  80b7b4:	28800415 	stw	r2,16(r5)
  80b7b8:	00800044 	movi	r2,1
  80b7bc:	28800515 	stw	r2,20(r5)
  80b7c0:	f800283a 	ret
  80b7c4:	04801004 	movi	r18,64
  80b7c8:	003fe006 	br	80b74c <__alt_mem_onchip_mem+0xff80374c>
  80b7cc:	81000a17 	ldw	r4,40(r16)
  80b7d0:	00c02074 	movhi	r3,129
  80b7d4:	18eafc04 	addi	r3,r3,-21520
  80b7d8:	20ffc51e 	bne	r4,r3,80b6f0 <__alt_mem_onchip_mem+0xff8036f0>
  80b7dc:	8080030b 	ldhu	r2,12(r16)
  80b7e0:	04810004 	movi	r18,1024
  80b7e4:	84801315 	stw	r18,76(r16)
  80b7e8:	1484b03a 	or	r2,r2,r18
  80b7ec:	8080030d 	sth	r2,12(r16)
  80b7f0:	0027883a 	mov	r19,zero
  80b7f4:	003fd806 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80b7f8:	8140038f 	ldh	r5,14(r16)
  80b7fc:	8809883a 	mov	r4,r17
  80b800:	080b9140 	call	80b914 <_isatty_r>
  80b804:	103fe226 	beq	r2,zero,80b790 <__alt_mem_onchip_mem+0xff803790>
  80b808:	8080030b 	ldhu	r2,12(r16)
  80b80c:	10800054 	ori	r2,r2,1
  80b810:	8080030d 	sth	r2,12(r16)
  80b814:	003fde06 	br	80b790 <__alt_mem_onchip_mem+0xff803790>
  80b818:	8080030b 	ldhu	r2,12(r16)
  80b81c:	10c0800c 	andi	r3,r2,512
  80b820:	183fdb1e 	bne	r3,zero,80b790 <__alt_mem_onchip_mem+0xff803790>
  80b824:	10800094 	ori	r2,r2,2
  80b828:	80c010c4 	addi	r3,r16,67
  80b82c:	8080030d 	sth	r2,12(r16)
  80b830:	00800044 	movi	r2,1
  80b834:	80c00015 	stw	r3,0(r16)
  80b838:	80c00415 	stw	r3,16(r16)
  80b83c:	80800515 	stw	r2,20(r16)
  80b840:	003fd306 	br	80b790 <__alt_mem_onchip_mem+0xff803790>
  80b844:	04810004 	movi	r18,1024
  80b848:	003fc306 	br	80b758 <__alt_mem_onchip_mem+0xff803758>
  80b84c:	0027883a 	mov	r19,zero
  80b850:	04810004 	movi	r18,1024
  80b854:	003fc006 	br	80b758 <__alt_mem_onchip_mem+0xff803758>

0080b858 <_read_r>:
  80b858:	defffd04 	addi	sp,sp,-12
  80b85c:	2805883a 	mov	r2,r5
  80b860:	dc000015 	stw	r16,0(sp)
  80b864:	04002074 	movhi	r16,129
  80b868:	dc400115 	stw	r17,4(sp)
  80b86c:	300b883a 	mov	r5,r6
  80b870:	840e3c04 	addi	r16,r16,14576
  80b874:	2023883a 	mov	r17,r4
  80b878:	380d883a 	mov	r6,r7
  80b87c:	1009883a 	mov	r4,r2
  80b880:	dfc00215 	stw	ra,8(sp)
  80b884:	80000015 	stw	zero,0(r16)
  80b888:	080c2480 	call	80c248 <read>
  80b88c:	00ffffc4 	movi	r3,-1
  80b890:	10c00526 	beq	r2,r3,80b8a8 <_read_r+0x50>
  80b894:	dfc00217 	ldw	ra,8(sp)
  80b898:	dc400117 	ldw	r17,4(sp)
  80b89c:	dc000017 	ldw	r16,0(sp)
  80b8a0:	dec00304 	addi	sp,sp,12
  80b8a4:	f800283a 	ret
  80b8a8:	80c00017 	ldw	r3,0(r16)
  80b8ac:	183ff926 	beq	r3,zero,80b894 <__alt_mem_onchip_mem+0xff803894>
  80b8b0:	88c00015 	stw	r3,0(r17)
  80b8b4:	003ff706 	br	80b894 <__alt_mem_onchip_mem+0xff803894>

0080b8b8 <_fstat_r>:
  80b8b8:	defffd04 	addi	sp,sp,-12
  80b8bc:	2805883a 	mov	r2,r5
  80b8c0:	dc000015 	stw	r16,0(sp)
  80b8c4:	04002074 	movhi	r16,129
  80b8c8:	dc400115 	stw	r17,4(sp)
  80b8cc:	840e3c04 	addi	r16,r16,14576
  80b8d0:	2023883a 	mov	r17,r4
  80b8d4:	300b883a 	mov	r5,r6
  80b8d8:	1009883a 	mov	r4,r2
  80b8dc:	dfc00215 	stw	ra,8(sp)
  80b8e0:	80000015 	stw	zero,0(r16)
  80b8e4:	080bdbc0 	call	80bdbc <fstat>
  80b8e8:	00ffffc4 	movi	r3,-1
  80b8ec:	10c00526 	beq	r2,r3,80b904 <_fstat_r+0x4c>
  80b8f0:	dfc00217 	ldw	ra,8(sp)
  80b8f4:	dc400117 	ldw	r17,4(sp)
  80b8f8:	dc000017 	ldw	r16,0(sp)
  80b8fc:	dec00304 	addi	sp,sp,12
  80b900:	f800283a 	ret
  80b904:	80c00017 	ldw	r3,0(r16)
  80b908:	183ff926 	beq	r3,zero,80b8f0 <__alt_mem_onchip_mem+0xff8038f0>
  80b90c:	88c00015 	stw	r3,0(r17)
  80b910:	003ff706 	br	80b8f0 <__alt_mem_onchip_mem+0xff8038f0>

0080b914 <_isatty_r>:
  80b914:	defffd04 	addi	sp,sp,-12
  80b918:	dc000015 	stw	r16,0(sp)
  80b91c:	04002074 	movhi	r16,129
  80b920:	dc400115 	stw	r17,4(sp)
  80b924:	840e3c04 	addi	r16,r16,14576
  80b928:	2023883a 	mov	r17,r4
  80b92c:	2809883a 	mov	r4,r5
  80b930:	dfc00215 	stw	ra,8(sp)
  80b934:	80000015 	stw	zero,0(r16)
  80b938:	080bea80 	call	80bea8 <isatty>
  80b93c:	00ffffc4 	movi	r3,-1
  80b940:	10c00526 	beq	r2,r3,80b958 <_isatty_r+0x44>
  80b944:	dfc00217 	ldw	ra,8(sp)
  80b948:	dc400117 	ldw	r17,4(sp)
  80b94c:	dc000017 	ldw	r16,0(sp)
  80b950:	dec00304 	addi	sp,sp,12
  80b954:	f800283a 	ret
  80b958:	80c00017 	ldw	r3,0(r16)
  80b95c:	183ff926 	beq	r3,zero,80b944 <__alt_mem_onchip_mem+0xff803944>
  80b960:	88c00015 	stw	r3,0(r17)
  80b964:	003ff706 	br	80b944 <__alt_mem_onchip_mem+0xff803944>

0080b968 <__divsi3>:
  80b968:	20001b16 	blt	r4,zero,80b9d8 <__divsi3+0x70>
  80b96c:	000f883a 	mov	r7,zero
  80b970:	28001616 	blt	r5,zero,80b9cc <__divsi3+0x64>
  80b974:	200d883a 	mov	r6,r4
  80b978:	29001a2e 	bgeu	r5,r4,80b9e4 <__divsi3+0x7c>
  80b97c:	00800804 	movi	r2,32
  80b980:	00c00044 	movi	r3,1
  80b984:	00000106 	br	80b98c <__divsi3+0x24>
  80b988:	10000d26 	beq	r2,zero,80b9c0 <__divsi3+0x58>
  80b98c:	294b883a 	add	r5,r5,r5
  80b990:	10bfffc4 	addi	r2,r2,-1
  80b994:	18c7883a 	add	r3,r3,r3
  80b998:	293ffb36 	bltu	r5,r4,80b988 <__alt_mem_onchip_mem+0xff803988>
  80b99c:	0005883a 	mov	r2,zero
  80b9a0:	18000726 	beq	r3,zero,80b9c0 <__divsi3+0x58>
  80b9a4:	0005883a 	mov	r2,zero
  80b9a8:	31400236 	bltu	r6,r5,80b9b4 <__divsi3+0x4c>
  80b9ac:	314dc83a 	sub	r6,r6,r5
  80b9b0:	10c4b03a 	or	r2,r2,r3
  80b9b4:	1806d07a 	srli	r3,r3,1
  80b9b8:	280ad07a 	srli	r5,r5,1
  80b9bc:	183ffa1e 	bne	r3,zero,80b9a8 <__alt_mem_onchip_mem+0xff8039a8>
  80b9c0:	38000126 	beq	r7,zero,80b9c8 <__divsi3+0x60>
  80b9c4:	0085c83a 	sub	r2,zero,r2
  80b9c8:	f800283a 	ret
  80b9cc:	014bc83a 	sub	r5,zero,r5
  80b9d0:	39c0005c 	xori	r7,r7,1
  80b9d4:	003fe706 	br	80b974 <__alt_mem_onchip_mem+0xff803974>
  80b9d8:	0109c83a 	sub	r4,zero,r4
  80b9dc:	01c00044 	movi	r7,1
  80b9e0:	003fe306 	br	80b970 <__alt_mem_onchip_mem+0xff803970>
  80b9e4:	00c00044 	movi	r3,1
  80b9e8:	003fee06 	br	80b9a4 <__alt_mem_onchip_mem+0xff8039a4>

0080b9ec <__modsi3>:
  80b9ec:	20001716 	blt	r4,zero,80ba4c <__modsi3+0x60>
  80b9f0:	000f883a 	mov	r7,zero
  80b9f4:	2005883a 	mov	r2,r4
  80b9f8:	28001216 	blt	r5,zero,80ba44 <__modsi3+0x58>
  80b9fc:	2900162e 	bgeu	r5,r4,80ba58 <__modsi3+0x6c>
  80ba00:	01800804 	movi	r6,32
  80ba04:	00c00044 	movi	r3,1
  80ba08:	00000106 	br	80ba10 <__modsi3+0x24>
  80ba0c:	30000a26 	beq	r6,zero,80ba38 <__modsi3+0x4c>
  80ba10:	294b883a 	add	r5,r5,r5
  80ba14:	31bfffc4 	addi	r6,r6,-1
  80ba18:	18c7883a 	add	r3,r3,r3
  80ba1c:	293ffb36 	bltu	r5,r4,80ba0c <__alt_mem_onchip_mem+0xff803a0c>
  80ba20:	18000526 	beq	r3,zero,80ba38 <__modsi3+0x4c>
  80ba24:	1806d07a 	srli	r3,r3,1
  80ba28:	11400136 	bltu	r2,r5,80ba30 <__modsi3+0x44>
  80ba2c:	1145c83a 	sub	r2,r2,r5
  80ba30:	280ad07a 	srli	r5,r5,1
  80ba34:	183ffb1e 	bne	r3,zero,80ba24 <__alt_mem_onchip_mem+0xff803a24>
  80ba38:	38000126 	beq	r7,zero,80ba40 <__modsi3+0x54>
  80ba3c:	0085c83a 	sub	r2,zero,r2
  80ba40:	f800283a 	ret
  80ba44:	014bc83a 	sub	r5,zero,r5
  80ba48:	003fec06 	br	80b9fc <__alt_mem_onchip_mem+0xff8039fc>
  80ba4c:	0109c83a 	sub	r4,zero,r4
  80ba50:	01c00044 	movi	r7,1
  80ba54:	003fe706 	br	80b9f4 <__alt_mem_onchip_mem+0xff8039f4>
  80ba58:	00c00044 	movi	r3,1
  80ba5c:	003ff106 	br	80ba24 <__alt_mem_onchip_mem+0xff803a24>

0080ba60 <__udivsi3>:
  80ba60:	200d883a 	mov	r6,r4
  80ba64:	2900152e 	bgeu	r5,r4,80babc <__udivsi3+0x5c>
  80ba68:	28001416 	blt	r5,zero,80babc <__udivsi3+0x5c>
  80ba6c:	00800804 	movi	r2,32
  80ba70:	00c00044 	movi	r3,1
  80ba74:	00000206 	br	80ba80 <__udivsi3+0x20>
  80ba78:	10000e26 	beq	r2,zero,80bab4 <__udivsi3+0x54>
  80ba7c:	28000516 	blt	r5,zero,80ba94 <__udivsi3+0x34>
  80ba80:	294b883a 	add	r5,r5,r5
  80ba84:	10bfffc4 	addi	r2,r2,-1
  80ba88:	18c7883a 	add	r3,r3,r3
  80ba8c:	293ffa36 	bltu	r5,r4,80ba78 <__alt_mem_onchip_mem+0xff803a78>
  80ba90:	18000826 	beq	r3,zero,80bab4 <__udivsi3+0x54>
  80ba94:	0005883a 	mov	r2,zero
  80ba98:	31400236 	bltu	r6,r5,80baa4 <__udivsi3+0x44>
  80ba9c:	314dc83a 	sub	r6,r6,r5
  80baa0:	10c4b03a 	or	r2,r2,r3
  80baa4:	1806d07a 	srli	r3,r3,1
  80baa8:	280ad07a 	srli	r5,r5,1
  80baac:	183ffa1e 	bne	r3,zero,80ba98 <__alt_mem_onchip_mem+0xff803a98>
  80bab0:	f800283a 	ret
  80bab4:	0005883a 	mov	r2,zero
  80bab8:	f800283a 	ret
  80babc:	00c00044 	movi	r3,1
  80bac0:	003ff406 	br	80ba94 <__alt_mem_onchip_mem+0xff803a94>

0080bac4 <__umodsi3>:
  80bac4:	2005883a 	mov	r2,r4
  80bac8:	2900122e 	bgeu	r5,r4,80bb14 <__umodsi3+0x50>
  80bacc:	28001116 	blt	r5,zero,80bb14 <__umodsi3+0x50>
  80bad0:	01800804 	movi	r6,32
  80bad4:	00c00044 	movi	r3,1
  80bad8:	00000206 	br	80bae4 <__umodsi3+0x20>
  80badc:	30000c26 	beq	r6,zero,80bb10 <__umodsi3+0x4c>
  80bae0:	28000516 	blt	r5,zero,80baf8 <__umodsi3+0x34>
  80bae4:	294b883a 	add	r5,r5,r5
  80bae8:	31bfffc4 	addi	r6,r6,-1
  80baec:	18c7883a 	add	r3,r3,r3
  80baf0:	293ffa36 	bltu	r5,r4,80badc <__alt_mem_onchip_mem+0xff803adc>
  80baf4:	18000626 	beq	r3,zero,80bb10 <__umodsi3+0x4c>
  80baf8:	1806d07a 	srli	r3,r3,1
  80bafc:	11400136 	bltu	r2,r5,80bb04 <__umodsi3+0x40>
  80bb00:	1145c83a 	sub	r2,r2,r5
  80bb04:	280ad07a 	srli	r5,r5,1
  80bb08:	183ffb1e 	bne	r3,zero,80baf8 <__alt_mem_onchip_mem+0xff803af8>
  80bb0c:	f800283a 	ret
  80bb10:	f800283a 	ret
  80bb14:	00c00044 	movi	r3,1
  80bb18:	003ff706 	br	80baf8 <__alt_mem_onchip_mem+0xff803af8>

0080bb1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80bb1c:	defff504 	addi	sp,sp,-44
  80bb20:	df000a15 	stw	fp,40(sp)
  80bb24:	df000a04 	addi	fp,sp,40
  80bb28:	e13ffc15 	stw	r4,-16(fp)
  80bb2c:	e17ffd15 	stw	r5,-12(fp)
  80bb30:	e1bffe15 	stw	r6,-8(fp)
  80bb34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80bb38:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80bb3c:	d0a73117 	ldw	r2,-25404(gp)
  
  if (alt_ticks_per_second ())
  80bb40:	10003c26 	beq	r2,zero,80bc34 <alt_alarm_start+0x118>
  {
    if (alarm)
  80bb44:	e0bffc17 	ldw	r2,-16(fp)
  80bb48:	10003826 	beq	r2,zero,80bc2c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80bb4c:	e0bffc17 	ldw	r2,-16(fp)
  80bb50:	e0fffe17 	ldw	r3,-8(fp)
  80bb54:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80bb58:	e0bffc17 	ldw	r2,-16(fp)
  80bb5c:	e0ffff17 	ldw	r3,-4(fp)
  80bb60:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb64:	0005303a 	rdctl	r2,status
  80bb68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb6c:	e0fff917 	ldw	r3,-28(fp)
  80bb70:	00bfff84 	movi	r2,-2
  80bb74:	1884703a 	and	r2,r3,r2
  80bb78:	1001703a 	wrctl	status,r2
  
  return context;
  80bb7c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80bb80:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80bb84:	d0a73217 	ldw	r2,-25400(gp)
      
      current_nticks = alt_nticks();
  80bb88:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80bb8c:	e0fffd17 	ldw	r3,-12(fp)
  80bb90:	e0bff617 	ldw	r2,-40(fp)
  80bb94:	1885883a 	add	r2,r3,r2
  80bb98:	10c00044 	addi	r3,r2,1
  80bb9c:	e0bffc17 	ldw	r2,-16(fp)
  80bba0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80bba4:	e0bffc17 	ldw	r2,-16(fp)
  80bba8:	10c00217 	ldw	r3,8(r2)
  80bbac:	e0bff617 	ldw	r2,-40(fp)
  80bbb0:	1880042e 	bgeu	r3,r2,80bbc4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80bbb4:	e0bffc17 	ldw	r2,-16(fp)
  80bbb8:	00c00044 	movi	r3,1
  80bbbc:	10c00405 	stb	r3,16(r2)
  80bbc0:	00000206 	br	80bbcc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80bbc4:	e0bffc17 	ldw	r2,-16(fp)
  80bbc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80bbcc:	e0bffc17 	ldw	r2,-16(fp)
  80bbd0:	d0e00c04 	addi	r3,gp,-32720
  80bbd4:	e0fffa15 	stw	r3,-24(fp)
  80bbd8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80bbdc:	e0bffb17 	ldw	r2,-20(fp)
  80bbe0:	e0fffa17 	ldw	r3,-24(fp)
  80bbe4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80bbe8:	e0bffa17 	ldw	r2,-24(fp)
  80bbec:	10c00017 	ldw	r3,0(r2)
  80bbf0:	e0bffb17 	ldw	r2,-20(fp)
  80bbf4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80bbf8:	e0bffa17 	ldw	r2,-24(fp)
  80bbfc:	10800017 	ldw	r2,0(r2)
  80bc00:	e0fffb17 	ldw	r3,-20(fp)
  80bc04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80bc08:	e0bffa17 	ldw	r2,-24(fp)
  80bc0c:	e0fffb17 	ldw	r3,-20(fp)
  80bc10:	10c00015 	stw	r3,0(r2)
  80bc14:	e0bff817 	ldw	r2,-32(fp)
  80bc18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc1c:	e0bff717 	ldw	r2,-36(fp)
  80bc20:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80bc24:	0005883a 	mov	r2,zero
  80bc28:	00000306 	br	80bc38 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80bc2c:	00bffa84 	movi	r2,-22
  80bc30:	00000106 	br	80bc38 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80bc34:	00bfde84 	movi	r2,-134
  }
}
  80bc38:	e037883a 	mov	sp,fp
  80bc3c:	df000017 	ldw	fp,0(sp)
  80bc40:	dec00104 	addi	sp,sp,4
  80bc44:	f800283a 	ret

0080bc48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bc48:	defffe04 	addi	sp,sp,-8
  80bc4c:	dfc00115 	stw	ra,4(sp)
  80bc50:	df000015 	stw	fp,0(sp)
  80bc54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80bc58:	d0a00a17 	ldw	r2,-32728(gp)
  80bc5c:	10000326 	beq	r2,zero,80bc6c <alt_get_errno+0x24>
  80bc60:	d0a00a17 	ldw	r2,-32728(gp)
  80bc64:	103ee83a 	callr	r2
  80bc68:	00000106 	br	80bc70 <alt_get_errno+0x28>
  80bc6c:	d0a72d04 	addi	r2,gp,-25420
}
  80bc70:	e037883a 	mov	sp,fp
  80bc74:	dfc00117 	ldw	ra,4(sp)
  80bc78:	df000017 	ldw	fp,0(sp)
  80bc7c:	dec00204 	addi	sp,sp,8
  80bc80:	f800283a 	ret

0080bc84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80bc84:	defffb04 	addi	sp,sp,-20
  80bc88:	dfc00415 	stw	ra,16(sp)
  80bc8c:	df000315 	stw	fp,12(sp)
  80bc90:	df000304 	addi	fp,sp,12
  80bc94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80bc98:	e0bfff17 	ldw	r2,-4(fp)
  80bc9c:	10000616 	blt	r2,zero,80bcb8 <close+0x34>
  80bca0:	e0bfff17 	ldw	r2,-4(fp)
  80bca4:	10c00324 	muli	r3,r2,12
  80bca8:	00802074 	movhi	r2,129
  80bcac:	10821e04 	addi	r2,r2,2168
  80bcb0:	1885883a 	add	r2,r3,r2
  80bcb4:	00000106 	br	80bcbc <close+0x38>
  80bcb8:	0005883a 	mov	r2,zero
  80bcbc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80bcc0:	e0bffd17 	ldw	r2,-12(fp)
  80bcc4:	10001926 	beq	r2,zero,80bd2c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80bcc8:	e0bffd17 	ldw	r2,-12(fp)
  80bccc:	10800017 	ldw	r2,0(r2)
  80bcd0:	10800417 	ldw	r2,16(r2)
  80bcd4:	10000626 	beq	r2,zero,80bcf0 <close+0x6c>
  80bcd8:	e0bffd17 	ldw	r2,-12(fp)
  80bcdc:	10800017 	ldw	r2,0(r2)
  80bce0:	10800417 	ldw	r2,16(r2)
  80bce4:	e13ffd17 	ldw	r4,-12(fp)
  80bce8:	103ee83a 	callr	r2
  80bcec:	00000106 	br	80bcf4 <close+0x70>
  80bcf0:	0005883a 	mov	r2,zero
  80bcf4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80bcf8:	e13fff17 	ldw	r4,-4(fp)
  80bcfc:	080c3440 	call	80c344 <alt_release_fd>
    if (rval < 0)
  80bd00:	e0bffe17 	ldw	r2,-8(fp)
  80bd04:	1000070e 	bge	r2,zero,80bd24 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80bd08:	080bc480 	call	80bc48 <alt_get_errno>
  80bd0c:	1007883a 	mov	r3,r2
  80bd10:	e0bffe17 	ldw	r2,-8(fp)
  80bd14:	0085c83a 	sub	r2,zero,r2
  80bd18:	18800015 	stw	r2,0(r3)
      return -1;
  80bd1c:	00bfffc4 	movi	r2,-1
  80bd20:	00000706 	br	80bd40 <close+0xbc>
    }
    return 0;
  80bd24:	0005883a 	mov	r2,zero
  80bd28:	00000506 	br	80bd40 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80bd2c:	080bc480 	call	80bc48 <alt_get_errno>
  80bd30:	1007883a 	mov	r3,r2
  80bd34:	00801444 	movi	r2,81
  80bd38:	18800015 	stw	r2,0(r3)
    return -1;
  80bd3c:	00bfffc4 	movi	r2,-1
  }
}
  80bd40:	e037883a 	mov	sp,fp
  80bd44:	dfc00117 	ldw	ra,4(sp)
  80bd48:	df000017 	ldw	fp,0(sp)
  80bd4c:	dec00204 	addi	sp,sp,8
  80bd50:	f800283a 	ret

0080bd54 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80bd54:	defffc04 	addi	sp,sp,-16
  80bd58:	df000315 	stw	fp,12(sp)
  80bd5c:	df000304 	addi	fp,sp,12
  80bd60:	e13ffd15 	stw	r4,-12(fp)
  80bd64:	e17ffe15 	stw	r5,-8(fp)
  80bd68:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80bd6c:	e0bfff17 	ldw	r2,-4(fp)
}
  80bd70:	e037883a 	mov	sp,fp
  80bd74:	df000017 	ldw	fp,0(sp)
  80bd78:	dec00104 	addi	sp,sp,4
  80bd7c:	f800283a 	ret

0080bd80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bd80:	defffe04 	addi	sp,sp,-8
  80bd84:	dfc00115 	stw	ra,4(sp)
  80bd88:	df000015 	stw	fp,0(sp)
  80bd8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80bd90:	d0a00a17 	ldw	r2,-32728(gp)
  80bd94:	10000326 	beq	r2,zero,80bda4 <alt_get_errno+0x24>
  80bd98:	d0a00a17 	ldw	r2,-32728(gp)
  80bd9c:	103ee83a 	callr	r2
  80bda0:	00000106 	br	80bda8 <alt_get_errno+0x28>
  80bda4:	d0a72d04 	addi	r2,gp,-25420
}
  80bda8:	e037883a 	mov	sp,fp
  80bdac:	dfc00117 	ldw	ra,4(sp)
  80bdb0:	df000017 	ldw	fp,0(sp)
  80bdb4:	dec00204 	addi	sp,sp,8
  80bdb8:	f800283a 	ret

0080bdbc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80bdbc:	defffb04 	addi	sp,sp,-20
  80bdc0:	dfc00415 	stw	ra,16(sp)
  80bdc4:	df000315 	stw	fp,12(sp)
  80bdc8:	df000304 	addi	fp,sp,12
  80bdcc:	e13ffe15 	stw	r4,-8(fp)
  80bdd0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80bdd4:	e0bffe17 	ldw	r2,-8(fp)
  80bdd8:	10000616 	blt	r2,zero,80bdf4 <fstat+0x38>
  80bddc:	e0bffe17 	ldw	r2,-8(fp)
  80bde0:	10c00324 	muli	r3,r2,12
  80bde4:	00802074 	movhi	r2,129
  80bde8:	10821e04 	addi	r2,r2,2168
  80bdec:	1885883a 	add	r2,r3,r2
  80bdf0:	00000106 	br	80bdf8 <fstat+0x3c>
  80bdf4:	0005883a 	mov	r2,zero
  80bdf8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80bdfc:	e0bffd17 	ldw	r2,-12(fp)
  80be00:	10001026 	beq	r2,zero,80be44 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80be04:	e0bffd17 	ldw	r2,-12(fp)
  80be08:	10800017 	ldw	r2,0(r2)
  80be0c:	10800817 	ldw	r2,32(r2)
  80be10:	10000726 	beq	r2,zero,80be30 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80be14:	e0bffd17 	ldw	r2,-12(fp)
  80be18:	10800017 	ldw	r2,0(r2)
  80be1c:	10800817 	ldw	r2,32(r2)
  80be20:	e17fff17 	ldw	r5,-4(fp)
  80be24:	e13ffd17 	ldw	r4,-12(fp)
  80be28:	103ee83a 	callr	r2
  80be2c:	00000a06 	br	80be58 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80be30:	e0bfff17 	ldw	r2,-4(fp)
  80be34:	00c80004 	movi	r3,8192
  80be38:	10c00115 	stw	r3,4(r2)
      return 0;
  80be3c:	0005883a 	mov	r2,zero
  80be40:	00000506 	br	80be58 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80be44:	080bd800 	call	80bd80 <alt_get_errno>
  80be48:	1007883a 	mov	r3,r2
  80be4c:	00801444 	movi	r2,81
  80be50:	18800015 	stw	r2,0(r3)
    return -1;
  80be54:	00bfffc4 	movi	r2,-1
  }
}
  80be58:	e037883a 	mov	sp,fp
  80be5c:	dfc00117 	ldw	ra,4(sp)
  80be60:	df000017 	ldw	fp,0(sp)
  80be64:	dec00204 	addi	sp,sp,8
  80be68:	f800283a 	ret

0080be6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80be6c:	defffe04 	addi	sp,sp,-8
  80be70:	dfc00115 	stw	ra,4(sp)
  80be74:	df000015 	stw	fp,0(sp)
  80be78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80be7c:	d0a00a17 	ldw	r2,-32728(gp)
  80be80:	10000326 	beq	r2,zero,80be90 <alt_get_errno+0x24>
  80be84:	d0a00a17 	ldw	r2,-32728(gp)
  80be88:	103ee83a 	callr	r2
  80be8c:	00000106 	br	80be94 <alt_get_errno+0x28>
  80be90:	d0a72d04 	addi	r2,gp,-25420
}
  80be94:	e037883a 	mov	sp,fp
  80be98:	dfc00117 	ldw	ra,4(sp)
  80be9c:	df000017 	ldw	fp,0(sp)
  80bea0:	dec00204 	addi	sp,sp,8
  80bea4:	f800283a 	ret

0080bea8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80bea8:	deffed04 	addi	sp,sp,-76
  80beac:	dfc01215 	stw	ra,72(sp)
  80beb0:	df001115 	stw	fp,68(sp)
  80beb4:	df001104 	addi	fp,sp,68
  80beb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80bebc:	e0bfff17 	ldw	r2,-4(fp)
  80bec0:	10000616 	blt	r2,zero,80bedc <isatty+0x34>
  80bec4:	e0bfff17 	ldw	r2,-4(fp)
  80bec8:	10c00324 	muli	r3,r2,12
  80becc:	00802074 	movhi	r2,129
  80bed0:	10821e04 	addi	r2,r2,2168
  80bed4:	1885883a 	add	r2,r3,r2
  80bed8:	00000106 	br	80bee0 <isatty+0x38>
  80bedc:	0005883a 	mov	r2,zero
  80bee0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80bee4:	e0bfef17 	ldw	r2,-68(fp)
  80bee8:	10000e26 	beq	r2,zero,80bf24 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80beec:	e0bfef17 	ldw	r2,-68(fp)
  80bef0:	10800017 	ldw	r2,0(r2)
  80bef4:	10800817 	ldw	r2,32(r2)
  80bef8:	1000021e 	bne	r2,zero,80bf04 <isatty+0x5c>
    {
      return 1;
  80befc:	00800044 	movi	r2,1
  80bf00:	00000d06 	br	80bf38 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80bf04:	e0bff004 	addi	r2,fp,-64
  80bf08:	100b883a 	mov	r5,r2
  80bf0c:	e13fff17 	ldw	r4,-4(fp)
  80bf10:	080bdbc0 	call	80bdbc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80bf14:	e0bff117 	ldw	r2,-60(fp)
  80bf18:	10880020 	cmpeqi	r2,r2,8192
  80bf1c:	10803fcc 	andi	r2,r2,255
  80bf20:	00000506 	br	80bf38 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80bf24:	080be6c0 	call	80be6c <alt_get_errno>
  80bf28:	1007883a 	mov	r3,r2
  80bf2c:	00801444 	movi	r2,81
  80bf30:	18800015 	stw	r2,0(r3)
    return 0;
  80bf34:	0005883a 	mov	r2,zero
  }
}
  80bf38:	e037883a 	mov	sp,fp
  80bf3c:	dfc00117 	ldw	ra,4(sp)
  80bf40:	df000017 	ldw	fp,0(sp)
  80bf44:	dec00204 	addi	sp,sp,8
  80bf48:	f800283a 	ret

0080bf4c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80bf4c:	defffc04 	addi	sp,sp,-16
  80bf50:	df000315 	stw	fp,12(sp)
  80bf54:	df000304 	addi	fp,sp,12
  80bf58:	e13ffd15 	stw	r4,-12(fp)
  80bf5c:	e17ffe15 	stw	r5,-8(fp)
  80bf60:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80bf64:	e0fffe17 	ldw	r3,-8(fp)
  80bf68:	e0bffd17 	ldw	r2,-12(fp)
  80bf6c:	18800c26 	beq	r3,r2,80bfa0 <alt_load_section+0x54>
  {
    while( to != end )
  80bf70:	00000806 	br	80bf94 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80bf74:	e0bffe17 	ldw	r2,-8(fp)
  80bf78:	10c00104 	addi	r3,r2,4
  80bf7c:	e0fffe15 	stw	r3,-8(fp)
  80bf80:	e0fffd17 	ldw	r3,-12(fp)
  80bf84:	19000104 	addi	r4,r3,4
  80bf88:	e13ffd15 	stw	r4,-12(fp)
  80bf8c:	18c00017 	ldw	r3,0(r3)
  80bf90:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80bf94:	e0fffe17 	ldw	r3,-8(fp)
  80bf98:	e0bfff17 	ldw	r2,-4(fp)
  80bf9c:	18bff51e 	bne	r3,r2,80bf74 <__alt_mem_onchip_mem+0xff803f74>
    {
      *to++ = *from++;
    }
  }
}
  80bfa0:	0001883a 	nop
  80bfa4:	e037883a 	mov	sp,fp
  80bfa8:	df000017 	ldw	fp,0(sp)
  80bfac:	dec00104 	addi	sp,sp,4
  80bfb0:	f800283a 	ret

0080bfb4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80bfb4:	defffe04 	addi	sp,sp,-8
  80bfb8:	dfc00115 	stw	ra,4(sp)
  80bfbc:	df000015 	stw	fp,0(sp)
  80bfc0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80bfc4:	01802074 	movhi	r6,129
  80bfc8:	31872004 	addi	r6,r6,7296
  80bfcc:	01402074 	movhi	r5,129
  80bfd0:	29400904 	addi	r5,r5,36
  80bfd4:	01002074 	movhi	r4,129
  80bfd8:	21072004 	addi	r4,r4,7296
  80bfdc:	080bf4c0 	call	80bf4c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80bfe0:	01802034 	movhi	r6,128
  80bfe4:	31809104 	addi	r6,r6,580
  80bfe8:	01402034 	movhi	r5,128
  80bfec:	29400804 	addi	r5,r5,32
  80bff0:	01002034 	movhi	r4,128
  80bff4:	21000804 	addi	r4,r4,32
  80bff8:	080bf4c0 	call	80bf4c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80bffc:	01802074 	movhi	r6,129
  80c000:	31800904 	addi	r6,r6,36
  80c004:	01402074 	movhi	r5,129
  80c008:	297f0f04 	addi	r5,r5,-964
  80c00c:	01002074 	movhi	r4,129
  80c010:	213f0f04 	addi	r4,r4,-964
  80c014:	080bf4c0 	call	80bf4c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80c018:	080eb440 	call	80eb44 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80c01c:	080ed2c0 	call	80ed2c <alt_icache_flush_all>
}
  80c020:	0001883a 	nop
  80c024:	e037883a 	mov	sp,fp
  80c028:	dfc00117 	ldw	ra,4(sp)
  80c02c:	df000017 	ldw	fp,0(sp)
  80c030:	dec00204 	addi	sp,sp,8
  80c034:	f800283a 	ret

0080c038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c038:	defffe04 	addi	sp,sp,-8
  80c03c:	dfc00115 	stw	ra,4(sp)
  80c040:	df000015 	stw	fp,0(sp)
  80c044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c048:	d0a00a17 	ldw	r2,-32728(gp)
  80c04c:	10000326 	beq	r2,zero,80c05c <alt_get_errno+0x24>
  80c050:	d0a00a17 	ldw	r2,-32728(gp)
  80c054:	103ee83a 	callr	r2
  80c058:	00000106 	br	80c060 <alt_get_errno+0x28>
  80c05c:	d0a72d04 	addi	r2,gp,-25420
}
  80c060:	e037883a 	mov	sp,fp
  80c064:	dfc00117 	ldw	ra,4(sp)
  80c068:	df000017 	ldw	fp,0(sp)
  80c06c:	dec00204 	addi	sp,sp,8
  80c070:	f800283a 	ret

0080c074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80c074:	defff904 	addi	sp,sp,-28
  80c078:	dfc00615 	stw	ra,24(sp)
  80c07c:	df000515 	stw	fp,20(sp)
  80c080:	df000504 	addi	fp,sp,20
  80c084:	e13ffd15 	stw	r4,-12(fp)
  80c088:	e17ffe15 	stw	r5,-8(fp)
  80c08c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80c090:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c094:	e0bffd17 	ldw	r2,-12(fp)
  80c098:	10000616 	blt	r2,zero,80c0b4 <lseek+0x40>
  80c09c:	e0bffd17 	ldw	r2,-12(fp)
  80c0a0:	10c00324 	muli	r3,r2,12
  80c0a4:	00802074 	movhi	r2,129
  80c0a8:	10821e04 	addi	r2,r2,2168
  80c0ac:	1885883a 	add	r2,r3,r2
  80c0b0:	00000106 	br	80c0b8 <lseek+0x44>
  80c0b4:	0005883a 	mov	r2,zero
  80c0b8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80c0bc:	e0bffc17 	ldw	r2,-16(fp)
  80c0c0:	10001026 	beq	r2,zero,80c104 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c0c4:	e0bffc17 	ldw	r2,-16(fp)
  80c0c8:	10800017 	ldw	r2,0(r2)
  80c0cc:	10800717 	ldw	r2,28(r2)
  80c0d0:	10000926 	beq	r2,zero,80c0f8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80c0d4:	e0bffc17 	ldw	r2,-16(fp)
  80c0d8:	10800017 	ldw	r2,0(r2)
  80c0dc:	10800717 	ldw	r2,28(r2)
  80c0e0:	e1bfff17 	ldw	r6,-4(fp)
  80c0e4:	e17ffe17 	ldw	r5,-8(fp)
  80c0e8:	e13ffc17 	ldw	r4,-16(fp)
  80c0ec:	103ee83a 	callr	r2
  80c0f0:	e0bffb15 	stw	r2,-20(fp)
  80c0f4:	00000506 	br	80c10c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80c0f8:	00bfde84 	movi	r2,-134
  80c0fc:	e0bffb15 	stw	r2,-20(fp)
  80c100:	00000206 	br	80c10c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80c104:	00bfebc4 	movi	r2,-81
  80c108:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80c10c:	e0bffb17 	ldw	r2,-20(fp)
  80c110:	1000070e 	bge	r2,zero,80c130 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80c114:	080c0380 	call	80c038 <alt_get_errno>
  80c118:	1007883a 	mov	r3,r2
  80c11c:	e0bffb17 	ldw	r2,-20(fp)
  80c120:	0085c83a 	sub	r2,zero,r2
  80c124:	18800015 	stw	r2,0(r3)
    rc = -1;
  80c128:	00bfffc4 	movi	r2,-1
  80c12c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80c130:	e0bffb17 	ldw	r2,-20(fp)
}
  80c134:	e037883a 	mov	sp,fp
  80c138:	dfc00117 	ldw	ra,4(sp)
  80c13c:	df000017 	ldw	fp,0(sp)
  80c140:	dec00204 	addi	sp,sp,8
  80c144:	f800283a 	ret

0080c148 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c148:	defffd04 	addi	sp,sp,-12
  80c14c:	dfc00215 	stw	ra,8(sp)
  80c150:	df000115 	stw	fp,4(sp)
  80c154:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c158:	0009883a 	mov	r4,zero
  80c15c:	080c7640 	call	80c764 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80c160:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80c164:	080c79c0 	call	80c79c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80c168:	01802074 	movhi	r6,129
  80c16c:	31bf5b04 	addi	r6,r6,-660
  80c170:	01402074 	movhi	r5,129
  80c174:	297f5b04 	addi	r5,r5,-660
  80c178:	01002074 	movhi	r4,129
  80c17c:	213f5b04 	addi	r4,r4,-660
  80c180:	080f0c40 	call	80f0c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80c184:	080ec6c0 	call	80ec6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80c188:	01002074 	movhi	r4,129
  80c18c:	213b3304 	addi	r4,r4,-4916
  80c190:	080f8a80 	call	80f8a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80c194:	d0a72e17 	ldw	r2,-25416(gp)
  80c198:	d0e72f17 	ldw	r3,-25412(gp)
  80c19c:	d1273017 	ldw	r4,-25408(gp)
  80c1a0:	200d883a 	mov	r6,r4
  80c1a4:	180b883a 	mov	r5,r3
  80c1a8:	1009883a 	mov	r4,r2
  80c1ac:	08005d80 	call	8005d8 <main>
  80c1b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80c1b4:	01000044 	movi	r4,1
  80c1b8:	080bc840 	call	80bc84 <close>
  exit (result);
  80c1bc:	e13fff17 	ldw	r4,-4(fp)
  80c1c0:	080f8bc0 	call	80f8bc <exit>

0080c1c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80c1c4:	defffe04 	addi	sp,sp,-8
  80c1c8:	df000115 	stw	fp,4(sp)
  80c1cc:	df000104 	addi	fp,sp,4
  80c1d0:	e13fff15 	stw	r4,-4(fp)
}
  80c1d4:	0001883a 	nop
  80c1d8:	e037883a 	mov	sp,fp
  80c1dc:	df000017 	ldw	fp,0(sp)
  80c1e0:	dec00104 	addi	sp,sp,4
  80c1e4:	f800283a 	ret

0080c1e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80c1e8:	defffe04 	addi	sp,sp,-8
  80c1ec:	df000115 	stw	fp,4(sp)
  80c1f0:	df000104 	addi	fp,sp,4
  80c1f4:	e13fff15 	stw	r4,-4(fp)
}
  80c1f8:	0001883a 	nop
  80c1fc:	e037883a 	mov	sp,fp
  80c200:	df000017 	ldw	fp,0(sp)
  80c204:	dec00104 	addi	sp,sp,4
  80c208:	f800283a 	ret

0080c20c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c20c:	defffe04 	addi	sp,sp,-8
  80c210:	dfc00115 	stw	ra,4(sp)
  80c214:	df000015 	stw	fp,0(sp)
  80c218:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c21c:	d0a00a17 	ldw	r2,-32728(gp)
  80c220:	10000326 	beq	r2,zero,80c230 <alt_get_errno+0x24>
  80c224:	d0a00a17 	ldw	r2,-32728(gp)
  80c228:	103ee83a 	callr	r2
  80c22c:	00000106 	br	80c234 <alt_get_errno+0x28>
  80c230:	d0a72d04 	addi	r2,gp,-25420
}
  80c234:	e037883a 	mov	sp,fp
  80c238:	dfc00117 	ldw	ra,4(sp)
  80c23c:	df000017 	ldw	fp,0(sp)
  80c240:	dec00204 	addi	sp,sp,8
  80c244:	f800283a 	ret

0080c248 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80c248:	defff904 	addi	sp,sp,-28
  80c24c:	dfc00615 	stw	ra,24(sp)
  80c250:	df000515 	stw	fp,20(sp)
  80c254:	df000504 	addi	fp,sp,20
  80c258:	e13ffd15 	stw	r4,-12(fp)
  80c25c:	e17ffe15 	stw	r5,-8(fp)
  80c260:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c264:	e0bffd17 	ldw	r2,-12(fp)
  80c268:	10000616 	blt	r2,zero,80c284 <read+0x3c>
  80c26c:	e0bffd17 	ldw	r2,-12(fp)
  80c270:	10c00324 	muli	r3,r2,12
  80c274:	00802074 	movhi	r2,129
  80c278:	10821e04 	addi	r2,r2,2168
  80c27c:	1885883a 	add	r2,r3,r2
  80c280:	00000106 	br	80c288 <read+0x40>
  80c284:	0005883a 	mov	r2,zero
  80c288:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c28c:	e0bffb17 	ldw	r2,-20(fp)
  80c290:	10002226 	beq	r2,zero,80c31c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c294:	e0bffb17 	ldw	r2,-20(fp)
  80c298:	10800217 	ldw	r2,8(r2)
  80c29c:	108000cc 	andi	r2,r2,3
  80c2a0:	10800060 	cmpeqi	r2,r2,1
  80c2a4:	1000181e 	bne	r2,zero,80c308 <read+0xc0>
        (fd->dev->read))
  80c2a8:	e0bffb17 	ldw	r2,-20(fp)
  80c2ac:	10800017 	ldw	r2,0(r2)
  80c2b0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c2b4:	10001426 	beq	r2,zero,80c308 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80c2b8:	e0bffb17 	ldw	r2,-20(fp)
  80c2bc:	10800017 	ldw	r2,0(r2)
  80c2c0:	10800517 	ldw	r2,20(r2)
  80c2c4:	e0ffff17 	ldw	r3,-4(fp)
  80c2c8:	180d883a 	mov	r6,r3
  80c2cc:	e17ffe17 	ldw	r5,-8(fp)
  80c2d0:	e13ffb17 	ldw	r4,-20(fp)
  80c2d4:	103ee83a 	callr	r2
  80c2d8:	e0bffc15 	stw	r2,-16(fp)
  80c2dc:	e0bffc17 	ldw	r2,-16(fp)
  80c2e0:	1000070e 	bge	r2,zero,80c300 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80c2e4:	080c20c0 	call	80c20c <alt_get_errno>
  80c2e8:	1007883a 	mov	r3,r2
  80c2ec:	e0bffc17 	ldw	r2,-16(fp)
  80c2f0:	0085c83a 	sub	r2,zero,r2
  80c2f4:	18800015 	stw	r2,0(r3)
          return -1;
  80c2f8:	00bfffc4 	movi	r2,-1
  80c2fc:	00000c06 	br	80c330 <read+0xe8>
        }
        return rval;
  80c300:	e0bffc17 	ldw	r2,-16(fp)
  80c304:	00000a06 	br	80c330 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80c308:	080c20c0 	call	80c20c <alt_get_errno>
  80c30c:	1007883a 	mov	r3,r2
  80c310:	00800344 	movi	r2,13
  80c314:	18800015 	stw	r2,0(r3)
  80c318:	00000406 	br	80c32c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80c31c:	080c20c0 	call	80c20c <alt_get_errno>
  80c320:	1007883a 	mov	r3,r2
  80c324:	00801444 	movi	r2,81
  80c328:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80c32c:	00bfffc4 	movi	r2,-1
}
  80c330:	e037883a 	mov	sp,fp
  80c334:	dfc00117 	ldw	ra,4(sp)
  80c338:	df000017 	ldw	fp,0(sp)
  80c33c:	dec00204 	addi	sp,sp,8
  80c340:	f800283a 	ret

0080c344 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80c344:	defffe04 	addi	sp,sp,-8
  80c348:	df000115 	stw	fp,4(sp)
  80c34c:	df000104 	addi	fp,sp,4
  80c350:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80c354:	e0bfff17 	ldw	r2,-4(fp)
  80c358:	108000d0 	cmplti	r2,r2,3
  80c35c:	10000d1e 	bne	r2,zero,80c394 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c360:	00802074 	movhi	r2,129
  80c364:	10821e04 	addi	r2,r2,2168
  80c368:	e0ffff17 	ldw	r3,-4(fp)
  80c36c:	18c00324 	muli	r3,r3,12
  80c370:	10c5883a 	add	r2,r2,r3
  80c374:	10800204 	addi	r2,r2,8
  80c378:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80c37c:	00802074 	movhi	r2,129
  80c380:	10821e04 	addi	r2,r2,2168
  80c384:	e0ffff17 	ldw	r3,-4(fp)
  80c388:	18c00324 	muli	r3,r3,12
  80c38c:	10c5883a 	add	r2,r2,r3
  80c390:	10000015 	stw	zero,0(r2)
  }
}
  80c394:	0001883a 	nop
  80c398:	e037883a 	mov	sp,fp
  80c39c:	df000017 	ldw	fp,0(sp)
  80c3a0:	dec00104 	addi	sp,sp,4
  80c3a4:	f800283a 	ret

0080c3a8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80c3a8:	defff904 	addi	sp,sp,-28
  80c3ac:	df000615 	stw	fp,24(sp)
  80c3b0:	df000604 	addi	fp,sp,24
  80c3b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c3b8:	0005303a 	rdctl	r2,status
  80c3bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c3c0:	e0fffe17 	ldw	r3,-8(fp)
  80c3c4:	00bfff84 	movi	r2,-2
  80c3c8:	1884703a 	and	r2,r3,r2
  80c3cc:	1001703a 	wrctl	status,r2
  
  return context;
  80c3d0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80c3d4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c3d8:	d0a00b17 	ldw	r2,-32724(gp)
  80c3dc:	10c000c4 	addi	r3,r2,3
  80c3e0:	00bfff04 	movi	r2,-4
  80c3e4:	1884703a 	and	r2,r3,r2
  80c3e8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c3ec:	d0e00b17 	ldw	r3,-32724(gp)
  80c3f0:	e0bfff17 	ldw	r2,-4(fp)
  80c3f4:	1887883a 	add	r3,r3,r2
  80c3f8:	00804034 	movhi	r2,256
  80c3fc:	10800004 	addi	r2,r2,0
  80c400:	10c0062e 	bgeu	r2,r3,80c41c <sbrk+0x74>
  80c404:	e0bffb17 	ldw	r2,-20(fp)
  80c408:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c40c:	e0bffa17 	ldw	r2,-24(fp)
  80c410:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80c414:	00bfffc4 	movi	r2,-1
  80c418:	00000b06 	br	80c448 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80c41c:	d0a00b17 	ldw	r2,-32724(gp)
  80c420:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80c424:	d0e00b17 	ldw	r3,-32724(gp)
  80c428:	e0bfff17 	ldw	r2,-4(fp)
  80c42c:	1885883a 	add	r2,r3,r2
  80c430:	d0a00b15 	stw	r2,-32724(gp)
  80c434:	e0bffb17 	ldw	r2,-20(fp)
  80c438:	e0bffc15 	stw	r2,-16(fp)
  80c43c:	e0bffc17 	ldw	r2,-16(fp)
  80c440:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80c444:	e0bffd17 	ldw	r2,-12(fp)
} 
  80c448:	e037883a 	mov	sp,fp
  80c44c:	df000017 	ldw	fp,0(sp)
  80c450:	dec00104 	addi	sp,sp,4
  80c454:	f800283a 	ret

0080c458 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80c458:	defffa04 	addi	sp,sp,-24
  80c45c:	df000515 	stw	fp,20(sp)
  80c460:	df000504 	addi	fp,sp,20
  80c464:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c468:	0005303a 	rdctl	r2,status
  80c46c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c470:	e0fffc17 	ldw	r3,-16(fp)
  80c474:	00bfff84 	movi	r2,-2
  80c478:	1884703a 	and	r2,r3,r2
  80c47c:	1001703a 	wrctl	status,r2
  
  return context;
  80c480:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80c484:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80c488:	e0bfff17 	ldw	r2,-4(fp)
  80c48c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c490:	e0bffd17 	ldw	r2,-12(fp)
  80c494:	10800017 	ldw	r2,0(r2)
  80c498:	e0fffd17 	ldw	r3,-12(fp)
  80c49c:	18c00117 	ldw	r3,4(r3)
  80c4a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80c4a4:	e0bffd17 	ldw	r2,-12(fp)
  80c4a8:	10800117 	ldw	r2,4(r2)
  80c4ac:	e0fffd17 	ldw	r3,-12(fp)
  80c4b0:	18c00017 	ldw	r3,0(r3)
  80c4b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c4b8:	e0bffd17 	ldw	r2,-12(fp)
  80c4bc:	e0fffd17 	ldw	r3,-12(fp)
  80c4c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80c4c4:	e0bffd17 	ldw	r2,-12(fp)
  80c4c8:	e0fffd17 	ldw	r3,-12(fp)
  80c4cc:	10c00015 	stw	r3,0(r2)
  80c4d0:	e0bffb17 	ldw	r2,-20(fp)
  80c4d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c4d8:	e0bffe17 	ldw	r2,-8(fp)
  80c4dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80c4e0:	0001883a 	nop
  80c4e4:	e037883a 	mov	sp,fp
  80c4e8:	df000017 	ldw	fp,0(sp)
  80c4ec:	dec00104 	addi	sp,sp,4
  80c4f0:	f800283a 	ret

0080c4f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c4f4:	defffb04 	addi	sp,sp,-20
  80c4f8:	dfc00415 	stw	ra,16(sp)
  80c4fc:	df000315 	stw	fp,12(sp)
  80c500:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80c504:	d0a00c17 	ldw	r2,-32720(gp)
  80c508:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c50c:	d0a73217 	ldw	r2,-25400(gp)
  80c510:	10800044 	addi	r2,r2,1
  80c514:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c518:	00002e06 	br	80c5d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80c51c:	e0bffd17 	ldw	r2,-12(fp)
  80c520:	10800017 	ldw	r2,0(r2)
  80c524:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c528:	e0bffd17 	ldw	r2,-12(fp)
  80c52c:	10800403 	ldbu	r2,16(r2)
  80c530:	10803fcc 	andi	r2,r2,255
  80c534:	10000426 	beq	r2,zero,80c548 <alt_tick+0x54>
  80c538:	d0a73217 	ldw	r2,-25400(gp)
  80c53c:	1000021e 	bne	r2,zero,80c548 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80c540:	e0bffd17 	ldw	r2,-12(fp)
  80c544:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80c548:	e0bffd17 	ldw	r2,-12(fp)
  80c54c:	10800217 	ldw	r2,8(r2)
  80c550:	d0e73217 	ldw	r3,-25400(gp)
  80c554:	18801d36 	bltu	r3,r2,80c5cc <alt_tick+0xd8>
  80c558:	e0bffd17 	ldw	r2,-12(fp)
  80c55c:	10800403 	ldbu	r2,16(r2)
  80c560:	10803fcc 	andi	r2,r2,255
  80c564:	1000191e 	bne	r2,zero,80c5cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80c568:	e0bffd17 	ldw	r2,-12(fp)
  80c56c:	10800317 	ldw	r2,12(r2)
  80c570:	e0fffd17 	ldw	r3,-12(fp)
  80c574:	18c00517 	ldw	r3,20(r3)
  80c578:	1809883a 	mov	r4,r3
  80c57c:	103ee83a 	callr	r2
  80c580:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80c584:	e0bfff17 	ldw	r2,-4(fp)
  80c588:	1000031e 	bne	r2,zero,80c598 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80c58c:	e13ffd17 	ldw	r4,-12(fp)
  80c590:	080c4580 	call	80c458 <alt_alarm_stop>
  80c594:	00000d06 	br	80c5cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80c598:	e0bffd17 	ldw	r2,-12(fp)
  80c59c:	10c00217 	ldw	r3,8(r2)
  80c5a0:	e0bfff17 	ldw	r2,-4(fp)
  80c5a4:	1887883a 	add	r3,r3,r2
  80c5a8:	e0bffd17 	ldw	r2,-12(fp)
  80c5ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c5b0:	e0bffd17 	ldw	r2,-12(fp)
  80c5b4:	10c00217 	ldw	r3,8(r2)
  80c5b8:	d0a73217 	ldw	r2,-25400(gp)
  80c5bc:	1880032e 	bgeu	r3,r2,80c5cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80c5c0:	e0bffd17 	ldw	r2,-12(fp)
  80c5c4:	00c00044 	movi	r3,1
  80c5c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80c5cc:	e0bffe17 	ldw	r2,-8(fp)
  80c5d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c5d4:	e0fffd17 	ldw	r3,-12(fp)
  80c5d8:	d0a00c04 	addi	r2,gp,-32720
  80c5dc:	18bfcf1e 	bne	r3,r2,80c51c <__alt_mem_onchip_mem+0xff80451c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80c5e0:	0001883a 	nop
}
  80c5e4:	0001883a 	nop
  80c5e8:	e037883a 	mov	sp,fp
  80c5ec:	dfc00117 	ldw	ra,4(sp)
  80c5f0:	df000017 	ldw	fp,0(sp)
  80c5f4:	dec00204 	addi	sp,sp,8
  80c5f8:	f800283a 	ret

0080c5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c5fc:	defffe04 	addi	sp,sp,-8
  80c600:	dfc00115 	stw	ra,4(sp)
  80c604:	df000015 	stw	fp,0(sp)
  80c608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c60c:	d0a00a17 	ldw	r2,-32728(gp)
  80c610:	10000326 	beq	r2,zero,80c620 <alt_get_errno+0x24>
  80c614:	d0a00a17 	ldw	r2,-32728(gp)
  80c618:	103ee83a 	callr	r2
  80c61c:	00000106 	br	80c624 <alt_get_errno+0x28>
  80c620:	d0a72d04 	addi	r2,gp,-25420
}
  80c624:	e037883a 	mov	sp,fp
  80c628:	dfc00117 	ldw	ra,4(sp)
  80c62c:	df000017 	ldw	fp,0(sp)
  80c630:	dec00204 	addi	sp,sp,8
  80c634:	f800283a 	ret

0080c638 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80c638:	defff904 	addi	sp,sp,-28
  80c63c:	dfc00615 	stw	ra,24(sp)
  80c640:	df000515 	stw	fp,20(sp)
  80c644:	df000504 	addi	fp,sp,20
  80c648:	e13ffd15 	stw	r4,-12(fp)
  80c64c:	e17ffe15 	stw	r5,-8(fp)
  80c650:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c654:	e0bffd17 	ldw	r2,-12(fp)
  80c658:	10000616 	blt	r2,zero,80c674 <write+0x3c>
  80c65c:	e0bffd17 	ldw	r2,-12(fp)
  80c660:	10c00324 	muli	r3,r2,12
  80c664:	00802074 	movhi	r2,129
  80c668:	10821e04 	addi	r2,r2,2168
  80c66c:	1885883a 	add	r2,r3,r2
  80c670:	00000106 	br	80c678 <write+0x40>
  80c674:	0005883a 	mov	r2,zero
  80c678:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c67c:	e0bffb17 	ldw	r2,-20(fp)
  80c680:	10002126 	beq	r2,zero,80c708 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80c684:	e0bffb17 	ldw	r2,-20(fp)
  80c688:	10800217 	ldw	r2,8(r2)
  80c68c:	108000cc 	andi	r2,r2,3
  80c690:	10001826 	beq	r2,zero,80c6f4 <write+0xbc>
  80c694:	e0bffb17 	ldw	r2,-20(fp)
  80c698:	10800017 	ldw	r2,0(r2)
  80c69c:	10800617 	ldw	r2,24(r2)
  80c6a0:	10001426 	beq	r2,zero,80c6f4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80c6a4:	e0bffb17 	ldw	r2,-20(fp)
  80c6a8:	10800017 	ldw	r2,0(r2)
  80c6ac:	10800617 	ldw	r2,24(r2)
  80c6b0:	e0ffff17 	ldw	r3,-4(fp)
  80c6b4:	180d883a 	mov	r6,r3
  80c6b8:	e17ffe17 	ldw	r5,-8(fp)
  80c6bc:	e13ffb17 	ldw	r4,-20(fp)
  80c6c0:	103ee83a 	callr	r2
  80c6c4:	e0bffc15 	stw	r2,-16(fp)
  80c6c8:	e0bffc17 	ldw	r2,-16(fp)
  80c6cc:	1000070e 	bge	r2,zero,80c6ec <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80c6d0:	080c5fc0 	call	80c5fc <alt_get_errno>
  80c6d4:	1007883a 	mov	r3,r2
  80c6d8:	e0bffc17 	ldw	r2,-16(fp)
  80c6dc:	0085c83a 	sub	r2,zero,r2
  80c6e0:	18800015 	stw	r2,0(r3)
        return -1;
  80c6e4:	00bfffc4 	movi	r2,-1
  80c6e8:	00000c06 	br	80c71c <write+0xe4>
      }
      return rval;
  80c6ec:	e0bffc17 	ldw	r2,-16(fp)
  80c6f0:	00000a06 	br	80c71c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80c6f4:	080c5fc0 	call	80c5fc <alt_get_errno>
  80c6f8:	1007883a 	mov	r3,r2
  80c6fc:	00800344 	movi	r2,13
  80c700:	18800015 	stw	r2,0(r3)
  80c704:	00000406 	br	80c718 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80c708:	080c5fc0 	call	80c5fc <alt_get_errno>
  80c70c:	1007883a 	mov	r3,r2
  80c710:	00801444 	movi	r2,81
  80c714:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80c718:	00bfffc4 	movi	r2,-1
}
  80c71c:	e037883a 	mov	sp,fp
  80c720:	dfc00117 	ldw	ra,4(sp)
  80c724:	df000017 	ldw	fp,0(sp)
  80c728:	dec00204 	addi	sp,sp,8
  80c72c:	f800283a 	ret

0080c730 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80c730:	defffd04 	addi	sp,sp,-12
  80c734:	dfc00215 	stw	ra,8(sp)
  80c738:	df000115 	stw	fp,4(sp)
  80c73c:	df000104 	addi	fp,sp,4
  80c740:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80c744:	d1600704 	addi	r5,gp,-32740
  80c748:	e13fff17 	ldw	r4,-4(fp)
  80c74c:	080ebc80 	call	80ebc8 <alt_dev_llist_insert>
}
  80c750:	e037883a 	mov	sp,fp
  80c754:	dfc00117 	ldw	ra,4(sp)
  80c758:	df000017 	ldw	fp,0(sp)
  80c75c:	dec00204 	addi	sp,sp,8
  80c760:	f800283a 	ret

0080c764 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80c764:	defffd04 	addi	sp,sp,-12
  80c768:	dfc00215 	stw	ra,8(sp)
  80c76c:	df000115 	stw	fp,4(sp)
  80c770:	df000104 	addi	fp,sp,4
  80c774:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80c778:	080f3c40 	call	80f3c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80c77c:	00800044 	movi	r2,1
  80c780:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80c784:	0001883a 	nop
  80c788:	e037883a 	mov	sp,fp
  80c78c:	dfc00117 	ldw	ra,4(sp)
  80c790:	df000017 	ldw	fp,0(sp)
  80c794:	dec00204 	addi	sp,sp,8
  80c798:	f800283a 	ret

0080c79c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80c79c:	defffe04 	addi	sp,sp,-8
  80c7a0:	dfc00115 	stw	ra,4(sp)
  80c7a4:	df000015 	stw	fp,0(sp)
  80c7a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80c7ac:	01c0fa04 	movi	r7,1000
  80c7b0:	01800084 	movi	r6,2
  80c7b4:	000b883a 	mov	r5,zero
  80c7b8:	01004074 	movhi	r4,257
  80c7bc:	21040804 	addi	r4,r4,4128
  80c7c0:	080e1f00 	call	80e1f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80c7c4:	01800044 	movi	r6,1
  80c7c8:	000b883a 	mov	r5,zero
  80c7cc:	01002074 	movhi	r4,129
  80c7d0:	21028804 	addi	r4,r4,2592
  80c7d4:	080c9980 	call	80c998 <altera_avalon_jtag_uart_init>
  80c7d8:	01002074 	movhi	r4,129
  80c7dc:	21027e04 	addi	r4,r4,2552
  80c7e0:	080c7300 	call	80c730 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80c7e4:	01002074 	movhi	r4,129
  80c7e8:	2106a004 	addi	r4,r4,6784
  80c7ec:	080dfe40 	call	80dfe4 <altera_avalon_lcd_16207_init>
  80c7f0:	01002074 	movhi	r4,129
  80c7f4:	21069604 	addi	r4,r4,6744
  80c7f8:	080c7300 	call	80c730 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80c7fc:	000d883a 	mov	r6,zero
  80c800:	000b883a 	mov	r5,zero
  80c804:	01002074 	movhi	r4,129
  80c808:	2106e804 	addi	r4,r4,7072
  80c80c:	080e37c0 	call	80e37c <altera_avalon_uart_init>
  80c810:	01002074 	movhi	r4,129
  80c814:	2106de04 	addi	r4,r4,7032
  80c818:	080c7300 	call	80c730 <alt_dev_reg>
}
  80c81c:	0001883a 	nop
  80c820:	e037883a 	mov	sp,fp
  80c824:	dfc00117 	ldw	ra,4(sp)
  80c828:	df000017 	ldw	fp,0(sp)
  80c82c:	dec00204 	addi	sp,sp,8
  80c830:	f800283a 	ret

0080c834 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80c834:	defffa04 	addi	sp,sp,-24
  80c838:	dfc00515 	stw	ra,20(sp)
  80c83c:	df000415 	stw	fp,16(sp)
  80c840:	df000404 	addi	fp,sp,16
  80c844:	e13ffd15 	stw	r4,-12(fp)
  80c848:	e17ffe15 	stw	r5,-8(fp)
  80c84c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c850:	e0bffd17 	ldw	r2,-12(fp)
  80c854:	10800017 	ldw	r2,0(r2)
  80c858:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80c85c:	e0bffc17 	ldw	r2,-16(fp)
  80c860:	10c00a04 	addi	r3,r2,40
  80c864:	e0bffd17 	ldw	r2,-12(fp)
  80c868:	10800217 	ldw	r2,8(r2)
  80c86c:	100f883a 	mov	r7,r2
  80c870:	e1bfff17 	ldw	r6,-4(fp)
  80c874:	e17ffe17 	ldw	r5,-8(fp)
  80c878:	1809883a 	mov	r4,r3
  80c87c:	080ce5c0 	call	80ce5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80c880:	e037883a 	mov	sp,fp
  80c884:	dfc00117 	ldw	ra,4(sp)
  80c888:	df000017 	ldw	fp,0(sp)
  80c88c:	dec00204 	addi	sp,sp,8
  80c890:	f800283a 	ret

0080c894 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80c894:	defffa04 	addi	sp,sp,-24
  80c898:	dfc00515 	stw	ra,20(sp)
  80c89c:	df000415 	stw	fp,16(sp)
  80c8a0:	df000404 	addi	fp,sp,16
  80c8a4:	e13ffd15 	stw	r4,-12(fp)
  80c8a8:	e17ffe15 	stw	r5,-8(fp)
  80c8ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c8b0:	e0bffd17 	ldw	r2,-12(fp)
  80c8b4:	10800017 	ldw	r2,0(r2)
  80c8b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80c8bc:	e0bffc17 	ldw	r2,-16(fp)
  80c8c0:	10c00a04 	addi	r3,r2,40
  80c8c4:	e0bffd17 	ldw	r2,-12(fp)
  80c8c8:	10800217 	ldw	r2,8(r2)
  80c8cc:	100f883a 	mov	r7,r2
  80c8d0:	e1bfff17 	ldw	r6,-4(fp)
  80c8d4:	e17ffe17 	ldw	r5,-8(fp)
  80c8d8:	1809883a 	mov	r4,r3
  80c8dc:	080d0780 	call	80d078 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80c8e0:	e037883a 	mov	sp,fp
  80c8e4:	dfc00117 	ldw	ra,4(sp)
  80c8e8:	df000017 	ldw	fp,0(sp)
  80c8ec:	dec00204 	addi	sp,sp,8
  80c8f0:	f800283a 	ret

0080c8f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80c8f4:	defffc04 	addi	sp,sp,-16
  80c8f8:	dfc00315 	stw	ra,12(sp)
  80c8fc:	df000215 	stw	fp,8(sp)
  80c900:	df000204 	addi	fp,sp,8
  80c904:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c908:	e0bfff17 	ldw	r2,-4(fp)
  80c90c:	10800017 	ldw	r2,0(r2)
  80c910:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80c914:	e0bffe17 	ldw	r2,-8(fp)
  80c918:	10c00a04 	addi	r3,r2,40
  80c91c:	e0bfff17 	ldw	r2,-4(fp)
  80c920:	10800217 	ldw	r2,8(r2)
  80c924:	100b883a 	mov	r5,r2
  80c928:	1809883a 	mov	r4,r3
  80c92c:	080cd040 	call	80cd04 <altera_avalon_jtag_uart_close>
}
  80c930:	e037883a 	mov	sp,fp
  80c934:	dfc00117 	ldw	ra,4(sp)
  80c938:	df000017 	ldw	fp,0(sp)
  80c93c:	dec00204 	addi	sp,sp,8
  80c940:	f800283a 	ret

0080c944 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80c944:	defffa04 	addi	sp,sp,-24
  80c948:	dfc00515 	stw	ra,20(sp)
  80c94c:	df000415 	stw	fp,16(sp)
  80c950:	df000404 	addi	fp,sp,16
  80c954:	e13ffd15 	stw	r4,-12(fp)
  80c958:	e17ffe15 	stw	r5,-8(fp)
  80c95c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80c960:	e0bffd17 	ldw	r2,-12(fp)
  80c964:	10800017 	ldw	r2,0(r2)
  80c968:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80c96c:	e0bffc17 	ldw	r2,-16(fp)
  80c970:	10800a04 	addi	r2,r2,40
  80c974:	e1bfff17 	ldw	r6,-4(fp)
  80c978:	e17ffe17 	ldw	r5,-8(fp)
  80c97c:	1009883a 	mov	r4,r2
  80c980:	080cd6c0 	call	80cd6c <altera_avalon_jtag_uart_ioctl>
}
  80c984:	e037883a 	mov	sp,fp
  80c988:	dfc00117 	ldw	ra,4(sp)
  80c98c:	df000017 	ldw	fp,0(sp)
  80c990:	dec00204 	addi	sp,sp,8
  80c994:	f800283a 	ret

0080c998 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80c998:	defffa04 	addi	sp,sp,-24
  80c99c:	dfc00515 	stw	ra,20(sp)
  80c9a0:	df000415 	stw	fp,16(sp)
  80c9a4:	df000404 	addi	fp,sp,16
  80c9a8:	e13ffd15 	stw	r4,-12(fp)
  80c9ac:	e17ffe15 	stw	r5,-8(fp)
  80c9b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c9b4:	e0bffd17 	ldw	r2,-12(fp)
  80c9b8:	00c00044 	movi	r3,1
  80c9bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80c9c0:	e0bffd17 	ldw	r2,-12(fp)
  80c9c4:	10800017 	ldw	r2,0(r2)
  80c9c8:	10800104 	addi	r2,r2,4
  80c9cc:	1007883a 	mov	r3,r2
  80c9d0:	e0bffd17 	ldw	r2,-12(fp)
  80c9d4:	10800817 	ldw	r2,32(r2)
  80c9d8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80c9dc:	e0bffe17 	ldw	r2,-8(fp)
  80c9e0:	e0ffff17 	ldw	r3,-4(fp)
  80c9e4:	d8000015 	stw	zero,0(sp)
  80c9e8:	e1fffd17 	ldw	r7,-12(fp)
  80c9ec:	01802074 	movhi	r6,129
  80c9f0:	31b29604 	addi	r6,r6,-13736
  80c9f4:	180b883a 	mov	r5,r3
  80c9f8:	1009883a 	mov	r4,r2
  80c9fc:	080ed600 	call	80ed60 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80ca00:	e0bffd17 	ldw	r2,-12(fp)
  80ca04:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80ca08:	e0bffd17 	ldw	r2,-12(fp)
  80ca0c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ca10:	d0e73117 	ldw	r3,-25404(gp)
  80ca14:	e1fffd17 	ldw	r7,-12(fp)
  80ca18:	01802074 	movhi	r6,129
  80ca1c:	31b31904 	addi	r6,r6,-13212
  80ca20:	180b883a 	mov	r5,r3
  80ca24:	1009883a 	mov	r4,r2
  80ca28:	080bb1c0 	call	80bb1c <alt_alarm_start>
  80ca2c:	1000040e 	bge	r2,zero,80ca40 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80ca30:	e0fffd17 	ldw	r3,-12(fp)
  80ca34:	00a00034 	movhi	r2,32768
  80ca38:	10bfffc4 	addi	r2,r2,-1
  80ca3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80ca40:	0001883a 	nop
  80ca44:	e037883a 	mov	sp,fp
  80ca48:	dfc00117 	ldw	ra,4(sp)
  80ca4c:	df000017 	ldw	fp,0(sp)
  80ca50:	dec00204 	addi	sp,sp,8
  80ca54:	f800283a 	ret

0080ca58 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ca58:	defff804 	addi	sp,sp,-32
  80ca5c:	df000715 	stw	fp,28(sp)
  80ca60:	df000704 	addi	fp,sp,28
  80ca64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ca68:	e0bfff17 	ldw	r2,-4(fp)
  80ca6c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80ca70:	e0bffb17 	ldw	r2,-20(fp)
  80ca74:	10800017 	ldw	r2,0(r2)
  80ca78:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ca7c:	e0bffc17 	ldw	r2,-16(fp)
  80ca80:	10800104 	addi	r2,r2,4
  80ca84:	10800037 	ldwio	r2,0(r2)
  80ca88:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ca8c:	e0bffd17 	ldw	r2,-12(fp)
  80ca90:	1080c00c 	andi	r2,r2,768
  80ca94:	10006d26 	beq	r2,zero,80cc4c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ca98:	e0bffd17 	ldw	r2,-12(fp)
  80ca9c:	1080400c 	andi	r2,r2,256
  80caa0:	10003526 	beq	r2,zero,80cb78 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80caa4:	00800074 	movhi	r2,1
  80caa8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80caac:	e0bffb17 	ldw	r2,-20(fp)
  80cab0:	10800a17 	ldw	r2,40(r2)
  80cab4:	10800044 	addi	r2,r2,1
  80cab8:	1081ffcc 	andi	r2,r2,2047
  80cabc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80cac0:	e0bffb17 	ldw	r2,-20(fp)
  80cac4:	10c00b17 	ldw	r3,44(r2)
  80cac8:	e0bffe17 	ldw	r2,-8(fp)
  80cacc:	18801526 	beq	r3,r2,80cb24 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80cad0:	e0bffc17 	ldw	r2,-16(fp)
  80cad4:	10800037 	ldwio	r2,0(r2)
  80cad8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80cadc:	e0bff917 	ldw	r2,-28(fp)
  80cae0:	10a0000c 	andi	r2,r2,32768
  80cae4:	10001126 	beq	r2,zero,80cb2c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80cae8:	e0bffb17 	ldw	r2,-20(fp)
  80caec:	10800a17 	ldw	r2,40(r2)
  80caf0:	e0fff917 	ldw	r3,-28(fp)
  80caf4:	1809883a 	mov	r4,r3
  80caf8:	e0fffb17 	ldw	r3,-20(fp)
  80cafc:	1885883a 	add	r2,r3,r2
  80cb00:	10800e04 	addi	r2,r2,56
  80cb04:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cb08:	e0bffb17 	ldw	r2,-20(fp)
  80cb0c:	10800a17 	ldw	r2,40(r2)
  80cb10:	10800044 	addi	r2,r2,1
  80cb14:	10c1ffcc 	andi	r3,r2,2047
  80cb18:	e0bffb17 	ldw	r2,-20(fp)
  80cb1c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80cb20:	003fe206 	br	80caac <__alt_mem_onchip_mem+0xff804aac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80cb24:	0001883a 	nop
  80cb28:	00000106 	br	80cb30 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80cb2c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80cb30:	e0bff917 	ldw	r2,-28(fp)
  80cb34:	10bfffec 	andhi	r2,r2,65535
  80cb38:	10000f26 	beq	r2,zero,80cb78 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cb3c:	e0bffb17 	ldw	r2,-20(fp)
  80cb40:	10c00817 	ldw	r3,32(r2)
  80cb44:	00bfff84 	movi	r2,-2
  80cb48:	1886703a 	and	r3,r3,r2
  80cb4c:	e0bffb17 	ldw	r2,-20(fp)
  80cb50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80cb54:	e0bffc17 	ldw	r2,-16(fp)
  80cb58:	10800104 	addi	r2,r2,4
  80cb5c:	1007883a 	mov	r3,r2
  80cb60:	e0bffb17 	ldw	r2,-20(fp)
  80cb64:	10800817 	ldw	r2,32(r2)
  80cb68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cb6c:	e0bffc17 	ldw	r2,-16(fp)
  80cb70:	10800104 	addi	r2,r2,4
  80cb74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80cb78:	e0bffd17 	ldw	r2,-12(fp)
  80cb7c:	1080800c 	andi	r2,r2,512
  80cb80:	103fbe26 	beq	r2,zero,80ca7c <__alt_mem_onchip_mem+0xff804a7c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80cb84:	e0bffd17 	ldw	r2,-12(fp)
  80cb88:	1004d43a 	srli	r2,r2,16
  80cb8c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80cb90:	00001406 	br	80cbe4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80cb94:	e0bffc17 	ldw	r2,-16(fp)
  80cb98:	e0fffb17 	ldw	r3,-20(fp)
  80cb9c:	18c00d17 	ldw	r3,52(r3)
  80cba0:	e13ffb17 	ldw	r4,-20(fp)
  80cba4:	20c7883a 	add	r3,r4,r3
  80cba8:	18c20e04 	addi	r3,r3,2104
  80cbac:	18c00003 	ldbu	r3,0(r3)
  80cbb0:	18c03fcc 	andi	r3,r3,255
  80cbb4:	18c0201c 	xori	r3,r3,128
  80cbb8:	18ffe004 	addi	r3,r3,-128
  80cbbc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cbc0:	e0bffb17 	ldw	r2,-20(fp)
  80cbc4:	10800d17 	ldw	r2,52(r2)
  80cbc8:	10800044 	addi	r2,r2,1
  80cbcc:	10c1ffcc 	andi	r3,r2,2047
  80cbd0:	e0bffb17 	ldw	r2,-20(fp)
  80cbd4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80cbd8:	e0bffa17 	ldw	r2,-24(fp)
  80cbdc:	10bfffc4 	addi	r2,r2,-1
  80cbe0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80cbe4:	e0bffa17 	ldw	r2,-24(fp)
  80cbe8:	10000526 	beq	r2,zero,80cc00 <altera_avalon_jtag_uart_irq+0x1a8>
  80cbec:	e0bffb17 	ldw	r2,-20(fp)
  80cbf0:	10c00d17 	ldw	r3,52(r2)
  80cbf4:	e0bffb17 	ldw	r2,-20(fp)
  80cbf8:	10800c17 	ldw	r2,48(r2)
  80cbfc:	18bfe51e 	bne	r3,r2,80cb94 <__alt_mem_onchip_mem+0xff804b94>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80cc00:	e0bffa17 	ldw	r2,-24(fp)
  80cc04:	103f9d26 	beq	r2,zero,80ca7c <__alt_mem_onchip_mem+0xff804a7c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cc08:	e0bffb17 	ldw	r2,-20(fp)
  80cc0c:	10c00817 	ldw	r3,32(r2)
  80cc10:	00bfff44 	movi	r2,-3
  80cc14:	1886703a 	and	r3,r3,r2
  80cc18:	e0bffb17 	ldw	r2,-20(fp)
  80cc1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cc20:	e0bffb17 	ldw	r2,-20(fp)
  80cc24:	10800017 	ldw	r2,0(r2)
  80cc28:	10800104 	addi	r2,r2,4
  80cc2c:	1007883a 	mov	r3,r2
  80cc30:	e0bffb17 	ldw	r2,-20(fp)
  80cc34:	10800817 	ldw	r2,32(r2)
  80cc38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cc3c:	e0bffc17 	ldw	r2,-16(fp)
  80cc40:	10800104 	addi	r2,r2,4
  80cc44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80cc48:	003f8c06 	br	80ca7c <__alt_mem_onchip_mem+0xff804a7c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80cc4c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80cc50:	0001883a 	nop
  80cc54:	e037883a 	mov	sp,fp
  80cc58:	df000017 	ldw	fp,0(sp)
  80cc5c:	dec00104 	addi	sp,sp,4
  80cc60:	f800283a 	ret

0080cc64 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80cc64:	defff804 	addi	sp,sp,-32
  80cc68:	df000715 	stw	fp,28(sp)
  80cc6c:	df000704 	addi	fp,sp,28
  80cc70:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80cc74:	e0bffb17 	ldw	r2,-20(fp)
  80cc78:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80cc7c:	e0bff917 	ldw	r2,-28(fp)
  80cc80:	10800017 	ldw	r2,0(r2)
  80cc84:	10800104 	addi	r2,r2,4
  80cc88:	10800037 	ldwio	r2,0(r2)
  80cc8c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80cc90:	e0bffa17 	ldw	r2,-24(fp)
  80cc94:	1081000c 	andi	r2,r2,1024
  80cc98:	10000b26 	beq	r2,zero,80ccc8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80cc9c:	e0bff917 	ldw	r2,-28(fp)
  80cca0:	10800017 	ldw	r2,0(r2)
  80cca4:	10800104 	addi	r2,r2,4
  80cca8:	1007883a 	mov	r3,r2
  80ccac:	e0bff917 	ldw	r2,-28(fp)
  80ccb0:	10800817 	ldw	r2,32(r2)
  80ccb4:	10810014 	ori	r2,r2,1024
  80ccb8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80ccbc:	e0bff917 	ldw	r2,-28(fp)
  80ccc0:	10000915 	stw	zero,36(r2)
  80ccc4:	00000a06 	br	80ccf0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ccc8:	e0bff917 	ldw	r2,-28(fp)
  80cccc:	10c00917 	ldw	r3,36(r2)
  80ccd0:	00a00034 	movhi	r2,32768
  80ccd4:	10bfff04 	addi	r2,r2,-4
  80ccd8:	10c00536 	bltu	r2,r3,80ccf0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80ccdc:	e0bff917 	ldw	r2,-28(fp)
  80cce0:	10800917 	ldw	r2,36(r2)
  80cce4:	10c00044 	addi	r3,r2,1
  80cce8:	e0bff917 	ldw	r2,-28(fp)
  80ccec:	10c00915 	stw	r3,36(r2)
  80ccf0:	d0a73117 	ldw	r2,-25404(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ccf4:	e037883a 	mov	sp,fp
  80ccf8:	df000017 	ldw	fp,0(sp)
  80ccfc:	dec00104 	addi	sp,sp,4
  80cd00:	f800283a 	ret

0080cd04 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80cd04:	defffd04 	addi	sp,sp,-12
  80cd08:	df000215 	stw	fp,8(sp)
  80cd0c:	df000204 	addi	fp,sp,8
  80cd10:	e13ffe15 	stw	r4,-8(fp)
  80cd14:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80cd18:	00000506 	br	80cd30 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80cd1c:	e0bfff17 	ldw	r2,-4(fp)
  80cd20:	1090000c 	andi	r2,r2,16384
  80cd24:	10000226 	beq	r2,zero,80cd30 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80cd28:	00bffd44 	movi	r2,-11
  80cd2c:	00000b06 	br	80cd5c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80cd30:	e0bffe17 	ldw	r2,-8(fp)
  80cd34:	10c00d17 	ldw	r3,52(r2)
  80cd38:	e0bffe17 	ldw	r2,-8(fp)
  80cd3c:	10800c17 	ldw	r2,48(r2)
  80cd40:	18800526 	beq	r3,r2,80cd58 <altera_avalon_jtag_uart_close+0x54>
  80cd44:	e0bffe17 	ldw	r2,-8(fp)
  80cd48:	10c00917 	ldw	r3,36(r2)
  80cd4c:	e0bffe17 	ldw	r2,-8(fp)
  80cd50:	10800117 	ldw	r2,4(r2)
  80cd54:	18bff136 	bltu	r3,r2,80cd1c <__alt_mem_onchip_mem+0xff804d1c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80cd58:	0005883a 	mov	r2,zero
}
  80cd5c:	e037883a 	mov	sp,fp
  80cd60:	df000017 	ldw	fp,0(sp)
  80cd64:	dec00104 	addi	sp,sp,4
  80cd68:	f800283a 	ret

0080cd6c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80cd6c:	defffa04 	addi	sp,sp,-24
  80cd70:	df000515 	stw	fp,20(sp)
  80cd74:	df000504 	addi	fp,sp,20
  80cd78:	e13ffd15 	stw	r4,-12(fp)
  80cd7c:	e17ffe15 	stw	r5,-8(fp)
  80cd80:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80cd84:	00bff9c4 	movi	r2,-25
  80cd88:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80cd8c:	e0bffe17 	ldw	r2,-8(fp)
  80cd90:	10da8060 	cmpeqi	r3,r2,27137
  80cd94:	1800031e 	bne	r3,zero,80cda4 <altera_avalon_jtag_uart_ioctl+0x38>
  80cd98:	109a80a0 	cmpeqi	r2,r2,27138
  80cd9c:	1000181e 	bne	r2,zero,80ce00 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80cda0:	00002906 	br	80ce48 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80cda4:	e0bffd17 	ldw	r2,-12(fp)
  80cda8:	10c00117 	ldw	r3,4(r2)
  80cdac:	00a00034 	movhi	r2,32768
  80cdb0:	10bfffc4 	addi	r2,r2,-1
  80cdb4:	18802126 	beq	r3,r2,80ce3c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80cdb8:	e0bfff17 	ldw	r2,-4(fp)
  80cdbc:	10800017 	ldw	r2,0(r2)
  80cdc0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80cdc4:	e0bffc17 	ldw	r2,-16(fp)
  80cdc8:	10800090 	cmplti	r2,r2,2
  80cdcc:	1000061e 	bne	r2,zero,80cde8 <altera_avalon_jtag_uart_ioctl+0x7c>
  80cdd0:	e0fffc17 	ldw	r3,-16(fp)
  80cdd4:	00a00034 	movhi	r2,32768
  80cdd8:	10bfffc4 	addi	r2,r2,-1
  80cddc:	18800226 	beq	r3,r2,80cde8 <altera_avalon_jtag_uart_ioctl+0x7c>
  80cde0:	e0bffc17 	ldw	r2,-16(fp)
  80cde4:	00000206 	br	80cdf0 <altera_avalon_jtag_uart_ioctl+0x84>
  80cde8:	00a00034 	movhi	r2,32768
  80cdec:	10bfff84 	addi	r2,r2,-2
  80cdf0:	e0fffd17 	ldw	r3,-12(fp)
  80cdf4:	18800115 	stw	r2,4(r3)
      rc = 0;
  80cdf8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80cdfc:	00000f06 	br	80ce3c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80ce00:	e0bffd17 	ldw	r2,-12(fp)
  80ce04:	10c00117 	ldw	r3,4(r2)
  80ce08:	00a00034 	movhi	r2,32768
  80ce0c:	10bfffc4 	addi	r2,r2,-1
  80ce10:	18800c26 	beq	r3,r2,80ce44 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80ce14:	e0bffd17 	ldw	r2,-12(fp)
  80ce18:	10c00917 	ldw	r3,36(r2)
  80ce1c:	e0bffd17 	ldw	r2,-12(fp)
  80ce20:	10800117 	ldw	r2,4(r2)
  80ce24:	1885803a 	cmpltu	r2,r3,r2
  80ce28:	10c03fcc 	andi	r3,r2,255
  80ce2c:	e0bfff17 	ldw	r2,-4(fp)
  80ce30:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80ce34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80ce38:	00000206 	br	80ce44 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80ce3c:	0001883a 	nop
  80ce40:	00000106 	br	80ce48 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80ce44:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80ce48:	e0bffb17 	ldw	r2,-20(fp)
}
  80ce4c:	e037883a 	mov	sp,fp
  80ce50:	df000017 	ldw	fp,0(sp)
  80ce54:	dec00104 	addi	sp,sp,4
  80ce58:	f800283a 	ret

0080ce5c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80ce5c:	defff304 	addi	sp,sp,-52
  80ce60:	dfc00c15 	stw	ra,48(sp)
  80ce64:	df000b15 	stw	fp,44(sp)
  80ce68:	df000b04 	addi	fp,sp,44
  80ce6c:	e13ffc15 	stw	r4,-16(fp)
  80ce70:	e17ffd15 	stw	r5,-12(fp)
  80ce74:	e1bffe15 	stw	r6,-8(fp)
  80ce78:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80ce7c:	e0bffd17 	ldw	r2,-12(fp)
  80ce80:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ce84:	00004706 	br	80cfa4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80ce88:	e0bffc17 	ldw	r2,-16(fp)
  80ce8c:	10800a17 	ldw	r2,40(r2)
  80ce90:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80ce94:	e0bffc17 	ldw	r2,-16(fp)
  80ce98:	10800b17 	ldw	r2,44(r2)
  80ce9c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80cea0:	e0fff717 	ldw	r3,-36(fp)
  80cea4:	e0bff817 	ldw	r2,-32(fp)
  80cea8:	18800536 	bltu	r3,r2,80cec0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80ceac:	e0fff717 	ldw	r3,-36(fp)
  80ceb0:	e0bff817 	ldw	r2,-32(fp)
  80ceb4:	1885c83a 	sub	r2,r3,r2
  80ceb8:	e0bff615 	stw	r2,-40(fp)
  80cebc:	00000406 	br	80ced0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80cec0:	00c20004 	movi	r3,2048
  80cec4:	e0bff817 	ldw	r2,-32(fp)
  80cec8:	1885c83a 	sub	r2,r3,r2
  80cecc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80ced0:	e0bff617 	ldw	r2,-40(fp)
  80ced4:	10001e26 	beq	r2,zero,80cf50 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80ced8:	e0fffe17 	ldw	r3,-8(fp)
  80cedc:	e0bff617 	ldw	r2,-40(fp)
  80cee0:	1880022e 	bgeu	r3,r2,80ceec <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80cee4:	e0bffe17 	ldw	r2,-8(fp)
  80cee8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80ceec:	e0bffc17 	ldw	r2,-16(fp)
  80cef0:	10c00e04 	addi	r3,r2,56
  80cef4:	e0bff817 	ldw	r2,-32(fp)
  80cef8:	1885883a 	add	r2,r3,r2
  80cefc:	e1bff617 	ldw	r6,-40(fp)
  80cf00:	100b883a 	mov	r5,r2
  80cf04:	e13ff517 	ldw	r4,-44(fp)
  80cf08:	080a1940 	call	80a194 <memcpy>
      ptr   += n;
  80cf0c:	e0fff517 	ldw	r3,-44(fp)
  80cf10:	e0bff617 	ldw	r2,-40(fp)
  80cf14:	1885883a 	add	r2,r3,r2
  80cf18:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80cf1c:	e0fffe17 	ldw	r3,-8(fp)
  80cf20:	e0bff617 	ldw	r2,-40(fp)
  80cf24:	1885c83a 	sub	r2,r3,r2
  80cf28:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cf2c:	e0fff817 	ldw	r3,-32(fp)
  80cf30:	e0bff617 	ldw	r2,-40(fp)
  80cf34:	1885883a 	add	r2,r3,r2
  80cf38:	10c1ffcc 	andi	r3,r2,2047
  80cf3c:	e0bffc17 	ldw	r2,-16(fp)
  80cf40:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80cf44:	e0bffe17 	ldw	r2,-8(fp)
  80cf48:	00bfcf16 	blt	zero,r2,80ce88 <__alt_mem_onchip_mem+0xff804e88>
  80cf4c:	00000106 	br	80cf54 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80cf50:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80cf54:	e0fff517 	ldw	r3,-44(fp)
  80cf58:	e0bffd17 	ldw	r2,-12(fp)
  80cf5c:	1880141e 	bne	r3,r2,80cfb0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80cf60:	e0bfff17 	ldw	r2,-4(fp)
  80cf64:	1090000c 	andi	r2,r2,16384
  80cf68:	1000131e 	bne	r2,zero,80cfb8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80cf6c:	0001883a 	nop
  80cf70:	e0bffc17 	ldw	r2,-16(fp)
  80cf74:	10c00a17 	ldw	r3,40(r2)
  80cf78:	e0bff717 	ldw	r2,-36(fp)
  80cf7c:	1880051e 	bne	r3,r2,80cf94 <altera_avalon_jtag_uart_read+0x138>
  80cf80:	e0bffc17 	ldw	r2,-16(fp)
  80cf84:	10c00917 	ldw	r3,36(r2)
  80cf88:	e0bffc17 	ldw	r2,-16(fp)
  80cf8c:	10800117 	ldw	r2,4(r2)
  80cf90:	18bff736 	bltu	r3,r2,80cf70 <__alt_mem_onchip_mem+0xff804f70>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80cf94:	e0bffc17 	ldw	r2,-16(fp)
  80cf98:	10c00a17 	ldw	r3,40(r2)
  80cf9c:	e0bff717 	ldw	r2,-36(fp)
  80cfa0:	18800726 	beq	r3,r2,80cfc0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80cfa4:	e0bffe17 	ldw	r2,-8(fp)
  80cfa8:	00bfb716 	blt	zero,r2,80ce88 <__alt_mem_onchip_mem+0xff804e88>
  80cfac:	00000506 	br	80cfc4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80cfb0:	0001883a 	nop
  80cfb4:	00000306 	br	80cfc4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80cfb8:	0001883a 	nop
  80cfbc:	00000106 	br	80cfc4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80cfc0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80cfc4:	e0fff517 	ldw	r3,-44(fp)
  80cfc8:	e0bffd17 	ldw	r2,-12(fp)
  80cfcc:	18801826 	beq	r3,r2,80d030 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cfd0:	0005303a 	rdctl	r2,status
  80cfd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cfd8:	e0fffb17 	ldw	r3,-20(fp)
  80cfdc:	00bfff84 	movi	r2,-2
  80cfe0:	1884703a 	and	r2,r3,r2
  80cfe4:	1001703a 	wrctl	status,r2
  
  return context;
  80cfe8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80cfec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cff0:	e0bffc17 	ldw	r2,-16(fp)
  80cff4:	10800817 	ldw	r2,32(r2)
  80cff8:	10c00054 	ori	r3,r2,1
  80cffc:	e0bffc17 	ldw	r2,-16(fp)
  80d000:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d004:	e0bffc17 	ldw	r2,-16(fp)
  80d008:	10800017 	ldw	r2,0(r2)
  80d00c:	10800104 	addi	r2,r2,4
  80d010:	1007883a 	mov	r3,r2
  80d014:	e0bffc17 	ldw	r2,-16(fp)
  80d018:	10800817 	ldw	r2,32(r2)
  80d01c:	18800035 	stwio	r2,0(r3)
  80d020:	e0bffa17 	ldw	r2,-24(fp)
  80d024:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d028:	e0bff917 	ldw	r2,-28(fp)
  80d02c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80d030:	e0fff517 	ldw	r3,-44(fp)
  80d034:	e0bffd17 	ldw	r2,-12(fp)
  80d038:	18800426 	beq	r3,r2,80d04c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80d03c:	e0fff517 	ldw	r3,-44(fp)
  80d040:	e0bffd17 	ldw	r2,-12(fp)
  80d044:	1885c83a 	sub	r2,r3,r2
  80d048:	00000606 	br	80d064 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80d04c:	e0bfff17 	ldw	r2,-4(fp)
  80d050:	1090000c 	andi	r2,r2,16384
  80d054:	10000226 	beq	r2,zero,80d060 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80d058:	00bffd44 	movi	r2,-11
  80d05c:	00000106 	br	80d064 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80d060:	00bffec4 	movi	r2,-5
}
  80d064:	e037883a 	mov	sp,fp
  80d068:	dfc00117 	ldw	ra,4(sp)
  80d06c:	df000017 	ldw	fp,0(sp)
  80d070:	dec00204 	addi	sp,sp,8
  80d074:	f800283a 	ret

0080d078 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d078:	defff304 	addi	sp,sp,-52
  80d07c:	dfc00c15 	stw	ra,48(sp)
  80d080:	df000b15 	stw	fp,44(sp)
  80d084:	df000b04 	addi	fp,sp,44
  80d088:	e13ffc15 	stw	r4,-16(fp)
  80d08c:	e17ffd15 	stw	r5,-12(fp)
  80d090:	e1bffe15 	stw	r6,-8(fp)
  80d094:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80d098:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80d09c:	e0bffd17 	ldw	r2,-12(fp)
  80d0a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d0a4:	00003706 	br	80d184 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80d0a8:	e0bffc17 	ldw	r2,-16(fp)
  80d0ac:	10800c17 	ldw	r2,48(r2)
  80d0b0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80d0b4:	e0bffc17 	ldw	r2,-16(fp)
  80d0b8:	10800d17 	ldw	r2,52(r2)
  80d0bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80d0c0:	e0fff917 	ldw	r3,-28(fp)
  80d0c4:	e0bff517 	ldw	r2,-44(fp)
  80d0c8:	1880062e 	bgeu	r3,r2,80d0e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80d0cc:	e0fff517 	ldw	r3,-44(fp)
  80d0d0:	e0bff917 	ldw	r2,-28(fp)
  80d0d4:	1885c83a 	sub	r2,r3,r2
  80d0d8:	10bfffc4 	addi	r2,r2,-1
  80d0dc:	e0bff615 	stw	r2,-40(fp)
  80d0e0:	00000b06 	br	80d110 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80d0e4:	e0bff517 	ldw	r2,-44(fp)
  80d0e8:	10000526 	beq	r2,zero,80d100 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80d0ec:	00c20004 	movi	r3,2048
  80d0f0:	e0bff917 	ldw	r2,-28(fp)
  80d0f4:	1885c83a 	sub	r2,r3,r2
  80d0f8:	e0bff615 	stw	r2,-40(fp)
  80d0fc:	00000406 	br	80d110 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80d100:	00c1ffc4 	movi	r3,2047
  80d104:	e0bff917 	ldw	r2,-28(fp)
  80d108:	1885c83a 	sub	r2,r3,r2
  80d10c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80d110:	e0bff617 	ldw	r2,-40(fp)
  80d114:	10001e26 	beq	r2,zero,80d190 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80d118:	e0fffe17 	ldw	r3,-8(fp)
  80d11c:	e0bff617 	ldw	r2,-40(fp)
  80d120:	1880022e 	bgeu	r3,r2,80d12c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80d124:	e0bffe17 	ldw	r2,-8(fp)
  80d128:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80d12c:	e0bffc17 	ldw	r2,-16(fp)
  80d130:	10c20e04 	addi	r3,r2,2104
  80d134:	e0bff917 	ldw	r2,-28(fp)
  80d138:	1885883a 	add	r2,r3,r2
  80d13c:	e1bff617 	ldw	r6,-40(fp)
  80d140:	e17ffd17 	ldw	r5,-12(fp)
  80d144:	1009883a 	mov	r4,r2
  80d148:	080a1940 	call	80a194 <memcpy>
      ptr   += n;
  80d14c:	e0fffd17 	ldw	r3,-12(fp)
  80d150:	e0bff617 	ldw	r2,-40(fp)
  80d154:	1885883a 	add	r2,r3,r2
  80d158:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80d15c:	e0fffe17 	ldw	r3,-8(fp)
  80d160:	e0bff617 	ldw	r2,-40(fp)
  80d164:	1885c83a 	sub	r2,r3,r2
  80d168:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d16c:	e0fff917 	ldw	r3,-28(fp)
  80d170:	e0bff617 	ldw	r2,-40(fp)
  80d174:	1885883a 	add	r2,r3,r2
  80d178:	10c1ffcc 	andi	r3,r2,2047
  80d17c:	e0bffc17 	ldw	r2,-16(fp)
  80d180:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d184:	e0bffe17 	ldw	r2,-8(fp)
  80d188:	00bfc716 	blt	zero,r2,80d0a8 <__alt_mem_onchip_mem+0xff8050a8>
  80d18c:	00000106 	br	80d194 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80d190:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d194:	0005303a 	rdctl	r2,status
  80d198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d19c:	e0fffb17 	ldw	r3,-20(fp)
  80d1a0:	00bfff84 	movi	r2,-2
  80d1a4:	1884703a 	and	r2,r3,r2
  80d1a8:	1001703a 	wrctl	status,r2
  
  return context;
  80d1ac:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80d1b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d1b4:	e0bffc17 	ldw	r2,-16(fp)
  80d1b8:	10800817 	ldw	r2,32(r2)
  80d1bc:	10c00094 	ori	r3,r2,2
  80d1c0:	e0bffc17 	ldw	r2,-16(fp)
  80d1c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d1c8:	e0bffc17 	ldw	r2,-16(fp)
  80d1cc:	10800017 	ldw	r2,0(r2)
  80d1d0:	10800104 	addi	r2,r2,4
  80d1d4:	1007883a 	mov	r3,r2
  80d1d8:	e0bffc17 	ldw	r2,-16(fp)
  80d1dc:	10800817 	ldw	r2,32(r2)
  80d1e0:	18800035 	stwio	r2,0(r3)
  80d1e4:	e0bffa17 	ldw	r2,-24(fp)
  80d1e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d1ec:	e0bff817 	ldw	r2,-32(fp)
  80d1f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80d1f4:	e0bffe17 	ldw	r2,-8(fp)
  80d1f8:	0080100e 	bge	zero,r2,80d23c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80d1fc:	e0bfff17 	ldw	r2,-4(fp)
  80d200:	1090000c 	andi	r2,r2,16384
  80d204:	1000101e 	bne	r2,zero,80d248 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80d208:	0001883a 	nop
  80d20c:	e0bffc17 	ldw	r2,-16(fp)
  80d210:	10c00d17 	ldw	r3,52(r2)
  80d214:	e0bff517 	ldw	r2,-44(fp)
  80d218:	1880051e 	bne	r3,r2,80d230 <altera_avalon_jtag_uart_write+0x1b8>
  80d21c:	e0bffc17 	ldw	r2,-16(fp)
  80d220:	10c00917 	ldw	r3,36(r2)
  80d224:	e0bffc17 	ldw	r2,-16(fp)
  80d228:	10800117 	ldw	r2,4(r2)
  80d22c:	18bff736 	bltu	r3,r2,80d20c <__alt_mem_onchip_mem+0xff80520c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80d230:	e0bffc17 	ldw	r2,-16(fp)
  80d234:	10800917 	ldw	r2,36(r2)
  80d238:	1000051e 	bne	r2,zero,80d250 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80d23c:	e0bffe17 	ldw	r2,-8(fp)
  80d240:	00bfd016 	blt	zero,r2,80d184 <__alt_mem_onchip_mem+0xff805184>
  80d244:	00000306 	br	80d254 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80d248:	0001883a 	nop
  80d24c:	00000106 	br	80d254 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80d250:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80d254:	e0fffd17 	ldw	r3,-12(fp)
  80d258:	e0bff717 	ldw	r2,-36(fp)
  80d25c:	18800426 	beq	r3,r2,80d270 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80d260:	e0fffd17 	ldw	r3,-12(fp)
  80d264:	e0bff717 	ldw	r2,-36(fp)
  80d268:	1885c83a 	sub	r2,r3,r2
  80d26c:	00000606 	br	80d288 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80d270:	e0bfff17 	ldw	r2,-4(fp)
  80d274:	1090000c 	andi	r2,r2,16384
  80d278:	10000226 	beq	r2,zero,80d284 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80d27c:	00bffd44 	movi	r2,-11
  80d280:	00000106 	br	80d288 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80d284:	00bffec4 	movi	r2,-5
}
  80d288:	e037883a 	mov	sp,fp
  80d28c:	dfc00117 	ldw	ra,4(sp)
  80d290:	df000017 	ldw	fp,0(sp)
  80d294:	dec00204 	addi	sp,sp,8
  80d298:	f800283a 	ret

0080d29c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80d29c:	defffa04 	addi	sp,sp,-24
  80d2a0:	dfc00515 	stw	ra,20(sp)
  80d2a4:	df000415 	stw	fp,16(sp)
  80d2a8:	df000404 	addi	fp,sp,16
  80d2ac:	e13ffe15 	stw	r4,-8(fp)
  80d2b0:	2805883a 	mov	r2,r5
  80d2b4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80d2b8:	e0bffe17 	ldw	r2,-8(fp)
  80d2bc:	10800017 	ldw	r2,0(r2)
  80d2c0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80d2c4:	008003f4 	movhi	r2,15
  80d2c8:	10909004 	addi	r2,r2,16960
  80d2cc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80d2d0:	e0bffe17 	ldw	r2,-8(fp)
  80d2d4:	10800803 	ldbu	r2,32(r2)
  80d2d8:	10803fcc 	andi	r2,r2,255
  80d2dc:	1080201c 	xori	r2,r2,128
  80d2e0:	10bfe004 	addi	r2,r2,-128
  80d2e4:	1000151e 	bne	r2,zero,80d33c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80d2e8:	00000906 	br	80d310 <lcd_write_command+0x74>
    if (--i == 0)
  80d2ec:	e0bffc17 	ldw	r2,-16(fp)
  80d2f0:	10bfffc4 	addi	r2,r2,-1
  80d2f4:	e0bffc15 	stw	r2,-16(fp)
  80d2f8:	e0bffc17 	ldw	r2,-16(fp)
  80d2fc:	1000041e 	bne	r2,zero,80d310 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80d300:	e0bffe17 	ldw	r2,-8(fp)
  80d304:	00c00044 	movi	r3,1
  80d308:	10c00805 	stb	r3,32(r2)
      return;
  80d30c:	00000c06 	br	80d340 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80d310:	e0bffd17 	ldw	r2,-12(fp)
  80d314:	10800104 	addi	r2,r2,4
  80d318:	10800037 	ldwio	r2,0(r2)
  80d31c:	1080200c 	andi	r2,r2,128
  80d320:	103ff21e 	bne	r2,zero,80d2ec <__alt_mem_onchip_mem+0xff8052ec>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80d324:	01001904 	movi	r4,100
  80d328:	080f3940 	call	80f394 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80d32c:	e0bffd17 	ldw	r2,-12(fp)
  80d330:	e0ffff03 	ldbu	r3,-4(fp)
  80d334:	10c00035 	stwio	r3,0(r2)
  80d338:	00000106 	br	80d340 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80d33c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80d340:	e037883a 	mov	sp,fp
  80d344:	dfc00117 	ldw	ra,4(sp)
  80d348:	df000017 	ldw	fp,0(sp)
  80d34c:	dec00204 	addi	sp,sp,8
  80d350:	f800283a 	ret

0080d354 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80d354:	defffa04 	addi	sp,sp,-24
  80d358:	dfc00515 	stw	ra,20(sp)
  80d35c:	df000415 	stw	fp,16(sp)
  80d360:	df000404 	addi	fp,sp,16
  80d364:	e13ffe15 	stw	r4,-8(fp)
  80d368:	2805883a 	mov	r2,r5
  80d36c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80d370:	e0bffe17 	ldw	r2,-8(fp)
  80d374:	10800017 	ldw	r2,0(r2)
  80d378:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80d37c:	008003f4 	movhi	r2,15
  80d380:	10909004 	addi	r2,r2,16960
  80d384:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80d388:	e0bffe17 	ldw	r2,-8(fp)
  80d38c:	10800803 	ldbu	r2,32(r2)
  80d390:	10803fcc 	andi	r2,r2,255
  80d394:	1080201c 	xori	r2,r2,128
  80d398:	10bfe004 	addi	r2,r2,-128
  80d39c:	10001d1e 	bne	r2,zero,80d414 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80d3a0:	00000906 	br	80d3c8 <lcd_write_data+0x74>
    if (--i == 0)
  80d3a4:	e0bffc17 	ldw	r2,-16(fp)
  80d3a8:	10bfffc4 	addi	r2,r2,-1
  80d3ac:	e0bffc15 	stw	r2,-16(fp)
  80d3b0:	e0bffc17 	ldw	r2,-16(fp)
  80d3b4:	1000041e 	bne	r2,zero,80d3c8 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80d3b8:	e0bffe17 	ldw	r2,-8(fp)
  80d3bc:	00c00044 	movi	r3,1
  80d3c0:	10c00805 	stb	r3,32(r2)
      return;
  80d3c4:	00001406 	br	80d418 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80d3c8:	e0bffd17 	ldw	r2,-12(fp)
  80d3cc:	10800104 	addi	r2,r2,4
  80d3d0:	10800037 	ldwio	r2,0(r2)
  80d3d4:	1080200c 	andi	r2,r2,128
  80d3d8:	103ff21e 	bne	r2,zero,80d3a4 <__alt_mem_onchip_mem+0xff8053a4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80d3dc:	01001904 	movi	r4,100
  80d3e0:	080f3940 	call	80f394 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80d3e4:	e0bffd17 	ldw	r2,-12(fp)
  80d3e8:	10800204 	addi	r2,r2,8
  80d3ec:	1007883a 	mov	r3,r2
  80d3f0:	e0bfff03 	ldbu	r2,-4(fp)
  80d3f4:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80d3f8:	e0bffe17 	ldw	r2,-8(fp)
  80d3fc:	108008c3 	ldbu	r2,35(r2)
  80d400:	10800044 	addi	r2,r2,1
  80d404:	1007883a 	mov	r3,r2
  80d408:	e0bffe17 	ldw	r2,-8(fp)
  80d40c:	10c008c5 	stb	r3,35(r2)
  80d410:	00000106 	br	80d418 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80d414:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80d418:	e037883a 	mov	sp,fp
  80d41c:	dfc00117 	ldw	ra,4(sp)
  80d420:	df000017 	ldw	fp,0(sp)
  80d424:	dec00204 	addi	sp,sp,8
  80d428:	f800283a 	ret

0080d42c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80d42c:	defffc04 	addi	sp,sp,-16
  80d430:	dfc00315 	stw	ra,12(sp)
  80d434:	df000215 	stw	fp,8(sp)
  80d438:	df000204 	addi	fp,sp,8
  80d43c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80d440:	01400044 	movi	r5,1
  80d444:	e13fff17 	ldw	r4,-4(fp)
  80d448:	080d29c0 	call	80d29c <lcd_write_command>

  sp->x = 0;
  80d44c:	e0bfff17 	ldw	r2,-4(fp)
  80d450:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80d454:	e0bfff17 	ldw	r2,-4(fp)
  80d458:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80d45c:	e0bfff17 	ldw	r2,-4(fp)
  80d460:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d464:	e03ffe15 	stw	zero,-8(fp)
  80d468:	00001b06 	br	80d4d8 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80d46c:	e0bffe17 	ldw	r2,-8(fp)
  80d470:	108018e4 	muli	r2,r2,99
  80d474:	10801004 	addi	r2,r2,64
  80d478:	e0ffff17 	ldw	r3,-4(fp)
  80d47c:	1885883a 	add	r2,r3,r2
  80d480:	01801444 	movi	r6,81
  80d484:	01400804 	movi	r5,32
  80d488:	1009883a 	mov	r4,r2
  80d48c:	080a4380 	call	80a438 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80d490:	e0bffe17 	ldw	r2,-8(fp)
  80d494:	108018e4 	muli	r2,r2,99
  80d498:	10800c04 	addi	r2,r2,48
  80d49c:	e0ffff17 	ldw	r3,-4(fp)
  80d4a0:	1885883a 	add	r2,r3,r2
  80d4a4:	01800404 	movi	r6,16
  80d4a8:	01400804 	movi	r5,32
  80d4ac:	1009883a 	mov	r4,r2
  80d4b0:	080a4380 	call	80a438 <memset>
    sp->line[y].width = 0;
  80d4b4:	e0ffff17 	ldw	r3,-4(fp)
  80d4b8:	e0bffe17 	ldw	r2,-8(fp)
  80d4bc:	108018e4 	muli	r2,r2,99
  80d4c0:	1885883a 	add	r2,r3,r2
  80d4c4:	10802444 	addi	r2,r2,145
  80d4c8:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d4cc:	e0bffe17 	ldw	r2,-8(fp)
  80d4d0:	10800044 	addi	r2,r2,1
  80d4d4:	e0bffe15 	stw	r2,-8(fp)
  80d4d8:	e0bffe17 	ldw	r2,-8(fp)
  80d4dc:	10800090 	cmplti	r2,r2,2
  80d4e0:	103fe21e 	bne	r2,zero,80d46c <__alt_mem_onchip_mem+0xff80546c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80d4e4:	0001883a 	nop
  80d4e8:	e037883a 	mov	sp,fp
  80d4ec:	dfc00117 	ldw	ra,4(sp)
  80d4f0:	df000017 	ldw	fp,0(sp)
  80d4f4:	dec00204 	addi	sp,sp,8
  80d4f8:	f800283a 	ret

0080d4fc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80d4fc:	defff704 	addi	sp,sp,-36
  80d500:	dfc00815 	stw	ra,32(sp)
  80d504:	df000715 	stw	fp,28(sp)
  80d508:	df000704 	addi	fp,sp,28
  80d50c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80d510:	e0bfff17 	ldw	r2,-4(fp)
  80d514:	10800943 	ldbu	r2,37(r2)
  80d518:	10803fcc 	andi	r2,r2,255
  80d51c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d520:	e03ff915 	stw	zero,-28(fp)
  80d524:	00006706 	br	80d6c4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80d528:	e0ffff17 	ldw	r3,-4(fp)
  80d52c:	e0bff917 	ldw	r2,-28(fp)
  80d530:	108018e4 	muli	r2,r2,99
  80d534:	1885883a 	add	r2,r3,r2
  80d538:	10802444 	addi	r2,r2,145
  80d53c:	10800003 	ldbu	r2,0(r2)
  80d540:	10803fcc 	andi	r2,r2,255
  80d544:	1080201c 	xori	r2,r2,128
  80d548:	10bfe004 	addi	r2,r2,-128
  80d54c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80d550:	e0ffff17 	ldw	r3,-4(fp)
  80d554:	e0bff917 	ldw	r2,-28(fp)
  80d558:	108018e4 	muli	r2,r2,99
  80d55c:	1885883a 	add	r2,r3,r2
  80d560:	10802484 	addi	r2,r2,146
  80d564:	10800003 	ldbu	r2,0(r2)
  80d568:	10c03fcc 	andi	r3,r2,255
  80d56c:	e0bffc17 	ldw	r2,-16(fp)
  80d570:	1885383a 	mul	r2,r3,r2
  80d574:	1005d23a 	srai	r2,r2,8
  80d578:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80d57c:	e0fffb17 	ldw	r3,-20(fp)
  80d580:	e0bffd17 	ldw	r2,-12(fp)
  80d584:	18800116 	blt	r3,r2,80d58c <lcd_repaint_screen+0x90>
      offset = 0;
  80d588:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80d58c:	e03ffa15 	stw	zero,-24(fp)
  80d590:	00004606 	br	80d6ac <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80d594:	e0fffa17 	ldw	r3,-24(fp)
  80d598:	e0bffb17 	ldw	r2,-20(fp)
  80d59c:	1885883a 	add	r2,r3,r2
  80d5a0:	e17ffd17 	ldw	r5,-12(fp)
  80d5a4:	1009883a 	mov	r4,r2
  80d5a8:	080b9ec0 	call	80b9ec <__modsi3>
  80d5ac:	1009883a 	mov	r4,r2
  80d5b0:	e0ffff17 	ldw	r3,-4(fp)
  80d5b4:	e0bff917 	ldw	r2,-28(fp)
  80d5b8:	108018e4 	muli	r2,r2,99
  80d5bc:	1885883a 	add	r2,r3,r2
  80d5c0:	1105883a 	add	r2,r2,r4
  80d5c4:	10801004 	addi	r2,r2,64
  80d5c8:	10800003 	ldbu	r2,0(r2)
  80d5cc:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80d5d0:	e0ffff17 	ldw	r3,-4(fp)
  80d5d4:	e0bff917 	ldw	r2,-28(fp)
  80d5d8:	108018e4 	muli	r2,r2,99
  80d5dc:	1887883a 	add	r3,r3,r2
  80d5e0:	e0bffa17 	ldw	r2,-24(fp)
  80d5e4:	1885883a 	add	r2,r3,r2
  80d5e8:	10800c04 	addi	r2,r2,48
  80d5ec:	10800003 	ldbu	r2,0(r2)
  80d5f0:	10c03fcc 	andi	r3,r2,255
  80d5f4:	18c0201c 	xori	r3,r3,128
  80d5f8:	18ffe004 	addi	r3,r3,-128
  80d5fc:	e0bffe07 	ldb	r2,-8(fp)
  80d600:	18802726 	beq	r3,r2,80d6a0 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80d604:	e0fff917 	ldw	r3,-28(fp)
  80d608:	d0a00e04 	addi	r2,gp,-32712
  80d60c:	1885883a 	add	r2,r3,r2
  80d610:	10800003 	ldbu	r2,0(r2)
  80d614:	1007883a 	mov	r3,r2
  80d618:	e0bffa17 	ldw	r2,-24(fp)
  80d61c:	1885883a 	add	r2,r3,r2
  80d620:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80d624:	e0fffe43 	ldbu	r3,-7(fp)
  80d628:	e0bfff17 	ldw	r2,-4(fp)
  80d62c:	108008c3 	ldbu	r2,35(r2)
  80d630:	10803fcc 	andi	r2,r2,255
  80d634:	1080201c 	xori	r2,r2,128
  80d638:	10bfe004 	addi	r2,r2,-128
  80d63c:	18800a26 	beq	r3,r2,80d668 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80d640:	e0fffe43 	ldbu	r3,-7(fp)
  80d644:	00bfe004 	movi	r2,-128
  80d648:	1884b03a 	or	r2,r3,r2
  80d64c:	10803fcc 	andi	r2,r2,255
  80d650:	100b883a 	mov	r5,r2
  80d654:	e13fff17 	ldw	r4,-4(fp)
  80d658:	080d29c0 	call	80d29c <lcd_write_command>
          sp->address = address;
  80d65c:	e0fffe43 	ldbu	r3,-7(fp)
  80d660:	e0bfff17 	ldw	r2,-4(fp)
  80d664:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80d668:	e0bffe03 	ldbu	r2,-8(fp)
  80d66c:	10803fcc 	andi	r2,r2,255
  80d670:	100b883a 	mov	r5,r2
  80d674:	e13fff17 	ldw	r4,-4(fp)
  80d678:	080d3540 	call	80d354 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80d67c:	e0ffff17 	ldw	r3,-4(fp)
  80d680:	e0bff917 	ldw	r2,-28(fp)
  80d684:	108018e4 	muli	r2,r2,99
  80d688:	1887883a 	add	r3,r3,r2
  80d68c:	e0bffa17 	ldw	r2,-24(fp)
  80d690:	1885883a 	add	r2,r3,r2
  80d694:	10800c04 	addi	r2,r2,48
  80d698:	e0fffe03 	ldbu	r3,-8(fp)
  80d69c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80d6a0:	e0bffa17 	ldw	r2,-24(fp)
  80d6a4:	10800044 	addi	r2,r2,1
  80d6a8:	e0bffa15 	stw	r2,-24(fp)
  80d6ac:	e0bffa17 	ldw	r2,-24(fp)
  80d6b0:	10800410 	cmplti	r2,r2,16
  80d6b4:	103fb71e 	bne	r2,zero,80d594 <__alt_mem_onchip_mem+0xff805594>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d6b8:	e0bff917 	ldw	r2,-28(fp)
  80d6bc:	10800044 	addi	r2,r2,1
  80d6c0:	e0bff915 	stw	r2,-28(fp)
  80d6c4:	e0bff917 	ldw	r2,-28(fp)
  80d6c8:	10800090 	cmplti	r2,r2,2
  80d6cc:	103f961e 	bne	r2,zero,80d528 <__alt_mem_onchip_mem+0xff805528>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80d6d0:	0001883a 	nop
  80d6d4:	e037883a 	mov	sp,fp
  80d6d8:	dfc00117 	ldw	ra,4(sp)
  80d6dc:	df000017 	ldw	fp,0(sp)
  80d6e0:	dec00204 	addi	sp,sp,8
  80d6e4:	f800283a 	ret

0080d6e8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80d6e8:	defffc04 	addi	sp,sp,-16
  80d6ec:	dfc00315 	stw	ra,12(sp)
  80d6f0:	df000215 	stw	fp,8(sp)
  80d6f4:	df000204 	addi	fp,sp,8
  80d6f8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d6fc:	e03ffe15 	stw	zero,-8(fp)
  80d700:	00001d06 	br	80d778 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80d704:	e0bffe17 	ldw	r2,-8(fp)
  80d708:	00800f16 	blt	zero,r2,80d748 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80d70c:	e0bffe17 	ldw	r2,-8(fp)
  80d710:	108018e4 	muli	r2,r2,99
  80d714:	10801004 	addi	r2,r2,64
  80d718:	e0ffff17 	ldw	r3,-4(fp)
  80d71c:	1889883a 	add	r4,r3,r2
  80d720:	e0bffe17 	ldw	r2,-8(fp)
  80d724:	10800044 	addi	r2,r2,1
  80d728:	108018e4 	muli	r2,r2,99
  80d72c:	10801004 	addi	r2,r2,64
  80d730:	e0ffff17 	ldw	r3,-4(fp)
  80d734:	1885883a 	add	r2,r3,r2
  80d738:	01801404 	movi	r6,80
  80d73c:	100b883a 	mov	r5,r2
  80d740:	080a1940 	call	80a194 <memcpy>
  80d744:	00000906 	br	80d76c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80d748:	e0bffe17 	ldw	r2,-8(fp)
  80d74c:	108018e4 	muli	r2,r2,99
  80d750:	10801004 	addi	r2,r2,64
  80d754:	e0ffff17 	ldw	r3,-4(fp)
  80d758:	1885883a 	add	r2,r3,r2
  80d75c:	01801404 	movi	r6,80
  80d760:	01400804 	movi	r5,32
  80d764:	1009883a 	mov	r4,r2
  80d768:	080a4380 	call	80a438 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d76c:	e0bffe17 	ldw	r2,-8(fp)
  80d770:	10800044 	addi	r2,r2,1
  80d774:	e0bffe15 	stw	r2,-8(fp)
  80d778:	e0bffe17 	ldw	r2,-8(fp)
  80d77c:	10800090 	cmplti	r2,r2,2
  80d780:	103fe01e 	bne	r2,zero,80d704 <__alt_mem_onchip_mem+0xff805704>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80d784:	e0bfff17 	ldw	r2,-4(fp)
  80d788:	10800883 	ldbu	r2,34(r2)
  80d78c:	10bfffc4 	addi	r2,r2,-1
  80d790:	1007883a 	mov	r3,r2
  80d794:	e0bfff17 	ldw	r2,-4(fp)
  80d798:	10c00885 	stb	r3,34(r2)
}
  80d79c:	0001883a 	nop
  80d7a0:	e037883a 	mov	sp,fp
  80d7a4:	dfc00117 	ldw	ra,4(sp)
  80d7a8:	df000017 	ldw	fp,0(sp)
  80d7ac:	dec00204 	addi	sp,sp,8
  80d7b0:	f800283a 	ret

0080d7b4 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80d7b4:	defff904 	addi	sp,sp,-28
  80d7b8:	dfc00615 	stw	ra,24(sp)
  80d7bc:	df000515 	stw	fp,20(sp)
  80d7c0:	df000504 	addi	fp,sp,20
  80d7c4:	e13ffe15 	stw	r4,-8(fp)
  80d7c8:	2805883a 	mov	r2,r5
  80d7cc:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80d7d0:	e03ffb15 	stw	zero,-20(fp)
  80d7d4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80d7d8:	e0bffe17 	ldw	r2,-8(fp)
  80d7dc:	10800a03 	ldbu	r2,40(r2)
  80d7e0:	10803fcc 	andi	r2,r2,255
  80d7e4:	1080201c 	xori	r2,r2,128
  80d7e8:	10bfe004 	addi	r2,r2,-128
  80d7ec:	108016d8 	cmpnei	r2,r2,91
  80d7f0:	1000411e 	bne	r2,zero,80d8f8 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80d7f4:	e0bffe17 	ldw	r2,-8(fp)
  80d7f8:	10800a04 	addi	r2,r2,40
  80d7fc:	10800044 	addi	r2,r2,1
  80d800:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80d804:	00000c06 	br	80d838 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80d808:	e0bffb17 	ldw	r2,-20(fp)
  80d80c:	10c002a4 	muli	r3,r2,10
  80d810:	e0bffd17 	ldw	r2,-12(fp)
  80d814:	11000044 	addi	r4,r2,1
  80d818:	e13ffd15 	stw	r4,-12(fp)
  80d81c:	10800003 	ldbu	r2,0(r2)
  80d820:	10803fcc 	andi	r2,r2,255
  80d824:	1080201c 	xori	r2,r2,128
  80d828:	10bfe004 	addi	r2,r2,-128
  80d82c:	10bff404 	addi	r2,r2,-48
  80d830:	1885883a 	add	r2,r3,r2
  80d834:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80d838:	d0e01017 	ldw	r3,-32704(gp)
  80d83c:	e0bffd17 	ldw	r2,-12(fp)
  80d840:	10800003 	ldbu	r2,0(r2)
  80d844:	10803fcc 	andi	r2,r2,255
  80d848:	1080201c 	xori	r2,r2,128
  80d84c:	10bfe004 	addi	r2,r2,-128
  80d850:	10800044 	addi	r2,r2,1
  80d854:	1885883a 	add	r2,r3,r2
  80d858:	10800003 	ldbu	r2,0(r2)
  80d85c:	10803fcc 	andi	r2,r2,255
  80d860:	1080010c 	andi	r2,r2,4
  80d864:	103fe81e 	bne	r2,zero,80d808 <__alt_mem_onchip_mem+0xff805808>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80d868:	e0bffd17 	ldw	r2,-12(fp)
  80d86c:	10800003 	ldbu	r2,0(r2)
  80d870:	10803fcc 	andi	r2,r2,255
  80d874:	1080201c 	xori	r2,r2,128
  80d878:	10bfe004 	addi	r2,r2,-128
  80d87c:	10800ed8 	cmpnei	r2,r2,59
  80d880:	10001f1e 	bne	r2,zero,80d900 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80d884:	e0bffd17 	ldw	r2,-12(fp)
  80d888:	10800044 	addi	r2,r2,1
  80d88c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80d890:	00000c06 	br	80d8c4 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80d894:	e0bffc17 	ldw	r2,-16(fp)
  80d898:	10c002a4 	muli	r3,r2,10
  80d89c:	e0bffd17 	ldw	r2,-12(fp)
  80d8a0:	11000044 	addi	r4,r2,1
  80d8a4:	e13ffd15 	stw	r4,-12(fp)
  80d8a8:	10800003 	ldbu	r2,0(r2)
  80d8ac:	10803fcc 	andi	r2,r2,255
  80d8b0:	1080201c 	xori	r2,r2,128
  80d8b4:	10bfe004 	addi	r2,r2,-128
  80d8b8:	10bff404 	addi	r2,r2,-48
  80d8bc:	1885883a 	add	r2,r3,r2
  80d8c0:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80d8c4:	d0e01017 	ldw	r3,-32704(gp)
  80d8c8:	e0bffd17 	ldw	r2,-12(fp)
  80d8cc:	10800003 	ldbu	r2,0(r2)
  80d8d0:	10803fcc 	andi	r2,r2,255
  80d8d4:	1080201c 	xori	r2,r2,128
  80d8d8:	10bfe004 	addi	r2,r2,-128
  80d8dc:	10800044 	addi	r2,r2,1
  80d8e0:	1885883a 	add	r2,r3,r2
  80d8e4:	10800003 	ldbu	r2,0(r2)
  80d8e8:	10803fcc 	andi	r2,r2,255
  80d8ec:	1080010c 	andi	r2,r2,4
  80d8f0:	103fe81e 	bne	r2,zero,80d894 <__alt_mem_onchip_mem+0xff805894>
  80d8f4:	00000206 	br	80d900 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80d8f8:	00bfffc4 	movi	r2,-1
  80d8fc:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80d900:	e0bfff07 	ldb	r2,-4(fp)
  80d904:	10c012a0 	cmpeqi	r3,r2,74
  80d908:	1800291e 	bne	r3,zero,80d9b0 <lcd_handle_escape+0x1fc>
  80d90c:	10c012c8 	cmpgei	r3,r2,75
  80d910:	1800031e 	bne	r3,zero,80d920 <lcd_handle_escape+0x16c>
  80d914:	10801220 	cmpeqi	r2,r2,72
  80d918:	1000061e 	bne	r2,zero,80d934 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80d91c:	00004a06 	br	80da48 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80d920:	10c012e0 	cmpeqi	r3,r2,75
  80d924:	1800281e 	bne	r3,zero,80d9c8 <lcd_handle_escape+0x214>
  80d928:	108019a0 	cmpeqi	r2,r2,102
  80d92c:	1000011e 	bne	r2,zero,80d934 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80d930:	00004506 	br	80da48 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80d934:	e0bffc17 	ldw	r2,-16(fp)
  80d938:	0080050e 	bge	zero,r2,80d950 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80d93c:	e0bffc17 	ldw	r2,-16(fp)
  80d940:	10bfffc4 	addi	r2,r2,-1
  80d944:	1007883a 	mov	r3,r2
  80d948:	e0bffe17 	ldw	r2,-8(fp)
  80d94c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80d950:	e0bffb17 	ldw	r2,-20(fp)
  80d954:	0080370e 	bge	zero,r2,80da34 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80d958:	e0bffb17 	ldw	r2,-20(fp)
  80d95c:	10bfffc4 	addi	r2,r2,-1
  80d960:	1007883a 	mov	r3,r2
  80d964:	e0bffe17 	ldw	r2,-8(fp)
  80d968:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80d96c:	e0bffe17 	ldw	r2,-8(fp)
  80d970:	10800883 	ldbu	r2,34(r2)
  80d974:	10803fcc 	andi	r2,r2,255
  80d978:	10800170 	cmpltui	r2,r2,5
  80d97c:	1000061e 	bne	r2,zero,80d998 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80d980:	e0bffe17 	ldw	r2,-8(fp)
  80d984:	00c00104 	movi	r3,4
  80d988:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80d98c:	00000206 	br	80d998 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80d990:	e13ffe17 	ldw	r4,-8(fp)
  80d994:	080d6e80 	call	80d6e8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80d998:	e0bffe17 	ldw	r2,-8(fp)
  80d99c:	10800883 	ldbu	r2,34(r2)
  80d9a0:	10803fcc 	andi	r2,r2,255
  80d9a4:	108000e8 	cmpgeui	r2,r2,3
  80d9a8:	103ff91e 	bne	r2,zero,80d990 <__alt_mem_onchip_mem+0xff805990>
        lcd_scroll_up(sp);
    }
    break;
  80d9ac:	00002106 	br	80da34 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80d9b0:	e0bffb17 	ldw	r2,-20(fp)
  80d9b4:	10800098 	cmpnei	r2,r2,2
  80d9b8:	1000201e 	bne	r2,zero,80da3c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80d9bc:	e13ffe17 	ldw	r4,-8(fp)
  80d9c0:	080d42c0 	call	80d42c <lcd_clear_screen>
    break;
  80d9c4:	00001d06 	br	80da3c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80d9c8:	e0bffb17 	ldw	r2,-20(fp)
  80d9cc:	00801d16 	blt	zero,r2,80da44 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80d9d0:	e0bffe17 	ldw	r2,-8(fp)
  80d9d4:	10800843 	ldbu	r2,33(r2)
  80d9d8:	10803fcc 	andi	r2,r2,255
  80d9dc:	10801428 	cmpgeui	r2,r2,80
  80d9e0:	1000181e 	bne	r2,zero,80da44 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80d9e4:	e0bffe17 	ldw	r2,-8(fp)
  80d9e8:	10800883 	ldbu	r2,34(r2)
  80d9ec:	10803fcc 	andi	r2,r2,255
  80d9f0:	108018e4 	muli	r2,r2,99
  80d9f4:	10801004 	addi	r2,r2,64
  80d9f8:	e0fffe17 	ldw	r3,-8(fp)
  80d9fc:	1887883a 	add	r3,r3,r2
  80da00:	e0bffe17 	ldw	r2,-8(fp)
  80da04:	10800843 	ldbu	r2,33(r2)
  80da08:	10803fcc 	andi	r2,r2,255
  80da0c:	1889883a 	add	r4,r3,r2
  80da10:	e0bffe17 	ldw	r2,-8(fp)
  80da14:	10800843 	ldbu	r2,33(r2)
  80da18:	10803fcc 	andi	r2,r2,255
  80da1c:	00c01404 	movi	r3,80
  80da20:	1885c83a 	sub	r2,r3,r2
  80da24:	100d883a 	mov	r6,r2
  80da28:	01400804 	movi	r5,32
  80da2c:	080a4380 	call	80a438 <memset>
    }
    break;
  80da30:	00000406 	br	80da44 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80da34:	0001883a 	nop
  80da38:	00000306 	br	80da48 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80da3c:	0001883a 	nop
  80da40:	00000106 	br	80da48 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80da44:	0001883a 	nop
  }
}
  80da48:	0001883a 	nop
  80da4c:	e037883a 	mov	sp,fp
  80da50:	dfc00117 	ldw	ra,4(sp)
  80da54:	df000017 	ldw	fp,0(sp)
  80da58:	dec00204 	addi	sp,sp,8
  80da5c:	f800283a 	ret

0080da60 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80da60:	defff304 	addi	sp,sp,-52
  80da64:	dfc00c15 	stw	ra,48(sp)
  80da68:	df000b15 	stw	fp,44(sp)
  80da6c:	df000b04 	addi	fp,sp,44
  80da70:	e13ffc15 	stw	r4,-16(fp)
  80da74:	e17ffd15 	stw	r5,-12(fp)
  80da78:	e1bffe15 	stw	r6,-8(fp)
  80da7c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80da80:	e0bffe17 	ldw	r2,-8(fp)
  80da84:	e0fffd17 	ldw	r3,-12(fp)
  80da88:	1885883a 	add	r2,r3,r2
  80da8c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80da90:	e0bffc17 	ldw	r2,-16(fp)
  80da94:	00c00044 	movi	r3,1
  80da98:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80da9c:	00009906 	br	80dd04 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80daa0:	e0bffd17 	ldw	r2,-12(fp)
  80daa4:	10800003 	ldbu	r2,0(r2)
  80daa8:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80daac:	e0bffc17 	ldw	r2,-16(fp)
  80dab0:	10800903 	ldbu	r2,36(r2)
  80dab4:	10803fcc 	andi	r2,r2,255
  80dab8:	1080201c 	xori	r2,r2,128
  80dabc:	10bfe004 	addi	r2,r2,-128
  80dac0:	10003716 	blt	r2,zero,80dba0 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80dac4:	e0bffc17 	ldw	r2,-16(fp)
  80dac8:	10800903 	ldbu	r2,36(r2)
  80dacc:	10803fcc 	andi	r2,r2,255
  80dad0:	1080201c 	xori	r2,r2,128
  80dad4:	10bfe004 	addi	r2,r2,-128
  80dad8:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80dadc:	e0bffa17 	ldw	r2,-24(fp)
  80dae0:	1000031e 	bne	r2,zero,80daf0 <altera_avalon_lcd_16207_write+0x90>
  80dae4:	e0bff907 	ldb	r2,-28(fp)
  80dae8:	108016d8 	cmpnei	r2,r2,91
  80daec:	10000d1e 	bne	r2,zero,80db24 <altera_avalon_lcd_16207_write+0xc4>
  80daf0:	e0bffa17 	ldw	r2,-24(fp)
  80daf4:	10001826 	beq	r2,zero,80db58 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80daf8:	d0e01017 	ldw	r3,-32704(gp)
  80dafc:	e0bff907 	ldb	r2,-28(fp)
  80db00:	10800044 	addi	r2,r2,1
  80db04:	1885883a 	add	r2,r3,r2
  80db08:	10800003 	ldbu	r2,0(r2)
  80db0c:	10803fcc 	andi	r2,r2,255
  80db10:	1080010c 	andi	r2,r2,4
  80db14:	1000101e 	bne	r2,zero,80db58 <altera_avalon_lcd_16207_write+0xf8>
  80db18:	e0bff907 	ldb	r2,-28(fp)
  80db1c:	10800ee0 	cmpeqi	r2,r2,59
  80db20:	10000d1e 	bne	r2,zero,80db58 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80db24:	e0fffc17 	ldw	r3,-16(fp)
  80db28:	e0bffa17 	ldw	r2,-24(fp)
  80db2c:	1885883a 	add	r2,r3,r2
  80db30:	10800a04 	addi	r2,r2,40
  80db34:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80db38:	e0bff907 	ldb	r2,-28(fp)
  80db3c:	100b883a 	mov	r5,r2
  80db40:	e13ffc17 	ldw	r4,-16(fp)
  80db44:	080d7b40 	call	80d7b4 <lcd_handle_escape>

        sp->esccount = -1;
  80db48:	e0bffc17 	ldw	r2,-16(fp)
  80db4c:	00ffffc4 	movi	r3,-1
  80db50:	10c00905 	stb	r3,36(r2)
  80db54:	00006806 	br	80dcf8 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80db58:	e0bffc17 	ldw	r2,-16(fp)
  80db5c:	10800903 	ldbu	r2,36(r2)
  80db60:	10803fcc 	andi	r2,r2,255
  80db64:	108001e8 	cmpgeui	r2,r2,7
  80db68:	1000631e 	bne	r2,zero,80dcf8 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80db6c:	e0fffc17 	ldw	r3,-16(fp)
  80db70:	e0bffa17 	ldw	r2,-24(fp)
  80db74:	1885883a 	add	r2,r3,r2
  80db78:	10800a04 	addi	r2,r2,40
  80db7c:	e0fff903 	ldbu	r3,-28(fp)
  80db80:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80db84:	e0bffc17 	ldw	r2,-16(fp)
  80db88:	10800903 	ldbu	r2,36(r2)
  80db8c:	10800044 	addi	r2,r2,1
  80db90:	1007883a 	mov	r3,r2
  80db94:	e0bffc17 	ldw	r2,-16(fp)
  80db98:	10c00905 	stb	r3,36(r2)
  80db9c:	00005606 	br	80dcf8 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80dba0:	e0bff907 	ldb	r2,-28(fp)
  80dba4:	108006d8 	cmpnei	r2,r2,27
  80dba8:	1000031e 	bne	r2,zero,80dbb8 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80dbac:	e0bffc17 	ldw	r2,-16(fp)
  80dbb0:	10000905 	stb	zero,36(r2)
  80dbb4:	00005006 	br	80dcf8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80dbb8:	e0bff907 	ldb	r2,-28(fp)
  80dbbc:	10800358 	cmpnei	r2,r2,13
  80dbc0:	1000031e 	bne	r2,zero,80dbd0 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80dbc4:	e0bffc17 	ldw	r2,-16(fp)
  80dbc8:	10000845 	stb	zero,33(r2)
  80dbcc:	00004a06 	br	80dcf8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80dbd0:	e0bff907 	ldb	r2,-28(fp)
  80dbd4:	10800298 	cmpnei	r2,r2,10
  80dbd8:	1000101e 	bne	r2,zero,80dc1c <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80dbdc:	e0bffc17 	ldw	r2,-16(fp)
  80dbe0:	10000845 	stb	zero,33(r2)
      sp->y++;
  80dbe4:	e0bffc17 	ldw	r2,-16(fp)
  80dbe8:	10800883 	ldbu	r2,34(r2)
  80dbec:	10800044 	addi	r2,r2,1
  80dbf0:	1007883a 	mov	r3,r2
  80dbf4:	e0bffc17 	ldw	r2,-16(fp)
  80dbf8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80dbfc:	e0bffc17 	ldw	r2,-16(fp)
  80dc00:	10800883 	ldbu	r2,34(r2)
  80dc04:	10803fcc 	andi	r2,r2,255
  80dc08:	108000f0 	cmpltui	r2,r2,3
  80dc0c:	10003a1e 	bne	r2,zero,80dcf8 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80dc10:	e13ffc17 	ldw	r4,-16(fp)
  80dc14:	080d6e80 	call	80d6e8 <lcd_scroll_up>
  80dc18:	00003706 	br	80dcf8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80dc1c:	e0bff907 	ldb	r2,-28(fp)
  80dc20:	10800218 	cmpnei	r2,r2,8
  80dc24:	10000b1e 	bne	r2,zero,80dc54 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80dc28:	e0bffc17 	ldw	r2,-16(fp)
  80dc2c:	10800843 	ldbu	r2,33(r2)
  80dc30:	10803fcc 	andi	r2,r2,255
  80dc34:	10003026 	beq	r2,zero,80dcf8 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80dc38:	e0bffc17 	ldw	r2,-16(fp)
  80dc3c:	10800843 	ldbu	r2,33(r2)
  80dc40:	10bfffc4 	addi	r2,r2,-1
  80dc44:	1007883a 	mov	r3,r2
  80dc48:	e0bffc17 	ldw	r2,-16(fp)
  80dc4c:	10c00845 	stb	r3,33(r2)
  80dc50:	00002906 	br	80dcf8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80dc54:	d0e01017 	ldw	r3,-32704(gp)
  80dc58:	e0bff907 	ldb	r2,-28(fp)
  80dc5c:	10800044 	addi	r2,r2,1
  80dc60:	1885883a 	add	r2,r3,r2
  80dc64:	10800003 	ldbu	r2,0(r2)
  80dc68:	10803fcc 	andi	r2,r2,255
  80dc6c:	1080201c 	xori	r2,r2,128
  80dc70:	10bfe004 	addi	r2,r2,-128
  80dc74:	108025cc 	andi	r2,r2,151
  80dc78:	10001f26 	beq	r2,zero,80dcf8 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80dc7c:	e0bffc17 	ldw	r2,-16(fp)
  80dc80:	10800883 	ldbu	r2,34(r2)
  80dc84:	10803fcc 	andi	r2,r2,255
  80dc88:	108000b0 	cmpltui	r2,r2,2
  80dc8c:	1000021e 	bne	r2,zero,80dc98 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80dc90:	e13ffc17 	ldw	r4,-16(fp)
  80dc94:	080d6e80 	call	80d6e8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80dc98:	e0bffc17 	ldw	r2,-16(fp)
  80dc9c:	10800843 	ldbu	r2,33(r2)
  80dca0:	10803fcc 	andi	r2,r2,255
  80dca4:	10801428 	cmpgeui	r2,r2,80
  80dca8:	10000d1e 	bne	r2,zero,80dce0 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80dcac:	e0bffc17 	ldw	r2,-16(fp)
  80dcb0:	10800883 	ldbu	r2,34(r2)
  80dcb4:	10c03fcc 	andi	r3,r2,255
  80dcb8:	e0bffc17 	ldw	r2,-16(fp)
  80dcbc:	10800843 	ldbu	r2,33(r2)
  80dcc0:	10803fcc 	andi	r2,r2,255
  80dcc4:	e13ffc17 	ldw	r4,-16(fp)
  80dcc8:	18c018e4 	muli	r3,r3,99
  80dccc:	20c7883a 	add	r3,r4,r3
  80dcd0:	1885883a 	add	r2,r3,r2
  80dcd4:	10801004 	addi	r2,r2,64
  80dcd8:	e0fff903 	ldbu	r3,-28(fp)
  80dcdc:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80dce0:	e0bffc17 	ldw	r2,-16(fp)
  80dce4:	10800843 	ldbu	r2,33(r2)
  80dce8:	10800044 	addi	r2,r2,1
  80dcec:	1007883a 	mov	r3,r2
  80dcf0:	e0bffc17 	ldw	r2,-16(fp)
  80dcf4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80dcf8:	e0bffd17 	ldw	r2,-12(fp)
  80dcfc:	10800044 	addi	r2,r2,1
  80dd00:	e0bffd15 	stw	r2,-12(fp)
  80dd04:	e0fffd17 	ldw	r3,-12(fp)
  80dd08:	e0bff817 	ldw	r2,-32(fp)
  80dd0c:	18bf6436 	bltu	r3,r2,80daa0 <__alt_mem_onchip_mem+0xff805aa0>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80dd10:	00800404 	movi	r2,16
  80dd14:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dd18:	e03ff515 	stw	zero,-44(fp)
  80dd1c:	00003706 	br	80ddfc <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80dd20:	00801404 	movi	r2,80
  80dd24:	e0bff715 	stw	r2,-36(fp)
  80dd28:	00001106 	br	80dd70 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80dd2c:	e0bff717 	ldw	r2,-36(fp)
  80dd30:	10bfffc4 	addi	r2,r2,-1
  80dd34:	e13ffc17 	ldw	r4,-16(fp)
  80dd38:	e0fff517 	ldw	r3,-44(fp)
  80dd3c:	18c018e4 	muli	r3,r3,99
  80dd40:	20c7883a 	add	r3,r4,r3
  80dd44:	1885883a 	add	r2,r3,r2
  80dd48:	10801004 	addi	r2,r2,64
  80dd4c:	10800003 	ldbu	r2,0(r2)
  80dd50:	10803fcc 	andi	r2,r2,255
  80dd54:	1080201c 	xori	r2,r2,128
  80dd58:	10bfe004 	addi	r2,r2,-128
  80dd5c:	10800820 	cmpeqi	r2,r2,32
  80dd60:	10000626 	beq	r2,zero,80dd7c <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80dd64:	e0bff717 	ldw	r2,-36(fp)
  80dd68:	10bfffc4 	addi	r2,r2,-1
  80dd6c:	e0bff715 	stw	r2,-36(fp)
  80dd70:	e0bff717 	ldw	r2,-36(fp)
  80dd74:	00bfed16 	blt	zero,r2,80dd2c <__alt_mem_onchip_mem+0xff805d2c>
  80dd78:	00000106 	br	80dd80 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80dd7c:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80dd80:	e0bff717 	ldw	r2,-36(fp)
  80dd84:	10800448 	cmpgei	r2,r2,17
  80dd88:	1000031e 	bne	r2,zero,80dd98 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80dd8c:	00800404 	movi	r2,16
  80dd90:	e0bff715 	stw	r2,-36(fp)
  80dd94:	00000306 	br	80dda4 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80dd98:	e0bff717 	ldw	r2,-36(fp)
  80dd9c:	10800044 	addi	r2,r2,1
  80dda0:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80dda4:	e0bff717 	ldw	r2,-36(fp)
  80dda8:	1009883a 	mov	r4,r2
  80ddac:	e0fffc17 	ldw	r3,-16(fp)
  80ddb0:	e0bff517 	ldw	r2,-44(fp)
  80ddb4:	108018e4 	muli	r2,r2,99
  80ddb8:	1885883a 	add	r2,r3,r2
  80ddbc:	10802444 	addi	r2,r2,145
  80ddc0:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80ddc4:	e0fff617 	ldw	r3,-40(fp)
  80ddc8:	e0bff717 	ldw	r2,-36(fp)
  80ddcc:	1880020e 	bge	r3,r2,80ddd8 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80ddd0:	e0bff717 	ldw	r2,-36(fp)
  80ddd4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80ddd8:	e0fffc17 	ldw	r3,-16(fp)
  80dddc:	e0bff517 	ldw	r2,-44(fp)
  80dde0:	108018e4 	muli	r2,r2,99
  80dde4:	1885883a 	add	r2,r3,r2
  80dde8:	10802484 	addi	r2,r2,146
  80ddec:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ddf0:	e0bff517 	ldw	r2,-44(fp)
  80ddf4:	10800044 	addi	r2,r2,1
  80ddf8:	e0bff515 	stw	r2,-44(fp)
  80ddfc:	e0bff517 	ldw	r2,-44(fp)
  80de00:	10800090 	cmplti	r2,r2,2
  80de04:	103fc61e 	bne	r2,zero,80dd20 <__alt_mem_onchip_mem+0xff805d20>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80de08:	e0bff617 	ldw	r2,-40(fp)
  80de0c:	10800448 	cmpgei	r2,r2,17
  80de10:	1000031e 	bne	r2,zero,80de20 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80de14:	e0bffc17 	ldw	r2,-16(fp)
  80de18:	10000985 	stb	zero,38(r2)
  80de1c:	00002e06 	br	80ded8 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80de20:	e0bff617 	ldw	r2,-40(fp)
  80de24:	1085883a 	add	r2,r2,r2
  80de28:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80de2c:	e0bff617 	ldw	r2,-40(fp)
  80de30:	1007883a 	mov	r3,r2
  80de34:	e0bffc17 	ldw	r2,-16(fp)
  80de38:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80de3c:	e03ff515 	stw	zero,-44(fp)
  80de40:	00002206 	br	80decc <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80de44:	e0fffc17 	ldw	r3,-16(fp)
  80de48:	e0bff517 	ldw	r2,-44(fp)
  80de4c:	108018e4 	muli	r2,r2,99
  80de50:	1885883a 	add	r2,r3,r2
  80de54:	10802444 	addi	r2,r2,145
  80de58:	10800003 	ldbu	r2,0(r2)
  80de5c:	10803fcc 	andi	r2,r2,255
  80de60:	1080201c 	xori	r2,r2,128
  80de64:	10bfe004 	addi	r2,r2,-128
  80de68:	10800450 	cmplti	r2,r2,17
  80de6c:	1000141e 	bne	r2,zero,80dec0 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80de70:	e0fffc17 	ldw	r3,-16(fp)
  80de74:	e0bff517 	ldw	r2,-44(fp)
  80de78:	108018e4 	muli	r2,r2,99
  80de7c:	1885883a 	add	r2,r3,r2
  80de80:	10802444 	addi	r2,r2,145
  80de84:	10800003 	ldbu	r2,0(r2)
  80de88:	10803fcc 	andi	r2,r2,255
  80de8c:	1080201c 	xori	r2,r2,128
  80de90:	10bfe004 	addi	r2,r2,-128
  80de94:	1004923a 	slli	r2,r2,8
  80de98:	e17ff617 	ldw	r5,-40(fp)
  80de9c:	1009883a 	mov	r4,r2
  80dea0:	080b9680 	call	80b968 <__divsi3>
  80dea4:	1009883a 	mov	r4,r2
  80dea8:	e0fffc17 	ldw	r3,-16(fp)
  80deac:	e0bff517 	ldw	r2,-44(fp)
  80deb0:	108018e4 	muli	r2,r2,99
  80deb4:	1885883a 	add	r2,r3,r2
  80deb8:	10802484 	addi	r2,r2,146
  80debc:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dec0:	e0bff517 	ldw	r2,-44(fp)
  80dec4:	10800044 	addi	r2,r2,1
  80dec8:	e0bff515 	stw	r2,-44(fp)
  80decc:	e0bff517 	ldw	r2,-44(fp)
  80ded0:	10800090 	cmplti	r2,r2,2
  80ded4:	103fdb1e 	bne	r2,zero,80de44 <__alt_mem_onchip_mem+0xff805e44>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80ded8:	e0bffc17 	ldw	r2,-16(fp)
  80dedc:	10800943 	ldbu	r2,37(r2)
  80dee0:	10803fcc 	andi	r2,r2,255
  80dee4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80dee8:	e13ffc17 	ldw	r4,-16(fp)
  80deec:	080d4fc0 	call	80d4fc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80def0:	e0bffc17 	ldw	r2,-16(fp)
  80def4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80def8:	e0bffc17 	ldw	r2,-16(fp)
  80defc:	10800943 	ldbu	r2,37(r2)
  80df00:	10c03fcc 	andi	r3,r2,255
  80df04:	e0bffb17 	ldw	r2,-20(fp)
  80df08:	18800426 	beq	r3,r2,80df1c <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80df0c:	e0bffc17 	ldw	r2,-16(fp)
  80df10:	00c00044 	movi	r3,1
  80df14:	10c009c5 	stb	r3,39(r2)
  }
  80df18:	003fef06 	br	80ded8 <__alt_mem_onchip_mem+0xff805ed8>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80df1c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80df20:	e0bffe17 	ldw	r2,-8(fp)
}
  80df24:	e037883a 	mov	sp,fp
  80df28:	dfc00117 	ldw	ra,4(sp)
  80df2c:	df000017 	ldw	fp,0(sp)
  80df30:	dec00204 	addi	sp,sp,8
  80df34:	f800283a 	ret

0080df38 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80df38:	defffc04 	addi	sp,sp,-16
  80df3c:	dfc00315 	stw	ra,12(sp)
  80df40:	df000215 	stw	fp,8(sp)
  80df44:	df000204 	addi	fp,sp,8
  80df48:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80df4c:	e0bfff17 	ldw	r2,-4(fp)
  80df50:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80df54:	e0bffe17 	ldw	r2,-8(fp)
  80df58:	10800943 	ldbu	r2,37(r2)
  80df5c:	10803fcc 	andi	r2,r2,255
  80df60:	10c00044 	addi	r3,r2,1
  80df64:	e0bffe17 	ldw	r2,-8(fp)
  80df68:	10800983 	ldbu	r2,38(r2)
  80df6c:	10803fcc 	andi	r2,r2,255
  80df70:	18800316 	blt	r3,r2,80df80 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80df74:	e0bffe17 	ldw	r2,-8(fp)
  80df78:	10000945 	stb	zero,37(r2)
  80df7c:	00000606 	br	80df98 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80df80:	e0bffe17 	ldw	r2,-8(fp)
  80df84:	10800943 	ldbu	r2,37(r2)
  80df88:	10800044 	addi	r2,r2,1
  80df8c:	1007883a 	mov	r3,r2
  80df90:	e0bffe17 	ldw	r2,-8(fp)
  80df94:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80df98:	e0bffe17 	ldw	r2,-8(fp)
  80df9c:	10800983 	ldbu	r2,38(r2)
  80dfa0:	10803fcc 	andi	r2,r2,255
  80dfa4:	10000826 	beq	r2,zero,80dfc8 <alt_lcd_16207_timeout+0x90>
  80dfa8:	e0bffe17 	ldw	r2,-8(fp)
  80dfac:	108009c3 	ldbu	r2,39(r2)
  80dfb0:	10803fcc 	andi	r2,r2,255
  80dfb4:	1080201c 	xori	r2,r2,128
  80dfb8:	10bfe004 	addi	r2,r2,-128
  80dfbc:	1000021e 	bne	r2,zero,80dfc8 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80dfc0:	e13ffe17 	ldw	r4,-8(fp)
  80dfc4:	080d4fc0 	call	80d4fc <lcd_repaint_screen>

  return sp->period;
  80dfc8:	e0bffe17 	ldw	r2,-8(fp)
  80dfcc:	10800717 	ldw	r2,28(r2)
}
  80dfd0:	e037883a 	mov	sp,fp
  80dfd4:	dfc00117 	ldw	ra,4(sp)
  80dfd8:	df000017 	ldw	fp,0(sp)
  80dfdc:	dec00204 	addi	sp,sp,8
  80dfe0:	f800283a 	ret

0080dfe4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80dfe4:	defffc04 	addi	sp,sp,-16
  80dfe8:	dfc00315 	stw	ra,12(sp)
  80dfec:	df000215 	stw	fp,8(sp)
  80dff0:	df000204 	addi	fp,sp,8
  80dff4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80dff8:	e0bfff17 	ldw	r2,-4(fp)
  80dffc:	10800017 	ldw	r2,0(r2)
  80e000:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80e004:	e0bfff17 	ldw	r2,-4(fp)
  80e008:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80e00c:	010ea604 	movi	r4,15000
  80e010:	080f3940 	call	80f394 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e014:	e0bffe17 	ldw	r2,-8(fp)
  80e018:	00c00c04 	movi	r3,48
  80e01c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80e020:	01040104 	movi	r4,4100
  80e024:	080f3940 	call	80f394 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e028:	e0bffe17 	ldw	r2,-8(fp)
  80e02c:	00c00c04 	movi	r3,48
  80e030:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80e034:	0100fa04 	movi	r4,1000
  80e038:	080f3940 	call	80f394 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e03c:	e0bffe17 	ldw	r2,-8(fp)
  80e040:	00c00c04 	movi	r3,48
  80e044:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80e048:	01400e04 	movi	r5,56
  80e04c:	e13fff17 	ldw	r4,-4(fp)
  80e050:	080d29c0 	call	80d29c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80e054:	01400204 	movi	r5,8
  80e058:	e13fff17 	ldw	r4,-4(fp)
  80e05c:	080d29c0 	call	80d29c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80e060:	e13fff17 	ldw	r4,-4(fp)
  80e064:	080d42c0 	call	80d42c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80e068:	01400184 	movi	r5,6
  80e06c:	e13fff17 	ldw	r4,-4(fp)
  80e070:	080d29c0 	call	80d29c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80e074:	01400304 	movi	r5,12
  80e078:	e13fff17 	ldw	r4,-4(fp)
  80e07c:	080d29c0 	call	80d29c <lcd_write_command>

  sp->esccount = -1;
  80e080:	e0bfff17 	ldw	r2,-4(fp)
  80e084:	00ffffc4 	movi	r3,-1
  80e088:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80e08c:	e0bfff17 	ldw	r2,-4(fp)
  80e090:	10800a04 	addi	r2,r2,40
  80e094:	01800204 	movi	r6,8
  80e098:	000b883a 	mov	r5,zero
  80e09c:	1009883a 	mov	r4,r2
  80e0a0:	080a4380 	call	80a438 <memset>

  sp->scrollpos = 0;
  80e0a4:	e0bfff17 	ldw	r2,-4(fp)
  80e0a8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80e0ac:	e0bfff17 	ldw	r2,-4(fp)
  80e0b0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80e0b4:	e0bfff17 	ldw	r2,-4(fp)
  80e0b8:	100009c5 	stb	zero,39(r2)
  80e0bc:	d0a73117 	ldw	r2,-25404(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80e0c0:	01400284 	movi	r5,10
  80e0c4:	1009883a 	mov	r4,r2
  80e0c8:	080ba600 	call	80ba60 <__udivsi3>
  80e0cc:	1007883a 	mov	r3,r2
  80e0d0:	e0bfff17 	ldw	r2,-4(fp)
  80e0d4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80e0d8:	e0bfff17 	ldw	r2,-4(fp)
  80e0dc:	10c00104 	addi	r3,r2,4
  80e0e0:	e0bfff17 	ldw	r2,-4(fp)
  80e0e4:	10800717 	ldw	r2,28(r2)
  80e0e8:	e1ffff17 	ldw	r7,-4(fp)
  80e0ec:	01802074 	movhi	r6,129
  80e0f0:	31b7ce04 	addi	r6,r6,-8392
  80e0f4:	100b883a 	mov	r5,r2
  80e0f8:	1809883a 	mov	r4,r3
  80e0fc:	080bb1c0 	call	80bb1c <alt_alarm_start>
}
  80e100:	0001883a 	nop
  80e104:	e037883a 	mov	sp,fp
  80e108:	dfc00117 	ldw	ra,4(sp)
  80e10c:	df000017 	ldw	fp,0(sp)
  80e110:	dec00204 	addi	sp,sp,8
  80e114:	f800283a 	ret

0080e118 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e118:	defffa04 	addi	sp,sp,-24
  80e11c:	dfc00515 	stw	ra,20(sp)
  80e120:	df000415 	stw	fp,16(sp)
  80e124:	df000404 	addi	fp,sp,16
  80e128:	e13ffd15 	stw	r4,-12(fp)
  80e12c:	e17ffe15 	stw	r5,-8(fp)
  80e130:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80e134:	e0bffd17 	ldw	r2,-12(fp)
  80e138:	10800017 	ldw	r2,0(r2)
  80e13c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80e140:	e0bffc17 	ldw	r2,-16(fp)
  80e144:	10c00a04 	addi	r3,r2,40
  80e148:	e0bffd17 	ldw	r2,-12(fp)
  80e14c:	10800217 	ldw	r2,8(r2)
  80e150:	100f883a 	mov	r7,r2
  80e154:	e1bfff17 	ldw	r6,-4(fp)
  80e158:	e17ffe17 	ldw	r5,-8(fp)
  80e15c:	1809883a 	mov	r4,r3
  80e160:	080da600 	call	80da60 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80e164:	e037883a 	mov	sp,fp
  80e168:	dfc00117 	ldw	ra,4(sp)
  80e16c:	df000017 	ldw	fp,0(sp)
  80e170:	dec00204 	addi	sp,sp,8
  80e174:	f800283a 	ret

0080e178 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80e178:	defffa04 	addi	sp,sp,-24
  80e17c:	dfc00515 	stw	ra,20(sp)
  80e180:	df000415 	stw	fp,16(sp)
  80e184:	df000404 	addi	fp,sp,16
  80e188:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80e18c:	0007883a 	mov	r3,zero
  80e190:	e0bfff17 	ldw	r2,-4(fp)
  80e194:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80e198:	e0bfff17 	ldw	r2,-4(fp)
  80e19c:	10800104 	addi	r2,r2,4
  80e1a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e1a4:	0005303a 	rdctl	r2,status
  80e1a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e1ac:	e0fffd17 	ldw	r3,-12(fp)
  80e1b0:	00bfff84 	movi	r2,-2
  80e1b4:	1884703a 	and	r2,r3,r2
  80e1b8:	1001703a 	wrctl	status,r2
  
  return context;
  80e1bc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80e1c0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80e1c4:	080c4f40 	call	80c4f4 <alt_tick>
  80e1c8:	e0bffc17 	ldw	r2,-16(fp)
  80e1cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e1d0:	e0bffe17 	ldw	r2,-8(fp)
  80e1d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80e1d8:	0001883a 	nop
  80e1dc:	e037883a 	mov	sp,fp
  80e1e0:	dfc00117 	ldw	ra,4(sp)
  80e1e4:	df000017 	ldw	fp,0(sp)
  80e1e8:	dec00204 	addi	sp,sp,8
  80e1ec:	f800283a 	ret

0080e1f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80e1f0:	defff804 	addi	sp,sp,-32
  80e1f4:	dfc00715 	stw	ra,28(sp)
  80e1f8:	df000615 	stw	fp,24(sp)
  80e1fc:	df000604 	addi	fp,sp,24
  80e200:	e13ffc15 	stw	r4,-16(fp)
  80e204:	e17ffd15 	stw	r5,-12(fp)
  80e208:	e1bffe15 	stw	r6,-8(fp)
  80e20c:	e1ffff15 	stw	r7,-4(fp)
  80e210:	e0bfff17 	ldw	r2,-4(fp)
  80e214:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80e218:	d0a73117 	ldw	r2,-25404(gp)
  80e21c:	1000021e 	bne	r2,zero,80e228 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80e220:	e0bffb17 	ldw	r2,-20(fp)
  80e224:	d0a73115 	stw	r2,-25404(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80e228:	e0bffc17 	ldw	r2,-16(fp)
  80e22c:	10800104 	addi	r2,r2,4
  80e230:	00c001c4 	movi	r3,7
  80e234:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80e238:	d8000015 	stw	zero,0(sp)
  80e23c:	e1fffc17 	ldw	r7,-16(fp)
  80e240:	01802074 	movhi	r6,129
  80e244:	31b85e04 	addi	r6,r6,-7816
  80e248:	e17ffe17 	ldw	r5,-8(fp)
  80e24c:	e13ffd17 	ldw	r4,-12(fp)
  80e250:	080ed600 	call	80ed60 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80e254:	0001883a 	nop
  80e258:	e037883a 	mov	sp,fp
  80e25c:	dfc00117 	ldw	ra,4(sp)
  80e260:	df000017 	ldw	fp,0(sp)
  80e264:	dec00204 	addi	sp,sp,8
  80e268:	f800283a 	ret

0080e26c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80e26c:	defffa04 	addi	sp,sp,-24
  80e270:	dfc00515 	stw	ra,20(sp)
  80e274:	df000415 	stw	fp,16(sp)
  80e278:	df000404 	addi	fp,sp,16
  80e27c:	e13ffd15 	stw	r4,-12(fp)
  80e280:	e17ffe15 	stw	r5,-8(fp)
  80e284:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80e288:	e0bffd17 	ldw	r2,-12(fp)
  80e28c:	10800017 	ldw	r2,0(r2)
  80e290:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80e294:	e0bffc17 	ldw	r2,-16(fp)
  80e298:	10c00a04 	addi	r3,r2,40
  80e29c:	e0bffd17 	ldw	r2,-12(fp)
  80e2a0:	10800217 	ldw	r2,8(r2)
  80e2a4:	100f883a 	mov	r7,r2
  80e2a8:	e1bfff17 	ldw	r6,-4(fp)
  80e2ac:	e17ffe17 	ldw	r5,-8(fp)
  80e2b0:	1809883a 	mov	r4,r3
  80e2b4:	080e7800 	call	80e780 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80e2b8:	e037883a 	mov	sp,fp
  80e2bc:	dfc00117 	ldw	ra,4(sp)
  80e2c0:	df000017 	ldw	fp,0(sp)
  80e2c4:	dec00204 	addi	sp,sp,8
  80e2c8:	f800283a 	ret

0080e2cc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e2cc:	defffa04 	addi	sp,sp,-24
  80e2d0:	dfc00515 	stw	ra,20(sp)
  80e2d4:	df000415 	stw	fp,16(sp)
  80e2d8:	df000404 	addi	fp,sp,16
  80e2dc:	e13ffd15 	stw	r4,-12(fp)
  80e2e0:	e17ffe15 	stw	r5,-8(fp)
  80e2e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80e2e8:	e0bffd17 	ldw	r2,-12(fp)
  80e2ec:	10800017 	ldw	r2,0(r2)
  80e2f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80e2f4:	e0bffc17 	ldw	r2,-16(fp)
  80e2f8:	10c00a04 	addi	r3,r2,40
  80e2fc:	e0bffd17 	ldw	r2,-12(fp)
  80e300:	10800217 	ldw	r2,8(r2)
  80e304:	100f883a 	mov	r7,r2
  80e308:	e1bfff17 	ldw	r6,-4(fp)
  80e30c:	e17ffe17 	ldw	r5,-8(fp)
  80e310:	1809883a 	mov	r4,r3
  80e314:	080e9980 	call	80e998 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80e318:	e037883a 	mov	sp,fp
  80e31c:	dfc00117 	ldw	ra,4(sp)
  80e320:	df000017 	ldw	fp,0(sp)
  80e324:	dec00204 	addi	sp,sp,8
  80e328:	f800283a 	ret

0080e32c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80e32c:	defffc04 	addi	sp,sp,-16
  80e330:	dfc00315 	stw	ra,12(sp)
  80e334:	df000215 	stw	fp,8(sp)
  80e338:	df000204 	addi	fp,sp,8
  80e33c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80e340:	e0bfff17 	ldw	r2,-4(fp)
  80e344:	10800017 	ldw	r2,0(r2)
  80e348:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80e34c:	e0bffe17 	ldw	r2,-8(fp)
  80e350:	10c00a04 	addi	r3,r2,40
  80e354:	e0bfff17 	ldw	r2,-4(fp)
  80e358:	10800217 	ldw	r2,8(r2)
  80e35c:	100b883a 	mov	r5,r2
  80e360:	1809883a 	mov	r4,r3
  80e364:	080e6f00 	call	80e6f0 <altera_avalon_uart_close>
}
  80e368:	e037883a 	mov	sp,fp
  80e36c:	dfc00117 	ldw	ra,4(sp)
  80e370:	df000017 	ldw	fp,0(sp)
  80e374:	dec00204 	addi	sp,sp,8
  80e378:	f800283a 	ret

0080e37c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80e37c:	defff804 	addi	sp,sp,-32
  80e380:	dfc00715 	stw	ra,28(sp)
  80e384:	df000615 	stw	fp,24(sp)
  80e388:	df000604 	addi	fp,sp,24
  80e38c:	e13ffd15 	stw	r4,-12(fp)
  80e390:	e17ffe15 	stw	r5,-8(fp)
  80e394:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80e398:	e0bffd17 	ldw	r2,-12(fp)
  80e39c:	10800017 	ldw	r2,0(r2)
  80e3a0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80e3a4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80e3a8:	1000041e 	bne	r2,zero,80e3bc <altera_avalon_uart_init+0x40>
  80e3ac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80e3b0:	1000021e 	bne	r2,zero,80e3bc <altera_avalon_uart_init+0x40>
  80e3b4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80e3b8:	10000226 	beq	r2,zero,80e3c4 <altera_avalon_uart_init+0x48>
  80e3bc:	00800044 	movi	r2,1
  80e3c0:	00000106 	br	80e3c8 <altera_avalon_uart_init+0x4c>
  80e3c4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80e3c8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80e3cc:	e0bffc17 	ldw	r2,-16(fp)
  80e3d0:	10000f1e 	bne	r2,zero,80e410 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80e3d4:	e0bffd17 	ldw	r2,-12(fp)
  80e3d8:	00c32004 	movi	r3,3200
  80e3dc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80e3e0:	e0bffb17 	ldw	r2,-20(fp)
  80e3e4:	10800304 	addi	r2,r2,12
  80e3e8:	e0fffd17 	ldw	r3,-12(fp)
  80e3ec:	18c00117 	ldw	r3,4(r3)
  80e3f0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80e3f4:	d8000015 	stw	zero,0(sp)
  80e3f8:	e1fffd17 	ldw	r7,-12(fp)
  80e3fc:	01802074 	movhi	r6,129
  80e400:	31b90a04 	addi	r6,r6,-7128
  80e404:	e17fff17 	ldw	r5,-4(fp)
  80e408:	e13ffe17 	ldw	r4,-8(fp)
  80e40c:	080ed600 	call	80ed60 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80e410:	0001883a 	nop
  80e414:	e037883a 	mov	sp,fp
  80e418:	dfc00117 	ldw	ra,4(sp)
  80e41c:	df000017 	ldw	fp,0(sp)
  80e420:	dec00204 	addi	sp,sp,8
  80e424:	f800283a 	ret

0080e428 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80e428:	defffa04 	addi	sp,sp,-24
  80e42c:	dfc00515 	stw	ra,20(sp)
  80e430:	df000415 	stw	fp,16(sp)
  80e434:	df000404 	addi	fp,sp,16
  80e438:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80e43c:	e0bfff17 	ldw	r2,-4(fp)
  80e440:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80e444:	e0bffc17 	ldw	r2,-16(fp)
  80e448:	10800017 	ldw	r2,0(r2)
  80e44c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80e450:	e0bffd17 	ldw	r2,-12(fp)
  80e454:	10800204 	addi	r2,r2,8
  80e458:	10800037 	ldwio	r2,0(r2)
  80e45c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80e460:	e0bffd17 	ldw	r2,-12(fp)
  80e464:	10800204 	addi	r2,r2,8
  80e468:	0007883a 	mov	r3,zero
  80e46c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80e470:	e0bffd17 	ldw	r2,-12(fp)
  80e474:	10800204 	addi	r2,r2,8
  80e478:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80e47c:	e0bffe17 	ldw	r2,-8(fp)
  80e480:	1080200c 	andi	r2,r2,128
  80e484:	10000326 	beq	r2,zero,80e494 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80e488:	e17ffe17 	ldw	r5,-8(fp)
  80e48c:	e13ffc17 	ldw	r4,-16(fp)
  80e490:	080e4c40 	call	80e4c4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80e494:	e0bffe17 	ldw	r2,-8(fp)
  80e498:	1081100c 	andi	r2,r2,1088
  80e49c:	10000326 	beq	r2,zero,80e4ac <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80e4a0:	e17ffe17 	ldw	r5,-8(fp)
  80e4a4:	e13ffc17 	ldw	r4,-16(fp)
  80e4a8:	080e5a80 	call	80e5a8 <altera_avalon_uart_txirq>
  }
  

}
  80e4ac:	0001883a 	nop
  80e4b0:	e037883a 	mov	sp,fp
  80e4b4:	dfc00117 	ldw	ra,4(sp)
  80e4b8:	df000017 	ldw	fp,0(sp)
  80e4bc:	dec00204 	addi	sp,sp,8
  80e4c0:	f800283a 	ret

0080e4c4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80e4c4:	defffc04 	addi	sp,sp,-16
  80e4c8:	df000315 	stw	fp,12(sp)
  80e4cc:	df000304 	addi	fp,sp,12
  80e4d0:	e13ffe15 	stw	r4,-8(fp)
  80e4d4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80e4d8:	e0bfff17 	ldw	r2,-4(fp)
  80e4dc:	108000cc 	andi	r2,r2,3
  80e4e0:	10002c1e 	bne	r2,zero,80e594 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80e4e4:	e0bffe17 	ldw	r2,-8(fp)
  80e4e8:	10800317 	ldw	r2,12(r2)
  80e4ec:	e0bffe17 	ldw	r2,-8(fp)
  80e4f0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80e4f4:	e0bffe17 	ldw	r2,-8(fp)
  80e4f8:	10800317 	ldw	r2,12(r2)
  80e4fc:	10800044 	addi	r2,r2,1
  80e500:	10800fcc 	andi	r2,r2,63
  80e504:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80e508:	e0bffe17 	ldw	r2,-8(fp)
  80e50c:	10800317 	ldw	r2,12(r2)
  80e510:	e0fffe17 	ldw	r3,-8(fp)
  80e514:	18c00017 	ldw	r3,0(r3)
  80e518:	18c00037 	ldwio	r3,0(r3)
  80e51c:	1809883a 	mov	r4,r3
  80e520:	e0fffe17 	ldw	r3,-8(fp)
  80e524:	1885883a 	add	r2,r3,r2
  80e528:	10800704 	addi	r2,r2,28
  80e52c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80e530:	e0bffe17 	ldw	r2,-8(fp)
  80e534:	e0fffd17 	ldw	r3,-12(fp)
  80e538:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80e53c:	e0bffe17 	ldw	r2,-8(fp)
  80e540:	10800317 	ldw	r2,12(r2)
  80e544:	10800044 	addi	r2,r2,1
  80e548:	10800fcc 	andi	r2,r2,63
  80e54c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80e550:	e0bffe17 	ldw	r2,-8(fp)
  80e554:	10c00217 	ldw	r3,8(r2)
  80e558:	e0bffd17 	ldw	r2,-12(fp)
  80e55c:	18800e1e 	bne	r3,r2,80e598 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80e560:	e0bffe17 	ldw	r2,-8(fp)
  80e564:	10c00117 	ldw	r3,4(r2)
  80e568:	00bfdfc4 	movi	r2,-129
  80e56c:	1886703a 	and	r3,r3,r2
  80e570:	e0bffe17 	ldw	r2,-8(fp)
  80e574:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80e578:	e0bffe17 	ldw	r2,-8(fp)
  80e57c:	10800017 	ldw	r2,0(r2)
  80e580:	10800304 	addi	r2,r2,12
  80e584:	e0fffe17 	ldw	r3,-8(fp)
  80e588:	18c00117 	ldw	r3,4(r3)
  80e58c:	10c00035 	stwio	r3,0(r2)
  80e590:	00000106 	br	80e598 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80e594:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80e598:	e037883a 	mov	sp,fp
  80e59c:	df000017 	ldw	fp,0(sp)
  80e5a0:	dec00104 	addi	sp,sp,4
  80e5a4:	f800283a 	ret

0080e5a8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80e5a8:	defffb04 	addi	sp,sp,-20
  80e5ac:	df000415 	stw	fp,16(sp)
  80e5b0:	df000404 	addi	fp,sp,16
  80e5b4:	e13ffc15 	stw	r4,-16(fp)
  80e5b8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80e5bc:	e0bffc17 	ldw	r2,-16(fp)
  80e5c0:	10c00417 	ldw	r3,16(r2)
  80e5c4:	e0bffc17 	ldw	r2,-16(fp)
  80e5c8:	10800517 	ldw	r2,20(r2)
  80e5cc:	18803226 	beq	r3,r2,80e698 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80e5d0:	e0bffc17 	ldw	r2,-16(fp)
  80e5d4:	10800617 	ldw	r2,24(r2)
  80e5d8:	1080008c 	andi	r2,r2,2
  80e5dc:	10000326 	beq	r2,zero,80e5ec <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80e5e0:	e0bffd17 	ldw	r2,-12(fp)
  80e5e4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80e5e8:	10001d26 	beq	r2,zero,80e660 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80e5ec:	e0bffc17 	ldw	r2,-16(fp)
  80e5f0:	10800417 	ldw	r2,16(r2)
  80e5f4:	e0bffc17 	ldw	r2,-16(fp)
  80e5f8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80e5fc:	e0bffc17 	ldw	r2,-16(fp)
  80e600:	10800017 	ldw	r2,0(r2)
  80e604:	10800104 	addi	r2,r2,4
  80e608:	e0fffc17 	ldw	r3,-16(fp)
  80e60c:	18c00417 	ldw	r3,16(r3)
  80e610:	e13ffc17 	ldw	r4,-16(fp)
  80e614:	20c7883a 	add	r3,r4,r3
  80e618:	18c01704 	addi	r3,r3,92
  80e61c:	18c00003 	ldbu	r3,0(r3)
  80e620:	18c03fcc 	andi	r3,r3,255
  80e624:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80e628:	e0bffc17 	ldw	r2,-16(fp)
  80e62c:	10800417 	ldw	r2,16(r2)
  80e630:	10800044 	addi	r2,r2,1
  80e634:	e0fffc17 	ldw	r3,-16(fp)
  80e638:	18800415 	stw	r2,16(r3)
  80e63c:	10c00fcc 	andi	r3,r2,63
  80e640:	e0bffc17 	ldw	r2,-16(fp)
  80e644:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80e648:	e0bffc17 	ldw	r2,-16(fp)
  80e64c:	10800117 	ldw	r2,4(r2)
  80e650:	10c01014 	ori	r3,r2,64
  80e654:	e0bffc17 	ldw	r2,-16(fp)
  80e658:	10c00115 	stw	r3,4(r2)
  80e65c:	00000e06 	br	80e698 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80e660:	e0bffc17 	ldw	r2,-16(fp)
  80e664:	10800017 	ldw	r2,0(r2)
  80e668:	10800204 	addi	r2,r2,8
  80e66c:	10800037 	ldwio	r2,0(r2)
  80e670:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80e674:	e0bffd17 	ldw	r2,-12(fp)
  80e678:	1082000c 	andi	r2,r2,2048
  80e67c:	1000061e 	bne	r2,zero,80e698 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80e680:	e0bffc17 	ldw	r2,-16(fp)
  80e684:	10c00117 	ldw	r3,4(r2)
  80e688:	00bfefc4 	movi	r2,-65
  80e68c:	1886703a 	and	r3,r3,r2
  80e690:	e0bffc17 	ldw	r2,-16(fp)
  80e694:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80e698:	e0bffc17 	ldw	r2,-16(fp)
  80e69c:	10c00417 	ldw	r3,16(r2)
  80e6a0:	e0bffc17 	ldw	r2,-16(fp)
  80e6a4:	10800517 	ldw	r2,20(r2)
  80e6a8:	1880061e 	bne	r3,r2,80e6c4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80e6ac:	e0bffc17 	ldw	r2,-16(fp)
  80e6b0:	10c00117 	ldw	r3,4(r2)
  80e6b4:	00beefc4 	movi	r2,-1089
  80e6b8:	1886703a 	and	r3,r3,r2
  80e6bc:	e0bffc17 	ldw	r2,-16(fp)
  80e6c0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e6c4:	e0bffc17 	ldw	r2,-16(fp)
  80e6c8:	10800017 	ldw	r2,0(r2)
  80e6cc:	10800304 	addi	r2,r2,12
  80e6d0:	e0fffc17 	ldw	r3,-16(fp)
  80e6d4:	18c00117 	ldw	r3,4(r3)
  80e6d8:	10c00035 	stwio	r3,0(r2)
}
  80e6dc:	0001883a 	nop
  80e6e0:	e037883a 	mov	sp,fp
  80e6e4:	df000017 	ldw	fp,0(sp)
  80e6e8:	dec00104 	addi	sp,sp,4
  80e6ec:	f800283a 	ret

0080e6f0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80e6f0:	defffd04 	addi	sp,sp,-12
  80e6f4:	df000215 	stw	fp,8(sp)
  80e6f8:	df000204 	addi	fp,sp,8
  80e6fc:	e13ffe15 	stw	r4,-8(fp)
  80e700:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80e704:	00000506 	br	80e71c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80e708:	e0bfff17 	ldw	r2,-4(fp)
  80e70c:	1090000c 	andi	r2,r2,16384
  80e710:	10000226 	beq	r2,zero,80e71c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80e714:	00bffd44 	movi	r2,-11
  80e718:	00000606 	br	80e734 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80e71c:	e0bffe17 	ldw	r2,-8(fp)
  80e720:	10c00417 	ldw	r3,16(r2)
  80e724:	e0bffe17 	ldw	r2,-8(fp)
  80e728:	10800517 	ldw	r2,20(r2)
  80e72c:	18bff61e 	bne	r3,r2,80e708 <__alt_mem_onchip_mem+0xff806708>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80e730:	0005883a 	mov	r2,zero
}
  80e734:	e037883a 	mov	sp,fp
  80e738:	df000017 	ldw	fp,0(sp)
  80e73c:	dec00104 	addi	sp,sp,4
  80e740:	f800283a 	ret

0080e744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e744:	defffe04 	addi	sp,sp,-8
  80e748:	dfc00115 	stw	ra,4(sp)
  80e74c:	df000015 	stw	fp,0(sp)
  80e750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e754:	d0a00a17 	ldw	r2,-32728(gp)
  80e758:	10000326 	beq	r2,zero,80e768 <alt_get_errno+0x24>
  80e75c:	d0a00a17 	ldw	r2,-32728(gp)
  80e760:	103ee83a 	callr	r2
  80e764:	00000106 	br	80e76c <alt_get_errno+0x28>
  80e768:	d0a72d04 	addi	r2,gp,-25420
}
  80e76c:	e037883a 	mov	sp,fp
  80e770:	dfc00117 	ldw	ra,4(sp)
  80e774:	df000017 	ldw	fp,0(sp)
  80e778:	dec00204 	addi	sp,sp,8
  80e77c:	f800283a 	ret

0080e780 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80e780:	defff204 	addi	sp,sp,-56
  80e784:	dfc00d15 	stw	ra,52(sp)
  80e788:	df000c15 	stw	fp,48(sp)
  80e78c:	df000c04 	addi	fp,sp,48
  80e790:	e13ffc15 	stw	r4,-16(fp)
  80e794:	e17ffd15 	stw	r5,-12(fp)
  80e798:	e1bffe15 	stw	r6,-8(fp)
  80e79c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80e7a0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80e7a4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80e7a8:	e0bfff17 	ldw	r2,-4(fp)
  80e7ac:	1090000c 	andi	r2,r2,16384
  80e7b0:	1005003a 	cmpeq	r2,r2,zero
  80e7b4:	10803fcc 	andi	r2,r2,255
  80e7b8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80e7bc:	00001306 	br	80e80c <altera_avalon_uart_read+0x8c>
    {
      count++;
  80e7c0:	e0bff517 	ldw	r2,-44(fp)
  80e7c4:	10800044 	addi	r2,r2,1
  80e7c8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80e7cc:	e0bffd17 	ldw	r2,-12(fp)
  80e7d0:	10c00044 	addi	r3,r2,1
  80e7d4:	e0fffd15 	stw	r3,-12(fp)
  80e7d8:	e0fffc17 	ldw	r3,-16(fp)
  80e7dc:	18c00217 	ldw	r3,8(r3)
  80e7e0:	e13ffc17 	ldw	r4,-16(fp)
  80e7e4:	20c7883a 	add	r3,r4,r3
  80e7e8:	18c00704 	addi	r3,r3,28
  80e7ec:	18c00003 	ldbu	r3,0(r3)
  80e7f0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80e7f4:	e0bffc17 	ldw	r2,-16(fp)
  80e7f8:	10800217 	ldw	r2,8(r2)
  80e7fc:	10800044 	addi	r2,r2,1
  80e800:	10c00fcc 	andi	r3,r2,63
  80e804:	e0bffc17 	ldw	r2,-16(fp)
  80e808:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80e80c:	e0fff517 	ldw	r3,-44(fp)
  80e810:	e0bffe17 	ldw	r2,-8(fp)
  80e814:	1880050e 	bge	r3,r2,80e82c <altera_avalon_uart_read+0xac>
  80e818:	e0bffc17 	ldw	r2,-16(fp)
  80e81c:	10c00217 	ldw	r3,8(r2)
  80e820:	e0bffc17 	ldw	r2,-16(fp)
  80e824:	10800317 	ldw	r2,12(r2)
  80e828:	18bfe51e 	bne	r3,r2,80e7c0 <__alt_mem_onchip_mem+0xff8067c0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80e82c:	e0bff517 	ldw	r2,-44(fp)
  80e830:	1000251e 	bne	r2,zero,80e8c8 <altera_avalon_uart_read+0x148>
  80e834:	e0bffc17 	ldw	r2,-16(fp)
  80e838:	10c00217 	ldw	r3,8(r2)
  80e83c:	e0bffc17 	ldw	r2,-16(fp)
  80e840:	10800317 	ldw	r2,12(r2)
  80e844:	1880201e 	bne	r3,r2,80e8c8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80e848:	e0bff617 	ldw	r2,-40(fp)
  80e84c:	1000071e 	bne	r2,zero,80e86c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80e850:	080e7440 	call	80e744 <alt_get_errno>
  80e854:	1007883a 	mov	r3,r2
  80e858:	008002c4 	movi	r2,11
  80e85c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80e860:	00800044 	movi	r2,1
  80e864:	e0bff405 	stb	r2,-48(fp)
        break;
  80e868:	00001b06 	br	80e8d8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e86c:	0005303a 	rdctl	r2,status
  80e870:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e874:	e0fff917 	ldw	r3,-28(fp)
  80e878:	00bfff84 	movi	r2,-2
  80e87c:	1884703a 	and	r2,r3,r2
  80e880:	1001703a 	wrctl	status,r2
  
  return context;
  80e884:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80e888:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80e88c:	e0bffc17 	ldw	r2,-16(fp)
  80e890:	10800117 	ldw	r2,4(r2)
  80e894:	10c02014 	ori	r3,r2,128
  80e898:	e0bffc17 	ldw	r2,-16(fp)
  80e89c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e8a0:	e0bffc17 	ldw	r2,-16(fp)
  80e8a4:	10800017 	ldw	r2,0(r2)
  80e8a8:	10800304 	addi	r2,r2,12
  80e8ac:	e0fffc17 	ldw	r3,-16(fp)
  80e8b0:	18c00117 	ldw	r3,4(r3)
  80e8b4:	10c00035 	stwio	r3,0(r2)
  80e8b8:	e0bff817 	ldw	r2,-32(fp)
  80e8bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e8c0:	e0bffa17 	ldw	r2,-24(fp)
  80e8c4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80e8c8:	e0bff517 	ldw	r2,-44(fp)
  80e8cc:	1000021e 	bne	r2,zero,80e8d8 <altera_avalon_uart_read+0x158>
  80e8d0:	e0bffe17 	ldw	r2,-8(fp)
  80e8d4:	103fcd1e 	bne	r2,zero,80e80c <__alt_mem_onchip_mem+0xff80680c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e8d8:	0005303a 	rdctl	r2,status
  80e8dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e8e0:	e0fffb17 	ldw	r3,-20(fp)
  80e8e4:	00bfff84 	movi	r2,-2
  80e8e8:	1884703a 	and	r2,r3,r2
  80e8ec:	1001703a 	wrctl	status,r2
  
  return context;
  80e8f0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80e8f4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80e8f8:	e0bffc17 	ldw	r2,-16(fp)
  80e8fc:	10800117 	ldw	r2,4(r2)
  80e900:	10c02014 	ori	r3,r2,128
  80e904:	e0bffc17 	ldw	r2,-16(fp)
  80e908:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e90c:	e0bffc17 	ldw	r2,-16(fp)
  80e910:	10800017 	ldw	r2,0(r2)
  80e914:	10800304 	addi	r2,r2,12
  80e918:	e0fffc17 	ldw	r3,-16(fp)
  80e91c:	18c00117 	ldw	r3,4(r3)
  80e920:	10c00035 	stwio	r3,0(r2)
  80e924:	e0bff817 	ldw	r2,-32(fp)
  80e928:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e92c:	e0bff717 	ldw	r2,-36(fp)
  80e930:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80e934:	e0bff403 	ldbu	r2,-48(fp)
  80e938:	10000226 	beq	r2,zero,80e944 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80e93c:	00bffd44 	movi	r2,-11
  80e940:	00000106 	br	80e948 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80e944:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80e948:	e037883a 	mov	sp,fp
  80e94c:	dfc00117 	ldw	ra,4(sp)
  80e950:	df000017 	ldw	fp,0(sp)
  80e954:	dec00204 	addi	sp,sp,8
  80e958:	f800283a 	ret

0080e95c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e95c:	defffe04 	addi	sp,sp,-8
  80e960:	dfc00115 	stw	ra,4(sp)
  80e964:	df000015 	stw	fp,0(sp)
  80e968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e96c:	d0a00a17 	ldw	r2,-32728(gp)
  80e970:	10000326 	beq	r2,zero,80e980 <alt_get_errno+0x24>
  80e974:	d0a00a17 	ldw	r2,-32728(gp)
  80e978:	103ee83a 	callr	r2
  80e97c:	00000106 	br	80e984 <alt_get_errno+0x28>
  80e980:	d0a72d04 	addi	r2,gp,-25420
}
  80e984:	e037883a 	mov	sp,fp
  80e988:	dfc00117 	ldw	ra,4(sp)
  80e98c:	df000017 	ldw	fp,0(sp)
  80e990:	dec00204 	addi	sp,sp,8
  80e994:	f800283a 	ret

0080e998 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80e998:	defff204 	addi	sp,sp,-56
  80e99c:	dfc00d15 	stw	ra,52(sp)
  80e9a0:	df000c15 	stw	fp,48(sp)
  80e9a4:	df000c04 	addi	fp,sp,48
  80e9a8:	e13ffc15 	stw	r4,-16(fp)
  80e9ac:	e17ffd15 	stw	r5,-12(fp)
  80e9b0:	e1bffe15 	stw	r6,-8(fp)
  80e9b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80e9b8:	e0bffe17 	ldw	r2,-8(fp)
  80e9bc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80e9c0:	e0bfff17 	ldw	r2,-4(fp)
  80e9c4:	1090000c 	andi	r2,r2,16384
  80e9c8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80e9cc:	00003c06 	br	80eac0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80e9d0:	e0bffc17 	ldw	r2,-16(fp)
  80e9d4:	10800517 	ldw	r2,20(r2)
  80e9d8:	10800044 	addi	r2,r2,1
  80e9dc:	10800fcc 	andi	r2,r2,63
  80e9e0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80e9e4:	e0bffc17 	ldw	r2,-16(fp)
  80e9e8:	10c00417 	ldw	r3,16(r2)
  80e9ec:	e0bff717 	ldw	r2,-36(fp)
  80e9f0:	1880221e 	bne	r3,r2,80ea7c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80e9f4:	e0bff517 	ldw	r2,-44(fp)
  80e9f8:	10000526 	beq	r2,zero,80ea10 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80e9fc:	080e95c0 	call	80e95c <alt_get_errno>
  80ea00:	1007883a 	mov	r3,r2
  80ea04:	008002c4 	movi	r2,11
  80ea08:	18800015 	stw	r2,0(r3)
        break;
  80ea0c:	00002e06 	br	80eac8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea10:	0005303a 	rdctl	r2,status
  80ea14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea18:	e0fff917 	ldw	r3,-28(fp)
  80ea1c:	00bfff84 	movi	r2,-2
  80ea20:	1884703a 	and	r2,r3,r2
  80ea24:	1001703a 	wrctl	status,r2
  
  return context;
  80ea28:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80ea2c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80ea30:	e0bffc17 	ldw	r2,-16(fp)
  80ea34:	10800117 	ldw	r2,4(r2)
  80ea38:	10c11014 	ori	r3,r2,1088
  80ea3c:	e0bffc17 	ldw	r2,-16(fp)
  80ea40:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80ea44:	e0bffc17 	ldw	r2,-16(fp)
  80ea48:	10800017 	ldw	r2,0(r2)
  80ea4c:	10800304 	addi	r2,r2,12
  80ea50:	e0fffc17 	ldw	r3,-16(fp)
  80ea54:	18c00117 	ldw	r3,4(r3)
  80ea58:	10c00035 	stwio	r3,0(r2)
  80ea5c:	e0bff817 	ldw	r2,-32(fp)
  80ea60:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea64:	e0bff617 	ldw	r2,-40(fp)
  80ea68:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80ea6c:	e0bffc17 	ldw	r2,-16(fp)
  80ea70:	10c00417 	ldw	r3,16(r2)
  80ea74:	e0bff717 	ldw	r2,-36(fp)
  80ea78:	18bffc26 	beq	r3,r2,80ea6c <__alt_mem_onchip_mem+0xff806a6c>
      }
    }

    count--;
  80ea7c:	e0bff417 	ldw	r2,-48(fp)
  80ea80:	10bfffc4 	addi	r2,r2,-1
  80ea84:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80ea88:	e0bffc17 	ldw	r2,-16(fp)
  80ea8c:	10c00517 	ldw	r3,20(r2)
  80ea90:	e0bffd17 	ldw	r2,-12(fp)
  80ea94:	11000044 	addi	r4,r2,1
  80ea98:	e13ffd15 	stw	r4,-12(fp)
  80ea9c:	10800003 	ldbu	r2,0(r2)
  80eaa0:	1009883a 	mov	r4,r2
  80eaa4:	e0bffc17 	ldw	r2,-16(fp)
  80eaa8:	10c5883a 	add	r2,r2,r3
  80eaac:	10801704 	addi	r2,r2,92
  80eab0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80eab4:	e0bffc17 	ldw	r2,-16(fp)
  80eab8:	e0fff717 	ldw	r3,-36(fp)
  80eabc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80eac0:	e0bff417 	ldw	r2,-48(fp)
  80eac4:	103fc21e 	bne	r2,zero,80e9d0 <__alt_mem_onchip_mem+0xff8069d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eac8:	0005303a 	rdctl	r2,status
  80eacc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ead0:	e0fffb17 	ldw	r3,-20(fp)
  80ead4:	00bfff84 	movi	r2,-2
  80ead8:	1884703a 	and	r2,r3,r2
  80eadc:	1001703a 	wrctl	status,r2
  
  return context;
  80eae0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80eae4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80eae8:	e0bffc17 	ldw	r2,-16(fp)
  80eaec:	10800117 	ldw	r2,4(r2)
  80eaf0:	10c11014 	ori	r3,r2,1088
  80eaf4:	e0bffc17 	ldw	r2,-16(fp)
  80eaf8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80eafc:	e0bffc17 	ldw	r2,-16(fp)
  80eb00:	10800017 	ldw	r2,0(r2)
  80eb04:	10800304 	addi	r2,r2,12
  80eb08:	e0fffc17 	ldw	r3,-16(fp)
  80eb0c:	18c00117 	ldw	r3,4(r3)
  80eb10:	10c00035 	stwio	r3,0(r2)
  80eb14:	e0bff817 	ldw	r2,-32(fp)
  80eb18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eb1c:	e0bffa17 	ldw	r2,-24(fp)
  80eb20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80eb24:	e0fffe17 	ldw	r3,-8(fp)
  80eb28:	e0bff417 	ldw	r2,-48(fp)
  80eb2c:	1885c83a 	sub	r2,r3,r2
}
  80eb30:	e037883a 	mov	sp,fp
  80eb34:	dfc00117 	ldw	ra,4(sp)
  80eb38:	df000017 	ldw	fp,0(sp)
  80eb3c:	dec00204 	addi	sp,sp,8
  80eb40:	f800283a 	ret

0080eb44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80eb44:	defffe04 	addi	sp,sp,-8
  80eb48:	df000115 	stw	fp,4(sp)
  80eb4c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80eb50:	e03fff15 	stw	zero,-4(fp)
  80eb54:	00000506 	br	80eb6c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80eb58:	e0bfff17 	ldw	r2,-4(fp)
  80eb5c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80eb60:	e0bfff17 	ldw	r2,-4(fp)
  80eb64:	10800804 	addi	r2,r2,32
  80eb68:	e0bfff15 	stw	r2,-4(fp)
  80eb6c:	e0bfff17 	ldw	r2,-4(fp)
  80eb70:	10820030 	cmpltui	r2,r2,2048
  80eb74:	103ff81e 	bne	r2,zero,80eb58 <__alt_mem_onchip_mem+0xff806b58>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80eb78:	0001883a 	nop
  80eb7c:	e037883a 	mov	sp,fp
  80eb80:	df000017 	ldw	fp,0(sp)
  80eb84:	dec00104 	addi	sp,sp,4
  80eb88:	f800283a 	ret

0080eb8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80eb8c:	defffe04 	addi	sp,sp,-8
  80eb90:	dfc00115 	stw	ra,4(sp)
  80eb94:	df000015 	stw	fp,0(sp)
  80eb98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80eb9c:	d0a00a17 	ldw	r2,-32728(gp)
  80eba0:	10000326 	beq	r2,zero,80ebb0 <alt_get_errno+0x24>
  80eba4:	d0a00a17 	ldw	r2,-32728(gp)
  80eba8:	103ee83a 	callr	r2
  80ebac:	00000106 	br	80ebb4 <alt_get_errno+0x28>
  80ebb0:	d0a72d04 	addi	r2,gp,-25420
}
  80ebb4:	e037883a 	mov	sp,fp
  80ebb8:	dfc00117 	ldw	ra,4(sp)
  80ebbc:	df000017 	ldw	fp,0(sp)
  80ebc0:	dec00204 	addi	sp,sp,8
  80ebc4:	f800283a 	ret

0080ebc8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80ebc8:	defffa04 	addi	sp,sp,-24
  80ebcc:	dfc00515 	stw	ra,20(sp)
  80ebd0:	df000415 	stw	fp,16(sp)
  80ebd4:	df000404 	addi	fp,sp,16
  80ebd8:	e13ffe15 	stw	r4,-8(fp)
  80ebdc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80ebe0:	e0bffe17 	ldw	r2,-8(fp)
  80ebe4:	10000326 	beq	r2,zero,80ebf4 <alt_dev_llist_insert+0x2c>
  80ebe8:	e0bffe17 	ldw	r2,-8(fp)
  80ebec:	10800217 	ldw	r2,8(r2)
  80ebf0:	1000061e 	bne	r2,zero,80ec0c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80ebf4:	080eb8c0 	call	80eb8c <alt_get_errno>
  80ebf8:	1007883a 	mov	r3,r2
  80ebfc:	00800584 	movi	r2,22
  80ec00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80ec04:	00bffa84 	movi	r2,-22
  80ec08:	00001306 	br	80ec58 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80ec0c:	e0bffe17 	ldw	r2,-8(fp)
  80ec10:	e0ffff17 	ldw	r3,-4(fp)
  80ec14:	e0fffc15 	stw	r3,-16(fp)
  80ec18:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ec1c:	e0bffd17 	ldw	r2,-12(fp)
  80ec20:	e0fffc17 	ldw	r3,-16(fp)
  80ec24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80ec28:	e0bffc17 	ldw	r2,-16(fp)
  80ec2c:	10c00017 	ldw	r3,0(r2)
  80ec30:	e0bffd17 	ldw	r2,-12(fp)
  80ec34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ec38:	e0bffc17 	ldw	r2,-16(fp)
  80ec3c:	10800017 	ldw	r2,0(r2)
  80ec40:	e0fffd17 	ldw	r3,-12(fp)
  80ec44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80ec48:	e0bffc17 	ldw	r2,-16(fp)
  80ec4c:	e0fffd17 	ldw	r3,-12(fp)
  80ec50:	10c00015 	stw	r3,0(r2)

  return 0;  
  80ec54:	0005883a 	mov	r2,zero
}
  80ec58:	e037883a 	mov	sp,fp
  80ec5c:	dfc00117 	ldw	ra,4(sp)
  80ec60:	df000017 	ldw	fp,0(sp)
  80ec64:	dec00204 	addi	sp,sp,8
  80ec68:	f800283a 	ret

0080ec6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ec6c:	defffd04 	addi	sp,sp,-12
  80ec70:	dfc00215 	stw	ra,8(sp)
  80ec74:	df000115 	stw	fp,4(sp)
  80ec78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ec7c:	00802074 	movhi	r2,129
  80ec80:	10bf0e04 	addi	r2,r2,-968
  80ec84:	e0bfff15 	stw	r2,-4(fp)
  80ec88:	00000606 	br	80eca4 <_do_ctors+0x38>
        (*ctor) (); 
  80ec8c:	e0bfff17 	ldw	r2,-4(fp)
  80ec90:	10800017 	ldw	r2,0(r2)
  80ec94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ec98:	e0bfff17 	ldw	r2,-4(fp)
  80ec9c:	10bfff04 	addi	r2,r2,-4
  80eca0:	e0bfff15 	stw	r2,-4(fp)
  80eca4:	e0ffff17 	ldw	r3,-4(fp)
  80eca8:	00802074 	movhi	r2,129
  80ecac:	10bf0f04 	addi	r2,r2,-964
  80ecb0:	18bff62e 	bgeu	r3,r2,80ec8c <__alt_mem_onchip_mem+0xff806c8c>
        (*ctor) (); 
}
  80ecb4:	0001883a 	nop
  80ecb8:	e037883a 	mov	sp,fp
  80ecbc:	dfc00117 	ldw	ra,4(sp)
  80ecc0:	df000017 	ldw	fp,0(sp)
  80ecc4:	dec00204 	addi	sp,sp,8
  80ecc8:	f800283a 	ret

0080eccc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80eccc:	defffd04 	addi	sp,sp,-12
  80ecd0:	dfc00215 	stw	ra,8(sp)
  80ecd4:	df000115 	stw	fp,4(sp)
  80ecd8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ecdc:	00802074 	movhi	r2,129
  80ece0:	10bf0e04 	addi	r2,r2,-968
  80ece4:	e0bfff15 	stw	r2,-4(fp)
  80ece8:	00000606 	br	80ed04 <_do_dtors+0x38>
        (*dtor) (); 
  80ecec:	e0bfff17 	ldw	r2,-4(fp)
  80ecf0:	10800017 	ldw	r2,0(r2)
  80ecf4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ecf8:	e0bfff17 	ldw	r2,-4(fp)
  80ecfc:	10bfff04 	addi	r2,r2,-4
  80ed00:	e0bfff15 	stw	r2,-4(fp)
  80ed04:	e0ffff17 	ldw	r3,-4(fp)
  80ed08:	00802074 	movhi	r2,129
  80ed0c:	10bf0f04 	addi	r2,r2,-964
  80ed10:	18bff62e 	bgeu	r3,r2,80ecec <__alt_mem_onchip_mem+0xff806cec>
        (*dtor) (); 
}
  80ed14:	0001883a 	nop
  80ed18:	e037883a 	mov	sp,fp
  80ed1c:	dfc00117 	ldw	ra,4(sp)
  80ed20:	df000017 	ldw	fp,0(sp)
  80ed24:	dec00204 	addi	sp,sp,8
  80ed28:	f800283a 	ret

0080ed2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80ed2c:	defffe04 	addi	sp,sp,-8
  80ed30:	dfc00115 	stw	ra,4(sp)
  80ed34:	df000015 	stw	fp,0(sp)
  80ed38:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80ed3c:	01440004 	movi	r5,4096
  80ed40:	0009883a 	mov	r4,zero
  80ed44:	080f77c0 	call	80f77c <alt_icache_flush>
#endif
}
  80ed48:	0001883a 	nop
  80ed4c:	e037883a 	mov	sp,fp
  80ed50:	dfc00117 	ldw	ra,4(sp)
  80ed54:	df000017 	ldw	fp,0(sp)
  80ed58:	dec00204 	addi	sp,sp,8
  80ed5c:	f800283a 	ret

0080ed60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ed60:	defff904 	addi	sp,sp,-28
  80ed64:	dfc00615 	stw	ra,24(sp)
  80ed68:	df000515 	stw	fp,20(sp)
  80ed6c:	df000504 	addi	fp,sp,20
  80ed70:	e13ffc15 	stw	r4,-16(fp)
  80ed74:	e17ffd15 	stw	r5,-12(fp)
  80ed78:	e1bffe15 	stw	r6,-8(fp)
  80ed7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80ed80:	e0800217 	ldw	r2,8(fp)
  80ed84:	d8800015 	stw	r2,0(sp)
  80ed88:	e1ffff17 	ldw	r7,-4(fp)
  80ed8c:	e1bffe17 	ldw	r6,-8(fp)
  80ed90:	e17ffd17 	ldw	r5,-12(fp)
  80ed94:	e13ffc17 	ldw	r4,-16(fp)
  80ed98:	080ef100 	call	80ef10 <alt_iic_isr_register>
}  
  80ed9c:	e037883a 	mov	sp,fp
  80eda0:	dfc00117 	ldw	ra,4(sp)
  80eda4:	df000017 	ldw	fp,0(sp)
  80eda8:	dec00204 	addi	sp,sp,8
  80edac:	f800283a 	ret

0080edb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80edb0:	defff904 	addi	sp,sp,-28
  80edb4:	df000615 	stw	fp,24(sp)
  80edb8:	df000604 	addi	fp,sp,24
  80edbc:	e13ffe15 	stw	r4,-8(fp)
  80edc0:	e17fff15 	stw	r5,-4(fp)
  80edc4:	e0bfff17 	ldw	r2,-4(fp)
  80edc8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80edcc:	0005303a 	rdctl	r2,status
  80edd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80edd4:	e0fffb17 	ldw	r3,-20(fp)
  80edd8:	00bfff84 	movi	r2,-2
  80eddc:	1884703a 	and	r2,r3,r2
  80ede0:	1001703a 	wrctl	status,r2
  
  return context;
  80ede4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ede8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80edec:	00c00044 	movi	r3,1
  80edf0:	e0bffa17 	ldw	r2,-24(fp)
  80edf4:	1884983a 	sll	r2,r3,r2
  80edf8:	1007883a 	mov	r3,r2
  80edfc:	d0a73317 	ldw	r2,-25396(gp)
  80ee00:	1884b03a 	or	r2,r3,r2
  80ee04:	d0a73315 	stw	r2,-25396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ee08:	d0a73317 	ldw	r2,-25396(gp)
  80ee0c:	100170fa 	wrctl	ienable,r2
  80ee10:	e0bffc17 	ldw	r2,-16(fp)
  80ee14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee18:	e0bffd17 	ldw	r2,-12(fp)
  80ee1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ee20:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80ee24:	0001883a 	nop
}
  80ee28:	e037883a 	mov	sp,fp
  80ee2c:	df000017 	ldw	fp,0(sp)
  80ee30:	dec00104 	addi	sp,sp,4
  80ee34:	f800283a 	ret

0080ee38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80ee38:	defff904 	addi	sp,sp,-28
  80ee3c:	df000615 	stw	fp,24(sp)
  80ee40:	df000604 	addi	fp,sp,24
  80ee44:	e13ffe15 	stw	r4,-8(fp)
  80ee48:	e17fff15 	stw	r5,-4(fp)
  80ee4c:	e0bfff17 	ldw	r2,-4(fp)
  80ee50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee54:	0005303a 	rdctl	r2,status
  80ee58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee5c:	e0fffb17 	ldw	r3,-20(fp)
  80ee60:	00bfff84 	movi	r2,-2
  80ee64:	1884703a 	and	r2,r3,r2
  80ee68:	1001703a 	wrctl	status,r2
  
  return context;
  80ee6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ee70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80ee74:	00c00044 	movi	r3,1
  80ee78:	e0bffa17 	ldw	r2,-24(fp)
  80ee7c:	1884983a 	sll	r2,r3,r2
  80ee80:	0084303a 	nor	r2,zero,r2
  80ee84:	1007883a 	mov	r3,r2
  80ee88:	d0a73317 	ldw	r2,-25396(gp)
  80ee8c:	1884703a 	and	r2,r3,r2
  80ee90:	d0a73315 	stw	r2,-25396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ee94:	d0a73317 	ldw	r2,-25396(gp)
  80ee98:	100170fa 	wrctl	ienable,r2
  80ee9c:	e0bffc17 	ldw	r2,-16(fp)
  80eea0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eea4:	e0bffd17 	ldw	r2,-12(fp)
  80eea8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80eeac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80eeb0:	0001883a 	nop
}
  80eeb4:	e037883a 	mov	sp,fp
  80eeb8:	df000017 	ldw	fp,0(sp)
  80eebc:	dec00104 	addi	sp,sp,4
  80eec0:	f800283a 	ret

0080eec4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80eec4:	defffc04 	addi	sp,sp,-16
  80eec8:	df000315 	stw	fp,12(sp)
  80eecc:	df000304 	addi	fp,sp,12
  80eed0:	e13ffe15 	stw	r4,-8(fp)
  80eed4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80eed8:	000530fa 	rdctl	r2,ienable
  80eedc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80eee0:	00c00044 	movi	r3,1
  80eee4:	e0bfff17 	ldw	r2,-4(fp)
  80eee8:	1884983a 	sll	r2,r3,r2
  80eeec:	1007883a 	mov	r3,r2
  80eef0:	e0bffd17 	ldw	r2,-12(fp)
  80eef4:	1884703a 	and	r2,r3,r2
  80eef8:	1004c03a 	cmpne	r2,r2,zero
  80eefc:	10803fcc 	andi	r2,r2,255
}
  80ef00:	e037883a 	mov	sp,fp
  80ef04:	df000017 	ldw	fp,0(sp)
  80ef08:	dec00104 	addi	sp,sp,4
  80ef0c:	f800283a 	ret

0080ef10 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ef10:	defff504 	addi	sp,sp,-44
  80ef14:	dfc00a15 	stw	ra,40(sp)
  80ef18:	df000915 	stw	fp,36(sp)
  80ef1c:	df000904 	addi	fp,sp,36
  80ef20:	e13ffc15 	stw	r4,-16(fp)
  80ef24:	e17ffd15 	stw	r5,-12(fp)
  80ef28:	e1bffe15 	stw	r6,-8(fp)
  80ef2c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80ef30:	00bffa84 	movi	r2,-22
  80ef34:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80ef38:	e0bffd17 	ldw	r2,-12(fp)
  80ef3c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ef40:	e0bff817 	ldw	r2,-32(fp)
  80ef44:	10800808 	cmpgei	r2,r2,32
  80ef48:	1000271e 	bne	r2,zero,80efe8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef4c:	0005303a 	rdctl	r2,status
  80ef50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef54:	e0fffb17 	ldw	r3,-20(fp)
  80ef58:	00bfff84 	movi	r2,-2
  80ef5c:	1884703a 	and	r2,r3,r2
  80ef60:	1001703a 	wrctl	status,r2
  
  return context;
  80ef64:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80ef68:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80ef6c:	00802074 	movhi	r2,129
  80ef70:	108e6604 	addi	r2,r2,14744
  80ef74:	e0fff817 	ldw	r3,-32(fp)
  80ef78:	180690fa 	slli	r3,r3,3
  80ef7c:	10c5883a 	add	r2,r2,r3
  80ef80:	e0fffe17 	ldw	r3,-8(fp)
  80ef84:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80ef88:	00802074 	movhi	r2,129
  80ef8c:	108e6604 	addi	r2,r2,14744
  80ef90:	e0fff817 	ldw	r3,-32(fp)
  80ef94:	180690fa 	slli	r3,r3,3
  80ef98:	10c5883a 	add	r2,r2,r3
  80ef9c:	10800104 	addi	r2,r2,4
  80efa0:	e0ffff17 	ldw	r3,-4(fp)
  80efa4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80efa8:	e0bffe17 	ldw	r2,-8(fp)
  80efac:	10000526 	beq	r2,zero,80efc4 <alt_iic_isr_register+0xb4>
  80efb0:	e0bff817 	ldw	r2,-32(fp)
  80efb4:	100b883a 	mov	r5,r2
  80efb8:	e13ffc17 	ldw	r4,-16(fp)
  80efbc:	080edb00 	call	80edb0 <alt_ic_irq_enable>
  80efc0:	00000406 	br	80efd4 <alt_iic_isr_register+0xc4>
  80efc4:	e0bff817 	ldw	r2,-32(fp)
  80efc8:	100b883a 	mov	r5,r2
  80efcc:	e13ffc17 	ldw	r4,-16(fp)
  80efd0:	080ee380 	call	80ee38 <alt_ic_irq_disable>
  80efd4:	e0bff715 	stw	r2,-36(fp)
  80efd8:	e0bffa17 	ldw	r2,-24(fp)
  80efdc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80efe0:	e0bff917 	ldw	r2,-28(fp)
  80efe4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80efe8:	e0bff717 	ldw	r2,-36(fp)
}
  80efec:	e037883a 	mov	sp,fp
  80eff0:	dfc00117 	ldw	ra,4(sp)
  80eff4:	df000017 	ldw	fp,0(sp)
  80eff8:	dec00204 	addi	sp,sp,8
  80effc:	f800283a 	ret

0080f000 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80f000:	defff904 	addi	sp,sp,-28
  80f004:	dfc00615 	stw	ra,24(sp)
  80f008:	df000515 	stw	fp,20(sp)
  80f00c:	df000504 	addi	fp,sp,20
  80f010:	e13ffc15 	stw	r4,-16(fp)
  80f014:	e17ffd15 	stw	r5,-12(fp)
  80f018:	e1bffe15 	stw	r6,-8(fp)
  80f01c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80f020:	e1bfff17 	ldw	r6,-4(fp)
  80f024:	e17ffe17 	ldw	r5,-8(fp)
  80f028:	e13ffd17 	ldw	r4,-12(fp)
  80f02c:	080f2400 	call	80f240 <open>
  80f030:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80f034:	e0bffb17 	ldw	r2,-20(fp)
  80f038:	10001c16 	blt	r2,zero,80f0ac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80f03c:	00802074 	movhi	r2,129
  80f040:	10821e04 	addi	r2,r2,2168
  80f044:	e0fffb17 	ldw	r3,-20(fp)
  80f048:	18c00324 	muli	r3,r3,12
  80f04c:	10c5883a 	add	r2,r2,r3
  80f050:	10c00017 	ldw	r3,0(r2)
  80f054:	e0bffc17 	ldw	r2,-16(fp)
  80f058:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80f05c:	00802074 	movhi	r2,129
  80f060:	10821e04 	addi	r2,r2,2168
  80f064:	e0fffb17 	ldw	r3,-20(fp)
  80f068:	18c00324 	muli	r3,r3,12
  80f06c:	10c5883a 	add	r2,r2,r3
  80f070:	10800104 	addi	r2,r2,4
  80f074:	10c00017 	ldw	r3,0(r2)
  80f078:	e0bffc17 	ldw	r2,-16(fp)
  80f07c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80f080:	00802074 	movhi	r2,129
  80f084:	10821e04 	addi	r2,r2,2168
  80f088:	e0fffb17 	ldw	r3,-20(fp)
  80f08c:	18c00324 	muli	r3,r3,12
  80f090:	10c5883a 	add	r2,r2,r3
  80f094:	10800204 	addi	r2,r2,8
  80f098:	10c00017 	ldw	r3,0(r2)
  80f09c:	e0bffc17 	ldw	r2,-16(fp)
  80f0a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80f0a4:	e13ffb17 	ldw	r4,-20(fp)
  80f0a8:	080c3440 	call	80c344 <alt_release_fd>
  }
} 
  80f0ac:	0001883a 	nop
  80f0b0:	e037883a 	mov	sp,fp
  80f0b4:	dfc00117 	ldw	ra,4(sp)
  80f0b8:	df000017 	ldw	fp,0(sp)
  80f0bc:	dec00204 	addi	sp,sp,8
  80f0c0:	f800283a 	ret

0080f0c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80f0c4:	defffb04 	addi	sp,sp,-20
  80f0c8:	dfc00415 	stw	ra,16(sp)
  80f0cc:	df000315 	stw	fp,12(sp)
  80f0d0:	df000304 	addi	fp,sp,12
  80f0d4:	e13ffd15 	stw	r4,-12(fp)
  80f0d8:	e17ffe15 	stw	r5,-8(fp)
  80f0dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80f0e0:	01c07fc4 	movi	r7,511
  80f0e4:	01800044 	movi	r6,1
  80f0e8:	e17ffd17 	ldw	r5,-12(fp)
  80f0ec:	01002074 	movhi	r4,129
  80f0f0:	21022104 	addi	r4,r4,2180
  80f0f4:	080f0000 	call	80f000 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80f0f8:	01c07fc4 	movi	r7,511
  80f0fc:	000d883a 	mov	r6,zero
  80f100:	e17ffe17 	ldw	r5,-8(fp)
  80f104:	01002074 	movhi	r4,129
  80f108:	21021e04 	addi	r4,r4,2168
  80f10c:	080f0000 	call	80f000 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80f110:	01c07fc4 	movi	r7,511
  80f114:	01800044 	movi	r6,1
  80f118:	e17fff17 	ldw	r5,-4(fp)
  80f11c:	01002074 	movhi	r4,129
  80f120:	21022404 	addi	r4,r4,2192
  80f124:	080f0000 	call	80f000 <alt_open_fd>
}  
  80f128:	0001883a 	nop
  80f12c:	e037883a 	mov	sp,fp
  80f130:	dfc00117 	ldw	ra,4(sp)
  80f134:	df000017 	ldw	fp,0(sp)
  80f138:	dec00204 	addi	sp,sp,8
  80f13c:	f800283a 	ret

0080f140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f140:	defffe04 	addi	sp,sp,-8
  80f144:	dfc00115 	stw	ra,4(sp)
  80f148:	df000015 	stw	fp,0(sp)
  80f14c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f150:	d0a00a17 	ldw	r2,-32728(gp)
  80f154:	10000326 	beq	r2,zero,80f164 <alt_get_errno+0x24>
  80f158:	d0a00a17 	ldw	r2,-32728(gp)
  80f15c:	103ee83a 	callr	r2
  80f160:	00000106 	br	80f168 <alt_get_errno+0x28>
  80f164:	d0a72d04 	addi	r2,gp,-25420
}
  80f168:	e037883a 	mov	sp,fp
  80f16c:	dfc00117 	ldw	ra,4(sp)
  80f170:	df000017 	ldw	fp,0(sp)
  80f174:	dec00204 	addi	sp,sp,8
  80f178:	f800283a 	ret

0080f17c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f17c:	defffd04 	addi	sp,sp,-12
  80f180:	df000215 	stw	fp,8(sp)
  80f184:	df000204 	addi	fp,sp,8
  80f188:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f18c:	e0bfff17 	ldw	r2,-4(fp)
  80f190:	10800217 	ldw	r2,8(r2)
  80f194:	10d00034 	orhi	r3,r2,16384
  80f198:	e0bfff17 	ldw	r2,-4(fp)
  80f19c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f1a0:	e03ffe15 	stw	zero,-8(fp)
  80f1a4:	00001d06 	br	80f21c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f1a8:	00802074 	movhi	r2,129
  80f1ac:	10821e04 	addi	r2,r2,2168
  80f1b0:	e0fffe17 	ldw	r3,-8(fp)
  80f1b4:	18c00324 	muli	r3,r3,12
  80f1b8:	10c5883a 	add	r2,r2,r3
  80f1bc:	10c00017 	ldw	r3,0(r2)
  80f1c0:	e0bfff17 	ldw	r2,-4(fp)
  80f1c4:	10800017 	ldw	r2,0(r2)
  80f1c8:	1880111e 	bne	r3,r2,80f210 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f1cc:	00802074 	movhi	r2,129
  80f1d0:	10821e04 	addi	r2,r2,2168
  80f1d4:	e0fffe17 	ldw	r3,-8(fp)
  80f1d8:	18c00324 	muli	r3,r3,12
  80f1dc:	10c5883a 	add	r2,r2,r3
  80f1e0:	10800204 	addi	r2,r2,8
  80f1e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f1e8:	1000090e 	bge	r2,zero,80f210 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80f1ec:	e0bffe17 	ldw	r2,-8(fp)
  80f1f0:	10c00324 	muli	r3,r2,12
  80f1f4:	00802074 	movhi	r2,129
  80f1f8:	10821e04 	addi	r2,r2,2168
  80f1fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f200:	e0bfff17 	ldw	r2,-4(fp)
  80f204:	18800226 	beq	r3,r2,80f210 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f208:	00bffcc4 	movi	r2,-13
  80f20c:	00000806 	br	80f230 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f210:	e0bffe17 	ldw	r2,-8(fp)
  80f214:	10800044 	addi	r2,r2,1
  80f218:	e0bffe15 	stw	r2,-8(fp)
  80f21c:	d0a00917 	ldw	r2,-32732(gp)
  80f220:	1007883a 	mov	r3,r2
  80f224:	e0bffe17 	ldw	r2,-8(fp)
  80f228:	18bfdf2e 	bgeu	r3,r2,80f1a8 <__alt_mem_onchip_mem+0xff8071a8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f22c:	0005883a 	mov	r2,zero
}
  80f230:	e037883a 	mov	sp,fp
  80f234:	df000017 	ldw	fp,0(sp)
  80f238:	dec00104 	addi	sp,sp,4
  80f23c:	f800283a 	ret

0080f240 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f240:	defff604 	addi	sp,sp,-40
  80f244:	dfc00915 	stw	ra,36(sp)
  80f248:	df000815 	stw	fp,32(sp)
  80f24c:	df000804 	addi	fp,sp,32
  80f250:	e13ffd15 	stw	r4,-12(fp)
  80f254:	e17ffe15 	stw	r5,-8(fp)
  80f258:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f25c:	00bfffc4 	movi	r2,-1
  80f260:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80f264:	00bffb44 	movi	r2,-19
  80f268:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80f26c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f270:	d1600704 	addi	r5,gp,-32740
  80f274:	e13ffd17 	ldw	r4,-12(fp)
  80f278:	080f5400 	call	80f540 <alt_find_dev>
  80f27c:	e0bff815 	stw	r2,-32(fp)
  80f280:	e0bff817 	ldw	r2,-32(fp)
  80f284:	1000051e 	bne	r2,zero,80f29c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f288:	e13ffd17 	ldw	r4,-12(fp)
  80f28c:	080f5d00 	call	80f5d0 <alt_find_file>
  80f290:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80f294:	00800044 	movi	r2,1
  80f298:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f29c:	e0bff817 	ldw	r2,-32(fp)
  80f2a0:	10002926 	beq	r2,zero,80f348 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f2a4:	e13ff817 	ldw	r4,-32(fp)
  80f2a8:	080f6d80 	call	80f6d8 <alt_get_fd>
  80f2ac:	e0bff915 	stw	r2,-28(fp)
  80f2b0:	e0bff917 	ldw	r2,-28(fp)
  80f2b4:	1000030e 	bge	r2,zero,80f2c4 <open+0x84>
    {
      status = index;
  80f2b8:	e0bff917 	ldw	r2,-28(fp)
  80f2bc:	e0bffa15 	stw	r2,-24(fp)
  80f2c0:	00002306 	br	80f350 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f2c4:	e0bff917 	ldw	r2,-28(fp)
  80f2c8:	10c00324 	muli	r3,r2,12
  80f2cc:	00802074 	movhi	r2,129
  80f2d0:	10821e04 	addi	r2,r2,2168
  80f2d4:	1885883a 	add	r2,r3,r2
  80f2d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f2dc:	e0fffe17 	ldw	r3,-8(fp)
  80f2e0:	00900034 	movhi	r2,16384
  80f2e4:	10bfffc4 	addi	r2,r2,-1
  80f2e8:	1886703a 	and	r3,r3,r2
  80f2ec:	e0bffc17 	ldw	r2,-16(fp)
  80f2f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f2f4:	e0bffb17 	ldw	r2,-20(fp)
  80f2f8:	1000051e 	bne	r2,zero,80f310 <open+0xd0>
  80f2fc:	e13ffc17 	ldw	r4,-16(fp)
  80f300:	080f17c0 	call	80f17c <alt_file_locked>
  80f304:	e0bffa15 	stw	r2,-24(fp)
  80f308:	e0bffa17 	ldw	r2,-24(fp)
  80f30c:	10001016 	blt	r2,zero,80f350 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f310:	e0bff817 	ldw	r2,-32(fp)
  80f314:	10800317 	ldw	r2,12(r2)
  80f318:	10000826 	beq	r2,zero,80f33c <open+0xfc>
  80f31c:	e0bff817 	ldw	r2,-32(fp)
  80f320:	10800317 	ldw	r2,12(r2)
  80f324:	e1ffff17 	ldw	r7,-4(fp)
  80f328:	e1bffe17 	ldw	r6,-8(fp)
  80f32c:	e17ffd17 	ldw	r5,-12(fp)
  80f330:	e13ffc17 	ldw	r4,-16(fp)
  80f334:	103ee83a 	callr	r2
  80f338:	00000106 	br	80f340 <open+0x100>
  80f33c:	0005883a 	mov	r2,zero
  80f340:	e0bffa15 	stw	r2,-24(fp)
  80f344:	00000206 	br	80f350 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f348:	00bffb44 	movi	r2,-19
  80f34c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f350:	e0bffa17 	ldw	r2,-24(fp)
  80f354:	1000090e 	bge	r2,zero,80f37c <open+0x13c>
  {
    alt_release_fd (index);  
  80f358:	e13ff917 	ldw	r4,-28(fp)
  80f35c:	080c3440 	call	80c344 <alt_release_fd>
    ALT_ERRNO = -status;
  80f360:	080f1400 	call	80f140 <alt_get_errno>
  80f364:	1007883a 	mov	r3,r2
  80f368:	e0bffa17 	ldw	r2,-24(fp)
  80f36c:	0085c83a 	sub	r2,zero,r2
  80f370:	18800015 	stw	r2,0(r3)
    return -1;
  80f374:	00bfffc4 	movi	r2,-1
  80f378:	00000106 	br	80f380 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80f37c:	e0bff917 	ldw	r2,-28(fp)
}
  80f380:	e037883a 	mov	sp,fp
  80f384:	dfc00117 	ldw	ra,4(sp)
  80f388:	df000017 	ldw	fp,0(sp)
  80f38c:	dec00204 	addi	sp,sp,8
  80f390:	f800283a 	ret

0080f394 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80f394:	defffd04 	addi	sp,sp,-12
  80f398:	dfc00215 	stw	ra,8(sp)
  80f39c:	df000115 	stw	fp,4(sp)
  80f3a0:	df000104 	addi	fp,sp,4
  80f3a4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80f3a8:	e13fff17 	ldw	r4,-4(fp)
  80f3ac:	080f3e80 	call	80f3e8 <alt_busy_sleep>
}
  80f3b0:	e037883a 	mov	sp,fp
  80f3b4:	dfc00117 	ldw	ra,4(sp)
  80f3b8:	df000017 	ldw	fp,0(sp)
  80f3bc:	dec00204 	addi	sp,sp,8
  80f3c0:	f800283a 	ret

0080f3c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80f3c4:	deffff04 	addi	sp,sp,-4
  80f3c8:	df000015 	stw	fp,0(sp)
  80f3cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80f3d0:	000170fa 	wrctl	ienable,zero
}
  80f3d4:	0001883a 	nop
  80f3d8:	e037883a 	mov	sp,fp
  80f3dc:	df000017 	ldw	fp,0(sp)
  80f3e0:	dec00104 	addi	sp,sp,4
  80f3e4:	f800283a 	ret

0080f3e8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80f3e8:	defffa04 	addi	sp,sp,-24
  80f3ec:	dfc00515 	stw	ra,20(sp)
  80f3f0:	df000415 	stw	fp,16(sp)
  80f3f4:	df000404 	addi	fp,sp,16
  80f3f8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80f3fc:	008000c4 	movi	r2,3
  80f400:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80f404:	e0fffd17 	ldw	r3,-12(fp)
  80f408:	008003f4 	movhi	r2,15
  80f40c:	10909004 	addi	r2,r2,16960
  80f410:	1885383a 	mul	r2,r3,r2
  80f414:	100b883a 	mov	r5,r2
  80f418:	0100bef4 	movhi	r4,763
  80f41c:	213c2004 	addi	r4,r4,-3968
  80f420:	080ba600 	call	80ba60 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80f424:	100b883a 	mov	r5,r2
  80f428:	01200034 	movhi	r4,32768
  80f42c:	213fffc4 	addi	r4,r4,-1
  80f430:	080ba600 	call	80ba60 <__udivsi3>
  80f434:	100b883a 	mov	r5,r2
  80f438:	e13fff17 	ldw	r4,-4(fp)
  80f43c:	080ba600 	call	80ba60 <__udivsi3>
  80f440:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80f444:	e0bffe17 	ldw	r2,-8(fp)
  80f448:	10002a26 	beq	r2,zero,80f4f4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80f44c:	e03ffc15 	stw	zero,-16(fp)
  80f450:	00001706 	br	80f4b0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80f454:	00a00034 	movhi	r2,32768
  80f458:	10bfffc4 	addi	r2,r2,-1
  80f45c:	10bfffc4 	addi	r2,r2,-1
  80f460:	103ffe1e 	bne	r2,zero,80f45c <__alt_mem_onchip_mem+0xff80745c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80f464:	e0fffd17 	ldw	r3,-12(fp)
  80f468:	008003f4 	movhi	r2,15
  80f46c:	10909004 	addi	r2,r2,16960
  80f470:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80f474:	100b883a 	mov	r5,r2
  80f478:	0100bef4 	movhi	r4,763
  80f47c:	213c2004 	addi	r4,r4,-3968
  80f480:	080ba600 	call	80ba60 <__udivsi3>
  80f484:	100b883a 	mov	r5,r2
  80f488:	01200034 	movhi	r4,32768
  80f48c:	213fffc4 	addi	r4,r4,-1
  80f490:	080ba600 	call	80ba60 <__udivsi3>
  80f494:	1007883a 	mov	r3,r2
  80f498:	e0bfff17 	ldw	r2,-4(fp)
  80f49c:	10c5c83a 	sub	r2,r2,r3
  80f4a0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80f4a4:	e0bffc17 	ldw	r2,-16(fp)
  80f4a8:	10800044 	addi	r2,r2,1
  80f4ac:	e0bffc15 	stw	r2,-16(fp)
  80f4b0:	e0fffc17 	ldw	r3,-16(fp)
  80f4b4:	e0bffe17 	ldw	r2,-8(fp)
  80f4b8:	18bfe616 	blt	r3,r2,80f454 <__alt_mem_onchip_mem+0xff807454>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80f4bc:	e0fffd17 	ldw	r3,-12(fp)
  80f4c0:	008003f4 	movhi	r2,15
  80f4c4:	10909004 	addi	r2,r2,16960
  80f4c8:	1885383a 	mul	r2,r3,r2
  80f4cc:	100b883a 	mov	r5,r2
  80f4d0:	0100bef4 	movhi	r4,763
  80f4d4:	213c2004 	addi	r4,r4,-3968
  80f4d8:	080ba600 	call	80ba60 <__udivsi3>
  80f4dc:	1007883a 	mov	r3,r2
  80f4e0:	e0bfff17 	ldw	r2,-4(fp)
  80f4e4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80f4e8:	10bfffc4 	addi	r2,r2,-1
  80f4ec:	103ffe1e 	bne	r2,zero,80f4e8 <__alt_mem_onchip_mem+0xff8074e8>
  80f4f0:	00000d06 	br	80f528 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80f4f4:	e0fffd17 	ldw	r3,-12(fp)
  80f4f8:	008003f4 	movhi	r2,15
  80f4fc:	10909004 	addi	r2,r2,16960
  80f500:	1885383a 	mul	r2,r3,r2
  80f504:	100b883a 	mov	r5,r2
  80f508:	0100bef4 	movhi	r4,763
  80f50c:	213c2004 	addi	r4,r4,-3968
  80f510:	080ba600 	call	80ba60 <__udivsi3>
  80f514:	1007883a 	mov	r3,r2
  80f518:	e0bfff17 	ldw	r2,-4(fp)
  80f51c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80f520:	10bfffc4 	addi	r2,r2,-1
  80f524:	00bffe16 	blt	zero,r2,80f520 <__alt_mem_onchip_mem+0xff807520>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80f528:	0005883a 	mov	r2,zero
}
  80f52c:	e037883a 	mov	sp,fp
  80f530:	dfc00117 	ldw	ra,4(sp)
  80f534:	df000017 	ldw	fp,0(sp)
  80f538:	dec00204 	addi	sp,sp,8
  80f53c:	f800283a 	ret

0080f540 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80f540:	defffa04 	addi	sp,sp,-24
  80f544:	dfc00515 	stw	ra,20(sp)
  80f548:	df000415 	stw	fp,16(sp)
  80f54c:	df000404 	addi	fp,sp,16
  80f550:	e13ffe15 	stw	r4,-8(fp)
  80f554:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80f558:	e0bfff17 	ldw	r2,-4(fp)
  80f55c:	10800017 	ldw	r2,0(r2)
  80f560:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80f564:	e13ffe17 	ldw	r4,-8(fp)
  80f568:	0808e280 	call	808e28 <strlen>
  80f56c:	10800044 	addi	r2,r2,1
  80f570:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f574:	00000d06 	br	80f5ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80f578:	e0bffc17 	ldw	r2,-16(fp)
  80f57c:	10800217 	ldw	r2,8(r2)
  80f580:	e0fffd17 	ldw	r3,-12(fp)
  80f584:	180d883a 	mov	r6,r3
  80f588:	e17ffe17 	ldw	r5,-8(fp)
  80f58c:	1009883a 	mov	r4,r2
  80f590:	080f8f40 	call	80f8f4 <memcmp>
  80f594:	1000021e 	bne	r2,zero,80f5a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80f598:	e0bffc17 	ldw	r2,-16(fp)
  80f59c:	00000706 	br	80f5bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80f5a0:	e0bffc17 	ldw	r2,-16(fp)
  80f5a4:	10800017 	ldw	r2,0(r2)
  80f5a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f5ac:	e0fffc17 	ldw	r3,-16(fp)
  80f5b0:	e0bfff17 	ldw	r2,-4(fp)
  80f5b4:	18bff01e 	bne	r3,r2,80f578 <__alt_mem_onchip_mem+0xff807578>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80f5b8:	0005883a 	mov	r2,zero
}
  80f5bc:	e037883a 	mov	sp,fp
  80f5c0:	dfc00117 	ldw	ra,4(sp)
  80f5c4:	df000017 	ldw	fp,0(sp)
  80f5c8:	dec00204 	addi	sp,sp,8
  80f5cc:	f800283a 	ret

0080f5d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80f5d0:	defffb04 	addi	sp,sp,-20
  80f5d4:	dfc00415 	stw	ra,16(sp)
  80f5d8:	df000315 	stw	fp,12(sp)
  80f5dc:	df000304 	addi	fp,sp,12
  80f5e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80f5e4:	d0a00517 	ldw	r2,-32748(gp)
  80f5e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f5ec:	00003106 	br	80f6b4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80f5f0:	e0bffd17 	ldw	r2,-12(fp)
  80f5f4:	10800217 	ldw	r2,8(r2)
  80f5f8:	1009883a 	mov	r4,r2
  80f5fc:	0808e280 	call	808e28 <strlen>
  80f600:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80f604:	e0bffd17 	ldw	r2,-12(fp)
  80f608:	10c00217 	ldw	r3,8(r2)
  80f60c:	e0bffe17 	ldw	r2,-8(fp)
  80f610:	10bfffc4 	addi	r2,r2,-1
  80f614:	1885883a 	add	r2,r3,r2
  80f618:	10800003 	ldbu	r2,0(r2)
  80f61c:	10803fcc 	andi	r2,r2,255
  80f620:	1080201c 	xori	r2,r2,128
  80f624:	10bfe004 	addi	r2,r2,-128
  80f628:	10800bd8 	cmpnei	r2,r2,47
  80f62c:	1000031e 	bne	r2,zero,80f63c <alt_find_file+0x6c>
    {
      len -= 1;
  80f630:	e0bffe17 	ldw	r2,-8(fp)
  80f634:	10bfffc4 	addi	r2,r2,-1
  80f638:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f63c:	e0bffe17 	ldw	r2,-8(fp)
  80f640:	e0ffff17 	ldw	r3,-4(fp)
  80f644:	1885883a 	add	r2,r3,r2
  80f648:	10800003 	ldbu	r2,0(r2)
  80f64c:	10803fcc 	andi	r2,r2,255
  80f650:	1080201c 	xori	r2,r2,128
  80f654:	10bfe004 	addi	r2,r2,-128
  80f658:	10800be0 	cmpeqi	r2,r2,47
  80f65c:	1000081e 	bne	r2,zero,80f680 <alt_find_file+0xb0>
  80f660:	e0bffe17 	ldw	r2,-8(fp)
  80f664:	e0ffff17 	ldw	r3,-4(fp)
  80f668:	1885883a 	add	r2,r3,r2
  80f66c:	10800003 	ldbu	r2,0(r2)
  80f670:	10803fcc 	andi	r2,r2,255
  80f674:	1080201c 	xori	r2,r2,128
  80f678:	10bfe004 	addi	r2,r2,-128
  80f67c:	10000a1e 	bne	r2,zero,80f6a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80f680:	e0bffd17 	ldw	r2,-12(fp)
  80f684:	10800217 	ldw	r2,8(r2)
  80f688:	e0fffe17 	ldw	r3,-8(fp)
  80f68c:	180d883a 	mov	r6,r3
  80f690:	e17fff17 	ldw	r5,-4(fp)
  80f694:	1009883a 	mov	r4,r2
  80f698:	080f8f40 	call	80f8f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f69c:	1000021e 	bne	r2,zero,80f6a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80f6a0:	e0bffd17 	ldw	r2,-12(fp)
  80f6a4:	00000706 	br	80f6c4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80f6a8:	e0bffd17 	ldw	r2,-12(fp)
  80f6ac:	10800017 	ldw	r2,0(r2)
  80f6b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f6b4:	e0fffd17 	ldw	r3,-12(fp)
  80f6b8:	d0a00504 	addi	r2,gp,-32748
  80f6bc:	18bfcc1e 	bne	r3,r2,80f5f0 <__alt_mem_onchip_mem+0xff8075f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80f6c0:	0005883a 	mov	r2,zero
}
  80f6c4:	e037883a 	mov	sp,fp
  80f6c8:	dfc00117 	ldw	ra,4(sp)
  80f6cc:	df000017 	ldw	fp,0(sp)
  80f6d0:	dec00204 	addi	sp,sp,8
  80f6d4:	f800283a 	ret

0080f6d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80f6d8:	defffc04 	addi	sp,sp,-16
  80f6dc:	df000315 	stw	fp,12(sp)
  80f6e0:	df000304 	addi	fp,sp,12
  80f6e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80f6e8:	00bffa04 	movi	r2,-24
  80f6ec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f6f0:	e03ffd15 	stw	zero,-12(fp)
  80f6f4:	00001906 	br	80f75c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80f6f8:	00802074 	movhi	r2,129
  80f6fc:	10821e04 	addi	r2,r2,2168
  80f700:	e0fffd17 	ldw	r3,-12(fp)
  80f704:	18c00324 	muli	r3,r3,12
  80f708:	10c5883a 	add	r2,r2,r3
  80f70c:	10800017 	ldw	r2,0(r2)
  80f710:	10000f1e 	bne	r2,zero,80f750 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80f714:	00802074 	movhi	r2,129
  80f718:	10821e04 	addi	r2,r2,2168
  80f71c:	e0fffd17 	ldw	r3,-12(fp)
  80f720:	18c00324 	muli	r3,r3,12
  80f724:	10c5883a 	add	r2,r2,r3
  80f728:	e0ffff17 	ldw	r3,-4(fp)
  80f72c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80f730:	d0e00917 	ldw	r3,-32732(gp)
  80f734:	e0bffd17 	ldw	r2,-12(fp)
  80f738:	1880020e 	bge	r3,r2,80f744 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80f73c:	e0bffd17 	ldw	r2,-12(fp)
  80f740:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
  80f744:	e0bffd17 	ldw	r2,-12(fp)
  80f748:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80f74c:	00000606 	br	80f768 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f750:	e0bffd17 	ldw	r2,-12(fp)
  80f754:	10800044 	addi	r2,r2,1
  80f758:	e0bffd15 	stw	r2,-12(fp)
  80f75c:	e0bffd17 	ldw	r2,-12(fp)
  80f760:	10800810 	cmplti	r2,r2,32
  80f764:	103fe41e 	bne	r2,zero,80f6f8 <__alt_mem_onchip_mem+0xff8076f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80f768:	e0bffe17 	ldw	r2,-8(fp)
}
  80f76c:	e037883a 	mov	sp,fp
  80f770:	df000017 	ldw	fp,0(sp)
  80f774:	dec00104 	addi	sp,sp,4
  80f778:	f800283a 	ret

0080f77c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80f77c:	defffb04 	addi	sp,sp,-20
  80f780:	df000415 	stw	fp,16(sp)
  80f784:	df000404 	addi	fp,sp,16
  80f788:	e13ffe15 	stw	r4,-8(fp)
  80f78c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80f790:	e0bfff17 	ldw	r2,-4(fp)
  80f794:	10840070 	cmpltui	r2,r2,4097
  80f798:	1000021e 	bne	r2,zero,80f7a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80f79c:	00840004 	movi	r2,4096
  80f7a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80f7a4:	e0fffe17 	ldw	r3,-8(fp)
  80f7a8:	e0bfff17 	ldw	r2,-4(fp)
  80f7ac:	1885883a 	add	r2,r3,r2
  80f7b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f7b4:	e0bffe17 	ldw	r2,-8(fp)
  80f7b8:	e0bffc15 	stw	r2,-16(fp)
  80f7bc:	00000506 	br	80f7d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80f7c0:	e0bffc17 	ldw	r2,-16(fp)
  80f7c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f7c8:	e0bffc17 	ldw	r2,-16(fp)
  80f7cc:	10800804 	addi	r2,r2,32
  80f7d0:	e0bffc15 	stw	r2,-16(fp)
  80f7d4:	e0fffc17 	ldw	r3,-16(fp)
  80f7d8:	e0bffd17 	ldw	r2,-12(fp)
  80f7dc:	18bff836 	bltu	r3,r2,80f7c0 <__alt_mem_onchip_mem+0xff8077c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80f7e0:	e0bffe17 	ldw	r2,-8(fp)
  80f7e4:	108007cc 	andi	r2,r2,31
  80f7e8:	10000226 	beq	r2,zero,80f7f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80f7ec:	e0bffc17 	ldw	r2,-16(fp)
  80f7f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80f7f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80f7f8:	0001883a 	nop
  80f7fc:	e037883a 	mov	sp,fp
  80f800:	df000017 	ldw	fp,0(sp)
  80f804:	dec00104 	addi	sp,sp,4
  80f808:	f800283a 	ret

0080f80c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80f80c:	defffe04 	addi	sp,sp,-8
  80f810:	df000115 	stw	fp,4(sp)
  80f814:	df000104 	addi	fp,sp,4
  80f818:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80f81c:	e0bfff17 	ldw	r2,-4(fp)
  80f820:	10bffe84 	addi	r2,r2,-6
  80f824:	10c00428 	cmpgeui	r3,r2,16
  80f828:	18001a1e 	bne	r3,zero,80f894 <alt_exception_cause_generated_bad_addr+0x88>
  80f82c:	100690ba 	slli	r3,r2,2
  80f830:	00802074 	movhi	r2,129
  80f834:	10be1104 	addi	r2,r2,-1980
  80f838:	1885883a 	add	r2,r3,r2
  80f83c:	10800017 	ldw	r2,0(r2)
  80f840:	1000683a 	jmp	r2
  80f844:	0080f884 	movi	r2,994
  80f848:	0080f884 	movi	r2,994
  80f84c:	0080f894 	movui	r2,994
  80f850:	0080f894 	movui	r2,994
  80f854:	0080f894 	movui	r2,994
  80f858:	0080f884 	movi	r2,994
  80f85c:	0080f88c 	andi	r2,zero,994
  80f860:	0080f894 	movui	r2,994
  80f864:	0080f884 	movi	r2,994
  80f868:	0080f884 	movi	r2,994
  80f86c:	0080f894 	movui	r2,994
  80f870:	0080f884 	movi	r2,994
  80f874:	0080f88c 	andi	r2,zero,994
  80f878:	0080f894 	movui	r2,994
  80f87c:	0080f894 	movui	r2,994
  80f880:	0080f884 	movi	r2,994
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80f884:	00800044 	movi	r2,1
  80f888:	00000306 	br	80f898 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80f88c:	0005883a 	mov	r2,zero
  80f890:	00000106 	br	80f898 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80f894:	0005883a 	mov	r2,zero
  }
}
  80f898:	e037883a 	mov	sp,fp
  80f89c:	df000017 	ldw	fp,0(sp)
  80f8a0:	dec00104 	addi	sp,sp,4
  80f8a4:	f800283a 	ret

0080f8a8 <atexit>:
  80f8a8:	200b883a 	mov	r5,r4
  80f8ac:	000f883a 	mov	r7,zero
  80f8b0:	000d883a 	mov	r6,zero
  80f8b4:	0009883a 	mov	r4,zero
  80f8b8:	080f9701 	jmpi	80f970 <__register_exitproc>

0080f8bc <exit>:
  80f8bc:	defffe04 	addi	sp,sp,-8
  80f8c0:	000b883a 	mov	r5,zero
  80f8c4:	dc000015 	stw	r16,0(sp)
  80f8c8:	dfc00115 	stw	ra,4(sp)
  80f8cc:	2021883a 	mov	r16,r4
  80f8d0:	080fa880 	call	80fa88 <__call_exitprocs>
  80f8d4:	00802074 	movhi	r2,129
  80f8d8:	10871004 	addi	r2,r2,7232
  80f8dc:	11000017 	ldw	r4,0(r2)
  80f8e0:	20800f17 	ldw	r2,60(r4)
  80f8e4:	10000126 	beq	r2,zero,80f8ec <exit+0x30>
  80f8e8:	103ee83a 	callr	r2
  80f8ec:	8009883a 	mov	r4,r16
  80f8f0:	080fc080 	call	80fc08 <_exit>

0080f8f4 <memcmp>:
  80f8f4:	01c000c4 	movi	r7,3
  80f8f8:	3980192e 	bgeu	r7,r6,80f960 <memcmp+0x6c>
  80f8fc:	2144b03a 	or	r2,r4,r5
  80f900:	11c4703a 	and	r2,r2,r7
  80f904:	10000f26 	beq	r2,zero,80f944 <memcmp+0x50>
  80f908:	20800003 	ldbu	r2,0(r4)
  80f90c:	28c00003 	ldbu	r3,0(r5)
  80f910:	10c0151e 	bne	r2,r3,80f968 <memcmp+0x74>
  80f914:	31bfff84 	addi	r6,r6,-2
  80f918:	01ffffc4 	movi	r7,-1
  80f91c:	00000406 	br	80f930 <memcmp+0x3c>
  80f920:	20800003 	ldbu	r2,0(r4)
  80f924:	28c00003 	ldbu	r3,0(r5)
  80f928:	31bfffc4 	addi	r6,r6,-1
  80f92c:	10c00e1e 	bne	r2,r3,80f968 <memcmp+0x74>
  80f930:	21000044 	addi	r4,r4,1
  80f934:	29400044 	addi	r5,r5,1
  80f938:	31fff91e 	bne	r6,r7,80f920 <__alt_mem_onchip_mem+0xff807920>
  80f93c:	0005883a 	mov	r2,zero
  80f940:	f800283a 	ret
  80f944:	20c00017 	ldw	r3,0(r4)
  80f948:	28800017 	ldw	r2,0(r5)
  80f94c:	18bfee1e 	bne	r3,r2,80f908 <__alt_mem_onchip_mem+0xff807908>
  80f950:	31bfff04 	addi	r6,r6,-4
  80f954:	21000104 	addi	r4,r4,4
  80f958:	29400104 	addi	r5,r5,4
  80f95c:	39bff936 	bltu	r7,r6,80f944 <__alt_mem_onchip_mem+0xff807944>
  80f960:	303fe91e 	bne	r6,zero,80f908 <__alt_mem_onchip_mem+0xff807908>
  80f964:	003ff506 	br	80f93c <__alt_mem_onchip_mem+0xff80793c>
  80f968:	10c5c83a 	sub	r2,r2,r3
  80f96c:	f800283a 	ret

0080f970 <__register_exitproc>:
  80f970:	defffa04 	addi	sp,sp,-24
  80f974:	dc000315 	stw	r16,12(sp)
  80f978:	04002074 	movhi	r16,129
  80f97c:	84071004 	addi	r16,r16,7232
  80f980:	80c00017 	ldw	r3,0(r16)
  80f984:	dc400415 	stw	r17,16(sp)
  80f988:	dfc00515 	stw	ra,20(sp)
  80f98c:	18805217 	ldw	r2,328(r3)
  80f990:	2023883a 	mov	r17,r4
  80f994:	10003726 	beq	r2,zero,80fa74 <__register_exitproc+0x104>
  80f998:	10c00117 	ldw	r3,4(r2)
  80f99c:	010007c4 	movi	r4,31
  80f9a0:	20c00e16 	blt	r4,r3,80f9dc <__register_exitproc+0x6c>
  80f9a4:	1a000044 	addi	r8,r3,1
  80f9a8:	8800221e 	bne	r17,zero,80fa34 <__register_exitproc+0xc4>
  80f9ac:	18c00084 	addi	r3,r3,2
  80f9b0:	18c7883a 	add	r3,r3,r3
  80f9b4:	18c7883a 	add	r3,r3,r3
  80f9b8:	12000115 	stw	r8,4(r2)
  80f9bc:	10c7883a 	add	r3,r2,r3
  80f9c0:	19400015 	stw	r5,0(r3)
  80f9c4:	0005883a 	mov	r2,zero
  80f9c8:	dfc00517 	ldw	ra,20(sp)
  80f9cc:	dc400417 	ldw	r17,16(sp)
  80f9d0:	dc000317 	ldw	r16,12(sp)
  80f9d4:	dec00604 	addi	sp,sp,24
  80f9d8:	f800283a 	ret
  80f9dc:	00800034 	movhi	r2,0
  80f9e0:	10800004 	addi	r2,r2,0
  80f9e4:	10002626 	beq	r2,zero,80fa80 <__register_exitproc+0x110>
  80f9e8:	01006404 	movi	r4,400
  80f9ec:	d9400015 	stw	r5,0(sp)
  80f9f0:	d9800115 	stw	r6,4(sp)
  80f9f4:	d9c00215 	stw	r7,8(sp)
  80f9f8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80f9fc:	d9400017 	ldw	r5,0(sp)
  80fa00:	d9800117 	ldw	r6,4(sp)
  80fa04:	d9c00217 	ldw	r7,8(sp)
  80fa08:	10001d26 	beq	r2,zero,80fa80 <__register_exitproc+0x110>
  80fa0c:	81000017 	ldw	r4,0(r16)
  80fa10:	10000115 	stw	zero,4(r2)
  80fa14:	02000044 	movi	r8,1
  80fa18:	22405217 	ldw	r9,328(r4)
  80fa1c:	0007883a 	mov	r3,zero
  80fa20:	12400015 	stw	r9,0(r2)
  80fa24:	20805215 	stw	r2,328(r4)
  80fa28:	10006215 	stw	zero,392(r2)
  80fa2c:	10006315 	stw	zero,396(r2)
  80fa30:	883fde26 	beq	r17,zero,80f9ac <__alt_mem_onchip_mem+0xff8079ac>
  80fa34:	18c9883a 	add	r4,r3,r3
  80fa38:	2109883a 	add	r4,r4,r4
  80fa3c:	1109883a 	add	r4,r2,r4
  80fa40:	21802215 	stw	r6,136(r4)
  80fa44:	01800044 	movi	r6,1
  80fa48:	12406217 	ldw	r9,392(r2)
  80fa4c:	30cc983a 	sll	r6,r6,r3
  80fa50:	4992b03a 	or	r9,r9,r6
  80fa54:	12406215 	stw	r9,392(r2)
  80fa58:	21c04215 	stw	r7,264(r4)
  80fa5c:	01000084 	movi	r4,2
  80fa60:	893fd21e 	bne	r17,r4,80f9ac <__alt_mem_onchip_mem+0xff8079ac>
  80fa64:	11006317 	ldw	r4,396(r2)
  80fa68:	218cb03a 	or	r6,r4,r6
  80fa6c:	11806315 	stw	r6,396(r2)
  80fa70:	003fce06 	br	80f9ac <__alt_mem_onchip_mem+0xff8079ac>
  80fa74:	18805304 	addi	r2,r3,332
  80fa78:	18805215 	stw	r2,328(r3)
  80fa7c:	003fc606 	br	80f998 <__alt_mem_onchip_mem+0xff807998>
  80fa80:	00bfffc4 	movi	r2,-1
  80fa84:	003fd006 	br	80f9c8 <__alt_mem_onchip_mem+0xff8079c8>

0080fa88 <__call_exitprocs>:
  80fa88:	defff504 	addi	sp,sp,-44
  80fa8c:	df000915 	stw	fp,36(sp)
  80fa90:	dd400615 	stw	r21,24(sp)
  80fa94:	dc800315 	stw	r18,12(sp)
  80fa98:	dfc00a15 	stw	ra,40(sp)
  80fa9c:	ddc00815 	stw	r23,32(sp)
  80faa0:	dd800715 	stw	r22,28(sp)
  80faa4:	dd000515 	stw	r20,20(sp)
  80faa8:	dcc00415 	stw	r19,16(sp)
  80faac:	dc400215 	stw	r17,8(sp)
  80fab0:	dc000115 	stw	r16,4(sp)
  80fab4:	d9000015 	stw	r4,0(sp)
  80fab8:	2839883a 	mov	fp,r5
  80fabc:	04800044 	movi	r18,1
  80fac0:	057fffc4 	movi	r21,-1
  80fac4:	00802074 	movhi	r2,129
  80fac8:	10871004 	addi	r2,r2,7232
  80facc:	12000017 	ldw	r8,0(r2)
  80fad0:	45005217 	ldw	r20,328(r8)
  80fad4:	44c05204 	addi	r19,r8,328
  80fad8:	a0001c26 	beq	r20,zero,80fb4c <__call_exitprocs+0xc4>
  80fadc:	a0800117 	ldw	r2,4(r20)
  80fae0:	15ffffc4 	addi	r23,r2,-1
  80fae4:	b8000d16 	blt	r23,zero,80fb1c <__call_exitprocs+0x94>
  80fae8:	14000044 	addi	r16,r2,1
  80faec:	8421883a 	add	r16,r16,r16
  80faf0:	8421883a 	add	r16,r16,r16
  80faf4:	84402004 	addi	r17,r16,128
  80faf8:	a463883a 	add	r17,r20,r17
  80fafc:	a421883a 	add	r16,r20,r16
  80fb00:	e0001e26 	beq	fp,zero,80fb7c <__call_exitprocs+0xf4>
  80fb04:	80804017 	ldw	r2,256(r16)
  80fb08:	e0801c26 	beq	fp,r2,80fb7c <__call_exitprocs+0xf4>
  80fb0c:	bdffffc4 	addi	r23,r23,-1
  80fb10:	843fff04 	addi	r16,r16,-4
  80fb14:	8c7fff04 	addi	r17,r17,-4
  80fb18:	bd7ff91e 	bne	r23,r21,80fb00 <__alt_mem_onchip_mem+0xff807b00>
  80fb1c:	00800034 	movhi	r2,0
  80fb20:	10800004 	addi	r2,r2,0
  80fb24:	10000926 	beq	r2,zero,80fb4c <__call_exitprocs+0xc4>
  80fb28:	a0800117 	ldw	r2,4(r20)
  80fb2c:	1000301e 	bne	r2,zero,80fbf0 <__call_exitprocs+0x168>
  80fb30:	a0800017 	ldw	r2,0(r20)
  80fb34:	10003226 	beq	r2,zero,80fc00 <__call_exitprocs+0x178>
  80fb38:	a009883a 	mov	r4,r20
  80fb3c:	98800015 	stw	r2,0(r19)
  80fb40:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80fb44:	9d000017 	ldw	r20,0(r19)
  80fb48:	a03fe41e 	bne	r20,zero,80fadc <__alt_mem_onchip_mem+0xff807adc>
  80fb4c:	dfc00a17 	ldw	ra,40(sp)
  80fb50:	df000917 	ldw	fp,36(sp)
  80fb54:	ddc00817 	ldw	r23,32(sp)
  80fb58:	dd800717 	ldw	r22,28(sp)
  80fb5c:	dd400617 	ldw	r21,24(sp)
  80fb60:	dd000517 	ldw	r20,20(sp)
  80fb64:	dcc00417 	ldw	r19,16(sp)
  80fb68:	dc800317 	ldw	r18,12(sp)
  80fb6c:	dc400217 	ldw	r17,8(sp)
  80fb70:	dc000117 	ldw	r16,4(sp)
  80fb74:	dec00b04 	addi	sp,sp,44
  80fb78:	f800283a 	ret
  80fb7c:	a0800117 	ldw	r2,4(r20)
  80fb80:	80c00017 	ldw	r3,0(r16)
  80fb84:	10bfffc4 	addi	r2,r2,-1
  80fb88:	15c01426 	beq	r2,r23,80fbdc <__call_exitprocs+0x154>
  80fb8c:	80000015 	stw	zero,0(r16)
  80fb90:	183fde26 	beq	r3,zero,80fb0c <__alt_mem_onchip_mem+0xff807b0c>
  80fb94:	95c8983a 	sll	r4,r18,r23
  80fb98:	a0806217 	ldw	r2,392(r20)
  80fb9c:	a5800117 	ldw	r22,4(r20)
  80fba0:	2084703a 	and	r2,r4,r2
  80fba4:	10000b26 	beq	r2,zero,80fbd4 <__call_exitprocs+0x14c>
  80fba8:	a0806317 	ldw	r2,396(r20)
  80fbac:	2088703a 	and	r4,r4,r2
  80fbb0:	20000c1e 	bne	r4,zero,80fbe4 <__call_exitprocs+0x15c>
  80fbb4:	89400017 	ldw	r5,0(r17)
  80fbb8:	d9000017 	ldw	r4,0(sp)
  80fbbc:	183ee83a 	callr	r3
  80fbc0:	a0800117 	ldw	r2,4(r20)
  80fbc4:	15bfbf1e 	bne	r2,r22,80fac4 <__alt_mem_onchip_mem+0xff807ac4>
  80fbc8:	98800017 	ldw	r2,0(r19)
  80fbcc:	153fcf26 	beq	r2,r20,80fb0c <__alt_mem_onchip_mem+0xff807b0c>
  80fbd0:	003fbc06 	br	80fac4 <__alt_mem_onchip_mem+0xff807ac4>
  80fbd4:	183ee83a 	callr	r3
  80fbd8:	003ff906 	br	80fbc0 <__alt_mem_onchip_mem+0xff807bc0>
  80fbdc:	a5c00115 	stw	r23,4(r20)
  80fbe0:	003feb06 	br	80fb90 <__alt_mem_onchip_mem+0xff807b90>
  80fbe4:	89000017 	ldw	r4,0(r17)
  80fbe8:	183ee83a 	callr	r3
  80fbec:	003ff406 	br	80fbc0 <__alt_mem_onchip_mem+0xff807bc0>
  80fbf0:	a0800017 	ldw	r2,0(r20)
  80fbf4:	a027883a 	mov	r19,r20
  80fbf8:	1029883a 	mov	r20,r2
  80fbfc:	003fb606 	br	80fad8 <__alt_mem_onchip_mem+0xff807ad8>
  80fc00:	0005883a 	mov	r2,zero
  80fc04:	003ffb06 	br	80fbf4 <__alt_mem_onchip_mem+0xff807bf4>

0080fc08 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80fc08:	defffd04 	addi	sp,sp,-12
  80fc0c:	df000215 	stw	fp,8(sp)
  80fc10:	df000204 	addi	fp,sp,8
  80fc14:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80fc18:	0001883a 	nop
  80fc1c:	e0bfff17 	ldw	r2,-4(fp)
  80fc20:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80fc24:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80fc28:	10000226 	beq	r2,zero,80fc34 <_exit+0x2c>
    ALT_SIM_FAIL();
  80fc2c:	002af070 	cmpltui	zero,zero,43969
  80fc30:	00000106 	br	80fc38 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80fc34:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80fc38:	003fff06 	br	80fc38 <__alt_mem_onchip_mem+0xff807c38>
