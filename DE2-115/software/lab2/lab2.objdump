
lab2.elf:     file format elf32-littlenios2
lab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004cec memsz 0x00004cec flags r-x
    LOAD off    0x00005d0c vaddr 0x00804d0c paddr 0x00806550 align 2**12
         filesz 0x00001844 memsz 0x00001844 flags rw-
    LOAD off    0x00007d94 vaddr 0x00807d94 paddr 0x00807d94 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004800  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002c8  00804a44  00804a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001844  00804d0c  00806550  00005d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00807d94  00807d94  00007d94  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00807eb4  00807eb4  00007550  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00007550  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007550  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000750  00000000  00000000  00007578  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009cbe  00000000  00000000  00007cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003753  00000000  00000000  00011986  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003c11  00000000  00000000  000150d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001024  00000000  00000000  00018cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002354  00000000  00000000  00019d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000de4  00000000  00000000  0001c064  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0001ce48  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000200  00000000  00000000  0001cea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001f191  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0001f194  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001f197  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001f198  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0001f199  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0001f1a2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0001f1ab  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0001f1b4  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002c  00000000  00000000  0001f1c0  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  0001f1ec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00804a44 l    d  .rodata	00000000 .rodata
00804d0c l    d  .rwdata	00000000 .rwdata
00807d94 l    d  .bss	00000000 .bss
00807eb4 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab2_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 alt_load.c
00800aa8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00800c10 l     F .text	00000034 alt_dev_reg
00804d0c l     O .rwdata	00001060 jtag_uart
00805d6c l     O .rwdata	00000120 lcd
00805e8c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00800f38 l     F .text	0000020c altera_avalon_jtag_uart_irq
00801144 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080651c l     O .rwdata	00000004 colstart
0080177c l     F .text	000000b8 lcd_write_command
00801834 l     F .text	000000d8 lcd_write_data
0080190c l     F .text	000000d0 lcd_clear_screen
008019dc l     F .text	000001ec lcd_repaint_screen
00801bc8 l     F .text	000000cc lcd_scroll_up
00801c94 l     F .text	000002ac lcd_handle_escape
00802418 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00802658 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00802908 l     F .text	0000009c altera_avalon_uart_irq
008029a4 l     F .text	000000e4 altera_avalon_uart_rxirq
00802a88 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00802c24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00802e3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00803150 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
008032a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008032d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00803744 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00803884 l     F .text	0000003c alt_get_errno
008038c0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00804b87 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
008060f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00807dac g     O .bss	00000004 alt_instruction_exception_handler
00800b94 g     F .text	0000007c alt_main
00807db4 g     O .bss	00000100 alt_irq
00806550 g       *ABS*	00000000 __flash_rwdata_start
00803d10 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807db0 g     O .bss	00000004 errno
00807d98 g     O .bss	00000004 alt_argv
0080e51c g       *ABS*	00000000 _gp
00803ce0 g     F .text	00000030 usleep
008009e4 g     F .text	00000058 reset
00805f78 g     O .rwdata	00000180 alt_fd_list
00803e8c g     F .text	00000090 alt_find_dev
008042bc g     F .text	00000148 memcpy
00803808 g     F .text	0000007c alt_io_redirect
00804a44 g       *ABS*	00000000 __DTOR_END__
00804158 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080133c g     F .text	0000021c altera_avalon_jtag_uart_read
00804954 g     F .text	00000064 .hidden __udivsi3
008040c8 g     F .text	00000090 alt_icache_flush
00806530 g     O .rwdata	00000004 alt_max_fd
00806548 g     O .rwdata	00000004 _global_impure_ptr
00807eb4 g       *ABS*	00000000 __bss_end
00803654 g     F .text	000000f0 alt_iic_isr_register
00803bd8 g     F .text	00000108 alt_tick
0080285c g     F .text	000000ac altera_avalon_uart_init
00803608 g     F .text	0000004c alt_ic_irq_enabled
00803b3c g     F .text	0000009c alt_alarm_stop
00807da0 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00805f50 g     O .rwdata	00000028 alt_dev_null
0080325c g     F .text	00000048 alt_dcache_flush_all
00806550 g       *ABS*	00000000 __ram_rwdata_end
00806528 g     O .rwdata	00000008 alt_dev_list
00804d0c g       *ABS*	00000000 __ram_rodata_end
008049b8 g     F .text	00000058 .hidden __umodsi3
00807eb4 g       *ABS*	00000000 end
00801f40 g     F .text	000004d8 altera_avalon_lcd_16207_write
00802e78 g     F .text	000001ac altera_avalon_uart_write
00800e78 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00804a44 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008026d0 g     F .text	0000007c alt_avalon_timer_sc_init
008027ac g     F .text	00000060 altera_avalon_uart_write_fd
0080280c g     F .text	00000050 altera_avalon_uart_close_fd
00801558 g     F .text	00000224 altera_avalon_jtag_uart_write
008046dc g     F .text	00000180 __call_exitprocs
00800244 g     F .text	0000004c _start
00807da4 g     O .bss	00000004 _alt_tick_rate
00807da8 g     O .bss	00000004 _alt_nticks
00800c7c g     F .text	00000098 alt_sys_init
008045c4 g     F .text	00000118 __register_exitproc
008011e4 g     F .text	00000068 altera_avalon_jtag_uart_close
00804d0c g       *ABS*	00000000 __ram_rwdata_start
00804a44 g       *ABS*	00000000 __ram_rodata_start
00800d14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00804024 g     F .text	000000a4 alt_get_fd
00803d34 g     F .text	00000158 alt_busy_sleep
00804240 g     F .text	0000007c memcmp
00800dd4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00807eb4 g       *ABS*	00000000 __alt_stack_base
00800e24 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00800a3c g     F .text	0000006c tick
00803f1c g     F .text	00000108 alt_find_file
0080330c g     F .text	000000a4 alt_dev_llist_insert
00807d94 g       *ABS*	00000000 __bss_start
00804404 g     F .text	00000128 memset
00800290 g     F .text	000000e0 main
00807d9c g     O .bss	00000004 alt_envp
00800d74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008024c4 g     F .text	00000134 altera_avalon_lcd_16207_init
00806534 g     O .rwdata	00000004 alt_errno
0080485c g     F .text	00000084 .hidden __divsi3
00804a44 g       *ABS*	00000000 __CTOR_END__
00804a44 g       *ABS*	00000000 __flash_rodata_start
00804a44 g       *ABS*	00000000 __DTOR_LIST__
00800c44 g     F .text	00000038 alt_irq_init
00803ad8 g     F .text	00000064 alt_release_fd
008041f4 g     F .text	00000014 atexit
0080654c g     O .rwdata	00000004 _impure_ptr
00807d94 g     O .bss	00000004 alt_argc
00803410 g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
008025f8 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00806520 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008034a4 g     F .text	00000050 alt_ic_isr_register
00806550 g       *ABS*	00000000 _edata
0080274c g     F .text	00000060 altera_avalon_uart_read_fd
00807eb4 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080124c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080357c g     F .text	0000008c alt_ic_irq_disable
00804208 g     F .text	00000038 exit
008048e0 g     F .text	00000074 .hidden __modsi3
00800370 g     F .text	00000674 logic
00806544 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00804a86 g     O .rodata	00000101 _ctype_
00802bd0 g     F .text	00000054 altera_avalon_uart_close
00804a10 g     F .text	00000034 _exit
00803024 g     F .text	0000012c alt_alarm_start
0080452c g     F .text	00000098 strlen
00803984 g     F .text	00000154 open
00803470 g     F .text	00000034 alt_icache_flush_all
00806538 g     O .rwdata	00000004 alt_priority_mask
008034f4 g     F .text	00000088 alt_ic_irq_enable
00802c60 g     F .text	000001dc altera_avalon_uart_read
0080653c g     O .rwdata	00000008 alt_alarm_list
008033b0 g     F .text	00000060 _do_ctors
0080318c g     F .text	000000d0 close
00800b10 g     F .text	00000084 alt_load



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802034 	movhi	r2,128
  800140:	109f6d04 	addi	r2,r2,32180
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	109f6d04 	addi	r2,r2,32180
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a62417 	ldw	r2,-26480(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a62417 	ldw	r2,-26480(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800260:	d6b94714 	ori	gp,gp,58652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	109f6514 	ori	r2,r2,32148

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18dfad14 	ori	r3,r3,32436

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	0800b100 	call	800b10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	0800b940 	call	800b94 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <main>:
//  return 0;
//}



int main(){
  800290:	defff604 	addi	sp,sp,-40
  800294:	dfc00915 	stw	ra,36(sp)
  800298:	df000815 	stw	fp,32(sp)
  80029c:	df000804 	addi	fp,sp,32

	TickData data;

	reset(&data);
  8002a0:	e13ff804 	addi	r4,fp,-32
  8002a4:	08009e40 	call	8009e4 <reset>

	for(;;){
		data.A = (~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & 0x04) >> 2;
  8002a8:	00804074 	movhi	r2,257
  8002ac:	10842804 	addi	r2,r2,4256
  8002b0:	10800037 	ldwio	r2,0(r2)
  8002b4:	0084303a 	nor	r2,zero,r2
  8002b8:	1080010c 	andi	r2,r2,4
  8002bc:	1005d0ba 	srai	r2,r2,2
  8002c0:	e0bff805 	stb	r2,-32(fp)
		data.B = (~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & 0x02) >> 1;
  8002c4:	00804074 	movhi	r2,257
  8002c8:	10842804 	addi	r2,r2,4256
  8002cc:	10800037 	ldwio	r2,0(r2)
  8002d0:	0084303a 	nor	r2,zero,r2
  8002d4:	1080008c 	andi	r2,r2,2
  8002d8:	1005d07a 	srai	r2,r2,1
  8002dc:	e0bff845 	stb	r2,-31(fp)
		data.R = ~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & 0x01;
  8002e0:	00804074 	movhi	r2,257
  8002e4:	10842804 	addi	r2,r2,4256
  8002e8:	10800037 	ldwio	r2,0(r2)
  8002ec:	1080004c 	andi	r2,r2,1
  8002f0:	1005003a 	cmpeq	r2,r2,zero
  8002f4:	e0bff885 	stb	r2,-30(fp)

		tick(&data);
  8002f8:	e13ff804 	addi	r4,fp,-32
  8002fc:	0800a3c0 	call	800a3c <tick>

		IOWR(LEDS_GREEN_BASE, 0, data.A | (data.B << 1) | (data.R << 2));
  800300:	e0bff803 	ldbu	r2,-32(fp)
  800304:	10c03fcc 	andi	r3,r2,255
  800308:	18c0201c 	xori	r3,r3,128
  80030c:	18ffe004 	addi	r3,r3,-128
  800310:	e0bff843 	ldbu	r2,-31(fp)
  800314:	10803fcc 	andi	r2,r2,255
  800318:	1080201c 	xori	r2,r2,128
  80031c:	10bfe004 	addi	r2,r2,-128
  800320:	1085883a 	add	r2,r2,r2
  800324:	1886b03a 	or	r3,r3,r2
  800328:	e0bff883 	ldbu	r2,-30(fp)
  80032c:	10803fcc 	andi	r2,r2,255
  800330:	1080201c 	xori	r2,r2,128
  800334:	10bfe004 	addi	r2,r2,-128
  800338:	1085883a 	add	r2,r2,r2
  80033c:	1085883a 	add	r2,r2,r2
  800340:	1886b03a 	or	r3,r3,r2
  800344:	00804074 	movhi	r2,257
  800348:	10841c04 	addi	r2,r2,4208
  80034c:	10c00035 	stwio	r3,0(r2)
		IOWR(LEDS_RED_BASE, 0, data.O);
  800350:	e0bff8c3 	ldbu	r2,-29(fp)
  800354:	10c03fcc 	andi	r3,r2,255
  800358:	18c0201c 	xori	r3,r3,128
  80035c:	18ffe004 	addi	r3,r3,-128
  800360:	00804074 	movhi	r2,257
  800364:	10842004 	addi	r2,r2,4224
  800368:	10c00035 	stwio	r3,0(r2)

	}
  80036c:	003fce06 	br	8002a8 <__alt_mem_onchip_mem+0xff7f82a8>

00800370 <logic>:
 * http://rtsys.informatik.uni-kiel.de/kieler
 */

#include "sccharts.h"

void logic(TickData* d) {
  800370:	defffe04 	addi	sp,sp,-8
  800374:	df000115 	stw	fp,4(sp)
  800378:	df000104 	addi	fp,sp,4
  80037c:	e13fff15 	stw	r4,-4(fp)
  d->_g5 = d->_pg14_e1;
  800380:	e0bfff17 	ldw	r2,-4(fp)
  800384:	10c006c3 	ldbu	r3,27(r2)
  800388:	e0bfff17 	ldw	r2,-4(fp)
  80038c:	10c00105 	stb	r3,4(r2)
  d->_g10 = d->_pg14;
  800390:	e0bfff17 	ldw	r2,-4(fp)
  800394:	10c00703 	ldbu	r3,28(r2)
  800398:	e0bfff17 	ldw	r2,-4(fp)
  80039c:	10c001c5 	stb	r3,7(r2)
  d->_g14_e1 = !(d->_g5 || d->_g10);
  8003a0:	e0bfff17 	ldw	r2,-4(fp)
  8003a4:	10800103 	ldbu	r2,4(r2)
  8003a8:	10803fcc 	andi	r2,r2,255
  8003ac:	1080201c 	xori	r2,r2,128
  8003b0:	10bfe004 	addi	r2,r2,-128
  8003b4:	1000081e 	bne	r2,zero,8003d8 <logic+0x68>
  8003b8:	e0bfff17 	ldw	r2,-4(fp)
  8003bc:	108001c3 	ldbu	r2,7(r2)
  8003c0:	10803fcc 	andi	r2,r2,255
  8003c4:	1080201c 	xori	r2,r2,128
  8003c8:	10bfe004 	addi	r2,r2,-128
  8003cc:	1000021e 	bne	r2,zero,8003d8 <logic+0x68>
  8003d0:	00800044 	movi	r2,1
  8003d4:	00000106 	br	8003dc <logic+0x6c>
  8003d8:	0005883a 	mov	r2,zero
  8003dc:	1007883a 	mov	r3,r2
  8003e0:	e0bfff17 	ldw	r2,-4(fp)
  8003e4:	10c00605 	stb	r3,24(r2)
  d->_g6_e1 = !d->_g5;
  8003e8:	e0bfff17 	ldw	r2,-4(fp)
  8003ec:	10800103 	ldbu	r2,4(r2)
  8003f0:	10803fcc 	andi	r2,r2,255
  8003f4:	1080201c 	xori	r2,r2,128
  8003f8:	10bfe004 	addi	r2,r2,-128
  8003fc:	1005003a 	cmpeq	r2,r2,zero
  800400:	1007883a 	mov	r3,r2
  800404:	e0bfff17 	ldw	r2,-4(fp)
  800408:	10c00585 	stb	r3,22(r2)
  d->_g7 = d->_g5 && !d->R;
  80040c:	e0bfff17 	ldw	r2,-4(fp)
  800410:	10800103 	ldbu	r2,4(r2)
  800414:	10803fcc 	andi	r2,r2,255
  800418:	1080201c 	xori	r2,r2,128
  80041c:	10bfe004 	addi	r2,r2,-128
  800420:	10000826 	beq	r2,zero,800444 <logic+0xd4>
  800424:	e0bfff17 	ldw	r2,-4(fp)
  800428:	10800083 	ldbu	r2,2(r2)
  80042c:	10803fcc 	andi	r2,r2,255
  800430:	1080201c 	xori	r2,r2,128
  800434:	10bfe004 	addi	r2,r2,-128
  800438:	1000021e 	bne	r2,zero,800444 <logic+0xd4>
  80043c:	00800044 	movi	r2,1
  800440:	00000106 	br	800448 <logic+0xd8>
  800444:	0005883a 	mov	r2,zero
  800448:	1007883a 	mov	r3,r2
  80044c:	e0bfff17 	ldw	r2,-4(fp)
  800450:	10c00185 	stb	r3,6(r2)
  d->_g5 = d->_g5 && d->R || d->_g7 && d->A;
  800454:	e0bfff17 	ldw	r2,-4(fp)
  800458:	10800103 	ldbu	r2,4(r2)
  80045c:	10803fcc 	andi	r2,r2,255
  800460:	1080201c 	xori	r2,r2,128
  800464:	10bfe004 	addi	r2,r2,-128
  800468:	10000626 	beq	r2,zero,800484 <logic+0x114>
  80046c:	e0bfff17 	ldw	r2,-4(fp)
  800470:	10800083 	ldbu	r2,2(r2)
  800474:	10803fcc 	andi	r2,r2,255
  800478:	1080201c 	xori	r2,r2,128
  80047c:	10bfe004 	addi	r2,r2,-128
  800480:	10000c1e 	bne	r2,zero,8004b4 <logic+0x144>
  800484:	e0bfff17 	ldw	r2,-4(fp)
  800488:	10800183 	ldbu	r2,6(r2)
  80048c:	10803fcc 	andi	r2,r2,255
  800490:	1080201c 	xori	r2,r2,128
  800494:	10bfe004 	addi	r2,r2,-128
  800498:	10000826 	beq	r2,zero,8004bc <logic+0x14c>
  80049c:	e0bfff17 	ldw	r2,-4(fp)
  8004a0:	10800003 	ldbu	r2,0(r2)
  8004a4:	10803fcc 	andi	r2,r2,255
  8004a8:	1080201c 	xori	r2,r2,128
  8004ac:	10bfe004 	addi	r2,r2,-128
  8004b0:	10000226 	beq	r2,zero,8004bc <logic+0x14c>
  8004b4:	00800044 	movi	r2,1
  8004b8:	00000106 	br	8004c0 <logic+0x150>
  8004bc:	0005883a 	mov	r2,zero
  8004c0:	1007883a 	mov	r3,r2
  8004c4:	e0bfff17 	ldw	r2,-4(fp)
  8004c8:	10c00105 	stb	r3,4(r2)
  d->_g11_e2 = !d->_g10;
  8004cc:	e0bfff17 	ldw	r2,-4(fp)
  8004d0:	108001c3 	ldbu	r2,7(r2)
  8004d4:	10803fcc 	andi	r2,r2,255
  8004d8:	1080201c 	xori	r2,r2,128
  8004dc:	10bfe004 	addi	r2,r2,-128
  8004e0:	1005003a 	cmpeq	r2,r2,zero
  8004e4:	1007883a 	mov	r3,r2
  8004e8:	e0bfff17 	ldw	r2,-4(fp)
  8004ec:	10c005c5 	stb	r3,23(r2)
  d->_g12 = d->_g10 && !d->R;
  8004f0:	e0bfff17 	ldw	r2,-4(fp)
  8004f4:	108001c3 	ldbu	r2,7(r2)
  8004f8:	10803fcc 	andi	r2,r2,255
  8004fc:	1080201c 	xori	r2,r2,128
  800500:	10bfe004 	addi	r2,r2,-128
  800504:	10000826 	beq	r2,zero,800528 <logic+0x1b8>
  800508:	e0bfff17 	ldw	r2,-4(fp)
  80050c:	10800083 	ldbu	r2,2(r2)
  800510:	10803fcc 	andi	r2,r2,255
  800514:	1080201c 	xori	r2,r2,128
  800518:	10bfe004 	addi	r2,r2,-128
  80051c:	1000021e 	bne	r2,zero,800528 <logic+0x1b8>
  800520:	00800044 	movi	r2,1
  800524:	00000106 	br	80052c <logic+0x1bc>
  800528:	0005883a 	mov	r2,zero
  80052c:	1007883a 	mov	r3,r2
  800530:	e0bfff17 	ldw	r2,-4(fp)
  800534:	10c00245 	stb	r3,9(r2)
  d->_g10 = d->_g10 && d->R || d->_g12 && d->B;
  800538:	e0bfff17 	ldw	r2,-4(fp)
  80053c:	108001c3 	ldbu	r2,7(r2)
  800540:	10803fcc 	andi	r2,r2,255
  800544:	1080201c 	xori	r2,r2,128
  800548:	10bfe004 	addi	r2,r2,-128
  80054c:	10000626 	beq	r2,zero,800568 <logic+0x1f8>
  800550:	e0bfff17 	ldw	r2,-4(fp)
  800554:	10800083 	ldbu	r2,2(r2)
  800558:	10803fcc 	andi	r2,r2,255
  80055c:	1080201c 	xori	r2,r2,128
  800560:	10bfe004 	addi	r2,r2,-128
  800564:	10000c1e 	bne	r2,zero,800598 <logic+0x228>
  800568:	e0bfff17 	ldw	r2,-4(fp)
  80056c:	10800243 	ldbu	r2,9(r2)
  800570:	10803fcc 	andi	r2,r2,255
  800574:	1080201c 	xori	r2,r2,128
  800578:	10bfe004 	addi	r2,r2,-128
  80057c:	10000826 	beq	r2,zero,8005a0 <logic+0x230>
  800580:	e0bfff17 	ldw	r2,-4(fp)
  800584:	10800043 	ldbu	r2,1(r2)
  800588:	10803fcc 	andi	r2,r2,255
  80058c:	1080201c 	xori	r2,r2,128
  800590:	10bfe004 	addi	r2,r2,-128
  800594:	10000226 	beq	r2,zero,8005a0 <logic+0x230>
  800598:	00800044 	movi	r2,1
  80059c:	00000106 	br	8005a4 <logic+0x234>
  8005a0:	0005883a 	mov	r2,zero
  8005a4:	1007883a 	mov	r3,r2
  8005a8:	e0bfff17 	ldw	r2,-4(fp)
  8005ac:	10c001c5 	stb	r3,7(r2)
  d->_g11_e2 = (d->_g6_e1 || d->_g5) && (d->_g11_e2 || d->_g10) && (d->_g5 || d->_g10);
  8005b0:	e0bfff17 	ldw	r2,-4(fp)
  8005b4:	10800583 	ldbu	r2,22(r2)
  8005b8:	10803fcc 	andi	r2,r2,255
  8005bc:	1080201c 	xori	r2,r2,128
  8005c0:	10bfe004 	addi	r2,r2,-128
  8005c4:	1000061e 	bne	r2,zero,8005e0 <logic+0x270>
  8005c8:	e0bfff17 	ldw	r2,-4(fp)
  8005cc:	10800103 	ldbu	r2,4(r2)
  8005d0:	10803fcc 	andi	r2,r2,255
  8005d4:	1080201c 	xori	r2,r2,128
  8005d8:	10bfe004 	addi	r2,r2,-128
  8005dc:	10001a26 	beq	r2,zero,800648 <logic+0x2d8>
  8005e0:	e0bfff17 	ldw	r2,-4(fp)
  8005e4:	108005c3 	ldbu	r2,23(r2)
  8005e8:	10803fcc 	andi	r2,r2,255
  8005ec:	1080201c 	xori	r2,r2,128
  8005f0:	10bfe004 	addi	r2,r2,-128
  8005f4:	1000061e 	bne	r2,zero,800610 <logic+0x2a0>
  8005f8:	e0bfff17 	ldw	r2,-4(fp)
  8005fc:	108001c3 	ldbu	r2,7(r2)
  800600:	10803fcc 	andi	r2,r2,255
  800604:	1080201c 	xori	r2,r2,128
  800608:	10bfe004 	addi	r2,r2,-128
  80060c:	10000e26 	beq	r2,zero,800648 <logic+0x2d8>
  800610:	e0bfff17 	ldw	r2,-4(fp)
  800614:	10800103 	ldbu	r2,4(r2)
  800618:	10803fcc 	andi	r2,r2,255
  80061c:	1080201c 	xori	r2,r2,128
  800620:	10bfe004 	addi	r2,r2,-128
  800624:	1000061e 	bne	r2,zero,800640 <logic+0x2d0>
  800628:	e0bfff17 	ldw	r2,-4(fp)
  80062c:	108001c3 	ldbu	r2,7(r2)
  800630:	10803fcc 	andi	r2,r2,255
  800634:	1080201c 	xori	r2,r2,128
  800638:	10bfe004 	addi	r2,r2,-128
  80063c:	10000226 	beq	r2,zero,800648 <logic+0x2d8>
  800640:	00800044 	movi	r2,1
  800644:	00000106 	br	80064c <logic+0x2dc>
  800648:	0005883a 	mov	r2,zero
  80064c:	1007883a 	mov	r3,r2
  800650:	e0bfff17 	ldw	r2,-4(fp)
  800654:	10c005c5 	stb	r3,23(r2)
  d->_g11 = d->_g11_e2 && !d->R;
  800658:	e0bfff17 	ldw	r2,-4(fp)
  80065c:	108005c3 	ldbu	r2,23(r2)
  800660:	10803fcc 	andi	r2,r2,255
  800664:	1080201c 	xori	r2,r2,128
  800668:	10bfe004 	addi	r2,r2,-128
  80066c:	10000826 	beq	r2,zero,800690 <logic+0x320>
  800670:	e0bfff17 	ldw	r2,-4(fp)
  800674:	10800083 	ldbu	r2,2(r2)
  800678:	10803fcc 	andi	r2,r2,255
  80067c:	1080201c 	xori	r2,r2,128
  800680:	10bfe004 	addi	r2,r2,-128
  800684:	1000021e 	bne	r2,zero,800690 <logic+0x320>
  800688:	00800044 	movi	r2,1
  80068c:	00000106 	br	800694 <logic+0x324>
  800690:	0005883a 	mov	r2,zero
  800694:	1007883a 	mov	r3,r2
  800698:	e0bfff17 	ldw	r2,-4(fp)
  80069c:	10c00205 	stb	r3,8(r2)
  if (d->_g11) {
  8006a0:	e0bfff17 	ldw	r2,-4(fp)
  8006a4:	10800203 	ldbu	r2,8(r2)
  8006a8:	10803fcc 	andi	r2,r2,255
  8006ac:	1080201c 	xori	r2,r2,128
  8006b0:	10bfe004 	addi	r2,r2,-128
  8006b4:	10000326 	beq	r2,zero,8006c4 <logic+0x354>
    d->O = 1;
  8006b8:	e0bfff17 	ldw	r2,-4(fp)
  8006bc:	00c00044 	movi	r3,1
  8006c0:	10c000c5 	stb	r3,3(r2)
  }
  d->_g6_e1 = d->_g11_e2 && d->R || d->_g11;
  8006c4:	e0bfff17 	ldw	r2,-4(fp)
  8006c8:	108005c3 	ldbu	r2,23(r2)
  8006cc:	10803fcc 	andi	r2,r2,255
  8006d0:	1080201c 	xori	r2,r2,128
  8006d4:	10bfe004 	addi	r2,r2,-128
  8006d8:	10000626 	beq	r2,zero,8006f4 <logic+0x384>
  8006dc:	e0bfff17 	ldw	r2,-4(fp)
  8006e0:	10800083 	ldbu	r2,2(r2)
  8006e4:	10803fcc 	andi	r2,r2,255
  8006e8:	1080201c 	xori	r2,r2,128
  8006ec:	10bfe004 	addi	r2,r2,-128
  8006f0:	1000061e 	bne	r2,zero,80070c <logic+0x39c>
  8006f4:	e0bfff17 	ldw	r2,-4(fp)
  8006f8:	10800203 	ldbu	r2,8(r2)
  8006fc:	10803fcc 	andi	r2,r2,255
  800700:	1080201c 	xori	r2,r2,128
  800704:	10bfe004 	addi	r2,r2,-128
  800708:	10000226 	beq	r2,zero,800714 <logic+0x3a4>
  80070c:	00800044 	movi	r2,1
  800710:	00000106 	br	800718 <logic+0x3a8>
  800714:	0005883a 	mov	r2,zero
  800718:	1007883a 	mov	r3,r2
  80071c:	e0bfff17 	ldw	r2,-4(fp)
  800720:	10c00585 	stb	r3,22(r2)
  d->_g6 = d->_pg20;
  800724:	e0bfff17 	ldw	r2,-4(fp)
  800728:	10c00743 	ldbu	r3,29(r2)
  80072c:	e0bfff17 	ldw	r2,-4(fp)
  800730:	10c00145 	stb	r3,5(r2)
  d->_g15 = !d->_g6;
  800734:	e0bfff17 	ldw	r2,-4(fp)
  800738:	10800143 	ldbu	r2,5(r2)
  80073c:	10803fcc 	andi	r2,r2,255
  800740:	1080201c 	xori	r2,r2,128
  800744:	10bfe004 	addi	r2,r2,-128
  800748:	1005003a 	cmpeq	r2,r2,zero
  80074c:	1007883a 	mov	r3,r2
  800750:	e0bfff17 	ldw	r2,-4(fp)
  800754:	10c00305 	stb	r3,12(r2)
  d->_g13 = d->_g6 && d->R;
  800758:	e0bfff17 	ldw	r2,-4(fp)
  80075c:	10800143 	ldbu	r2,5(r2)
  800760:	10803fcc 	andi	r2,r2,255
  800764:	1080201c 	xori	r2,r2,128
  800768:	10bfe004 	addi	r2,r2,-128
  80076c:	10000826 	beq	r2,zero,800790 <logic+0x420>
  800770:	e0bfff17 	ldw	r2,-4(fp)
  800774:	10800083 	ldbu	r2,2(r2)
  800778:	10803fcc 	andi	r2,r2,255
  80077c:	1080201c 	xori	r2,r2,128
  800780:	10bfe004 	addi	r2,r2,-128
  800784:	10000226 	beq	r2,zero,800790 <logic+0x420>
  800788:	00800044 	movi	r2,1
  80078c:	00000106 	br	800794 <logic+0x424>
  800790:	0005883a 	mov	r2,zero
  800794:	1007883a 	mov	r3,r2
  800798:	e0bfff17 	ldw	r2,-4(fp)
  80079c:	10c00285 	stb	r3,10(r2)
  d->_g19_e2 = (d->_g14_e1 || d->_g6_e1) && (d->_g15 || d->_g13) && (d->_g6_e1 || d->_g13);
  8007a0:	e0bfff17 	ldw	r2,-4(fp)
  8007a4:	10800603 	ldbu	r2,24(r2)
  8007a8:	10803fcc 	andi	r2,r2,255
  8007ac:	1080201c 	xori	r2,r2,128
  8007b0:	10bfe004 	addi	r2,r2,-128
  8007b4:	1000061e 	bne	r2,zero,8007d0 <logic+0x460>
  8007b8:	e0bfff17 	ldw	r2,-4(fp)
  8007bc:	10800583 	ldbu	r2,22(r2)
  8007c0:	10803fcc 	andi	r2,r2,255
  8007c4:	1080201c 	xori	r2,r2,128
  8007c8:	10bfe004 	addi	r2,r2,-128
  8007cc:	10001a26 	beq	r2,zero,800838 <logic+0x4c8>
  8007d0:	e0bfff17 	ldw	r2,-4(fp)
  8007d4:	10800303 	ldbu	r2,12(r2)
  8007d8:	10803fcc 	andi	r2,r2,255
  8007dc:	1080201c 	xori	r2,r2,128
  8007e0:	10bfe004 	addi	r2,r2,-128
  8007e4:	1000061e 	bne	r2,zero,800800 <logic+0x490>
  8007e8:	e0bfff17 	ldw	r2,-4(fp)
  8007ec:	10800283 	ldbu	r2,10(r2)
  8007f0:	10803fcc 	andi	r2,r2,255
  8007f4:	1080201c 	xori	r2,r2,128
  8007f8:	10bfe004 	addi	r2,r2,-128
  8007fc:	10000e26 	beq	r2,zero,800838 <logic+0x4c8>
  800800:	e0bfff17 	ldw	r2,-4(fp)
  800804:	10800583 	ldbu	r2,22(r2)
  800808:	10803fcc 	andi	r2,r2,255
  80080c:	1080201c 	xori	r2,r2,128
  800810:	10bfe004 	addi	r2,r2,-128
  800814:	1000061e 	bne	r2,zero,800830 <logic+0x4c0>
  800818:	e0bfff17 	ldw	r2,-4(fp)
  80081c:	10800283 	ldbu	r2,10(r2)
  800820:	10803fcc 	andi	r2,r2,255
  800824:	1080201c 	xori	r2,r2,128
  800828:	10bfe004 	addi	r2,r2,-128
  80082c:	10000226 	beq	r2,zero,800838 <logic+0x4c8>
  800830:	00800044 	movi	r2,1
  800834:	00000106 	br	80083c <logic+0x4cc>
  800838:	0005883a 	mov	r2,zero
  80083c:	1007883a 	mov	r3,r2
  800840:	e0bfff17 	ldw	r2,-4(fp)
  800844:	10c00645 	stb	r3,25(r2)
  d->_g19 = d->_GO || d->_g19_e2;
  800848:	e0bfff17 	ldw	r2,-4(fp)
  80084c:	108003c3 	ldbu	r2,15(r2)
  800850:	10803fcc 	andi	r2,r2,255
  800854:	1080201c 	xori	r2,r2,128
  800858:	10bfe004 	addi	r2,r2,-128
  80085c:	1000061e 	bne	r2,zero,800878 <logic+0x508>
  800860:	e0bfff17 	ldw	r2,-4(fp)
  800864:	10800643 	ldbu	r2,25(r2)
  800868:	10803fcc 	andi	r2,r2,255
  80086c:	1080201c 	xori	r2,r2,128
  800870:	10bfe004 	addi	r2,r2,-128
  800874:	10000226 	beq	r2,zero,800880 <logic+0x510>
  800878:	00800044 	movi	r2,1
  80087c:	00000106 	br	800884 <logic+0x514>
  800880:	0005883a 	mov	r2,zero
  800884:	1007883a 	mov	r3,r2
  800888:	e0bfff17 	ldw	r2,-4(fp)
  80088c:	10c00345 	stb	r3,13(r2)
  if (d->_g19) {
  800890:	e0bfff17 	ldw	r2,-4(fp)
  800894:	10800343 	ldbu	r2,13(r2)
  800898:	10803fcc 	andi	r2,r2,255
  80089c:	1080201c 	xori	r2,r2,128
  8008a0:	10bfe004 	addi	r2,r2,-128
  8008a4:	10000226 	beq	r2,zero,8008b0 <logic+0x540>
    d->O = 0;
  8008a8:	e0bfff17 	ldw	r2,-4(fp)
  8008ac:	100000c5 	stb	zero,3(r2)
  }
  d->_g14_e1 = d->_g19 || d->_g7 && !d->A;
  8008b0:	e0bfff17 	ldw	r2,-4(fp)
  8008b4:	10800343 	ldbu	r2,13(r2)
  8008b8:	10803fcc 	andi	r2,r2,255
  8008bc:	1080201c 	xori	r2,r2,128
  8008c0:	10bfe004 	addi	r2,r2,-128
  8008c4:	10000c1e 	bne	r2,zero,8008f8 <logic+0x588>
  8008c8:	e0bfff17 	ldw	r2,-4(fp)
  8008cc:	10800183 	ldbu	r2,6(r2)
  8008d0:	10803fcc 	andi	r2,r2,255
  8008d4:	1080201c 	xori	r2,r2,128
  8008d8:	10bfe004 	addi	r2,r2,-128
  8008dc:	10000826 	beq	r2,zero,800900 <logic+0x590>
  8008e0:	e0bfff17 	ldw	r2,-4(fp)
  8008e4:	10800003 	ldbu	r2,0(r2)
  8008e8:	10803fcc 	andi	r2,r2,255
  8008ec:	1080201c 	xori	r2,r2,128
  8008f0:	10bfe004 	addi	r2,r2,-128
  8008f4:	1000021e 	bne	r2,zero,800900 <logic+0x590>
  8008f8:	00800044 	movi	r2,1
  8008fc:	00000106 	br	800904 <logic+0x594>
  800900:	0005883a 	mov	r2,zero
  800904:	1007883a 	mov	r3,r2
  800908:	e0bfff17 	ldw	r2,-4(fp)
  80090c:	10c00605 	stb	r3,24(r2)
  d->_g14 = d->_g19 || d->_g12 && !d->B;
  800910:	e0bfff17 	ldw	r2,-4(fp)
  800914:	10800343 	ldbu	r2,13(r2)
  800918:	10803fcc 	andi	r2,r2,255
  80091c:	1080201c 	xori	r2,r2,128
  800920:	10bfe004 	addi	r2,r2,-128
  800924:	10000c1e 	bne	r2,zero,800958 <logic+0x5e8>
  800928:	e0bfff17 	ldw	r2,-4(fp)
  80092c:	10800243 	ldbu	r2,9(r2)
  800930:	10803fcc 	andi	r2,r2,255
  800934:	1080201c 	xori	r2,r2,128
  800938:	10bfe004 	addi	r2,r2,-128
  80093c:	10000826 	beq	r2,zero,800960 <logic+0x5f0>
  800940:	e0bfff17 	ldw	r2,-4(fp)
  800944:	10800043 	ldbu	r2,1(r2)
  800948:	10803fcc 	andi	r2,r2,255
  80094c:	1080201c 	xori	r2,r2,128
  800950:	10bfe004 	addi	r2,r2,-128
  800954:	1000021e 	bne	r2,zero,800960 <logic+0x5f0>
  800958:	00800044 	movi	r2,1
  80095c:	00000106 	br	800964 <logic+0x5f4>
  800960:	0005883a 	mov	r2,zero
  800964:	1007883a 	mov	r3,r2
  800968:	e0bfff17 	ldw	r2,-4(fp)
  80096c:	10c002c5 	stb	r3,11(r2)
  d->_g20 = d->_g19 || d->_g6 && !d->R;
  800970:	e0bfff17 	ldw	r2,-4(fp)
  800974:	10800343 	ldbu	r2,13(r2)
  800978:	10803fcc 	andi	r2,r2,255
  80097c:	1080201c 	xori	r2,r2,128
  800980:	10bfe004 	addi	r2,r2,-128
  800984:	10000c1e 	bne	r2,zero,8009b8 <logic+0x648>
  800988:	e0bfff17 	ldw	r2,-4(fp)
  80098c:	10800143 	ldbu	r2,5(r2)
  800990:	10803fcc 	andi	r2,r2,255
  800994:	1080201c 	xori	r2,r2,128
  800998:	10bfe004 	addi	r2,r2,-128
  80099c:	10000826 	beq	r2,zero,8009c0 <logic+0x650>
  8009a0:	e0bfff17 	ldw	r2,-4(fp)
  8009a4:	10800083 	ldbu	r2,2(r2)
  8009a8:	10803fcc 	andi	r2,r2,255
  8009ac:	1080201c 	xori	r2,r2,128
  8009b0:	10bfe004 	addi	r2,r2,-128
  8009b4:	1000021e 	bne	r2,zero,8009c0 <logic+0x650>
  8009b8:	00800044 	movi	r2,1
  8009bc:	00000106 	br	8009c4 <logic+0x654>
  8009c0:	0005883a 	mov	r2,zero
  8009c4:	1007883a 	mov	r3,r2
  8009c8:	e0bfff17 	ldw	r2,-4(fp)
  8009cc:	10c00385 	stb	r3,14(r2)
}
  8009d0:	0001883a 	nop
  8009d4:	e037883a 	mov	sp,fp
  8009d8:	df000017 	ldw	fp,0(sp)
  8009dc:	dec00104 	addi	sp,sp,4
  8009e0:	f800283a 	ret

008009e4 <reset>:

void reset(TickData* d) {
  8009e4:	defffe04 	addi	sp,sp,-8
  8009e8:	df000115 	stw	fp,4(sp)
  8009ec:	df000104 	addi	fp,sp,4
  8009f0:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  8009f4:	e0bfff17 	ldw	r2,-4(fp)
  8009f8:	00c00044 	movi	r3,1
  8009fc:	10c003c5 	stb	r3,15(r2)
  d->_TERM = 0;
  800a00:	e0bfff17 	ldw	r2,-4(fp)
  800a04:	10000685 	stb	zero,26(r2)
  d->O = 0;
  800a08:	e0bfff17 	ldw	r2,-4(fp)
  800a0c:	100000c5 	stb	zero,3(r2)
  d->_pg14_e1 = 0;
  800a10:	e0bfff17 	ldw	r2,-4(fp)
  800a14:	100006c5 	stb	zero,27(r2)
  d->_pg14 = 0;
  800a18:	e0bfff17 	ldw	r2,-4(fp)
  800a1c:	10000705 	stb	zero,28(r2)
  d->_pg20 = 0;
  800a20:	e0bfff17 	ldw	r2,-4(fp)
  800a24:	10000745 	stb	zero,29(r2)
}
  800a28:	0001883a 	nop
  800a2c:	e037883a 	mov	sp,fp
  800a30:	df000017 	ldw	fp,0(sp)
  800a34:	dec00104 	addi	sp,sp,4
  800a38:	f800283a 	ret

00800a3c <tick>:

void tick(TickData* d) {
  800a3c:	defffd04 	addi	sp,sp,-12
  800a40:	dfc00215 	stw	ra,8(sp)
  800a44:	df000115 	stw	fp,4(sp)
  800a48:	df000104 	addi	fp,sp,4
  800a4c:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  800a50:	e13fff17 	ldw	r4,-4(fp)
  800a54:	08003700 	call	800370 <logic>

  d->_pg14_e1 = d->_g14_e1;
  800a58:	e0bfff17 	ldw	r2,-4(fp)
  800a5c:	10c00603 	ldbu	r3,24(r2)
  800a60:	e0bfff17 	ldw	r2,-4(fp)
  800a64:	10c006c5 	stb	r3,27(r2)
  d->_pg14 = d->_g14;
  800a68:	e0bfff17 	ldw	r2,-4(fp)
  800a6c:	10c002c3 	ldbu	r3,11(r2)
  800a70:	e0bfff17 	ldw	r2,-4(fp)
  800a74:	10c00705 	stb	r3,28(r2)
  d->_pg20 = d->_g20;
  800a78:	e0bfff17 	ldw	r2,-4(fp)
  800a7c:	10c00383 	ldbu	r3,14(r2)
  800a80:	e0bfff17 	ldw	r2,-4(fp)
  800a84:	10c00745 	stb	r3,29(r2)
  d->_GO = 0;
  800a88:	e0bfff17 	ldw	r2,-4(fp)
  800a8c:	100003c5 	stb	zero,15(r2)
}
  800a90:	0001883a 	nop
  800a94:	e037883a 	mov	sp,fp
  800a98:	dfc00117 	ldw	ra,4(sp)
  800a9c:	df000017 	ldw	fp,0(sp)
  800aa0:	dec00204 	addi	sp,sp,8
  800aa4:	f800283a 	ret

00800aa8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800aa8:	defffc04 	addi	sp,sp,-16
  800aac:	df000315 	stw	fp,12(sp)
  800ab0:	df000304 	addi	fp,sp,12
  800ab4:	e13ffd15 	stw	r4,-12(fp)
  800ab8:	e17ffe15 	stw	r5,-8(fp)
  800abc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800ac0:	e0fffe17 	ldw	r3,-8(fp)
  800ac4:	e0bffd17 	ldw	r2,-12(fp)
  800ac8:	18800c26 	beq	r3,r2,800afc <alt_load_section+0x54>
  {
    while( to != end )
  800acc:	00000806 	br	800af0 <alt_load_section+0x48>
    {
      *to++ = *from++;
  800ad0:	e0bffe17 	ldw	r2,-8(fp)
  800ad4:	10c00104 	addi	r3,r2,4
  800ad8:	e0fffe15 	stw	r3,-8(fp)
  800adc:	e0fffd17 	ldw	r3,-12(fp)
  800ae0:	19000104 	addi	r4,r3,4
  800ae4:	e13ffd15 	stw	r4,-12(fp)
  800ae8:	18c00017 	ldw	r3,0(r3)
  800aec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800af0:	e0fffe17 	ldw	r3,-8(fp)
  800af4:	e0bfff17 	ldw	r2,-4(fp)
  800af8:	18bff51e 	bne	r3,r2,800ad0 <__alt_mem_onchip_mem+0xff7f8ad0>
    {
      *to++ = *from++;
    }
  }
}
  800afc:	0001883a 	nop
  800b00:	e037883a 	mov	sp,fp
  800b04:	df000017 	ldw	fp,0(sp)
  800b08:	dec00104 	addi	sp,sp,4
  800b0c:	f800283a 	ret

00800b10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800b10:	defffe04 	addi	sp,sp,-8
  800b14:	dfc00115 	stw	ra,4(sp)
  800b18:	df000015 	stw	fp,0(sp)
  800b1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800b20:	01802034 	movhi	r6,128
  800b24:	31995404 	addi	r6,r6,25936
  800b28:	01402034 	movhi	r5,128
  800b2c:	29534304 	addi	r5,r5,19724
  800b30:	01002034 	movhi	r4,128
  800b34:	21195404 	addi	r4,r4,25936
  800b38:	0800aa80 	call	800aa8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800b3c:	01802034 	movhi	r6,128
  800b40:	31809104 	addi	r6,r6,580
  800b44:	01402034 	movhi	r5,128
  800b48:	29400804 	addi	r5,r5,32
  800b4c:	01002034 	movhi	r4,128
  800b50:	21000804 	addi	r4,r4,32
  800b54:	0800aa80 	call	800aa8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  800b58:	01802034 	movhi	r6,128
  800b5c:	31934304 	addi	r6,r6,19724
  800b60:	01402034 	movhi	r5,128
  800b64:	29529104 	addi	r5,r5,19012
  800b68:	01002034 	movhi	r4,128
  800b6c:	21129104 	addi	r4,r4,19012
  800b70:	0800aa80 	call	800aa8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800b74:	080325c0 	call	80325c <alt_dcache_flush_all>
  alt_icache_flush_all();
  800b78:	08034700 	call	803470 <alt_icache_flush_all>
}
  800b7c:	0001883a 	nop
  800b80:	e037883a 	mov	sp,fp
  800b84:	dfc00117 	ldw	ra,4(sp)
  800b88:	df000017 	ldw	fp,0(sp)
  800b8c:	dec00204 	addi	sp,sp,8
  800b90:	f800283a 	ret

00800b94 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800b94:	defffd04 	addi	sp,sp,-12
  800b98:	dfc00215 	stw	ra,8(sp)
  800b9c:	df000115 	stw	fp,4(sp)
  800ba0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800ba4:	0009883a 	mov	r4,zero
  800ba8:	0800c440 	call	800c44 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  800bac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800bb0:	0800c7c0 	call	800c7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800bb4:	01802034 	movhi	r6,128
  800bb8:	31929104 	addi	r6,r6,19012
  800bbc:	01402034 	movhi	r5,128
  800bc0:	29529104 	addi	r5,r5,19012
  800bc4:	01002034 	movhi	r4,128
  800bc8:	21129104 	addi	r4,r4,19012
  800bcc:	08038080 	call	803808 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  800bd0:	08033b00 	call	8033b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  800bd4:	01002034 	movhi	r4,128
  800bd8:	210d0404 	addi	r4,r4,13328
  800bdc:	08041f40 	call	8041f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  800be0:	d0a61e17 	ldw	r2,-26504(gp)
  800be4:	d0e61f17 	ldw	r3,-26500(gp)
  800be8:	d1262017 	ldw	r4,-26496(gp)
  800bec:	200d883a 	mov	r6,r4
  800bf0:	180b883a 	mov	r5,r3
  800bf4:	1009883a 	mov	r4,r2
  800bf8:	08002900 	call	800290 <main>
  800bfc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  800c00:	01000044 	movi	r4,1
  800c04:	080318c0 	call	80318c <close>
  exit (result);
  800c08:	e13fff17 	ldw	r4,-4(fp)
  800c0c:	08042080 	call	804208 <exit>

00800c10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  800c10:	defffd04 	addi	sp,sp,-12
  800c14:	dfc00215 	stw	ra,8(sp)
  800c18:	df000115 	stw	fp,4(sp)
  800c1c:	df000104 	addi	fp,sp,4
  800c20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800c24:	d1600304 	addi	r5,gp,-32756
  800c28:	e13fff17 	ldw	r4,-4(fp)
  800c2c:	080330c0 	call	80330c <alt_dev_llist_insert>
}
  800c30:	e037883a 	mov	sp,fp
  800c34:	dfc00117 	ldw	ra,4(sp)
  800c38:	df000017 	ldw	fp,0(sp)
  800c3c:	dec00204 	addi	sp,sp,8
  800c40:	f800283a 	ret

00800c44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800c44:	defffd04 	addi	sp,sp,-12
  800c48:	dfc00215 	stw	ra,8(sp)
  800c4c:	df000115 	stw	fp,4(sp)
  800c50:	df000104 	addi	fp,sp,4
  800c54:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  800c58:	0803d100 	call	803d10 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800c5c:	00800044 	movi	r2,1
  800c60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800c64:	0001883a 	nop
  800c68:	e037883a 	mov	sp,fp
  800c6c:	dfc00117 	ldw	ra,4(sp)
  800c70:	df000017 	ldw	fp,0(sp)
  800c74:	dec00204 	addi	sp,sp,8
  800c78:	f800283a 	ret

00800c7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800c7c:	defffe04 	addi	sp,sp,-8
  800c80:	dfc00115 	stw	ra,4(sp)
  800c84:	df000015 	stw	fp,0(sp)
  800c88:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  800c8c:	01c0fa04 	movi	r7,1000
  800c90:	01800084 	movi	r6,2
  800c94:	000b883a 	mov	r5,zero
  800c98:	01004074 	movhi	r4,257
  800c9c:	21040804 	addi	r4,r4,4128
  800ca0:	08026d00 	call	8026d0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  800ca4:	01800044 	movi	r6,1
  800ca8:	000b883a 	mov	r5,zero
  800cac:	01002034 	movhi	r4,128
  800cb0:	21134d04 	addi	r4,r4,19764
  800cb4:	0800e780 	call	800e78 <altera_avalon_jtag_uart_init>
  800cb8:	01002034 	movhi	r4,128
  800cbc:	21134304 	addi	r4,r4,19724
  800cc0:	0800c100 	call	800c10 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  800cc4:	01002034 	movhi	r4,128
  800cc8:	21176504 	addi	r4,r4,23956
  800ccc:	08024c40 	call	8024c4 <altera_avalon_lcd_16207_init>
  800cd0:	01002034 	movhi	r4,128
  800cd4:	21175b04 	addi	r4,r4,23916
  800cd8:	0800c100 	call	800c10 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  800cdc:	000d883a 	mov	r6,zero
  800ce0:	000b883a 	mov	r5,zero
  800ce4:	01002034 	movhi	r4,128
  800ce8:	2117ad04 	addi	r4,r4,24244
  800cec:	080285c0 	call	80285c <altera_avalon_uart_init>
  800cf0:	01002034 	movhi	r4,128
  800cf4:	2117a304 	addi	r4,r4,24204
  800cf8:	0800c100 	call	800c10 <alt_dev_reg>
}
  800cfc:	0001883a 	nop
  800d00:	e037883a 	mov	sp,fp
  800d04:	dfc00117 	ldw	ra,4(sp)
  800d08:	df000017 	ldw	fp,0(sp)
  800d0c:	dec00204 	addi	sp,sp,8
  800d10:	f800283a 	ret

00800d14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800d14:	defffa04 	addi	sp,sp,-24
  800d18:	dfc00515 	stw	ra,20(sp)
  800d1c:	df000415 	stw	fp,16(sp)
  800d20:	df000404 	addi	fp,sp,16
  800d24:	e13ffd15 	stw	r4,-12(fp)
  800d28:	e17ffe15 	stw	r5,-8(fp)
  800d2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800d30:	e0bffd17 	ldw	r2,-12(fp)
  800d34:	10800017 	ldw	r2,0(r2)
  800d38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  800d3c:	e0bffc17 	ldw	r2,-16(fp)
  800d40:	10c00a04 	addi	r3,r2,40
  800d44:	e0bffd17 	ldw	r2,-12(fp)
  800d48:	10800217 	ldw	r2,8(r2)
  800d4c:	100f883a 	mov	r7,r2
  800d50:	e1bfff17 	ldw	r6,-4(fp)
  800d54:	e17ffe17 	ldw	r5,-8(fp)
  800d58:	1809883a 	mov	r4,r3
  800d5c:	080133c0 	call	80133c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  800d60:	e037883a 	mov	sp,fp
  800d64:	dfc00117 	ldw	ra,4(sp)
  800d68:	df000017 	ldw	fp,0(sp)
  800d6c:	dec00204 	addi	sp,sp,8
  800d70:	f800283a 	ret

00800d74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  800d74:	defffa04 	addi	sp,sp,-24
  800d78:	dfc00515 	stw	ra,20(sp)
  800d7c:	df000415 	stw	fp,16(sp)
  800d80:	df000404 	addi	fp,sp,16
  800d84:	e13ffd15 	stw	r4,-12(fp)
  800d88:	e17ffe15 	stw	r5,-8(fp)
  800d8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800d90:	e0bffd17 	ldw	r2,-12(fp)
  800d94:	10800017 	ldw	r2,0(r2)
  800d98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  800d9c:	e0bffc17 	ldw	r2,-16(fp)
  800da0:	10c00a04 	addi	r3,r2,40
  800da4:	e0bffd17 	ldw	r2,-12(fp)
  800da8:	10800217 	ldw	r2,8(r2)
  800dac:	100f883a 	mov	r7,r2
  800db0:	e1bfff17 	ldw	r6,-4(fp)
  800db4:	e17ffe17 	ldw	r5,-8(fp)
  800db8:	1809883a 	mov	r4,r3
  800dbc:	08015580 	call	801558 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  800dc0:	e037883a 	mov	sp,fp
  800dc4:	dfc00117 	ldw	ra,4(sp)
  800dc8:	df000017 	ldw	fp,0(sp)
  800dcc:	dec00204 	addi	sp,sp,8
  800dd0:	f800283a 	ret

00800dd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  800dd4:	defffc04 	addi	sp,sp,-16
  800dd8:	dfc00315 	stw	ra,12(sp)
  800ddc:	df000215 	stw	fp,8(sp)
  800de0:	df000204 	addi	fp,sp,8
  800de4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800de8:	e0bfff17 	ldw	r2,-4(fp)
  800dec:	10800017 	ldw	r2,0(r2)
  800df0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  800df4:	e0bffe17 	ldw	r2,-8(fp)
  800df8:	10c00a04 	addi	r3,r2,40
  800dfc:	e0bfff17 	ldw	r2,-4(fp)
  800e00:	10800217 	ldw	r2,8(r2)
  800e04:	100b883a 	mov	r5,r2
  800e08:	1809883a 	mov	r4,r3
  800e0c:	08011e40 	call	8011e4 <altera_avalon_jtag_uart_close>
}
  800e10:	e037883a 	mov	sp,fp
  800e14:	dfc00117 	ldw	ra,4(sp)
  800e18:	df000017 	ldw	fp,0(sp)
  800e1c:	dec00204 	addi	sp,sp,8
  800e20:	f800283a 	ret

00800e24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  800e24:	defffa04 	addi	sp,sp,-24
  800e28:	dfc00515 	stw	ra,20(sp)
  800e2c:	df000415 	stw	fp,16(sp)
  800e30:	df000404 	addi	fp,sp,16
  800e34:	e13ffd15 	stw	r4,-12(fp)
  800e38:	e17ffe15 	stw	r5,-8(fp)
  800e3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  800e40:	e0bffd17 	ldw	r2,-12(fp)
  800e44:	10800017 	ldw	r2,0(r2)
  800e48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  800e4c:	e0bffc17 	ldw	r2,-16(fp)
  800e50:	10800a04 	addi	r2,r2,40
  800e54:	e1bfff17 	ldw	r6,-4(fp)
  800e58:	e17ffe17 	ldw	r5,-8(fp)
  800e5c:	1009883a 	mov	r4,r2
  800e60:	080124c0 	call	80124c <altera_avalon_jtag_uart_ioctl>
}
  800e64:	e037883a 	mov	sp,fp
  800e68:	dfc00117 	ldw	ra,4(sp)
  800e6c:	df000017 	ldw	fp,0(sp)
  800e70:	dec00204 	addi	sp,sp,8
  800e74:	f800283a 	ret

00800e78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  800e78:	defffa04 	addi	sp,sp,-24
  800e7c:	dfc00515 	stw	ra,20(sp)
  800e80:	df000415 	stw	fp,16(sp)
  800e84:	df000404 	addi	fp,sp,16
  800e88:	e13ffd15 	stw	r4,-12(fp)
  800e8c:	e17ffe15 	stw	r5,-8(fp)
  800e90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800e94:	e0bffd17 	ldw	r2,-12(fp)
  800e98:	00c00044 	movi	r3,1
  800e9c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  800ea0:	e0bffd17 	ldw	r2,-12(fp)
  800ea4:	10800017 	ldw	r2,0(r2)
  800ea8:	10800104 	addi	r2,r2,4
  800eac:	1007883a 	mov	r3,r2
  800eb0:	e0bffd17 	ldw	r2,-12(fp)
  800eb4:	10800817 	ldw	r2,32(r2)
  800eb8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  800ebc:	e0bffe17 	ldw	r2,-8(fp)
  800ec0:	e0ffff17 	ldw	r3,-4(fp)
  800ec4:	d8000015 	stw	zero,0(sp)
  800ec8:	e1fffd17 	ldw	r7,-12(fp)
  800ecc:	01802034 	movhi	r6,128
  800ed0:	3183ce04 	addi	r6,r6,3896
  800ed4:	180b883a 	mov	r5,r3
  800ed8:	1009883a 	mov	r4,r2
  800edc:	08034a40 	call	8034a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  800ee0:	e0bffd17 	ldw	r2,-12(fp)
  800ee4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  800ee8:	e0bffd17 	ldw	r2,-12(fp)
  800eec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800ef0:	d0e62217 	ldw	r3,-26488(gp)
  800ef4:	e1fffd17 	ldw	r7,-12(fp)
  800ef8:	01802034 	movhi	r6,128
  800efc:	31845104 	addi	r6,r6,4420
  800f00:	180b883a 	mov	r5,r3
  800f04:	1009883a 	mov	r4,r2
  800f08:	08030240 	call	803024 <alt_alarm_start>
  800f0c:	1000040e 	bge	r2,zero,800f20 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  800f10:	e0fffd17 	ldw	r3,-12(fp)
  800f14:	00a00034 	movhi	r2,32768
  800f18:	10bfffc4 	addi	r2,r2,-1
  800f1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  800f20:	0001883a 	nop
  800f24:	e037883a 	mov	sp,fp
  800f28:	dfc00117 	ldw	ra,4(sp)
  800f2c:	df000017 	ldw	fp,0(sp)
  800f30:	dec00204 	addi	sp,sp,8
  800f34:	f800283a 	ret

00800f38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  800f38:	defff804 	addi	sp,sp,-32
  800f3c:	df000715 	stw	fp,28(sp)
  800f40:	df000704 	addi	fp,sp,28
  800f44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  800f48:	e0bfff17 	ldw	r2,-4(fp)
  800f4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  800f50:	e0bffb17 	ldw	r2,-20(fp)
  800f54:	10800017 	ldw	r2,0(r2)
  800f58:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800f5c:	e0bffc17 	ldw	r2,-16(fp)
  800f60:	10800104 	addi	r2,r2,4
  800f64:	10800037 	ldwio	r2,0(r2)
  800f68:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  800f6c:	e0bffd17 	ldw	r2,-12(fp)
  800f70:	1080c00c 	andi	r2,r2,768
  800f74:	10006d26 	beq	r2,zero,80112c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  800f78:	e0bffd17 	ldw	r2,-12(fp)
  800f7c:	1080400c 	andi	r2,r2,256
  800f80:	10003526 	beq	r2,zero,801058 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  800f84:	00800074 	movhi	r2,1
  800f88:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800f8c:	e0bffb17 	ldw	r2,-20(fp)
  800f90:	10800a17 	ldw	r2,40(r2)
  800f94:	10800044 	addi	r2,r2,1
  800f98:	1081ffcc 	andi	r2,r2,2047
  800f9c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  800fa0:	e0bffb17 	ldw	r2,-20(fp)
  800fa4:	10c00b17 	ldw	r3,44(r2)
  800fa8:	e0bffe17 	ldw	r2,-8(fp)
  800fac:	18801526 	beq	r3,r2,801004 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  800fb0:	e0bffc17 	ldw	r2,-16(fp)
  800fb4:	10800037 	ldwio	r2,0(r2)
  800fb8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  800fbc:	e0bff917 	ldw	r2,-28(fp)
  800fc0:	10a0000c 	andi	r2,r2,32768
  800fc4:	10001126 	beq	r2,zero,80100c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800fc8:	e0bffb17 	ldw	r2,-20(fp)
  800fcc:	10800a17 	ldw	r2,40(r2)
  800fd0:	e0fff917 	ldw	r3,-28(fp)
  800fd4:	1809883a 	mov	r4,r3
  800fd8:	e0fffb17 	ldw	r3,-20(fp)
  800fdc:	1885883a 	add	r2,r3,r2
  800fe0:	10800e04 	addi	r2,r2,56
  800fe4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800fe8:	e0bffb17 	ldw	r2,-20(fp)
  800fec:	10800a17 	ldw	r2,40(r2)
  800ff0:	10800044 	addi	r2,r2,1
  800ff4:	10c1ffcc 	andi	r3,r2,2047
  800ff8:	e0bffb17 	ldw	r2,-20(fp)
  800ffc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  801000:	003fe206 	br	800f8c <__alt_mem_onchip_mem+0xff7f8f8c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  801004:	0001883a 	nop
  801008:	00000106 	br	801010 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80100c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  801010:	e0bff917 	ldw	r2,-28(fp)
  801014:	10bfffec 	andhi	r2,r2,65535
  801018:	10000f26 	beq	r2,zero,801058 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80101c:	e0bffb17 	ldw	r2,-20(fp)
  801020:	10c00817 	ldw	r3,32(r2)
  801024:	00bfff84 	movi	r2,-2
  801028:	1886703a 	and	r3,r3,r2
  80102c:	e0bffb17 	ldw	r2,-20(fp)
  801030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  801034:	e0bffc17 	ldw	r2,-16(fp)
  801038:	10800104 	addi	r2,r2,4
  80103c:	1007883a 	mov	r3,r2
  801040:	e0bffb17 	ldw	r2,-20(fp)
  801044:	10800817 	ldw	r2,32(r2)
  801048:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80104c:	e0bffc17 	ldw	r2,-16(fp)
  801050:	10800104 	addi	r2,r2,4
  801054:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  801058:	e0bffd17 	ldw	r2,-12(fp)
  80105c:	1080800c 	andi	r2,r2,512
  801060:	103fbe26 	beq	r2,zero,800f5c <__alt_mem_onchip_mem+0xff7f8f5c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  801064:	e0bffd17 	ldw	r2,-12(fp)
  801068:	1004d43a 	srli	r2,r2,16
  80106c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  801070:	00001406 	br	8010c4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  801074:	e0bffc17 	ldw	r2,-16(fp)
  801078:	e0fffb17 	ldw	r3,-20(fp)
  80107c:	18c00d17 	ldw	r3,52(r3)
  801080:	e13ffb17 	ldw	r4,-20(fp)
  801084:	20c7883a 	add	r3,r4,r3
  801088:	18c20e04 	addi	r3,r3,2104
  80108c:	18c00003 	ldbu	r3,0(r3)
  801090:	18c03fcc 	andi	r3,r3,255
  801094:	18c0201c 	xori	r3,r3,128
  801098:	18ffe004 	addi	r3,r3,-128
  80109c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8010a0:	e0bffb17 	ldw	r2,-20(fp)
  8010a4:	10800d17 	ldw	r2,52(r2)
  8010a8:	10800044 	addi	r2,r2,1
  8010ac:	10c1ffcc 	andi	r3,r2,2047
  8010b0:	e0bffb17 	ldw	r2,-20(fp)
  8010b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8010b8:	e0bffa17 	ldw	r2,-24(fp)
  8010bc:	10bfffc4 	addi	r2,r2,-1
  8010c0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8010c4:	e0bffa17 	ldw	r2,-24(fp)
  8010c8:	10000526 	beq	r2,zero,8010e0 <altera_avalon_jtag_uart_irq+0x1a8>
  8010cc:	e0bffb17 	ldw	r2,-20(fp)
  8010d0:	10c00d17 	ldw	r3,52(r2)
  8010d4:	e0bffb17 	ldw	r2,-20(fp)
  8010d8:	10800c17 	ldw	r2,48(r2)
  8010dc:	18bfe51e 	bne	r3,r2,801074 <__alt_mem_onchip_mem+0xff7f9074>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8010e0:	e0bffa17 	ldw	r2,-24(fp)
  8010e4:	103f9d26 	beq	r2,zero,800f5c <__alt_mem_onchip_mem+0xff7f8f5c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8010e8:	e0bffb17 	ldw	r2,-20(fp)
  8010ec:	10c00817 	ldw	r3,32(r2)
  8010f0:	00bfff44 	movi	r2,-3
  8010f4:	1886703a 	and	r3,r3,r2
  8010f8:	e0bffb17 	ldw	r2,-20(fp)
  8010fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  801100:	e0bffb17 	ldw	r2,-20(fp)
  801104:	10800017 	ldw	r2,0(r2)
  801108:	10800104 	addi	r2,r2,4
  80110c:	1007883a 	mov	r3,r2
  801110:	e0bffb17 	ldw	r2,-20(fp)
  801114:	10800817 	ldw	r2,32(r2)
  801118:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80111c:	e0bffc17 	ldw	r2,-16(fp)
  801120:	10800104 	addi	r2,r2,4
  801124:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  801128:	003f8c06 	br	800f5c <__alt_mem_onchip_mem+0xff7f8f5c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80112c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  801130:	0001883a 	nop
  801134:	e037883a 	mov	sp,fp
  801138:	df000017 	ldw	fp,0(sp)
  80113c:	dec00104 	addi	sp,sp,4
  801140:	f800283a 	ret

00801144 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  801144:	defff804 	addi	sp,sp,-32
  801148:	df000715 	stw	fp,28(sp)
  80114c:	df000704 	addi	fp,sp,28
  801150:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  801154:	e0bffb17 	ldw	r2,-20(fp)
  801158:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80115c:	e0bff917 	ldw	r2,-28(fp)
  801160:	10800017 	ldw	r2,0(r2)
  801164:	10800104 	addi	r2,r2,4
  801168:	10800037 	ldwio	r2,0(r2)
  80116c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  801170:	e0bffa17 	ldw	r2,-24(fp)
  801174:	1081000c 	andi	r2,r2,1024
  801178:	10000b26 	beq	r2,zero,8011a8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80117c:	e0bff917 	ldw	r2,-28(fp)
  801180:	10800017 	ldw	r2,0(r2)
  801184:	10800104 	addi	r2,r2,4
  801188:	1007883a 	mov	r3,r2
  80118c:	e0bff917 	ldw	r2,-28(fp)
  801190:	10800817 	ldw	r2,32(r2)
  801194:	10810014 	ori	r2,r2,1024
  801198:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80119c:	e0bff917 	ldw	r2,-28(fp)
  8011a0:	10000915 	stw	zero,36(r2)
  8011a4:	00000a06 	br	8011d0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8011a8:	e0bff917 	ldw	r2,-28(fp)
  8011ac:	10c00917 	ldw	r3,36(r2)
  8011b0:	00a00034 	movhi	r2,32768
  8011b4:	10bfff04 	addi	r2,r2,-4
  8011b8:	10c00536 	bltu	r2,r3,8011d0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8011bc:	e0bff917 	ldw	r2,-28(fp)
  8011c0:	10800917 	ldw	r2,36(r2)
  8011c4:	10c00044 	addi	r3,r2,1
  8011c8:	e0bff917 	ldw	r2,-28(fp)
  8011cc:	10c00915 	stw	r3,36(r2)
  8011d0:	d0a62217 	ldw	r2,-26488(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8011d4:	e037883a 	mov	sp,fp
  8011d8:	df000017 	ldw	fp,0(sp)
  8011dc:	dec00104 	addi	sp,sp,4
  8011e0:	f800283a 	ret

008011e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8011e4:	defffd04 	addi	sp,sp,-12
  8011e8:	df000215 	stw	fp,8(sp)
  8011ec:	df000204 	addi	fp,sp,8
  8011f0:	e13ffe15 	stw	r4,-8(fp)
  8011f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8011f8:	00000506 	br	801210 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8011fc:	e0bfff17 	ldw	r2,-4(fp)
  801200:	1090000c 	andi	r2,r2,16384
  801204:	10000226 	beq	r2,zero,801210 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  801208:	00bffd44 	movi	r2,-11
  80120c:	00000b06 	br	80123c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  801210:	e0bffe17 	ldw	r2,-8(fp)
  801214:	10c00d17 	ldw	r3,52(r2)
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	10800c17 	ldw	r2,48(r2)
  801220:	18800526 	beq	r3,r2,801238 <altera_avalon_jtag_uart_close+0x54>
  801224:	e0bffe17 	ldw	r2,-8(fp)
  801228:	10c00917 	ldw	r3,36(r2)
  80122c:	e0bffe17 	ldw	r2,-8(fp)
  801230:	10800117 	ldw	r2,4(r2)
  801234:	18bff136 	bltu	r3,r2,8011fc <__alt_mem_onchip_mem+0xff7f91fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  801238:	0005883a 	mov	r2,zero
}
  80123c:	e037883a 	mov	sp,fp
  801240:	df000017 	ldw	fp,0(sp)
  801244:	dec00104 	addi	sp,sp,4
  801248:	f800283a 	ret

0080124c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80124c:	defffa04 	addi	sp,sp,-24
  801250:	df000515 	stw	fp,20(sp)
  801254:	df000504 	addi	fp,sp,20
  801258:	e13ffd15 	stw	r4,-12(fp)
  80125c:	e17ffe15 	stw	r5,-8(fp)
  801260:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  801264:	00bff9c4 	movi	r2,-25
  801268:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80126c:	e0bffe17 	ldw	r2,-8(fp)
  801270:	10da8060 	cmpeqi	r3,r2,27137
  801274:	1800031e 	bne	r3,zero,801284 <altera_avalon_jtag_uart_ioctl+0x38>
  801278:	109a80a0 	cmpeqi	r2,r2,27138
  80127c:	1000181e 	bne	r2,zero,8012e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  801280:	00002906 	br	801328 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  801284:	e0bffd17 	ldw	r2,-12(fp)
  801288:	10c00117 	ldw	r3,4(r2)
  80128c:	00a00034 	movhi	r2,32768
  801290:	10bfffc4 	addi	r2,r2,-1
  801294:	18802126 	beq	r3,r2,80131c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  801298:	e0bfff17 	ldw	r2,-4(fp)
  80129c:	10800017 	ldw	r2,0(r2)
  8012a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8012a4:	e0bffc17 	ldw	r2,-16(fp)
  8012a8:	10800090 	cmplti	r2,r2,2
  8012ac:	1000061e 	bne	r2,zero,8012c8 <altera_avalon_jtag_uart_ioctl+0x7c>
  8012b0:	e0fffc17 	ldw	r3,-16(fp)
  8012b4:	00a00034 	movhi	r2,32768
  8012b8:	10bfffc4 	addi	r2,r2,-1
  8012bc:	18800226 	beq	r3,r2,8012c8 <altera_avalon_jtag_uart_ioctl+0x7c>
  8012c0:	e0bffc17 	ldw	r2,-16(fp)
  8012c4:	00000206 	br	8012d0 <altera_avalon_jtag_uart_ioctl+0x84>
  8012c8:	00a00034 	movhi	r2,32768
  8012cc:	10bfff84 	addi	r2,r2,-2
  8012d0:	e0fffd17 	ldw	r3,-12(fp)
  8012d4:	18800115 	stw	r2,4(r3)
      rc = 0;
  8012d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8012dc:	00000f06 	br	80131c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8012e0:	e0bffd17 	ldw	r2,-12(fp)
  8012e4:	10c00117 	ldw	r3,4(r2)
  8012e8:	00a00034 	movhi	r2,32768
  8012ec:	10bfffc4 	addi	r2,r2,-1
  8012f0:	18800c26 	beq	r3,r2,801324 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8012f4:	e0bffd17 	ldw	r2,-12(fp)
  8012f8:	10c00917 	ldw	r3,36(r2)
  8012fc:	e0bffd17 	ldw	r2,-12(fp)
  801300:	10800117 	ldw	r2,4(r2)
  801304:	1885803a 	cmpltu	r2,r3,r2
  801308:	10c03fcc 	andi	r3,r2,255
  80130c:	e0bfff17 	ldw	r2,-4(fp)
  801310:	10c00015 	stw	r3,0(r2)
      rc = 0;
  801314:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  801318:	00000206 	br	801324 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80131c:	0001883a 	nop
  801320:	00000106 	br	801328 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  801324:	0001883a 	nop

  default:
    break;
  }

  return rc;
  801328:	e0bffb17 	ldw	r2,-20(fp)
}
  80132c:	e037883a 	mov	sp,fp
  801330:	df000017 	ldw	fp,0(sp)
  801334:	dec00104 	addi	sp,sp,4
  801338:	f800283a 	ret

0080133c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80133c:	defff304 	addi	sp,sp,-52
  801340:	dfc00c15 	stw	ra,48(sp)
  801344:	df000b15 	stw	fp,44(sp)
  801348:	df000b04 	addi	fp,sp,44
  80134c:	e13ffc15 	stw	r4,-16(fp)
  801350:	e17ffd15 	stw	r5,-12(fp)
  801354:	e1bffe15 	stw	r6,-8(fp)
  801358:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80135c:	e0bffd17 	ldw	r2,-12(fp)
  801360:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  801364:	00004706 	br	801484 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  801368:	e0bffc17 	ldw	r2,-16(fp)
  80136c:	10800a17 	ldw	r2,40(r2)
  801370:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  801374:	e0bffc17 	ldw	r2,-16(fp)
  801378:	10800b17 	ldw	r2,44(r2)
  80137c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  801380:	e0fff717 	ldw	r3,-36(fp)
  801384:	e0bff817 	ldw	r2,-32(fp)
  801388:	18800536 	bltu	r3,r2,8013a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80138c:	e0fff717 	ldw	r3,-36(fp)
  801390:	e0bff817 	ldw	r2,-32(fp)
  801394:	1885c83a 	sub	r2,r3,r2
  801398:	e0bff615 	stw	r2,-40(fp)
  80139c:	00000406 	br	8013b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8013a0:	00c20004 	movi	r3,2048
  8013a4:	e0bff817 	ldw	r2,-32(fp)
  8013a8:	1885c83a 	sub	r2,r3,r2
  8013ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8013b0:	e0bff617 	ldw	r2,-40(fp)
  8013b4:	10001e26 	beq	r2,zero,801430 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8013b8:	e0fffe17 	ldw	r3,-8(fp)
  8013bc:	e0bff617 	ldw	r2,-40(fp)
  8013c0:	1880022e 	bgeu	r3,r2,8013cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8013c4:	e0bffe17 	ldw	r2,-8(fp)
  8013c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8013cc:	e0bffc17 	ldw	r2,-16(fp)
  8013d0:	10c00e04 	addi	r3,r2,56
  8013d4:	e0bff817 	ldw	r2,-32(fp)
  8013d8:	1885883a 	add	r2,r3,r2
  8013dc:	e1bff617 	ldw	r6,-40(fp)
  8013e0:	100b883a 	mov	r5,r2
  8013e4:	e13ff517 	ldw	r4,-44(fp)
  8013e8:	08042bc0 	call	8042bc <memcpy>
      ptr   += n;
  8013ec:	e0fff517 	ldw	r3,-44(fp)
  8013f0:	e0bff617 	ldw	r2,-40(fp)
  8013f4:	1885883a 	add	r2,r3,r2
  8013f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8013fc:	e0fffe17 	ldw	r3,-8(fp)
  801400:	e0bff617 	ldw	r2,-40(fp)
  801404:	1885c83a 	sub	r2,r3,r2
  801408:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80140c:	e0fff817 	ldw	r3,-32(fp)
  801410:	e0bff617 	ldw	r2,-40(fp)
  801414:	1885883a 	add	r2,r3,r2
  801418:	10c1ffcc 	andi	r3,r2,2047
  80141c:	e0bffc17 	ldw	r2,-16(fp)
  801420:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  801424:	e0bffe17 	ldw	r2,-8(fp)
  801428:	00bfcf16 	blt	zero,r2,801368 <__alt_mem_onchip_mem+0xff7f9368>
  80142c:	00000106 	br	801434 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  801430:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  801434:	e0fff517 	ldw	r3,-44(fp)
  801438:	e0bffd17 	ldw	r2,-12(fp)
  80143c:	1880141e 	bne	r3,r2,801490 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  801440:	e0bfff17 	ldw	r2,-4(fp)
  801444:	1090000c 	andi	r2,r2,16384
  801448:	1000131e 	bne	r2,zero,801498 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80144c:	0001883a 	nop
  801450:	e0bffc17 	ldw	r2,-16(fp)
  801454:	10c00a17 	ldw	r3,40(r2)
  801458:	e0bff717 	ldw	r2,-36(fp)
  80145c:	1880051e 	bne	r3,r2,801474 <altera_avalon_jtag_uart_read+0x138>
  801460:	e0bffc17 	ldw	r2,-16(fp)
  801464:	10c00917 	ldw	r3,36(r2)
  801468:	e0bffc17 	ldw	r2,-16(fp)
  80146c:	10800117 	ldw	r2,4(r2)
  801470:	18bff736 	bltu	r3,r2,801450 <__alt_mem_onchip_mem+0xff7f9450>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  801474:	e0bffc17 	ldw	r2,-16(fp)
  801478:	10c00a17 	ldw	r3,40(r2)
  80147c:	e0bff717 	ldw	r2,-36(fp)
  801480:	18800726 	beq	r3,r2,8014a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  801484:	e0bffe17 	ldw	r2,-8(fp)
  801488:	00bfb716 	blt	zero,r2,801368 <__alt_mem_onchip_mem+0xff7f9368>
  80148c:	00000506 	br	8014a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  801490:	0001883a 	nop
  801494:	00000306 	br	8014a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  801498:	0001883a 	nop
  80149c:	00000106 	br	8014a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8014a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8014a4:	e0fff517 	ldw	r3,-44(fp)
  8014a8:	e0bffd17 	ldw	r2,-12(fp)
  8014ac:	18801826 	beq	r3,r2,801510 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8014b0:	0005303a 	rdctl	r2,status
  8014b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8014b8:	e0fffb17 	ldw	r3,-20(fp)
  8014bc:	00bfff84 	movi	r2,-2
  8014c0:	1884703a 	and	r2,r3,r2
  8014c4:	1001703a 	wrctl	status,r2
  
  return context;
  8014c8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8014cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8014d0:	e0bffc17 	ldw	r2,-16(fp)
  8014d4:	10800817 	ldw	r2,32(r2)
  8014d8:	10c00054 	ori	r3,r2,1
  8014dc:	e0bffc17 	ldw	r2,-16(fp)
  8014e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8014e4:	e0bffc17 	ldw	r2,-16(fp)
  8014e8:	10800017 	ldw	r2,0(r2)
  8014ec:	10800104 	addi	r2,r2,4
  8014f0:	1007883a 	mov	r3,r2
  8014f4:	e0bffc17 	ldw	r2,-16(fp)
  8014f8:	10800817 	ldw	r2,32(r2)
  8014fc:	18800035 	stwio	r2,0(r3)
  801500:	e0bffa17 	ldw	r2,-24(fp)
  801504:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801508:	e0bff917 	ldw	r2,-28(fp)
  80150c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  801510:	e0fff517 	ldw	r3,-44(fp)
  801514:	e0bffd17 	ldw	r2,-12(fp)
  801518:	18800426 	beq	r3,r2,80152c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80151c:	e0fff517 	ldw	r3,-44(fp)
  801520:	e0bffd17 	ldw	r2,-12(fp)
  801524:	1885c83a 	sub	r2,r3,r2
  801528:	00000606 	br	801544 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80152c:	e0bfff17 	ldw	r2,-4(fp)
  801530:	1090000c 	andi	r2,r2,16384
  801534:	10000226 	beq	r2,zero,801540 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  801538:	00bffd44 	movi	r2,-11
  80153c:	00000106 	br	801544 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  801540:	00bffec4 	movi	r2,-5
}
  801544:	e037883a 	mov	sp,fp
  801548:	dfc00117 	ldw	ra,4(sp)
  80154c:	df000017 	ldw	fp,0(sp)
  801550:	dec00204 	addi	sp,sp,8
  801554:	f800283a 	ret

00801558 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  801558:	defff304 	addi	sp,sp,-52
  80155c:	dfc00c15 	stw	ra,48(sp)
  801560:	df000b15 	stw	fp,44(sp)
  801564:	df000b04 	addi	fp,sp,44
  801568:	e13ffc15 	stw	r4,-16(fp)
  80156c:	e17ffd15 	stw	r5,-12(fp)
  801570:	e1bffe15 	stw	r6,-8(fp)
  801574:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  801578:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80157c:	e0bffd17 	ldw	r2,-12(fp)
  801580:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801584:	00003706 	br	801664 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  801588:	e0bffc17 	ldw	r2,-16(fp)
  80158c:	10800c17 	ldw	r2,48(r2)
  801590:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  801594:	e0bffc17 	ldw	r2,-16(fp)
  801598:	10800d17 	ldw	r2,52(r2)
  80159c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8015a0:	e0fff917 	ldw	r3,-28(fp)
  8015a4:	e0bff517 	ldw	r2,-44(fp)
  8015a8:	1880062e 	bgeu	r3,r2,8015c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8015ac:	e0fff517 	ldw	r3,-44(fp)
  8015b0:	e0bff917 	ldw	r2,-28(fp)
  8015b4:	1885c83a 	sub	r2,r3,r2
  8015b8:	10bfffc4 	addi	r2,r2,-1
  8015bc:	e0bff615 	stw	r2,-40(fp)
  8015c0:	00000b06 	br	8015f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8015c4:	e0bff517 	ldw	r2,-44(fp)
  8015c8:	10000526 	beq	r2,zero,8015e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8015cc:	00c20004 	movi	r3,2048
  8015d0:	e0bff917 	ldw	r2,-28(fp)
  8015d4:	1885c83a 	sub	r2,r3,r2
  8015d8:	e0bff615 	stw	r2,-40(fp)
  8015dc:	00000406 	br	8015f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8015e0:	00c1ffc4 	movi	r3,2047
  8015e4:	e0bff917 	ldw	r2,-28(fp)
  8015e8:	1885c83a 	sub	r2,r3,r2
  8015ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8015f0:	e0bff617 	ldw	r2,-40(fp)
  8015f4:	10001e26 	beq	r2,zero,801670 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8015f8:	e0fffe17 	ldw	r3,-8(fp)
  8015fc:	e0bff617 	ldw	r2,-40(fp)
  801600:	1880022e 	bgeu	r3,r2,80160c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  801604:	e0bffe17 	ldw	r2,-8(fp)
  801608:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80160c:	e0bffc17 	ldw	r2,-16(fp)
  801610:	10c20e04 	addi	r3,r2,2104
  801614:	e0bff917 	ldw	r2,-28(fp)
  801618:	1885883a 	add	r2,r3,r2
  80161c:	e1bff617 	ldw	r6,-40(fp)
  801620:	e17ffd17 	ldw	r5,-12(fp)
  801624:	1009883a 	mov	r4,r2
  801628:	08042bc0 	call	8042bc <memcpy>
      ptr   += n;
  80162c:	e0fffd17 	ldw	r3,-12(fp)
  801630:	e0bff617 	ldw	r2,-40(fp)
  801634:	1885883a 	add	r2,r3,r2
  801638:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80163c:	e0fffe17 	ldw	r3,-8(fp)
  801640:	e0bff617 	ldw	r2,-40(fp)
  801644:	1885c83a 	sub	r2,r3,r2
  801648:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80164c:	e0fff917 	ldw	r3,-28(fp)
  801650:	e0bff617 	ldw	r2,-40(fp)
  801654:	1885883a 	add	r2,r3,r2
  801658:	10c1ffcc 	andi	r3,r2,2047
  80165c:	e0bffc17 	ldw	r2,-16(fp)
  801660:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801664:	e0bffe17 	ldw	r2,-8(fp)
  801668:	00bfc716 	blt	zero,r2,801588 <__alt_mem_onchip_mem+0xff7f9588>
  80166c:	00000106 	br	801674 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  801670:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801674:	0005303a 	rdctl	r2,status
  801678:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80167c:	e0fffb17 	ldw	r3,-20(fp)
  801680:	00bfff84 	movi	r2,-2
  801684:	1884703a 	and	r2,r3,r2
  801688:	1001703a 	wrctl	status,r2
  
  return context;
  80168c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  801690:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  801694:	e0bffc17 	ldw	r2,-16(fp)
  801698:	10800817 	ldw	r2,32(r2)
  80169c:	10c00094 	ori	r3,r2,2
  8016a0:	e0bffc17 	ldw	r2,-16(fp)
  8016a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8016a8:	e0bffc17 	ldw	r2,-16(fp)
  8016ac:	10800017 	ldw	r2,0(r2)
  8016b0:	10800104 	addi	r2,r2,4
  8016b4:	1007883a 	mov	r3,r2
  8016b8:	e0bffc17 	ldw	r2,-16(fp)
  8016bc:	10800817 	ldw	r2,32(r2)
  8016c0:	18800035 	stwio	r2,0(r3)
  8016c4:	e0bffa17 	ldw	r2,-24(fp)
  8016c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8016cc:	e0bff817 	ldw	r2,-32(fp)
  8016d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8016d4:	e0bffe17 	ldw	r2,-8(fp)
  8016d8:	0080100e 	bge	zero,r2,80171c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8016dc:	e0bfff17 	ldw	r2,-4(fp)
  8016e0:	1090000c 	andi	r2,r2,16384
  8016e4:	1000101e 	bne	r2,zero,801728 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8016e8:	0001883a 	nop
  8016ec:	e0bffc17 	ldw	r2,-16(fp)
  8016f0:	10c00d17 	ldw	r3,52(r2)
  8016f4:	e0bff517 	ldw	r2,-44(fp)
  8016f8:	1880051e 	bne	r3,r2,801710 <altera_avalon_jtag_uart_write+0x1b8>
  8016fc:	e0bffc17 	ldw	r2,-16(fp)
  801700:	10c00917 	ldw	r3,36(r2)
  801704:	e0bffc17 	ldw	r2,-16(fp)
  801708:	10800117 	ldw	r2,4(r2)
  80170c:	18bff736 	bltu	r3,r2,8016ec <__alt_mem_onchip_mem+0xff7f96ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  801710:	e0bffc17 	ldw	r2,-16(fp)
  801714:	10800917 	ldw	r2,36(r2)
  801718:	1000051e 	bne	r2,zero,801730 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80171c:	e0bffe17 	ldw	r2,-8(fp)
  801720:	00bfd016 	blt	zero,r2,801664 <__alt_mem_onchip_mem+0xff7f9664>
  801724:	00000306 	br	801734 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  801728:	0001883a 	nop
  80172c:	00000106 	br	801734 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  801730:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  801734:	e0fffd17 	ldw	r3,-12(fp)
  801738:	e0bff717 	ldw	r2,-36(fp)
  80173c:	18800426 	beq	r3,r2,801750 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  801740:	e0fffd17 	ldw	r3,-12(fp)
  801744:	e0bff717 	ldw	r2,-36(fp)
  801748:	1885c83a 	sub	r2,r3,r2
  80174c:	00000606 	br	801768 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  801750:	e0bfff17 	ldw	r2,-4(fp)
  801754:	1090000c 	andi	r2,r2,16384
  801758:	10000226 	beq	r2,zero,801764 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80175c:	00bffd44 	movi	r2,-11
  801760:	00000106 	br	801768 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  801764:	00bffec4 	movi	r2,-5
}
  801768:	e037883a 	mov	sp,fp
  80176c:	dfc00117 	ldw	ra,4(sp)
  801770:	df000017 	ldw	fp,0(sp)
  801774:	dec00204 	addi	sp,sp,8
  801778:	f800283a 	ret

0080177c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80177c:	defffa04 	addi	sp,sp,-24
  801780:	dfc00515 	stw	ra,20(sp)
  801784:	df000415 	stw	fp,16(sp)
  801788:	df000404 	addi	fp,sp,16
  80178c:	e13ffe15 	stw	r4,-8(fp)
  801790:	2805883a 	mov	r2,r5
  801794:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  801798:	e0bffe17 	ldw	r2,-8(fp)
  80179c:	10800017 	ldw	r2,0(r2)
  8017a0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8017a4:	008003f4 	movhi	r2,15
  8017a8:	10909004 	addi	r2,r2,16960
  8017ac:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8017b0:	e0bffe17 	ldw	r2,-8(fp)
  8017b4:	10800803 	ldbu	r2,32(r2)
  8017b8:	10803fcc 	andi	r2,r2,255
  8017bc:	1080201c 	xori	r2,r2,128
  8017c0:	10bfe004 	addi	r2,r2,-128
  8017c4:	1000151e 	bne	r2,zero,80181c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8017c8:	00000906 	br	8017f0 <lcd_write_command+0x74>
    if (--i == 0)
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	10bfffc4 	addi	r2,r2,-1
  8017d4:	e0bffc15 	stw	r2,-16(fp)
  8017d8:	e0bffc17 	ldw	r2,-16(fp)
  8017dc:	1000041e 	bne	r2,zero,8017f0 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8017e0:	e0bffe17 	ldw	r2,-8(fp)
  8017e4:	00c00044 	movi	r3,1
  8017e8:	10c00805 	stb	r3,32(r2)
      return;
  8017ec:	00000c06 	br	801820 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8017f0:	e0bffd17 	ldw	r2,-12(fp)
  8017f4:	10800104 	addi	r2,r2,4
  8017f8:	10800037 	ldwio	r2,0(r2)
  8017fc:	1080200c 	andi	r2,r2,128
  801800:	103ff21e 	bne	r2,zero,8017cc <__alt_mem_onchip_mem+0xff7f97cc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801804:	01001904 	movi	r4,100
  801808:	0803ce00 	call	803ce0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80180c:	e0bffd17 	ldw	r2,-12(fp)
  801810:	e0ffff03 	ldbu	r3,-4(fp)
  801814:	10c00035 	stwio	r3,0(r2)
  801818:	00000106 	br	801820 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80181c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  801820:	e037883a 	mov	sp,fp
  801824:	dfc00117 	ldw	ra,4(sp)
  801828:	df000017 	ldw	fp,0(sp)
  80182c:	dec00204 	addi	sp,sp,8
  801830:	f800283a 	ret

00801834 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  801834:	defffa04 	addi	sp,sp,-24
  801838:	dfc00515 	stw	ra,20(sp)
  80183c:	df000415 	stw	fp,16(sp)
  801840:	df000404 	addi	fp,sp,16
  801844:	e13ffe15 	stw	r4,-8(fp)
  801848:	2805883a 	mov	r2,r5
  80184c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  801850:	e0bffe17 	ldw	r2,-8(fp)
  801854:	10800017 	ldw	r2,0(r2)
  801858:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80185c:	008003f4 	movhi	r2,15
  801860:	10909004 	addi	r2,r2,16960
  801864:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  801868:	e0bffe17 	ldw	r2,-8(fp)
  80186c:	10800803 	ldbu	r2,32(r2)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	1080201c 	xori	r2,r2,128
  801878:	10bfe004 	addi	r2,r2,-128
  80187c:	10001d1e 	bne	r2,zero,8018f4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801880:	00000906 	br	8018a8 <lcd_write_data+0x74>
    if (--i == 0)
  801884:	e0bffc17 	ldw	r2,-16(fp)
  801888:	10bfffc4 	addi	r2,r2,-1
  80188c:	e0bffc15 	stw	r2,-16(fp)
  801890:	e0bffc17 	ldw	r2,-16(fp)
  801894:	1000041e 	bne	r2,zero,8018a8 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  801898:	e0bffe17 	ldw	r2,-8(fp)
  80189c:	00c00044 	movi	r3,1
  8018a0:	10c00805 	stb	r3,32(r2)
      return;
  8018a4:	00001406 	br	8018f8 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8018a8:	e0bffd17 	ldw	r2,-12(fp)
  8018ac:	10800104 	addi	r2,r2,4
  8018b0:	10800037 	ldwio	r2,0(r2)
  8018b4:	1080200c 	andi	r2,r2,128
  8018b8:	103ff21e 	bne	r2,zero,801884 <__alt_mem_onchip_mem+0xff7f9884>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8018bc:	01001904 	movi	r4,100
  8018c0:	0803ce00 	call	803ce0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8018c4:	e0bffd17 	ldw	r2,-12(fp)
  8018c8:	10800204 	addi	r2,r2,8
  8018cc:	1007883a 	mov	r3,r2
  8018d0:	e0bfff03 	ldbu	r2,-4(fp)
  8018d4:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8018d8:	e0bffe17 	ldw	r2,-8(fp)
  8018dc:	108008c3 	ldbu	r2,35(r2)
  8018e0:	10800044 	addi	r2,r2,1
  8018e4:	1007883a 	mov	r3,r2
  8018e8:	e0bffe17 	ldw	r2,-8(fp)
  8018ec:	10c008c5 	stb	r3,35(r2)
  8018f0:	00000106 	br	8018f8 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8018f4:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8018f8:	e037883a 	mov	sp,fp
  8018fc:	dfc00117 	ldw	ra,4(sp)
  801900:	df000017 	ldw	fp,0(sp)
  801904:	dec00204 	addi	sp,sp,8
  801908:	f800283a 	ret

0080190c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80190c:	defffc04 	addi	sp,sp,-16
  801910:	dfc00315 	stw	ra,12(sp)
  801914:	df000215 	stw	fp,8(sp)
  801918:	df000204 	addi	fp,sp,8
  80191c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  801920:	01400044 	movi	r5,1
  801924:	e13fff17 	ldw	r4,-4(fp)
  801928:	080177c0 	call	80177c <lcd_write_command>

  sp->x = 0;
  80192c:	e0bfff17 	ldw	r2,-4(fp)
  801930:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  801934:	e0bfff17 	ldw	r2,-4(fp)
  801938:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80193c:	e0bfff17 	ldw	r2,-4(fp)
  801940:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801944:	e03ffe15 	stw	zero,-8(fp)
  801948:	00001b06 	br	8019b8 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80194c:	e0bffe17 	ldw	r2,-8(fp)
  801950:	108018e4 	muli	r2,r2,99
  801954:	10801004 	addi	r2,r2,64
  801958:	e0ffff17 	ldw	r3,-4(fp)
  80195c:	1885883a 	add	r2,r3,r2
  801960:	01801444 	movi	r6,81
  801964:	01400804 	movi	r5,32
  801968:	1009883a 	mov	r4,r2
  80196c:	08044040 	call	804404 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  801970:	e0bffe17 	ldw	r2,-8(fp)
  801974:	108018e4 	muli	r2,r2,99
  801978:	10800c04 	addi	r2,r2,48
  80197c:	e0ffff17 	ldw	r3,-4(fp)
  801980:	1885883a 	add	r2,r3,r2
  801984:	01800404 	movi	r6,16
  801988:	01400804 	movi	r5,32
  80198c:	1009883a 	mov	r4,r2
  801990:	08044040 	call	804404 <memset>
    sp->line[y].width = 0;
  801994:	e0ffff17 	ldw	r3,-4(fp)
  801998:	e0bffe17 	ldw	r2,-8(fp)
  80199c:	108018e4 	muli	r2,r2,99
  8019a0:	1885883a 	add	r2,r3,r2
  8019a4:	10802444 	addi	r2,r2,145
  8019a8:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8019ac:	e0bffe17 	ldw	r2,-8(fp)
  8019b0:	10800044 	addi	r2,r2,1
  8019b4:	e0bffe15 	stw	r2,-8(fp)
  8019b8:	e0bffe17 	ldw	r2,-8(fp)
  8019bc:	10800090 	cmplti	r2,r2,2
  8019c0:	103fe21e 	bne	r2,zero,80194c <__alt_mem_onchip_mem+0xff7f994c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8019c4:	0001883a 	nop
  8019c8:	e037883a 	mov	sp,fp
  8019cc:	dfc00117 	ldw	ra,4(sp)
  8019d0:	df000017 	ldw	fp,0(sp)
  8019d4:	dec00204 	addi	sp,sp,8
  8019d8:	f800283a 	ret

008019dc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8019dc:	defff704 	addi	sp,sp,-36
  8019e0:	dfc00815 	stw	ra,32(sp)
  8019e4:	df000715 	stw	fp,28(sp)
  8019e8:	df000704 	addi	fp,sp,28
  8019ec:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8019f0:	e0bfff17 	ldw	r2,-4(fp)
  8019f4:	10800943 	ldbu	r2,37(r2)
  8019f8:	10803fcc 	andi	r2,r2,255
  8019fc:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801a00:	e03ff915 	stw	zero,-28(fp)
  801a04:	00006706 	br	801ba4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  801a08:	e0ffff17 	ldw	r3,-4(fp)
  801a0c:	e0bff917 	ldw	r2,-28(fp)
  801a10:	108018e4 	muli	r2,r2,99
  801a14:	1885883a 	add	r2,r3,r2
  801a18:	10802444 	addi	r2,r2,145
  801a1c:	10800003 	ldbu	r2,0(r2)
  801a20:	10803fcc 	andi	r2,r2,255
  801a24:	1080201c 	xori	r2,r2,128
  801a28:	10bfe004 	addi	r2,r2,-128
  801a2c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  801a30:	e0ffff17 	ldw	r3,-4(fp)
  801a34:	e0bff917 	ldw	r2,-28(fp)
  801a38:	108018e4 	muli	r2,r2,99
  801a3c:	1885883a 	add	r2,r3,r2
  801a40:	10802484 	addi	r2,r2,146
  801a44:	10800003 	ldbu	r2,0(r2)
  801a48:	10c03fcc 	andi	r3,r2,255
  801a4c:	e0bffc17 	ldw	r2,-16(fp)
  801a50:	1885383a 	mul	r2,r3,r2
  801a54:	1005d23a 	srai	r2,r2,8
  801a58:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  801a5c:	e0fffb17 	ldw	r3,-20(fp)
  801a60:	e0bffd17 	ldw	r2,-12(fp)
  801a64:	18800116 	blt	r3,r2,801a6c <lcd_repaint_screen+0x90>
      offset = 0;
  801a68:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801a6c:	e03ffa15 	stw	zero,-24(fp)
  801a70:	00004606 	br	801b8c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  801a74:	e0fffa17 	ldw	r3,-24(fp)
  801a78:	e0bffb17 	ldw	r2,-20(fp)
  801a7c:	1885883a 	add	r2,r3,r2
  801a80:	e17ffd17 	ldw	r5,-12(fp)
  801a84:	1009883a 	mov	r4,r2
  801a88:	08048e00 	call	8048e0 <__modsi3>
  801a8c:	1009883a 	mov	r4,r2
  801a90:	e0ffff17 	ldw	r3,-4(fp)
  801a94:	e0bff917 	ldw	r2,-28(fp)
  801a98:	108018e4 	muli	r2,r2,99
  801a9c:	1885883a 	add	r2,r3,r2
  801aa0:	1105883a 	add	r2,r2,r4
  801aa4:	10801004 	addi	r2,r2,64
  801aa8:	10800003 	ldbu	r2,0(r2)
  801aac:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  801ab0:	e0ffff17 	ldw	r3,-4(fp)
  801ab4:	e0bff917 	ldw	r2,-28(fp)
  801ab8:	108018e4 	muli	r2,r2,99
  801abc:	1887883a 	add	r3,r3,r2
  801ac0:	e0bffa17 	ldw	r2,-24(fp)
  801ac4:	1885883a 	add	r2,r3,r2
  801ac8:	10800c04 	addi	r2,r2,48
  801acc:	10800003 	ldbu	r2,0(r2)
  801ad0:	10c03fcc 	andi	r3,r2,255
  801ad4:	18c0201c 	xori	r3,r3,128
  801ad8:	18ffe004 	addi	r3,r3,-128
  801adc:	e0bffe07 	ldb	r2,-8(fp)
  801ae0:	18802726 	beq	r3,r2,801b80 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  801ae4:	e0fff917 	ldw	r3,-28(fp)
  801ae8:	d0a00004 	addi	r2,gp,-32768
  801aec:	1885883a 	add	r2,r3,r2
  801af0:	10800003 	ldbu	r2,0(r2)
  801af4:	1007883a 	mov	r3,r2
  801af8:	e0bffa17 	ldw	r2,-24(fp)
  801afc:	1885883a 	add	r2,r3,r2
  801b00:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  801b04:	e0fffe43 	ldbu	r3,-7(fp)
  801b08:	e0bfff17 	ldw	r2,-4(fp)
  801b0c:	108008c3 	ldbu	r2,35(r2)
  801b10:	10803fcc 	andi	r2,r2,255
  801b14:	1080201c 	xori	r2,r2,128
  801b18:	10bfe004 	addi	r2,r2,-128
  801b1c:	18800a26 	beq	r3,r2,801b48 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  801b20:	e0fffe43 	ldbu	r3,-7(fp)
  801b24:	00bfe004 	movi	r2,-128
  801b28:	1884b03a 	or	r2,r3,r2
  801b2c:	10803fcc 	andi	r2,r2,255
  801b30:	100b883a 	mov	r5,r2
  801b34:	e13fff17 	ldw	r4,-4(fp)
  801b38:	080177c0 	call	80177c <lcd_write_command>
          sp->address = address;
  801b3c:	e0fffe43 	ldbu	r3,-7(fp)
  801b40:	e0bfff17 	ldw	r2,-4(fp)
  801b44:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  801b48:	e0bffe03 	ldbu	r2,-8(fp)
  801b4c:	10803fcc 	andi	r2,r2,255
  801b50:	100b883a 	mov	r5,r2
  801b54:	e13fff17 	ldw	r4,-4(fp)
  801b58:	08018340 	call	801834 <lcd_write_data>
        sp->line[y].visible[x] = c;
  801b5c:	e0ffff17 	ldw	r3,-4(fp)
  801b60:	e0bff917 	ldw	r2,-28(fp)
  801b64:	108018e4 	muli	r2,r2,99
  801b68:	1887883a 	add	r3,r3,r2
  801b6c:	e0bffa17 	ldw	r2,-24(fp)
  801b70:	1885883a 	add	r2,r3,r2
  801b74:	10800c04 	addi	r2,r2,48
  801b78:	e0fffe03 	ldbu	r3,-8(fp)
  801b7c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801b80:	e0bffa17 	ldw	r2,-24(fp)
  801b84:	10800044 	addi	r2,r2,1
  801b88:	e0bffa15 	stw	r2,-24(fp)
  801b8c:	e0bffa17 	ldw	r2,-24(fp)
  801b90:	10800410 	cmplti	r2,r2,16
  801b94:	103fb71e 	bne	r2,zero,801a74 <__alt_mem_onchip_mem+0xff7f9a74>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801b98:	e0bff917 	ldw	r2,-28(fp)
  801b9c:	10800044 	addi	r2,r2,1
  801ba0:	e0bff915 	stw	r2,-28(fp)
  801ba4:	e0bff917 	ldw	r2,-28(fp)
  801ba8:	10800090 	cmplti	r2,r2,2
  801bac:	103f961e 	bne	r2,zero,801a08 <__alt_mem_onchip_mem+0xff7f9a08>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  801bb0:	0001883a 	nop
  801bb4:	e037883a 	mov	sp,fp
  801bb8:	dfc00117 	ldw	ra,4(sp)
  801bbc:	df000017 	ldw	fp,0(sp)
  801bc0:	dec00204 	addi	sp,sp,8
  801bc4:	f800283a 	ret

00801bc8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  801bc8:	defffc04 	addi	sp,sp,-16
  801bcc:	dfc00315 	stw	ra,12(sp)
  801bd0:	df000215 	stw	fp,8(sp)
  801bd4:	df000204 	addi	fp,sp,8
  801bd8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801bdc:	e03ffe15 	stw	zero,-8(fp)
  801be0:	00001d06 	br	801c58 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  801be4:	e0bffe17 	ldw	r2,-8(fp)
  801be8:	00800f16 	blt	zero,r2,801c28 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  801bec:	e0bffe17 	ldw	r2,-8(fp)
  801bf0:	108018e4 	muli	r2,r2,99
  801bf4:	10801004 	addi	r2,r2,64
  801bf8:	e0ffff17 	ldw	r3,-4(fp)
  801bfc:	1889883a 	add	r4,r3,r2
  801c00:	e0bffe17 	ldw	r2,-8(fp)
  801c04:	10800044 	addi	r2,r2,1
  801c08:	108018e4 	muli	r2,r2,99
  801c0c:	10801004 	addi	r2,r2,64
  801c10:	e0ffff17 	ldw	r3,-4(fp)
  801c14:	1885883a 	add	r2,r3,r2
  801c18:	01801404 	movi	r6,80
  801c1c:	100b883a 	mov	r5,r2
  801c20:	08042bc0 	call	8042bc <memcpy>
  801c24:	00000906 	br	801c4c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  801c28:	e0bffe17 	ldw	r2,-8(fp)
  801c2c:	108018e4 	muli	r2,r2,99
  801c30:	10801004 	addi	r2,r2,64
  801c34:	e0ffff17 	ldw	r3,-4(fp)
  801c38:	1885883a 	add	r2,r3,r2
  801c3c:	01801404 	movi	r6,80
  801c40:	01400804 	movi	r5,32
  801c44:	1009883a 	mov	r4,r2
  801c48:	08044040 	call	804404 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801c4c:	e0bffe17 	ldw	r2,-8(fp)
  801c50:	10800044 	addi	r2,r2,1
  801c54:	e0bffe15 	stw	r2,-8(fp)
  801c58:	e0bffe17 	ldw	r2,-8(fp)
  801c5c:	10800090 	cmplti	r2,r2,2
  801c60:	103fe01e 	bne	r2,zero,801be4 <__alt_mem_onchip_mem+0xff7f9be4>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  801c64:	e0bfff17 	ldw	r2,-4(fp)
  801c68:	10800883 	ldbu	r2,34(r2)
  801c6c:	10bfffc4 	addi	r2,r2,-1
  801c70:	1007883a 	mov	r3,r2
  801c74:	e0bfff17 	ldw	r2,-4(fp)
  801c78:	10c00885 	stb	r3,34(r2)
}
  801c7c:	0001883a 	nop
  801c80:	e037883a 	mov	sp,fp
  801c84:	dfc00117 	ldw	ra,4(sp)
  801c88:	df000017 	ldw	fp,0(sp)
  801c8c:	dec00204 	addi	sp,sp,8
  801c90:	f800283a 	ret

00801c94 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  801c94:	defff904 	addi	sp,sp,-28
  801c98:	dfc00615 	stw	ra,24(sp)
  801c9c:	df000515 	stw	fp,20(sp)
  801ca0:	df000504 	addi	fp,sp,20
  801ca4:	e13ffe15 	stw	r4,-8(fp)
  801ca8:	2805883a 	mov	r2,r5
  801cac:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  801cb0:	e03ffb15 	stw	zero,-20(fp)
  801cb4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  801cb8:	e0bffe17 	ldw	r2,-8(fp)
  801cbc:	10800a03 	ldbu	r2,40(r2)
  801cc0:	10803fcc 	andi	r2,r2,255
  801cc4:	1080201c 	xori	r2,r2,128
  801cc8:	10bfe004 	addi	r2,r2,-128
  801ccc:	108016d8 	cmpnei	r2,r2,91
  801cd0:	1000411e 	bne	r2,zero,801dd8 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  801cd4:	e0bffe17 	ldw	r2,-8(fp)
  801cd8:	10800a04 	addi	r2,r2,40
  801cdc:	10800044 	addi	r2,r2,1
  801ce0:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  801ce4:	00000c06 	br	801d18 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  801ce8:	e0bffb17 	ldw	r2,-20(fp)
  801cec:	10c002a4 	muli	r3,r2,10
  801cf0:	e0bffd17 	ldw	r2,-12(fp)
  801cf4:	11000044 	addi	r4,r2,1
  801cf8:	e13ffd15 	stw	r4,-12(fp)
  801cfc:	10800003 	ldbu	r2,0(r2)
  801d00:	10803fcc 	andi	r2,r2,255
  801d04:	1080201c 	xori	r2,r2,128
  801d08:	10bfe004 	addi	r2,r2,-128
  801d0c:	10bff404 	addi	r2,r2,-48
  801d10:	1885883a 	add	r2,r3,r2
  801d14:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  801d18:	d0e00a17 	ldw	r3,-32728(gp)
  801d1c:	e0bffd17 	ldw	r2,-12(fp)
  801d20:	10800003 	ldbu	r2,0(r2)
  801d24:	10803fcc 	andi	r2,r2,255
  801d28:	1080201c 	xori	r2,r2,128
  801d2c:	10bfe004 	addi	r2,r2,-128
  801d30:	10800044 	addi	r2,r2,1
  801d34:	1885883a 	add	r2,r3,r2
  801d38:	10800003 	ldbu	r2,0(r2)
  801d3c:	10803fcc 	andi	r2,r2,255
  801d40:	1080010c 	andi	r2,r2,4
  801d44:	103fe81e 	bne	r2,zero,801ce8 <__alt_mem_onchip_mem+0xff7f9ce8>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  801d48:	e0bffd17 	ldw	r2,-12(fp)
  801d4c:	10800003 	ldbu	r2,0(r2)
  801d50:	10803fcc 	andi	r2,r2,255
  801d54:	1080201c 	xori	r2,r2,128
  801d58:	10bfe004 	addi	r2,r2,-128
  801d5c:	10800ed8 	cmpnei	r2,r2,59
  801d60:	10001f1e 	bne	r2,zero,801de0 <lcd_handle_escape+0x14c>
    {
      ptr++;
  801d64:	e0bffd17 	ldw	r2,-12(fp)
  801d68:	10800044 	addi	r2,r2,1
  801d6c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  801d70:	00000c06 	br	801da4 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  801d74:	e0bffc17 	ldw	r2,-16(fp)
  801d78:	10c002a4 	muli	r3,r2,10
  801d7c:	e0bffd17 	ldw	r2,-12(fp)
  801d80:	11000044 	addi	r4,r2,1
  801d84:	e13ffd15 	stw	r4,-12(fp)
  801d88:	10800003 	ldbu	r2,0(r2)
  801d8c:	10803fcc 	andi	r2,r2,255
  801d90:	1080201c 	xori	r2,r2,128
  801d94:	10bfe004 	addi	r2,r2,-128
  801d98:	10bff404 	addi	r2,r2,-48
  801d9c:	1885883a 	add	r2,r3,r2
  801da0:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  801da4:	d0e00a17 	ldw	r3,-32728(gp)
  801da8:	e0bffd17 	ldw	r2,-12(fp)
  801dac:	10800003 	ldbu	r2,0(r2)
  801db0:	10803fcc 	andi	r2,r2,255
  801db4:	1080201c 	xori	r2,r2,128
  801db8:	10bfe004 	addi	r2,r2,-128
  801dbc:	10800044 	addi	r2,r2,1
  801dc0:	1885883a 	add	r2,r3,r2
  801dc4:	10800003 	ldbu	r2,0(r2)
  801dc8:	10803fcc 	andi	r2,r2,255
  801dcc:	1080010c 	andi	r2,r2,4
  801dd0:	103fe81e 	bne	r2,zero,801d74 <__alt_mem_onchip_mem+0xff7f9d74>
  801dd4:	00000206 	br	801de0 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  801dd8:	00bfffc4 	movi	r2,-1
  801ddc:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  801de0:	e0bfff07 	ldb	r2,-4(fp)
  801de4:	10c012a0 	cmpeqi	r3,r2,74
  801de8:	1800291e 	bne	r3,zero,801e90 <lcd_handle_escape+0x1fc>
  801dec:	10c012c8 	cmpgei	r3,r2,75
  801df0:	1800031e 	bne	r3,zero,801e00 <lcd_handle_escape+0x16c>
  801df4:	10801220 	cmpeqi	r2,r2,72
  801df8:	1000061e 	bne	r2,zero,801e14 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  801dfc:	00004a06 	br	801f28 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  801e00:	10c012e0 	cmpeqi	r3,r2,75
  801e04:	1800281e 	bne	r3,zero,801ea8 <lcd_handle_escape+0x214>
  801e08:	108019a0 	cmpeqi	r2,r2,102
  801e0c:	1000011e 	bne	r2,zero,801e14 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  801e10:	00004506 	br	801f28 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  801e14:	e0bffc17 	ldw	r2,-16(fp)
  801e18:	0080050e 	bge	zero,r2,801e30 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  801e1c:	e0bffc17 	ldw	r2,-16(fp)
  801e20:	10bfffc4 	addi	r2,r2,-1
  801e24:	1007883a 	mov	r3,r2
  801e28:	e0bffe17 	ldw	r2,-8(fp)
  801e2c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  801e30:	e0bffb17 	ldw	r2,-20(fp)
  801e34:	0080370e 	bge	zero,r2,801f14 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  801e38:	e0bffb17 	ldw	r2,-20(fp)
  801e3c:	10bfffc4 	addi	r2,r2,-1
  801e40:	1007883a 	mov	r3,r2
  801e44:	e0bffe17 	ldw	r2,-8(fp)
  801e48:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  801e4c:	e0bffe17 	ldw	r2,-8(fp)
  801e50:	10800883 	ldbu	r2,34(r2)
  801e54:	10803fcc 	andi	r2,r2,255
  801e58:	10800170 	cmpltui	r2,r2,5
  801e5c:	1000061e 	bne	r2,zero,801e78 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  801e60:	e0bffe17 	ldw	r2,-8(fp)
  801e64:	00c00104 	movi	r3,4
  801e68:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  801e6c:	00000206 	br	801e78 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  801e70:	e13ffe17 	ldw	r4,-8(fp)
  801e74:	0801bc80 	call	801bc8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  801e78:	e0bffe17 	ldw	r2,-8(fp)
  801e7c:	10800883 	ldbu	r2,34(r2)
  801e80:	10803fcc 	andi	r2,r2,255
  801e84:	108000e8 	cmpgeui	r2,r2,3
  801e88:	103ff91e 	bne	r2,zero,801e70 <__alt_mem_onchip_mem+0xff7f9e70>
        lcd_scroll_up(sp);
    }
    break;
  801e8c:	00002106 	br	801f14 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  801e90:	e0bffb17 	ldw	r2,-20(fp)
  801e94:	10800098 	cmpnei	r2,r2,2
  801e98:	1000201e 	bne	r2,zero,801f1c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  801e9c:	e13ffe17 	ldw	r4,-8(fp)
  801ea0:	080190c0 	call	80190c <lcd_clear_screen>
    break;
  801ea4:	00001d06 	br	801f1c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  801ea8:	e0bffb17 	ldw	r2,-20(fp)
  801eac:	00801d16 	blt	zero,r2,801f24 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  801eb0:	e0bffe17 	ldw	r2,-8(fp)
  801eb4:	10800843 	ldbu	r2,33(r2)
  801eb8:	10803fcc 	andi	r2,r2,255
  801ebc:	10801428 	cmpgeui	r2,r2,80
  801ec0:	1000181e 	bne	r2,zero,801f24 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  801ec4:	e0bffe17 	ldw	r2,-8(fp)
  801ec8:	10800883 	ldbu	r2,34(r2)
  801ecc:	10803fcc 	andi	r2,r2,255
  801ed0:	108018e4 	muli	r2,r2,99
  801ed4:	10801004 	addi	r2,r2,64
  801ed8:	e0fffe17 	ldw	r3,-8(fp)
  801edc:	1887883a 	add	r3,r3,r2
  801ee0:	e0bffe17 	ldw	r2,-8(fp)
  801ee4:	10800843 	ldbu	r2,33(r2)
  801ee8:	10803fcc 	andi	r2,r2,255
  801eec:	1889883a 	add	r4,r3,r2
  801ef0:	e0bffe17 	ldw	r2,-8(fp)
  801ef4:	10800843 	ldbu	r2,33(r2)
  801ef8:	10803fcc 	andi	r2,r2,255
  801efc:	00c01404 	movi	r3,80
  801f00:	1885c83a 	sub	r2,r3,r2
  801f04:	100d883a 	mov	r6,r2
  801f08:	01400804 	movi	r5,32
  801f0c:	08044040 	call	804404 <memset>
    }
    break;
  801f10:	00000406 	br	801f24 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  801f14:	0001883a 	nop
  801f18:	00000306 	br	801f28 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  801f1c:	0001883a 	nop
  801f20:	00000106 	br	801f28 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  801f24:	0001883a 	nop
  }
}
  801f28:	0001883a 	nop
  801f2c:	e037883a 	mov	sp,fp
  801f30:	dfc00117 	ldw	ra,4(sp)
  801f34:	df000017 	ldw	fp,0(sp)
  801f38:	dec00204 	addi	sp,sp,8
  801f3c:	f800283a 	ret

00801f40 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  801f40:	defff304 	addi	sp,sp,-52
  801f44:	dfc00c15 	stw	ra,48(sp)
  801f48:	df000b15 	stw	fp,44(sp)
  801f4c:	df000b04 	addi	fp,sp,44
  801f50:	e13ffc15 	stw	r4,-16(fp)
  801f54:	e17ffd15 	stw	r5,-12(fp)
  801f58:	e1bffe15 	stw	r6,-8(fp)
  801f5c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801f60:	e0bffe17 	ldw	r2,-8(fp)
  801f64:	e0fffd17 	ldw	r3,-12(fp)
  801f68:	1885883a 	add	r2,r3,r2
  801f6c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  801f70:	e0bffc17 	ldw	r2,-16(fp)
  801f74:	00c00044 	movi	r3,1
  801f78:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  801f7c:	00009906 	br	8021e4 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  801f80:	e0bffd17 	ldw	r2,-12(fp)
  801f84:	10800003 	ldbu	r2,0(r2)
  801f88:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  801f8c:	e0bffc17 	ldw	r2,-16(fp)
  801f90:	10800903 	ldbu	r2,36(r2)
  801f94:	10803fcc 	andi	r2,r2,255
  801f98:	1080201c 	xori	r2,r2,128
  801f9c:	10bfe004 	addi	r2,r2,-128
  801fa0:	10003716 	blt	r2,zero,802080 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  801fa4:	e0bffc17 	ldw	r2,-16(fp)
  801fa8:	10800903 	ldbu	r2,36(r2)
  801fac:	10803fcc 	andi	r2,r2,255
  801fb0:	1080201c 	xori	r2,r2,128
  801fb4:	10bfe004 	addi	r2,r2,-128
  801fb8:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  801fbc:	e0bffa17 	ldw	r2,-24(fp)
  801fc0:	1000031e 	bne	r2,zero,801fd0 <altera_avalon_lcd_16207_write+0x90>
  801fc4:	e0bff907 	ldb	r2,-28(fp)
  801fc8:	108016d8 	cmpnei	r2,r2,91
  801fcc:	10000d1e 	bne	r2,zero,802004 <altera_avalon_lcd_16207_write+0xc4>
  801fd0:	e0bffa17 	ldw	r2,-24(fp)
  801fd4:	10001826 	beq	r2,zero,802038 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  801fd8:	d0e00a17 	ldw	r3,-32728(gp)
  801fdc:	e0bff907 	ldb	r2,-28(fp)
  801fe0:	10800044 	addi	r2,r2,1
  801fe4:	1885883a 	add	r2,r3,r2
  801fe8:	10800003 	ldbu	r2,0(r2)
  801fec:	10803fcc 	andi	r2,r2,255
  801ff0:	1080010c 	andi	r2,r2,4
  801ff4:	1000101e 	bne	r2,zero,802038 <altera_avalon_lcd_16207_write+0xf8>
  801ff8:	e0bff907 	ldb	r2,-28(fp)
  801ffc:	10800ee0 	cmpeqi	r2,r2,59
  802000:	10000d1e 	bne	r2,zero,802038 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  802004:	e0fffc17 	ldw	r3,-16(fp)
  802008:	e0bffa17 	ldw	r2,-24(fp)
  80200c:	1885883a 	add	r2,r3,r2
  802010:	10800a04 	addi	r2,r2,40
  802014:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  802018:	e0bff907 	ldb	r2,-28(fp)
  80201c:	100b883a 	mov	r5,r2
  802020:	e13ffc17 	ldw	r4,-16(fp)
  802024:	0801c940 	call	801c94 <lcd_handle_escape>

        sp->esccount = -1;
  802028:	e0bffc17 	ldw	r2,-16(fp)
  80202c:	00ffffc4 	movi	r3,-1
  802030:	10c00905 	stb	r3,36(r2)
  802034:	00006806 	br	8021d8 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  802038:	e0bffc17 	ldw	r2,-16(fp)
  80203c:	10800903 	ldbu	r2,36(r2)
  802040:	10803fcc 	andi	r2,r2,255
  802044:	108001e8 	cmpgeui	r2,r2,7
  802048:	1000631e 	bne	r2,zero,8021d8 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80204c:	e0fffc17 	ldw	r3,-16(fp)
  802050:	e0bffa17 	ldw	r2,-24(fp)
  802054:	1885883a 	add	r2,r3,r2
  802058:	10800a04 	addi	r2,r2,40
  80205c:	e0fff903 	ldbu	r3,-28(fp)
  802060:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  802064:	e0bffc17 	ldw	r2,-16(fp)
  802068:	10800903 	ldbu	r2,36(r2)
  80206c:	10800044 	addi	r2,r2,1
  802070:	1007883a 	mov	r3,r2
  802074:	e0bffc17 	ldw	r2,-16(fp)
  802078:	10c00905 	stb	r3,36(r2)
  80207c:	00005606 	br	8021d8 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  802080:	e0bff907 	ldb	r2,-28(fp)
  802084:	108006d8 	cmpnei	r2,r2,27
  802088:	1000031e 	bne	r2,zero,802098 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80208c:	e0bffc17 	ldw	r2,-16(fp)
  802090:	10000905 	stb	zero,36(r2)
  802094:	00005006 	br	8021d8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  802098:	e0bff907 	ldb	r2,-28(fp)
  80209c:	10800358 	cmpnei	r2,r2,13
  8020a0:	1000031e 	bne	r2,zero,8020b0 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8020a4:	e0bffc17 	ldw	r2,-16(fp)
  8020a8:	10000845 	stb	zero,33(r2)
  8020ac:	00004a06 	br	8021d8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8020b0:	e0bff907 	ldb	r2,-28(fp)
  8020b4:	10800298 	cmpnei	r2,r2,10
  8020b8:	1000101e 	bne	r2,zero,8020fc <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8020bc:	e0bffc17 	ldw	r2,-16(fp)
  8020c0:	10000845 	stb	zero,33(r2)
      sp->y++;
  8020c4:	e0bffc17 	ldw	r2,-16(fp)
  8020c8:	10800883 	ldbu	r2,34(r2)
  8020cc:	10800044 	addi	r2,r2,1
  8020d0:	1007883a 	mov	r3,r2
  8020d4:	e0bffc17 	ldw	r2,-16(fp)
  8020d8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8020dc:	e0bffc17 	ldw	r2,-16(fp)
  8020e0:	10800883 	ldbu	r2,34(r2)
  8020e4:	10803fcc 	andi	r2,r2,255
  8020e8:	108000f0 	cmpltui	r2,r2,3
  8020ec:	10003a1e 	bne	r2,zero,8021d8 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8020f0:	e13ffc17 	ldw	r4,-16(fp)
  8020f4:	0801bc80 	call	801bc8 <lcd_scroll_up>
  8020f8:	00003706 	br	8021d8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8020fc:	e0bff907 	ldb	r2,-28(fp)
  802100:	10800218 	cmpnei	r2,r2,8
  802104:	10000b1e 	bne	r2,zero,802134 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  802108:	e0bffc17 	ldw	r2,-16(fp)
  80210c:	10800843 	ldbu	r2,33(r2)
  802110:	10803fcc 	andi	r2,r2,255
  802114:	10003026 	beq	r2,zero,8021d8 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  802118:	e0bffc17 	ldw	r2,-16(fp)
  80211c:	10800843 	ldbu	r2,33(r2)
  802120:	10bfffc4 	addi	r2,r2,-1
  802124:	1007883a 	mov	r3,r2
  802128:	e0bffc17 	ldw	r2,-16(fp)
  80212c:	10c00845 	stb	r3,33(r2)
  802130:	00002906 	br	8021d8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  802134:	d0e00a17 	ldw	r3,-32728(gp)
  802138:	e0bff907 	ldb	r2,-28(fp)
  80213c:	10800044 	addi	r2,r2,1
  802140:	1885883a 	add	r2,r3,r2
  802144:	10800003 	ldbu	r2,0(r2)
  802148:	10803fcc 	andi	r2,r2,255
  80214c:	1080201c 	xori	r2,r2,128
  802150:	10bfe004 	addi	r2,r2,-128
  802154:	108025cc 	andi	r2,r2,151
  802158:	10001f26 	beq	r2,zero,8021d8 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80215c:	e0bffc17 	ldw	r2,-16(fp)
  802160:	10800883 	ldbu	r2,34(r2)
  802164:	10803fcc 	andi	r2,r2,255
  802168:	108000b0 	cmpltui	r2,r2,2
  80216c:	1000021e 	bne	r2,zero,802178 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  802170:	e13ffc17 	ldw	r4,-16(fp)
  802174:	0801bc80 	call	801bc8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  802178:	e0bffc17 	ldw	r2,-16(fp)
  80217c:	10800843 	ldbu	r2,33(r2)
  802180:	10803fcc 	andi	r2,r2,255
  802184:	10801428 	cmpgeui	r2,r2,80
  802188:	10000d1e 	bne	r2,zero,8021c0 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80218c:	e0bffc17 	ldw	r2,-16(fp)
  802190:	10800883 	ldbu	r2,34(r2)
  802194:	10c03fcc 	andi	r3,r2,255
  802198:	e0bffc17 	ldw	r2,-16(fp)
  80219c:	10800843 	ldbu	r2,33(r2)
  8021a0:	10803fcc 	andi	r2,r2,255
  8021a4:	e13ffc17 	ldw	r4,-16(fp)
  8021a8:	18c018e4 	muli	r3,r3,99
  8021ac:	20c7883a 	add	r3,r4,r3
  8021b0:	1885883a 	add	r2,r3,r2
  8021b4:	10801004 	addi	r2,r2,64
  8021b8:	e0fff903 	ldbu	r3,-28(fp)
  8021bc:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8021c0:	e0bffc17 	ldw	r2,-16(fp)
  8021c4:	10800843 	ldbu	r2,33(r2)
  8021c8:	10800044 	addi	r2,r2,1
  8021cc:	1007883a 	mov	r3,r2
  8021d0:	e0bffc17 	ldw	r2,-16(fp)
  8021d4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8021d8:	e0bffd17 	ldw	r2,-12(fp)
  8021dc:	10800044 	addi	r2,r2,1
  8021e0:	e0bffd15 	stw	r2,-12(fp)
  8021e4:	e0fffd17 	ldw	r3,-12(fp)
  8021e8:	e0bff817 	ldw	r2,-32(fp)
  8021ec:	18bf6436 	bltu	r3,r2,801f80 <__alt_mem_onchip_mem+0xff7f9f80>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8021f0:	00800404 	movi	r2,16
  8021f4:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8021f8:	e03ff515 	stw	zero,-44(fp)
  8021fc:	00003706 	br	8022dc <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  802200:	00801404 	movi	r2,80
  802204:	e0bff715 	stw	r2,-36(fp)
  802208:	00001106 	br	802250 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80220c:	e0bff717 	ldw	r2,-36(fp)
  802210:	10bfffc4 	addi	r2,r2,-1
  802214:	e13ffc17 	ldw	r4,-16(fp)
  802218:	e0fff517 	ldw	r3,-44(fp)
  80221c:	18c018e4 	muli	r3,r3,99
  802220:	20c7883a 	add	r3,r4,r3
  802224:	1885883a 	add	r2,r3,r2
  802228:	10801004 	addi	r2,r2,64
  80222c:	10800003 	ldbu	r2,0(r2)
  802230:	10803fcc 	andi	r2,r2,255
  802234:	1080201c 	xori	r2,r2,128
  802238:	10bfe004 	addi	r2,r2,-128
  80223c:	10800820 	cmpeqi	r2,r2,32
  802240:	10000626 	beq	r2,zero,80225c <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  802244:	e0bff717 	ldw	r2,-36(fp)
  802248:	10bfffc4 	addi	r2,r2,-1
  80224c:	e0bff715 	stw	r2,-36(fp)
  802250:	e0bff717 	ldw	r2,-36(fp)
  802254:	00bfed16 	blt	zero,r2,80220c <__alt_mem_onchip_mem+0xff7fa20c>
  802258:	00000106 	br	802260 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80225c:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  802260:	e0bff717 	ldw	r2,-36(fp)
  802264:	10800448 	cmpgei	r2,r2,17
  802268:	1000031e 	bne	r2,zero,802278 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80226c:	00800404 	movi	r2,16
  802270:	e0bff715 	stw	r2,-36(fp)
  802274:	00000306 	br	802284 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  802278:	e0bff717 	ldw	r2,-36(fp)
  80227c:	10800044 	addi	r2,r2,1
  802280:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  802284:	e0bff717 	ldw	r2,-36(fp)
  802288:	1009883a 	mov	r4,r2
  80228c:	e0fffc17 	ldw	r3,-16(fp)
  802290:	e0bff517 	ldw	r2,-44(fp)
  802294:	108018e4 	muli	r2,r2,99
  802298:	1885883a 	add	r2,r3,r2
  80229c:	10802444 	addi	r2,r2,145
  8022a0:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8022a4:	e0fff617 	ldw	r3,-40(fp)
  8022a8:	e0bff717 	ldw	r2,-36(fp)
  8022ac:	1880020e 	bge	r3,r2,8022b8 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8022b0:	e0bff717 	ldw	r2,-36(fp)
  8022b4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8022b8:	e0fffc17 	ldw	r3,-16(fp)
  8022bc:	e0bff517 	ldw	r2,-44(fp)
  8022c0:	108018e4 	muli	r2,r2,99
  8022c4:	1885883a 	add	r2,r3,r2
  8022c8:	10802484 	addi	r2,r2,146
  8022cc:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8022d0:	e0bff517 	ldw	r2,-44(fp)
  8022d4:	10800044 	addi	r2,r2,1
  8022d8:	e0bff515 	stw	r2,-44(fp)
  8022dc:	e0bff517 	ldw	r2,-44(fp)
  8022e0:	10800090 	cmplti	r2,r2,2
  8022e4:	103fc61e 	bne	r2,zero,802200 <__alt_mem_onchip_mem+0xff7fa200>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8022e8:	e0bff617 	ldw	r2,-40(fp)
  8022ec:	10800448 	cmpgei	r2,r2,17
  8022f0:	1000031e 	bne	r2,zero,802300 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8022f4:	e0bffc17 	ldw	r2,-16(fp)
  8022f8:	10000985 	stb	zero,38(r2)
  8022fc:	00002e06 	br	8023b8 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  802300:	e0bff617 	ldw	r2,-40(fp)
  802304:	1085883a 	add	r2,r2,r2
  802308:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80230c:	e0bff617 	ldw	r2,-40(fp)
  802310:	1007883a 	mov	r3,r2
  802314:	e0bffc17 	ldw	r2,-16(fp)
  802318:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80231c:	e03ff515 	stw	zero,-44(fp)
  802320:	00002206 	br	8023ac <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  802324:	e0fffc17 	ldw	r3,-16(fp)
  802328:	e0bff517 	ldw	r2,-44(fp)
  80232c:	108018e4 	muli	r2,r2,99
  802330:	1885883a 	add	r2,r3,r2
  802334:	10802444 	addi	r2,r2,145
  802338:	10800003 	ldbu	r2,0(r2)
  80233c:	10803fcc 	andi	r2,r2,255
  802340:	1080201c 	xori	r2,r2,128
  802344:	10bfe004 	addi	r2,r2,-128
  802348:	10800450 	cmplti	r2,r2,17
  80234c:	1000141e 	bne	r2,zero,8023a0 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  802350:	e0fffc17 	ldw	r3,-16(fp)
  802354:	e0bff517 	ldw	r2,-44(fp)
  802358:	108018e4 	muli	r2,r2,99
  80235c:	1885883a 	add	r2,r3,r2
  802360:	10802444 	addi	r2,r2,145
  802364:	10800003 	ldbu	r2,0(r2)
  802368:	10803fcc 	andi	r2,r2,255
  80236c:	1080201c 	xori	r2,r2,128
  802370:	10bfe004 	addi	r2,r2,-128
  802374:	1004923a 	slli	r2,r2,8
  802378:	e17ff617 	ldw	r5,-40(fp)
  80237c:	1009883a 	mov	r4,r2
  802380:	080485c0 	call	80485c <__divsi3>
  802384:	1009883a 	mov	r4,r2
  802388:	e0fffc17 	ldw	r3,-16(fp)
  80238c:	e0bff517 	ldw	r2,-44(fp)
  802390:	108018e4 	muli	r2,r2,99
  802394:	1885883a 	add	r2,r3,r2
  802398:	10802484 	addi	r2,r2,146
  80239c:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8023a0:	e0bff517 	ldw	r2,-44(fp)
  8023a4:	10800044 	addi	r2,r2,1
  8023a8:	e0bff515 	stw	r2,-44(fp)
  8023ac:	e0bff517 	ldw	r2,-44(fp)
  8023b0:	10800090 	cmplti	r2,r2,2
  8023b4:	103fdb1e 	bne	r2,zero,802324 <__alt_mem_onchip_mem+0xff7fa324>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8023b8:	e0bffc17 	ldw	r2,-16(fp)
  8023bc:	10800943 	ldbu	r2,37(r2)
  8023c0:	10803fcc 	andi	r2,r2,255
  8023c4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8023c8:	e13ffc17 	ldw	r4,-16(fp)
  8023cc:	08019dc0 	call	8019dc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8023d0:	e0bffc17 	ldw	r2,-16(fp)
  8023d4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8023d8:	e0bffc17 	ldw	r2,-16(fp)
  8023dc:	10800943 	ldbu	r2,37(r2)
  8023e0:	10c03fcc 	andi	r3,r2,255
  8023e4:	e0bffb17 	ldw	r2,-20(fp)
  8023e8:	18800426 	beq	r3,r2,8023fc <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8023ec:	e0bffc17 	ldw	r2,-16(fp)
  8023f0:	00c00044 	movi	r3,1
  8023f4:	10c009c5 	stb	r3,39(r2)
  }
  8023f8:	003fef06 	br	8023b8 <__alt_mem_onchip_mem+0xff7fa3b8>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8023fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  802400:	e0bffe17 	ldw	r2,-8(fp)
}
  802404:	e037883a 	mov	sp,fp
  802408:	dfc00117 	ldw	ra,4(sp)
  80240c:	df000017 	ldw	fp,0(sp)
  802410:	dec00204 	addi	sp,sp,8
  802414:	f800283a 	ret

00802418 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  802418:	defffc04 	addi	sp,sp,-16
  80241c:	dfc00315 	stw	ra,12(sp)
  802420:	df000215 	stw	fp,8(sp)
  802424:	df000204 	addi	fp,sp,8
  802428:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80242c:	e0bfff17 	ldw	r2,-4(fp)
  802430:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  802434:	e0bffe17 	ldw	r2,-8(fp)
  802438:	10800943 	ldbu	r2,37(r2)
  80243c:	10803fcc 	andi	r2,r2,255
  802440:	10c00044 	addi	r3,r2,1
  802444:	e0bffe17 	ldw	r2,-8(fp)
  802448:	10800983 	ldbu	r2,38(r2)
  80244c:	10803fcc 	andi	r2,r2,255
  802450:	18800316 	blt	r3,r2,802460 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  802454:	e0bffe17 	ldw	r2,-8(fp)
  802458:	10000945 	stb	zero,37(r2)
  80245c:	00000606 	br	802478 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  802460:	e0bffe17 	ldw	r2,-8(fp)
  802464:	10800943 	ldbu	r2,37(r2)
  802468:	10800044 	addi	r2,r2,1
  80246c:	1007883a 	mov	r3,r2
  802470:	e0bffe17 	ldw	r2,-8(fp)
  802474:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  802478:	e0bffe17 	ldw	r2,-8(fp)
  80247c:	10800983 	ldbu	r2,38(r2)
  802480:	10803fcc 	andi	r2,r2,255
  802484:	10000826 	beq	r2,zero,8024a8 <alt_lcd_16207_timeout+0x90>
  802488:	e0bffe17 	ldw	r2,-8(fp)
  80248c:	108009c3 	ldbu	r2,39(r2)
  802490:	10803fcc 	andi	r2,r2,255
  802494:	1080201c 	xori	r2,r2,128
  802498:	10bfe004 	addi	r2,r2,-128
  80249c:	1000021e 	bne	r2,zero,8024a8 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8024a0:	e13ffe17 	ldw	r4,-8(fp)
  8024a4:	08019dc0 	call	8019dc <lcd_repaint_screen>

  return sp->period;
  8024a8:	e0bffe17 	ldw	r2,-8(fp)
  8024ac:	10800717 	ldw	r2,28(r2)
}
  8024b0:	e037883a 	mov	sp,fp
  8024b4:	dfc00117 	ldw	ra,4(sp)
  8024b8:	df000017 	ldw	fp,0(sp)
  8024bc:	dec00204 	addi	sp,sp,8
  8024c0:	f800283a 	ret

008024c4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8024c4:	defffc04 	addi	sp,sp,-16
  8024c8:	dfc00315 	stw	ra,12(sp)
  8024cc:	df000215 	stw	fp,8(sp)
  8024d0:	df000204 	addi	fp,sp,8
  8024d4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8024d8:	e0bfff17 	ldw	r2,-4(fp)
  8024dc:	10800017 	ldw	r2,0(r2)
  8024e0:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8024e4:	e0bfff17 	ldw	r2,-4(fp)
  8024e8:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8024ec:	010ea604 	movi	r4,15000
  8024f0:	0803ce00 	call	803ce0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8024f4:	e0bffe17 	ldw	r2,-8(fp)
  8024f8:	00c00c04 	movi	r3,48
  8024fc:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  802500:	01040104 	movi	r4,4100
  802504:	0803ce00 	call	803ce0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  802508:	e0bffe17 	ldw	r2,-8(fp)
  80250c:	00c00c04 	movi	r3,48
  802510:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  802514:	0100fa04 	movi	r4,1000
  802518:	0803ce00 	call	803ce0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80251c:	e0bffe17 	ldw	r2,-8(fp)
  802520:	00c00c04 	movi	r3,48
  802524:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  802528:	01400e04 	movi	r5,56
  80252c:	e13fff17 	ldw	r4,-4(fp)
  802530:	080177c0 	call	80177c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  802534:	01400204 	movi	r5,8
  802538:	e13fff17 	ldw	r4,-4(fp)
  80253c:	080177c0 	call	80177c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  802540:	e13fff17 	ldw	r4,-4(fp)
  802544:	080190c0 	call	80190c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  802548:	01400184 	movi	r5,6
  80254c:	e13fff17 	ldw	r4,-4(fp)
  802550:	080177c0 	call	80177c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  802554:	01400304 	movi	r5,12
  802558:	e13fff17 	ldw	r4,-4(fp)
  80255c:	080177c0 	call	80177c <lcd_write_command>

  sp->esccount = -1;
  802560:	e0bfff17 	ldw	r2,-4(fp)
  802564:	00ffffc4 	movi	r3,-1
  802568:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80256c:	e0bfff17 	ldw	r2,-4(fp)
  802570:	10800a04 	addi	r2,r2,40
  802574:	01800204 	movi	r6,8
  802578:	000b883a 	mov	r5,zero
  80257c:	1009883a 	mov	r4,r2
  802580:	08044040 	call	804404 <memset>

  sp->scrollpos = 0;
  802584:	e0bfff17 	ldw	r2,-4(fp)
  802588:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80258c:	e0bfff17 	ldw	r2,-4(fp)
  802590:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  802594:	e0bfff17 	ldw	r2,-4(fp)
  802598:	100009c5 	stb	zero,39(r2)
  80259c:	d0a62217 	ldw	r2,-26488(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8025a0:	01400284 	movi	r5,10
  8025a4:	1009883a 	mov	r4,r2
  8025a8:	08049540 	call	804954 <__udivsi3>
  8025ac:	1007883a 	mov	r3,r2
  8025b0:	e0bfff17 	ldw	r2,-4(fp)
  8025b4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8025b8:	e0bfff17 	ldw	r2,-4(fp)
  8025bc:	10c00104 	addi	r3,r2,4
  8025c0:	e0bfff17 	ldw	r2,-4(fp)
  8025c4:	10800717 	ldw	r2,28(r2)
  8025c8:	e1ffff17 	ldw	r7,-4(fp)
  8025cc:	01802034 	movhi	r6,128
  8025d0:	31890604 	addi	r6,r6,9240
  8025d4:	100b883a 	mov	r5,r2
  8025d8:	1809883a 	mov	r4,r3
  8025dc:	08030240 	call	803024 <alt_alarm_start>
}
  8025e0:	0001883a 	nop
  8025e4:	e037883a 	mov	sp,fp
  8025e8:	dfc00117 	ldw	ra,4(sp)
  8025ec:	df000017 	ldw	fp,0(sp)
  8025f0:	dec00204 	addi	sp,sp,8
  8025f4:	f800283a 	ret

008025f8 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8025f8:	defffa04 	addi	sp,sp,-24
  8025fc:	dfc00515 	stw	ra,20(sp)
  802600:	df000415 	stw	fp,16(sp)
  802604:	df000404 	addi	fp,sp,16
  802608:	e13ffd15 	stw	r4,-12(fp)
  80260c:	e17ffe15 	stw	r5,-8(fp)
  802610:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  802614:	e0bffd17 	ldw	r2,-12(fp)
  802618:	10800017 	ldw	r2,0(r2)
  80261c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  802620:	e0bffc17 	ldw	r2,-16(fp)
  802624:	10c00a04 	addi	r3,r2,40
  802628:	e0bffd17 	ldw	r2,-12(fp)
  80262c:	10800217 	ldw	r2,8(r2)
  802630:	100f883a 	mov	r7,r2
  802634:	e1bfff17 	ldw	r6,-4(fp)
  802638:	e17ffe17 	ldw	r5,-8(fp)
  80263c:	1809883a 	mov	r4,r3
  802640:	0801f400 	call	801f40 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  802644:	e037883a 	mov	sp,fp
  802648:	dfc00117 	ldw	ra,4(sp)
  80264c:	df000017 	ldw	fp,0(sp)
  802650:	dec00204 	addi	sp,sp,8
  802654:	f800283a 	ret

00802658 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  802658:	defffa04 	addi	sp,sp,-24
  80265c:	dfc00515 	stw	ra,20(sp)
  802660:	df000415 	stw	fp,16(sp)
  802664:	df000404 	addi	fp,sp,16
  802668:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80266c:	0007883a 	mov	r3,zero
  802670:	e0bfff17 	ldw	r2,-4(fp)
  802674:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  802678:	e0bfff17 	ldw	r2,-4(fp)
  80267c:	10800104 	addi	r2,r2,4
  802680:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802684:	0005303a 	rdctl	r2,status
  802688:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80268c:	e0fffd17 	ldw	r3,-12(fp)
  802690:	00bfff84 	movi	r2,-2
  802694:	1884703a 	and	r2,r3,r2
  802698:	1001703a 	wrctl	status,r2
  
  return context;
  80269c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8026a0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8026a4:	0803bd80 	call	803bd8 <alt_tick>
  8026a8:	e0bffc17 	ldw	r2,-16(fp)
  8026ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8026b0:	e0bffe17 	ldw	r2,-8(fp)
  8026b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8026b8:	0001883a 	nop
  8026bc:	e037883a 	mov	sp,fp
  8026c0:	dfc00117 	ldw	ra,4(sp)
  8026c4:	df000017 	ldw	fp,0(sp)
  8026c8:	dec00204 	addi	sp,sp,8
  8026cc:	f800283a 	ret

008026d0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8026d0:	defff804 	addi	sp,sp,-32
  8026d4:	dfc00715 	stw	ra,28(sp)
  8026d8:	df000615 	stw	fp,24(sp)
  8026dc:	df000604 	addi	fp,sp,24
  8026e0:	e13ffc15 	stw	r4,-16(fp)
  8026e4:	e17ffd15 	stw	r5,-12(fp)
  8026e8:	e1bffe15 	stw	r6,-8(fp)
  8026ec:	e1ffff15 	stw	r7,-4(fp)
  8026f0:	e0bfff17 	ldw	r2,-4(fp)
  8026f4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8026f8:	d0a62217 	ldw	r2,-26488(gp)
  8026fc:	1000021e 	bne	r2,zero,802708 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  802700:	e0bffb17 	ldw	r2,-20(fp)
  802704:	d0a62215 	stw	r2,-26488(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  802708:	e0bffc17 	ldw	r2,-16(fp)
  80270c:	10800104 	addi	r2,r2,4
  802710:	00c001c4 	movi	r3,7
  802714:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  802718:	d8000015 	stw	zero,0(sp)
  80271c:	e1fffc17 	ldw	r7,-16(fp)
  802720:	01802034 	movhi	r6,128
  802724:	31899604 	addi	r6,r6,9816
  802728:	e17ffe17 	ldw	r5,-8(fp)
  80272c:	e13ffd17 	ldw	r4,-12(fp)
  802730:	08034a40 	call	8034a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  802734:	0001883a 	nop
  802738:	e037883a 	mov	sp,fp
  80273c:	dfc00117 	ldw	ra,4(sp)
  802740:	df000017 	ldw	fp,0(sp)
  802744:	dec00204 	addi	sp,sp,8
  802748:	f800283a 	ret

0080274c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80274c:	defffa04 	addi	sp,sp,-24
  802750:	dfc00515 	stw	ra,20(sp)
  802754:	df000415 	stw	fp,16(sp)
  802758:	df000404 	addi	fp,sp,16
  80275c:	e13ffd15 	stw	r4,-12(fp)
  802760:	e17ffe15 	stw	r5,-8(fp)
  802764:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802768:	e0bffd17 	ldw	r2,-12(fp)
  80276c:	10800017 	ldw	r2,0(r2)
  802770:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  802774:	e0bffc17 	ldw	r2,-16(fp)
  802778:	10c00a04 	addi	r3,r2,40
  80277c:	e0bffd17 	ldw	r2,-12(fp)
  802780:	10800217 	ldw	r2,8(r2)
  802784:	100f883a 	mov	r7,r2
  802788:	e1bfff17 	ldw	r6,-4(fp)
  80278c:	e17ffe17 	ldw	r5,-8(fp)
  802790:	1809883a 	mov	r4,r3
  802794:	0802c600 	call	802c60 <altera_avalon_uart_read>
      fd->fd_flags);
}
  802798:	e037883a 	mov	sp,fp
  80279c:	dfc00117 	ldw	ra,4(sp)
  8027a0:	df000017 	ldw	fp,0(sp)
  8027a4:	dec00204 	addi	sp,sp,8
  8027a8:	f800283a 	ret

008027ac <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8027ac:	defffa04 	addi	sp,sp,-24
  8027b0:	dfc00515 	stw	ra,20(sp)
  8027b4:	df000415 	stw	fp,16(sp)
  8027b8:	df000404 	addi	fp,sp,16
  8027bc:	e13ffd15 	stw	r4,-12(fp)
  8027c0:	e17ffe15 	stw	r5,-8(fp)
  8027c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8027c8:	e0bffd17 	ldw	r2,-12(fp)
  8027cc:	10800017 	ldw	r2,0(r2)
  8027d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8027d4:	e0bffc17 	ldw	r2,-16(fp)
  8027d8:	10c00a04 	addi	r3,r2,40
  8027dc:	e0bffd17 	ldw	r2,-12(fp)
  8027e0:	10800217 	ldw	r2,8(r2)
  8027e4:	100f883a 	mov	r7,r2
  8027e8:	e1bfff17 	ldw	r6,-4(fp)
  8027ec:	e17ffe17 	ldw	r5,-8(fp)
  8027f0:	1809883a 	mov	r4,r3
  8027f4:	0802e780 	call	802e78 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8027f8:	e037883a 	mov	sp,fp
  8027fc:	dfc00117 	ldw	ra,4(sp)
  802800:	df000017 	ldw	fp,0(sp)
  802804:	dec00204 	addi	sp,sp,8
  802808:	f800283a 	ret

0080280c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80280c:	defffc04 	addi	sp,sp,-16
  802810:	dfc00315 	stw	ra,12(sp)
  802814:	df000215 	stw	fp,8(sp)
  802818:	df000204 	addi	fp,sp,8
  80281c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802820:	e0bfff17 	ldw	r2,-4(fp)
  802824:	10800017 	ldw	r2,0(r2)
  802828:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80282c:	e0bffe17 	ldw	r2,-8(fp)
  802830:	10c00a04 	addi	r3,r2,40
  802834:	e0bfff17 	ldw	r2,-4(fp)
  802838:	10800217 	ldw	r2,8(r2)
  80283c:	100b883a 	mov	r5,r2
  802840:	1809883a 	mov	r4,r3
  802844:	0802bd00 	call	802bd0 <altera_avalon_uart_close>
}
  802848:	e037883a 	mov	sp,fp
  80284c:	dfc00117 	ldw	ra,4(sp)
  802850:	df000017 	ldw	fp,0(sp)
  802854:	dec00204 	addi	sp,sp,8
  802858:	f800283a 	ret

0080285c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80285c:	defff804 	addi	sp,sp,-32
  802860:	dfc00715 	stw	ra,28(sp)
  802864:	df000615 	stw	fp,24(sp)
  802868:	df000604 	addi	fp,sp,24
  80286c:	e13ffd15 	stw	r4,-12(fp)
  802870:	e17ffe15 	stw	r5,-8(fp)
  802874:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  802878:	e0bffd17 	ldw	r2,-12(fp)
  80287c:	10800017 	ldw	r2,0(r2)
  802880:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  802884:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  802888:	1000041e 	bne	r2,zero,80289c <altera_avalon_uart_init+0x40>
  80288c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  802890:	1000021e 	bne	r2,zero,80289c <altera_avalon_uart_init+0x40>
  802894:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  802898:	10000226 	beq	r2,zero,8028a4 <altera_avalon_uart_init+0x48>
  80289c:	00800044 	movi	r2,1
  8028a0:	00000106 	br	8028a8 <altera_avalon_uart_init+0x4c>
  8028a4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8028a8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8028ac:	e0bffc17 	ldw	r2,-16(fp)
  8028b0:	10000f1e 	bne	r2,zero,8028f0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8028b4:	e0bffd17 	ldw	r2,-12(fp)
  8028b8:	00c32004 	movi	r3,3200
  8028bc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8028c0:	e0bffb17 	ldw	r2,-20(fp)
  8028c4:	10800304 	addi	r2,r2,12
  8028c8:	e0fffd17 	ldw	r3,-12(fp)
  8028cc:	18c00117 	ldw	r3,4(r3)
  8028d0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8028d4:	d8000015 	stw	zero,0(sp)
  8028d8:	e1fffd17 	ldw	r7,-12(fp)
  8028dc:	01802034 	movhi	r6,128
  8028e0:	318a4204 	addi	r6,r6,10504
  8028e4:	e17fff17 	ldw	r5,-4(fp)
  8028e8:	e13ffe17 	ldw	r4,-8(fp)
  8028ec:	08034a40 	call	8034a4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8028f0:	0001883a 	nop
  8028f4:	e037883a 	mov	sp,fp
  8028f8:	dfc00117 	ldw	ra,4(sp)
  8028fc:	df000017 	ldw	fp,0(sp)
  802900:	dec00204 	addi	sp,sp,8
  802904:	f800283a 	ret

00802908 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  802908:	defffa04 	addi	sp,sp,-24
  80290c:	dfc00515 	stw	ra,20(sp)
  802910:	df000415 	stw	fp,16(sp)
  802914:	df000404 	addi	fp,sp,16
  802918:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80291c:	e0bfff17 	ldw	r2,-4(fp)
  802920:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  802924:	e0bffc17 	ldw	r2,-16(fp)
  802928:	10800017 	ldw	r2,0(r2)
  80292c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  802930:	e0bffd17 	ldw	r2,-12(fp)
  802934:	10800204 	addi	r2,r2,8
  802938:	10800037 	ldwio	r2,0(r2)
  80293c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  802940:	e0bffd17 	ldw	r2,-12(fp)
  802944:	10800204 	addi	r2,r2,8
  802948:	0007883a 	mov	r3,zero
  80294c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  802950:	e0bffd17 	ldw	r2,-12(fp)
  802954:	10800204 	addi	r2,r2,8
  802958:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80295c:	e0bffe17 	ldw	r2,-8(fp)
  802960:	1080200c 	andi	r2,r2,128
  802964:	10000326 	beq	r2,zero,802974 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  802968:	e17ffe17 	ldw	r5,-8(fp)
  80296c:	e13ffc17 	ldw	r4,-16(fp)
  802970:	08029a40 	call	8029a4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  802974:	e0bffe17 	ldw	r2,-8(fp)
  802978:	1081100c 	andi	r2,r2,1088
  80297c:	10000326 	beq	r2,zero,80298c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  802980:	e17ffe17 	ldw	r5,-8(fp)
  802984:	e13ffc17 	ldw	r4,-16(fp)
  802988:	0802a880 	call	802a88 <altera_avalon_uart_txirq>
  }
  

}
  80298c:	0001883a 	nop
  802990:	e037883a 	mov	sp,fp
  802994:	dfc00117 	ldw	ra,4(sp)
  802998:	df000017 	ldw	fp,0(sp)
  80299c:	dec00204 	addi	sp,sp,8
  8029a0:	f800283a 	ret

008029a4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8029a4:	defffc04 	addi	sp,sp,-16
  8029a8:	df000315 	stw	fp,12(sp)
  8029ac:	df000304 	addi	fp,sp,12
  8029b0:	e13ffe15 	stw	r4,-8(fp)
  8029b4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8029b8:	e0bfff17 	ldw	r2,-4(fp)
  8029bc:	108000cc 	andi	r2,r2,3
  8029c0:	10002c1e 	bne	r2,zero,802a74 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8029c4:	e0bffe17 	ldw	r2,-8(fp)
  8029c8:	10800317 	ldw	r2,12(r2)
  8029cc:	e0bffe17 	ldw	r2,-8(fp)
  8029d0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8029d4:	e0bffe17 	ldw	r2,-8(fp)
  8029d8:	10800317 	ldw	r2,12(r2)
  8029dc:	10800044 	addi	r2,r2,1
  8029e0:	10800fcc 	andi	r2,r2,63
  8029e4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8029e8:	e0bffe17 	ldw	r2,-8(fp)
  8029ec:	10800317 	ldw	r2,12(r2)
  8029f0:	e0fffe17 	ldw	r3,-8(fp)
  8029f4:	18c00017 	ldw	r3,0(r3)
  8029f8:	18c00037 	ldwio	r3,0(r3)
  8029fc:	1809883a 	mov	r4,r3
  802a00:	e0fffe17 	ldw	r3,-8(fp)
  802a04:	1885883a 	add	r2,r3,r2
  802a08:	10800704 	addi	r2,r2,28
  802a0c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  802a10:	e0bffe17 	ldw	r2,-8(fp)
  802a14:	e0fffd17 	ldw	r3,-12(fp)
  802a18:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802a1c:	e0bffe17 	ldw	r2,-8(fp)
  802a20:	10800317 	ldw	r2,12(r2)
  802a24:	10800044 	addi	r2,r2,1
  802a28:	10800fcc 	andi	r2,r2,63
  802a2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  802a30:	e0bffe17 	ldw	r2,-8(fp)
  802a34:	10c00217 	ldw	r3,8(r2)
  802a38:	e0bffd17 	ldw	r2,-12(fp)
  802a3c:	18800e1e 	bne	r3,r2,802a78 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802a40:	e0bffe17 	ldw	r2,-8(fp)
  802a44:	10c00117 	ldw	r3,4(r2)
  802a48:	00bfdfc4 	movi	r2,-129
  802a4c:	1886703a 	and	r3,r3,r2
  802a50:	e0bffe17 	ldw	r2,-8(fp)
  802a54:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  802a58:	e0bffe17 	ldw	r2,-8(fp)
  802a5c:	10800017 	ldw	r2,0(r2)
  802a60:	10800304 	addi	r2,r2,12
  802a64:	e0fffe17 	ldw	r3,-8(fp)
  802a68:	18c00117 	ldw	r3,4(r3)
  802a6c:	10c00035 	stwio	r3,0(r2)
  802a70:	00000106 	br	802a78 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  802a74:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  802a78:	e037883a 	mov	sp,fp
  802a7c:	df000017 	ldw	fp,0(sp)
  802a80:	dec00104 	addi	sp,sp,4
  802a84:	f800283a 	ret

00802a88 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  802a88:	defffb04 	addi	sp,sp,-20
  802a8c:	df000415 	stw	fp,16(sp)
  802a90:	df000404 	addi	fp,sp,16
  802a94:	e13ffc15 	stw	r4,-16(fp)
  802a98:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  802a9c:	e0bffc17 	ldw	r2,-16(fp)
  802aa0:	10c00417 	ldw	r3,16(r2)
  802aa4:	e0bffc17 	ldw	r2,-16(fp)
  802aa8:	10800517 	ldw	r2,20(r2)
  802aac:	18803226 	beq	r3,r2,802b78 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  802ab0:	e0bffc17 	ldw	r2,-16(fp)
  802ab4:	10800617 	ldw	r2,24(r2)
  802ab8:	1080008c 	andi	r2,r2,2
  802abc:	10000326 	beq	r2,zero,802acc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802ac0:	e0bffd17 	ldw	r2,-12(fp)
  802ac4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  802ac8:	10001d26 	beq	r2,zero,802b40 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  802acc:	e0bffc17 	ldw	r2,-16(fp)
  802ad0:	10800417 	ldw	r2,16(r2)
  802ad4:	e0bffc17 	ldw	r2,-16(fp)
  802ad8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  802adc:	e0bffc17 	ldw	r2,-16(fp)
  802ae0:	10800017 	ldw	r2,0(r2)
  802ae4:	10800104 	addi	r2,r2,4
  802ae8:	e0fffc17 	ldw	r3,-16(fp)
  802aec:	18c00417 	ldw	r3,16(r3)
  802af0:	e13ffc17 	ldw	r4,-16(fp)
  802af4:	20c7883a 	add	r3,r4,r3
  802af8:	18c01704 	addi	r3,r3,92
  802afc:	18c00003 	ldbu	r3,0(r3)
  802b00:	18c03fcc 	andi	r3,r3,255
  802b04:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  802b08:	e0bffc17 	ldw	r2,-16(fp)
  802b0c:	10800417 	ldw	r2,16(r2)
  802b10:	10800044 	addi	r2,r2,1
  802b14:	e0fffc17 	ldw	r3,-16(fp)
  802b18:	18800415 	stw	r2,16(r3)
  802b1c:	10c00fcc 	andi	r3,r2,63
  802b20:	e0bffc17 	ldw	r2,-16(fp)
  802b24:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802b28:	e0bffc17 	ldw	r2,-16(fp)
  802b2c:	10800117 	ldw	r2,4(r2)
  802b30:	10c01014 	ori	r3,r2,64
  802b34:	e0bffc17 	ldw	r2,-16(fp)
  802b38:	10c00115 	stw	r3,4(r2)
  802b3c:	00000e06 	br	802b78 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  802b40:	e0bffc17 	ldw	r2,-16(fp)
  802b44:	10800017 	ldw	r2,0(r2)
  802b48:	10800204 	addi	r2,r2,8
  802b4c:	10800037 	ldwio	r2,0(r2)
  802b50:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802b54:	e0bffd17 	ldw	r2,-12(fp)
  802b58:	1082000c 	andi	r2,r2,2048
  802b5c:	1000061e 	bne	r2,zero,802b78 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802b60:	e0bffc17 	ldw	r2,-16(fp)
  802b64:	10c00117 	ldw	r3,4(r2)
  802b68:	00bfefc4 	movi	r2,-65
  802b6c:	1886703a 	and	r3,r3,r2
  802b70:	e0bffc17 	ldw	r2,-16(fp)
  802b74:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  802b78:	e0bffc17 	ldw	r2,-16(fp)
  802b7c:	10c00417 	ldw	r3,16(r2)
  802b80:	e0bffc17 	ldw	r2,-16(fp)
  802b84:	10800517 	ldw	r2,20(r2)
  802b88:	1880061e 	bne	r3,r2,802ba4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802b8c:	e0bffc17 	ldw	r2,-16(fp)
  802b90:	10c00117 	ldw	r3,4(r2)
  802b94:	00beefc4 	movi	r2,-1089
  802b98:	1886703a 	and	r3,r3,r2
  802b9c:	e0bffc17 	ldw	r2,-16(fp)
  802ba0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802ba4:	e0bffc17 	ldw	r2,-16(fp)
  802ba8:	10800017 	ldw	r2,0(r2)
  802bac:	10800304 	addi	r2,r2,12
  802bb0:	e0fffc17 	ldw	r3,-16(fp)
  802bb4:	18c00117 	ldw	r3,4(r3)
  802bb8:	10c00035 	stwio	r3,0(r2)
}
  802bbc:	0001883a 	nop
  802bc0:	e037883a 	mov	sp,fp
  802bc4:	df000017 	ldw	fp,0(sp)
  802bc8:	dec00104 	addi	sp,sp,4
  802bcc:	f800283a 	ret

00802bd0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  802bd0:	defffd04 	addi	sp,sp,-12
  802bd4:	df000215 	stw	fp,8(sp)
  802bd8:	df000204 	addi	fp,sp,8
  802bdc:	e13ffe15 	stw	r4,-8(fp)
  802be0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802be4:	00000506 	br	802bfc <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  802be8:	e0bfff17 	ldw	r2,-4(fp)
  802bec:	1090000c 	andi	r2,r2,16384
  802bf0:	10000226 	beq	r2,zero,802bfc <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  802bf4:	00bffd44 	movi	r2,-11
  802bf8:	00000606 	br	802c14 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802bfc:	e0bffe17 	ldw	r2,-8(fp)
  802c00:	10c00417 	ldw	r3,16(r2)
  802c04:	e0bffe17 	ldw	r2,-8(fp)
  802c08:	10800517 	ldw	r2,20(r2)
  802c0c:	18bff61e 	bne	r3,r2,802be8 <__alt_mem_onchip_mem+0xff7fabe8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  802c10:	0005883a 	mov	r2,zero
}
  802c14:	e037883a 	mov	sp,fp
  802c18:	df000017 	ldw	fp,0(sp)
  802c1c:	dec00104 	addi	sp,sp,4
  802c20:	f800283a 	ret

00802c24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802c24:	defffe04 	addi	sp,sp,-8
  802c28:	dfc00115 	stw	ra,4(sp)
  802c2c:	df000015 	stw	fp,0(sp)
  802c30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802c34:	d0a00617 	ldw	r2,-32744(gp)
  802c38:	10000326 	beq	r2,zero,802c48 <alt_get_errno+0x24>
  802c3c:	d0a00617 	ldw	r2,-32744(gp)
  802c40:	103ee83a 	callr	r2
  802c44:	00000106 	br	802c4c <alt_get_errno+0x28>
  802c48:	d0a62504 	addi	r2,gp,-26476
}
  802c4c:	e037883a 	mov	sp,fp
  802c50:	dfc00117 	ldw	ra,4(sp)
  802c54:	df000017 	ldw	fp,0(sp)
  802c58:	dec00204 	addi	sp,sp,8
  802c5c:	f800283a 	ret

00802c60 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  802c60:	defff204 	addi	sp,sp,-56
  802c64:	dfc00d15 	stw	ra,52(sp)
  802c68:	df000c15 	stw	fp,48(sp)
  802c6c:	df000c04 	addi	fp,sp,48
  802c70:	e13ffc15 	stw	r4,-16(fp)
  802c74:	e17ffd15 	stw	r5,-12(fp)
  802c78:	e1bffe15 	stw	r6,-8(fp)
  802c7c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  802c80:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  802c84:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  802c88:	e0bfff17 	ldw	r2,-4(fp)
  802c8c:	1090000c 	andi	r2,r2,16384
  802c90:	1005003a 	cmpeq	r2,r2,zero
  802c94:	10803fcc 	andi	r2,r2,255
  802c98:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  802c9c:	00001306 	br	802cec <altera_avalon_uart_read+0x8c>
    {
      count++;
  802ca0:	e0bff517 	ldw	r2,-44(fp)
  802ca4:	10800044 	addi	r2,r2,1
  802ca8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  802cac:	e0bffd17 	ldw	r2,-12(fp)
  802cb0:	10c00044 	addi	r3,r2,1
  802cb4:	e0fffd15 	stw	r3,-12(fp)
  802cb8:	e0fffc17 	ldw	r3,-16(fp)
  802cbc:	18c00217 	ldw	r3,8(r3)
  802cc0:	e13ffc17 	ldw	r4,-16(fp)
  802cc4:	20c7883a 	add	r3,r4,r3
  802cc8:	18c00704 	addi	r3,r3,28
  802ccc:	18c00003 	ldbu	r3,0(r3)
  802cd0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  802cd4:	e0bffc17 	ldw	r2,-16(fp)
  802cd8:	10800217 	ldw	r2,8(r2)
  802cdc:	10800044 	addi	r2,r2,1
  802ce0:	10c00fcc 	andi	r3,r2,63
  802ce4:	e0bffc17 	ldw	r2,-16(fp)
  802ce8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  802cec:	e0fff517 	ldw	r3,-44(fp)
  802cf0:	e0bffe17 	ldw	r2,-8(fp)
  802cf4:	1880050e 	bge	r3,r2,802d0c <altera_avalon_uart_read+0xac>
  802cf8:	e0bffc17 	ldw	r2,-16(fp)
  802cfc:	10c00217 	ldw	r3,8(r2)
  802d00:	e0bffc17 	ldw	r2,-16(fp)
  802d04:	10800317 	ldw	r2,12(r2)
  802d08:	18bfe51e 	bne	r3,r2,802ca0 <__alt_mem_onchip_mem+0xff7faca0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  802d0c:	e0bff517 	ldw	r2,-44(fp)
  802d10:	1000251e 	bne	r2,zero,802da8 <altera_avalon_uart_read+0x148>
  802d14:	e0bffc17 	ldw	r2,-16(fp)
  802d18:	10c00217 	ldw	r3,8(r2)
  802d1c:	e0bffc17 	ldw	r2,-16(fp)
  802d20:	10800317 	ldw	r2,12(r2)
  802d24:	1880201e 	bne	r3,r2,802da8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  802d28:	e0bff617 	ldw	r2,-40(fp)
  802d2c:	1000071e 	bne	r2,zero,802d4c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  802d30:	0802c240 	call	802c24 <alt_get_errno>
  802d34:	1007883a 	mov	r3,r2
  802d38:	008002c4 	movi	r2,11
  802d3c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  802d40:	00800044 	movi	r2,1
  802d44:	e0bff405 	stb	r2,-48(fp)
        break;
  802d48:	00001b06 	br	802db8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d4c:	0005303a 	rdctl	r2,status
  802d50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d54:	e0fff917 	ldw	r3,-28(fp)
  802d58:	00bfff84 	movi	r2,-2
  802d5c:	1884703a 	and	r2,r3,r2
  802d60:	1001703a 	wrctl	status,r2
  
  return context;
  802d64:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  802d68:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802d6c:	e0bffc17 	ldw	r2,-16(fp)
  802d70:	10800117 	ldw	r2,4(r2)
  802d74:	10c02014 	ori	r3,r2,128
  802d78:	e0bffc17 	ldw	r2,-16(fp)
  802d7c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802d80:	e0bffc17 	ldw	r2,-16(fp)
  802d84:	10800017 	ldw	r2,0(r2)
  802d88:	10800304 	addi	r2,r2,12
  802d8c:	e0fffc17 	ldw	r3,-16(fp)
  802d90:	18c00117 	ldw	r3,4(r3)
  802d94:	10c00035 	stwio	r3,0(r2)
  802d98:	e0bff817 	ldw	r2,-32(fp)
  802d9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802da0:	e0bffa17 	ldw	r2,-24(fp)
  802da4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  802da8:	e0bff517 	ldw	r2,-44(fp)
  802dac:	1000021e 	bne	r2,zero,802db8 <altera_avalon_uart_read+0x158>
  802db0:	e0bffe17 	ldw	r2,-8(fp)
  802db4:	103fcd1e 	bne	r2,zero,802cec <__alt_mem_onchip_mem+0xff7facec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802db8:	0005303a 	rdctl	r2,status
  802dbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802dc0:	e0fffb17 	ldw	r3,-20(fp)
  802dc4:	00bfff84 	movi	r2,-2
  802dc8:	1884703a 	and	r2,r3,r2
  802dcc:	1001703a 	wrctl	status,r2
  
  return context;
  802dd0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  802dd4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802dd8:	e0bffc17 	ldw	r2,-16(fp)
  802ddc:	10800117 	ldw	r2,4(r2)
  802de0:	10c02014 	ori	r3,r2,128
  802de4:	e0bffc17 	ldw	r2,-16(fp)
  802de8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802dec:	e0bffc17 	ldw	r2,-16(fp)
  802df0:	10800017 	ldw	r2,0(r2)
  802df4:	10800304 	addi	r2,r2,12
  802df8:	e0fffc17 	ldw	r3,-16(fp)
  802dfc:	18c00117 	ldw	r3,4(r3)
  802e00:	10c00035 	stwio	r3,0(r2)
  802e04:	e0bff817 	ldw	r2,-32(fp)
  802e08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802e0c:	e0bff717 	ldw	r2,-36(fp)
  802e10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  802e14:	e0bff403 	ldbu	r2,-48(fp)
  802e18:	10000226 	beq	r2,zero,802e24 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  802e1c:	00bffd44 	movi	r2,-11
  802e20:	00000106 	br	802e28 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  802e24:	e0bff517 	ldw	r2,-44(fp)
  }
}
  802e28:	e037883a 	mov	sp,fp
  802e2c:	dfc00117 	ldw	ra,4(sp)
  802e30:	df000017 	ldw	fp,0(sp)
  802e34:	dec00204 	addi	sp,sp,8
  802e38:	f800283a 	ret

00802e3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802e3c:	defffe04 	addi	sp,sp,-8
  802e40:	dfc00115 	stw	ra,4(sp)
  802e44:	df000015 	stw	fp,0(sp)
  802e48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802e4c:	d0a00617 	ldw	r2,-32744(gp)
  802e50:	10000326 	beq	r2,zero,802e60 <alt_get_errno+0x24>
  802e54:	d0a00617 	ldw	r2,-32744(gp)
  802e58:	103ee83a 	callr	r2
  802e5c:	00000106 	br	802e64 <alt_get_errno+0x28>
  802e60:	d0a62504 	addi	r2,gp,-26476
}
  802e64:	e037883a 	mov	sp,fp
  802e68:	dfc00117 	ldw	ra,4(sp)
  802e6c:	df000017 	ldw	fp,0(sp)
  802e70:	dec00204 	addi	sp,sp,8
  802e74:	f800283a 	ret

00802e78 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  802e78:	defff204 	addi	sp,sp,-56
  802e7c:	dfc00d15 	stw	ra,52(sp)
  802e80:	df000c15 	stw	fp,48(sp)
  802e84:	df000c04 	addi	fp,sp,48
  802e88:	e13ffc15 	stw	r4,-16(fp)
  802e8c:	e17ffd15 	stw	r5,-12(fp)
  802e90:	e1bffe15 	stw	r6,-8(fp)
  802e94:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  802e98:	e0bffe17 	ldw	r2,-8(fp)
  802e9c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  802ea0:	e0bfff17 	ldw	r2,-4(fp)
  802ea4:	1090000c 	andi	r2,r2,16384
  802ea8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802eac:	00003c06 	br	802fa0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802eb0:	e0bffc17 	ldw	r2,-16(fp)
  802eb4:	10800517 	ldw	r2,20(r2)
  802eb8:	10800044 	addi	r2,r2,1
  802ebc:	10800fcc 	andi	r2,r2,63
  802ec0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  802ec4:	e0bffc17 	ldw	r2,-16(fp)
  802ec8:	10c00417 	ldw	r3,16(r2)
  802ecc:	e0bff717 	ldw	r2,-36(fp)
  802ed0:	1880221e 	bne	r3,r2,802f5c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  802ed4:	e0bff517 	ldw	r2,-44(fp)
  802ed8:	10000526 	beq	r2,zero,802ef0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  802edc:	0802e3c0 	call	802e3c <alt_get_errno>
  802ee0:	1007883a 	mov	r3,r2
  802ee4:	008002c4 	movi	r2,11
  802ee8:	18800015 	stw	r2,0(r3)
        break;
  802eec:	00002e06 	br	802fa8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802ef0:	0005303a 	rdctl	r2,status
  802ef4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802ef8:	e0fff917 	ldw	r3,-28(fp)
  802efc:	00bfff84 	movi	r2,-2
  802f00:	1884703a 	and	r2,r3,r2
  802f04:	1001703a 	wrctl	status,r2
  
  return context;
  802f08:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  802f0c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802f10:	e0bffc17 	ldw	r2,-16(fp)
  802f14:	10800117 	ldw	r2,4(r2)
  802f18:	10c11014 	ori	r3,r2,1088
  802f1c:	e0bffc17 	ldw	r2,-16(fp)
  802f20:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802f24:	e0bffc17 	ldw	r2,-16(fp)
  802f28:	10800017 	ldw	r2,0(r2)
  802f2c:	10800304 	addi	r2,r2,12
  802f30:	e0fffc17 	ldw	r3,-16(fp)
  802f34:	18c00117 	ldw	r3,4(r3)
  802f38:	10c00035 	stwio	r3,0(r2)
  802f3c:	e0bff817 	ldw	r2,-32(fp)
  802f40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802f44:	e0bff617 	ldw	r2,-40(fp)
  802f48:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  802f4c:	e0bffc17 	ldw	r2,-16(fp)
  802f50:	10c00417 	ldw	r3,16(r2)
  802f54:	e0bff717 	ldw	r2,-36(fp)
  802f58:	18bffc26 	beq	r3,r2,802f4c <__alt_mem_onchip_mem+0xff7faf4c>
      }
    }

    count--;
  802f5c:	e0bff417 	ldw	r2,-48(fp)
  802f60:	10bfffc4 	addi	r2,r2,-1
  802f64:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  802f68:	e0bffc17 	ldw	r2,-16(fp)
  802f6c:	10c00517 	ldw	r3,20(r2)
  802f70:	e0bffd17 	ldw	r2,-12(fp)
  802f74:	11000044 	addi	r4,r2,1
  802f78:	e13ffd15 	stw	r4,-12(fp)
  802f7c:	10800003 	ldbu	r2,0(r2)
  802f80:	1009883a 	mov	r4,r2
  802f84:	e0bffc17 	ldw	r2,-16(fp)
  802f88:	10c5883a 	add	r2,r2,r3
  802f8c:	10801704 	addi	r2,r2,92
  802f90:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  802f94:	e0bffc17 	ldw	r2,-16(fp)
  802f98:	e0fff717 	ldw	r3,-36(fp)
  802f9c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802fa0:	e0bff417 	ldw	r2,-48(fp)
  802fa4:	103fc21e 	bne	r2,zero,802eb0 <__alt_mem_onchip_mem+0xff7faeb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802fa8:	0005303a 	rdctl	r2,status
  802fac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802fb0:	e0fffb17 	ldw	r3,-20(fp)
  802fb4:	00bfff84 	movi	r2,-2
  802fb8:	1884703a 	and	r2,r3,r2
  802fbc:	1001703a 	wrctl	status,r2
  
  return context;
  802fc0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  802fc4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802fc8:	e0bffc17 	ldw	r2,-16(fp)
  802fcc:	10800117 	ldw	r2,4(r2)
  802fd0:	10c11014 	ori	r3,r2,1088
  802fd4:	e0bffc17 	ldw	r2,-16(fp)
  802fd8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802fdc:	e0bffc17 	ldw	r2,-16(fp)
  802fe0:	10800017 	ldw	r2,0(r2)
  802fe4:	10800304 	addi	r2,r2,12
  802fe8:	e0fffc17 	ldw	r3,-16(fp)
  802fec:	18c00117 	ldw	r3,4(r3)
  802ff0:	10c00035 	stwio	r3,0(r2)
  802ff4:	e0bff817 	ldw	r2,-32(fp)
  802ff8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802ffc:	e0bffa17 	ldw	r2,-24(fp)
  803000:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  803004:	e0fffe17 	ldw	r3,-8(fp)
  803008:	e0bff417 	ldw	r2,-48(fp)
  80300c:	1885c83a 	sub	r2,r3,r2
}
  803010:	e037883a 	mov	sp,fp
  803014:	dfc00117 	ldw	ra,4(sp)
  803018:	df000017 	ldw	fp,0(sp)
  80301c:	dec00204 	addi	sp,sp,8
  803020:	f800283a 	ret

00803024 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  803024:	defff504 	addi	sp,sp,-44
  803028:	df000a15 	stw	fp,40(sp)
  80302c:	df000a04 	addi	fp,sp,40
  803030:	e13ffc15 	stw	r4,-16(fp)
  803034:	e17ffd15 	stw	r5,-12(fp)
  803038:	e1bffe15 	stw	r6,-8(fp)
  80303c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  803040:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803044:	d0a62217 	ldw	r2,-26488(gp)
  
  if (alt_ticks_per_second ())
  803048:	10003c26 	beq	r2,zero,80313c <alt_alarm_start+0x118>
  {
    if (alarm)
  80304c:	e0bffc17 	ldw	r2,-16(fp)
  803050:	10003826 	beq	r2,zero,803134 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  803054:	e0bffc17 	ldw	r2,-16(fp)
  803058:	e0fffe17 	ldw	r3,-8(fp)
  80305c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  803060:	e0bffc17 	ldw	r2,-16(fp)
  803064:	e0ffff17 	ldw	r3,-4(fp)
  803068:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80306c:	0005303a 	rdctl	r2,status
  803070:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803074:	e0fff917 	ldw	r3,-28(fp)
  803078:	00bfff84 	movi	r2,-2
  80307c:	1884703a 	and	r2,r3,r2
  803080:	1001703a 	wrctl	status,r2
  
  return context;
  803084:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  803088:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80308c:	d0a62317 	ldw	r2,-26484(gp)
      
      current_nticks = alt_nticks();
  803090:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  803094:	e0fffd17 	ldw	r3,-12(fp)
  803098:	e0bff617 	ldw	r2,-40(fp)
  80309c:	1885883a 	add	r2,r3,r2
  8030a0:	10c00044 	addi	r3,r2,1
  8030a4:	e0bffc17 	ldw	r2,-16(fp)
  8030a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8030ac:	e0bffc17 	ldw	r2,-16(fp)
  8030b0:	10c00217 	ldw	r3,8(r2)
  8030b4:	e0bff617 	ldw	r2,-40(fp)
  8030b8:	1880042e 	bgeu	r3,r2,8030cc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  8030bc:	e0bffc17 	ldw	r2,-16(fp)
  8030c0:	00c00044 	movi	r3,1
  8030c4:	10c00405 	stb	r3,16(r2)
  8030c8:	00000206 	br	8030d4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8030cc:	e0bffc17 	ldw	r2,-16(fp)
  8030d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8030d4:	e0bffc17 	ldw	r2,-16(fp)
  8030d8:	d0e00804 	addi	r3,gp,-32736
  8030dc:	e0fffa15 	stw	r3,-24(fp)
  8030e0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8030e4:	e0bffb17 	ldw	r2,-20(fp)
  8030e8:	e0fffa17 	ldw	r3,-24(fp)
  8030ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8030f0:	e0bffa17 	ldw	r2,-24(fp)
  8030f4:	10c00017 	ldw	r3,0(r2)
  8030f8:	e0bffb17 	ldw	r2,-20(fp)
  8030fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  803100:	e0bffa17 	ldw	r2,-24(fp)
  803104:	10800017 	ldw	r2,0(r2)
  803108:	e0fffb17 	ldw	r3,-20(fp)
  80310c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  803110:	e0bffa17 	ldw	r2,-24(fp)
  803114:	e0fffb17 	ldw	r3,-20(fp)
  803118:	10c00015 	stw	r3,0(r2)
  80311c:	e0bff817 	ldw	r2,-32(fp)
  803120:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803124:	e0bff717 	ldw	r2,-36(fp)
  803128:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80312c:	0005883a 	mov	r2,zero
  803130:	00000306 	br	803140 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  803134:	00bffa84 	movi	r2,-22
  803138:	00000106 	br	803140 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80313c:	00bfde84 	movi	r2,-134
  }
}
  803140:	e037883a 	mov	sp,fp
  803144:	df000017 	ldw	fp,0(sp)
  803148:	dec00104 	addi	sp,sp,4
  80314c:	f800283a 	ret

00803150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803150:	defffe04 	addi	sp,sp,-8
  803154:	dfc00115 	stw	ra,4(sp)
  803158:	df000015 	stw	fp,0(sp)
  80315c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803160:	d0a00617 	ldw	r2,-32744(gp)
  803164:	10000326 	beq	r2,zero,803174 <alt_get_errno+0x24>
  803168:	d0a00617 	ldw	r2,-32744(gp)
  80316c:	103ee83a 	callr	r2
  803170:	00000106 	br	803178 <alt_get_errno+0x28>
  803174:	d0a62504 	addi	r2,gp,-26476
}
  803178:	e037883a 	mov	sp,fp
  80317c:	dfc00117 	ldw	ra,4(sp)
  803180:	df000017 	ldw	fp,0(sp)
  803184:	dec00204 	addi	sp,sp,8
  803188:	f800283a 	ret

0080318c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80318c:	defffb04 	addi	sp,sp,-20
  803190:	dfc00415 	stw	ra,16(sp)
  803194:	df000315 	stw	fp,12(sp)
  803198:	df000304 	addi	fp,sp,12
  80319c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8031a0:	e0bfff17 	ldw	r2,-4(fp)
  8031a4:	10000616 	blt	r2,zero,8031c0 <close+0x34>
  8031a8:	e0bfff17 	ldw	r2,-4(fp)
  8031ac:	10c00324 	muli	r3,r2,12
  8031b0:	00802034 	movhi	r2,128
  8031b4:	1097de04 	addi	r2,r2,24440
  8031b8:	1885883a 	add	r2,r3,r2
  8031bc:	00000106 	br	8031c4 <close+0x38>
  8031c0:	0005883a 	mov	r2,zero
  8031c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  8031c8:	e0bffd17 	ldw	r2,-12(fp)
  8031cc:	10001926 	beq	r2,zero,803234 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8031d0:	e0bffd17 	ldw	r2,-12(fp)
  8031d4:	10800017 	ldw	r2,0(r2)
  8031d8:	10800417 	ldw	r2,16(r2)
  8031dc:	10000626 	beq	r2,zero,8031f8 <close+0x6c>
  8031e0:	e0bffd17 	ldw	r2,-12(fp)
  8031e4:	10800017 	ldw	r2,0(r2)
  8031e8:	10800417 	ldw	r2,16(r2)
  8031ec:	e13ffd17 	ldw	r4,-12(fp)
  8031f0:	103ee83a 	callr	r2
  8031f4:	00000106 	br	8031fc <close+0x70>
  8031f8:	0005883a 	mov	r2,zero
  8031fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  803200:	e13fff17 	ldw	r4,-4(fp)
  803204:	0803ad80 	call	803ad8 <alt_release_fd>
    if (rval < 0)
  803208:	e0bffe17 	ldw	r2,-8(fp)
  80320c:	1000070e 	bge	r2,zero,80322c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  803210:	08031500 	call	803150 <alt_get_errno>
  803214:	1007883a 	mov	r3,r2
  803218:	e0bffe17 	ldw	r2,-8(fp)
  80321c:	0085c83a 	sub	r2,zero,r2
  803220:	18800015 	stw	r2,0(r3)
      return -1;
  803224:	00bfffc4 	movi	r2,-1
  803228:	00000706 	br	803248 <close+0xbc>
    }
    return 0;
  80322c:	0005883a 	mov	r2,zero
  803230:	00000506 	br	803248 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803234:	08031500 	call	803150 <alt_get_errno>
  803238:	1007883a 	mov	r3,r2
  80323c:	00801444 	movi	r2,81
  803240:	18800015 	stw	r2,0(r3)
    return -1;
  803244:	00bfffc4 	movi	r2,-1
  }
}
  803248:	e037883a 	mov	sp,fp
  80324c:	dfc00117 	ldw	ra,4(sp)
  803250:	df000017 	ldw	fp,0(sp)
  803254:	dec00204 	addi	sp,sp,8
  803258:	f800283a 	ret

0080325c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80325c:	defffe04 	addi	sp,sp,-8
  803260:	df000115 	stw	fp,4(sp)
  803264:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  803268:	e03fff15 	stw	zero,-4(fp)
  80326c:	00000506 	br	803284 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  803270:	e0bfff17 	ldw	r2,-4(fp)
  803274:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  803278:	e0bfff17 	ldw	r2,-4(fp)
  80327c:	10800804 	addi	r2,r2,32
  803280:	e0bfff15 	stw	r2,-4(fp)
  803284:	e0bfff17 	ldw	r2,-4(fp)
  803288:	10820030 	cmpltui	r2,r2,2048
  80328c:	103ff81e 	bne	r2,zero,803270 <__alt_mem_onchip_mem+0xff7fb270>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  803290:	0001883a 	nop
  803294:	e037883a 	mov	sp,fp
  803298:	df000017 	ldw	fp,0(sp)
  80329c:	dec00104 	addi	sp,sp,4
  8032a0:	f800283a 	ret

008032a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8032a4:	defffc04 	addi	sp,sp,-16
  8032a8:	df000315 	stw	fp,12(sp)
  8032ac:	df000304 	addi	fp,sp,12
  8032b0:	e13ffd15 	stw	r4,-12(fp)
  8032b4:	e17ffe15 	stw	r5,-8(fp)
  8032b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8032bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8032c0:	e037883a 	mov	sp,fp
  8032c4:	df000017 	ldw	fp,0(sp)
  8032c8:	dec00104 	addi	sp,sp,4
  8032cc:	f800283a 	ret

008032d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8032d0:	defffe04 	addi	sp,sp,-8
  8032d4:	dfc00115 	stw	ra,4(sp)
  8032d8:	df000015 	stw	fp,0(sp)
  8032dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8032e0:	d0a00617 	ldw	r2,-32744(gp)
  8032e4:	10000326 	beq	r2,zero,8032f4 <alt_get_errno+0x24>
  8032e8:	d0a00617 	ldw	r2,-32744(gp)
  8032ec:	103ee83a 	callr	r2
  8032f0:	00000106 	br	8032f8 <alt_get_errno+0x28>
  8032f4:	d0a62504 	addi	r2,gp,-26476
}
  8032f8:	e037883a 	mov	sp,fp
  8032fc:	dfc00117 	ldw	ra,4(sp)
  803300:	df000017 	ldw	fp,0(sp)
  803304:	dec00204 	addi	sp,sp,8
  803308:	f800283a 	ret

0080330c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80330c:	defffa04 	addi	sp,sp,-24
  803310:	dfc00515 	stw	ra,20(sp)
  803314:	df000415 	stw	fp,16(sp)
  803318:	df000404 	addi	fp,sp,16
  80331c:	e13ffe15 	stw	r4,-8(fp)
  803320:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  803324:	e0bffe17 	ldw	r2,-8(fp)
  803328:	10000326 	beq	r2,zero,803338 <alt_dev_llist_insert+0x2c>
  80332c:	e0bffe17 	ldw	r2,-8(fp)
  803330:	10800217 	ldw	r2,8(r2)
  803334:	1000061e 	bne	r2,zero,803350 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  803338:	08032d00 	call	8032d0 <alt_get_errno>
  80333c:	1007883a 	mov	r3,r2
  803340:	00800584 	movi	r2,22
  803344:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  803348:	00bffa84 	movi	r2,-22
  80334c:	00001306 	br	80339c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  803350:	e0bffe17 	ldw	r2,-8(fp)
  803354:	e0ffff17 	ldw	r3,-4(fp)
  803358:	e0fffc15 	stw	r3,-16(fp)
  80335c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803360:	e0bffd17 	ldw	r2,-12(fp)
  803364:	e0fffc17 	ldw	r3,-16(fp)
  803368:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80336c:	e0bffc17 	ldw	r2,-16(fp)
  803370:	10c00017 	ldw	r3,0(r2)
  803374:	e0bffd17 	ldw	r2,-12(fp)
  803378:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80337c:	e0bffc17 	ldw	r2,-16(fp)
  803380:	10800017 	ldw	r2,0(r2)
  803384:	e0fffd17 	ldw	r3,-12(fp)
  803388:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80338c:	e0bffc17 	ldw	r2,-16(fp)
  803390:	e0fffd17 	ldw	r3,-12(fp)
  803394:	10c00015 	stw	r3,0(r2)

  return 0;  
  803398:	0005883a 	mov	r2,zero
}
  80339c:	e037883a 	mov	sp,fp
  8033a0:	dfc00117 	ldw	ra,4(sp)
  8033a4:	df000017 	ldw	fp,0(sp)
  8033a8:	dec00204 	addi	sp,sp,8
  8033ac:	f800283a 	ret

008033b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8033b0:	defffd04 	addi	sp,sp,-12
  8033b4:	dfc00215 	stw	ra,8(sp)
  8033b8:	df000115 	stw	fp,4(sp)
  8033bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8033c0:	00802034 	movhi	r2,128
  8033c4:	10929004 	addi	r2,r2,19008
  8033c8:	e0bfff15 	stw	r2,-4(fp)
  8033cc:	00000606 	br	8033e8 <_do_ctors+0x38>
        (*ctor) (); 
  8033d0:	e0bfff17 	ldw	r2,-4(fp)
  8033d4:	10800017 	ldw	r2,0(r2)
  8033d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8033dc:	e0bfff17 	ldw	r2,-4(fp)
  8033e0:	10bfff04 	addi	r2,r2,-4
  8033e4:	e0bfff15 	stw	r2,-4(fp)
  8033e8:	e0ffff17 	ldw	r3,-4(fp)
  8033ec:	00802034 	movhi	r2,128
  8033f0:	10929104 	addi	r2,r2,19012
  8033f4:	18bff62e 	bgeu	r3,r2,8033d0 <__alt_mem_onchip_mem+0xff7fb3d0>
        (*ctor) (); 
}
  8033f8:	0001883a 	nop
  8033fc:	e037883a 	mov	sp,fp
  803400:	dfc00117 	ldw	ra,4(sp)
  803404:	df000017 	ldw	fp,0(sp)
  803408:	dec00204 	addi	sp,sp,8
  80340c:	f800283a 	ret

00803410 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  803410:	defffd04 	addi	sp,sp,-12
  803414:	dfc00215 	stw	ra,8(sp)
  803418:	df000115 	stw	fp,4(sp)
  80341c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  803420:	00802034 	movhi	r2,128
  803424:	10929004 	addi	r2,r2,19008
  803428:	e0bfff15 	stw	r2,-4(fp)
  80342c:	00000606 	br	803448 <_do_dtors+0x38>
        (*dtor) (); 
  803430:	e0bfff17 	ldw	r2,-4(fp)
  803434:	10800017 	ldw	r2,0(r2)
  803438:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80343c:	e0bfff17 	ldw	r2,-4(fp)
  803440:	10bfff04 	addi	r2,r2,-4
  803444:	e0bfff15 	stw	r2,-4(fp)
  803448:	e0ffff17 	ldw	r3,-4(fp)
  80344c:	00802034 	movhi	r2,128
  803450:	10929104 	addi	r2,r2,19012
  803454:	18bff62e 	bgeu	r3,r2,803430 <__alt_mem_onchip_mem+0xff7fb430>
        (*dtor) (); 
}
  803458:	0001883a 	nop
  80345c:	e037883a 	mov	sp,fp
  803460:	dfc00117 	ldw	ra,4(sp)
  803464:	df000017 	ldw	fp,0(sp)
  803468:	dec00204 	addi	sp,sp,8
  80346c:	f800283a 	ret

00803470 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  803470:	defffe04 	addi	sp,sp,-8
  803474:	dfc00115 	stw	ra,4(sp)
  803478:	df000015 	stw	fp,0(sp)
  80347c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  803480:	01440004 	movi	r5,4096
  803484:	0009883a 	mov	r4,zero
  803488:	08040c80 	call	8040c8 <alt_icache_flush>
#endif
}
  80348c:	0001883a 	nop
  803490:	e037883a 	mov	sp,fp
  803494:	dfc00117 	ldw	ra,4(sp)
  803498:	df000017 	ldw	fp,0(sp)
  80349c:	dec00204 	addi	sp,sp,8
  8034a0:	f800283a 	ret

008034a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8034a4:	defff904 	addi	sp,sp,-28
  8034a8:	dfc00615 	stw	ra,24(sp)
  8034ac:	df000515 	stw	fp,20(sp)
  8034b0:	df000504 	addi	fp,sp,20
  8034b4:	e13ffc15 	stw	r4,-16(fp)
  8034b8:	e17ffd15 	stw	r5,-12(fp)
  8034bc:	e1bffe15 	stw	r6,-8(fp)
  8034c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8034c4:	e0800217 	ldw	r2,8(fp)
  8034c8:	d8800015 	stw	r2,0(sp)
  8034cc:	e1ffff17 	ldw	r7,-4(fp)
  8034d0:	e1bffe17 	ldw	r6,-8(fp)
  8034d4:	e17ffd17 	ldw	r5,-12(fp)
  8034d8:	e13ffc17 	ldw	r4,-16(fp)
  8034dc:	08036540 	call	803654 <alt_iic_isr_register>
}  
  8034e0:	e037883a 	mov	sp,fp
  8034e4:	dfc00117 	ldw	ra,4(sp)
  8034e8:	df000017 	ldw	fp,0(sp)
  8034ec:	dec00204 	addi	sp,sp,8
  8034f0:	f800283a 	ret

008034f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8034f4:	defff904 	addi	sp,sp,-28
  8034f8:	df000615 	stw	fp,24(sp)
  8034fc:	df000604 	addi	fp,sp,24
  803500:	e13ffe15 	stw	r4,-8(fp)
  803504:	e17fff15 	stw	r5,-4(fp)
  803508:	e0bfff17 	ldw	r2,-4(fp)
  80350c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803510:	0005303a 	rdctl	r2,status
  803514:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803518:	e0fffb17 	ldw	r3,-20(fp)
  80351c:	00bfff84 	movi	r2,-2
  803520:	1884703a 	and	r2,r3,r2
  803524:	1001703a 	wrctl	status,r2
  
  return context;
  803528:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80352c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  803530:	00c00044 	movi	r3,1
  803534:	e0bffa17 	ldw	r2,-24(fp)
  803538:	1884983a 	sll	r2,r3,r2
  80353c:	1007883a 	mov	r3,r2
  803540:	d0a62117 	ldw	r2,-26492(gp)
  803544:	1884b03a 	or	r2,r3,r2
  803548:	d0a62115 	stw	r2,-26492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80354c:	d0a62117 	ldw	r2,-26492(gp)
  803550:	100170fa 	wrctl	ienable,r2
  803554:	e0bffc17 	ldw	r2,-16(fp)
  803558:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80355c:	e0bffd17 	ldw	r2,-12(fp)
  803560:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803564:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  803568:	0001883a 	nop
}
  80356c:	e037883a 	mov	sp,fp
  803570:	df000017 	ldw	fp,0(sp)
  803574:	dec00104 	addi	sp,sp,4
  803578:	f800283a 	ret

0080357c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80357c:	defff904 	addi	sp,sp,-28
  803580:	df000615 	stw	fp,24(sp)
  803584:	df000604 	addi	fp,sp,24
  803588:	e13ffe15 	stw	r4,-8(fp)
  80358c:	e17fff15 	stw	r5,-4(fp)
  803590:	e0bfff17 	ldw	r2,-4(fp)
  803594:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803598:	0005303a 	rdctl	r2,status
  80359c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8035a0:	e0fffb17 	ldw	r3,-20(fp)
  8035a4:	00bfff84 	movi	r2,-2
  8035a8:	1884703a 	and	r2,r3,r2
  8035ac:	1001703a 	wrctl	status,r2
  
  return context;
  8035b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8035b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8035b8:	00c00044 	movi	r3,1
  8035bc:	e0bffa17 	ldw	r2,-24(fp)
  8035c0:	1884983a 	sll	r2,r3,r2
  8035c4:	0084303a 	nor	r2,zero,r2
  8035c8:	1007883a 	mov	r3,r2
  8035cc:	d0a62117 	ldw	r2,-26492(gp)
  8035d0:	1884703a 	and	r2,r3,r2
  8035d4:	d0a62115 	stw	r2,-26492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8035d8:	d0a62117 	ldw	r2,-26492(gp)
  8035dc:	100170fa 	wrctl	ienable,r2
  8035e0:	e0bffc17 	ldw	r2,-16(fp)
  8035e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8035e8:	e0bffd17 	ldw	r2,-12(fp)
  8035ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8035f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8035f4:	0001883a 	nop
}
  8035f8:	e037883a 	mov	sp,fp
  8035fc:	df000017 	ldw	fp,0(sp)
  803600:	dec00104 	addi	sp,sp,4
  803604:	f800283a 	ret

00803608 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  803608:	defffc04 	addi	sp,sp,-16
  80360c:	df000315 	stw	fp,12(sp)
  803610:	df000304 	addi	fp,sp,12
  803614:	e13ffe15 	stw	r4,-8(fp)
  803618:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80361c:	000530fa 	rdctl	r2,ienable
  803620:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  803624:	00c00044 	movi	r3,1
  803628:	e0bfff17 	ldw	r2,-4(fp)
  80362c:	1884983a 	sll	r2,r3,r2
  803630:	1007883a 	mov	r3,r2
  803634:	e0bffd17 	ldw	r2,-12(fp)
  803638:	1884703a 	and	r2,r3,r2
  80363c:	1004c03a 	cmpne	r2,r2,zero
  803640:	10803fcc 	andi	r2,r2,255
}
  803644:	e037883a 	mov	sp,fp
  803648:	df000017 	ldw	fp,0(sp)
  80364c:	dec00104 	addi	sp,sp,4
  803650:	f800283a 	ret

00803654 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803654:	defff504 	addi	sp,sp,-44
  803658:	dfc00a15 	stw	ra,40(sp)
  80365c:	df000915 	stw	fp,36(sp)
  803660:	df000904 	addi	fp,sp,36
  803664:	e13ffc15 	stw	r4,-16(fp)
  803668:	e17ffd15 	stw	r5,-12(fp)
  80366c:	e1bffe15 	stw	r6,-8(fp)
  803670:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  803674:	00bffa84 	movi	r2,-22
  803678:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80367c:	e0bffd17 	ldw	r2,-12(fp)
  803680:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803684:	e0bff817 	ldw	r2,-32(fp)
  803688:	10800808 	cmpgei	r2,r2,32
  80368c:	1000271e 	bne	r2,zero,80372c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803690:	0005303a 	rdctl	r2,status
  803694:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803698:	e0fffb17 	ldw	r3,-20(fp)
  80369c:	00bfff84 	movi	r2,-2
  8036a0:	1884703a 	and	r2,r3,r2
  8036a4:	1001703a 	wrctl	status,r2
  
  return context;
  8036a8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8036ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8036b0:	00802034 	movhi	r2,128
  8036b4:	109f6d04 	addi	r2,r2,32180
  8036b8:	e0fff817 	ldw	r3,-32(fp)
  8036bc:	180690fa 	slli	r3,r3,3
  8036c0:	10c5883a 	add	r2,r2,r3
  8036c4:	e0fffe17 	ldw	r3,-8(fp)
  8036c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  8036cc:	00802034 	movhi	r2,128
  8036d0:	109f6d04 	addi	r2,r2,32180
  8036d4:	e0fff817 	ldw	r3,-32(fp)
  8036d8:	180690fa 	slli	r3,r3,3
  8036dc:	10c5883a 	add	r2,r2,r3
  8036e0:	10800104 	addi	r2,r2,4
  8036e4:	e0ffff17 	ldw	r3,-4(fp)
  8036e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8036ec:	e0bffe17 	ldw	r2,-8(fp)
  8036f0:	10000526 	beq	r2,zero,803708 <alt_iic_isr_register+0xb4>
  8036f4:	e0bff817 	ldw	r2,-32(fp)
  8036f8:	100b883a 	mov	r5,r2
  8036fc:	e13ffc17 	ldw	r4,-16(fp)
  803700:	08034f40 	call	8034f4 <alt_ic_irq_enable>
  803704:	00000406 	br	803718 <alt_iic_isr_register+0xc4>
  803708:	e0bff817 	ldw	r2,-32(fp)
  80370c:	100b883a 	mov	r5,r2
  803710:	e13ffc17 	ldw	r4,-16(fp)
  803714:	080357c0 	call	80357c <alt_ic_irq_disable>
  803718:	e0bff715 	stw	r2,-36(fp)
  80371c:	e0bffa17 	ldw	r2,-24(fp)
  803720:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803724:	e0bff917 	ldw	r2,-28(fp)
  803728:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80372c:	e0bff717 	ldw	r2,-36(fp)
}
  803730:	e037883a 	mov	sp,fp
  803734:	dfc00117 	ldw	ra,4(sp)
  803738:	df000017 	ldw	fp,0(sp)
  80373c:	dec00204 	addi	sp,sp,8
  803740:	f800283a 	ret

00803744 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  803744:	defff904 	addi	sp,sp,-28
  803748:	dfc00615 	stw	ra,24(sp)
  80374c:	df000515 	stw	fp,20(sp)
  803750:	df000504 	addi	fp,sp,20
  803754:	e13ffc15 	stw	r4,-16(fp)
  803758:	e17ffd15 	stw	r5,-12(fp)
  80375c:	e1bffe15 	stw	r6,-8(fp)
  803760:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  803764:	e1bfff17 	ldw	r6,-4(fp)
  803768:	e17ffe17 	ldw	r5,-8(fp)
  80376c:	e13ffd17 	ldw	r4,-12(fp)
  803770:	08039840 	call	803984 <open>
  803774:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  803778:	e0bffb17 	ldw	r2,-20(fp)
  80377c:	10001c16 	blt	r2,zero,8037f0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  803780:	00802034 	movhi	r2,128
  803784:	1097de04 	addi	r2,r2,24440
  803788:	e0fffb17 	ldw	r3,-20(fp)
  80378c:	18c00324 	muli	r3,r3,12
  803790:	10c5883a 	add	r2,r2,r3
  803794:	10c00017 	ldw	r3,0(r2)
  803798:	e0bffc17 	ldw	r2,-16(fp)
  80379c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8037a0:	00802034 	movhi	r2,128
  8037a4:	1097de04 	addi	r2,r2,24440
  8037a8:	e0fffb17 	ldw	r3,-20(fp)
  8037ac:	18c00324 	muli	r3,r3,12
  8037b0:	10c5883a 	add	r2,r2,r3
  8037b4:	10800104 	addi	r2,r2,4
  8037b8:	10c00017 	ldw	r3,0(r2)
  8037bc:	e0bffc17 	ldw	r2,-16(fp)
  8037c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8037c4:	00802034 	movhi	r2,128
  8037c8:	1097de04 	addi	r2,r2,24440
  8037cc:	e0fffb17 	ldw	r3,-20(fp)
  8037d0:	18c00324 	muli	r3,r3,12
  8037d4:	10c5883a 	add	r2,r2,r3
  8037d8:	10800204 	addi	r2,r2,8
  8037dc:	10c00017 	ldw	r3,0(r2)
  8037e0:	e0bffc17 	ldw	r2,-16(fp)
  8037e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8037e8:	e13ffb17 	ldw	r4,-20(fp)
  8037ec:	0803ad80 	call	803ad8 <alt_release_fd>
  }
} 
  8037f0:	0001883a 	nop
  8037f4:	e037883a 	mov	sp,fp
  8037f8:	dfc00117 	ldw	ra,4(sp)
  8037fc:	df000017 	ldw	fp,0(sp)
  803800:	dec00204 	addi	sp,sp,8
  803804:	f800283a 	ret

00803808 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  803808:	defffb04 	addi	sp,sp,-20
  80380c:	dfc00415 	stw	ra,16(sp)
  803810:	df000315 	stw	fp,12(sp)
  803814:	df000304 	addi	fp,sp,12
  803818:	e13ffd15 	stw	r4,-12(fp)
  80381c:	e17ffe15 	stw	r5,-8(fp)
  803820:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  803824:	01c07fc4 	movi	r7,511
  803828:	01800044 	movi	r6,1
  80382c:	e17ffd17 	ldw	r5,-12(fp)
  803830:	01002034 	movhi	r4,128
  803834:	2117e104 	addi	r4,r4,24452
  803838:	08037440 	call	803744 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80383c:	01c07fc4 	movi	r7,511
  803840:	000d883a 	mov	r6,zero
  803844:	e17ffe17 	ldw	r5,-8(fp)
  803848:	01002034 	movhi	r4,128
  80384c:	2117de04 	addi	r4,r4,24440
  803850:	08037440 	call	803744 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  803854:	01c07fc4 	movi	r7,511
  803858:	01800044 	movi	r6,1
  80385c:	e17fff17 	ldw	r5,-4(fp)
  803860:	01002034 	movhi	r4,128
  803864:	2117e404 	addi	r4,r4,24464
  803868:	08037440 	call	803744 <alt_open_fd>
}  
  80386c:	0001883a 	nop
  803870:	e037883a 	mov	sp,fp
  803874:	dfc00117 	ldw	ra,4(sp)
  803878:	df000017 	ldw	fp,0(sp)
  80387c:	dec00204 	addi	sp,sp,8
  803880:	f800283a 	ret

00803884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803884:	defffe04 	addi	sp,sp,-8
  803888:	dfc00115 	stw	ra,4(sp)
  80388c:	df000015 	stw	fp,0(sp)
  803890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803894:	d0a00617 	ldw	r2,-32744(gp)
  803898:	10000326 	beq	r2,zero,8038a8 <alt_get_errno+0x24>
  80389c:	d0a00617 	ldw	r2,-32744(gp)
  8038a0:	103ee83a 	callr	r2
  8038a4:	00000106 	br	8038ac <alt_get_errno+0x28>
  8038a8:	d0a62504 	addi	r2,gp,-26476
}
  8038ac:	e037883a 	mov	sp,fp
  8038b0:	dfc00117 	ldw	ra,4(sp)
  8038b4:	df000017 	ldw	fp,0(sp)
  8038b8:	dec00204 	addi	sp,sp,8
  8038bc:	f800283a 	ret

008038c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8038c0:	defffd04 	addi	sp,sp,-12
  8038c4:	df000215 	stw	fp,8(sp)
  8038c8:	df000204 	addi	fp,sp,8
  8038cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8038d0:	e0bfff17 	ldw	r2,-4(fp)
  8038d4:	10800217 	ldw	r2,8(r2)
  8038d8:	10d00034 	orhi	r3,r2,16384
  8038dc:	e0bfff17 	ldw	r2,-4(fp)
  8038e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8038e4:	e03ffe15 	stw	zero,-8(fp)
  8038e8:	00001d06 	br	803960 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8038ec:	00802034 	movhi	r2,128
  8038f0:	1097de04 	addi	r2,r2,24440
  8038f4:	e0fffe17 	ldw	r3,-8(fp)
  8038f8:	18c00324 	muli	r3,r3,12
  8038fc:	10c5883a 	add	r2,r2,r3
  803900:	10c00017 	ldw	r3,0(r2)
  803904:	e0bfff17 	ldw	r2,-4(fp)
  803908:	10800017 	ldw	r2,0(r2)
  80390c:	1880111e 	bne	r3,r2,803954 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803910:	00802034 	movhi	r2,128
  803914:	1097de04 	addi	r2,r2,24440
  803918:	e0fffe17 	ldw	r3,-8(fp)
  80391c:	18c00324 	muli	r3,r3,12
  803920:	10c5883a 	add	r2,r2,r3
  803924:	10800204 	addi	r2,r2,8
  803928:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80392c:	1000090e 	bge	r2,zero,803954 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  803930:	e0bffe17 	ldw	r2,-8(fp)
  803934:	10c00324 	muli	r3,r2,12
  803938:	00802034 	movhi	r2,128
  80393c:	1097de04 	addi	r2,r2,24440
  803940:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803944:	e0bfff17 	ldw	r2,-4(fp)
  803948:	18800226 	beq	r3,r2,803954 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80394c:	00bffcc4 	movi	r2,-13
  803950:	00000806 	br	803974 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803954:	e0bffe17 	ldw	r2,-8(fp)
  803958:	10800044 	addi	r2,r2,1
  80395c:	e0bffe15 	stw	r2,-8(fp)
  803960:	d0a00517 	ldw	r2,-32748(gp)
  803964:	1007883a 	mov	r3,r2
  803968:	e0bffe17 	ldw	r2,-8(fp)
  80396c:	18bfdf2e 	bgeu	r3,r2,8038ec <__alt_mem_onchip_mem+0xff7fb8ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  803970:	0005883a 	mov	r2,zero
}
  803974:	e037883a 	mov	sp,fp
  803978:	df000017 	ldw	fp,0(sp)
  80397c:	dec00104 	addi	sp,sp,4
  803980:	f800283a 	ret

00803984 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  803984:	defff604 	addi	sp,sp,-40
  803988:	dfc00915 	stw	ra,36(sp)
  80398c:	df000815 	stw	fp,32(sp)
  803990:	df000804 	addi	fp,sp,32
  803994:	e13ffd15 	stw	r4,-12(fp)
  803998:	e17ffe15 	stw	r5,-8(fp)
  80399c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8039a0:	00bfffc4 	movi	r2,-1
  8039a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8039a8:	00bffb44 	movi	r2,-19
  8039ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8039b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8039b4:	d1600304 	addi	r5,gp,-32756
  8039b8:	e13ffd17 	ldw	r4,-12(fp)
  8039bc:	0803e8c0 	call	803e8c <alt_find_dev>
  8039c0:	e0bff815 	stw	r2,-32(fp)
  8039c4:	e0bff817 	ldw	r2,-32(fp)
  8039c8:	1000051e 	bne	r2,zero,8039e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8039cc:	e13ffd17 	ldw	r4,-12(fp)
  8039d0:	0803f1c0 	call	803f1c <alt_find_file>
  8039d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8039d8:	00800044 	movi	r2,1
  8039dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8039e0:	e0bff817 	ldw	r2,-32(fp)
  8039e4:	10002926 	beq	r2,zero,803a8c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8039e8:	e13ff817 	ldw	r4,-32(fp)
  8039ec:	08040240 	call	804024 <alt_get_fd>
  8039f0:	e0bff915 	stw	r2,-28(fp)
  8039f4:	e0bff917 	ldw	r2,-28(fp)
  8039f8:	1000030e 	bge	r2,zero,803a08 <open+0x84>
    {
      status = index;
  8039fc:	e0bff917 	ldw	r2,-28(fp)
  803a00:	e0bffa15 	stw	r2,-24(fp)
  803a04:	00002306 	br	803a94 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  803a08:	e0bff917 	ldw	r2,-28(fp)
  803a0c:	10c00324 	muli	r3,r2,12
  803a10:	00802034 	movhi	r2,128
  803a14:	1097de04 	addi	r2,r2,24440
  803a18:	1885883a 	add	r2,r3,r2
  803a1c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  803a20:	e0fffe17 	ldw	r3,-8(fp)
  803a24:	00900034 	movhi	r2,16384
  803a28:	10bfffc4 	addi	r2,r2,-1
  803a2c:	1886703a 	and	r3,r3,r2
  803a30:	e0bffc17 	ldw	r2,-16(fp)
  803a34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  803a38:	e0bffb17 	ldw	r2,-20(fp)
  803a3c:	1000051e 	bne	r2,zero,803a54 <open+0xd0>
  803a40:	e13ffc17 	ldw	r4,-16(fp)
  803a44:	08038c00 	call	8038c0 <alt_file_locked>
  803a48:	e0bffa15 	stw	r2,-24(fp)
  803a4c:	e0bffa17 	ldw	r2,-24(fp)
  803a50:	10001016 	blt	r2,zero,803a94 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  803a54:	e0bff817 	ldw	r2,-32(fp)
  803a58:	10800317 	ldw	r2,12(r2)
  803a5c:	10000826 	beq	r2,zero,803a80 <open+0xfc>
  803a60:	e0bff817 	ldw	r2,-32(fp)
  803a64:	10800317 	ldw	r2,12(r2)
  803a68:	e1ffff17 	ldw	r7,-4(fp)
  803a6c:	e1bffe17 	ldw	r6,-8(fp)
  803a70:	e17ffd17 	ldw	r5,-12(fp)
  803a74:	e13ffc17 	ldw	r4,-16(fp)
  803a78:	103ee83a 	callr	r2
  803a7c:	00000106 	br	803a84 <open+0x100>
  803a80:	0005883a 	mov	r2,zero
  803a84:	e0bffa15 	stw	r2,-24(fp)
  803a88:	00000206 	br	803a94 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  803a8c:	00bffb44 	movi	r2,-19
  803a90:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  803a94:	e0bffa17 	ldw	r2,-24(fp)
  803a98:	1000090e 	bge	r2,zero,803ac0 <open+0x13c>
  {
    alt_release_fd (index);  
  803a9c:	e13ff917 	ldw	r4,-28(fp)
  803aa0:	0803ad80 	call	803ad8 <alt_release_fd>
    ALT_ERRNO = -status;
  803aa4:	08038840 	call	803884 <alt_get_errno>
  803aa8:	1007883a 	mov	r3,r2
  803aac:	e0bffa17 	ldw	r2,-24(fp)
  803ab0:	0085c83a 	sub	r2,zero,r2
  803ab4:	18800015 	stw	r2,0(r3)
    return -1;
  803ab8:	00bfffc4 	movi	r2,-1
  803abc:	00000106 	br	803ac4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  803ac0:	e0bff917 	ldw	r2,-28(fp)
}
  803ac4:	e037883a 	mov	sp,fp
  803ac8:	dfc00117 	ldw	ra,4(sp)
  803acc:	df000017 	ldw	fp,0(sp)
  803ad0:	dec00204 	addi	sp,sp,8
  803ad4:	f800283a 	ret

00803ad8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803ad8:	defffe04 	addi	sp,sp,-8
  803adc:	df000115 	stw	fp,4(sp)
  803ae0:	df000104 	addi	fp,sp,4
  803ae4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803ae8:	e0bfff17 	ldw	r2,-4(fp)
  803aec:	108000d0 	cmplti	r2,r2,3
  803af0:	10000d1e 	bne	r2,zero,803b28 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803af4:	00802034 	movhi	r2,128
  803af8:	1097de04 	addi	r2,r2,24440
  803afc:	e0ffff17 	ldw	r3,-4(fp)
  803b00:	18c00324 	muli	r3,r3,12
  803b04:	10c5883a 	add	r2,r2,r3
  803b08:	10800204 	addi	r2,r2,8
  803b0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803b10:	00802034 	movhi	r2,128
  803b14:	1097de04 	addi	r2,r2,24440
  803b18:	e0ffff17 	ldw	r3,-4(fp)
  803b1c:	18c00324 	muli	r3,r3,12
  803b20:	10c5883a 	add	r2,r2,r3
  803b24:	10000015 	stw	zero,0(r2)
  }
}
  803b28:	0001883a 	nop
  803b2c:	e037883a 	mov	sp,fp
  803b30:	df000017 	ldw	fp,0(sp)
  803b34:	dec00104 	addi	sp,sp,4
  803b38:	f800283a 	ret

00803b3c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  803b3c:	defffa04 	addi	sp,sp,-24
  803b40:	df000515 	stw	fp,20(sp)
  803b44:	df000504 	addi	fp,sp,20
  803b48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803b4c:	0005303a 	rdctl	r2,status
  803b50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803b54:	e0fffc17 	ldw	r3,-16(fp)
  803b58:	00bfff84 	movi	r2,-2
  803b5c:	1884703a 	and	r2,r3,r2
  803b60:	1001703a 	wrctl	status,r2
  
  return context;
  803b64:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  803b68:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  803b6c:	e0bfff17 	ldw	r2,-4(fp)
  803b70:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  803b74:	e0bffd17 	ldw	r2,-12(fp)
  803b78:	10800017 	ldw	r2,0(r2)
  803b7c:	e0fffd17 	ldw	r3,-12(fp)
  803b80:	18c00117 	ldw	r3,4(r3)
  803b84:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  803b88:	e0bffd17 	ldw	r2,-12(fp)
  803b8c:	10800117 	ldw	r2,4(r2)
  803b90:	e0fffd17 	ldw	r3,-12(fp)
  803b94:	18c00017 	ldw	r3,0(r3)
  803b98:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  803b9c:	e0bffd17 	ldw	r2,-12(fp)
  803ba0:	e0fffd17 	ldw	r3,-12(fp)
  803ba4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  803ba8:	e0bffd17 	ldw	r2,-12(fp)
  803bac:	e0fffd17 	ldw	r3,-12(fp)
  803bb0:	10c00015 	stw	r3,0(r2)
  803bb4:	e0bffb17 	ldw	r2,-20(fp)
  803bb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803bbc:	e0bffe17 	ldw	r2,-8(fp)
  803bc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  803bc4:	0001883a 	nop
  803bc8:	e037883a 	mov	sp,fp
  803bcc:	df000017 	ldw	fp,0(sp)
  803bd0:	dec00104 	addi	sp,sp,4
  803bd4:	f800283a 	ret

00803bd8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803bd8:	defffb04 	addi	sp,sp,-20
  803bdc:	dfc00415 	stw	ra,16(sp)
  803be0:	df000315 	stw	fp,12(sp)
  803be4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  803be8:	d0a00817 	ldw	r2,-32736(gp)
  803bec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  803bf0:	d0a62317 	ldw	r2,-26484(gp)
  803bf4:	10800044 	addi	r2,r2,1
  803bf8:	d0a62315 	stw	r2,-26484(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803bfc:	00002e06 	br	803cb8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  803c00:	e0bffd17 	ldw	r2,-12(fp)
  803c04:	10800017 	ldw	r2,0(r2)
  803c08:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  803c0c:	e0bffd17 	ldw	r2,-12(fp)
  803c10:	10800403 	ldbu	r2,16(r2)
  803c14:	10803fcc 	andi	r2,r2,255
  803c18:	10000426 	beq	r2,zero,803c2c <alt_tick+0x54>
  803c1c:	d0a62317 	ldw	r2,-26484(gp)
  803c20:	1000021e 	bne	r2,zero,803c2c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  803c24:	e0bffd17 	ldw	r2,-12(fp)
  803c28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  803c2c:	e0bffd17 	ldw	r2,-12(fp)
  803c30:	10800217 	ldw	r2,8(r2)
  803c34:	d0e62317 	ldw	r3,-26484(gp)
  803c38:	18801d36 	bltu	r3,r2,803cb0 <alt_tick+0xd8>
  803c3c:	e0bffd17 	ldw	r2,-12(fp)
  803c40:	10800403 	ldbu	r2,16(r2)
  803c44:	10803fcc 	andi	r2,r2,255
  803c48:	1000191e 	bne	r2,zero,803cb0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  803c4c:	e0bffd17 	ldw	r2,-12(fp)
  803c50:	10800317 	ldw	r2,12(r2)
  803c54:	e0fffd17 	ldw	r3,-12(fp)
  803c58:	18c00517 	ldw	r3,20(r3)
  803c5c:	1809883a 	mov	r4,r3
  803c60:	103ee83a 	callr	r2
  803c64:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  803c68:	e0bfff17 	ldw	r2,-4(fp)
  803c6c:	1000031e 	bne	r2,zero,803c7c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  803c70:	e13ffd17 	ldw	r4,-12(fp)
  803c74:	0803b3c0 	call	803b3c <alt_alarm_stop>
  803c78:	00000d06 	br	803cb0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  803c7c:	e0bffd17 	ldw	r2,-12(fp)
  803c80:	10c00217 	ldw	r3,8(r2)
  803c84:	e0bfff17 	ldw	r2,-4(fp)
  803c88:	1887883a 	add	r3,r3,r2
  803c8c:	e0bffd17 	ldw	r2,-12(fp)
  803c90:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  803c94:	e0bffd17 	ldw	r2,-12(fp)
  803c98:	10c00217 	ldw	r3,8(r2)
  803c9c:	d0a62317 	ldw	r2,-26484(gp)
  803ca0:	1880032e 	bgeu	r3,r2,803cb0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  803ca4:	e0bffd17 	ldw	r2,-12(fp)
  803ca8:	00c00044 	movi	r3,1
  803cac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  803cb0:	e0bffe17 	ldw	r2,-8(fp)
  803cb4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803cb8:	e0fffd17 	ldw	r3,-12(fp)
  803cbc:	d0a00804 	addi	r2,gp,-32736
  803cc0:	18bfcf1e 	bne	r3,r2,803c00 <__alt_mem_onchip_mem+0xff7fbc00>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  803cc4:	0001883a 	nop
}
  803cc8:	0001883a 	nop
  803ccc:	e037883a 	mov	sp,fp
  803cd0:	dfc00117 	ldw	ra,4(sp)
  803cd4:	df000017 	ldw	fp,0(sp)
  803cd8:	dec00204 	addi	sp,sp,8
  803cdc:	f800283a 	ret

00803ce0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  803ce0:	defffd04 	addi	sp,sp,-12
  803ce4:	dfc00215 	stw	ra,8(sp)
  803ce8:	df000115 	stw	fp,4(sp)
  803cec:	df000104 	addi	fp,sp,4
  803cf0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  803cf4:	e13fff17 	ldw	r4,-4(fp)
  803cf8:	0803d340 	call	803d34 <alt_busy_sleep>
}
  803cfc:	e037883a 	mov	sp,fp
  803d00:	dfc00117 	ldw	ra,4(sp)
  803d04:	df000017 	ldw	fp,0(sp)
  803d08:	dec00204 	addi	sp,sp,8
  803d0c:	f800283a 	ret

00803d10 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  803d10:	deffff04 	addi	sp,sp,-4
  803d14:	df000015 	stw	fp,0(sp)
  803d18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  803d1c:	000170fa 	wrctl	ienable,zero
}
  803d20:	0001883a 	nop
  803d24:	e037883a 	mov	sp,fp
  803d28:	df000017 	ldw	fp,0(sp)
  803d2c:	dec00104 	addi	sp,sp,4
  803d30:	f800283a 	ret

00803d34 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  803d34:	defffa04 	addi	sp,sp,-24
  803d38:	dfc00515 	stw	ra,20(sp)
  803d3c:	df000415 	stw	fp,16(sp)
  803d40:	df000404 	addi	fp,sp,16
  803d44:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  803d48:	008000c4 	movi	r2,3
  803d4c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  803d50:	e0fffd17 	ldw	r3,-12(fp)
  803d54:	008003f4 	movhi	r2,15
  803d58:	10909004 	addi	r2,r2,16960
  803d5c:	1885383a 	mul	r2,r3,r2
  803d60:	100b883a 	mov	r5,r2
  803d64:	0100bef4 	movhi	r4,763
  803d68:	213c2004 	addi	r4,r4,-3968
  803d6c:	08049540 	call	804954 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  803d70:	100b883a 	mov	r5,r2
  803d74:	01200034 	movhi	r4,32768
  803d78:	213fffc4 	addi	r4,r4,-1
  803d7c:	08049540 	call	804954 <__udivsi3>
  803d80:	100b883a 	mov	r5,r2
  803d84:	e13fff17 	ldw	r4,-4(fp)
  803d88:	08049540 	call	804954 <__udivsi3>
  803d8c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  803d90:	e0bffe17 	ldw	r2,-8(fp)
  803d94:	10002a26 	beq	r2,zero,803e40 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  803d98:	e03ffc15 	stw	zero,-16(fp)
  803d9c:	00001706 	br	803dfc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  803da0:	00a00034 	movhi	r2,32768
  803da4:	10bfffc4 	addi	r2,r2,-1
  803da8:	10bfffc4 	addi	r2,r2,-1
  803dac:	103ffe1e 	bne	r2,zero,803da8 <__alt_mem_onchip_mem+0xff7fbda8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  803db0:	e0fffd17 	ldw	r3,-12(fp)
  803db4:	008003f4 	movhi	r2,15
  803db8:	10909004 	addi	r2,r2,16960
  803dbc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  803dc0:	100b883a 	mov	r5,r2
  803dc4:	0100bef4 	movhi	r4,763
  803dc8:	213c2004 	addi	r4,r4,-3968
  803dcc:	08049540 	call	804954 <__udivsi3>
  803dd0:	100b883a 	mov	r5,r2
  803dd4:	01200034 	movhi	r4,32768
  803dd8:	213fffc4 	addi	r4,r4,-1
  803ddc:	08049540 	call	804954 <__udivsi3>
  803de0:	1007883a 	mov	r3,r2
  803de4:	e0bfff17 	ldw	r2,-4(fp)
  803de8:	10c5c83a 	sub	r2,r2,r3
  803dec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  803df0:	e0bffc17 	ldw	r2,-16(fp)
  803df4:	10800044 	addi	r2,r2,1
  803df8:	e0bffc15 	stw	r2,-16(fp)
  803dfc:	e0fffc17 	ldw	r3,-16(fp)
  803e00:	e0bffe17 	ldw	r2,-8(fp)
  803e04:	18bfe616 	blt	r3,r2,803da0 <__alt_mem_onchip_mem+0xff7fbda0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803e08:	e0fffd17 	ldw	r3,-12(fp)
  803e0c:	008003f4 	movhi	r2,15
  803e10:	10909004 	addi	r2,r2,16960
  803e14:	1885383a 	mul	r2,r3,r2
  803e18:	100b883a 	mov	r5,r2
  803e1c:	0100bef4 	movhi	r4,763
  803e20:	213c2004 	addi	r4,r4,-3968
  803e24:	08049540 	call	804954 <__udivsi3>
  803e28:	1007883a 	mov	r3,r2
  803e2c:	e0bfff17 	ldw	r2,-4(fp)
  803e30:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803e34:	10bfffc4 	addi	r2,r2,-1
  803e38:	103ffe1e 	bne	r2,zero,803e34 <__alt_mem_onchip_mem+0xff7fbe34>
  803e3c:	00000d06 	br	803e74 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803e40:	e0fffd17 	ldw	r3,-12(fp)
  803e44:	008003f4 	movhi	r2,15
  803e48:	10909004 	addi	r2,r2,16960
  803e4c:	1885383a 	mul	r2,r3,r2
  803e50:	100b883a 	mov	r5,r2
  803e54:	0100bef4 	movhi	r4,763
  803e58:	213c2004 	addi	r4,r4,-3968
  803e5c:	08049540 	call	804954 <__udivsi3>
  803e60:	1007883a 	mov	r3,r2
  803e64:	e0bfff17 	ldw	r2,-4(fp)
  803e68:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803e6c:	10bfffc4 	addi	r2,r2,-1
  803e70:	00bffe16 	blt	zero,r2,803e6c <__alt_mem_onchip_mem+0xff7fbe6c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  803e74:	0005883a 	mov	r2,zero
}
  803e78:	e037883a 	mov	sp,fp
  803e7c:	dfc00117 	ldw	ra,4(sp)
  803e80:	df000017 	ldw	fp,0(sp)
  803e84:	dec00204 	addi	sp,sp,8
  803e88:	f800283a 	ret

00803e8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  803e8c:	defffa04 	addi	sp,sp,-24
  803e90:	dfc00515 	stw	ra,20(sp)
  803e94:	df000415 	stw	fp,16(sp)
  803e98:	df000404 	addi	fp,sp,16
  803e9c:	e13ffe15 	stw	r4,-8(fp)
  803ea0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  803ea4:	e0bfff17 	ldw	r2,-4(fp)
  803ea8:	10800017 	ldw	r2,0(r2)
  803eac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803eb0:	e13ffe17 	ldw	r4,-8(fp)
  803eb4:	080452c0 	call	80452c <strlen>
  803eb8:	10800044 	addi	r2,r2,1
  803ebc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803ec0:	00000d06 	br	803ef8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803ec4:	e0bffc17 	ldw	r2,-16(fp)
  803ec8:	10800217 	ldw	r2,8(r2)
  803ecc:	e0fffd17 	ldw	r3,-12(fp)
  803ed0:	180d883a 	mov	r6,r3
  803ed4:	e17ffe17 	ldw	r5,-8(fp)
  803ed8:	1009883a 	mov	r4,r2
  803edc:	08042400 	call	804240 <memcmp>
  803ee0:	1000021e 	bne	r2,zero,803eec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  803ee4:	e0bffc17 	ldw	r2,-16(fp)
  803ee8:	00000706 	br	803f08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  803eec:	e0bffc17 	ldw	r2,-16(fp)
  803ef0:	10800017 	ldw	r2,0(r2)
  803ef4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803ef8:	e0fffc17 	ldw	r3,-16(fp)
  803efc:	e0bfff17 	ldw	r2,-4(fp)
  803f00:	18bff01e 	bne	r3,r2,803ec4 <__alt_mem_onchip_mem+0xff7fbec4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  803f04:	0005883a 	mov	r2,zero
}
  803f08:	e037883a 	mov	sp,fp
  803f0c:	dfc00117 	ldw	ra,4(sp)
  803f10:	df000017 	ldw	fp,0(sp)
  803f14:	dec00204 	addi	sp,sp,8
  803f18:	f800283a 	ret

00803f1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  803f1c:	defffb04 	addi	sp,sp,-20
  803f20:	dfc00415 	stw	ra,16(sp)
  803f24:	df000315 	stw	fp,12(sp)
  803f28:	df000304 	addi	fp,sp,12
  803f2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803f30:	d0a00117 	ldw	r2,-32764(gp)
  803f34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803f38:	00003106 	br	804000 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  803f3c:	e0bffd17 	ldw	r2,-12(fp)
  803f40:	10800217 	ldw	r2,8(r2)
  803f44:	1009883a 	mov	r4,r2
  803f48:	080452c0 	call	80452c <strlen>
  803f4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  803f50:	e0bffd17 	ldw	r2,-12(fp)
  803f54:	10c00217 	ldw	r3,8(r2)
  803f58:	e0bffe17 	ldw	r2,-8(fp)
  803f5c:	10bfffc4 	addi	r2,r2,-1
  803f60:	1885883a 	add	r2,r3,r2
  803f64:	10800003 	ldbu	r2,0(r2)
  803f68:	10803fcc 	andi	r2,r2,255
  803f6c:	1080201c 	xori	r2,r2,128
  803f70:	10bfe004 	addi	r2,r2,-128
  803f74:	10800bd8 	cmpnei	r2,r2,47
  803f78:	1000031e 	bne	r2,zero,803f88 <alt_find_file+0x6c>
    {
      len -= 1;
  803f7c:	e0bffe17 	ldw	r2,-8(fp)
  803f80:	10bfffc4 	addi	r2,r2,-1
  803f84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803f88:	e0bffe17 	ldw	r2,-8(fp)
  803f8c:	e0ffff17 	ldw	r3,-4(fp)
  803f90:	1885883a 	add	r2,r3,r2
  803f94:	10800003 	ldbu	r2,0(r2)
  803f98:	10803fcc 	andi	r2,r2,255
  803f9c:	1080201c 	xori	r2,r2,128
  803fa0:	10bfe004 	addi	r2,r2,-128
  803fa4:	10800be0 	cmpeqi	r2,r2,47
  803fa8:	1000081e 	bne	r2,zero,803fcc <alt_find_file+0xb0>
  803fac:	e0bffe17 	ldw	r2,-8(fp)
  803fb0:	e0ffff17 	ldw	r3,-4(fp)
  803fb4:	1885883a 	add	r2,r3,r2
  803fb8:	10800003 	ldbu	r2,0(r2)
  803fbc:	10803fcc 	andi	r2,r2,255
  803fc0:	1080201c 	xori	r2,r2,128
  803fc4:	10bfe004 	addi	r2,r2,-128
  803fc8:	10000a1e 	bne	r2,zero,803ff4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  803fcc:	e0bffd17 	ldw	r2,-12(fp)
  803fd0:	10800217 	ldw	r2,8(r2)
  803fd4:	e0fffe17 	ldw	r3,-8(fp)
  803fd8:	180d883a 	mov	r6,r3
  803fdc:	e17fff17 	ldw	r5,-4(fp)
  803fe0:	1009883a 	mov	r4,r2
  803fe4:	08042400 	call	804240 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803fe8:	1000021e 	bne	r2,zero,803ff4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  803fec:	e0bffd17 	ldw	r2,-12(fp)
  803ff0:	00000706 	br	804010 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  803ff4:	e0bffd17 	ldw	r2,-12(fp)
  803ff8:	10800017 	ldw	r2,0(r2)
  803ffc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  804000:	e0fffd17 	ldw	r3,-12(fp)
  804004:	d0a00104 	addi	r2,gp,-32764
  804008:	18bfcc1e 	bne	r3,r2,803f3c <__alt_mem_onchip_mem+0xff7fbf3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80400c:	0005883a 	mov	r2,zero
}
  804010:	e037883a 	mov	sp,fp
  804014:	dfc00117 	ldw	ra,4(sp)
  804018:	df000017 	ldw	fp,0(sp)
  80401c:	dec00204 	addi	sp,sp,8
  804020:	f800283a 	ret

00804024 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  804024:	defffc04 	addi	sp,sp,-16
  804028:	df000315 	stw	fp,12(sp)
  80402c:	df000304 	addi	fp,sp,12
  804030:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  804034:	00bffa04 	movi	r2,-24
  804038:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80403c:	e03ffd15 	stw	zero,-12(fp)
  804040:	00001906 	br	8040a8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  804044:	00802034 	movhi	r2,128
  804048:	1097de04 	addi	r2,r2,24440
  80404c:	e0fffd17 	ldw	r3,-12(fp)
  804050:	18c00324 	muli	r3,r3,12
  804054:	10c5883a 	add	r2,r2,r3
  804058:	10800017 	ldw	r2,0(r2)
  80405c:	10000f1e 	bne	r2,zero,80409c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  804060:	00802034 	movhi	r2,128
  804064:	1097de04 	addi	r2,r2,24440
  804068:	e0fffd17 	ldw	r3,-12(fp)
  80406c:	18c00324 	muli	r3,r3,12
  804070:	10c5883a 	add	r2,r2,r3
  804074:	e0ffff17 	ldw	r3,-4(fp)
  804078:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80407c:	d0e00517 	ldw	r3,-32748(gp)
  804080:	e0bffd17 	ldw	r2,-12(fp)
  804084:	1880020e 	bge	r3,r2,804090 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  804088:	e0bffd17 	ldw	r2,-12(fp)
  80408c:	d0a00515 	stw	r2,-32748(gp)
      }
      rc = i;
  804090:	e0bffd17 	ldw	r2,-12(fp)
  804094:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  804098:	00000606 	br	8040b4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80409c:	e0bffd17 	ldw	r2,-12(fp)
  8040a0:	10800044 	addi	r2,r2,1
  8040a4:	e0bffd15 	stw	r2,-12(fp)
  8040a8:	e0bffd17 	ldw	r2,-12(fp)
  8040ac:	10800810 	cmplti	r2,r2,32
  8040b0:	103fe41e 	bne	r2,zero,804044 <__alt_mem_onchip_mem+0xff7fc044>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8040b4:	e0bffe17 	ldw	r2,-8(fp)
}
  8040b8:	e037883a 	mov	sp,fp
  8040bc:	df000017 	ldw	fp,0(sp)
  8040c0:	dec00104 	addi	sp,sp,4
  8040c4:	f800283a 	ret

008040c8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8040c8:	defffb04 	addi	sp,sp,-20
  8040cc:	df000415 	stw	fp,16(sp)
  8040d0:	df000404 	addi	fp,sp,16
  8040d4:	e13ffe15 	stw	r4,-8(fp)
  8040d8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8040dc:	e0bfff17 	ldw	r2,-4(fp)
  8040e0:	10840070 	cmpltui	r2,r2,4097
  8040e4:	1000021e 	bne	r2,zero,8040f0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8040e8:	00840004 	movi	r2,4096
  8040ec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8040f0:	e0fffe17 	ldw	r3,-8(fp)
  8040f4:	e0bfff17 	ldw	r2,-4(fp)
  8040f8:	1885883a 	add	r2,r3,r2
  8040fc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  804100:	e0bffe17 	ldw	r2,-8(fp)
  804104:	e0bffc15 	stw	r2,-16(fp)
  804108:	00000506 	br	804120 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80410c:	e0bffc17 	ldw	r2,-16(fp)
  804110:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  804114:	e0bffc17 	ldw	r2,-16(fp)
  804118:	10800804 	addi	r2,r2,32
  80411c:	e0bffc15 	stw	r2,-16(fp)
  804120:	e0fffc17 	ldw	r3,-16(fp)
  804124:	e0bffd17 	ldw	r2,-12(fp)
  804128:	18bff836 	bltu	r3,r2,80410c <__alt_mem_onchip_mem+0xff7fc10c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80412c:	e0bffe17 	ldw	r2,-8(fp)
  804130:	108007cc 	andi	r2,r2,31
  804134:	10000226 	beq	r2,zero,804140 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  804138:	e0bffc17 	ldw	r2,-16(fp)
  80413c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  804140:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  804144:	0001883a 	nop
  804148:	e037883a 	mov	sp,fp
  80414c:	df000017 	ldw	fp,0(sp)
  804150:	dec00104 	addi	sp,sp,4
  804154:	f800283a 	ret

00804158 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  804158:	defffe04 	addi	sp,sp,-8
  80415c:	df000115 	stw	fp,4(sp)
  804160:	df000104 	addi	fp,sp,4
  804164:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  804168:	e0bfff17 	ldw	r2,-4(fp)
  80416c:	10bffe84 	addi	r2,r2,-6
  804170:	10c00428 	cmpgeui	r3,r2,16
  804174:	18001a1e 	bne	r3,zero,8041e0 <alt_exception_cause_generated_bad_addr+0x88>
  804178:	100690ba 	slli	r3,r2,2
  80417c:	00802034 	movhi	r2,128
  804180:	10906404 	addi	r2,r2,16784
  804184:	1885883a 	add	r2,r3,r2
  804188:	10800017 	ldw	r2,0(r2)
  80418c:	1000683a 	jmp	r2
  804190:	008041d0 	cmplti	r2,zero,263
  804194:	008041d0 	cmplti	r2,zero,263
  804198:	008041e0 	cmpeqi	r2,zero,263
  80419c:	008041e0 	cmpeqi	r2,zero,263
  8041a0:	008041e0 	cmpeqi	r2,zero,263
  8041a4:	008041d0 	cmplti	r2,zero,263
  8041a8:	008041d8 	cmpnei	r2,zero,263
  8041ac:	008041e0 	cmpeqi	r2,zero,263
  8041b0:	008041d0 	cmplti	r2,zero,263
  8041b4:	008041d0 	cmplti	r2,zero,263
  8041b8:	008041e0 	cmpeqi	r2,zero,263
  8041bc:	008041d0 	cmplti	r2,zero,263
  8041c0:	008041d8 	cmpnei	r2,zero,263
  8041c4:	008041e0 	cmpeqi	r2,zero,263
  8041c8:	008041e0 	cmpeqi	r2,zero,263
  8041cc:	008041d0 	cmplti	r2,zero,263
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8041d0:	00800044 	movi	r2,1
  8041d4:	00000306 	br	8041e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8041d8:	0005883a 	mov	r2,zero
  8041dc:	00000106 	br	8041e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8041e0:	0005883a 	mov	r2,zero
  }
}
  8041e4:	e037883a 	mov	sp,fp
  8041e8:	df000017 	ldw	fp,0(sp)
  8041ec:	dec00104 	addi	sp,sp,4
  8041f0:	f800283a 	ret

008041f4 <atexit>:
  8041f4:	200b883a 	mov	r5,r4
  8041f8:	000f883a 	mov	r7,zero
  8041fc:	000d883a 	mov	r6,zero
  804200:	0009883a 	mov	r4,zero
  804204:	08045c41 	jmpi	8045c4 <__register_exitproc>

00804208 <exit>:
  804208:	defffe04 	addi	sp,sp,-8
  80420c:	000b883a 	mov	r5,zero
  804210:	dc000015 	stw	r16,0(sp)
  804214:	dfc00115 	stw	ra,4(sp)
  804218:	2021883a 	mov	r16,r4
  80421c:	08046dc0 	call	8046dc <__call_exitprocs>
  804220:	00802034 	movhi	r2,128
  804224:	10995204 	addi	r2,r2,25928
  804228:	11000017 	ldw	r4,0(r2)
  80422c:	20800f17 	ldw	r2,60(r4)
  804230:	10000126 	beq	r2,zero,804238 <exit+0x30>
  804234:	103ee83a 	callr	r2
  804238:	8009883a 	mov	r4,r16
  80423c:	0804a100 	call	804a10 <_exit>

00804240 <memcmp>:
  804240:	01c000c4 	movi	r7,3
  804244:	3980192e 	bgeu	r7,r6,8042ac <memcmp+0x6c>
  804248:	2144b03a 	or	r2,r4,r5
  80424c:	11c4703a 	and	r2,r2,r7
  804250:	10000f26 	beq	r2,zero,804290 <memcmp+0x50>
  804254:	20800003 	ldbu	r2,0(r4)
  804258:	28c00003 	ldbu	r3,0(r5)
  80425c:	10c0151e 	bne	r2,r3,8042b4 <memcmp+0x74>
  804260:	31bfff84 	addi	r6,r6,-2
  804264:	01ffffc4 	movi	r7,-1
  804268:	00000406 	br	80427c <memcmp+0x3c>
  80426c:	20800003 	ldbu	r2,0(r4)
  804270:	28c00003 	ldbu	r3,0(r5)
  804274:	31bfffc4 	addi	r6,r6,-1
  804278:	10c00e1e 	bne	r2,r3,8042b4 <memcmp+0x74>
  80427c:	21000044 	addi	r4,r4,1
  804280:	29400044 	addi	r5,r5,1
  804284:	31fff91e 	bne	r6,r7,80426c <__alt_mem_onchip_mem+0xff7fc26c>
  804288:	0005883a 	mov	r2,zero
  80428c:	f800283a 	ret
  804290:	20c00017 	ldw	r3,0(r4)
  804294:	28800017 	ldw	r2,0(r5)
  804298:	18bfee1e 	bne	r3,r2,804254 <__alt_mem_onchip_mem+0xff7fc254>
  80429c:	31bfff04 	addi	r6,r6,-4
  8042a0:	21000104 	addi	r4,r4,4
  8042a4:	29400104 	addi	r5,r5,4
  8042a8:	39bff936 	bltu	r7,r6,804290 <__alt_mem_onchip_mem+0xff7fc290>
  8042ac:	303fe91e 	bne	r6,zero,804254 <__alt_mem_onchip_mem+0xff7fc254>
  8042b0:	003ff506 	br	804288 <__alt_mem_onchip_mem+0xff7fc288>
  8042b4:	10c5c83a 	sub	r2,r2,r3
  8042b8:	f800283a 	ret

008042bc <memcpy>:
  8042bc:	defffd04 	addi	sp,sp,-12
  8042c0:	dfc00215 	stw	ra,8(sp)
  8042c4:	dc400115 	stw	r17,4(sp)
  8042c8:	dc000015 	stw	r16,0(sp)
  8042cc:	00c003c4 	movi	r3,15
  8042d0:	2005883a 	mov	r2,r4
  8042d4:	1980452e 	bgeu	r3,r6,8043ec <memcpy+0x130>
  8042d8:	2906b03a 	or	r3,r5,r4
  8042dc:	18c000cc 	andi	r3,r3,3
  8042e0:	1800441e 	bne	r3,zero,8043f4 <memcpy+0x138>
  8042e4:	347ffc04 	addi	r17,r6,-16
  8042e8:	8822d13a 	srli	r17,r17,4
  8042ec:	28c00104 	addi	r3,r5,4
  8042f0:	23400104 	addi	r13,r4,4
  8042f4:	8820913a 	slli	r16,r17,4
  8042f8:	2b000204 	addi	r12,r5,8
  8042fc:	22c00204 	addi	r11,r4,8
  804300:	84000504 	addi	r16,r16,20
  804304:	2a800304 	addi	r10,r5,12
  804308:	22400304 	addi	r9,r4,12
  80430c:	2c21883a 	add	r16,r5,r16
  804310:	2811883a 	mov	r8,r5
  804314:	200f883a 	mov	r7,r4
  804318:	41000017 	ldw	r4,0(r8)
  80431c:	1fc00017 	ldw	ra,0(r3)
  804320:	63c00017 	ldw	r15,0(r12)
  804324:	39000015 	stw	r4,0(r7)
  804328:	53800017 	ldw	r14,0(r10)
  80432c:	6fc00015 	stw	ra,0(r13)
  804330:	5bc00015 	stw	r15,0(r11)
  804334:	4b800015 	stw	r14,0(r9)
  804338:	18c00404 	addi	r3,r3,16
  80433c:	39c00404 	addi	r7,r7,16
  804340:	42000404 	addi	r8,r8,16
  804344:	6b400404 	addi	r13,r13,16
  804348:	63000404 	addi	r12,r12,16
  80434c:	5ac00404 	addi	r11,r11,16
  804350:	52800404 	addi	r10,r10,16
  804354:	4a400404 	addi	r9,r9,16
  804358:	1c3fef1e 	bne	r3,r16,804318 <__alt_mem_onchip_mem+0xff7fc318>
  80435c:	89c00044 	addi	r7,r17,1
  804360:	380e913a 	slli	r7,r7,4
  804364:	310003cc 	andi	r4,r6,15
  804368:	02c000c4 	movi	r11,3
  80436c:	11c7883a 	add	r3,r2,r7
  804370:	29cb883a 	add	r5,r5,r7
  804374:	5900212e 	bgeu	r11,r4,8043fc <memcpy+0x140>
  804378:	1813883a 	mov	r9,r3
  80437c:	2811883a 	mov	r8,r5
  804380:	200f883a 	mov	r7,r4
  804384:	42800017 	ldw	r10,0(r8)
  804388:	4a400104 	addi	r9,r9,4
  80438c:	39ffff04 	addi	r7,r7,-4
  804390:	4abfff15 	stw	r10,-4(r9)
  804394:	42000104 	addi	r8,r8,4
  804398:	59fffa36 	bltu	r11,r7,804384 <__alt_mem_onchip_mem+0xff7fc384>
  80439c:	213fff04 	addi	r4,r4,-4
  8043a0:	2008d0ba 	srli	r4,r4,2
  8043a4:	318000cc 	andi	r6,r6,3
  8043a8:	21000044 	addi	r4,r4,1
  8043ac:	2109883a 	add	r4,r4,r4
  8043b0:	2109883a 	add	r4,r4,r4
  8043b4:	1907883a 	add	r3,r3,r4
  8043b8:	290b883a 	add	r5,r5,r4
  8043bc:	30000626 	beq	r6,zero,8043d8 <memcpy+0x11c>
  8043c0:	198d883a 	add	r6,r3,r6
  8043c4:	29c00003 	ldbu	r7,0(r5)
  8043c8:	18c00044 	addi	r3,r3,1
  8043cc:	29400044 	addi	r5,r5,1
  8043d0:	19ffffc5 	stb	r7,-1(r3)
  8043d4:	19bffb1e 	bne	r3,r6,8043c4 <__alt_mem_onchip_mem+0xff7fc3c4>
  8043d8:	dfc00217 	ldw	ra,8(sp)
  8043dc:	dc400117 	ldw	r17,4(sp)
  8043e0:	dc000017 	ldw	r16,0(sp)
  8043e4:	dec00304 	addi	sp,sp,12
  8043e8:	f800283a 	ret
  8043ec:	2007883a 	mov	r3,r4
  8043f0:	003ff206 	br	8043bc <__alt_mem_onchip_mem+0xff7fc3bc>
  8043f4:	2007883a 	mov	r3,r4
  8043f8:	003ff106 	br	8043c0 <__alt_mem_onchip_mem+0xff7fc3c0>
  8043fc:	200d883a 	mov	r6,r4
  804400:	003fee06 	br	8043bc <__alt_mem_onchip_mem+0xff7fc3bc>

00804404 <memset>:
  804404:	20c000cc 	andi	r3,r4,3
  804408:	2005883a 	mov	r2,r4
  80440c:	18004426 	beq	r3,zero,804520 <memset+0x11c>
  804410:	31ffffc4 	addi	r7,r6,-1
  804414:	30004026 	beq	r6,zero,804518 <memset+0x114>
  804418:	2813883a 	mov	r9,r5
  80441c:	200d883a 	mov	r6,r4
  804420:	2007883a 	mov	r3,r4
  804424:	00000406 	br	804438 <memset+0x34>
  804428:	3a3fffc4 	addi	r8,r7,-1
  80442c:	31800044 	addi	r6,r6,1
  804430:	38003926 	beq	r7,zero,804518 <memset+0x114>
  804434:	400f883a 	mov	r7,r8
  804438:	18c00044 	addi	r3,r3,1
  80443c:	32400005 	stb	r9,0(r6)
  804440:	1a0000cc 	andi	r8,r3,3
  804444:	403ff81e 	bne	r8,zero,804428 <__alt_mem_onchip_mem+0xff7fc428>
  804448:	010000c4 	movi	r4,3
  80444c:	21c02d2e 	bgeu	r4,r7,804504 <memset+0x100>
  804450:	29003fcc 	andi	r4,r5,255
  804454:	200c923a 	slli	r6,r4,8
  804458:	3108b03a 	or	r4,r6,r4
  80445c:	200c943a 	slli	r6,r4,16
  804460:	218cb03a 	or	r6,r4,r6
  804464:	010003c4 	movi	r4,15
  804468:	21c0182e 	bgeu	r4,r7,8044cc <memset+0xc8>
  80446c:	3b3ffc04 	addi	r12,r7,-16
  804470:	6018d13a 	srli	r12,r12,4
  804474:	1a000104 	addi	r8,r3,4
  804478:	1ac00204 	addi	r11,r3,8
  80447c:	6008913a 	slli	r4,r12,4
  804480:	1a800304 	addi	r10,r3,12
  804484:	1813883a 	mov	r9,r3
  804488:	21000504 	addi	r4,r4,20
  80448c:	1909883a 	add	r4,r3,r4
  804490:	49800015 	stw	r6,0(r9)
  804494:	41800015 	stw	r6,0(r8)
  804498:	59800015 	stw	r6,0(r11)
  80449c:	51800015 	stw	r6,0(r10)
  8044a0:	42000404 	addi	r8,r8,16
  8044a4:	4a400404 	addi	r9,r9,16
  8044a8:	5ac00404 	addi	r11,r11,16
  8044ac:	52800404 	addi	r10,r10,16
  8044b0:	413ff71e 	bne	r8,r4,804490 <__alt_mem_onchip_mem+0xff7fc490>
  8044b4:	63000044 	addi	r12,r12,1
  8044b8:	6018913a 	slli	r12,r12,4
  8044bc:	39c003cc 	andi	r7,r7,15
  8044c0:	010000c4 	movi	r4,3
  8044c4:	1b07883a 	add	r3,r3,r12
  8044c8:	21c00e2e 	bgeu	r4,r7,804504 <memset+0x100>
  8044cc:	1813883a 	mov	r9,r3
  8044d0:	3811883a 	mov	r8,r7
  8044d4:	010000c4 	movi	r4,3
  8044d8:	49800015 	stw	r6,0(r9)
  8044dc:	423fff04 	addi	r8,r8,-4
  8044e0:	4a400104 	addi	r9,r9,4
  8044e4:	223ffc36 	bltu	r4,r8,8044d8 <__alt_mem_onchip_mem+0xff7fc4d8>
  8044e8:	393fff04 	addi	r4,r7,-4
  8044ec:	2008d0ba 	srli	r4,r4,2
  8044f0:	39c000cc 	andi	r7,r7,3
  8044f4:	21000044 	addi	r4,r4,1
  8044f8:	2109883a 	add	r4,r4,r4
  8044fc:	2109883a 	add	r4,r4,r4
  804500:	1907883a 	add	r3,r3,r4
  804504:	38000526 	beq	r7,zero,80451c <memset+0x118>
  804508:	19cf883a 	add	r7,r3,r7
  80450c:	19400005 	stb	r5,0(r3)
  804510:	18c00044 	addi	r3,r3,1
  804514:	38fffd1e 	bne	r7,r3,80450c <__alt_mem_onchip_mem+0xff7fc50c>
  804518:	f800283a 	ret
  80451c:	f800283a 	ret
  804520:	2007883a 	mov	r3,r4
  804524:	300f883a 	mov	r7,r6
  804528:	003fc706 	br	804448 <__alt_mem_onchip_mem+0xff7fc448>

0080452c <strlen>:
  80452c:	208000cc 	andi	r2,r4,3
  804530:	10002026 	beq	r2,zero,8045b4 <strlen+0x88>
  804534:	20800007 	ldb	r2,0(r4)
  804538:	10002026 	beq	r2,zero,8045bc <strlen+0x90>
  80453c:	2005883a 	mov	r2,r4
  804540:	00000206 	br	80454c <strlen+0x20>
  804544:	10c00007 	ldb	r3,0(r2)
  804548:	18001826 	beq	r3,zero,8045ac <strlen+0x80>
  80454c:	10800044 	addi	r2,r2,1
  804550:	10c000cc 	andi	r3,r2,3
  804554:	183ffb1e 	bne	r3,zero,804544 <__alt_mem_onchip_mem+0xff7fc544>
  804558:	10c00017 	ldw	r3,0(r2)
  80455c:	01ffbff4 	movhi	r7,65279
  804560:	39ffbfc4 	addi	r7,r7,-257
  804564:	00ca303a 	nor	r5,zero,r3
  804568:	01a02074 	movhi	r6,32897
  80456c:	19c7883a 	add	r3,r3,r7
  804570:	31a02004 	addi	r6,r6,-32640
  804574:	1946703a 	and	r3,r3,r5
  804578:	1986703a 	and	r3,r3,r6
  80457c:	1800091e 	bne	r3,zero,8045a4 <strlen+0x78>
  804580:	10800104 	addi	r2,r2,4
  804584:	10c00017 	ldw	r3,0(r2)
  804588:	19cb883a 	add	r5,r3,r7
  80458c:	00c6303a 	nor	r3,zero,r3
  804590:	28c6703a 	and	r3,r5,r3
  804594:	1986703a 	and	r3,r3,r6
  804598:	183ff926 	beq	r3,zero,804580 <__alt_mem_onchip_mem+0xff7fc580>
  80459c:	00000106 	br	8045a4 <strlen+0x78>
  8045a0:	10800044 	addi	r2,r2,1
  8045a4:	10c00007 	ldb	r3,0(r2)
  8045a8:	183ffd1e 	bne	r3,zero,8045a0 <__alt_mem_onchip_mem+0xff7fc5a0>
  8045ac:	1105c83a 	sub	r2,r2,r4
  8045b0:	f800283a 	ret
  8045b4:	2005883a 	mov	r2,r4
  8045b8:	003fe706 	br	804558 <__alt_mem_onchip_mem+0xff7fc558>
  8045bc:	0005883a 	mov	r2,zero
  8045c0:	f800283a 	ret

008045c4 <__register_exitproc>:
  8045c4:	defffa04 	addi	sp,sp,-24
  8045c8:	dc000315 	stw	r16,12(sp)
  8045cc:	04002034 	movhi	r16,128
  8045d0:	84195204 	addi	r16,r16,25928
  8045d4:	80c00017 	ldw	r3,0(r16)
  8045d8:	dc400415 	stw	r17,16(sp)
  8045dc:	dfc00515 	stw	ra,20(sp)
  8045e0:	18805217 	ldw	r2,328(r3)
  8045e4:	2023883a 	mov	r17,r4
  8045e8:	10003726 	beq	r2,zero,8046c8 <__register_exitproc+0x104>
  8045ec:	10c00117 	ldw	r3,4(r2)
  8045f0:	010007c4 	movi	r4,31
  8045f4:	20c00e16 	blt	r4,r3,804630 <__register_exitproc+0x6c>
  8045f8:	1a000044 	addi	r8,r3,1
  8045fc:	8800221e 	bne	r17,zero,804688 <__register_exitproc+0xc4>
  804600:	18c00084 	addi	r3,r3,2
  804604:	18c7883a 	add	r3,r3,r3
  804608:	18c7883a 	add	r3,r3,r3
  80460c:	12000115 	stw	r8,4(r2)
  804610:	10c7883a 	add	r3,r2,r3
  804614:	19400015 	stw	r5,0(r3)
  804618:	0005883a 	mov	r2,zero
  80461c:	dfc00517 	ldw	ra,20(sp)
  804620:	dc400417 	ldw	r17,16(sp)
  804624:	dc000317 	ldw	r16,12(sp)
  804628:	dec00604 	addi	sp,sp,24
  80462c:	f800283a 	ret
  804630:	00800034 	movhi	r2,0
  804634:	10800004 	addi	r2,r2,0
  804638:	10002626 	beq	r2,zero,8046d4 <__register_exitproc+0x110>
  80463c:	01006404 	movi	r4,400
  804640:	d9400015 	stw	r5,0(sp)
  804644:	d9800115 	stw	r6,4(sp)
  804648:	d9c00215 	stw	r7,8(sp)
  80464c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  804650:	d9400017 	ldw	r5,0(sp)
  804654:	d9800117 	ldw	r6,4(sp)
  804658:	d9c00217 	ldw	r7,8(sp)
  80465c:	10001d26 	beq	r2,zero,8046d4 <__register_exitproc+0x110>
  804660:	81000017 	ldw	r4,0(r16)
  804664:	10000115 	stw	zero,4(r2)
  804668:	02000044 	movi	r8,1
  80466c:	22405217 	ldw	r9,328(r4)
  804670:	0007883a 	mov	r3,zero
  804674:	12400015 	stw	r9,0(r2)
  804678:	20805215 	stw	r2,328(r4)
  80467c:	10006215 	stw	zero,392(r2)
  804680:	10006315 	stw	zero,396(r2)
  804684:	883fde26 	beq	r17,zero,804600 <__alt_mem_onchip_mem+0xff7fc600>
  804688:	18c9883a 	add	r4,r3,r3
  80468c:	2109883a 	add	r4,r4,r4
  804690:	1109883a 	add	r4,r2,r4
  804694:	21802215 	stw	r6,136(r4)
  804698:	01800044 	movi	r6,1
  80469c:	12406217 	ldw	r9,392(r2)
  8046a0:	30cc983a 	sll	r6,r6,r3
  8046a4:	4992b03a 	or	r9,r9,r6
  8046a8:	12406215 	stw	r9,392(r2)
  8046ac:	21c04215 	stw	r7,264(r4)
  8046b0:	01000084 	movi	r4,2
  8046b4:	893fd21e 	bne	r17,r4,804600 <__alt_mem_onchip_mem+0xff7fc600>
  8046b8:	11006317 	ldw	r4,396(r2)
  8046bc:	218cb03a 	or	r6,r4,r6
  8046c0:	11806315 	stw	r6,396(r2)
  8046c4:	003fce06 	br	804600 <__alt_mem_onchip_mem+0xff7fc600>
  8046c8:	18805304 	addi	r2,r3,332
  8046cc:	18805215 	stw	r2,328(r3)
  8046d0:	003fc606 	br	8045ec <__alt_mem_onchip_mem+0xff7fc5ec>
  8046d4:	00bfffc4 	movi	r2,-1
  8046d8:	003fd006 	br	80461c <__alt_mem_onchip_mem+0xff7fc61c>

008046dc <__call_exitprocs>:
  8046dc:	defff504 	addi	sp,sp,-44
  8046e0:	df000915 	stw	fp,36(sp)
  8046e4:	dd400615 	stw	r21,24(sp)
  8046e8:	dc800315 	stw	r18,12(sp)
  8046ec:	dfc00a15 	stw	ra,40(sp)
  8046f0:	ddc00815 	stw	r23,32(sp)
  8046f4:	dd800715 	stw	r22,28(sp)
  8046f8:	dd000515 	stw	r20,20(sp)
  8046fc:	dcc00415 	stw	r19,16(sp)
  804700:	dc400215 	stw	r17,8(sp)
  804704:	dc000115 	stw	r16,4(sp)
  804708:	d9000015 	stw	r4,0(sp)
  80470c:	2839883a 	mov	fp,r5
  804710:	04800044 	movi	r18,1
  804714:	057fffc4 	movi	r21,-1
  804718:	00802034 	movhi	r2,128
  80471c:	10995204 	addi	r2,r2,25928
  804720:	12000017 	ldw	r8,0(r2)
  804724:	45005217 	ldw	r20,328(r8)
  804728:	44c05204 	addi	r19,r8,328
  80472c:	a0001c26 	beq	r20,zero,8047a0 <__call_exitprocs+0xc4>
  804730:	a0800117 	ldw	r2,4(r20)
  804734:	15ffffc4 	addi	r23,r2,-1
  804738:	b8000d16 	blt	r23,zero,804770 <__call_exitprocs+0x94>
  80473c:	14000044 	addi	r16,r2,1
  804740:	8421883a 	add	r16,r16,r16
  804744:	8421883a 	add	r16,r16,r16
  804748:	84402004 	addi	r17,r16,128
  80474c:	a463883a 	add	r17,r20,r17
  804750:	a421883a 	add	r16,r20,r16
  804754:	e0001e26 	beq	fp,zero,8047d0 <__call_exitprocs+0xf4>
  804758:	80804017 	ldw	r2,256(r16)
  80475c:	e0801c26 	beq	fp,r2,8047d0 <__call_exitprocs+0xf4>
  804760:	bdffffc4 	addi	r23,r23,-1
  804764:	843fff04 	addi	r16,r16,-4
  804768:	8c7fff04 	addi	r17,r17,-4
  80476c:	bd7ff91e 	bne	r23,r21,804754 <__alt_mem_onchip_mem+0xff7fc754>
  804770:	00800034 	movhi	r2,0
  804774:	10800004 	addi	r2,r2,0
  804778:	10000926 	beq	r2,zero,8047a0 <__call_exitprocs+0xc4>
  80477c:	a0800117 	ldw	r2,4(r20)
  804780:	1000301e 	bne	r2,zero,804844 <__call_exitprocs+0x168>
  804784:	a0800017 	ldw	r2,0(r20)
  804788:	10003226 	beq	r2,zero,804854 <__call_exitprocs+0x178>
  80478c:	a009883a 	mov	r4,r20
  804790:	98800015 	stw	r2,0(r19)
  804794:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  804798:	9d000017 	ldw	r20,0(r19)
  80479c:	a03fe41e 	bne	r20,zero,804730 <__alt_mem_onchip_mem+0xff7fc730>
  8047a0:	dfc00a17 	ldw	ra,40(sp)
  8047a4:	df000917 	ldw	fp,36(sp)
  8047a8:	ddc00817 	ldw	r23,32(sp)
  8047ac:	dd800717 	ldw	r22,28(sp)
  8047b0:	dd400617 	ldw	r21,24(sp)
  8047b4:	dd000517 	ldw	r20,20(sp)
  8047b8:	dcc00417 	ldw	r19,16(sp)
  8047bc:	dc800317 	ldw	r18,12(sp)
  8047c0:	dc400217 	ldw	r17,8(sp)
  8047c4:	dc000117 	ldw	r16,4(sp)
  8047c8:	dec00b04 	addi	sp,sp,44
  8047cc:	f800283a 	ret
  8047d0:	a0800117 	ldw	r2,4(r20)
  8047d4:	80c00017 	ldw	r3,0(r16)
  8047d8:	10bfffc4 	addi	r2,r2,-1
  8047dc:	15c01426 	beq	r2,r23,804830 <__call_exitprocs+0x154>
  8047e0:	80000015 	stw	zero,0(r16)
  8047e4:	183fde26 	beq	r3,zero,804760 <__alt_mem_onchip_mem+0xff7fc760>
  8047e8:	95c8983a 	sll	r4,r18,r23
  8047ec:	a0806217 	ldw	r2,392(r20)
  8047f0:	a5800117 	ldw	r22,4(r20)
  8047f4:	2084703a 	and	r2,r4,r2
  8047f8:	10000b26 	beq	r2,zero,804828 <__call_exitprocs+0x14c>
  8047fc:	a0806317 	ldw	r2,396(r20)
  804800:	2088703a 	and	r4,r4,r2
  804804:	20000c1e 	bne	r4,zero,804838 <__call_exitprocs+0x15c>
  804808:	89400017 	ldw	r5,0(r17)
  80480c:	d9000017 	ldw	r4,0(sp)
  804810:	183ee83a 	callr	r3
  804814:	a0800117 	ldw	r2,4(r20)
  804818:	15bfbf1e 	bne	r2,r22,804718 <__alt_mem_onchip_mem+0xff7fc718>
  80481c:	98800017 	ldw	r2,0(r19)
  804820:	153fcf26 	beq	r2,r20,804760 <__alt_mem_onchip_mem+0xff7fc760>
  804824:	003fbc06 	br	804718 <__alt_mem_onchip_mem+0xff7fc718>
  804828:	183ee83a 	callr	r3
  80482c:	003ff906 	br	804814 <__alt_mem_onchip_mem+0xff7fc814>
  804830:	a5c00115 	stw	r23,4(r20)
  804834:	003feb06 	br	8047e4 <__alt_mem_onchip_mem+0xff7fc7e4>
  804838:	89000017 	ldw	r4,0(r17)
  80483c:	183ee83a 	callr	r3
  804840:	003ff406 	br	804814 <__alt_mem_onchip_mem+0xff7fc814>
  804844:	a0800017 	ldw	r2,0(r20)
  804848:	a027883a 	mov	r19,r20
  80484c:	1029883a 	mov	r20,r2
  804850:	003fb606 	br	80472c <__alt_mem_onchip_mem+0xff7fc72c>
  804854:	0005883a 	mov	r2,zero
  804858:	003ffb06 	br	804848 <__alt_mem_onchip_mem+0xff7fc848>

0080485c <__divsi3>:
  80485c:	20001b16 	blt	r4,zero,8048cc <__divsi3+0x70>
  804860:	000f883a 	mov	r7,zero
  804864:	28001616 	blt	r5,zero,8048c0 <__divsi3+0x64>
  804868:	200d883a 	mov	r6,r4
  80486c:	29001a2e 	bgeu	r5,r4,8048d8 <__divsi3+0x7c>
  804870:	00800804 	movi	r2,32
  804874:	00c00044 	movi	r3,1
  804878:	00000106 	br	804880 <__divsi3+0x24>
  80487c:	10000d26 	beq	r2,zero,8048b4 <__divsi3+0x58>
  804880:	294b883a 	add	r5,r5,r5
  804884:	10bfffc4 	addi	r2,r2,-1
  804888:	18c7883a 	add	r3,r3,r3
  80488c:	293ffb36 	bltu	r5,r4,80487c <__alt_mem_onchip_mem+0xff7fc87c>
  804890:	0005883a 	mov	r2,zero
  804894:	18000726 	beq	r3,zero,8048b4 <__divsi3+0x58>
  804898:	0005883a 	mov	r2,zero
  80489c:	31400236 	bltu	r6,r5,8048a8 <__divsi3+0x4c>
  8048a0:	314dc83a 	sub	r6,r6,r5
  8048a4:	10c4b03a 	or	r2,r2,r3
  8048a8:	1806d07a 	srli	r3,r3,1
  8048ac:	280ad07a 	srli	r5,r5,1
  8048b0:	183ffa1e 	bne	r3,zero,80489c <__alt_mem_onchip_mem+0xff7fc89c>
  8048b4:	38000126 	beq	r7,zero,8048bc <__divsi3+0x60>
  8048b8:	0085c83a 	sub	r2,zero,r2
  8048bc:	f800283a 	ret
  8048c0:	014bc83a 	sub	r5,zero,r5
  8048c4:	39c0005c 	xori	r7,r7,1
  8048c8:	003fe706 	br	804868 <__alt_mem_onchip_mem+0xff7fc868>
  8048cc:	0109c83a 	sub	r4,zero,r4
  8048d0:	01c00044 	movi	r7,1
  8048d4:	003fe306 	br	804864 <__alt_mem_onchip_mem+0xff7fc864>
  8048d8:	00c00044 	movi	r3,1
  8048dc:	003fee06 	br	804898 <__alt_mem_onchip_mem+0xff7fc898>

008048e0 <__modsi3>:
  8048e0:	20001716 	blt	r4,zero,804940 <__modsi3+0x60>
  8048e4:	000f883a 	mov	r7,zero
  8048e8:	2005883a 	mov	r2,r4
  8048ec:	28001216 	blt	r5,zero,804938 <__modsi3+0x58>
  8048f0:	2900162e 	bgeu	r5,r4,80494c <__modsi3+0x6c>
  8048f4:	01800804 	movi	r6,32
  8048f8:	00c00044 	movi	r3,1
  8048fc:	00000106 	br	804904 <__modsi3+0x24>
  804900:	30000a26 	beq	r6,zero,80492c <__modsi3+0x4c>
  804904:	294b883a 	add	r5,r5,r5
  804908:	31bfffc4 	addi	r6,r6,-1
  80490c:	18c7883a 	add	r3,r3,r3
  804910:	293ffb36 	bltu	r5,r4,804900 <__alt_mem_onchip_mem+0xff7fc900>
  804914:	18000526 	beq	r3,zero,80492c <__modsi3+0x4c>
  804918:	1806d07a 	srli	r3,r3,1
  80491c:	11400136 	bltu	r2,r5,804924 <__modsi3+0x44>
  804920:	1145c83a 	sub	r2,r2,r5
  804924:	280ad07a 	srli	r5,r5,1
  804928:	183ffb1e 	bne	r3,zero,804918 <__alt_mem_onchip_mem+0xff7fc918>
  80492c:	38000126 	beq	r7,zero,804934 <__modsi3+0x54>
  804930:	0085c83a 	sub	r2,zero,r2
  804934:	f800283a 	ret
  804938:	014bc83a 	sub	r5,zero,r5
  80493c:	003fec06 	br	8048f0 <__alt_mem_onchip_mem+0xff7fc8f0>
  804940:	0109c83a 	sub	r4,zero,r4
  804944:	01c00044 	movi	r7,1
  804948:	003fe706 	br	8048e8 <__alt_mem_onchip_mem+0xff7fc8e8>
  80494c:	00c00044 	movi	r3,1
  804950:	003ff106 	br	804918 <__alt_mem_onchip_mem+0xff7fc918>

00804954 <__udivsi3>:
  804954:	200d883a 	mov	r6,r4
  804958:	2900152e 	bgeu	r5,r4,8049b0 <__udivsi3+0x5c>
  80495c:	28001416 	blt	r5,zero,8049b0 <__udivsi3+0x5c>
  804960:	00800804 	movi	r2,32
  804964:	00c00044 	movi	r3,1
  804968:	00000206 	br	804974 <__udivsi3+0x20>
  80496c:	10000e26 	beq	r2,zero,8049a8 <__udivsi3+0x54>
  804970:	28000516 	blt	r5,zero,804988 <__udivsi3+0x34>
  804974:	294b883a 	add	r5,r5,r5
  804978:	10bfffc4 	addi	r2,r2,-1
  80497c:	18c7883a 	add	r3,r3,r3
  804980:	293ffa36 	bltu	r5,r4,80496c <__alt_mem_onchip_mem+0xff7fc96c>
  804984:	18000826 	beq	r3,zero,8049a8 <__udivsi3+0x54>
  804988:	0005883a 	mov	r2,zero
  80498c:	31400236 	bltu	r6,r5,804998 <__udivsi3+0x44>
  804990:	314dc83a 	sub	r6,r6,r5
  804994:	10c4b03a 	or	r2,r2,r3
  804998:	1806d07a 	srli	r3,r3,1
  80499c:	280ad07a 	srli	r5,r5,1
  8049a0:	183ffa1e 	bne	r3,zero,80498c <__alt_mem_onchip_mem+0xff7fc98c>
  8049a4:	f800283a 	ret
  8049a8:	0005883a 	mov	r2,zero
  8049ac:	f800283a 	ret
  8049b0:	00c00044 	movi	r3,1
  8049b4:	003ff406 	br	804988 <__alt_mem_onchip_mem+0xff7fc988>

008049b8 <__umodsi3>:
  8049b8:	2005883a 	mov	r2,r4
  8049bc:	2900122e 	bgeu	r5,r4,804a08 <__umodsi3+0x50>
  8049c0:	28001116 	blt	r5,zero,804a08 <__umodsi3+0x50>
  8049c4:	01800804 	movi	r6,32
  8049c8:	00c00044 	movi	r3,1
  8049cc:	00000206 	br	8049d8 <__umodsi3+0x20>
  8049d0:	30000c26 	beq	r6,zero,804a04 <__umodsi3+0x4c>
  8049d4:	28000516 	blt	r5,zero,8049ec <__umodsi3+0x34>
  8049d8:	294b883a 	add	r5,r5,r5
  8049dc:	31bfffc4 	addi	r6,r6,-1
  8049e0:	18c7883a 	add	r3,r3,r3
  8049e4:	293ffa36 	bltu	r5,r4,8049d0 <__alt_mem_onchip_mem+0xff7fc9d0>
  8049e8:	18000626 	beq	r3,zero,804a04 <__umodsi3+0x4c>
  8049ec:	1806d07a 	srli	r3,r3,1
  8049f0:	11400136 	bltu	r2,r5,8049f8 <__umodsi3+0x40>
  8049f4:	1145c83a 	sub	r2,r2,r5
  8049f8:	280ad07a 	srli	r5,r5,1
  8049fc:	183ffb1e 	bne	r3,zero,8049ec <__alt_mem_onchip_mem+0xff7fc9ec>
  804a00:	f800283a 	ret
  804a04:	f800283a 	ret
  804a08:	00c00044 	movi	r3,1
  804a0c:	003ff706 	br	8049ec <__alt_mem_onchip_mem+0xff7fc9ec>

00804a10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  804a10:	defffd04 	addi	sp,sp,-12
  804a14:	df000215 	stw	fp,8(sp)
  804a18:	df000204 	addi	fp,sp,8
  804a1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  804a20:	0001883a 	nop
  804a24:	e0bfff17 	ldw	r2,-4(fp)
  804a28:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  804a2c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  804a30:	10000226 	beq	r2,zero,804a3c <_exit+0x2c>
    ALT_SIM_FAIL();
  804a34:	002af070 	cmpltui	zero,zero,43969
  804a38:	00000106 	br	804a40 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  804a3c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  804a40:	003fff06 	br	804a40 <__alt_mem_onchip_mem+0xff7fca40>
