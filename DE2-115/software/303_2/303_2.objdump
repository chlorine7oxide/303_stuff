
303_2.elf:     file format elf32-littlenios2
303_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000d164 memsz 0x0000d164 flags r-x
    LOAD off    0x0000e184 vaddr 0x0080d184 paddr 0x0080e9cc align 2**12
         filesz 0x00001848 memsz 0x00001848 flags rw-
    LOAD off    0x00010214 vaddr 0x00810214 paddr 0x00810214 align 2**12
         filesz 0x00000000 memsz 0x00000358 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cb78  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c8  0080cdbc  0080cdbc  0000ddbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001848  0080d184  0080e9cc  0000e184  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000358  00810214  00810214  00010214  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081056c  0081056c  0000f9cc  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0000f9cc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000f9cc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000868  00000000  00000000  0000f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000d3fd  00000000  00000000  00010258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000410d  00000000  00000000  0001d655  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006505  00000000  00000000  00021762  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000012e8  00000000  00000000  00027c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000030f9  00000000  00000000  00028f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003f40  00000000  00000000  0002c049  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0002ff8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000810  00000000  00000000  0002fff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00032da5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00032da8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00032dab  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00032dac  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00032dad  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00032db6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00032dbf  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00032dc8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000019  00000000  00000000  00032dd4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  00032ded  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080cdbc l    d  .rodata	00000000 .rodata
0080d184 l    d  .rwdata	00000000 .rwdata
00810214 l    d  .bss	00000000 .bss
0081056c l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../303_2_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 c_heart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 scchart_heart.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
00808f4c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00809258 l     F .text	00000034 alt_dev_reg
0080d184 l     O .rwdata	00001060 jtag_uart
0080e1e4 l     O .rwdata	00000120 lcd
0080e304 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00809580 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080978c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080e9a0 l     O .rwdata	00000004 colstart
00809dc4 l     F .text	000000b8 lcd_write_command
00809e7c l     F .text	000000d8 lcd_write_data
00809f54 l     F .text	000000d0 lcd_clear_screen
0080a024 l     F .text	000001ec lcd_repaint_screen
0080a210 l     F .text	000000cc lcd_scroll_up
0080a2dc l     F .text	000002ac lcd_handle_escape
0080aa60 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080aca0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080af50 l     F .text	0000009c altera_avalon_uart_irq
0080afec l     F .text	000000e4 altera_avalon_uart_rxirq
0080b0d0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080b26c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080b484 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
0080b66c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080b7c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080b7ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080bc60 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080bda0 l     F .text	0000003c alt_get_errno
0080bddc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080cfff l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0080e570 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00810238 g     O .bss	00000004 alt_instruction_exception_handler
00809038 g     F .text	0000007c alt_main
008102a0 g     O .bss	000001b4 t
0081046c g     O .bss	00000100 alt_irq
0080e9cc g       *ABS*	00000000 __flash_rwdata_start
00808214 g     F .text	000000dc .hidden __gtdf2
0080c088 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0081023c g     O .bss	00000004 errno
00810224 g     O .bss	00000004 alt_argv
0080e995 g     O .rwdata	00000001 ignore_a
00816994 g       *ABS*	00000000 _gp
0080c058 g     F .text	00000030 usleep
00807414 g     F .text	00000220 reset
0080e3f0 g     O .rwdata	00000180 alt_fd_list
0080c204 g     F .text	00000090 alt_find_dev
0080c634 g     F .text	00000148 memcpy
00808ce0 g     F .text	000000dc .hidden __floatsidf
0080bd24 g     F .text	0000007c alt_io_redirect
008082f0 g     F .text	000000f4 .hidden __ltdf2
0080cdbc g       *ABS*	00000000 __DTOR_END__
00800388 g     F .text	00000024 PVARP_interrupt
0080c4d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00809984 g     F .text	0000021c altera_avalon_jtag_uart_read
0080cccc g     F .text	00000064 .hidden __udivsi3
00810217 g     O .bss	00000001 need_v_pulse
0080c440 g     F .text	00000090 alt_icache_flush
0081021e g     O .bss	00000001 char_recieve
0080e9b4 g     O .rwdata	00000004 alt_max_fd
0081021a g     O .bss	00000001 ap
00807968 g     F .text	000008ac .hidden __adddf3
0080e9c4 g     O .rwdata	00000004 _global_impure_ptr
0081056c g       *ABS*	00000000 __bss_end
0080bb70 g     F .text	000000f0 alt_iic_isr_register
00809150 g     F .text	00000108 alt_tick
0080aea4 g     F .text	000000ac altera_avalon_uart_init
0080bb24 g     F .text	0000004c alt_ic_irq_enabled
008090b4 g     F .text	0000009c alt_alarm_stop
00810234 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080e3c8 g     O .rwdata	00000028 alt_dev_null
00810218 g     O .bss	00000001 started
0080b778 g     F .text	00000048 alt_dcache_flush_all
00810214 g     O .bss	00000001 can_vpulse
0080e9cc g       *ABS*	00000000 __ram_rwdata_end
0080e9ac g     O .rwdata	00000008 alt_dev_list
0080d184 g       *ABS*	00000000 __ram_rodata_end
008082f0 g     F .text	000000f4 .hidden __ledf2
008078c0 g     F .text	00000050 uart_tx
0080cd30 g     F .text	00000058 .hidden __umodsi3
00800290 g     F .text	000000f8 start_cycle
0081056c g       *ABS*	00000000 end
0080a588 g     F .text	000004d8 altera_avalon_lcd_16207_write
0080b4c0 g     F .text	000001ac altera_avalon_uart_write
008094c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0081021c g     O .bss	00000001 sc_as
0080cdbc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080ad18 g     F .text	0000007c alt_avalon_timer_sc_init
0080adf4 g     F .text	00000060 altera_avalon_uart_write_fd
00808dbc g     F .text	00000064 .hidden __clzsi2
0080ae54 g     F .text	00000050 altera_avalon_uart_close_fd
00809ba0 g     F .text	00000224 altera_avalon_jtag_uart_write
0080ca54 g     F .text	00000180 __call_exitprocs
00800244 g     F .text	0000004c _start
0081022c g     O .bss	00000004 _alt_tick_rate
00810230 g     O .bss	00000004 _alt_nticks
008092c4 g     F .text	00000098 alt_sys_init
00810240 g     O .bss	00000018 URI_LRI
0080c93c g     F .text	00000118 __register_exitproc
0080982c g     F .text	00000068 altera_avalon_jtag_uart_close
0080d184 g       *ABS*	00000000 __ram_rwdata_start
0080cdbc g       *ABS*	00000000 __ram_rodata_start
00807910 g     F .text	00000058 uart_rx
0080935c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080c39c g     F .text	000000a4 alt_get_fd
0080c0ac g     F .text	00000158 alt_busy_sleep
008003ac g     F .text	00000034 VRP_interrupt
0080c5b8 g     F .text	0000007c memcmp
0080941c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081056c g       *ABS*	00000000 __alt_stack_base
0080946c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00807634 g     F .text	0000028c tick
0080c294 g     F .text	00000108 alt_find_file
0080e994 g     O .rwdata	00000001 ignore_v
0080b828 g     F .text	000000a4 alt_dev_llist_insert
00810454 g     O .bss	00000018 scchart_timer
00810214 g       *ABS*	00000000 __bss_start
0080c77c g     F .text	00000128 memset
008005f0 g     F .text	00000244 main
00810258 g     O .bss	00000018 VRP
00810228 g     O .bss	00000004 alt_envp
008093bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080ab0c g     F .text	00000134 altera_avalon_lcd_16207_init
0080e9b8 g     O .rwdata	00000004 alt_errno
00810219 g     O .bss	00000001 vp
0080cbd4 g     F .text	00000084 .hidden __divsi3
0080cdbc g       *ABS*	00000000 __CTOR_END__
0080cdbc g       *ABS*	00000000 __flash_rodata_start
0080cdbc g       *ABS*	00000000 __DTOR_LIST__
0080928c g     F .text	00000038 alt_irq_init
0080bff4 g     F .text	00000064 alt_release_fd
008003e0 g     F .text	00000054 URI_LRI_interrupt
0080cdbc g     O .rodata	00000100 .hidden __clz_tab
0080c56c g     F .text	00000014 atexit
00800434 g     F .text	00000070 AEI_AVI_interrupt
0080e9c8 g     O .rwdata	00000004 _impure_ptr
00810220 g     O .bss	00000004 alt_argc
0080b92c g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00810216 g     O .bss	00000001 is_recent_a
0080ac40 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080e9a4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00810270 g     O .bss	00000018 AEI_AVI
0080b9c0 g     F .text	00000050 alt_ic_isr_register
0080e9cc g       *ABS*	00000000 _edata
0080ad94 g     F .text	00000060 altera_avalon_uart_read_fd
0081056c g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00809894 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008004a4 g     F .text	0000003c extern_v_interrupt
0080ba98 g     F .text	0000008c alt_ic_irq_disable
0080c580 g     F .text	00000038 exit
00810288 g     O .bss	00000018 PVARP
0080cc58 g     F .text	00000074 .hidden __modsi3
00800834 g     F .text	00006be0 logic
0080e9c0 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081021d g     O .bss	00000001 sc_vs
00810215 g     O .bss	00000001 reset_cycle
0080cefe g     O .rodata	00000101 _ctype_
0081021b g     O .bss	00000001 scchart_update_flag
0080b218 g     F .text	00000054 altera_avalon_uart_close
0080cd88 g     F .text	00000034 _exit
00808e20 g     F .text	0000012c alt_alarm_start
0080c8a4 g     F .text	00000098 strlen
0080bea0 g     F .text	00000154 open
00808214 g     F .text	000000dc .hidden __gedf2
00800544 g     F .text	000000ac scchart_interrupt
0080b98c g     F .text	00000034 alt_icache_flush_all
0080e9bc g     O .rwdata	00000004 alt_priority_mask
0080ba10 g     F .text	00000088 alt_ic_irq_enable
0080b2a8 g     F .text	000001dc altera_avalon_uart_read
008083e4 g     F .text	000008fc .hidden __subdf3
0080e998 g     O .rwdata	00000008 alt_alarm_list
0080b8cc g     F .text	00000060 _do_ctors
0080b6a8 g     F .text	000000d0 close
00808fb4 g     F .text	00000084 alt_load
008004e0 g     F .text	00000064 extern_a_interrupt



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10811b04 	addi	r2,r2,1132
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10811b04 	addi	r2,r2,1132
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a62917 	ldw	r2,-26460(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a62917 	ldw	r2,-26460(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d69a6514 	ori	gp,gp,27028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10808514 	ori	r2,r2,532

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18c15b14 	ori	r3,r3,1388

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	0808fb40 	call	808fb4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08090380 	call	809038 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <start_cycle>:
volatile alt_u8 started = 0;

volatile alt_u8 vp = 0, ap = 0;

// reset on V activity
void start_cycle(){
  800290:	defffe04 	addi	sp,sp,-8
  800294:	dfc00115 	stw	ra,4(sp)
  800298:	df000015 	stw	fp,0(sp)
  80029c:	d839883a 	mov	fp,sp
	if (started){
  8002a0:	d0a62103 	ldbu	r2,-26492(gp)
  8002a4:	10803fcc 	andi	r2,r2,255
  8002a8:	10000c26 	beq	r2,zero,8002dc <start_cycle+0x4c>
		alt_alarm_stop(&URI_LRI);
  8002ac:	01002074 	movhi	r4,129
  8002b0:	21009004 	addi	r4,r4,576
  8002b4:	08090b40 	call	8090b4 <alt_alarm_stop>
		alt_alarm_stop(&PVARP);
  8002b8:	01002074 	movhi	r4,129
  8002bc:	2100a204 	addi	r4,r4,648
  8002c0:	08090b40 	call	8090b4 <alt_alarm_stop>
		alt_alarm_stop(&VRP);
  8002c4:	01002074 	movhi	r4,129
  8002c8:	21009604 	addi	r4,r4,600
  8002cc:	08090b40 	call	8090b4 <alt_alarm_stop>
		alt_alarm_stop(&AEI_AVI);
  8002d0:	01002074 	movhi	r4,129
  8002d4:	21009c04 	addi	r4,r4,624
  8002d8:	08090b40 	call	8090b4 <alt_alarm_stop>
	}
	started = 1;
  8002dc:	00800044 	movi	r2,1
  8002e0:	d0a62105 	stb	r2,-26492(gp)
	alt_alarm_start(&URI_LRI, URI_VALUE, URI_LRI_interrupt, NULL);
  8002e4:	000f883a 	mov	r7,zero
  8002e8:	01802034 	movhi	r6,128
  8002ec:	3180f804 	addi	r6,r6,992
  8002f0:	0140e104 	movi	r5,900
  8002f4:	01002074 	movhi	r4,129
  8002f8:	21009004 	addi	r4,r4,576
  8002fc:	0808e200 	call	808e20 <alt_alarm_start>
	alt_alarm_start(&PVARP, PVARP_VALUE, PVARP_interrupt, NULL);
  800300:	000f883a 	mov	r7,zero
  800304:	01802034 	movhi	r6,128
  800308:	3180e204 	addi	r6,r6,904
  80030c:	01400c84 	movi	r5,50
  800310:	01002074 	movhi	r4,129
  800314:	2100a204 	addi	r4,r4,648
  800318:	0808e200 	call	808e20 <alt_alarm_start>
	alt_alarm_start(&VRP, VRP_VALUE, VRP_interrupt, NULL);
  80031c:	000f883a 	mov	r7,zero
  800320:	01802034 	movhi	r6,128
  800324:	3180eb04 	addi	r6,r6,940
  800328:	01402584 	movi	r5,150
  80032c:	01002074 	movhi	r4,129
  800330:	21009604 	addi	r4,r4,600
  800334:	0808e200 	call	808e20 <alt_alarm_start>
	alt_alarm_start(&AEI_AVI, AEI_VALUE, AEI_AVI_interrupt, NULL);
  800338:	000f883a 	mov	r7,zero
  80033c:	01802034 	movhi	r6,128
  800340:	31810d04 	addi	r6,r6,1076
  800344:	0140c804 	movi	r5,800
  800348:	01002074 	movhi	r4,129
  80034c:	21009c04 	addi	r4,r4,624
  800350:	0808e200 	call	808e20 <alt_alarm_start>
	ignore_a = 1;
  800354:	00800044 	movi	r2,1
  800358:	d0a00045 	stb	r2,-32767(gp)
	ignore_v = 1;
  80035c:	00800044 	movi	r2,1
  800360:	d0a00005 	stb	r2,-32768(gp)
	can_vpulse = 0;
  800364:	d0262005 	stb	zero,-26496(gp)
	need_v_pulse = 0;
  800368:	d02620c5 	stb	zero,-26493(gp)
	is_recent_a = 0;
  80036c:	d0262085 	stb	zero,-26494(gp)
}
  800370:	0001883a 	nop
  800374:	e037883a 	mov	sp,fp
  800378:	dfc00117 	ldw	ra,4(sp)
  80037c:	df000017 	ldw	fp,0(sp)
  800380:	dec00204 	addi	sp,sp,8
  800384:	f800283a 	ret

00800388 <PVARP_interrupt>:

// pvarp timeout
alt_u32 PVARP_interrupt(){
  800388:	deffff04 	addi	sp,sp,-4
  80038c:	df000015 	stw	fp,0(sp)
  800390:	d839883a 	mov	fp,sp
	ignore_a = 0;
  800394:	d0200045 	stb	zero,-32767(gp)
	return LRI_VALUE; // value so it does not trigger when unwanted
  800398:	0080ed84 	movi	r2,950
}
  80039c:	e037883a 	mov	sp,fp
  8003a0:	df000017 	ldw	fp,0(sp)
  8003a4:	dec00104 	addi	sp,sp,4
  8003a8:	f800283a 	ret

008003ac <VRP_interrupt>:

// vrp timeout
alt_u32 VRP_interrupt(){
  8003ac:	deffff04 	addi	sp,sp,-4
  8003b0:	df000015 	stw	fp,0(sp)
  8003b4:	d839883a 	mov	fp,sp
	ignore_v = 0;
  8003b8:	d0200005 	stb	zero,-32768(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  8003bc:	0007883a 	mov	r3,zero
  8003c0:	00804074 	movhi	r2,257
  8003c4:	10841c04 	addi	r2,r2,4208
  8003c8:	10c00035 	stwio	r3,0(r2)
	return LRI_VALUE; // value so it does not trigger when unwanted
  8003cc:	0080ed84 	movi	r2,950
}
  8003d0:	e037883a 	mov	sp,fp
  8003d4:	df000017 	ldw	fp,0(sp)
  8003d8:	dec00104 	addi	sp,sp,4
  8003dc:	f800283a 	ret

008003e0 <URI_LRI_interrupt>:

// upper and lower bounds for V pulse rate
alt_u32 URI_LRI_interrupt(){
  8003e0:	deffff04 	addi	sp,sp,-4
  8003e4:	df000015 	stw	fp,0(sp)
  8003e8:	d839883a 	mov	fp,sp
	if (!can_vpulse){ // URI timeout
  8003ec:	d0a62003 	ldbu	r2,-26496(gp)
  8003f0:	10803fcc 	andi	r2,r2,255
  8003f4:	1000041e 	bne	r2,zero,800408 <URI_LRI_interrupt+0x28>
		can_vpulse = 1;
  8003f8:	00800044 	movi	r2,1
  8003fc:	d0a62005 	stb	r2,-26496(gp)
		return LRI_VALUE - URI_VALUE;
  800400:	00800c84 	movi	r2,50
  800404:	00000706 	br	800424 <URI_LRI_interrupt+0x44>
	} else { // LRI timeout
		vp = 1;
  800408:	00800044 	movi	r2,1
  80040c:	d0a62145 	stb	r2,-26491(gp)
		is_recent_a = 0;
  800410:	d0262085 	stb	zero,-26494(gp)
		reset_cycle = 1;
  800414:	00800044 	movi	r2,1
  800418:	d0a62045 	stb	r2,-26495(gp)
		can_vpulse = 0;
  80041c:	d0262005 	stb	zero,-26496(gp)
		return URI_VALUE;
  800420:	0080e104 	movi	r2,900
	}
}
  800424:	e037883a 	mov	sp,fp
  800428:	df000017 	ldw	fp,0(sp)
  80042c:	dec00104 	addi	sp,sp,4
  800430:	f800283a 	ret

00800434 <AEI_AVI_interrupt>:

// A -> V -> A
alt_u32 AEI_AVI_interrupt(){
  800434:	deffff04 	addi	sp,sp,-4
  800438:	df000015 	stw	fp,0(sp)
  80043c:	d839883a 	mov	fp,sp
	if (is_recent_a){ // most recent is a a
  800440:	d0a62083 	ldbu	r2,-26494(gp)
  800444:	10803fcc 	andi	r2,r2,255
  800448:	10000d26 	beq	r2,zero,800480 <AEI_AVI_interrupt+0x4c>
		if (can_vpulse){
  80044c:	d0a62003 	ldbu	r2,-26496(gp)
  800450:	10803fcc 	andi	r2,r2,255
  800454:	10000626 	beq	r2,zero,800470 <AEI_AVI_interrupt+0x3c>
			vp = 1;
  800458:	00800044 	movi	r2,1
  80045c:	d0a62145 	stb	r2,-26491(gp)
			is_recent_a = 0;
  800460:	d0262085 	stb	zero,-26494(gp)
			reset_cycle = 1;
  800464:	00800044 	movi	r2,1
  800468:	d0a62045 	stb	r2,-26495(gp)
  80046c:	00000206 	br	800478 <AEI_AVI_interrupt+0x44>
		} else {
			need_v_pulse = 1;
  800470:	00800044 	movi	r2,1
  800474:	d0a620c5 	stb	r2,-26493(gp)
		}
		return LRI_VALUE; // large value
  800478:	0080ed84 	movi	r2,950
  80047c:	00000506 	br	800494 <AEI_AVI_interrupt+0x60>
	} else { // most recent is a v
		ap = 1;
  800480:	00800044 	movi	r2,1
  800484:	d0a62185 	stb	r2,-26490(gp)
		is_recent_a = 1;
  800488:	00800044 	movi	r2,1
  80048c:	d0a62085 	stb	r2,-26494(gp)
		return AVI_VALUE;
  800490:	00804b04 	movi	r2,300
	}
}
  800494:	e037883a 	mov	sp,fp
  800498:	df000017 	ldw	fp,0(sp)
  80049c:	dec00104 	addi	sp,sp,4
  8004a0:	f800283a 	ret

008004a4 <extern_v_interrupt>:

// VS detected
void extern_v_interrupt(){
  8004a4:	deffff04 	addi	sp,sp,-4
  8004a8:	df000015 	stw	fp,0(sp)
  8004ac:	d839883a 	mov	fp,sp
	if (!ignore_v){
  8004b0:	d0a00003 	ldbu	r2,-32768(gp)
  8004b4:	10803fcc 	andi	r2,r2,255
  8004b8:	1000041e 	bne	r2,zero,8004cc <extern_v_interrupt+0x28>
		can_vpulse = 0;
  8004bc:	d0262005 	stb	zero,-26496(gp)
		reset_cycle = 1;
  8004c0:	00800044 	movi	r2,1
  8004c4:	d0a62045 	stb	r2,-26495(gp)
		is_recent_a = 0;
  8004c8:	d0262085 	stb	zero,-26494(gp)
	}

}
  8004cc:	0001883a 	nop
  8004d0:	e037883a 	mov	sp,fp
  8004d4:	df000017 	ldw	fp,0(sp)
  8004d8:	dec00104 	addi	sp,sp,4
  8004dc:	f800283a 	ret

008004e0 <extern_a_interrupt>:

// AS detected
void extern_a_interrupt(){
  8004e0:	defffe04 	addi	sp,sp,-8
  8004e4:	dfc00115 	stw	ra,4(sp)
  8004e8:	df000015 	stw	fp,0(sp)
  8004ec:	d839883a 	mov	fp,sp
	if (!ignore_a){
  8004f0:	d0a00043 	ldbu	r2,-32767(gp)
  8004f4:	10803fcc 	andi	r2,r2,255
  8004f8:	10000c1e 	bne	r2,zero,80052c <extern_a_interrupt+0x4c>
		alt_alarm_stop(&AEI_AVI);
  8004fc:	01002074 	movhi	r4,129
  800500:	21009c04 	addi	r4,r4,624
  800504:	08090b40 	call	8090b4 <alt_alarm_stop>
		alt_alarm_start(&AEI_AVI, AVI_VALUE, AEI_AVI_interrupt, NULL);
  800508:	000f883a 	mov	r7,zero
  80050c:	01802034 	movhi	r6,128
  800510:	31810d04 	addi	r6,r6,1076
  800514:	01404b04 	movi	r5,300
  800518:	01002074 	movhi	r4,129
  80051c:	21009c04 	addi	r4,r4,624
  800520:	0808e200 	call	808e20 <alt_alarm_start>
		is_recent_a = 1;
  800524:	00800044 	movi	r2,1
  800528:	d0a62085 	stb	r2,-26494(gp)
	}
}
  80052c:	0001883a 	nop
  800530:	e037883a 	mov	sp,fp
  800534:	dfc00117 	ldw	ra,4(sp)
  800538:	df000017 	ldw	fp,0(sp)
  80053c:	dec00204 	addi	sp,sp,8
  800540:	f800283a 	ret

00800544 <scchart_interrupt>:
volatile alt_u8 scchart_update_flag = 0;

volatile alt_u8 sc_as = 0, sc_vs = 0;
volatile TickData t;

alt_u32 scchart_interrupt(){
  800544:	defffe04 	addi	sp,sp,-8
  800548:	dfc00115 	stw	ra,4(sp)
  80054c:	df000015 	stw	fp,0(sp)
  800550:	d839883a 	mov	fp,sp
	if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2){
  800554:	00804074 	movhi	r2,257
  800558:	10842404 	addi	r2,r2,4240
  80055c:	10800037 	ldwio	r2,0(r2)
  800560:	1080008c 	andi	r2,r2,2
  800564:	10001c26 	beq	r2,zero,8005d8 <scchart_interrupt+0x94>
		t.AS = sc_as;
  800568:	d0a62203 	ldbu	r2,-26488(gp)
  80056c:	1007883a 	mov	r3,r2
  800570:	00802074 	movhi	r2,129
  800574:	1080a804 	addi	r2,r2,672
  800578:	10c01705 	stb	r3,92(r2)
		t.VS = sc_vs;
  80057c:	d0a62243 	ldbu	r2,-26487(gp)
  800580:	1007883a 	mov	r3,r2
  800584:	00802074 	movhi	r2,129
  800588:	1080a804 	addi	r2,r2,672
  80058c:	10c01745 	stb	r3,93(r2)
		t.deltaT = 1;
  800590:	00802074 	movhi	r2,129
  800594:	1080a804 	addi	r2,r2,672
  800598:	10001315 	stw	zero,76(r2)
  80059c:	00cffc34 	movhi	r3,16368
  8005a0:	10c01415 	stw	r3,80(r2)
		tick( & t);
  8005a4:	01002074 	movhi	r4,129
  8005a8:	2100a804 	addi	r4,r4,672
  8005ac:	08076340 	call	807634 <tick>
		ap = t.AP;
  8005b0:	00802074 	movhi	r2,129
  8005b4:	1080a804 	addi	r2,r2,672
  8005b8:	10801783 	ldbu	r2,94(r2)
  8005bc:	d0a62185 	stb	r2,-26490(gp)
		vp = t.VP;
  8005c0:	00802074 	movhi	r2,129
  8005c4:	1080a804 	addi	r2,r2,672
  8005c8:	108017c3 	ldbu	r2,95(r2)
  8005cc:	d0a62145 	stb	r2,-26491(gp)
		sc_as = 0;
  8005d0:	d0262205 	stb	zero,-26488(gp)
		sc_vs = 0;
  8005d4:	d0262245 	stb	zero,-26487(gp)
	}

//	scchart_update_flag = 1;
	return 1;
  8005d8:	00800044 	movi	r2,1
}
  8005dc:	e037883a 	mov	sp,fp
  8005e0:	dfc00117 	ldw	ra,4(sp)
  8005e4:	df000017 	ldw	fp,0(sp)
  8005e8:	dec00204 	addi	sp,sp,8
  8005ec:	f800283a 	ret

008005f0 <main>:


int main() {
  8005f0:	defffd04 	addi	sp,sp,-12
  8005f4:	dfc00215 	stw	ra,8(sp)
  8005f8:	df000115 	stw	fp,4(sp)
  8005fc:	df000104 	addi	fp,sp,4
	// initialise the uart
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, 0);
  800600:	0007883a 	mov	r3,zero
  800604:	00804074 	movhi	r2,257
  800608:	10841304 	addi	r2,r2,4172
  80060c:	10c00035 	stwio	r3,0(r2)

    // initialisaiton for sccharts mode
    reset( & t);
  800610:	01002074 	movhi	r4,129
  800614:	2100a804 	addi	r4,r4,672
  800618:	08074140 	call	807414 <reset>

    // keys and previous values
    alt_u8 key, key0_pre, key1_pre;

    // initialisation for C mode
    start_cycle();
  80061c:	08002900 	call	800290 <start_cycle>
    alt_alarm_start(&scchart_timer, 1, scchart_interrupt, NULL);
  800620:	000f883a 	mov	r7,zero
  800624:	01802034 	movhi	r6,128
  800628:	31815104 	addi	r6,r6,1348
  80062c:	01400044 	movi	r5,1
  800630:	01002074 	movhi	r4,129
  800634:	21011504 	addi	r4,r4,1108
  800638:	0808e200 	call	808e20 <alt_alarm_start>

    while (1) {

    	// sw 0: uart mode if off, buttons mode if on
        if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 1) {
  80063c:	00804074 	movhi	r2,257
  800640:	10842404 	addi	r2,r2,4240
  800644:	10800037 	ldwio	r2,0(r2)
  800648:	1080004c 	andi	r2,r2,1
  80064c:	10004226 	beq	r2,zero,800758 <main+0x168>

            key = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  800650:	00804074 	movhi	r2,257
  800654:	10842804 	addi	r2,r2,4256
  800658:	10800037 	ldwio	r2,0(r2)
  80065c:	e0bfff85 	stb	r2,-2(fp)

            if ((~key & 0x01) == 1 && key0_pre == 0) { // key 0 rising : a V pulse is detected
  800660:	e0bfff83 	ldbu	r2,-2(fp)
  800664:	1080004c 	andi	r2,r2,1
  800668:	10000b1e 	bne	r2,zero,800698 <main+0xa8>
  80066c:	e0bfff03 	ldbu	r2,-4(fp)
  800670:	1000091e 	bne	r2,zero,800698 <main+0xa8>
                if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2) {
  800674:	00804074 	movhi	r2,257
  800678:	10842404 	addi	r2,r2,4240
  80067c:	10800037 	ldwio	r2,0(r2)
  800680:	1080008c 	andi	r2,r2,2
  800684:	10000326 	beq	r2,zero,800694 <main+0xa4>
                    sc_vs = 1;
  800688:	00800044 	movi	r2,1
  80068c:	d0a62245 	stb	r2,-26487(gp)
  800690:	00000106 	br	800698 <main+0xa8>
                } else {
                    extern_v_interrupt();
  800694:	08004a40 	call	8004a4 <extern_v_interrupt>
                }
            }
            key0_pre = ~key & 0x01;
  800698:	e0bfff83 	ldbu	r2,-2(fp)
  80069c:	1080004c 	andi	r2,r2,1
  8006a0:	1005003a 	cmpeq	r2,r2,zero
  8006a4:	e0bfff05 	stb	r2,-4(fp)

            if ((~key & 0x02) >> 1 == 1 && key1_pre == 0) { // key 1 rising : a A pulse is detected
  8006a8:	e0bfff83 	ldbu	r2,-2(fp)
  8006ac:	0084303a 	nor	r2,zero,r2
  8006b0:	1080008c 	andi	r2,r2,2
  8006b4:	1005d07a 	srai	r2,r2,1
  8006b8:	10800058 	cmpnei	r2,r2,1
  8006bc:	10000b1e 	bne	r2,zero,8006ec <main+0xfc>
  8006c0:	e0bfff43 	ldbu	r2,-3(fp)
  8006c4:	1000091e 	bne	r2,zero,8006ec <main+0xfc>

                if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2) {
  8006c8:	00804074 	movhi	r2,257
  8006cc:	10842404 	addi	r2,r2,4240
  8006d0:	10800037 	ldwio	r2,0(r2)
  8006d4:	1080008c 	andi	r2,r2,2
  8006d8:	10000326 	beq	r2,zero,8006e8 <main+0xf8>
                    sc_as = 1;
  8006dc:	00800044 	movi	r2,1
  8006e0:	d0a62205 	stb	r2,-26488(gp)
  8006e4:	00000106 	br	8006ec <main+0xfc>
                } else {
                    extern_a_interrupt();
  8006e8:	08004e00 	call	8004e0 <extern_a_interrupt>
                }
            }
            key1_pre = ~key & 0x02;
  8006ec:	e0bfff83 	ldbu	r2,-2(fp)
  8006f0:	0084303a 	nor	r2,zero,r2
  8006f4:	1080008c 	andi	r2,r2,2
  8006f8:	e0bfff45 	stb	r2,-3(fp)

            // make the pulses short, and control leds
            if (vp) {
  8006fc:	d0a62143 	ldbu	r2,-26491(gp)
  800700:	10803fcc 	andi	r2,r2,255
  800704:	10000826 	beq	r2,zero,800728 <main+0x138>
                vp = 0;
  800708:	d0262145 	stb	zero,-26491(gp)
                IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 0x0F); // upper 4 if VP
  80070c:	00804074 	movhi	r2,257
  800710:	10841c04 	addi	r2,r2,4208
  800714:	10800037 	ldwio	r2,0(r2)
  800718:	10c003d4 	ori	r3,r2,15
  80071c:	00804074 	movhi	r2,257
  800720:	10841c04 	addi	r2,r2,4208
  800724:	10c00035 	stwio	r3,0(r2)
            }
            if (ap) {
  800728:	d0a62183 	ldbu	r2,-26490(gp)
  80072c:	10803fcc 	andi	r2,r2,255
  800730:	10002a26 	beq	r2,zero,8007dc <main+0x1ec>
                ap = 0;
  800734:	d0262185 	stb	zero,-26490(gp)
                IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE) | 0xF0); // lower 4 if AP
  800738:	00804074 	movhi	r2,257
  80073c:	10841c04 	addi	r2,r2,4208
  800740:	10800037 	ldwio	r2,0(r2)
  800744:	10c03c14 	ori	r3,r2,240
  800748:	00804074 	movhi	r2,257
  80074c:	10841c04 	addi	r2,r2,4208
  800750:	10c00035 	stwio	r3,0(r2)
  800754:	00002106 	br	8007dc <main+0x1ec>
            }


        } else {
        	// uart control, tx and rx
            uart_rx( &char_recieve);
  800758:	d1262284 	addi	r4,gp,-26486
  80075c:	08079100 	call	807910 <uart_rx>
            if (char_recieve == 'A') {
  800760:	d0a62283 	ldbu	r2,-26486(gp)
  800764:	10803fcc 	andi	r2,r2,255
  800768:	1080201c 	xori	r2,r2,128
  80076c:	10bfe004 	addi	r2,r2,-128
  800770:	10801058 	cmpnei	r2,r2,65
  800774:	1000031e 	bne	r2,zero,800784 <main+0x194>
                extern_a_interrupt();
  800778:	08004e00 	call	8004e0 <extern_a_interrupt>
                sc_as = 1;
  80077c:	00800044 	movi	r2,1
  800780:	d0a62205 	stb	r2,-26488(gp)
            }
            if (char_recieve == 'V') {
  800784:	d0a62283 	ldbu	r2,-26486(gp)
  800788:	10803fcc 	andi	r2,r2,255
  80078c:	1080201c 	xori	r2,r2,128
  800790:	10bfe004 	addi	r2,r2,-128
  800794:	10801598 	cmpnei	r2,r2,86
  800798:	1000031e 	bne	r2,zero,8007a8 <main+0x1b8>
                extern_v_interrupt();
  80079c:	08004a40 	call	8004a4 <extern_v_interrupt>
                sc_vs = 1;
  8007a0:	00800044 	movi	r2,1
  8007a4:	d0a62245 	stb	r2,-26487(gp)
            }

            if (vp) {
  8007a8:	d0a62143 	ldbu	r2,-26491(gp)
  8007ac:	10803fcc 	andi	r2,r2,255
  8007b0:	10000326 	beq	r2,zero,8007c0 <main+0x1d0>
                vp = 0;
  8007b4:	d0262145 	stb	zero,-26491(gp)
                uart_tx('V');
  8007b8:	01001584 	movi	r4,86
  8007bc:	08078c00 	call	8078c0 <uart_tx>
            }
            if (ap) {
  8007c0:	d0a62183 	ldbu	r2,-26490(gp)
  8007c4:	10803fcc 	andi	r2,r2,255
  8007c8:	10000326 	beq	r2,zero,8007d8 <main+0x1e8>
                ap = 0;
  8007cc:	d0262185 	stb	zero,-26490(gp)
                uart_tx('A');
  8007d0:	01001044 	movi	r4,65
  8007d4:	08078c00 	call	8078c0 <uart_tx>
            }
            char_recieve = '\0';
  8007d8:	d0262285 	stb	zero,-26486(gp)

        }

        if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2) { // if its on then sccharts SW1
  8007dc:	00804074 	movhi	r2,257
  8007e0:	10842404 	addi	r2,r2,4240
  8007e4:	10800037 	ldwio	r2,0(r2)
  8007e8:	1080008c 	andi	r2,r2,2
  8007ec:	103f931e 	bne	r2,zero,80063c <__alt_mem_onchip_mem+0xff7f863c>


        } else { // c mode
            if (reset_cycle) { // a v event has occurred and timers must be reset
  8007f0:	d0a62043 	ldbu	r2,-26495(gp)
  8007f4:	10803fcc 	andi	r2,r2,255
  8007f8:	10000226 	beq	r2,zero,800804 <main+0x214>
                reset_cycle = 0; // reset everything
  8007fc:	d0262045 	stb	zero,-26495(gp)
                start_cycle();
  800800:	08002900 	call	800290 <start_cycle>
            }
            if (can_vpulse && need_v_pulse) {
  800804:	d0a62003 	ldbu	r2,-26496(gp)
  800808:	10803fcc 	andi	r2,r2,255
  80080c:	103f8b26 	beq	r2,zero,80063c <__alt_mem_onchip_mem+0xff7f863c>
  800810:	d0a620c3 	ldbu	r2,-26493(gp)
  800814:	10803fcc 	andi	r2,r2,255
  800818:	103f8826 	beq	r2,zero,80063c <__alt_mem_onchip_mem+0xff7f863c>
                need_v_pulse = 0;
  80081c:	d02620c5 	stb	zero,-26493(gp)
                vp = 1;
  800820:	00800044 	movi	r2,1
  800824:	d0a62145 	stb	r2,-26491(gp)
                reset_cycle = 1;
  800828:	00800044 	movi	r2,1
  80082c:	d0a62045 	stb	r2,-26495(gp)
            }
        }

    }
  800830:	003f8206 	br	80063c <__alt_mem_onchip_mem+0xff7f863c>

00800834 <logic>:
#include "timing.h"
#include <stdio.h>

#include "scchart_heart.h"

void logic(TickData* d) {
  800834:	defffa04 	addi	sp,sp,-24
  800838:	dfc00515 	stw	ra,20(sp)
  80083c:	df000415 	stw	fp,16(sp)
  800840:	dc800315 	stw	r18,12(sp)
  800844:	dc400215 	stw	r17,8(sp)
  800848:	dc000115 	stw	r16,4(sp)
  80084c:	df000404 	addi	fp,sp,16
  800850:	e13ffc15 	stw	r4,-16(fp)
  d->_g30 = d->_pg9;
  800854:	e0bffc17 	ldw	r2,-16(fp)
  800858:	10c063c3 	ldbu	r3,399(r2)
  80085c:	e0bffc17 	ldw	r2,-16(fp)
  800860:	10c023c5 	stb	r3,143(r2)
  if (d->_g30) {
  800864:	e0bffc17 	ldw	r2,-16(fp)
  800868:	108023c3 	ldbu	r2,143(r2)
  80086c:	10803fcc 	andi	r2,r2,255
  800870:	1080201c 	xori	r2,r2,128
  800874:	10bfe004 	addi	r2,r2,-128
  800878:	10001226 	beq	r2,zero,8008c4 <logic+0x90>
    d->_region0_null_URI += d->deltaT;
  80087c:	e13ffc17 	ldw	r4,-16(fp)
  800880:	20800717 	ldw	r2,28(r4)
  800884:	20c00817 	ldw	r3,32(r4)
  800888:	e1bffc17 	ldw	r6,-16(fp)
  80088c:	31001317 	ldw	r4,76(r6)
  800890:	31401417 	ldw	r5,80(r6)
  800894:	200d883a 	mov	r6,r4
  800898:	280f883a 	mov	r7,r5
  80089c:	1009883a 	mov	r4,r2
  8008a0:	180b883a 	mov	r5,r3
  8008a4:	08079680 	call	807968 <__adddf3>
  8008a8:	1009883a 	mov	r4,r2
  8008ac:	180b883a 	mov	r5,r3
  8008b0:	2005883a 	mov	r2,r4
  8008b4:	2807883a 	mov	r3,r5
  8008b8:	e13ffc17 	ldw	r4,-16(fp)
  8008bc:	20800715 	stw	r2,28(r4)
  8008c0:	20c00815 	stw	r3,32(r4)
  }
  d->_g31_e1 = !d->_g30;
  8008c4:	e0bffc17 	ldw	r2,-16(fp)
  8008c8:	108023c3 	ldbu	r2,143(r2)
  8008cc:	10803fcc 	andi	r2,r2,255
  8008d0:	1080201c 	xori	r2,r2,128
  8008d4:	10bfe004 	addi	r2,r2,-128
  8008d8:	1005003a 	cmpeq	r2,r2,zero
  8008dc:	1007883a 	mov	r3,r2
  8008e0:	e0bffc17 	ldw	r2,-16(fp)
  8008e4:	10c05cc5 	stb	r3,371(r2)
  d->AP = 0;
  8008e8:	e0bffc17 	ldw	r2,-16(fp)
  8008ec:	10001785 	stb	zero,94(r2)
  d->VP = 0;
  8008f0:	e0bffc17 	ldw	r2,-16(fp)
  8008f4:	100017c5 	stb	zero,95(r2)
  d->VR = 0;
  8008f8:	e0bffc17 	ldw	r2,-16(fp)
  8008fc:	10001805 	stb	zero,96(r2)
  d->AR = 0;
  800900:	e0bffc17 	ldw	r2,-16(fp)
  800904:	10001845 	stb	zero,97(r2)
  d->a = 0;
  800908:	e0bffc17 	ldw	r2,-16(fp)
  80090c:	10001885 	stb	zero,98(r2)
  d->v = 0;
  800910:	e0bffc17 	ldw	r2,-16(fp)
  800914:	100018c5 	stb	zero,99(r2)
  d->VS_i = 0;
  800918:	e0bffc17 	ldw	r2,-16(fp)
  80091c:	10001905 	stb	zero,100(r2)
  d->_pre_VS_i = d->_reg_VS_i;
  800920:	e0bffc17 	ldw	r2,-16(fp)
  800924:	10c019c3 	ldbu	r3,103(r2)
  800928:	e0bffc17 	ldw	r2,-16(fp)
  80092c:	10c01a05 	stb	r3,104(r2)
  d->_g235 = d->_pg217;
  800930:	e0bffc17 	ldw	r2,-16(fp)
  800934:	10c06403 	ldbu	r3,400(r2)
  800938:	e0bffc17 	ldw	r2,-16(fp)
  80093c:	10c04485 	stb	r3,274(r2)
  d->_cg235 = d->_pre_VS_i;
  800940:	e0bffc17 	ldw	r2,-16(fp)
  800944:	10c01a03 	ldbu	r3,104(r2)
  800948:	e0bffc17 	ldw	r2,-16(fp)
  80094c:	10c05bc5 	stb	r3,367(r2)
  d->_g236 = d->_g235 && d->_cg235;
  800950:	e0bffc17 	ldw	r2,-16(fp)
  800954:	10804483 	ldbu	r2,274(r2)
  800958:	10803fcc 	andi	r2,r2,255
  80095c:	1080201c 	xori	r2,r2,128
  800960:	10bfe004 	addi	r2,r2,-128
  800964:	10000826 	beq	r2,zero,800988 <logic+0x154>
  800968:	e0bffc17 	ldw	r2,-16(fp)
  80096c:	10805bc3 	ldbu	r2,367(r2)
  800970:	10803fcc 	andi	r2,r2,255
  800974:	1080201c 	xori	r2,r2,128
  800978:	10bfe004 	addi	r2,r2,-128
  80097c:	10000226 	beq	r2,zero,800988 <logic+0x154>
  800980:	00800044 	movi	r2,1
  800984:	00000106 	br	80098c <logic+0x158>
  800988:	0005883a 	mov	r2,zero
  80098c:	1007883a 	mov	r3,r2
  800990:	e0bffc17 	ldw	r2,-16(fp)
  800994:	10c044c5 	stb	r3,275(r2)
  if (d->_g236) {
  800998:	e0bffc17 	ldw	r2,-16(fp)
  80099c:	108044c3 	ldbu	r2,275(r2)
  8009a0:	10803fcc 	andi	r2,r2,255
  8009a4:	1080201c 	xori	r2,r2,128
  8009a8:	10bfe004 	addi	r2,r2,-128
  8009ac:	10000626 	beq	r2,zero,8009c8 <logic+0x194>
    d->v |= 1;
  8009b0:	e0bffc17 	ldw	r2,-16(fp)
  8009b4:	108018c3 	ldbu	r2,99(r2)
  8009b8:	10800054 	ori	r2,r2,1
  8009bc:	1007883a 	mov	r3,r2
  8009c0:	e0bffc17 	ldw	r2,-16(fp)
  8009c4:	10c018c5 	stb	r3,99(r2)
  }
  d->_pre_VP = d->_reg_VP;
  8009c8:	e0bffc17 	ldw	r2,-16(fp)
  8009cc:	10c01943 	ldbu	r3,101(r2)
  8009d0:	e0bffc17 	ldw	r2,-16(fp)
  8009d4:	10c01985 	stb	r3,102(r2)
  d->_g235 = d->_g235 && !d->_cg235;
  8009d8:	e0bffc17 	ldw	r2,-16(fp)
  8009dc:	10804483 	ldbu	r2,274(r2)
  8009e0:	10803fcc 	andi	r2,r2,255
  8009e4:	1080201c 	xori	r2,r2,128
  8009e8:	10bfe004 	addi	r2,r2,-128
  8009ec:	10000826 	beq	r2,zero,800a10 <logic+0x1dc>
  8009f0:	e0bffc17 	ldw	r2,-16(fp)
  8009f4:	10805bc3 	ldbu	r2,367(r2)
  8009f8:	10803fcc 	andi	r2,r2,255
  8009fc:	1080201c 	xori	r2,r2,128
  800a00:	10bfe004 	addi	r2,r2,-128
  800a04:	1000021e 	bne	r2,zero,800a10 <logic+0x1dc>
  800a08:	00800044 	movi	r2,1
  800a0c:	00000106 	br	800a14 <logic+0x1e0>
  800a10:	0005883a 	mov	r2,zero
  800a14:	1007883a 	mov	r3,r2
  800a18:	e0bffc17 	ldw	r2,-16(fp)
  800a1c:	10c04485 	stb	r3,274(r2)
  d->_cg237 = d->_pre_VP;
  800a20:	e0bffc17 	ldw	r2,-16(fp)
  800a24:	10c01983 	ldbu	r3,102(r2)
  800a28:	e0bffc17 	ldw	r2,-16(fp)
  800a2c:	10c05b85 	stb	r3,366(r2)
  d->_g238 = d->_g235 && d->_cg237;
  800a30:	e0bffc17 	ldw	r2,-16(fp)
  800a34:	10804483 	ldbu	r2,274(r2)
  800a38:	10803fcc 	andi	r2,r2,255
  800a3c:	1080201c 	xori	r2,r2,128
  800a40:	10bfe004 	addi	r2,r2,-128
  800a44:	10000826 	beq	r2,zero,800a68 <logic+0x234>
  800a48:	e0bffc17 	ldw	r2,-16(fp)
  800a4c:	10805b83 	ldbu	r2,366(r2)
  800a50:	10803fcc 	andi	r2,r2,255
  800a54:	1080201c 	xori	r2,r2,128
  800a58:	10bfe004 	addi	r2,r2,-128
  800a5c:	10000226 	beq	r2,zero,800a68 <logic+0x234>
  800a60:	00800044 	movi	r2,1
  800a64:	00000106 	br	800a6c <logic+0x238>
  800a68:	0005883a 	mov	r2,zero
  800a6c:	1007883a 	mov	r3,r2
  800a70:	e0bffc17 	ldw	r2,-16(fp)
  800a74:	10c04505 	stb	r3,276(r2)
  if (d->_g238) {
  800a78:	e0bffc17 	ldw	r2,-16(fp)
  800a7c:	10804503 	ldbu	r2,276(r2)
  800a80:	10803fcc 	andi	r2,r2,255
  800a84:	1080201c 	xori	r2,r2,128
  800a88:	10bfe004 	addi	r2,r2,-128
  800a8c:	10000626 	beq	r2,zero,800aa8 <logic+0x274>
    d->v |= 1;
  800a90:	e0bffc17 	ldw	r2,-16(fp)
  800a94:	108018c3 	ldbu	r2,99(r2)
  800a98:	10800054 	ori	r2,r2,1
  800a9c:	1007883a 	mov	r3,r2
  800aa0:	e0bffc17 	ldw	r2,-16(fp)
  800aa4:	10c018c5 	stb	r3,99(r2)
  }
  d->_g34 = d->_pg13;
  800aa8:	e0bffc17 	ldw	r2,-16(fp)
  800aac:	10c06443 	ldbu	r3,401(r2)
  800ab0:	e0bffc17 	ldw	r2,-16(fp)
  800ab4:	10c02445 	stb	r3,145(r2)
  d->_cg34 = d->v;
  800ab8:	e0bffc17 	ldw	r2,-16(fp)
  800abc:	10c018c3 	ldbu	r3,99(r2)
  800ac0:	e0bffc17 	ldw	r2,-16(fp)
  800ac4:	10c048c5 	stb	r3,291(r2)
  d->_g35 = d->_g34 && d->_cg34;
  800ac8:	e0bffc17 	ldw	r2,-16(fp)
  800acc:	10802443 	ldbu	r2,145(r2)
  800ad0:	10803fcc 	andi	r2,r2,255
  800ad4:	1080201c 	xori	r2,r2,128
  800ad8:	10bfe004 	addi	r2,r2,-128
  800adc:	10000826 	beq	r2,zero,800b00 <logic+0x2cc>
  800ae0:	e0bffc17 	ldw	r2,-16(fp)
  800ae4:	108048c3 	ldbu	r2,291(r2)
  800ae8:	10803fcc 	andi	r2,r2,255
  800aec:	1080201c 	xori	r2,r2,128
  800af0:	10bfe004 	addi	r2,r2,-128
  800af4:	10000226 	beq	r2,zero,800b00 <logic+0x2cc>
  800af8:	00800044 	movi	r2,1
  800afc:	00000106 	br	800b04 <logic+0x2d0>
  800b00:	0005883a 	mov	r2,zero
  800b04:	1007883a 	mov	r3,r2
  800b08:	e0bffc17 	ldw	r2,-16(fp)
  800b0c:	10c02485 	stb	r3,146(r2)
  if (d->_g35) {
  800b10:	e0bffc17 	ldw	r2,-16(fp)
  800b14:	10802483 	ldbu	r2,146(r2)
  800b18:	10803fcc 	andi	r2,r2,255
  800b1c:	1080201c 	xori	r2,r2,128
  800b20:	10bfe004 	addi	r2,r2,-128
  800b24:	10000326 	beq	r2,zero,800b34 <logic+0x300>
    d->_heart2_local__Atrig2 = 1;
  800b28:	e0bffc17 	ldw	r2,-16(fp)
  800b2c:	00c00044 	movi	r3,1
  800b30:	10c01ac5 	stb	r3,107(r2)
  }
  d->_cg30 = d->_heart2_local__Atrig2;
  800b34:	e0bffc17 	ldw	r2,-16(fp)
  800b38:	10c01ac3 	ldbu	r3,107(r2)
  800b3c:	e0bffc17 	ldw	r2,-16(fp)
  800b40:	10c04885 	stb	r3,290(r2)
  d->_g31 = d->_g30 && d->_cg30;
  800b44:	e0bffc17 	ldw	r2,-16(fp)
  800b48:	108023c3 	ldbu	r2,143(r2)
  800b4c:	10803fcc 	andi	r2,r2,255
  800b50:	1080201c 	xori	r2,r2,128
  800b54:	10bfe004 	addi	r2,r2,-128
  800b58:	10000826 	beq	r2,zero,800b7c <logic+0x348>
  800b5c:	e0bffc17 	ldw	r2,-16(fp)
  800b60:	10804883 	ldbu	r2,290(r2)
  800b64:	10803fcc 	andi	r2,r2,255
  800b68:	1080201c 	xori	r2,r2,128
  800b6c:	10bfe004 	addi	r2,r2,-128
  800b70:	10000226 	beq	r2,zero,800b7c <logic+0x348>
  800b74:	00800044 	movi	r2,1
  800b78:	00000106 	br	800b80 <logic+0x34c>
  800b7c:	0005883a 	mov	r2,zero
  800b80:	1007883a 	mov	r3,r2
  800b84:	e0bffc17 	ldw	r2,-16(fp)
  800b88:	10c02405 	stb	r3,144(r2)
  d->_g35_e2 = !d->_g34;
  800b8c:	e0bffc17 	ldw	r2,-16(fp)
  800b90:	10802443 	ldbu	r2,145(r2)
  800b94:	10803fcc 	andi	r2,r2,255
  800b98:	1080201c 	xori	r2,r2,128
  800b9c:	10bfe004 	addi	r2,r2,-128
  800ba0:	1005003a 	cmpeq	r2,r2,zero
  800ba4:	1007883a 	mov	r3,r2
  800ba8:	e0bffc17 	ldw	r2,-16(fp)
  800bac:	10c05d05 	stb	r3,372(r2)
  d->_g35_e2 = (d->_g31_e1 || d->_g31) && (d->_g35_e2 || d->_g35) && (d->_g31 || d->_g35);
  800bb0:	e0bffc17 	ldw	r2,-16(fp)
  800bb4:	10805cc3 	ldbu	r2,371(r2)
  800bb8:	10803fcc 	andi	r2,r2,255
  800bbc:	1080201c 	xori	r2,r2,128
  800bc0:	10bfe004 	addi	r2,r2,-128
  800bc4:	1000061e 	bne	r2,zero,800be0 <logic+0x3ac>
  800bc8:	e0bffc17 	ldw	r2,-16(fp)
  800bcc:	10802403 	ldbu	r2,144(r2)
  800bd0:	10803fcc 	andi	r2,r2,255
  800bd4:	1080201c 	xori	r2,r2,128
  800bd8:	10bfe004 	addi	r2,r2,-128
  800bdc:	10001a26 	beq	r2,zero,800c48 <logic+0x414>
  800be0:	e0bffc17 	ldw	r2,-16(fp)
  800be4:	10805d03 	ldbu	r2,372(r2)
  800be8:	10803fcc 	andi	r2,r2,255
  800bec:	1080201c 	xori	r2,r2,128
  800bf0:	10bfe004 	addi	r2,r2,-128
  800bf4:	1000061e 	bne	r2,zero,800c10 <logic+0x3dc>
  800bf8:	e0bffc17 	ldw	r2,-16(fp)
  800bfc:	10802483 	ldbu	r2,146(r2)
  800c00:	10803fcc 	andi	r2,r2,255
  800c04:	1080201c 	xori	r2,r2,128
  800c08:	10bfe004 	addi	r2,r2,-128
  800c0c:	10000e26 	beq	r2,zero,800c48 <logic+0x414>
  800c10:	e0bffc17 	ldw	r2,-16(fp)
  800c14:	10802403 	ldbu	r2,144(r2)
  800c18:	10803fcc 	andi	r2,r2,255
  800c1c:	1080201c 	xori	r2,r2,128
  800c20:	10bfe004 	addi	r2,r2,-128
  800c24:	1000061e 	bne	r2,zero,800c40 <logic+0x40c>
  800c28:	e0bffc17 	ldw	r2,-16(fp)
  800c2c:	10802483 	ldbu	r2,146(r2)
  800c30:	10803fcc 	andi	r2,r2,255
  800c34:	1080201c 	xori	r2,r2,128
  800c38:	10bfe004 	addi	r2,r2,-128
  800c3c:	10000226 	beq	r2,zero,800c48 <logic+0x414>
  800c40:	00800044 	movi	r2,1
  800c44:	00000106 	br	800c4c <logic+0x418>
  800c48:	0005883a 	mov	r2,zero
  800c4c:	1007883a 	mov	r3,r2
  800c50:	e0bffc17 	ldw	r2,-16(fp)
  800c54:	10c05d05 	stb	r3,372(r2)
  if (d->_g35_e2) {
  800c58:	e0bffc17 	ldw	r2,-16(fp)
  800c5c:	10805d03 	ldbu	r2,372(r2)
  800c60:	10803fcc 	andi	r2,r2,255
  800c64:	1080201c 	xori	r2,r2,128
  800c68:	10bfe004 	addi	r2,r2,-128
  800c6c:	10000526 	beq	r2,zero,800c84 <logic+0x450>
    d->_region0_null_URI = 0;
  800c70:	e0bffc17 	ldw	r2,-16(fp)
  800c74:	10000715 	stw	zero,28(r2)
  800c78:	10000815 	stw	zero,32(r2)
    d->ready = 0;
  800c7c:	e0bffc17 	ldw	r2,-16(fp)
  800c80:	10000605 	stb	zero,24(r2)
  }
  d->_g31 = d->_pg7_e1;
  800c84:	e0bffc17 	ldw	r2,-16(fp)
  800c88:	10c06483 	ldbu	r3,402(r2)
  800c8c:	e0bffc17 	ldw	r2,-16(fp)
  800c90:	10c02405 	stb	r3,144(r2)
  if (d->_g31) {
  800c94:	e0bffc17 	ldw	r2,-16(fp)
  800c98:	10802403 	ldbu	r2,144(r2)
  800c9c:	10803fcc 	andi	r2,r2,255
  800ca0:	1080201c 	xori	r2,r2,128
  800ca4:	10bfe004 	addi	r2,r2,-128
  800ca8:	10001226 	beq	r2,zero,800cf4 <logic+0x4c0>
    d->_region0_null_URI += d->deltaT;
  800cac:	e13ffc17 	ldw	r4,-16(fp)
  800cb0:	20800717 	ldw	r2,28(r4)
  800cb4:	20c00817 	ldw	r3,32(r4)
  800cb8:	e1bffc17 	ldw	r6,-16(fp)
  800cbc:	31001317 	ldw	r4,76(r6)
  800cc0:	31401417 	ldw	r5,80(r6)
  800cc4:	200d883a 	mov	r6,r4
  800cc8:	280f883a 	mov	r7,r5
  800ccc:	1009883a 	mov	r4,r2
  800cd0:	180b883a 	mov	r5,r3
  800cd4:	08079680 	call	807968 <__adddf3>
  800cd8:	1009883a 	mov	r4,r2
  800cdc:	180b883a 	mov	r5,r3
  800ce0:	2005883a 	mov	r2,r4
  800ce4:	2807883a 	mov	r3,r5
  800ce8:	e13ffc17 	ldw	r4,-16(fp)
  800cec:	20800715 	stw	r2,28(r4)
  800cf0:	20c00815 	stw	r3,32(r4)
  }
  d->_g31_e1 = !d->_g31;
  800cf4:	e0bffc17 	ldw	r2,-16(fp)
  800cf8:	10802403 	ldbu	r2,144(r2)
  800cfc:	10803fcc 	andi	r2,r2,255
  800d00:	1080201c 	xori	r2,r2,128
  800d04:	10bfe004 	addi	r2,r2,-128
  800d08:	1005003a 	cmpeq	r2,r2,zero
  800d0c:	1007883a 	mov	r3,r2
  800d10:	e0bffc17 	ldw	r2,-16(fp)
  800d14:	10c05cc5 	stb	r3,371(r2)
  d->_g35 = d->_pg36;
  800d18:	e0bffc17 	ldw	r2,-16(fp)
  800d1c:	10c064c3 	ldbu	r3,403(r2)
  800d20:	e0bffc17 	ldw	r2,-16(fp)
  800d24:	10c02485 	stb	r3,146(r2)
  d->_cg21 = d->_region0_null_URI >= d->URI_time;
  800d28:	e0bffc17 	ldw	r2,-16(fp)
  800d2c:	14000717 	ldw	r16,28(r2)
  800d30:	14400817 	ldw	r17,32(r2)
  800d34:	e0bffc17 	ldw	r2,-16(fp)
  800d38:	10800217 	ldw	r2,8(r2)
  800d3c:	1009883a 	mov	r4,r2
  800d40:	0808ce00 	call	808ce0 <__floatsidf>
  800d44:	1009883a 	mov	r4,r2
  800d48:	180b883a 	mov	r5,r3
  800d4c:	04800044 	movi	r18,1
  800d50:	200d883a 	mov	r6,r4
  800d54:	280f883a 	mov	r7,r5
  800d58:	8009883a 	mov	r4,r16
  800d5c:	880b883a 	mov	r5,r17
  800d60:	08082140 	call	808214 <__gedf2>
  800d64:	1000010e 	bge	r2,zero,800d6c <logic+0x538>
  800d68:	0025883a 	mov	r18,zero
  800d6c:	9007883a 	mov	r3,r18
  800d70:	e0bffc17 	ldw	r2,-16(fp)
  800d74:	10c047c5 	stb	r3,287(r2)
  d->_g22 = d->_g35 && d->_cg21;
  800d78:	e0bffc17 	ldw	r2,-16(fp)
  800d7c:	10802483 	ldbu	r2,146(r2)
  800d80:	10803fcc 	andi	r2,r2,255
  800d84:	1080201c 	xori	r2,r2,128
  800d88:	10bfe004 	addi	r2,r2,-128
  800d8c:	10000826 	beq	r2,zero,800db0 <logic+0x57c>
  800d90:	e0bffc17 	ldw	r2,-16(fp)
  800d94:	108047c3 	ldbu	r2,287(r2)
  800d98:	10803fcc 	andi	r2,r2,255
  800d9c:	1080201c 	xori	r2,r2,128
  800da0:	10bfe004 	addi	r2,r2,-128
  800da4:	10000226 	beq	r2,zero,800db0 <logic+0x57c>
  800da8:	00800044 	movi	r2,1
  800dac:	00000106 	br	800db4 <logic+0x580>
  800db0:	0005883a 	mov	r2,zero
  800db4:	1007883a 	mov	r3,r2
  800db8:	e0bffc17 	ldw	r2,-16(fp)
  800dbc:	10c02245 	stb	r3,137(r2)
  if (d->_g22) {
  800dc0:	e0bffc17 	ldw	r2,-16(fp)
  800dc4:	10802243 	ldbu	r2,137(r2)
  800dc8:	10803fcc 	andi	r2,r2,255
  800dcc:	1080201c 	xori	r2,r2,128
  800dd0:	10bfe004 	addi	r2,r2,-128
  800dd4:	10000326 	beq	r2,zero,800de4 <logic+0x5b0>
    d->_heart2_local__Atrig = 1;
  800dd8:	e0bffc17 	ldw	r2,-16(fp)
  800ddc:	00c00044 	movi	r3,1
  800de0:	10c01a45 	stb	r3,105(r2)
  }
  d->_g24 = d->_g35 && !d->_cg21;
  800de4:	e0bffc17 	ldw	r2,-16(fp)
  800de8:	10802483 	ldbu	r2,146(r2)
  800dec:	10803fcc 	andi	r2,r2,255
  800df0:	1080201c 	xori	r2,r2,128
  800df4:	10bfe004 	addi	r2,r2,-128
  800df8:	10000826 	beq	r2,zero,800e1c <logic+0x5e8>
  800dfc:	e0bffc17 	ldw	r2,-16(fp)
  800e00:	108047c3 	ldbu	r2,287(r2)
  800e04:	10803fcc 	andi	r2,r2,255
  800e08:	1080201c 	xori	r2,r2,128
  800e0c:	10bfe004 	addi	r2,r2,-128
  800e10:	1000021e 	bne	r2,zero,800e1c <logic+0x5e8>
  800e14:	00800044 	movi	r2,1
  800e18:	00000106 	br	800e20 <logic+0x5ec>
  800e1c:	0005883a 	mov	r2,zero
  800e20:	1007883a 	mov	r3,r2
  800e24:	e0bffc17 	ldw	r2,-16(fp)
  800e28:	10c022c5 	stb	r3,139(r2)
  d->_cg24 = d->v;
  800e2c:	e0bffc17 	ldw	r2,-16(fp)
  800e30:	10c018c3 	ldbu	r3,99(r2)
  800e34:	e0bffc17 	ldw	r2,-16(fp)
  800e38:	10c04785 	stb	r3,286(r2)
  d->_g25 = d->_g24 && d->_cg24;
  800e3c:	e0bffc17 	ldw	r2,-16(fp)
  800e40:	108022c3 	ldbu	r2,139(r2)
  800e44:	10803fcc 	andi	r2,r2,255
  800e48:	1080201c 	xori	r2,r2,128
  800e4c:	10bfe004 	addi	r2,r2,-128
  800e50:	10000826 	beq	r2,zero,800e74 <logic+0x640>
  800e54:	e0bffc17 	ldw	r2,-16(fp)
  800e58:	10804783 	ldbu	r2,286(r2)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080201c 	xori	r2,r2,128
  800e64:	10bfe004 	addi	r2,r2,-128
  800e68:	10000226 	beq	r2,zero,800e74 <logic+0x640>
  800e6c:	00800044 	movi	r2,1
  800e70:	00000106 	br	800e78 <logic+0x644>
  800e74:	0005883a 	mov	r2,zero
  800e78:	1007883a 	mov	r3,r2
  800e7c:	e0bffc17 	ldw	r2,-16(fp)
  800e80:	10c02305 	stb	r3,140(r2)
  if (d->_g25) {
  800e84:	e0bffc17 	ldw	r2,-16(fp)
  800e88:	10802303 	ldbu	r2,140(r2)
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	1080201c 	xori	r2,r2,128
  800e94:	10bfe004 	addi	r2,r2,-128
  800e98:	10000326 	beq	r2,zero,800ea8 <logic+0x674>
    d->_heart2_local__Atrig1 = 1;
  800e9c:	e0bffc17 	ldw	r2,-16(fp)
  800ea0:	00c00044 	movi	r3,1
  800ea4:	10c01a85 	stb	r3,106(r2)
  }
  d->_cg6 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  800ea8:	e0bffc17 	ldw	r2,-16(fp)
  800eac:	10801a43 	ldbu	r2,105(r2)
  800eb0:	10803fcc 	andi	r2,r2,255
  800eb4:	1080201c 	xori	r2,r2,128
  800eb8:	10bfe004 	addi	r2,r2,-128
  800ebc:	1000061e 	bne	r2,zero,800ed8 <logic+0x6a4>
  800ec0:	e0bffc17 	ldw	r2,-16(fp)
  800ec4:	10801a83 	ldbu	r2,106(r2)
  800ec8:	10803fcc 	andi	r2,r2,255
  800ecc:	1080201c 	xori	r2,r2,128
  800ed0:	10bfe004 	addi	r2,r2,-128
  800ed4:	10000226 	beq	r2,zero,800ee0 <logic+0x6ac>
  800ed8:	00800044 	movi	r2,1
  800edc:	00000106 	br	800ee4 <logic+0x6b0>
  800ee0:	0005883a 	mov	r2,zero
  800ee4:	1007883a 	mov	r3,r2
  800ee8:	e0bffc17 	ldw	r2,-16(fp)
  800eec:	10c045c5 	stb	r3,279(r2)
  d->_g7 = d->_g31 && d->_cg6;
  800ef0:	e0bffc17 	ldw	r2,-16(fp)
  800ef4:	10802403 	ldbu	r2,144(r2)
  800ef8:	10803fcc 	andi	r2,r2,255
  800efc:	1080201c 	xori	r2,r2,128
  800f00:	10bfe004 	addi	r2,r2,-128
  800f04:	10000826 	beq	r2,zero,800f28 <logic+0x6f4>
  800f08:	e0bffc17 	ldw	r2,-16(fp)
  800f0c:	108045c3 	ldbu	r2,279(r2)
  800f10:	10803fcc 	andi	r2,r2,255
  800f14:	1080201c 	xori	r2,r2,128
  800f18:	10bfe004 	addi	r2,r2,-128
  800f1c:	10000226 	beq	r2,zero,800f28 <logic+0x6f4>
  800f20:	00800044 	movi	r2,1
  800f24:	00000106 	br	800f2c <logic+0x6f8>
  800f28:	0005883a 	mov	r2,zero
  800f2c:	1007883a 	mov	r3,r2
  800f30:	e0bffc17 	ldw	r2,-16(fp)
  800f34:	10c01fc5 	stb	r3,127(r2)
  d->_g17 = d->_pg37;
  800f38:	e0bffc17 	ldw	r2,-16(fp)
  800f3c:	10c06503 	ldbu	r3,404(r2)
  800f40:	e0bffc17 	ldw	r2,-16(fp)
  800f44:	10c02185 	stb	r3,134(r2)
  d->_g11 = d->_pg14;
  800f48:	e0bffc17 	ldw	r2,-16(fp)
  800f4c:	10c06543 	ldbu	r3,405(r2)
  800f50:	e0bffc17 	ldw	r2,-16(fp)
  800f54:	10c02045 	stb	r3,129(r2)
  d->_g14_e2 = !(d->_g17 || d->_g11);
  800f58:	e0bffc17 	ldw	r2,-16(fp)
  800f5c:	10802183 	ldbu	r2,134(r2)
  800f60:	10803fcc 	andi	r2,r2,255
  800f64:	1080201c 	xori	r2,r2,128
  800f68:	10bfe004 	addi	r2,r2,-128
  800f6c:	1000081e 	bne	r2,zero,800f90 <logic+0x75c>
  800f70:	e0bffc17 	ldw	r2,-16(fp)
  800f74:	10802043 	ldbu	r2,129(r2)
  800f78:	10803fcc 	andi	r2,r2,255
  800f7c:	1080201c 	xori	r2,r2,128
  800f80:	10bfe004 	addi	r2,r2,-128
  800f84:	1000021e 	bne	r2,zero,800f90 <logic+0x75c>
  800f88:	00800044 	movi	r2,1
  800f8c:	00000106 	br	800f94 <logic+0x760>
  800f90:	0005883a 	mov	r2,zero
  800f94:	1007883a 	mov	r3,r2
  800f98:	e0bffc17 	ldw	r2,-16(fp)
  800f9c:	10c05c45 	stb	r3,369(r2)
  d->sleepT = 1000.0;
  800fa0:	e0fffc17 	ldw	r3,-16(fp)
  800fa4:	18001515 	stw	zero,84(r3)
  800fa8:	009023f4 	movhi	r2,16527
  800fac:	10900004 	addi	r2,r2,16384
  800fb0:	18801615 	stw	r2,88(r3)
  d->_g11 = d->_g11 || d->_g17;
  800fb4:	e0bffc17 	ldw	r2,-16(fp)
  800fb8:	10802043 	ldbu	r2,129(r2)
  800fbc:	10803fcc 	andi	r2,r2,255
  800fc0:	1080201c 	xori	r2,r2,128
  800fc4:	10bfe004 	addi	r2,r2,-128
  800fc8:	1000061e 	bne	r2,zero,800fe4 <logic+0x7b0>
  800fcc:	e0bffc17 	ldw	r2,-16(fp)
  800fd0:	10802183 	ldbu	r2,134(r2)
  800fd4:	10803fcc 	andi	r2,r2,255
  800fd8:	1080201c 	xori	r2,r2,128
  800fdc:	10bfe004 	addi	r2,r2,-128
  800fe0:	10000226 	beq	r2,zero,800fec <logic+0x7b8>
  800fe4:	00800044 	movi	r2,1
  800fe8:	00000106 	br	800ff0 <logic+0x7bc>
  800fec:	0005883a 	mov	r2,zero
  800ff0:	1007883a 	mov	r3,r2
  800ff4:	e0bffc17 	ldw	r2,-16(fp)
  800ff8:	10c02045 	stb	r3,129(r2)
  d->_cg12 = d->_region0_null_URI < d->URI_time;
  800ffc:	e0bffc17 	ldw	r2,-16(fp)
  801000:	14000717 	ldw	r16,28(r2)
  801004:	14400817 	ldw	r17,32(r2)
  801008:	e0bffc17 	ldw	r2,-16(fp)
  80100c:	10800217 	ldw	r2,8(r2)
  801010:	1009883a 	mov	r4,r2
  801014:	0808ce00 	call	808ce0 <__floatsidf>
  801018:	1009883a 	mov	r4,r2
  80101c:	180b883a 	mov	r5,r3
  801020:	04800044 	movi	r18,1
  801024:	200d883a 	mov	r6,r4
  801028:	280f883a 	mov	r7,r5
  80102c:	8009883a 	mov	r4,r16
  801030:	880b883a 	mov	r5,r17
  801034:	08082f00 	call	8082f0 <__ledf2>
  801038:	10000116 	blt	r2,zero,801040 <logic+0x80c>
  80103c:	0025883a 	mov	r18,zero
  801040:	9007883a 	mov	r3,r18
  801044:	e0bffc17 	ldw	r2,-16(fp)
  801048:	10c046c5 	stb	r3,283(r2)
  d->_g17 = d->_g11 && d->_cg12;
  80104c:	e0bffc17 	ldw	r2,-16(fp)
  801050:	10802043 	ldbu	r2,129(r2)
  801054:	10803fcc 	andi	r2,r2,255
  801058:	1080201c 	xori	r2,r2,128
  80105c:	10bfe004 	addi	r2,r2,-128
  801060:	10000826 	beq	r2,zero,801084 <logic+0x850>
  801064:	e0bffc17 	ldw	r2,-16(fp)
  801068:	108046c3 	ldbu	r2,283(r2)
  80106c:	10803fcc 	andi	r2,r2,255
  801070:	1080201c 	xori	r2,r2,128
  801074:	10bfe004 	addi	r2,r2,-128
  801078:	10000226 	beq	r2,zero,801084 <logic+0x850>
  80107c:	00800044 	movi	r2,1
  801080:	00000106 	br	801088 <logic+0x854>
  801084:	0005883a 	mov	r2,zero
  801088:	1007883a 	mov	r3,r2
  80108c:	e0bffc17 	ldw	r2,-16(fp)
  801090:	10c02185 	stb	r3,134(r2)
  if (d->_g17) {
  801094:	e0bffc17 	ldw	r2,-16(fp)
  801098:	10802183 	ldbu	r2,134(r2)
  80109c:	10803fcc 	andi	r2,r2,255
  8010a0:	1080201c 	xori	r2,r2,128
  8010a4:	10bfe004 	addi	r2,r2,-128
  8010a8:	10003426 	beq	r2,zero,80117c <logic+0x948>
    d->sleepT = (d->sleepT < (d->URI_time - d->_region0_null_URI)) ? d->sleepT : (d->URI_time - d->_region0_null_URI);
  8010ac:	e0bffc17 	ldw	r2,-16(fp)
  8010b0:	14001517 	ldw	r16,84(r2)
  8010b4:	14401617 	ldw	r17,88(r2)
  8010b8:	e0bffc17 	ldw	r2,-16(fp)
  8010bc:	10800217 	ldw	r2,8(r2)
  8010c0:	1009883a 	mov	r4,r2
  8010c4:	0808ce00 	call	808ce0 <__floatsidf>
  8010c8:	1011883a 	mov	r8,r2
  8010cc:	1813883a 	mov	r9,r3
  8010d0:	e13ffc17 	ldw	r4,-16(fp)
  8010d4:	20800717 	ldw	r2,28(r4)
  8010d8:	20c00817 	ldw	r3,32(r4)
  8010dc:	100d883a 	mov	r6,r2
  8010e0:	180f883a 	mov	r7,r3
  8010e4:	4009883a 	mov	r4,r8
  8010e8:	480b883a 	mov	r5,r9
  8010ec:	08083e40 	call	8083e4 <__subdf3>
  8010f0:	1009883a 	mov	r4,r2
  8010f4:	180b883a 	mov	r5,r3
  8010f8:	2005883a 	mov	r2,r4
  8010fc:	2807883a 	mov	r3,r5
  801100:	100d883a 	mov	r6,r2
  801104:	180f883a 	mov	r7,r3
  801108:	8009883a 	mov	r4,r16
  80110c:	880b883a 	mov	r5,r17
  801110:	08082f00 	call	8082f0 <__ledf2>
  801114:	1000040e 	bge	r2,zero,801128 <logic+0x8f4>
  801118:	e13ffc17 	ldw	r4,-16(fp)
  80111c:	20801517 	ldw	r2,84(r4)
  801120:	20c01617 	ldw	r3,88(r4)
  801124:	00001206 	br	801170 <logic+0x93c>
  801128:	e0bffc17 	ldw	r2,-16(fp)
  80112c:	10800217 	ldw	r2,8(r2)
  801130:	1009883a 	mov	r4,r2
  801134:	0808ce00 	call	808ce0 <__floatsidf>
  801138:	1011883a 	mov	r8,r2
  80113c:	1813883a 	mov	r9,r3
  801140:	e13ffc17 	ldw	r4,-16(fp)
  801144:	20800717 	ldw	r2,28(r4)
  801148:	20c00817 	ldw	r3,32(r4)
  80114c:	100d883a 	mov	r6,r2
  801150:	180f883a 	mov	r7,r3
  801154:	4009883a 	mov	r4,r8
  801158:	480b883a 	mov	r5,r9
  80115c:	08083e40 	call	8083e4 <__subdf3>
  801160:	1009883a 	mov	r4,r2
  801164:	180b883a 	mov	r5,r3
  801168:	2005883a 	mov	r2,r4
  80116c:	2807883a 	mov	r3,r5
  801170:	e13ffc17 	ldw	r4,-16(fp)
  801174:	20801515 	stw	r2,84(r4)
  801178:	20c01615 	stw	r3,88(r4)
  }
  d->_cg13 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  80117c:	e0bffc17 	ldw	r2,-16(fp)
  801180:	10801a43 	ldbu	r2,105(r2)
  801184:	10803fcc 	andi	r2,r2,255
  801188:	1080201c 	xori	r2,r2,128
  80118c:	10bfe004 	addi	r2,r2,-128
  801190:	1000061e 	bne	r2,zero,8011ac <logic+0x978>
  801194:	e0bffc17 	ldw	r2,-16(fp)
  801198:	10801a83 	ldbu	r2,106(r2)
  80119c:	10803fcc 	andi	r2,r2,255
  8011a0:	1080201c 	xori	r2,r2,128
  8011a4:	10bfe004 	addi	r2,r2,-128
  8011a8:	10000226 	beq	r2,zero,8011b4 <logic+0x980>
  8011ac:	00800044 	movi	r2,1
  8011b0:	00000106 	br	8011b8 <logic+0x984>
  8011b4:	0005883a 	mov	r2,zero
  8011b8:	1007883a 	mov	r3,r2
  8011bc:	e0bffc17 	ldw	r2,-16(fp)
  8011c0:	10c04685 	stb	r3,282(r2)
  d->_g12 = d->_g11 && !d->_cg12;
  8011c4:	e0bffc17 	ldw	r2,-16(fp)
  8011c8:	10802043 	ldbu	r2,129(r2)
  8011cc:	10803fcc 	andi	r2,r2,255
  8011d0:	1080201c 	xori	r2,r2,128
  8011d4:	10bfe004 	addi	r2,r2,-128
  8011d8:	10000826 	beq	r2,zero,8011fc <logic+0x9c8>
  8011dc:	e0bffc17 	ldw	r2,-16(fp)
  8011e0:	108046c3 	ldbu	r2,283(r2)
  8011e4:	10803fcc 	andi	r2,r2,255
  8011e8:	1080201c 	xori	r2,r2,128
  8011ec:	10bfe004 	addi	r2,r2,-128
  8011f0:	1000021e 	bne	r2,zero,8011fc <logic+0x9c8>
  8011f4:	00800044 	movi	r2,1
  8011f8:	00000106 	br	801200 <logic+0x9cc>
  8011fc:	0005883a 	mov	r2,zero
  801200:	1007883a 	mov	r3,r2
  801204:	e0bffc17 	ldw	r2,-16(fp)
  801208:	10c02085 	stb	r3,130(r2)
  d->_cg15 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  80120c:	e0bffc17 	ldw	r2,-16(fp)
  801210:	10801a43 	ldbu	r2,105(r2)
  801214:	10803fcc 	andi	r2,r2,255
  801218:	1080201c 	xori	r2,r2,128
  80121c:	10bfe004 	addi	r2,r2,-128
  801220:	1000061e 	bne	r2,zero,80123c <logic+0xa08>
  801224:	e0bffc17 	ldw	r2,-16(fp)
  801228:	10801a83 	ldbu	r2,106(r2)
  80122c:	10803fcc 	andi	r2,r2,255
  801230:	1080201c 	xori	r2,r2,128
  801234:	10bfe004 	addi	r2,r2,-128
  801238:	10000226 	beq	r2,zero,801244 <logic+0xa10>
  80123c:	00800044 	movi	r2,1
  801240:	00000106 	br	801248 <logic+0xa14>
  801244:	0005883a 	mov	r2,zero
  801248:	1007883a 	mov	r3,r2
  80124c:	e0bffc17 	ldw	r2,-16(fp)
  801250:	10c04705 	stb	r3,284(r2)
  d->_g14 = d->_g17 && d->_cg13 || d->_g12 && d->_cg15;
  801254:	e0bffc17 	ldw	r2,-16(fp)
  801258:	10802183 	ldbu	r2,134(r2)
  80125c:	10803fcc 	andi	r2,r2,255
  801260:	1080201c 	xori	r2,r2,128
  801264:	10bfe004 	addi	r2,r2,-128
  801268:	10000626 	beq	r2,zero,801284 <logic+0xa50>
  80126c:	e0bffc17 	ldw	r2,-16(fp)
  801270:	10804683 	ldbu	r2,282(r2)
  801274:	10803fcc 	andi	r2,r2,255
  801278:	1080201c 	xori	r2,r2,128
  80127c:	10bfe004 	addi	r2,r2,-128
  801280:	10000c1e 	bne	r2,zero,8012b4 <logic+0xa80>
  801284:	e0bffc17 	ldw	r2,-16(fp)
  801288:	10802083 	ldbu	r2,130(r2)
  80128c:	10803fcc 	andi	r2,r2,255
  801290:	1080201c 	xori	r2,r2,128
  801294:	10bfe004 	addi	r2,r2,-128
  801298:	10000826 	beq	r2,zero,8012bc <logic+0xa88>
  80129c:	e0bffc17 	ldw	r2,-16(fp)
  8012a0:	10804703 	ldbu	r2,284(r2)
  8012a4:	10803fcc 	andi	r2,r2,255
  8012a8:	1080201c 	xori	r2,r2,128
  8012ac:	10bfe004 	addi	r2,r2,-128
  8012b0:	10000226 	beq	r2,zero,8012bc <logic+0xa88>
  8012b4:	00800044 	movi	r2,1
  8012b8:	00000106 	br	8012c0 <logic+0xa8c>
  8012bc:	0005883a 	mov	r2,zero
  8012c0:	1007883a 	mov	r3,r2
  8012c4:	e0bffc17 	ldw	r2,-16(fp)
  8012c8:	10c02105 	stb	r3,132(r2)
  d->_g21 = !d->_g35;
  8012cc:	e0bffc17 	ldw	r2,-16(fp)
  8012d0:	10802483 	ldbu	r2,146(r2)
  8012d4:	10803fcc 	andi	r2,r2,255
  8012d8:	1080201c 	xori	r2,r2,128
  8012dc:	10bfe004 	addi	r2,r2,-128
  8012e0:	1005003a 	cmpeq	r2,r2,zero
  8012e4:	1007883a 	mov	r3,r2
  8012e8:	e0bffc17 	ldw	r2,-16(fp)
  8012ec:	10c02205 	stb	r3,136(r2)
  d->_g22 = d->_g22 || d->_g25;
  8012f0:	e0bffc17 	ldw	r2,-16(fp)
  8012f4:	10802243 	ldbu	r2,137(r2)
  8012f8:	10803fcc 	andi	r2,r2,255
  8012fc:	1080201c 	xori	r2,r2,128
  801300:	10bfe004 	addi	r2,r2,-128
  801304:	1000061e 	bne	r2,zero,801320 <logic+0xaec>
  801308:	e0bffc17 	ldw	r2,-16(fp)
  80130c:	10802303 	ldbu	r2,140(r2)
  801310:	10803fcc 	andi	r2,r2,255
  801314:	1080201c 	xori	r2,r2,128
  801318:	10bfe004 	addi	r2,r2,-128
  80131c:	10000226 	beq	r2,zero,801328 <logic+0xaf4>
  801320:	00800044 	movi	r2,1
  801324:	00000106 	br	80132c <logic+0xaf8>
  801328:	0005883a 	mov	r2,zero
  80132c:	1007883a 	mov	r3,r2
  801330:	e0bffc17 	ldw	r2,-16(fp)
  801334:	10c02245 	stb	r3,137(r2)
  d->_g25 = (d->_g31_e1 || d->_g7) && (d->_g14_e2 || d->_g14) && (d->_g21 || d->_g22) && (d->_g7 || d->_g14 || d->_g22);
  801338:	e0bffc17 	ldw	r2,-16(fp)
  80133c:	10805cc3 	ldbu	r2,371(r2)
  801340:	10803fcc 	andi	r2,r2,255
  801344:	1080201c 	xori	r2,r2,128
  801348:	10bfe004 	addi	r2,r2,-128
  80134c:	1000061e 	bne	r2,zero,801368 <logic+0xb34>
  801350:	e0bffc17 	ldw	r2,-16(fp)
  801354:	10801fc3 	ldbu	r2,127(r2)
  801358:	10803fcc 	andi	r2,r2,255
  80135c:	1080201c 	xori	r2,r2,128
  801360:	10bfe004 	addi	r2,r2,-128
  801364:	10002c26 	beq	r2,zero,801418 <logic+0xbe4>
  801368:	e0bffc17 	ldw	r2,-16(fp)
  80136c:	10805c43 	ldbu	r2,369(r2)
  801370:	10803fcc 	andi	r2,r2,255
  801374:	1080201c 	xori	r2,r2,128
  801378:	10bfe004 	addi	r2,r2,-128
  80137c:	1000061e 	bne	r2,zero,801398 <logic+0xb64>
  801380:	e0bffc17 	ldw	r2,-16(fp)
  801384:	10802103 	ldbu	r2,132(r2)
  801388:	10803fcc 	andi	r2,r2,255
  80138c:	1080201c 	xori	r2,r2,128
  801390:	10bfe004 	addi	r2,r2,-128
  801394:	10002026 	beq	r2,zero,801418 <logic+0xbe4>
  801398:	e0bffc17 	ldw	r2,-16(fp)
  80139c:	10802203 	ldbu	r2,136(r2)
  8013a0:	10803fcc 	andi	r2,r2,255
  8013a4:	1080201c 	xori	r2,r2,128
  8013a8:	10bfe004 	addi	r2,r2,-128
  8013ac:	1000061e 	bne	r2,zero,8013c8 <logic+0xb94>
  8013b0:	e0bffc17 	ldw	r2,-16(fp)
  8013b4:	10802243 	ldbu	r2,137(r2)
  8013b8:	10803fcc 	andi	r2,r2,255
  8013bc:	1080201c 	xori	r2,r2,128
  8013c0:	10bfe004 	addi	r2,r2,-128
  8013c4:	10001426 	beq	r2,zero,801418 <logic+0xbe4>
  8013c8:	e0bffc17 	ldw	r2,-16(fp)
  8013cc:	10801fc3 	ldbu	r2,127(r2)
  8013d0:	10803fcc 	andi	r2,r2,255
  8013d4:	1080201c 	xori	r2,r2,128
  8013d8:	10bfe004 	addi	r2,r2,-128
  8013dc:	10000c1e 	bne	r2,zero,801410 <logic+0xbdc>
  8013e0:	e0bffc17 	ldw	r2,-16(fp)
  8013e4:	10802103 	ldbu	r2,132(r2)
  8013e8:	10803fcc 	andi	r2,r2,255
  8013ec:	1080201c 	xori	r2,r2,128
  8013f0:	10bfe004 	addi	r2,r2,-128
  8013f4:	1000061e 	bne	r2,zero,801410 <logic+0xbdc>
  8013f8:	e0bffc17 	ldw	r2,-16(fp)
  8013fc:	10802243 	ldbu	r2,137(r2)
  801400:	10803fcc 	andi	r2,r2,255
  801404:	1080201c 	xori	r2,r2,128
  801408:	10bfe004 	addi	r2,r2,-128
  80140c:	10000226 	beq	r2,zero,801418 <logic+0xbe4>
  801410:	00800044 	movi	r2,1
  801414:	00000106 	br	80141c <logic+0xbe8>
  801418:	0005883a 	mov	r2,zero
  80141c:	1007883a 	mov	r3,r2
  801420:	e0bffc17 	ldw	r2,-16(fp)
  801424:	10c02305 	stb	r3,140(r2)
  d->_cg26 = d->_heart2_local__Atrig;
  801428:	e0bffc17 	ldw	r2,-16(fp)
  80142c:	10c01a43 	ldbu	r3,105(r2)
  801430:	e0bffc17 	ldw	r2,-16(fp)
  801434:	10c04805 	stb	r3,288(r2)
  d->_g23_e3 = d->_g25 && !d->_cg26;
  801438:	e0bffc17 	ldw	r2,-16(fp)
  80143c:	10802303 	ldbu	r2,140(r2)
  801440:	10803fcc 	andi	r2,r2,255
  801444:	1080201c 	xori	r2,r2,128
  801448:	10bfe004 	addi	r2,r2,-128
  80144c:	10000826 	beq	r2,zero,801470 <logic+0xc3c>
  801450:	e0bffc17 	ldw	r2,-16(fp)
  801454:	10804803 	ldbu	r2,288(r2)
  801458:	10803fcc 	andi	r2,r2,255
  80145c:	1080201c 	xori	r2,r2,128
  801460:	10bfe004 	addi	r2,r2,-128
  801464:	1000021e 	bne	r2,zero,801470 <logic+0xc3c>
  801468:	00800044 	movi	r2,1
  80146c:	00000106 	br	801474 <logic+0xc40>
  801470:	0005883a 	mov	r2,zero
  801474:	1007883a 	mov	r3,r2
  801478:	e0bffc17 	ldw	r2,-16(fp)
  80147c:	10c05c85 	stb	r3,370(r2)
  if (d->_g23_e3) {
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	10805c83 	ldbu	r2,370(r2)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	10000326 	beq	r2,zero,8014a4 <logic+0xc70>
    d->_region0_null_URI = 0;
  801498:	e0bffc17 	ldw	r2,-16(fp)
  80149c:	10000715 	stw	zero,28(r2)
  8014a0:	10000815 	stw	zero,32(r2)
  }
  d->_g23 = d->_GO || d->_g35_e2 || d->_g23_e3;
  8014a4:	e0bffc17 	ldw	r2,-16(fp)
  8014a8:	10804543 	ldbu	r2,277(r2)
  8014ac:	10803fcc 	andi	r2,r2,255
  8014b0:	1080201c 	xori	r2,r2,128
  8014b4:	10bfe004 	addi	r2,r2,-128
  8014b8:	10000c1e 	bne	r2,zero,8014ec <logic+0xcb8>
  8014bc:	e0bffc17 	ldw	r2,-16(fp)
  8014c0:	10805d03 	ldbu	r2,372(r2)
  8014c4:	10803fcc 	andi	r2,r2,255
  8014c8:	1080201c 	xori	r2,r2,128
  8014cc:	10bfe004 	addi	r2,r2,-128
  8014d0:	1000061e 	bne	r2,zero,8014ec <logic+0xcb8>
  8014d4:	e0bffc17 	ldw	r2,-16(fp)
  8014d8:	10805c83 	ldbu	r2,370(r2)
  8014dc:	10803fcc 	andi	r2,r2,255
  8014e0:	1080201c 	xori	r2,r2,128
  8014e4:	10bfe004 	addi	r2,r2,-128
  8014e8:	10000226 	beq	r2,zero,8014f4 <logic+0xcc0>
  8014ec:	00800044 	movi	r2,1
  8014f0:	00000106 	br	8014f8 <logic+0xcc4>
  8014f4:	0005883a 	mov	r2,zero
  8014f8:	1007883a 	mov	r3,r2
  8014fc:	e0bffc17 	ldw	r2,-16(fp)
  801500:	10c02285 	stb	r3,138(r2)
  if (d->_g23) {
  801504:	e0bffc17 	ldw	r2,-16(fp)
  801508:	10802283 	ldbu	r2,138(r2)
  80150c:	10803fcc 	andi	r2,r2,255
  801510:	1080201c 	xori	r2,r2,128
  801514:	10bfe004 	addi	r2,r2,-128
  801518:	10000426 	beq	r2,zero,80152c <logic+0xcf8>
    d->_heart2_local__Atrig = 0;
  80151c:	e0bffc17 	ldw	r2,-16(fp)
  801520:	10001a45 	stb	zero,105(r2)
    d->_heart2_local__Atrig1 = 0;
  801524:	e0bffc17 	ldw	r2,-16(fp)
  801528:	10001a85 	stb	zero,106(r2)
  }
  d->_cg4 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  80152c:	e0bffc17 	ldw	r2,-16(fp)
  801530:	10801a43 	ldbu	r2,105(r2)
  801534:	10803fcc 	andi	r2,r2,255
  801538:	1080201c 	xori	r2,r2,128
  80153c:	10bfe004 	addi	r2,r2,-128
  801540:	1000061e 	bne	r2,zero,80155c <logic+0xd28>
  801544:	e0bffc17 	ldw	r2,-16(fp)
  801548:	10801a83 	ldbu	r2,106(r2)
  80154c:	10803fcc 	andi	r2,r2,255
  801550:	1080201c 	xori	r2,r2,128
  801554:	10bfe004 	addi	r2,r2,-128
  801558:	10000226 	beq	r2,zero,801564 <logic+0xd30>
  80155c:	00800044 	movi	r2,1
  801560:	00000106 	br	801568 <logic+0xd34>
  801564:	0005883a 	mov	r2,zero
  801568:	1007883a 	mov	r3,r2
  80156c:	e0bffc17 	ldw	r2,-16(fp)
  801570:	10c04585 	stb	r3,278(r2)
  d->_g7_e1 = d->_g23 && !d->_cg4 || d->_g31 && !d->_cg6;
  801574:	e0bffc17 	ldw	r2,-16(fp)
  801578:	10802283 	ldbu	r2,138(r2)
  80157c:	10803fcc 	andi	r2,r2,255
  801580:	1080201c 	xori	r2,r2,128
  801584:	10bfe004 	addi	r2,r2,-128
  801588:	10000626 	beq	r2,zero,8015a4 <logic+0xd70>
  80158c:	e0bffc17 	ldw	r2,-16(fp)
  801590:	10804583 	ldbu	r2,278(r2)
  801594:	10803fcc 	andi	r2,r2,255
  801598:	1080201c 	xori	r2,r2,128
  80159c:	10bfe004 	addi	r2,r2,-128
  8015a0:	10000c26 	beq	r2,zero,8015d4 <logic+0xda0>
  8015a4:	e0bffc17 	ldw	r2,-16(fp)
  8015a8:	10802403 	ldbu	r2,144(r2)
  8015ac:	10803fcc 	andi	r2,r2,255
  8015b0:	1080201c 	xori	r2,r2,128
  8015b4:	10bfe004 	addi	r2,r2,-128
  8015b8:	10000826 	beq	r2,zero,8015dc <logic+0xda8>
  8015bc:	e0bffc17 	ldw	r2,-16(fp)
  8015c0:	108045c3 	ldbu	r2,279(r2)
  8015c4:	10803fcc 	andi	r2,r2,255
  8015c8:	1080201c 	xori	r2,r2,128
  8015cc:	10bfe004 	addi	r2,r2,-128
  8015d0:	1000021e 	bne	r2,zero,8015dc <logic+0xda8>
  8015d4:	00800044 	movi	r2,1
  8015d8:	00000106 	br	8015e0 <logic+0xdac>
  8015dc:	0005883a 	mov	r2,zero
  8015e0:	1007883a 	mov	r3,r2
  8015e4:	e0bffc17 	ldw	r2,-16(fp)
  8015e8:	10c05c05 	stb	r3,368(r2)
  d->_cg8 = d->_region0_null_URI < d->URI_time;
  8015ec:	e0bffc17 	ldw	r2,-16(fp)
  8015f0:	14000717 	ldw	r16,28(r2)
  8015f4:	14400817 	ldw	r17,32(r2)
  8015f8:	e0bffc17 	ldw	r2,-16(fp)
  8015fc:	10800217 	ldw	r2,8(r2)
  801600:	1009883a 	mov	r4,r2
  801604:	0808ce00 	call	808ce0 <__floatsidf>
  801608:	1009883a 	mov	r4,r2
  80160c:	180b883a 	mov	r5,r3
  801610:	04800044 	movi	r18,1
  801614:	200d883a 	mov	r6,r4
  801618:	280f883a 	mov	r7,r5
  80161c:	8009883a 	mov	r4,r16
  801620:	880b883a 	mov	r5,r17
  801624:	08082f00 	call	8082f0 <__ledf2>
  801628:	10000116 	blt	r2,zero,801630 <logic+0xdfc>
  80162c:	0025883a 	mov	r18,zero
  801630:	9007883a 	mov	r3,r18
  801634:	e0bffc17 	ldw	r2,-16(fp)
  801638:	10c04605 	stb	r3,280(r2)
  d->_g7 = d->_g23 && d->_cg8;
  80163c:	e0bffc17 	ldw	r2,-16(fp)
  801640:	10802283 	ldbu	r2,138(r2)
  801644:	10803fcc 	andi	r2,r2,255
  801648:	1080201c 	xori	r2,r2,128
  80164c:	10bfe004 	addi	r2,r2,-128
  801650:	10000826 	beq	r2,zero,801674 <logic+0xe40>
  801654:	e0bffc17 	ldw	r2,-16(fp)
  801658:	10804603 	ldbu	r2,280(r2)
  80165c:	10803fcc 	andi	r2,r2,255
  801660:	1080201c 	xori	r2,r2,128
  801664:	10bfe004 	addi	r2,r2,-128
  801668:	10000226 	beq	r2,zero,801674 <logic+0xe40>
  80166c:	00800044 	movi	r2,1
  801670:	00000106 	br	801678 <logic+0xe44>
  801674:	0005883a 	mov	r2,zero
  801678:	1007883a 	mov	r3,r2
  80167c:	e0bffc17 	ldw	r2,-16(fp)
  801680:	10c01fc5 	stb	r3,127(r2)
  if (d->_g7) {
  801684:	e0bffc17 	ldw	r2,-16(fp)
  801688:	10801fc3 	ldbu	r2,127(r2)
  80168c:	10803fcc 	andi	r2,r2,255
  801690:	1080201c 	xori	r2,r2,128
  801694:	10bfe004 	addi	r2,r2,-128
  801698:	10003426 	beq	r2,zero,80176c <logic+0xf38>
    d->sleepT = (d->sleepT < (d->URI_time - d->_region0_null_URI)) ? d->sleepT : (d->URI_time - d->_region0_null_URI);
  80169c:	e0bffc17 	ldw	r2,-16(fp)
  8016a0:	14001517 	ldw	r16,84(r2)
  8016a4:	14401617 	ldw	r17,88(r2)
  8016a8:	e0bffc17 	ldw	r2,-16(fp)
  8016ac:	10800217 	ldw	r2,8(r2)
  8016b0:	1009883a 	mov	r4,r2
  8016b4:	0808ce00 	call	808ce0 <__floatsidf>
  8016b8:	1011883a 	mov	r8,r2
  8016bc:	1813883a 	mov	r9,r3
  8016c0:	e13ffc17 	ldw	r4,-16(fp)
  8016c4:	20800717 	ldw	r2,28(r4)
  8016c8:	20c00817 	ldw	r3,32(r4)
  8016cc:	100d883a 	mov	r6,r2
  8016d0:	180f883a 	mov	r7,r3
  8016d4:	4009883a 	mov	r4,r8
  8016d8:	480b883a 	mov	r5,r9
  8016dc:	08083e40 	call	8083e4 <__subdf3>
  8016e0:	1009883a 	mov	r4,r2
  8016e4:	180b883a 	mov	r5,r3
  8016e8:	2005883a 	mov	r2,r4
  8016ec:	2807883a 	mov	r3,r5
  8016f0:	100d883a 	mov	r6,r2
  8016f4:	180f883a 	mov	r7,r3
  8016f8:	8009883a 	mov	r4,r16
  8016fc:	880b883a 	mov	r5,r17
  801700:	08082f00 	call	8082f0 <__ledf2>
  801704:	1000040e 	bge	r2,zero,801718 <logic+0xee4>
  801708:	e13ffc17 	ldw	r4,-16(fp)
  80170c:	20801517 	ldw	r2,84(r4)
  801710:	20c01617 	ldw	r3,88(r4)
  801714:	00001206 	br	801760 <logic+0xf2c>
  801718:	e0bffc17 	ldw	r2,-16(fp)
  80171c:	10800217 	ldw	r2,8(r2)
  801720:	1009883a 	mov	r4,r2
  801724:	0808ce00 	call	808ce0 <__floatsidf>
  801728:	1011883a 	mov	r8,r2
  80172c:	1813883a 	mov	r9,r3
  801730:	e13ffc17 	ldw	r4,-16(fp)
  801734:	20800717 	ldw	r2,28(r4)
  801738:	20c00817 	ldw	r3,32(r4)
  80173c:	100d883a 	mov	r6,r2
  801740:	180f883a 	mov	r7,r3
  801744:	4009883a 	mov	r4,r8
  801748:	480b883a 	mov	r5,r9
  80174c:	08083e40 	call	8083e4 <__subdf3>
  801750:	1009883a 	mov	r4,r2
  801754:	180b883a 	mov	r5,r3
  801758:	2005883a 	mov	r2,r4
  80175c:	2807883a 	mov	r3,r5
  801760:	e13ffc17 	ldw	r4,-16(fp)
  801764:	20801515 	stw	r2,84(r4)
  801768:	20c01615 	stw	r3,88(r4)
  }
  d->_cg9 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  80176c:	e0bffc17 	ldw	r2,-16(fp)
  801770:	10801a43 	ldbu	r2,105(r2)
  801774:	10803fcc 	andi	r2,r2,255
  801778:	1080201c 	xori	r2,r2,128
  80177c:	10bfe004 	addi	r2,r2,-128
  801780:	1000061e 	bne	r2,zero,80179c <logic+0xf68>
  801784:	e0bffc17 	ldw	r2,-16(fp)
  801788:	10801a83 	ldbu	r2,106(r2)
  80178c:	10803fcc 	andi	r2,r2,255
  801790:	1080201c 	xori	r2,r2,128
  801794:	10bfe004 	addi	r2,r2,-128
  801798:	10000226 	beq	r2,zero,8017a4 <logic+0xf70>
  80179c:	00800044 	movi	r2,1
  8017a0:	00000106 	br	8017a8 <logic+0xf74>
  8017a4:	0005883a 	mov	r2,zero
  8017a8:	1007883a 	mov	r3,r2
  8017ac:	e0bffc17 	ldw	r2,-16(fp)
  8017b0:	10c04645 	stb	r3,281(r2)
  d->_g14 = d->_g7 && !d->_cg9 || d->_g17 && !d->_cg13;
  8017b4:	e0bffc17 	ldw	r2,-16(fp)
  8017b8:	10801fc3 	ldbu	r2,127(r2)
  8017bc:	10803fcc 	andi	r2,r2,255
  8017c0:	1080201c 	xori	r2,r2,128
  8017c4:	10bfe004 	addi	r2,r2,-128
  8017c8:	10000626 	beq	r2,zero,8017e4 <logic+0xfb0>
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	10804643 	ldbu	r2,281(r2)
  8017d4:	10803fcc 	andi	r2,r2,255
  8017d8:	1080201c 	xori	r2,r2,128
  8017dc:	10bfe004 	addi	r2,r2,-128
  8017e0:	10000c26 	beq	r2,zero,801814 <logic+0xfe0>
  8017e4:	e0bffc17 	ldw	r2,-16(fp)
  8017e8:	10802183 	ldbu	r2,134(r2)
  8017ec:	10803fcc 	andi	r2,r2,255
  8017f0:	1080201c 	xori	r2,r2,128
  8017f4:	10bfe004 	addi	r2,r2,-128
  8017f8:	10000826 	beq	r2,zero,80181c <logic+0xfe8>
  8017fc:	e0bffc17 	ldw	r2,-16(fp)
  801800:	10804683 	ldbu	r2,282(r2)
  801804:	10803fcc 	andi	r2,r2,255
  801808:	1080201c 	xori	r2,r2,128
  80180c:	10bfe004 	addi	r2,r2,-128
  801810:	1000021e 	bne	r2,zero,80181c <logic+0xfe8>
  801814:	00800044 	movi	r2,1
  801818:	00000106 	br	801820 <logic+0xfec>
  80181c:	0005883a 	mov	r2,zero
  801820:	1007883a 	mov	r3,r2
  801824:	e0bffc17 	ldw	r2,-16(fp)
  801828:	10c02105 	stb	r3,132(r2)
  d->_g14_e2 = d->_g23 && !d->_cg8;
  80182c:	e0bffc17 	ldw	r2,-16(fp)
  801830:	10802283 	ldbu	r2,138(r2)
  801834:	10803fcc 	andi	r2,r2,255
  801838:	1080201c 	xori	r2,r2,128
  80183c:	10bfe004 	addi	r2,r2,-128
  801840:	10000826 	beq	r2,zero,801864 <logic+0x1030>
  801844:	e0bffc17 	ldw	r2,-16(fp)
  801848:	10804603 	ldbu	r2,280(r2)
  80184c:	10803fcc 	andi	r2,r2,255
  801850:	1080201c 	xori	r2,r2,128
  801854:	10bfe004 	addi	r2,r2,-128
  801858:	1000021e 	bne	r2,zero,801864 <logic+0x1030>
  80185c:	00800044 	movi	r2,1
  801860:	00000106 	br	801868 <logic+0x1034>
  801864:	0005883a 	mov	r2,zero
  801868:	1007883a 	mov	r3,r2
  80186c:	e0bffc17 	ldw	r2,-16(fp)
  801870:	10c05c45 	stb	r3,369(r2)
  d->_cg18 = d->_heart2_local__Atrig || d->_heart2_local__Atrig1;
  801874:	e0bffc17 	ldw	r2,-16(fp)
  801878:	10801a43 	ldbu	r2,105(r2)
  80187c:	10803fcc 	andi	r2,r2,255
  801880:	1080201c 	xori	r2,r2,128
  801884:	10bfe004 	addi	r2,r2,-128
  801888:	1000061e 	bne	r2,zero,8018a4 <logic+0x1070>
  80188c:	e0bffc17 	ldw	r2,-16(fp)
  801890:	10801a83 	ldbu	r2,106(r2)
  801894:	10803fcc 	andi	r2,r2,255
  801898:	1080201c 	xori	r2,r2,128
  80189c:	10bfe004 	addi	r2,r2,-128
  8018a0:	10000226 	beq	r2,zero,8018ac <logic+0x1078>
  8018a4:	00800044 	movi	r2,1
  8018a8:	00000106 	br	8018b0 <logic+0x107c>
  8018ac:	0005883a 	mov	r2,zero
  8018b0:	1007883a 	mov	r3,r2
  8018b4:	e0bffc17 	ldw	r2,-16(fp)
  8018b8:	10c04745 	stb	r3,285(r2)
  d->_g37 = d->_g12 && !d->_cg15 || d->_g14_e2 && !d->_cg18;
  8018bc:	e0bffc17 	ldw	r2,-16(fp)
  8018c0:	10802083 	ldbu	r2,130(r2)
  8018c4:	10803fcc 	andi	r2,r2,255
  8018c8:	1080201c 	xori	r2,r2,128
  8018cc:	10bfe004 	addi	r2,r2,-128
  8018d0:	10000626 	beq	r2,zero,8018ec <logic+0x10b8>
  8018d4:	e0bffc17 	ldw	r2,-16(fp)
  8018d8:	10804703 	ldbu	r2,284(r2)
  8018dc:	10803fcc 	andi	r2,r2,255
  8018e0:	1080201c 	xori	r2,r2,128
  8018e4:	10bfe004 	addi	r2,r2,-128
  8018e8:	10000c26 	beq	r2,zero,80191c <logic+0x10e8>
  8018ec:	e0bffc17 	ldw	r2,-16(fp)
  8018f0:	10805c43 	ldbu	r2,369(r2)
  8018f4:	10803fcc 	andi	r2,r2,255
  8018f8:	1080201c 	xori	r2,r2,128
  8018fc:	10bfe004 	addi	r2,r2,-128
  801900:	10000826 	beq	r2,zero,801924 <logic+0x10f0>
  801904:	e0bffc17 	ldw	r2,-16(fp)
  801908:	10804743 	ldbu	r2,285(r2)
  80190c:	10803fcc 	andi	r2,r2,255
  801910:	1080201c 	xori	r2,r2,128
  801914:	10bfe004 	addi	r2,r2,-128
  801918:	1000021e 	bne	r2,zero,801924 <logic+0x10f0>
  80191c:	00800044 	movi	r2,1
  801920:	00000106 	br	801928 <logic+0x10f4>
  801924:	0005883a 	mov	r2,zero
  801928:	1007883a 	mov	r3,r2
  80192c:	e0bffc17 	ldw	r2,-16(fp)
  801930:	10c02505 	stb	r3,148(r2)
  d->_g36 = d->_g23 || d->_g24 && !d->_cg24;
  801934:	e0bffc17 	ldw	r2,-16(fp)
  801938:	10802283 	ldbu	r2,138(r2)
  80193c:	10803fcc 	andi	r2,r2,255
  801940:	1080201c 	xori	r2,r2,128
  801944:	10bfe004 	addi	r2,r2,-128
  801948:	10000c1e 	bne	r2,zero,80197c <logic+0x1148>
  80194c:	e0bffc17 	ldw	r2,-16(fp)
  801950:	108022c3 	ldbu	r2,139(r2)
  801954:	10803fcc 	andi	r2,r2,255
  801958:	1080201c 	xori	r2,r2,128
  80195c:	10bfe004 	addi	r2,r2,-128
  801960:	10000826 	beq	r2,zero,801984 <logic+0x1150>
  801964:	e0bffc17 	ldw	r2,-16(fp)
  801968:	10804783 	ldbu	r2,286(r2)
  80196c:	10803fcc 	andi	r2,r2,255
  801970:	1080201c 	xori	r2,r2,128
  801974:	10bfe004 	addi	r2,r2,-128
  801978:	1000021e 	bne	r2,zero,801984 <logic+0x1150>
  80197c:	00800044 	movi	r2,1
  801980:	00000106 	br	801988 <logic+0x1154>
  801984:	0005883a 	mov	r2,zero
  801988:	1007883a 	mov	r3,r2
  80198c:	e0bffc17 	ldw	r2,-16(fp)
  801990:	10c024c5 	stb	r3,147(r2)
  d->_g6 = d->_g25 && d->_cg26;
  801994:	e0bffc17 	ldw	r2,-16(fp)
  801998:	10802303 	ldbu	r2,140(r2)
  80199c:	10803fcc 	andi	r2,r2,255
  8019a0:	1080201c 	xori	r2,r2,128
  8019a4:	10bfe004 	addi	r2,r2,-128
  8019a8:	10000826 	beq	r2,zero,8019cc <logic+0x1198>
  8019ac:	e0bffc17 	ldw	r2,-16(fp)
  8019b0:	10804803 	ldbu	r2,288(r2)
  8019b4:	10803fcc 	andi	r2,r2,255
  8019b8:	1080201c 	xori	r2,r2,128
  8019bc:	10bfe004 	addi	r2,r2,-128
  8019c0:	10000226 	beq	r2,zero,8019cc <logic+0x1198>
  8019c4:	00800044 	movi	r2,1
  8019c8:	00000106 	br	8019d0 <logic+0x119c>
  8019cc:	0005883a 	mov	r2,zero
  8019d0:	1007883a 	mov	r3,r2
  8019d4:	e0bffc17 	ldw	r2,-16(fp)
  8019d8:	10c01f85 	stb	r3,126(r2)
  if (d->_g6) {
  8019dc:	e0bffc17 	ldw	r2,-16(fp)
  8019e0:	10801f83 	ldbu	r2,126(r2)
  8019e4:	10803fcc 	andi	r2,r2,255
  8019e8:	1080201c 	xori	r2,r2,128
  8019ec:	10bfe004 	addi	r2,r2,-128
  8019f0:	10000526 	beq	r2,zero,801a08 <logic+0x11d4>
    d->ready = 1;
  8019f4:	e0bffc17 	ldw	r2,-16(fp)
  8019f8:	00c00044 	movi	r3,1
  8019fc:	10c00605 	stb	r3,24(r2)
    d->_heart2_local__Atrig2 = 0;
  801a00:	e0bffc17 	ldw	r2,-16(fp)
  801a04:	10001ac5 	stb	zero,107(r2)
  }
  d->_cg28 = d->_heart2_local__Atrig2;
  801a08:	e0bffc17 	ldw	r2,-16(fp)
  801a0c:	10c01ac3 	ldbu	r3,107(r2)
  801a10:	e0bffc17 	ldw	r2,-16(fp)
  801a14:	10c04845 	stb	r3,289(r2)
  d->_g9 = d->_g6 && !d->_cg28 || d->_g30 && !d->_cg30;
  801a18:	e0bffc17 	ldw	r2,-16(fp)
  801a1c:	10801f83 	ldbu	r2,126(r2)
  801a20:	10803fcc 	andi	r2,r2,255
  801a24:	1080201c 	xori	r2,r2,128
  801a28:	10bfe004 	addi	r2,r2,-128
  801a2c:	10000626 	beq	r2,zero,801a48 <logic+0x1214>
  801a30:	e0bffc17 	ldw	r2,-16(fp)
  801a34:	10804843 	ldbu	r2,289(r2)
  801a38:	10803fcc 	andi	r2,r2,255
  801a3c:	1080201c 	xori	r2,r2,128
  801a40:	10bfe004 	addi	r2,r2,-128
  801a44:	10000c26 	beq	r2,zero,801a78 <logic+0x1244>
  801a48:	e0bffc17 	ldw	r2,-16(fp)
  801a4c:	108023c3 	ldbu	r2,143(r2)
  801a50:	10803fcc 	andi	r2,r2,255
  801a54:	1080201c 	xori	r2,r2,128
  801a58:	10bfe004 	addi	r2,r2,-128
  801a5c:	10000826 	beq	r2,zero,801a80 <logic+0x124c>
  801a60:	e0bffc17 	ldw	r2,-16(fp)
  801a64:	10804883 	ldbu	r2,290(r2)
  801a68:	10803fcc 	andi	r2,r2,255
  801a6c:	1080201c 	xori	r2,r2,128
  801a70:	10bfe004 	addi	r2,r2,-128
  801a74:	1000021e 	bne	r2,zero,801a80 <logic+0x124c>
  801a78:	00800044 	movi	r2,1
  801a7c:	00000106 	br	801a84 <logic+0x1250>
  801a80:	0005883a 	mov	r2,zero
  801a84:	1007883a 	mov	r3,r2
  801a88:	e0bffc17 	ldw	r2,-16(fp)
  801a8c:	10c02005 	stb	r3,128(r2)
  d->_g13 = d->_g6 || d->_g34 && !d->_cg34;
  801a90:	e0bffc17 	ldw	r2,-16(fp)
  801a94:	10801f83 	ldbu	r2,126(r2)
  801a98:	10803fcc 	andi	r2,r2,255
  801a9c:	1080201c 	xori	r2,r2,128
  801aa0:	10bfe004 	addi	r2,r2,-128
  801aa4:	10000c1e 	bne	r2,zero,801ad8 <logic+0x12a4>
  801aa8:	e0bffc17 	ldw	r2,-16(fp)
  801aac:	10802443 	ldbu	r2,145(r2)
  801ab0:	10803fcc 	andi	r2,r2,255
  801ab4:	1080201c 	xori	r2,r2,128
  801ab8:	10bfe004 	addi	r2,r2,-128
  801abc:	10000826 	beq	r2,zero,801ae0 <logic+0x12ac>
  801ac0:	e0bffc17 	ldw	r2,-16(fp)
  801ac4:	108048c3 	ldbu	r2,291(r2)
  801ac8:	10803fcc 	andi	r2,r2,255
  801acc:	1080201c 	xori	r2,r2,128
  801ad0:	10bfe004 	addi	r2,r2,-128
  801ad4:	1000021e 	bne	r2,zero,801ae0 <logic+0x12ac>
  801ad8:	00800044 	movi	r2,1
  801adc:	00000106 	br	801ae4 <logic+0x12b0>
  801ae0:	0005883a 	mov	r2,zero
  801ae4:	1007883a 	mov	r3,r2
  801ae8:	e0bffc17 	ldw	r2,-16(fp)
  801aec:	10c020c5 	stb	r3,131(r2)
  d->_g15 = d->_pg46;
  801af0:	e0bffc17 	ldw	r2,-16(fp)
  801af4:	10c06583 	ldbu	r3,406(r2)
  801af8:	e0bffc17 	ldw	r2,-16(fp)
  801afc:	10c02145 	stb	r3,133(r2)
  if (d->_g15) {
  801b00:	e0bffc17 	ldw	r2,-16(fp)
  801b04:	10802143 	ldbu	r2,133(r2)
  801b08:	10803fcc 	andi	r2,r2,255
  801b0c:	1080201c 	xori	r2,r2,128
  801b10:	10bfe004 	addi	r2,r2,-128
  801b14:	10001226 	beq	r2,zero,801b60 <logic+0x132c>
    d->_region1_null_LRI += d->deltaT;
  801b18:	e13ffc17 	ldw	r4,-16(fp)
  801b1c:	20800917 	ldw	r2,36(r4)
  801b20:	20c00a17 	ldw	r3,40(r4)
  801b24:	e1bffc17 	ldw	r6,-16(fp)
  801b28:	31001317 	ldw	r4,76(r6)
  801b2c:	31401417 	ldw	r5,80(r6)
  801b30:	200d883a 	mov	r6,r4
  801b34:	280f883a 	mov	r7,r5
  801b38:	1009883a 	mov	r4,r2
  801b3c:	180b883a 	mov	r5,r3
  801b40:	08079680 	call	807968 <__adddf3>
  801b44:	1009883a 	mov	r4,r2
  801b48:	180b883a 	mov	r5,r3
  801b4c:	2005883a 	mov	r2,r4
  801b50:	2807883a 	mov	r3,r5
  801b54:	e13ffc17 	ldw	r4,-16(fp)
  801b58:	20800915 	stw	r2,36(r4)
  801b5c:	20c00a15 	stw	r3,40(r4)
  }
  d->_g18 = !d->_g15;
  801b60:	e0bffc17 	ldw	r2,-16(fp)
  801b64:	10802143 	ldbu	r2,133(r2)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1080201c 	xori	r2,r2,128
  801b70:	10bfe004 	addi	r2,r2,-128
  801b74:	1005003a 	cmpeq	r2,r2,zero
  801b78:	1007883a 	mov	r3,r2
  801b7c:	e0bffc17 	ldw	r2,-16(fp)
  801b80:	10c021c5 	stb	r3,135(r2)
  d->_g24 = d->_pg50;
  801b84:	e0bffc17 	ldw	r2,-16(fp)
  801b88:	10c065c3 	ldbu	r3,407(r2)
  801b8c:	e0bffc17 	ldw	r2,-16(fp)
  801b90:	10c022c5 	stb	r3,139(r2)
  d->_cg71 = d->v;
  801b94:	e0bffc17 	ldw	r2,-16(fp)
  801b98:	10c018c3 	ldbu	r3,99(r2)
  801b9c:	e0bffc17 	ldw	r2,-16(fp)
  801ba0:	10c04c45 	stb	r3,305(r2)
  d->_g3 = d->_g24 && d->_cg71;
  801ba4:	e0bffc17 	ldw	r2,-16(fp)
  801ba8:	108022c3 	ldbu	r2,139(r2)
  801bac:	10803fcc 	andi	r2,r2,255
  801bb0:	1080201c 	xori	r2,r2,128
  801bb4:	10bfe004 	addi	r2,r2,-128
  801bb8:	10000826 	beq	r2,zero,801bdc <logic+0x13a8>
  801bbc:	e0bffc17 	ldw	r2,-16(fp)
  801bc0:	10804c43 	ldbu	r2,305(r2)
  801bc4:	10803fcc 	andi	r2,r2,255
  801bc8:	1080201c 	xori	r2,r2,128
  801bcc:	10bfe004 	addi	r2,r2,-128
  801bd0:	10000226 	beq	r2,zero,801bdc <logic+0x13a8>
  801bd4:	00800044 	movi	r2,1
  801bd8:	00000106 	br	801be0 <logic+0x13ac>
  801bdc:	0005883a 	mov	r2,zero
  801be0:	1007883a 	mov	r3,r2
  801be4:	e0bffc17 	ldw	r2,-16(fp)
  801be8:	10c01f45 	stb	r3,125(r2)
  if (d->_g3) {
  801bec:	e0bffc17 	ldw	r2,-16(fp)
  801bf0:	10801f43 	ldbu	r2,125(r2)
  801bf4:	10803fcc 	andi	r2,r2,255
  801bf8:	1080201c 	xori	r2,r2,128
  801bfc:	10bfe004 	addi	r2,r2,-128
  801c00:	10000326 	beq	r2,zero,801c10 <logic+0x13dc>
    d->_heart2_local__Atrig5 = 1;
  801c04:	e0bffc17 	ldw	r2,-16(fp)
  801c08:	00c00044 	movi	r3,1
  801c0c:	10c01b85 	stb	r3,110(r2)
  }
  d->_cg67 = d->_heart2_local__Atrig5;
  801c10:	e0bffc17 	ldw	r2,-16(fp)
  801c14:	10c01b83 	ldbu	r3,110(r2)
  801c18:	e0bffc17 	ldw	r2,-16(fp)
  801c1c:	10c04c05 	stb	r3,304(r2)
  d->_g26 = d->_g15 && d->_cg67;
  801c20:	e0bffc17 	ldw	r2,-16(fp)
  801c24:	10802143 	ldbu	r2,133(r2)
  801c28:	10803fcc 	andi	r2,r2,255
  801c2c:	1080201c 	xori	r2,r2,128
  801c30:	10bfe004 	addi	r2,r2,-128
  801c34:	10000826 	beq	r2,zero,801c58 <logic+0x1424>
  801c38:	e0bffc17 	ldw	r2,-16(fp)
  801c3c:	10804c03 	ldbu	r2,304(r2)
  801c40:	10803fcc 	andi	r2,r2,255
  801c44:	1080201c 	xori	r2,r2,128
  801c48:	10bfe004 	addi	r2,r2,-128
  801c4c:	10000226 	beq	r2,zero,801c58 <logic+0x1424>
  801c50:	00800044 	movi	r2,1
  801c54:	00000106 	br	801c5c <logic+0x1428>
  801c58:	0005883a 	mov	r2,zero
  801c5c:	1007883a 	mov	r3,r2
  801c60:	e0bffc17 	ldw	r2,-16(fp)
  801c64:	10c02345 	stb	r3,141(r2)
  d->_g30 = !d->_g24;
  801c68:	e0bffc17 	ldw	r2,-16(fp)
  801c6c:	108022c3 	ldbu	r2,139(r2)
  801c70:	10803fcc 	andi	r2,r2,255
  801c74:	1080201c 	xori	r2,r2,128
  801c78:	10bfe004 	addi	r2,r2,-128
  801c7c:	1005003a 	cmpeq	r2,r2,zero
  801c80:	1007883a 	mov	r3,r2
  801c84:	e0bffc17 	ldw	r2,-16(fp)
  801c88:	10c023c5 	stb	r3,143(r2)
  d->_g27 = (d->_g18 || d->_g26) && (d->_g30 || d->_g3) && (d->_g26 || d->_g3);
  801c8c:	e0bffc17 	ldw	r2,-16(fp)
  801c90:	108021c3 	ldbu	r2,135(r2)
  801c94:	10803fcc 	andi	r2,r2,255
  801c98:	1080201c 	xori	r2,r2,128
  801c9c:	10bfe004 	addi	r2,r2,-128
  801ca0:	1000061e 	bne	r2,zero,801cbc <logic+0x1488>
  801ca4:	e0bffc17 	ldw	r2,-16(fp)
  801ca8:	10802343 	ldbu	r2,141(r2)
  801cac:	10803fcc 	andi	r2,r2,255
  801cb0:	1080201c 	xori	r2,r2,128
  801cb4:	10bfe004 	addi	r2,r2,-128
  801cb8:	10001a26 	beq	r2,zero,801d24 <logic+0x14f0>
  801cbc:	e0bffc17 	ldw	r2,-16(fp)
  801cc0:	108023c3 	ldbu	r2,143(r2)
  801cc4:	10803fcc 	andi	r2,r2,255
  801cc8:	1080201c 	xori	r2,r2,128
  801ccc:	10bfe004 	addi	r2,r2,-128
  801cd0:	1000061e 	bne	r2,zero,801cec <logic+0x14b8>
  801cd4:	e0bffc17 	ldw	r2,-16(fp)
  801cd8:	10801f43 	ldbu	r2,125(r2)
  801cdc:	10803fcc 	andi	r2,r2,255
  801ce0:	1080201c 	xori	r2,r2,128
  801ce4:	10bfe004 	addi	r2,r2,-128
  801ce8:	10000e26 	beq	r2,zero,801d24 <logic+0x14f0>
  801cec:	e0bffc17 	ldw	r2,-16(fp)
  801cf0:	10802343 	ldbu	r2,141(r2)
  801cf4:	10803fcc 	andi	r2,r2,255
  801cf8:	1080201c 	xori	r2,r2,128
  801cfc:	10bfe004 	addi	r2,r2,-128
  801d00:	1000061e 	bne	r2,zero,801d1c <logic+0x14e8>
  801d04:	e0bffc17 	ldw	r2,-16(fp)
  801d08:	10801f43 	ldbu	r2,125(r2)
  801d0c:	10803fcc 	andi	r2,r2,255
  801d10:	1080201c 	xori	r2,r2,128
  801d14:	10bfe004 	addi	r2,r2,-128
  801d18:	10000226 	beq	r2,zero,801d24 <logic+0x14f0>
  801d1c:	00800044 	movi	r2,1
  801d20:	00000106 	br	801d28 <logic+0x14f4>
  801d24:	0005883a 	mov	r2,zero
  801d28:	1007883a 	mov	r3,r2
  801d2c:	e0bffc17 	ldw	r2,-16(fp)
  801d30:	10c02385 	stb	r3,142(r2)
  if (d->_g27) {
  801d34:	e0bffc17 	ldw	r2,-16(fp)
  801d38:	10802383 	ldbu	r2,142(r2)
  801d3c:	10803fcc 	andi	r2,r2,255
  801d40:	1080201c 	xori	r2,r2,128
  801d44:	10bfe004 	addi	r2,r2,-128
  801d48:	10000326 	beq	r2,zero,801d58 <logic+0x1524>
    d->_region1_null_LRI = 0;
  801d4c:	e0bffc17 	ldw	r2,-16(fp)
  801d50:	10000915 	stw	zero,36(r2)
  801d54:	10000a15 	stw	zero,40(r2)
  }
  d->_g34 = d->_pg44_e1;
  801d58:	e0bffc17 	ldw	r2,-16(fp)
  801d5c:	10c06603 	ldbu	r3,408(r2)
  801d60:	e0bffc17 	ldw	r2,-16(fp)
  801d64:	10c02445 	stb	r3,145(r2)
  if (d->_g34) {
  801d68:	e0bffc17 	ldw	r2,-16(fp)
  801d6c:	10802443 	ldbu	r2,145(r2)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10001226 	beq	r2,zero,801dc8 <logic+0x1594>
    d->_region1_null_LRI += d->deltaT;
  801d80:	e13ffc17 	ldw	r4,-16(fp)
  801d84:	20800917 	ldw	r2,36(r4)
  801d88:	20c00a17 	ldw	r3,40(r4)
  801d8c:	e1bffc17 	ldw	r6,-16(fp)
  801d90:	31001317 	ldw	r4,76(r6)
  801d94:	31401417 	ldw	r5,80(r6)
  801d98:	200d883a 	mov	r6,r4
  801d9c:	280f883a 	mov	r7,r5
  801da0:	1009883a 	mov	r4,r2
  801da4:	180b883a 	mov	r5,r3
  801da8:	08079680 	call	807968 <__adddf3>
  801dac:	1009883a 	mov	r4,r2
  801db0:	180b883a 	mov	r5,r3
  801db4:	2005883a 	mov	r2,r4
  801db8:	2807883a 	mov	r3,r5
  801dbc:	e13ffc17 	ldw	r4,-16(fp)
  801dc0:	20800915 	stw	r2,36(r4)
  801dc4:	20c00a15 	stw	r3,40(r4)
  }
  d->_g72_e2 = !d->_g34;
  801dc8:	e0bffc17 	ldw	r2,-16(fp)
  801dcc:	10802443 	ldbu	r2,145(r2)
  801dd0:	10803fcc 	andi	r2,r2,255
  801dd4:	1080201c 	xori	r2,r2,128
  801dd8:	10bfe004 	addi	r2,r2,-128
  801ddc:	1005003a 	cmpeq	r2,r2,zero
  801de0:	1007883a 	mov	r3,r2
  801de4:	e0bffc17 	ldw	r2,-16(fp)
  801de8:	10c05e45 	stb	r3,377(r2)
  d->_g68_e1 = d->_pg74;
  801dec:	e0bffc17 	ldw	r2,-16(fp)
  801df0:	10c06643 	ldbu	r3,409(r2)
  801df4:	e0bffc17 	ldw	r2,-16(fp)
  801df8:	10c05e05 	stb	r3,376(r2)
  d->_cg58 = d->_region1_null_LRI >= d->LRI_time;
  801dfc:	e0bffc17 	ldw	r2,-16(fp)
  801e00:	14000917 	ldw	r16,36(r2)
  801e04:	14400a17 	ldw	r17,40(r2)
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	10800317 	ldw	r2,12(r2)
  801e10:	1009883a 	mov	r4,r2
  801e14:	0808ce00 	call	808ce0 <__floatsidf>
  801e18:	1009883a 	mov	r4,r2
  801e1c:	180b883a 	mov	r5,r3
  801e20:	04800044 	movi	r18,1
  801e24:	200d883a 	mov	r6,r4
  801e28:	280f883a 	mov	r7,r5
  801e2c:	8009883a 	mov	r4,r16
  801e30:	880b883a 	mov	r5,r17
  801e34:	08082140 	call	808214 <__gedf2>
  801e38:	1000010e 	bge	r2,zero,801e40 <logic+0x160c>
  801e3c:	0025883a 	mov	r18,zero
  801e40:	9007883a 	mov	r3,r18
  801e44:	e0bffc17 	ldw	r2,-16(fp)
  801e48:	10c04b45 	stb	r3,301(r2)
  d->_g68 = d->_g68_e1 && d->_cg58;
  801e4c:	e0bffc17 	ldw	r2,-16(fp)
  801e50:	10805e03 	ldbu	r2,376(r2)
  801e54:	10803fcc 	andi	r2,r2,255
  801e58:	1080201c 	xori	r2,r2,128
  801e5c:	10bfe004 	addi	r2,r2,-128
  801e60:	10000826 	beq	r2,zero,801e84 <logic+0x1650>
  801e64:	e0bffc17 	ldw	r2,-16(fp)
  801e68:	10804b43 	ldbu	r2,301(r2)
  801e6c:	10803fcc 	andi	r2,r2,255
  801e70:	1080201c 	xori	r2,r2,128
  801e74:	10bfe004 	addi	r2,r2,-128
  801e78:	10000226 	beq	r2,zero,801e84 <logic+0x1650>
  801e7c:	00800044 	movi	r2,1
  801e80:	00000106 	br	801e88 <logic+0x1654>
  801e84:	0005883a 	mov	r2,zero
  801e88:	1007883a 	mov	r3,r2
  801e8c:	e0bffc17 	ldw	r2,-16(fp)
  801e90:	10c02a05 	stb	r3,168(r2)
  if (d->_g68) {
  801e94:	e0bffc17 	ldw	r2,-16(fp)
  801e98:	10802a03 	ldbu	r2,168(r2)
  801e9c:	10803fcc 	andi	r2,r2,255
  801ea0:	1080201c 	xori	r2,r2,128
  801ea4:	10bfe004 	addi	r2,r2,-128
  801ea8:	10000326 	beq	r2,zero,801eb8 <logic+0x1684>
    d->_heart2_local__Atrig3 = 1;
  801eac:	e0bffc17 	ldw	r2,-16(fp)
  801eb0:	00c00044 	movi	r3,1
  801eb4:	10c01b05 	stb	r3,108(r2)
  }
  d->_g72 = d->_g68_e1 && !d->_cg58;
  801eb8:	e0bffc17 	ldw	r2,-16(fp)
  801ebc:	10805e03 	ldbu	r2,376(r2)
  801ec0:	10803fcc 	andi	r2,r2,255
  801ec4:	1080201c 	xori	r2,r2,128
  801ec8:	10bfe004 	addi	r2,r2,-128
  801ecc:	10000826 	beq	r2,zero,801ef0 <logic+0x16bc>
  801ed0:	e0bffc17 	ldw	r2,-16(fp)
  801ed4:	10804b43 	ldbu	r2,301(r2)
  801ed8:	10803fcc 	andi	r2,r2,255
  801edc:	1080201c 	xori	r2,r2,128
  801ee0:	10bfe004 	addi	r2,r2,-128
  801ee4:	1000021e 	bne	r2,zero,801ef0 <logic+0x16bc>
  801ee8:	00800044 	movi	r2,1
  801eec:	00000106 	br	801ef4 <logic+0x16c0>
  801ef0:	0005883a 	mov	r2,zero
  801ef4:	1007883a 	mov	r3,r2
  801ef8:	e0bffc17 	ldw	r2,-16(fp)
  801efc:	10c02a85 	stb	r3,170(r2)
  d->_cg61 = d->v;
  801f00:	e0bffc17 	ldw	r2,-16(fp)
  801f04:	10c018c3 	ldbu	r3,99(r2)
  801f08:	e0bffc17 	ldw	r2,-16(fp)
  801f0c:	10c04b05 	stb	r3,300(r2)
  d->_g62 = d->_g72 && d->_cg61;
  801f10:	e0bffc17 	ldw	r2,-16(fp)
  801f14:	10802a83 	ldbu	r2,170(r2)
  801f18:	10803fcc 	andi	r2,r2,255
  801f1c:	1080201c 	xori	r2,r2,128
  801f20:	10bfe004 	addi	r2,r2,-128
  801f24:	10000826 	beq	r2,zero,801f48 <logic+0x1714>
  801f28:	e0bffc17 	ldw	r2,-16(fp)
  801f2c:	10804b03 	ldbu	r2,300(r2)
  801f30:	10803fcc 	andi	r2,r2,255
  801f34:	1080201c 	xori	r2,r2,128
  801f38:	10bfe004 	addi	r2,r2,-128
  801f3c:	10000226 	beq	r2,zero,801f48 <logic+0x1714>
  801f40:	00800044 	movi	r2,1
  801f44:	00000106 	br	801f4c <logic+0x1718>
  801f48:	0005883a 	mov	r2,zero
  801f4c:	1007883a 	mov	r3,r2
  801f50:	e0bffc17 	ldw	r2,-16(fp)
  801f54:	10c02905 	stb	r3,164(r2)
  if (d->_g62) {
  801f58:	e0bffc17 	ldw	r2,-16(fp)
  801f5c:	10802903 	ldbu	r2,164(r2)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	1080201c 	xori	r2,r2,128
  801f68:	10bfe004 	addi	r2,r2,-128
  801f6c:	10000326 	beq	r2,zero,801f7c <logic+0x1748>
    d->_heart2_local__Atrig4 = 1;
  801f70:	e0bffc17 	ldw	r2,-16(fp)
  801f74:	00c00044 	movi	r3,1
  801f78:	10c01b45 	stb	r3,109(r2)
  }
  d->_cg43 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  801f7c:	e0bffc17 	ldw	r2,-16(fp)
  801f80:	10801b03 	ldbu	r2,108(r2)
  801f84:	10803fcc 	andi	r2,r2,255
  801f88:	1080201c 	xori	r2,r2,128
  801f8c:	10bfe004 	addi	r2,r2,-128
  801f90:	1000061e 	bne	r2,zero,801fac <logic+0x1778>
  801f94:	e0bffc17 	ldw	r2,-16(fp)
  801f98:	10801b43 	ldbu	r2,109(r2)
  801f9c:	10803fcc 	andi	r2,r2,255
  801fa0:	1080201c 	xori	r2,r2,128
  801fa4:	10bfe004 	addi	r2,r2,-128
  801fa8:	10000226 	beq	r2,zero,801fb4 <logic+0x1780>
  801fac:	00800044 	movi	r2,1
  801fb0:	00000106 	br	801fb8 <logic+0x1784>
  801fb4:	0005883a 	mov	r2,zero
  801fb8:	1007883a 	mov	r3,r2
  801fbc:	e0bffc17 	ldw	r2,-16(fp)
  801fc0:	10c04945 	stb	r3,293(r2)
  d->_g44 = d->_g34 && d->_cg43;
  801fc4:	e0bffc17 	ldw	r2,-16(fp)
  801fc8:	10802443 	ldbu	r2,145(r2)
  801fcc:	10803fcc 	andi	r2,r2,255
  801fd0:	1080201c 	xori	r2,r2,128
  801fd4:	10bfe004 	addi	r2,r2,-128
  801fd8:	10000826 	beq	r2,zero,801ffc <logic+0x17c8>
  801fdc:	e0bffc17 	ldw	r2,-16(fp)
  801fe0:	10804943 	ldbu	r2,293(r2)
  801fe4:	10803fcc 	andi	r2,r2,255
  801fe8:	1080201c 	xori	r2,r2,128
  801fec:	10bfe004 	addi	r2,r2,-128
  801ff0:	10000226 	beq	r2,zero,801ffc <logic+0x17c8>
  801ff4:	00800044 	movi	r2,1
  801ff8:	00000106 	br	802000 <logic+0x17cc>
  801ffc:	0005883a 	mov	r2,zero
  802000:	1007883a 	mov	r3,r2
  802004:	e0bffc17 	ldw	r2,-16(fp)
  802008:	10c025c5 	stb	r3,151(r2)
  d->_g54 = d->_pg73;
  80200c:	e0bffc17 	ldw	r2,-16(fp)
  802010:	10c06683 	ldbu	r3,410(r2)
  802014:	e0bffc17 	ldw	r2,-16(fp)
  802018:	10c02785 	stb	r3,158(r2)
  d->_g48 = d->_pg51_e2;
  80201c:	e0bffc17 	ldw	r2,-16(fp)
  802020:	10c066c3 	ldbu	r3,411(r2)
  802024:	e0bffc17 	ldw	r2,-16(fp)
  802028:	10c02645 	stb	r3,153(r2)
  d->_g51_e2 = !(d->_g54 || d->_g48);
  80202c:	e0bffc17 	ldw	r2,-16(fp)
  802030:	10802783 	ldbu	r2,158(r2)
  802034:	10803fcc 	andi	r2,r2,255
  802038:	1080201c 	xori	r2,r2,128
  80203c:	10bfe004 	addi	r2,r2,-128
  802040:	1000081e 	bne	r2,zero,802064 <logic+0x1830>
  802044:	e0bffc17 	ldw	r2,-16(fp)
  802048:	10802643 	ldbu	r2,153(r2)
  80204c:	10803fcc 	andi	r2,r2,255
  802050:	1080201c 	xori	r2,r2,128
  802054:	10bfe004 	addi	r2,r2,-128
  802058:	1000021e 	bne	r2,zero,802064 <logic+0x1830>
  80205c:	00800044 	movi	r2,1
  802060:	00000106 	br	802068 <logic+0x1834>
  802064:	0005883a 	mov	r2,zero
  802068:	1007883a 	mov	r3,r2
  80206c:	e0bffc17 	ldw	r2,-16(fp)
  802070:	10c05d85 	stb	r3,374(r2)
  d->_g48 = d->_g48 || d->_g54;
  802074:	e0bffc17 	ldw	r2,-16(fp)
  802078:	10802643 	ldbu	r2,153(r2)
  80207c:	10803fcc 	andi	r2,r2,255
  802080:	1080201c 	xori	r2,r2,128
  802084:	10bfe004 	addi	r2,r2,-128
  802088:	1000061e 	bne	r2,zero,8020a4 <logic+0x1870>
  80208c:	e0bffc17 	ldw	r2,-16(fp)
  802090:	10802783 	ldbu	r2,158(r2)
  802094:	10803fcc 	andi	r2,r2,255
  802098:	1080201c 	xori	r2,r2,128
  80209c:	10bfe004 	addi	r2,r2,-128
  8020a0:	10000226 	beq	r2,zero,8020ac <logic+0x1878>
  8020a4:	00800044 	movi	r2,1
  8020a8:	00000106 	br	8020b0 <logic+0x187c>
  8020ac:	0005883a 	mov	r2,zero
  8020b0:	1007883a 	mov	r3,r2
  8020b4:	e0bffc17 	ldw	r2,-16(fp)
  8020b8:	10c02645 	stb	r3,153(r2)
  d->_cg49 = d->_region1_null_LRI < d->LRI_time;
  8020bc:	e0bffc17 	ldw	r2,-16(fp)
  8020c0:	14000917 	ldw	r16,36(r2)
  8020c4:	14400a17 	ldw	r17,40(r2)
  8020c8:	e0bffc17 	ldw	r2,-16(fp)
  8020cc:	10800317 	ldw	r2,12(r2)
  8020d0:	1009883a 	mov	r4,r2
  8020d4:	0808ce00 	call	808ce0 <__floatsidf>
  8020d8:	1009883a 	mov	r4,r2
  8020dc:	180b883a 	mov	r5,r3
  8020e0:	04800044 	movi	r18,1
  8020e4:	200d883a 	mov	r6,r4
  8020e8:	280f883a 	mov	r7,r5
  8020ec:	8009883a 	mov	r4,r16
  8020f0:	880b883a 	mov	r5,r17
  8020f4:	08082f00 	call	8082f0 <__ledf2>
  8020f8:	10000116 	blt	r2,zero,802100 <logic+0x18cc>
  8020fc:	0025883a 	mov	r18,zero
  802100:	9007883a 	mov	r3,r18
  802104:	e0bffc17 	ldw	r2,-16(fp)
  802108:	10c04a45 	stb	r3,297(r2)
  d->_g54 = d->_g48 && d->_cg49;
  80210c:	e0bffc17 	ldw	r2,-16(fp)
  802110:	10802643 	ldbu	r2,153(r2)
  802114:	10803fcc 	andi	r2,r2,255
  802118:	1080201c 	xori	r2,r2,128
  80211c:	10bfe004 	addi	r2,r2,-128
  802120:	10000826 	beq	r2,zero,802144 <logic+0x1910>
  802124:	e0bffc17 	ldw	r2,-16(fp)
  802128:	10804a43 	ldbu	r2,297(r2)
  80212c:	10803fcc 	andi	r2,r2,255
  802130:	1080201c 	xori	r2,r2,128
  802134:	10bfe004 	addi	r2,r2,-128
  802138:	10000226 	beq	r2,zero,802144 <logic+0x1910>
  80213c:	00800044 	movi	r2,1
  802140:	00000106 	br	802148 <logic+0x1914>
  802144:	0005883a 	mov	r2,zero
  802148:	1007883a 	mov	r3,r2
  80214c:	e0bffc17 	ldw	r2,-16(fp)
  802150:	10c02785 	stb	r3,158(r2)
  if (d->_g54) {
  802154:	e0bffc17 	ldw	r2,-16(fp)
  802158:	10802783 	ldbu	r2,158(r2)
  80215c:	10803fcc 	andi	r2,r2,255
  802160:	1080201c 	xori	r2,r2,128
  802164:	10bfe004 	addi	r2,r2,-128
  802168:	10003426 	beq	r2,zero,80223c <logic+0x1a08>
    d->sleepT = (d->sleepT < (d->LRI_time - d->_region1_null_LRI)) ? d->sleepT : (d->LRI_time - d->_region1_null_LRI);
  80216c:	e0bffc17 	ldw	r2,-16(fp)
  802170:	14001517 	ldw	r16,84(r2)
  802174:	14401617 	ldw	r17,88(r2)
  802178:	e0bffc17 	ldw	r2,-16(fp)
  80217c:	10800317 	ldw	r2,12(r2)
  802180:	1009883a 	mov	r4,r2
  802184:	0808ce00 	call	808ce0 <__floatsidf>
  802188:	1011883a 	mov	r8,r2
  80218c:	1813883a 	mov	r9,r3
  802190:	e13ffc17 	ldw	r4,-16(fp)
  802194:	20800917 	ldw	r2,36(r4)
  802198:	20c00a17 	ldw	r3,40(r4)
  80219c:	100d883a 	mov	r6,r2
  8021a0:	180f883a 	mov	r7,r3
  8021a4:	4009883a 	mov	r4,r8
  8021a8:	480b883a 	mov	r5,r9
  8021ac:	08083e40 	call	8083e4 <__subdf3>
  8021b0:	1009883a 	mov	r4,r2
  8021b4:	180b883a 	mov	r5,r3
  8021b8:	2005883a 	mov	r2,r4
  8021bc:	2807883a 	mov	r3,r5
  8021c0:	100d883a 	mov	r6,r2
  8021c4:	180f883a 	mov	r7,r3
  8021c8:	8009883a 	mov	r4,r16
  8021cc:	880b883a 	mov	r5,r17
  8021d0:	08082f00 	call	8082f0 <__ledf2>
  8021d4:	1000040e 	bge	r2,zero,8021e8 <logic+0x19b4>
  8021d8:	e13ffc17 	ldw	r4,-16(fp)
  8021dc:	20801517 	ldw	r2,84(r4)
  8021e0:	20c01617 	ldw	r3,88(r4)
  8021e4:	00001206 	br	802230 <logic+0x19fc>
  8021e8:	e0bffc17 	ldw	r2,-16(fp)
  8021ec:	10800317 	ldw	r2,12(r2)
  8021f0:	1009883a 	mov	r4,r2
  8021f4:	0808ce00 	call	808ce0 <__floatsidf>
  8021f8:	1011883a 	mov	r8,r2
  8021fc:	1813883a 	mov	r9,r3
  802200:	e13ffc17 	ldw	r4,-16(fp)
  802204:	20800917 	ldw	r2,36(r4)
  802208:	20c00a17 	ldw	r3,40(r4)
  80220c:	100d883a 	mov	r6,r2
  802210:	180f883a 	mov	r7,r3
  802214:	4009883a 	mov	r4,r8
  802218:	480b883a 	mov	r5,r9
  80221c:	08083e40 	call	8083e4 <__subdf3>
  802220:	1009883a 	mov	r4,r2
  802224:	180b883a 	mov	r5,r3
  802228:	2005883a 	mov	r2,r4
  80222c:	2807883a 	mov	r3,r5
  802230:	e13ffc17 	ldw	r4,-16(fp)
  802234:	20801515 	stw	r2,84(r4)
  802238:	20c01615 	stw	r3,88(r4)
  }
  d->_cg50 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	10801b03 	ldbu	r2,108(r2)
  802244:	10803fcc 	andi	r2,r2,255
  802248:	1080201c 	xori	r2,r2,128
  80224c:	10bfe004 	addi	r2,r2,-128
  802250:	1000061e 	bne	r2,zero,80226c <logic+0x1a38>
  802254:	e0bffc17 	ldw	r2,-16(fp)
  802258:	10801b43 	ldbu	r2,109(r2)
  80225c:	10803fcc 	andi	r2,r2,255
  802260:	1080201c 	xori	r2,r2,128
  802264:	10bfe004 	addi	r2,r2,-128
  802268:	10000226 	beq	r2,zero,802274 <logic+0x1a40>
  80226c:	00800044 	movi	r2,1
  802270:	00000106 	br	802278 <logic+0x1a44>
  802274:	0005883a 	mov	r2,zero
  802278:	1007883a 	mov	r3,r2
  80227c:	e0bffc17 	ldw	r2,-16(fp)
  802280:	10c04a05 	stb	r3,296(r2)
  d->_g49 = d->_g48 && !d->_cg49;
  802284:	e0bffc17 	ldw	r2,-16(fp)
  802288:	10802643 	ldbu	r2,153(r2)
  80228c:	10803fcc 	andi	r2,r2,255
  802290:	1080201c 	xori	r2,r2,128
  802294:	10bfe004 	addi	r2,r2,-128
  802298:	10000826 	beq	r2,zero,8022bc <logic+0x1a88>
  80229c:	e0bffc17 	ldw	r2,-16(fp)
  8022a0:	10804a43 	ldbu	r2,297(r2)
  8022a4:	10803fcc 	andi	r2,r2,255
  8022a8:	1080201c 	xori	r2,r2,128
  8022ac:	10bfe004 	addi	r2,r2,-128
  8022b0:	1000021e 	bne	r2,zero,8022bc <logic+0x1a88>
  8022b4:	00800044 	movi	r2,1
  8022b8:	00000106 	br	8022c0 <logic+0x1a8c>
  8022bc:	0005883a 	mov	r2,zero
  8022c0:	1007883a 	mov	r3,r2
  8022c4:	e0bffc17 	ldw	r2,-16(fp)
  8022c8:	10c02685 	stb	r3,154(r2)
  d->_cg52 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  8022cc:	e0bffc17 	ldw	r2,-16(fp)
  8022d0:	10801b03 	ldbu	r2,108(r2)
  8022d4:	10803fcc 	andi	r2,r2,255
  8022d8:	1080201c 	xori	r2,r2,128
  8022dc:	10bfe004 	addi	r2,r2,-128
  8022e0:	1000061e 	bne	r2,zero,8022fc <logic+0x1ac8>
  8022e4:	e0bffc17 	ldw	r2,-16(fp)
  8022e8:	10801b43 	ldbu	r2,109(r2)
  8022ec:	10803fcc 	andi	r2,r2,255
  8022f0:	1080201c 	xori	r2,r2,128
  8022f4:	10bfe004 	addi	r2,r2,-128
  8022f8:	10000226 	beq	r2,zero,802304 <logic+0x1ad0>
  8022fc:	00800044 	movi	r2,1
  802300:	00000106 	br	802308 <logic+0x1ad4>
  802304:	0005883a 	mov	r2,zero
  802308:	1007883a 	mov	r3,r2
  80230c:	e0bffc17 	ldw	r2,-16(fp)
  802310:	10c04a85 	stb	r3,298(r2)
  d->_g51 = d->_g54 && d->_cg50 || d->_g49 && d->_cg52;
  802314:	e0bffc17 	ldw	r2,-16(fp)
  802318:	10802783 	ldbu	r2,158(r2)
  80231c:	10803fcc 	andi	r2,r2,255
  802320:	1080201c 	xori	r2,r2,128
  802324:	10bfe004 	addi	r2,r2,-128
  802328:	10000626 	beq	r2,zero,802344 <logic+0x1b10>
  80232c:	e0bffc17 	ldw	r2,-16(fp)
  802330:	10804a03 	ldbu	r2,296(r2)
  802334:	10803fcc 	andi	r2,r2,255
  802338:	1080201c 	xori	r2,r2,128
  80233c:	10bfe004 	addi	r2,r2,-128
  802340:	10000c1e 	bne	r2,zero,802374 <logic+0x1b40>
  802344:	e0bffc17 	ldw	r2,-16(fp)
  802348:	10802683 	ldbu	r2,154(r2)
  80234c:	10803fcc 	andi	r2,r2,255
  802350:	1080201c 	xori	r2,r2,128
  802354:	10bfe004 	addi	r2,r2,-128
  802358:	10000826 	beq	r2,zero,80237c <logic+0x1b48>
  80235c:	e0bffc17 	ldw	r2,-16(fp)
  802360:	10804a83 	ldbu	r2,298(r2)
  802364:	10803fcc 	andi	r2,r2,255
  802368:	1080201c 	xori	r2,r2,128
  80236c:	10bfe004 	addi	r2,r2,-128
  802370:	10000226 	beq	r2,zero,80237c <logic+0x1b48>
  802374:	00800044 	movi	r2,1
  802378:	00000106 	br	802380 <logic+0x1b4c>
  80237c:	0005883a 	mov	r2,zero
  802380:	1007883a 	mov	r3,r2
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	10c02705 	stb	r3,156(r2)
  d->_g58 = !d->_g68_e1;
  80238c:	e0bffc17 	ldw	r2,-16(fp)
  802390:	10805e03 	ldbu	r2,376(r2)
  802394:	10803fcc 	andi	r2,r2,255
  802398:	1080201c 	xori	r2,r2,128
  80239c:	10bfe004 	addi	r2,r2,-128
  8023a0:	1005003a 	cmpeq	r2,r2,zero
  8023a4:	1007883a 	mov	r3,r2
  8023a8:	e0bffc17 	ldw	r2,-16(fp)
  8023ac:	10c02805 	stb	r3,160(r2)
  d->_g62 = d->_g68 || d->_g62;
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10802a03 	ldbu	r2,168(r2)
  8023b8:	10803fcc 	andi	r2,r2,255
  8023bc:	1080201c 	xori	r2,r2,128
  8023c0:	10bfe004 	addi	r2,r2,-128
  8023c4:	1000061e 	bne	r2,zero,8023e0 <logic+0x1bac>
  8023c8:	e0bffc17 	ldw	r2,-16(fp)
  8023cc:	10802903 	ldbu	r2,164(r2)
  8023d0:	10803fcc 	andi	r2,r2,255
  8023d4:	1080201c 	xori	r2,r2,128
  8023d8:	10bfe004 	addi	r2,r2,-128
  8023dc:	10000226 	beq	r2,zero,8023e8 <logic+0x1bb4>
  8023e0:	00800044 	movi	r2,1
  8023e4:	00000106 	br	8023ec <logic+0x1bb8>
  8023e8:	0005883a 	mov	r2,zero
  8023ec:	1007883a 	mov	r3,r2
  8023f0:	e0bffc17 	ldw	r2,-16(fp)
  8023f4:	10c02905 	stb	r3,164(r2)
  d->_g59 = (d->_g72_e2 || d->_g44) && (d->_g51_e2 || d->_g51) && (d->_g58 || d->_g62) && (d->_g44 || d->_g51 || d->_g62);
  8023f8:	e0bffc17 	ldw	r2,-16(fp)
  8023fc:	10805e43 	ldbu	r2,377(r2)
  802400:	10803fcc 	andi	r2,r2,255
  802404:	1080201c 	xori	r2,r2,128
  802408:	10bfe004 	addi	r2,r2,-128
  80240c:	1000061e 	bne	r2,zero,802428 <logic+0x1bf4>
  802410:	e0bffc17 	ldw	r2,-16(fp)
  802414:	108025c3 	ldbu	r2,151(r2)
  802418:	10803fcc 	andi	r2,r2,255
  80241c:	1080201c 	xori	r2,r2,128
  802420:	10bfe004 	addi	r2,r2,-128
  802424:	10002c26 	beq	r2,zero,8024d8 <logic+0x1ca4>
  802428:	e0bffc17 	ldw	r2,-16(fp)
  80242c:	10805d83 	ldbu	r2,374(r2)
  802430:	10803fcc 	andi	r2,r2,255
  802434:	1080201c 	xori	r2,r2,128
  802438:	10bfe004 	addi	r2,r2,-128
  80243c:	1000061e 	bne	r2,zero,802458 <logic+0x1c24>
  802440:	e0bffc17 	ldw	r2,-16(fp)
  802444:	10802703 	ldbu	r2,156(r2)
  802448:	10803fcc 	andi	r2,r2,255
  80244c:	1080201c 	xori	r2,r2,128
  802450:	10bfe004 	addi	r2,r2,-128
  802454:	10002026 	beq	r2,zero,8024d8 <logic+0x1ca4>
  802458:	e0bffc17 	ldw	r2,-16(fp)
  80245c:	10802803 	ldbu	r2,160(r2)
  802460:	10803fcc 	andi	r2,r2,255
  802464:	1080201c 	xori	r2,r2,128
  802468:	10bfe004 	addi	r2,r2,-128
  80246c:	1000061e 	bne	r2,zero,802488 <logic+0x1c54>
  802470:	e0bffc17 	ldw	r2,-16(fp)
  802474:	10802903 	ldbu	r2,164(r2)
  802478:	10803fcc 	andi	r2,r2,255
  80247c:	1080201c 	xori	r2,r2,128
  802480:	10bfe004 	addi	r2,r2,-128
  802484:	10001426 	beq	r2,zero,8024d8 <logic+0x1ca4>
  802488:	e0bffc17 	ldw	r2,-16(fp)
  80248c:	108025c3 	ldbu	r2,151(r2)
  802490:	10803fcc 	andi	r2,r2,255
  802494:	1080201c 	xori	r2,r2,128
  802498:	10bfe004 	addi	r2,r2,-128
  80249c:	10000c1e 	bne	r2,zero,8024d0 <logic+0x1c9c>
  8024a0:	e0bffc17 	ldw	r2,-16(fp)
  8024a4:	10802703 	ldbu	r2,156(r2)
  8024a8:	10803fcc 	andi	r2,r2,255
  8024ac:	1080201c 	xori	r2,r2,128
  8024b0:	10bfe004 	addi	r2,r2,-128
  8024b4:	1000061e 	bne	r2,zero,8024d0 <logic+0x1c9c>
  8024b8:	e0bffc17 	ldw	r2,-16(fp)
  8024bc:	10802903 	ldbu	r2,164(r2)
  8024c0:	10803fcc 	andi	r2,r2,255
  8024c4:	1080201c 	xori	r2,r2,128
  8024c8:	10bfe004 	addi	r2,r2,-128
  8024cc:	10000226 	beq	r2,zero,8024d8 <logic+0x1ca4>
  8024d0:	00800044 	movi	r2,1
  8024d4:	00000106 	br	8024dc <logic+0x1ca8>
  8024d8:	0005883a 	mov	r2,zero
  8024dc:	1007883a 	mov	r3,r2
  8024e0:	e0bffc17 	ldw	r2,-16(fp)
  8024e4:	10c02845 	stb	r3,161(r2)
  d->_cg63 = d->_heart2_local__Atrig3;
  8024e8:	e0bffc17 	ldw	r2,-16(fp)
  8024ec:	10c01b03 	ldbu	r3,108(r2)
  8024f0:	e0bffc17 	ldw	r2,-16(fp)
  8024f4:	10c04b85 	stb	r3,302(r2)
  d->_g51 = d->_g59 && !d->_cg63;
  8024f8:	e0bffc17 	ldw	r2,-16(fp)
  8024fc:	10802843 	ldbu	r2,161(r2)
  802500:	10803fcc 	andi	r2,r2,255
  802504:	1080201c 	xori	r2,r2,128
  802508:	10bfe004 	addi	r2,r2,-128
  80250c:	10000826 	beq	r2,zero,802530 <logic+0x1cfc>
  802510:	e0bffc17 	ldw	r2,-16(fp)
  802514:	10804b83 	ldbu	r2,302(r2)
  802518:	10803fcc 	andi	r2,r2,255
  80251c:	1080201c 	xori	r2,r2,128
  802520:	10bfe004 	addi	r2,r2,-128
  802524:	1000021e 	bne	r2,zero,802530 <logic+0x1cfc>
  802528:	00800044 	movi	r2,1
  80252c:	00000106 	br	802534 <logic+0x1d00>
  802530:	0005883a 	mov	r2,zero
  802534:	1007883a 	mov	r3,r2
  802538:	e0bffc17 	ldw	r2,-16(fp)
  80253c:	10c02705 	stb	r3,156(r2)
  if (d->_g51) {
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10802703 	ldbu	r2,156(r2)
  802548:	10803fcc 	andi	r2,r2,255
  80254c:	1080201c 	xori	r2,r2,128
  802550:	10bfe004 	addi	r2,r2,-128
  802554:	10000326 	beq	r2,zero,802564 <logic+0x1d30>
    d->_region1_null_LRI = 0;
  802558:	e0bffc17 	ldw	r2,-16(fp)
  80255c:	10000915 	stw	zero,36(r2)
  802560:	10000a15 	stw	zero,40(r2)
  }
  d->_g60_e3 = d->_GO || d->_g27 || d->_g51;
  802564:	e0bffc17 	ldw	r2,-16(fp)
  802568:	10804543 	ldbu	r2,277(r2)
  80256c:	10803fcc 	andi	r2,r2,255
  802570:	1080201c 	xori	r2,r2,128
  802574:	10bfe004 	addi	r2,r2,-128
  802578:	10000c1e 	bne	r2,zero,8025ac <logic+0x1d78>
  80257c:	e0bffc17 	ldw	r2,-16(fp)
  802580:	10802383 	ldbu	r2,142(r2)
  802584:	10803fcc 	andi	r2,r2,255
  802588:	1080201c 	xori	r2,r2,128
  80258c:	10bfe004 	addi	r2,r2,-128
  802590:	1000061e 	bne	r2,zero,8025ac <logic+0x1d78>
  802594:	e0bffc17 	ldw	r2,-16(fp)
  802598:	10802703 	ldbu	r2,156(r2)
  80259c:	10803fcc 	andi	r2,r2,255
  8025a0:	1080201c 	xori	r2,r2,128
  8025a4:	10bfe004 	addi	r2,r2,-128
  8025a8:	10000226 	beq	r2,zero,8025b4 <logic+0x1d80>
  8025ac:	00800044 	movi	r2,1
  8025b0:	00000106 	br	8025b8 <logic+0x1d84>
  8025b4:	0005883a 	mov	r2,zero
  8025b8:	1007883a 	mov	r3,r2
  8025bc:	e0bffc17 	ldw	r2,-16(fp)
  8025c0:	10c05dc5 	stb	r3,375(r2)
  if (d->_g60_e3) {
  8025c4:	e0bffc17 	ldw	r2,-16(fp)
  8025c8:	10805dc3 	ldbu	r2,375(r2)
  8025cc:	10803fcc 	andi	r2,r2,255
  8025d0:	1080201c 	xori	r2,r2,128
  8025d4:	10bfe004 	addi	r2,r2,-128
  8025d8:	10000426 	beq	r2,zero,8025ec <logic+0x1db8>
    d->_heart2_local__Atrig3 = 0;
  8025dc:	e0bffc17 	ldw	r2,-16(fp)
  8025e0:	10001b05 	stb	zero,108(r2)
    d->_heart2_local__Atrig4 = 0;
  8025e4:	e0bffc17 	ldw	r2,-16(fp)
  8025e8:	10001b45 	stb	zero,109(r2)
  }
  d->_cg41 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  8025ec:	e0bffc17 	ldw	r2,-16(fp)
  8025f0:	10801b03 	ldbu	r2,108(r2)
  8025f4:	10803fcc 	andi	r2,r2,255
  8025f8:	1080201c 	xori	r2,r2,128
  8025fc:	10bfe004 	addi	r2,r2,-128
  802600:	1000061e 	bne	r2,zero,80261c <logic+0x1de8>
  802604:	e0bffc17 	ldw	r2,-16(fp)
  802608:	10801b43 	ldbu	r2,109(r2)
  80260c:	10803fcc 	andi	r2,r2,255
  802610:	1080201c 	xori	r2,r2,128
  802614:	10bfe004 	addi	r2,r2,-128
  802618:	10000226 	beq	r2,zero,802624 <logic+0x1df0>
  80261c:	00800044 	movi	r2,1
  802620:	00000106 	br	802628 <logic+0x1df4>
  802624:	0005883a 	mov	r2,zero
  802628:	1007883a 	mov	r3,r2
  80262c:	e0bffc17 	ldw	r2,-16(fp)
  802630:	10c04905 	stb	r3,292(r2)
  d->_g44_e1 = d->_g60_e3 && !d->_cg41 || d->_g34 && !d->_cg43;
  802634:	e0bffc17 	ldw	r2,-16(fp)
  802638:	10805dc3 	ldbu	r2,375(r2)
  80263c:	10803fcc 	andi	r2,r2,255
  802640:	1080201c 	xori	r2,r2,128
  802644:	10bfe004 	addi	r2,r2,-128
  802648:	10000626 	beq	r2,zero,802664 <logic+0x1e30>
  80264c:	e0bffc17 	ldw	r2,-16(fp)
  802650:	10804903 	ldbu	r2,292(r2)
  802654:	10803fcc 	andi	r2,r2,255
  802658:	1080201c 	xori	r2,r2,128
  80265c:	10bfe004 	addi	r2,r2,-128
  802660:	10000c26 	beq	r2,zero,802694 <logic+0x1e60>
  802664:	e0bffc17 	ldw	r2,-16(fp)
  802668:	10802443 	ldbu	r2,145(r2)
  80266c:	10803fcc 	andi	r2,r2,255
  802670:	1080201c 	xori	r2,r2,128
  802674:	10bfe004 	addi	r2,r2,-128
  802678:	10000826 	beq	r2,zero,80269c <logic+0x1e68>
  80267c:	e0bffc17 	ldw	r2,-16(fp)
  802680:	10804943 	ldbu	r2,293(r2)
  802684:	10803fcc 	andi	r2,r2,255
  802688:	1080201c 	xori	r2,r2,128
  80268c:	10bfe004 	addi	r2,r2,-128
  802690:	1000021e 	bne	r2,zero,80269c <logic+0x1e68>
  802694:	00800044 	movi	r2,1
  802698:	00000106 	br	8026a0 <logic+0x1e6c>
  80269c:	0005883a 	mov	r2,zero
  8026a0:	1007883a 	mov	r3,r2
  8026a4:	e0bffc17 	ldw	r2,-16(fp)
  8026a8:	10c05d45 	stb	r3,373(r2)
  d->_cg45 = d->_region1_null_LRI < d->LRI_time;
  8026ac:	e0bffc17 	ldw	r2,-16(fp)
  8026b0:	14000917 	ldw	r16,36(r2)
  8026b4:	14400a17 	ldw	r17,40(r2)
  8026b8:	e0bffc17 	ldw	r2,-16(fp)
  8026bc:	10800317 	ldw	r2,12(r2)
  8026c0:	1009883a 	mov	r4,r2
  8026c4:	0808ce00 	call	808ce0 <__floatsidf>
  8026c8:	1009883a 	mov	r4,r2
  8026cc:	180b883a 	mov	r5,r3
  8026d0:	04800044 	movi	r18,1
  8026d4:	200d883a 	mov	r6,r4
  8026d8:	280f883a 	mov	r7,r5
  8026dc:	8009883a 	mov	r4,r16
  8026e0:	880b883a 	mov	r5,r17
  8026e4:	08082f00 	call	8082f0 <__ledf2>
  8026e8:	10000116 	blt	r2,zero,8026f0 <logic+0x1ebc>
  8026ec:	0025883a 	mov	r18,zero
  8026f0:	9007883a 	mov	r3,r18
  8026f4:	e0bffc17 	ldw	r2,-16(fp)
  8026f8:	10c04985 	stb	r3,294(r2)
  d->_g44 = d->_g60_e3 && d->_cg45;
  8026fc:	e0bffc17 	ldw	r2,-16(fp)
  802700:	10805dc3 	ldbu	r2,375(r2)
  802704:	10803fcc 	andi	r2,r2,255
  802708:	1080201c 	xori	r2,r2,128
  80270c:	10bfe004 	addi	r2,r2,-128
  802710:	10000826 	beq	r2,zero,802734 <logic+0x1f00>
  802714:	e0bffc17 	ldw	r2,-16(fp)
  802718:	10804983 	ldbu	r2,294(r2)
  80271c:	10803fcc 	andi	r2,r2,255
  802720:	1080201c 	xori	r2,r2,128
  802724:	10bfe004 	addi	r2,r2,-128
  802728:	10000226 	beq	r2,zero,802734 <logic+0x1f00>
  80272c:	00800044 	movi	r2,1
  802730:	00000106 	br	802738 <logic+0x1f04>
  802734:	0005883a 	mov	r2,zero
  802738:	1007883a 	mov	r3,r2
  80273c:	e0bffc17 	ldw	r2,-16(fp)
  802740:	10c025c5 	stb	r3,151(r2)
  if (d->_g44) {
  802744:	e0bffc17 	ldw	r2,-16(fp)
  802748:	108025c3 	ldbu	r2,151(r2)
  80274c:	10803fcc 	andi	r2,r2,255
  802750:	1080201c 	xori	r2,r2,128
  802754:	10bfe004 	addi	r2,r2,-128
  802758:	10003426 	beq	r2,zero,80282c <logic+0x1ff8>
    d->sleepT = (d->sleepT < (d->LRI_time - d->_region1_null_LRI)) ? d->sleepT : (d->LRI_time - d->_region1_null_LRI);
  80275c:	e0bffc17 	ldw	r2,-16(fp)
  802760:	14001517 	ldw	r16,84(r2)
  802764:	14401617 	ldw	r17,88(r2)
  802768:	e0bffc17 	ldw	r2,-16(fp)
  80276c:	10800317 	ldw	r2,12(r2)
  802770:	1009883a 	mov	r4,r2
  802774:	0808ce00 	call	808ce0 <__floatsidf>
  802778:	1011883a 	mov	r8,r2
  80277c:	1813883a 	mov	r9,r3
  802780:	e13ffc17 	ldw	r4,-16(fp)
  802784:	20800917 	ldw	r2,36(r4)
  802788:	20c00a17 	ldw	r3,40(r4)
  80278c:	100d883a 	mov	r6,r2
  802790:	180f883a 	mov	r7,r3
  802794:	4009883a 	mov	r4,r8
  802798:	480b883a 	mov	r5,r9
  80279c:	08083e40 	call	8083e4 <__subdf3>
  8027a0:	1009883a 	mov	r4,r2
  8027a4:	180b883a 	mov	r5,r3
  8027a8:	2005883a 	mov	r2,r4
  8027ac:	2807883a 	mov	r3,r5
  8027b0:	100d883a 	mov	r6,r2
  8027b4:	180f883a 	mov	r7,r3
  8027b8:	8009883a 	mov	r4,r16
  8027bc:	880b883a 	mov	r5,r17
  8027c0:	08082f00 	call	8082f0 <__ledf2>
  8027c4:	1000040e 	bge	r2,zero,8027d8 <logic+0x1fa4>
  8027c8:	e13ffc17 	ldw	r4,-16(fp)
  8027cc:	20801517 	ldw	r2,84(r4)
  8027d0:	20c01617 	ldw	r3,88(r4)
  8027d4:	00001206 	br	802820 <logic+0x1fec>
  8027d8:	e0bffc17 	ldw	r2,-16(fp)
  8027dc:	10800317 	ldw	r2,12(r2)
  8027e0:	1009883a 	mov	r4,r2
  8027e4:	0808ce00 	call	808ce0 <__floatsidf>
  8027e8:	1011883a 	mov	r8,r2
  8027ec:	1813883a 	mov	r9,r3
  8027f0:	e13ffc17 	ldw	r4,-16(fp)
  8027f4:	20800917 	ldw	r2,36(r4)
  8027f8:	20c00a17 	ldw	r3,40(r4)
  8027fc:	100d883a 	mov	r6,r2
  802800:	180f883a 	mov	r7,r3
  802804:	4009883a 	mov	r4,r8
  802808:	480b883a 	mov	r5,r9
  80280c:	08083e40 	call	8083e4 <__subdf3>
  802810:	1009883a 	mov	r4,r2
  802814:	180b883a 	mov	r5,r3
  802818:	2005883a 	mov	r2,r4
  80281c:	2807883a 	mov	r3,r5
  802820:	e13ffc17 	ldw	r4,-16(fp)
  802824:	20801515 	stw	r2,84(r4)
  802828:	20c01615 	stw	r3,88(r4)
  }
  d->_cg46 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  80282c:	e0bffc17 	ldw	r2,-16(fp)
  802830:	10801b03 	ldbu	r2,108(r2)
  802834:	10803fcc 	andi	r2,r2,255
  802838:	1080201c 	xori	r2,r2,128
  80283c:	10bfe004 	addi	r2,r2,-128
  802840:	1000061e 	bne	r2,zero,80285c <logic+0x2028>
  802844:	e0bffc17 	ldw	r2,-16(fp)
  802848:	10801b43 	ldbu	r2,109(r2)
  80284c:	10803fcc 	andi	r2,r2,255
  802850:	1080201c 	xori	r2,r2,128
  802854:	10bfe004 	addi	r2,r2,-128
  802858:	10000226 	beq	r2,zero,802864 <logic+0x2030>
  80285c:	00800044 	movi	r2,1
  802860:	00000106 	br	802868 <logic+0x2034>
  802864:	0005883a 	mov	r2,zero
  802868:	1007883a 	mov	r3,r2
  80286c:	e0bffc17 	ldw	r2,-16(fp)
  802870:	10c049c5 	stb	r3,295(r2)
  d->_g51_e2 = d->_g44 && !d->_cg46 || d->_g54 && !d->_cg50;
  802874:	e0bffc17 	ldw	r2,-16(fp)
  802878:	108025c3 	ldbu	r2,151(r2)
  80287c:	10803fcc 	andi	r2,r2,255
  802880:	1080201c 	xori	r2,r2,128
  802884:	10bfe004 	addi	r2,r2,-128
  802888:	10000626 	beq	r2,zero,8028a4 <logic+0x2070>
  80288c:	e0bffc17 	ldw	r2,-16(fp)
  802890:	108049c3 	ldbu	r2,295(r2)
  802894:	10803fcc 	andi	r2,r2,255
  802898:	1080201c 	xori	r2,r2,128
  80289c:	10bfe004 	addi	r2,r2,-128
  8028a0:	10000c26 	beq	r2,zero,8028d4 <logic+0x20a0>
  8028a4:	e0bffc17 	ldw	r2,-16(fp)
  8028a8:	10802783 	ldbu	r2,158(r2)
  8028ac:	10803fcc 	andi	r2,r2,255
  8028b0:	1080201c 	xori	r2,r2,128
  8028b4:	10bfe004 	addi	r2,r2,-128
  8028b8:	10000826 	beq	r2,zero,8028dc <logic+0x20a8>
  8028bc:	e0bffc17 	ldw	r2,-16(fp)
  8028c0:	10804a03 	ldbu	r2,296(r2)
  8028c4:	10803fcc 	andi	r2,r2,255
  8028c8:	1080201c 	xori	r2,r2,128
  8028cc:	10bfe004 	addi	r2,r2,-128
  8028d0:	1000021e 	bne	r2,zero,8028dc <logic+0x20a8>
  8028d4:	00800044 	movi	r2,1
  8028d8:	00000106 	br	8028e0 <logic+0x20ac>
  8028dc:	0005883a 	mov	r2,zero
  8028e0:	1007883a 	mov	r3,r2
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	10c05d85 	stb	r3,374(r2)
  d->_g60 = d->_g60_e3 && !d->_cg45;
  8028ec:	e0bffc17 	ldw	r2,-16(fp)
  8028f0:	10805dc3 	ldbu	r2,375(r2)
  8028f4:	10803fcc 	andi	r2,r2,255
  8028f8:	1080201c 	xori	r2,r2,128
  8028fc:	10bfe004 	addi	r2,r2,-128
  802900:	10000826 	beq	r2,zero,802924 <logic+0x20f0>
  802904:	e0bffc17 	ldw	r2,-16(fp)
  802908:	10804983 	ldbu	r2,294(r2)
  80290c:	10803fcc 	andi	r2,r2,255
  802910:	1080201c 	xori	r2,r2,128
  802914:	10bfe004 	addi	r2,r2,-128
  802918:	1000021e 	bne	r2,zero,802924 <logic+0x20f0>
  80291c:	00800044 	movi	r2,1
  802920:	00000106 	br	802928 <logic+0x20f4>
  802924:	0005883a 	mov	r2,zero
  802928:	1007883a 	mov	r3,r2
  80292c:	e0bffc17 	ldw	r2,-16(fp)
  802930:	10c02885 	stb	r3,162(r2)
  d->_cg55 = d->_heart2_local__Atrig3 || d->_heart2_local__Atrig4;
  802934:	e0bffc17 	ldw	r2,-16(fp)
  802938:	10801b03 	ldbu	r2,108(r2)
  80293c:	10803fcc 	andi	r2,r2,255
  802940:	1080201c 	xori	r2,r2,128
  802944:	10bfe004 	addi	r2,r2,-128
  802948:	1000061e 	bne	r2,zero,802964 <logic+0x2130>
  80294c:	e0bffc17 	ldw	r2,-16(fp)
  802950:	10801b43 	ldbu	r2,109(r2)
  802954:	10803fcc 	andi	r2,r2,255
  802958:	1080201c 	xori	r2,r2,128
  80295c:	10bfe004 	addi	r2,r2,-128
  802960:	10000226 	beq	r2,zero,80296c <logic+0x2138>
  802964:	00800044 	movi	r2,1
  802968:	00000106 	br	802970 <logic+0x213c>
  80296c:	0005883a 	mov	r2,zero
  802970:	1007883a 	mov	r3,r2
  802974:	e0bffc17 	ldw	r2,-16(fp)
  802978:	10c04ac5 	stb	r3,299(r2)
  d->_g73 = d->_g49 && !d->_cg52 || d->_g60 && !d->_cg55;
  80297c:	e0bffc17 	ldw	r2,-16(fp)
  802980:	10802683 	ldbu	r2,154(r2)
  802984:	10803fcc 	andi	r2,r2,255
  802988:	1080201c 	xori	r2,r2,128
  80298c:	10bfe004 	addi	r2,r2,-128
  802990:	10000626 	beq	r2,zero,8029ac <logic+0x2178>
  802994:	e0bffc17 	ldw	r2,-16(fp)
  802998:	10804a83 	ldbu	r2,298(r2)
  80299c:	10803fcc 	andi	r2,r2,255
  8029a0:	1080201c 	xori	r2,r2,128
  8029a4:	10bfe004 	addi	r2,r2,-128
  8029a8:	10000c26 	beq	r2,zero,8029dc <logic+0x21a8>
  8029ac:	e0bffc17 	ldw	r2,-16(fp)
  8029b0:	10802883 	ldbu	r2,162(r2)
  8029b4:	10803fcc 	andi	r2,r2,255
  8029b8:	1080201c 	xori	r2,r2,128
  8029bc:	10bfe004 	addi	r2,r2,-128
  8029c0:	10000826 	beq	r2,zero,8029e4 <logic+0x21b0>
  8029c4:	e0bffc17 	ldw	r2,-16(fp)
  8029c8:	10804ac3 	ldbu	r2,299(r2)
  8029cc:	10803fcc 	andi	r2,r2,255
  8029d0:	1080201c 	xori	r2,r2,128
  8029d4:	10bfe004 	addi	r2,r2,-128
  8029d8:	1000021e 	bne	r2,zero,8029e4 <logic+0x21b0>
  8029dc:	00800044 	movi	r2,1
  8029e0:	00000106 	br	8029e8 <logic+0x21b4>
  8029e4:	0005883a 	mov	r2,zero
  8029e8:	1007883a 	mov	r3,r2
  8029ec:	e0bffc17 	ldw	r2,-16(fp)
  8029f0:	10c02ac5 	stb	r3,171(r2)
  d->_g74 = d->_g60_e3 || d->_g72 && !d->_cg61;
  8029f4:	e0bffc17 	ldw	r2,-16(fp)
  8029f8:	10805dc3 	ldbu	r2,375(r2)
  8029fc:	10803fcc 	andi	r2,r2,255
  802a00:	1080201c 	xori	r2,r2,128
  802a04:	10bfe004 	addi	r2,r2,-128
  802a08:	10000c1e 	bne	r2,zero,802a3c <logic+0x2208>
  802a0c:	e0bffc17 	ldw	r2,-16(fp)
  802a10:	10802a83 	ldbu	r2,170(r2)
  802a14:	10803fcc 	andi	r2,r2,255
  802a18:	1080201c 	xori	r2,r2,128
  802a1c:	10bfe004 	addi	r2,r2,-128
  802a20:	10000826 	beq	r2,zero,802a44 <logic+0x2210>
  802a24:	e0bffc17 	ldw	r2,-16(fp)
  802a28:	10804b03 	ldbu	r2,300(r2)
  802a2c:	10803fcc 	andi	r2,r2,255
  802a30:	1080201c 	xori	r2,r2,128
  802a34:	10bfe004 	addi	r2,r2,-128
  802a38:	1000021e 	bne	r2,zero,802a44 <logic+0x2210>
  802a3c:	00800044 	movi	r2,1
  802a40:	00000106 	br	802a48 <logic+0x2214>
  802a44:	0005883a 	mov	r2,zero
  802a48:	1007883a 	mov	r3,r2
  802a4c:	e0bffc17 	ldw	r2,-16(fp)
  802a50:	10c02b05 	stb	r3,172(r2)
  d->_g43 = d->_g59 && d->_cg63;
  802a54:	e0bffc17 	ldw	r2,-16(fp)
  802a58:	10802843 	ldbu	r2,161(r2)
  802a5c:	10803fcc 	andi	r2,r2,255
  802a60:	1080201c 	xori	r2,r2,128
  802a64:	10bfe004 	addi	r2,r2,-128
  802a68:	10000826 	beq	r2,zero,802a8c <logic+0x2258>
  802a6c:	e0bffc17 	ldw	r2,-16(fp)
  802a70:	10804b83 	ldbu	r2,302(r2)
  802a74:	10803fcc 	andi	r2,r2,255
  802a78:	1080201c 	xori	r2,r2,128
  802a7c:	10bfe004 	addi	r2,r2,-128
  802a80:	10000226 	beq	r2,zero,802a8c <logic+0x2258>
  802a84:	00800044 	movi	r2,1
  802a88:	00000106 	br	802a90 <logic+0x225c>
  802a8c:	0005883a 	mov	r2,zero
  802a90:	1007883a 	mov	r3,r2
  802a94:	e0bffc17 	ldw	r2,-16(fp)
  802a98:	10c02585 	stb	r3,150(r2)
  if (d->_g43) {
  802a9c:	e0bffc17 	ldw	r2,-16(fp)
  802aa0:	10802583 	ldbu	r2,150(r2)
  802aa4:	10803fcc 	andi	r2,r2,255
  802aa8:	1080201c 	xori	r2,r2,128
  802aac:	10bfe004 	addi	r2,r2,-128
  802ab0:	10000826 	beq	r2,zero,802ad4 <logic+0x22a0>
    d->VP |= 1;
  802ab4:	e0bffc17 	ldw	r2,-16(fp)
  802ab8:	108017c3 	ldbu	r2,95(r2)
  802abc:	10800054 	ori	r2,r2,1
  802ac0:	1007883a 	mov	r3,r2
  802ac4:	e0bffc17 	ldw	r2,-16(fp)
  802ac8:	10c017c5 	stb	r3,95(r2)
    d->_heart2_local__Atrig5 = 0;
  802acc:	e0bffc17 	ldw	r2,-16(fp)
  802ad0:	10001b85 	stb	zero,110(r2)
  }
  d->_cg65 = d->_heart2_local__Atrig5;
  802ad4:	e0bffc17 	ldw	r2,-16(fp)
  802ad8:	10c01b83 	ldbu	r3,110(r2)
  802adc:	e0bffc17 	ldw	r2,-16(fp)
  802ae0:	10c04bc5 	stb	r3,303(r2)
  d->_g46 = d->_g43 && !d->_cg65 || d->_g15 && !d->_cg67;
  802ae4:	e0bffc17 	ldw	r2,-16(fp)
  802ae8:	10802583 	ldbu	r2,150(r2)
  802aec:	10803fcc 	andi	r2,r2,255
  802af0:	1080201c 	xori	r2,r2,128
  802af4:	10bfe004 	addi	r2,r2,-128
  802af8:	10000626 	beq	r2,zero,802b14 <logic+0x22e0>
  802afc:	e0bffc17 	ldw	r2,-16(fp)
  802b00:	10804bc3 	ldbu	r2,303(r2)
  802b04:	10803fcc 	andi	r2,r2,255
  802b08:	1080201c 	xori	r2,r2,128
  802b0c:	10bfe004 	addi	r2,r2,-128
  802b10:	10000c26 	beq	r2,zero,802b44 <logic+0x2310>
  802b14:	e0bffc17 	ldw	r2,-16(fp)
  802b18:	10802143 	ldbu	r2,133(r2)
  802b1c:	10803fcc 	andi	r2,r2,255
  802b20:	1080201c 	xori	r2,r2,128
  802b24:	10bfe004 	addi	r2,r2,-128
  802b28:	10000826 	beq	r2,zero,802b4c <logic+0x2318>
  802b2c:	e0bffc17 	ldw	r2,-16(fp)
  802b30:	10804c03 	ldbu	r2,304(r2)
  802b34:	10803fcc 	andi	r2,r2,255
  802b38:	1080201c 	xori	r2,r2,128
  802b3c:	10bfe004 	addi	r2,r2,-128
  802b40:	1000021e 	bne	r2,zero,802b4c <logic+0x2318>
  802b44:	00800044 	movi	r2,1
  802b48:	00000106 	br	802b50 <logic+0x231c>
  802b4c:	0005883a 	mov	r2,zero
  802b50:	1007883a 	mov	r3,r2
  802b54:	e0bffc17 	ldw	r2,-16(fp)
  802b58:	10c02605 	stb	r3,152(r2)
  d->_g50 = d->_g43 || d->_g24 && !d->_cg71;
  802b5c:	e0bffc17 	ldw	r2,-16(fp)
  802b60:	10802583 	ldbu	r2,150(r2)
  802b64:	10803fcc 	andi	r2,r2,255
  802b68:	1080201c 	xori	r2,r2,128
  802b6c:	10bfe004 	addi	r2,r2,-128
  802b70:	10000c1e 	bne	r2,zero,802ba4 <logic+0x2370>
  802b74:	e0bffc17 	ldw	r2,-16(fp)
  802b78:	108022c3 	ldbu	r2,139(r2)
  802b7c:	10803fcc 	andi	r2,r2,255
  802b80:	1080201c 	xori	r2,r2,128
  802b84:	10bfe004 	addi	r2,r2,-128
  802b88:	10000826 	beq	r2,zero,802bac <logic+0x2378>
  802b8c:	e0bffc17 	ldw	r2,-16(fp)
  802b90:	10804c43 	ldbu	r2,305(r2)
  802b94:	10803fcc 	andi	r2,r2,255
  802b98:	1080201c 	xori	r2,r2,128
  802b9c:	10bfe004 	addi	r2,r2,-128
  802ba0:	1000021e 	bne	r2,zero,802bac <logic+0x2378>
  802ba4:	00800044 	movi	r2,1
  802ba8:	00000106 	br	802bb0 <logic+0x237c>
  802bac:	0005883a 	mov	r2,zero
  802bb0:	1007883a 	mov	r3,r2
  802bb4:	e0bffc17 	ldw	r2,-16(fp)
  802bb8:	10c026c5 	stb	r3,155(r2)
  d->_g55 = d->_pg83;
  802bbc:	e0bffc17 	ldw	r2,-16(fp)
  802bc0:	10c06703 	ldbu	r3,412(r2)
  802bc4:	e0bffc17 	ldw	r2,-16(fp)
  802bc8:	10c027c5 	stb	r3,159(r2)
  if (d->_g55) {
  802bcc:	e0bffc17 	ldw	r2,-16(fp)
  802bd0:	108027c3 	ldbu	r2,159(r2)
  802bd4:	10803fcc 	andi	r2,r2,255
  802bd8:	1080201c 	xori	r2,r2,128
  802bdc:	10bfe004 	addi	r2,r2,-128
  802be0:	10001226 	beq	r2,zero,802c2c <logic+0x23f8>
    d->_region2_null_VRP += d->deltaT;
  802be4:	e13ffc17 	ldw	r4,-16(fp)
  802be8:	20800b17 	ldw	r2,44(r4)
  802bec:	20c00c17 	ldw	r3,48(r4)
  802bf0:	e1bffc17 	ldw	r6,-16(fp)
  802bf4:	31001317 	ldw	r4,76(r6)
  802bf8:	31401417 	ldw	r5,80(r6)
  802bfc:	200d883a 	mov	r6,r4
  802c00:	280f883a 	mov	r7,r5
  802c04:	1009883a 	mov	r4,r2
  802c08:	180b883a 	mov	r5,r3
  802c0c:	08079680 	call	807968 <__adddf3>
  802c10:	1009883a 	mov	r4,r2
  802c14:	180b883a 	mov	r5,r3
  802c18:	2005883a 	mov	r2,r4
  802c1c:	2807883a 	mov	r3,r5
  802c20:	e13ffc17 	ldw	r4,-16(fp)
  802c24:	20800b15 	stw	r2,44(r4)
  802c28:	20c00c15 	stw	r3,48(r4)
  }
  d->_g52 = !d->_g55;
  802c2c:	e0bffc17 	ldw	r2,-16(fp)
  802c30:	108027c3 	ldbu	r2,159(r2)
  802c34:	10803fcc 	andi	r2,r2,255
  802c38:	1080201c 	xori	r2,r2,128
  802c3c:	10bfe004 	addi	r2,r2,-128
  802c40:	1005003a 	cmpeq	r2,r2,zero
  802c44:	1007883a 	mov	r3,r2
  802c48:	e0bffc17 	ldw	r2,-16(fp)
  802c4c:	10c02745 	stb	r3,157(r2)
  d->_g40 = d->_pg89;
  802c50:	e0bffc17 	ldw	r2,-16(fp)
  802c54:	10c06743 	ldbu	r3,413(r2)
  802c58:	e0bffc17 	ldw	r2,-16(fp)
  802c5c:	10c02545 	stb	r3,149(r2)
  d->_cg108 = d->v;
  802c60:	e0bffc17 	ldw	r2,-16(fp)
  802c64:	10c018c3 	ldbu	r3,99(r2)
  802c68:	e0bffc17 	ldw	r2,-16(fp)
  802c6c:	10c05005 	stb	r3,320(r2)
  d->_g61 = d->_g40 && d->_cg108;
  802c70:	e0bffc17 	ldw	r2,-16(fp)
  802c74:	10802543 	ldbu	r2,149(r2)
  802c78:	10803fcc 	andi	r2,r2,255
  802c7c:	1080201c 	xori	r2,r2,128
  802c80:	10bfe004 	addi	r2,r2,-128
  802c84:	10000826 	beq	r2,zero,802ca8 <logic+0x2474>
  802c88:	e0bffc17 	ldw	r2,-16(fp)
  802c8c:	10805003 	ldbu	r2,320(r2)
  802c90:	10803fcc 	andi	r2,r2,255
  802c94:	1080201c 	xori	r2,r2,128
  802c98:	10bfe004 	addi	r2,r2,-128
  802c9c:	10000226 	beq	r2,zero,802ca8 <logic+0x2474>
  802ca0:	00800044 	movi	r2,1
  802ca4:	00000106 	br	802cac <logic+0x2478>
  802ca8:	0005883a 	mov	r2,zero
  802cac:	1007883a 	mov	r3,r2
  802cb0:	e0bffc17 	ldw	r2,-16(fp)
  802cb4:	10c028c5 	stb	r3,163(r2)
  if (d->_g61) {
  802cb8:	e0bffc17 	ldw	r2,-16(fp)
  802cbc:	108028c3 	ldbu	r2,163(r2)
  802cc0:	10803fcc 	andi	r2,r2,255
  802cc4:	1080201c 	xori	r2,r2,128
  802cc8:	10bfe004 	addi	r2,r2,-128
  802ccc:	10000326 	beq	r2,zero,802cdc <logic+0x24a8>
    d->_heart2_local__Atrig8 = 1;
  802cd0:	e0bffc17 	ldw	r2,-16(fp)
  802cd4:	00c00044 	movi	r3,1
  802cd8:	10c01c45 	stb	r3,113(r2)
  }
  d->_g63 = d->_g40 && !d->_cg108;
  802cdc:	e0bffc17 	ldw	r2,-16(fp)
  802ce0:	10802543 	ldbu	r2,149(r2)
  802ce4:	10803fcc 	andi	r2,r2,255
  802ce8:	1080201c 	xori	r2,r2,128
  802cec:	10bfe004 	addi	r2,r2,-128
  802cf0:	10000826 	beq	r2,zero,802d14 <logic+0x24e0>
  802cf4:	e0bffc17 	ldw	r2,-16(fp)
  802cf8:	10805003 	ldbu	r2,320(r2)
  802cfc:	10803fcc 	andi	r2,r2,255
  802d00:	1080201c 	xori	r2,r2,128
  802d04:	10bfe004 	addi	r2,r2,-128
  802d08:	1000021e 	bne	r2,zero,802d14 <logic+0x24e0>
  802d0c:	00800044 	movi	r2,1
  802d10:	00000106 	br	802d18 <logic+0x24e4>
  802d14:	0005883a 	mov	r2,zero
  802d18:	1007883a 	mov	r3,r2
  802d1c:	e0bffc17 	ldw	r2,-16(fp)
  802d20:	10c02945 	stb	r3,165(r2)
  d->_g67 = d->_g63 && d->VS;
  802d24:	e0bffc17 	ldw	r2,-16(fp)
  802d28:	10802943 	ldbu	r2,165(r2)
  802d2c:	10803fcc 	andi	r2,r2,255
  802d30:	1080201c 	xori	r2,r2,128
  802d34:	10bfe004 	addi	r2,r2,-128
  802d38:	10000826 	beq	r2,zero,802d5c <logic+0x2528>
  802d3c:	e0bffc17 	ldw	r2,-16(fp)
  802d40:	10801743 	ldbu	r2,93(r2)
  802d44:	10803fcc 	andi	r2,r2,255
  802d48:	1080201c 	xori	r2,r2,128
  802d4c:	10bfe004 	addi	r2,r2,-128
  802d50:	10000226 	beq	r2,zero,802d5c <logic+0x2528>
  802d54:	00800044 	movi	r2,1
  802d58:	00000106 	br	802d60 <logic+0x252c>
  802d5c:	0005883a 	mov	r2,zero
  802d60:	1007883a 	mov	r3,r2
  802d64:	e0bffc17 	ldw	r2,-16(fp)
  802d68:	10c029c5 	stb	r3,167(r2)
  if (d->_g67) {
  802d6c:	e0bffc17 	ldw	r2,-16(fp)
  802d70:	108029c3 	ldbu	r2,167(r2)
  802d74:	10803fcc 	andi	r2,r2,255
  802d78:	1080201c 	xori	r2,r2,128
  802d7c:	10bfe004 	addi	r2,r2,-128
  802d80:	10000326 	beq	r2,zero,802d90 <logic+0x255c>
    d->_heart2_local__Atrig9 = 1;
  802d84:	e0bffc17 	ldw	r2,-16(fp)
  802d88:	00c00044 	movi	r3,1
  802d8c:	10c01c85 	stb	r3,114(r2)
  }
  d->_cg104 = d->_heart2_local__Atrig8 || d->_heart2_local__Atrig9;
  802d90:	e0bffc17 	ldw	r2,-16(fp)
  802d94:	10801c43 	ldbu	r2,113(r2)
  802d98:	10803fcc 	andi	r2,r2,255
  802d9c:	1080201c 	xori	r2,r2,128
  802da0:	10bfe004 	addi	r2,r2,-128
  802da4:	1000061e 	bne	r2,zero,802dc0 <logic+0x258c>
  802da8:	e0bffc17 	ldw	r2,-16(fp)
  802dac:	10801c83 	ldbu	r2,114(r2)
  802db0:	10803fcc 	andi	r2,r2,255
  802db4:	1080201c 	xori	r2,r2,128
  802db8:	10bfe004 	addi	r2,r2,-128
  802dbc:	10000226 	beq	r2,zero,802dc8 <logic+0x2594>
  802dc0:	00800044 	movi	r2,1
  802dc4:	00000106 	br	802dcc <logic+0x2598>
  802dc8:	0005883a 	mov	r2,zero
  802dcc:	1007883a 	mov	r3,r2
  802dd0:	e0bffc17 	ldw	r2,-16(fp)
  802dd4:	10c04f85 	stb	r3,318(r2)
  d->_g64 = d->_g55 && d->_cg104;
  802dd8:	e0bffc17 	ldw	r2,-16(fp)
  802ddc:	108027c3 	ldbu	r2,159(r2)
  802de0:	10803fcc 	andi	r2,r2,255
  802de4:	1080201c 	xori	r2,r2,128
  802de8:	10bfe004 	addi	r2,r2,-128
  802dec:	10000826 	beq	r2,zero,802e10 <logic+0x25dc>
  802df0:	e0bffc17 	ldw	r2,-16(fp)
  802df4:	10804f83 	ldbu	r2,318(r2)
  802df8:	10803fcc 	andi	r2,r2,255
  802dfc:	1080201c 	xori	r2,r2,128
  802e00:	10bfe004 	addi	r2,r2,-128
  802e04:	10000226 	beq	r2,zero,802e10 <logic+0x25dc>
  802e08:	00800044 	movi	r2,1
  802e0c:	00000106 	br	802e14 <logic+0x25e0>
  802e10:	0005883a 	mov	r2,zero
  802e14:	1007883a 	mov	r3,r2
  802e18:	e0bffc17 	ldw	r2,-16(fp)
  802e1c:	10c02985 	stb	r3,166(r2)
  d->_g71 = !d->_g40;
  802e20:	e0bffc17 	ldw	r2,-16(fp)
  802e24:	10802543 	ldbu	r2,149(r2)
  802e28:	10803fcc 	andi	r2,r2,255
  802e2c:	1080201c 	xori	r2,r2,128
  802e30:	10bfe004 	addi	r2,r2,-128
  802e34:	1005003a 	cmpeq	r2,r2,zero
  802e38:	1007883a 	mov	r3,r2
  802e3c:	e0bffc17 	ldw	r2,-16(fp)
  802e40:	10c02a45 	stb	r3,169(r2)
  d->_g108 = d->_g61 || d->_g67;
  802e44:	e0bffc17 	ldw	r2,-16(fp)
  802e48:	108028c3 	ldbu	r2,163(r2)
  802e4c:	10803fcc 	andi	r2,r2,255
  802e50:	1080201c 	xori	r2,r2,128
  802e54:	10bfe004 	addi	r2,r2,-128
  802e58:	1000061e 	bne	r2,zero,802e74 <logic+0x2640>
  802e5c:	e0bffc17 	ldw	r2,-16(fp)
  802e60:	108029c3 	ldbu	r2,167(r2)
  802e64:	10803fcc 	andi	r2,r2,255
  802e68:	1080201c 	xori	r2,r2,128
  802e6c:	10bfe004 	addi	r2,r2,-128
  802e70:	10000226 	beq	r2,zero,802e7c <logic+0x2648>
  802e74:	00800044 	movi	r2,1
  802e78:	00000106 	br	802e80 <logic+0x264c>
  802e7c:	0005883a 	mov	r2,zero
  802e80:	1007883a 	mov	r3,r2
  802e84:	e0bffc17 	ldw	r2,-16(fp)
  802e88:	10c03045 	stb	r3,193(r2)
  d->_g112 = (d->_g52 || d->_g64) && (d->_g71 || d->_g108) && (d->_g64 || d->_g108);
  802e8c:	e0bffc17 	ldw	r2,-16(fp)
  802e90:	10802743 	ldbu	r2,157(r2)
  802e94:	10803fcc 	andi	r2,r2,255
  802e98:	1080201c 	xori	r2,r2,128
  802e9c:	10bfe004 	addi	r2,r2,-128
  802ea0:	1000061e 	bne	r2,zero,802ebc <logic+0x2688>
  802ea4:	e0bffc17 	ldw	r2,-16(fp)
  802ea8:	10802983 	ldbu	r2,166(r2)
  802eac:	10803fcc 	andi	r2,r2,255
  802eb0:	1080201c 	xori	r2,r2,128
  802eb4:	10bfe004 	addi	r2,r2,-128
  802eb8:	10001a26 	beq	r2,zero,802f24 <logic+0x26f0>
  802ebc:	e0bffc17 	ldw	r2,-16(fp)
  802ec0:	10802a43 	ldbu	r2,169(r2)
  802ec4:	10803fcc 	andi	r2,r2,255
  802ec8:	1080201c 	xori	r2,r2,128
  802ecc:	10bfe004 	addi	r2,r2,-128
  802ed0:	1000061e 	bne	r2,zero,802eec <logic+0x26b8>
  802ed4:	e0bffc17 	ldw	r2,-16(fp)
  802ed8:	10803043 	ldbu	r2,193(r2)
  802edc:	10803fcc 	andi	r2,r2,255
  802ee0:	1080201c 	xori	r2,r2,128
  802ee4:	10bfe004 	addi	r2,r2,-128
  802ee8:	10000e26 	beq	r2,zero,802f24 <logic+0x26f0>
  802eec:	e0bffc17 	ldw	r2,-16(fp)
  802ef0:	10802983 	ldbu	r2,166(r2)
  802ef4:	10803fcc 	andi	r2,r2,255
  802ef8:	1080201c 	xori	r2,r2,128
  802efc:	10bfe004 	addi	r2,r2,-128
  802f00:	1000061e 	bne	r2,zero,802f1c <logic+0x26e8>
  802f04:	e0bffc17 	ldw	r2,-16(fp)
  802f08:	10803043 	ldbu	r2,193(r2)
  802f0c:	10803fcc 	andi	r2,r2,255
  802f10:	1080201c 	xori	r2,r2,128
  802f14:	10bfe004 	addi	r2,r2,-128
  802f18:	10000226 	beq	r2,zero,802f24 <logic+0x26f0>
  802f1c:	00800044 	movi	r2,1
  802f20:	00000106 	br	802f28 <logic+0x26f4>
  802f24:	0005883a 	mov	r2,zero
  802f28:	1007883a 	mov	r3,r2
  802f2c:	e0bffc17 	ldw	r2,-16(fp)
  802f30:	10c03145 	stb	r3,197(r2)
  d->_cg113 = d->_heart2_local__Atrig8;
  802f34:	e0bffc17 	ldw	r2,-16(fp)
  802f38:	10c01c43 	ldbu	r3,113(r2)
  802f3c:	e0bffc17 	ldw	r2,-16(fp)
  802f40:	10c05045 	stb	r3,321(r2)
  d->_g109 = d->_g112 && d->_cg113;
  802f44:	e0bffc17 	ldw	r2,-16(fp)
  802f48:	10803143 	ldbu	r2,197(r2)
  802f4c:	10803fcc 	andi	r2,r2,255
  802f50:	1080201c 	xori	r2,r2,128
  802f54:	10bfe004 	addi	r2,r2,-128
  802f58:	10000826 	beq	r2,zero,802f7c <logic+0x2748>
  802f5c:	e0bffc17 	ldw	r2,-16(fp)
  802f60:	10805043 	ldbu	r2,321(r2)
  802f64:	10803fcc 	andi	r2,r2,255
  802f68:	1080201c 	xori	r2,r2,128
  802f6c:	10bfe004 	addi	r2,r2,-128
  802f70:	10000226 	beq	r2,zero,802f7c <logic+0x2748>
  802f74:	00800044 	movi	r2,1
  802f78:	00000106 	br	802f80 <logic+0x274c>
  802f7c:	0005883a 	mov	r2,zero
  802f80:	1007883a 	mov	r3,r2
  802f84:	e0bffc17 	ldw	r2,-16(fp)
  802f88:	10c03085 	stb	r3,194(r2)
  if (d->_g109) {
  802f8c:	e0bffc17 	ldw	r2,-16(fp)
  802f90:	10803083 	ldbu	r2,194(r2)
  802f94:	10803fcc 	andi	r2,r2,255
  802f98:	1080201c 	xori	r2,r2,128
  802f9c:	10bfe004 	addi	r2,r2,-128
  802fa0:	10000326 	beq	r2,zero,802fb0 <logic+0x277c>
    d->_region2_null_VRP = 0;
  802fa4:	e0bffc17 	ldw	r2,-16(fp)
  802fa8:	10000b15 	stw	zero,44(r2)
  802fac:	10000c15 	stw	zero,48(r2)
  }
  d->_g105_e1 = d->_pg88;
  802fb0:	e0bffc17 	ldw	r2,-16(fp)
  802fb4:	10c06783 	ldbu	r3,414(r2)
  802fb8:	e0bffc17 	ldw	r2,-16(fp)
  802fbc:	10c05f45 	stb	r3,381(r2)
  if (d->_g105_e1) {
  802fc0:	e0bffc17 	ldw	r2,-16(fp)
  802fc4:	10805f43 	ldbu	r2,381(r2)
  802fc8:	10803fcc 	andi	r2,r2,255
  802fcc:	1080201c 	xori	r2,r2,128
  802fd0:	10bfe004 	addi	r2,r2,-128
  802fd4:	10001226 	beq	r2,zero,803020 <logic+0x27ec>
    d->_region2_null_VRP += d->deltaT;
  802fd8:	e13ffc17 	ldw	r4,-16(fp)
  802fdc:	20800b17 	ldw	r2,44(r4)
  802fe0:	20c00c17 	ldw	r3,48(r4)
  802fe4:	e1bffc17 	ldw	r6,-16(fp)
  802fe8:	31001317 	ldw	r4,76(r6)
  802fec:	31401417 	ldw	r5,80(r6)
  802ff0:	200d883a 	mov	r6,r4
  802ff4:	280f883a 	mov	r7,r5
  802ff8:	1009883a 	mov	r4,r2
  802ffc:	180b883a 	mov	r5,r3
  803000:	08079680 	call	807968 <__adddf3>
  803004:	1009883a 	mov	r4,r2
  803008:	180b883a 	mov	r5,r3
  80300c:	2005883a 	mov	r2,r4
  803010:	2807883a 	mov	r3,r5
  803014:	e13ffc17 	ldw	r4,-16(fp)
  803018:	20800b15 	stw	r2,44(r4)
  80301c:	20c00c15 	stw	r3,48(r4)
  }
  d->_g110 = !d->_g105_e1;
  803020:	e0bffc17 	ldw	r2,-16(fp)
  803024:	10805f43 	ldbu	r2,381(r2)
  803028:	10803fcc 	andi	r2,r2,255
  80302c:	1080201c 	xori	r2,r2,128
  803030:	10bfe004 	addi	r2,r2,-128
  803034:	1005003a 	cmpeq	r2,r2,zero
  803038:	1007883a 	mov	r3,r2
  80303c:	e0bffc17 	ldw	r2,-16(fp)
  803040:	10c030c5 	stb	r3,195(r2)
  d->_g105 = d->_pg114;
  803044:	e0bffc17 	ldw	r2,-16(fp)
  803048:	10c067c3 	ldbu	r3,415(r2)
  80304c:	e0bffc17 	ldw	r2,-16(fp)
  803050:	10c03005 	stb	r3,192(r2)
  d->_cg95 = d->_region2_null_VRP >= d->VRP_time;
  803054:	e0bffc17 	ldw	r2,-16(fp)
  803058:	14000b17 	ldw	r16,44(r2)
  80305c:	14400c17 	ldw	r17,48(r2)
  803060:	e0bffc17 	ldw	r2,-16(fp)
  803064:	10800017 	ldw	r2,0(r2)
  803068:	1009883a 	mov	r4,r2
  80306c:	0808ce00 	call	808ce0 <__floatsidf>
  803070:	1009883a 	mov	r4,r2
  803074:	180b883a 	mov	r5,r3
  803078:	04800044 	movi	r18,1
  80307c:	200d883a 	mov	r6,r4
  803080:	280f883a 	mov	r7,r5
  803084:	8009883a 	mov	r4,r16
  803088:	880b883a 	mov	r5,r17
  80308c:	08082140 	call	808214 <__gedf2>
  803090:	1000010e 	bge	r2,zero,803098 <logic+0x2864>
  803094:	0025883a 	mov	r18,zero
  803098:	9007883a 	mov	r3,r18
  80309c:	e0bffc17 	ldw	r2,-16(fp)
  8030a0:	10c04ec5 	stb	r3,315(r2)
  d->_g110_e2 = d->_g105 && d->_cg95;
  8030a4:	e0bffc17 	ldw	r2,-16(fp)
  8030a8:	10803003 	ldbu	r2,192(r2)
  8030ac:	10803fcc 	andi	r2,r2,255
  8030b0:	1080201c 	xori	r2,r2,128
  8030b4:	10bfe004 	addi	r2,r2,-128
  8030b8:	10000826 	beq	r2,zero,8030dc <logic+0x28a8>
  8030bc:	e0bffc17 	ldw	r2,-16(fp)
  8030c0:	10804ec3 	ldbu	r2,315(r2)
  8030c4:	10803fcc 	andi	r2,r2,255
  8030c8:	1080201c 	xori	r2,r2,128
  8030cc:	10bfe004 	addi	r2,r2,-128
  8030d0:	10000226 	beq	r2,zero,8030dc <logic+0x28a8>
  8030d4:	00800044 	movi	r2,1
  8030d8:	00000106 	br	8030e0 <logic+0x28ac>
  8030dc:	0005883a 	mov	r2,zero
  8030e0:	1007883a 	mov	r3,r2
  8030e4:	e0bffc17 	ldw	r2,-16(fp)
  8030e8:	10c05f85 	stb	r3,382(r2)
  if (d->_g110_e2) {
  8030ec:	e0bffc17 	ldw	r2,-16(fp)
  8030f0:	10805f83 	ldbu	r2,382(r2)
  8030f4:	10803fcc 	andi	r2,r2,255
  8030f8:	1080201c 	xori	r2,r2,128
  8030fc:	10bfe004 	addi	r2,r2,-128
  803100:	10000326 	beq	r2,zero,803110 <logic+0x28dc>
    d->_heart2_local__Atrig6 = 1;
  803104:	e0bffc17 	ldw	r2,-16(fp)
  803108:	00c00044 	movi	r3,1
  80310c:	10c01bc5 	stb	r3,111(r2)
  }
  d->_g98 = d->_g105 && !d->_cg95;
  803110:	e0bffc17 	ldw	r2,-16(fp)
  803114:	10803003 	ldbu	r2,192(r2)
  803118:	10803fcc 	andi	r2,r2,255
  80311c:	1080201c 	xori	r2,r2,128
  803120:	10bfe004 	addi	r2,r2,-128
  803124:	10000826 	beq	r2,zero,803148 <logic+0x2914>
  803128:	e0bffc17 	ldw	r2,-16(fp)
  80312c:	10804ec3 	ldbu	r2,315(r2)
  803130:	10803fcc 	andi	r2,r2,255
  803134:	1080201c 	xori	r2,r2,128
  803138:	10bfe004 	addi	r2,r2,-128
  80313c:	1000021e 	bne	r2,zero,803148 <logic+0x2914>
  803140:	00800044 	movi	r2,1
  803144:	00000106 	br	80314c <logic+0x2918>
  803148:	0005883a 	mov	r2,zero
  80314c:	1007883a 	mov	r3,r2
  803150:	e0bffc17 	ldw	r2,-16(fp)
  803154:	10c02ec5 	stb	r3,187(r2)
  d->_g99 = d->_g98 && d->VS;
  803158:	e0bffc17 	ldw	r2,-16(fp)
  80315c:	10802ec3 	ldbu	r2,187(r2)
  803160:	10803fcc 	andi	r2,r2,255
  803164:	1080201c 	xori	r2,r2,128
  803168:	10bfe004 	addi	r2,r2,-128
  80316c:	10000826 	beq	r2,zero,803190 <logic+0x295c>
  803170:	e0bffc17 	ldw	r2,-16(fp)
  803174:	10801743 	ldbu	r2,93(r2)
  803178:	10803fcc 	andi	r2,r2,255
  80317c:	1080201c 	xori	r2,r2,128
  803180:	10bfe004 	addi	r2,r2,-128
  803184:	10000226 	beq	r2,zero,803190 <logic+0x295c>
  803188:	00800044 	movi	r2,1
  80318c:	00000106 	br	803194 <logic+0x2960>
  803190:	0005883a 	mov	r2,zero
  803194:	1007883a 	mov	r3,r2
  803198:	e0bffc17 	ldw	r2,-16(fp)
  80319c:	10c02f05 	stb	r3,188(r2)
  if (d->_g99) {
  8031a0:	e0bffc17 	ldw	r2,-16(fp)
  8031a4:	10802f03 	ldbu	r2,188(r2)
  8031a8:	10803fcc 	andi	r2,r2,255
  8031ac:	1080201c 	xori	r2,r2,128
  8031b0:	10bfe004 	addi	r2,r2,-128
  8031b4:	10000326 	beq	r2,zero,8031c4 <logic+0x2990>
    d->_heart2_local__Atrig7 = 1;
  8031b8:	e0bffc17 	ldw	r2,-16(fp)
  8031bc:	00c00044 	movi	r3,1
  8031c0:	10c01c05 	stb	r3,112(r2)
  }
  d->_cg80 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  8031c4:	e0bffc17 	ldw	r2,-16(fp)
  8031c8:	10801bc3 	ldbu	r2,111(r2)
  8031cc:	10803fcc 	andi	r2,r2,255
  8031d0:	1080201c 	xori	r2,r2,128
  8031d4:	10bfe004 	addi	r2,r2,-128
  8031d8:	1000061e 	bne	r2,zero,8031f4 <logic+0x29c0>
  8031dc:	e0bffc17 	ldw	r2,-16(fp)
  8031e0:	10801c03 	ldbu	r2,112(r2)
  8031e4:	10803fcc 	andi	r2,r2,255
  8031e8:	1080201c 	xori	r2,r2,128
  8031ec:	10bfe004 	addi	r2,r2,-128
  8031f0:	10000226 	beq	r2,zero,8031fc <logic+0x29c8>
  8031f4:	00800044 	movi	r2,1
  8031f8:	00000106 	br	803200 <logic+0x29cc>
  8031fc:	0005883a 	mov	r2,zero
  803200:	1007883a 	mov	r3,r2
  803204:	e0bffc17 	ldw	r2,-16(fp)
  803208:	10c04cc5 	stb	r3,307(r2)
  d->_g81 = d->_g105_e1 && d->_cg80;
  80320c:	e0bffc17 	ldw	r2,-16(fp)
  803210:	10805f43 	ldbu	r2,381(r2)
  803214:	10803fcc 	andi	r2,r2,255
  803218:	1080201c 	xori	r2,r2,128
  80321c:	10bfe004 	addi	r2,r2,-128
  803220:	10000826 	beq	r2,zero,803244 <logic+0x2a10>
  803224:	e0bffc17 	ldw	r2,-16(fp)
  803228:	10804cc3 	ldbu	r2,307(r2)
  80322c:	10803fcc 	andi	r2,r2,255
  803230:	1080201c 	xori	r2,r2,128
  803234:	10bfe004 	addi	r2,r2,-128
  803238:	10000226 	beq	r2,zero,803244 <logic+0x2a10>
  80323c:	00800044 	movi	r2,1
  803240:	00000106 	br	803248 <logic+0x2a14>
  803244:	0005883a 	mov	r2,zero
  803248:	1007883a 	mov	r3,r2
  80324c:	e0bffc17 	ldw	r2,-16(fp)
  803250:	10c02bc5 	stb	r3,175(r2)
  d->_g91 = d->_pg116;
  803254:	e0bffc17 	ldw	r2,-16(fp)
  803258:	10c06803 	ldbu	r3,416(r2)
  80325c:	e0bffc17 	ldw	r2,-16(fp)
  803260:	10c02d85 	stb	r3,182(r2)
  d->_g85 = d->_pg97_e3;
  803264:	e0bffc17 	ldw	r2,-16(fp)
  803268:	10c06843 	ldbu	r3,417(r2)
  80326c:	e0bffc17 	ldw	r2,-16(fp)
  803270:	10c02c45 	stb	r3,177(r2)
  d->_g88_e2 = !(d->_g91 || d->_g85);
  803274:	e0bffc17 	ldw	r2,-16(fp)
  803278:	10802d83 	ldbu	r2,182(r2)
  80327c:	10803fcc 	andi	r2,r2,255
  803280:	1080201c 	xori	r2,r2,128
  803284:	10bfe004 	addi	r2,r2,-128
  803288:	1000081e 	bne	r2,zero,8032ac <logic+0x2a78>
  80328c:	e0bffc17 	ldw	r2,-16(fp)
  803290:	10802c43 	ldbu	r2,177(r2)
  803294:	10803fcc 	andi	r2,r2,255
  803298:	1080201c 	xori	r2,r2,128
  80329c:	10bfe004 	addi	r2,r2,-128
  8032a0:	1000021e 	bne	r2,zero,8032ac <logic+0x2a78>
  8032a4:	00800044 	movi	r2,1
  8032a8:	00000106 	br	8032b0 <logic+0x2a7c>
  8032ac:	0005883a 	mov	r2,zero
  8032b0:	1007883a 	mov	r3,r2
  8032b4:	e0bffc17 	ldw	r2,-16(fp)
  8032b8:	10c05ec5 	stb	r3,379(r2)
  d->_g91 = d->_g85 || d->_g91;
  8032bc:	e0bffc17 	ldw	r2,-16(fp)
  8032c0:	10802c43 	ldbu	r2,177(r2)
  8032c4:	10803fcc 	andi	r2,r2,255
  8032c8:	1080201c 	xori	r2,r2,128
  8032cc:	10bfe004 	addi	r2,r2,-128
  8032d0:	1000061e 	bne	r2,zero,8032ec <logic+0x2ab8>
  8032d4:	e0bffc17 	ldw	r2,-16(fp)
  8032d8:	10802d83 	ldbu	r2,182(r2)
  8032dc:	10803fcc 	andi	r2,r2,255
  8032e0:	1080201c 	xori	r2,r2,128
  8032e4:	10bfe004 	addi	r2,r2,-128
  8032e8:	10000226 	beq	r2,zero,8032f4 <logic+0x2ac0>
  8032ec:	00800044 	movi	r2,1
  8032f0:	00000106 	br	8032f8 <logic+0x2ac4>
  8032f4:	0005883a 	mov	r2,zero
  8032f8:	1007883a 	mov	r3,r2
  8032fc:	e0bffc17 	ldw	r2,-16(fp)
  803300:	10c02d85 	stb	r3,182(r2)
  d->_cg86 = d->_region2_null_VRP < d->VRP_time;
  803304:	e0bffc17 	ldw	r2,-16(fp)
  803308:	14000b17 	ldw	r16,44(r2)
  80330c:	14400c17 	ldw	r17,48(r2)
  803310:	e0bffc17 	ldw	r2,-16(fp)
  803314:	10800017 	ldw	r2,0(r2)
  803318:	1009883a 	mov	r4,r2
  80331c:	0808ce00 	call	808ce0 <__floatsidf>
  803320:	1009883a 	mov	r4,r2
  803324:	180b883a 	mov	r5,r3
  803328:	04800044 	movi	r18,1
  80332c:	200d883a 	mov	r6,r4
  803330:	280f883a 	mov	r7,r5
  803334:	8009883a 	mov	r4,r16
  803338:	880b883a 	mov	r5,r17
  80333c:	08082f00 	call	8082f0 <__ledf2>
  803340:	10000116 	blt	r2,zero,803348 <logic+0x2b14>
  803344:	0025883a 	mov	r18,zero
  803348:	9007883a 	mov	r3,r18
  80334c:	e0bffc17 	ldw	r2,-16(fp)
  803350:	10c04dc5 	stb	r3,311(r2)
  d->_g85 = d->_g91 && d->_cg86;
  803354:	e0bffc17 	ldw	r2,-16(fp)
  803358:	10802d83 	ldbu	r2,182(r2)
  80335c:	10803fcc 	andi	r2,r2,255
  803360:	1080201c 	xori	r2,r2,128
  803364:	10bfe004 	addi	r2,r2,-128
  803368:	10000826 	beq	r2,zero,80338c <logic+0x2b58>
  80336c:	e0bffc17 	ldw	r2,-16(fp)
  803370:	10804dc3 	ldbu	r2,311(r2)
  803374:	10803fcc 	andi	r2,r2,255
  803378:	1080201c 	xori	r2,r2,128
  80337c:	10bfe004 	addi	r2,r2,-128
  803380:	10000226 	beq	r2,zero,80338c <logic+0x2b58>
  803384:	00800044 	movi	r2,1
  803388:	00000106 	br	803390 <logic+0x2b5c>
  80338c:	0005883a 	mov	r2,zero
  803390:	1007883a 	mov	r3,r2
  803394:	e0bffc17 	ldw	r2,-16(fp)
  803398:	10c02c45 	stb	r3,177(r2)
  if (d->_g85) {
  80339c:	e0bffc17 	ldw	r2,-16(fp)
  8033a0:	10802c43 	ldbu	r2,177(r2)
  8033a4:	10803fcc 	andi	r2,r2,255
  8033a8:	1080201c 	xori	r2,r2,128
  8033ac:	10bfe004 	addi	r2,r2,-128
  8033b0:	10003426 	beq	r2,zero,803484 <logic+0x2c50>
    d->sleepT = (d->sleepT < (d->VRP_time - d->_region2_null_VRP)) ? d->sleepT : (d->VRP_time - d->_region2_null_VRP);
  8033b4:	e0bffc17 	ldw	r2,-16(fp)
  8033b8:	14001517 	ldw	r16,84(r2)
  8033bc:	14401617 	ldw	r17,88(r2)
  8033c0:	e0bffc17 	ldw	r2,-16(fp)
  8033c4:	10800017 	ldw	r2,0(r2)
  8033c8:	1009883a 	mov	r4,r2
  8033cc:	0808ce00 	call	808ce0 <__floatsidf>
  8033d0:	1011883a 	mov	r8,r2
  8033d4:	1813883a 	mov	r9,r3
  8033d8:	e13ffc17 	ldw	r4,-16(fp)
  8033dc:	20800b17 	ldw	r2,44(r4)
  8033e0:	20c00c17 	ldw	r3,48(r4)
  8033e4:	100d883a 	mov	r6,r2
  8033e8:	180f883a 	mov	r7,r3
  8033ec:	4009883a 	mov	r4,r8
  8033f0:	480b883a 	mov	r5,r9
  8033f4:	08083e40 	call	8083e4 <__subdf3>
  8033f8:	1009883a 	mov	r4,r2
  8033fc:	180b883a 	mov	r5,r3
  803400:	2005883a 	mov	r2,r4
  803404:	2807883a 	mov	r3,r5
  803408:	100d883a 	mov	r6,r2
  80340c:	180f883a 	mov	r7,r3
  803410:	8009883a 	mov	r4,r16
  803414:	880b883a 	mov	r5,r17
  803418:	08082f00 	call	8082f0 <__ledf2>
  80341c:	1000040e 	bge	r2,zero,803430 <logic+0x2bfc>
  803420:	e13ffc17 	ldw	r4,-16(fp)
  803424:	20801517 	ldw	r2,84(r4)
  803428:	20c01617 	ldw	r3,88(r4)
  80342c:	00001206 	br	803478 <logic+0x2c44>
  803430:	e0bffc17 	ldw	r2,-16(fp)
  803434:	10800017 	ldw	r2,0(r2)
  803438:	1009883a 	mov	r4,r2
  80343c:	0808ce00 	call	808ce0 <__floatsidf>
  803440:	1011883a 	mov	r8,r2
  803444:	1813883a 	mov	r9,r3
  803448:	e13ffc17 	ldw	r4,-16(fp)
  80344c:	20800b17 	ldw	r2,44(r4)
  803450:	20c00c17 	ldw	r3,48(r4)
  803454:	100d883a 	mov	r6,r2
  803458:	180f883a 	mov	r7,r3
  80345c:	4009883a 	mov	r4,r8
  803460:	480b883a 	mov	r5,r9
  803464:	08083e40 	call	8083e4 <__subdf3>
  803468:	1009883a 	mov	r4,r2
  80346c:	180b883a 	mov	r5,r3
  803470:	2005883a 	mov	r2,r4
  803474:	2807883a 	mov	r3,r5
  803478:	e13ffc17 	ldw	r4,-16(fp)
  80347c:	20801515 	stw	r2,84(r4)
  803480:	20c01615 	stw	r3,88(r4)
  }
  d->_cg87 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803484:	e0bffc17 	ldw	r2,-16(fp)
  803488:	10801bc3 	ldbu	r2,111(r2)
  80348c:	10803fcc 	andi	r2,r2,255
  803490:	1080201c 	xori	r2,r2,128
  803494:	10bfe004 	addi	r2,r2,-128
  803498:	1000061e 	bne	r2,zero,8034b4 <logic+0x2c80>
  80349c:	e0bffc17 	ldw	r2,-16(fp)
  8034a0:	10801c03 	ldbu	r2,112(r2)
  8034a4:	10803fcc 	andi	r2,r2,255
  8034a8:	1080201c 	xori	r2,r2,128
  8034ac:	10bfe004 	addi	r2,r2,-128
  8034b0:	10000226 	beq	r2,zero,8034bc <logic+0x2c88>
  8034b4:	00800044 	movi	r2,1
  8034b8:	00000106 	br	8034c0 <logic+0x2c8c>
  8034bc:	0005883a 	mov	r2,zero
  8034c0:	1007883a 	mov	r3,r2
  8034c4:	e0bffc17 	ldw	r2,-16(fp)
  8034c8:	10c04d85 	stb	r3,310(r2)
  d->_g86 = d->_g91 && !d->_cg86;
  8034cc:	e0bffc17 	ldw	r2,-16(fp)
  8034d0:	10802d83 	ldbu	r2,182(r2)
  8034d4:	10803fcc 	andi	r2,r2,255
  8034d8:	1080201c 	xori	r2,r2,128
  8034dc:	10bfe004 	addi	r2,r2,-128
  8034e0:	10000826 	beq	r2,zero,803504 <logic+0x2cd0>
  8034e4:	e0bffc17 	ldw	r2,-16(fp)
  8034e8:	10804dc3 	ldbu	r2,311(r2)
  8034ec:	10803fcc 	andi	r2,r2,255
  8034f0:	1080201c 	xori	r2,r2,128
  8034f4:	10bfe004 	addi	r2,r2,-128
  8034f8:	1000021e 	bne	r2,zero,803504 <logic+0x2cd0>
  8034fc:	00800044 	movi	r2,1
  803500:	00000106 	br	803508 <logic+0x2cd4>
  803504:	0005883a 	mov	r2,zero
  803508:	1007883a 	mov	r3,r2
  80350c:	e0bffc17 	ldw	r2,-16(fp)
  803510:	10c02c85 	stb	r3,178(r2)
  d->_cg89 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803514:	e0bffc17 	ldw	r2,-16(fp)
  803518:	10801bc3 	ldbu	r2,111(r2)
  80351c:	10803fcc 	andi	r2,r2,255
  803520:	1080201c 	xori	r2,r2,128
  803524:	10bfe004 	addi	r2,r2,-128
  803528:	1000061e 	bne	r2,zero,803544 <logic+0x2d10>
  80352c:	e0bffc17 	ldw	r2,-16(fp)
  803530:	10801c03 	ldbu	r2,112(r2)
  803534:	10803fcc 	andi	r2,r2,255
  803538:	1080201c 	xori	r2,r2,128
  80353c:	10bfe004 	addi	r2,r2,-128
  803540:	10000226 	beq	r2,zero,80354c <logic+0x2d18>
  803544:	00800044 	movi	r2,1
  803548:	00000106 	br	803550 <logic+0x2d1c>
  80354c:	0005883a 	mov	r2,zero
  803550:	1007883a 	mov	r3,r2
  803554:	e0bffc17 	ldw	r2,-16(fp)
  803558:	10c04e05 	stb	r3,312(r2)
  d->_g88 = d->_g85 && d->_cg87 || d->_g86 && d->_cg89;
  80355c:	e0bffc17 	ldw	r2,-16(fp)
  803560:	10802c43 	ldbu	r2,177(r2)
  803564:	10803fcc 	andi	r2,r2,255
  803568:	1080201c 	xori	r2,r2,128
  80356c:	10bfe004 	addi	r2,r2,-128
  803570:	10000626 	beq	r2,zero,80358c <logic+0x2d58>
  803574:	e0bffc17 	ldw	r2,-16(fp)
  803578:	10804d83 	ldbu	r2,310(r2)
  80357c:	10803fcc 	andi	r2,r2,255
  803580:	1080201c 	xori	r2,r2,128
  803584:	10bfe004 	addi	r2,r2,-128
  803588:	10000c1e 	bne	r2,zero,8035bc <logic+0x2d88>
  80358c:	e0bffc17 	ldw	r2,-16(fp)
  803590:	10802c83 	ldbu	r2,178(r2)
  803594:	10803fcc 	andi	r2,r2,255
  803598:	1080201c 	xori	r2,r2,128
  80359c:	10bfe004 	addi	r2,r2,-128
  8035a0:	10000826 	beq	r2,zero,8035c4 <logic+0x2d90>
  8035a4:	e0bffc17 	ldw	r2,-16(fp)
  8035a8:	10804e03 	ldbu	r2,312(r2)
  8035ac:	10803fcc 	andi	r2,r2,255
  8035b0:	1080201c 	xori	r2,r2,128
  8035b4:	10bfe004 	addi	r2,r2,-128
  8035b8:	10000226 	beq	r2,zero,8035c4 <logic+0x2d90>
  8035bc:	00800044 	movi	r2,1
  8035c0:	00000106 	br	8035c8 <logic+0x2d94>
  8035c4:	0005883a 	mov	r2,zero
  8035c8:	1007883a 	mov	r3,r2
  8035cc:	e0bffc17 	ldw	r2,-16(fp)
  8035d0:	10c02d05 	stb	r3,180(r2)
  d->_g95 = !d->_g105;
  8035d4:	e0bffc17 	ldw	r2,-16(fp)
  8035d8:	10803003 	ldbu	r2,192(r2)
  8035dc:	10803fcc 	andi	r2,r2,255
  8035e0:	1080201c 	xori	r2,r2,128
  8035e4:	10bfe004 	addi	r2,r2,-128
  8035e8:	1005003a 	cmpeq	r2,r2,zero
  8035ec:	1007883a 	mov	r3,r2
  8035f0:	e0bffc17 	ldw	r2,-16(fp)
  8035f4:	10c02e05 	stb	r3,184(r2)
  d->_g99 = d->_g110_e2 || d->_g99;
  8035f8:	e0bffc17 	ldw	r2,-16(fp)
  8035fc:	10805f83 	ldbu	r2,382(r2)
  803600:	10803fcc 	andi	r2,r2,255
  803604:	1080201c 	xori	r2,r2,128
  803608:	10bfe004 	addi	r2,r2,-128
  80360c:	1000061e 	bne	r2,zero,803628 <logic+0x2df4>
  803610:	e0bffc17 	ldw	r2,-16(fp)
  803614:	10802f03 	ldbu	r2,188(r2)
  803618:	10803fcc 	andi	r2,r2,255
  80361c:	1080201c 	xori	r2,r2,128
  803620:	10bfe004 	addi	r2,r2,-128
  803624:	10000226 	beq	r2,zero,803630 <logic+0x2dfc>
  803628:	00800044 	movi	r2,1
  80362c:	00000106 	br	803634 <logic+0x2e00>
  803630:	0005883a 	mov	r2,zero
  803634:	1007883a 	mov	r3,r2
  803638:	e0bffc17 	ldw	r2,-16(fp)
  80363c:	10c02f05 	stb	r3,188(r2)
  d->_g96 = (d->_g110 || d->_g81) && (d->_g88_e2 || d->_g88) && (d->_g95 || d->_g99) && (d->_g81 || d->_g88 || d->_g99);
  803640:	e0bffc17 	ldw	r2,-16(fp)
  803644:	108030c3 	ldbu	r2,195(r2)
  803648:	10803fcc 	andi	r2,r2,255
  80364c:	1080201c 	xori	r2,r2,128
  803650:	10bfe004 	addi	r2,r2,-128
  803654:	1000061e 	bne	r2,zero,803670 <logic+0x2e3c>
  803658:	e0bffc17 	ldw	r2,-16(fp)
  80365c:	10802bc3 	ldbu	r2,175(r2)
  803660:	10803fcc 	andi	r2,r2,255
  803664:	1080201c 	xori	r2,r2,128
  803668:	10bfe004 	addi	r2,r2,-128
  80366c:	10002c26 	beq	r2,zero,803720 <logic+0x2eec>
  803670:	e0bffc17 	ldw	r2,-16(fp)
  803674:	10805ec3 	ldbu	r2,379(r2)
  803678:	10803fcc 	andi	r2,r2,255
  80367c:	1080201c 	xori	r2,r2,128
  803680:	10bfe004 	addi	r2,r2,-128
  803684:	1000061e 	bne	r2,zero,8036a0 <logic+0x2e6c>
  803688:	e0bffc17 	ldw	r2,-16(fp)
  80368c:	10802d03 	ldbu	r2,180(r2)
  803690:	10803fcc 	andi	r2,r2,255
  803694:	1080201c 	xori	r2,r2,128
  803698:	10bfe004 	addi	r2,r2,-128
  80369c:	10002026 	beq	r2,zero,803720 <logic+0x2eec>
  8036a0:	e0bffc17 	ldw	r2,-16(fp)
  8036a4:	10802e03 	ldbu	r2,184(r2)
  8036a8:	10803fcc 	andi	r2,r2,255
  8036ac:	1080201c 	xori	r2,r2,128
  8036b0:	10bfe004 	addi	r2,r2,-128
  8036b4:	1000061e 	bne	r2,zero,8036d0 <logic+0x2e9c>
  8036b8:	e0bffc17 	ldw	r2,-16(fp)
  8036bc:	10802f03 	ldbu	r2,188(r2)
  8036c0:	10803fcc 	andi	r2,r2,255
  8036c4:	1080201c 	xori	r2,r2,128
  8036c8:	10bfe004 	addi	r2,r2,-128
  8036cc:	10001426 	beq	r2,zero,803720 <logic+0x2eec>
  8036d0:	e0bffc17 	ldw	r2,-16(fp)
  8036d4:	10802bc3 	ldbu	r2,175(r2)
  8036d8:	10803fcc 	andi	r2,r2,255
  8036dc:	1080201c 	xori	r2,r2,128
  8036e0:	10bfe004 	addi	r2,r2,-128
  8036e4:	10000c1e 	bne	r2,zero,803718 <logic+0x2ee4>
  8036e8:	e0bffc17 	ldw	r2,-16(fp)
  8036ec:	10802d03 	ldbu	r2,180(r2)
  8036f0:	10803fcc 	andi	r2,r2,255
  8036f4:	1080201c 	xori	r2,r2,128
  8036f8:	10bfe004 	addi	r2,r2,-128
  8036fc:	1000061e 	bne	r2,zero,803718 <logic+0x2ee4>
  803700:	e0bffc17 	ldw	r2,-16(fp)
  803704:	10802f03 	ldbu	r2,188(r2)
  803708:	10803fcc 	andi	r2,r2,255
  80370c:	1080201c 	xori	r2,r2,128
  803710:	10bfe004 	addi	r2,r2,-128
  803714:	10000226 	beq	r2,zero,803720 <logic+0x2eec>
  803718:	00800044 	movi	r2,1
  80371c:	00000106 	br	803724 <logic+0x2ef0>
  803720:	0005883a 	mov	r2,zero
  803724:	1007883a 	mov	r3,r2
  803728:	e0bffc17 	ldw	r2,-16(fp)
  80372c:	10c02e45 	stb	r3,185(r2)
  d->_cg100 = d->_heart2_local__Atrig6;
  803730:	e0bffc17 	ldw	r2,-16(fp)
  803734:	10c01bc3 	ldbu	r3,111(r2)
  803738:	e0bffc17 	ldw	r2,-16(fp)
  80373c:	10c04f05 	stb	r3,316(r2)
  d->_g81_e1 = d->_g96 && !d->_cg100;
  803740:	e0bffc17 	ldw	r2,-16(fp)
  803744:	10802e43 	ldbu	r2,185(r2)
  803748:	10803fcc 	andi	r2,r2,255
  80374c:	1080201c 	xori	r2,r2,128
  803750:	10bfe004 	addi	r2,r2,-128
  803754:	10000826 	beq	r2,zero,803778 <logic+0x2f44>
  803758:	e0bffc17 	ldw	r2,-16(fp)
  80375c:	10804f03 	ldbu	r2,316(r2)
  803760:	10803fcc 	andi	r2,r2,255
  803764:	1080201c 	xori	r2,r2,128
  803768:	10bfe004 	addi	r2,r2,-128
  80376c:	1000021e 	bne	r2,zero,803778 <logic+0x2f44>
  803770:	00800044 	movi	r2,1
  803774:	00000106 	br	80377c <logic+0x2f48>
  803778:	0005883a 	mov	r2,zero
  80377c:	1007883a 	mov	r3,r2
  803780:	e0bffc17 	ldw	r2,-16(fp)
  803784:	10c05e85 	stb	r3,378(r2)
  if (d->_g81_e1) {
  803788:	e0bffc17 	ldw	r2,-16(fp)
  80378c:	10805e83 	ldbu	r2,378(r2)
  803790:	10803fcc 	andi	r2,r2,255
  803794:	1080201c 	xori	r2,r2,128
  803798:	10bfe004 	addi	r2,r2,-128
  80379c:	10000626 	beq	r2,zero,8037b8 <logic+0x2f84>
    d->VR |= 1;
  8037a0:	e0bffc17 	ldw	r2,-16(fp)
  8037a4:	10801803 	ldbu	r2,96(r2)
  8037a8:	10800054 	ori	r2,r2,1
  8037ac:	1007883a 	mov	r3,r2
  8037b0:	e0bffc17 	ldw	r2,-16(fp)
  8037b4:	10c01805 	stb	r3,96(r2)
  }
  d->_g97 = d->_GO || d->_g109 || d->_g81_e1;
  8037b8:	e0bffc17 	ldw	r2,-16(fp)
  8037bc:	10804543 	ldbu	r2,277(r2)
  8037c0:	10803fcc 	andi	r2,r2,255
  8037c4:	1080201c 	xori	r2,r2,128
  8037c8:	10bfe004 	addi	r2,r2,-128
  8037cc:	10000c1e 	bne	r2,zero,803800 <logic+0x2fcc>
  8037d0:	e0bffc17 	ldw	r2,-16(fp)
  8037d4:	10803083 	ldbu	r2,194(r2)
  8037d8:	10803fcc 	andi	r2,r2,255
  8037dc:	1080201c 	xori	r2,r2,128
  8037e0:	10bfe004 	addi	r2,r2,-128
  8037e4:	1000061e 	bne	r2,zero,803800 <logic+0x2fcc>
  8037e8:	e0bffc17 	ldw	r2,-16(fp)
  8037ec:	10805e83 	ldbu	r2,378(r2)
  8037f0:	10803fcc 	andi	r2,r2,255
  8037f4:	1080201c 	xori	r2,r2,128
  8037f8:	10bfe004 	addi	r2,r2,-128
  8037fc:	10000226 	beq	r2,zero,803808 <logic+0x2fd4>
  803800:	00800044 	movi	r2,1
  803804:	00000106 	br	80380c <logic+0x2fd8>
  803808:	0005883a 	mov	r2,zero
  80380c:	1007883a 	mov	r3,r2
  803810:	e0bffc17 	ldw	r2,-16(fp)
  803814:	10c02e85 	stb	r3,186(r2)
  if (d->_g97) {
  803818:	e0bffc17 	ldw	r2,-16(fp)
  80381c:	10802e83 	ldbu	r2,186(r2)
  803820:	10803fcc 	andi	r2,r2,255
  803824:	1080201c 	xori	r2,r2,128
  803828:	10bfe004 	addi	r2,r2,-128
  80382c:	10000426 	beq	r2,zero,803840 <logic+0x300c>
    d->_heart2_local__Atrig6 = 0;
  803830:	e0bffc17 	ldw	r2,-16(fp)
  803834:	10001bc5 	stb	zero,111(r2)
    d->_heart2_local__Atrig7 = 0;
  803838:	e0bffc17 	ldw	r2,-16(fp)
  80383c:	10001c05 	stb	zero,112(r2)
  }
  d->_cg78 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803840:	e0bffc17 	ldw	r2,-16(fp)
  803844:	10801bc3 	ldbu	r2,111(r2)
  803848:	10803fcc 	andi	r2,r2,255
  80384c:	1080201c 	xori	r2,r2,128
  803850:	10bfe004 	addi	r2,r2,-128
  803854:	1000061e 	bne	r2,zero,803870 <logic+0x303c>
  803858:	e0bffc17 	ldw	r2,-16(fp)
  80385c:	10801c03 	ldbu	r2,112(r2)
  803860:	10803fcc 	andi	r2,r2,255
  803864:	1080201c 	xori	r2,r2,128
  803868:	10bfe004 	addi	r2,r2,-128
  80386c:	10000226 	beq	r2,zero,803878 <logic+0x3044>
  803870:	00800044 	movi	r2,1
  803874:	00000106 	br	80387c <logic+0x3048>
  803878:	0005883a 	mov	r2,zero
  80387c:	1007883a 	mov	r3,r2
  803880:	e0bffc17 	ldw	r2,-16(fp)
  803884:	10c04c85 	stb	r3,306(r2)
  d->_g88 = d->_g97 && !d->_cg78 || d->_g105_e1 && !d->_cg80;
  803888:	e0bffc17 	ldw	r2,-16(fp)
  80388c:	10802e83 	ldbu	r2,186(r2)
  803890:	10803fcc 	andi	r2,r2,255
  803894:	1080201c 	xori	r2,r2,128
  803898:	10bfe004 	addi	r2,r2,-128
  80389c:	10000626 	beq	r2,zero,8038b8 <logic+0x3084>
  8038a0:	e0bffc17 	ldw	r2,-16(fp)
  8038a4:	10804c83 	ldbu	r2,306(r2)
  8038a8:	10803fcc 	andi	r2,r2,255
  8038ac:	1080201c 	xori	r2,r2,128
  8038b0:	10bfe004 	addi	r2,r2,-128
  8038b4:	10000c26 	beq	r2,zero,8038e8 <logic+0x30b4>
  8038b8:	e0bffc17 	ldw	r2,-16(fp)
  8038bc:	10805f43 	ldbu	r2,381(r2)
  8038c0:	10803fcc 	andi	r2,r2,255
  8038c4:	1080201c 	xori	r2,r2,128
  8038c8:	10bfe004 	addi	r2,r2,-128
  8038cc:	10000826 	beq	r2,zero,8038f0 <logic+0x30bc>
  8038d0:	e0bffc17 	ldw	r2,-16(fp)
  8038d4:	10804cc3 	ldbu	r2,307(r2)
  8038d8:	10803fcc 	andi	r2,r2,255
  8038dc:	1080201c 	xori	r2,r2,128
  8038e0:	10bfe004 	addi	r2,r2,-128
  8038e4:	1000021e 	bne	r2,zero,8038f0 <logic+0x30bc>
  8038e8:	00800044 	movi	r2,1
  8038ec:	00000106 	br	8038f4 <logic+0x30c0>
  8038f0:	0005883a 	mov	r2,zero
  8038f4:	1007883a 	mov	r3,r2
  8038f8:	e0bffc17 	ldw	r2,-16(fp)
  8038fc:	10c02d05 	stb	r3,180(r2)
  d->_cg82 = d->_region2_null_VRP < d->VRP_time;
  803900:	e0bffc17 	ldw	r2,-16(fp)
  803904:	14000b17 	ldw	r16,44(r2)
  803908:	14400c17 	ldw	r17,48(r2)
  80390c:	e0bffc17 	ldw	r2,-16(fp)
  803910:	10800017 	ldw	r2,0(r2)
  803914:	1009883a 	mov	r4,r2
  803918:	0808ce00 	call	808ce0 <__floatsidf>
  80391c:	1009883a 	mov	r4,r2
  803920:	180b883a 	mov	r5,r3
  803924:	04800044 	movi	r18,1
  803928:	200d883a 	mov	r6,r4
  80392c:	280f883a 	mov	r7,r5
  803930:	8009883a 	mov	r4,r16
  803934:	880b883a 	mov	r5,r17
  803938:	08082f00 	call	8082f0 <__ledf2>
  80393c:	10000116 	blt	r2,zero,803944 <logic+0x3110>
  803940:	0025883a 	mov	r18,zero
  803944:	9007883a 	mov	r3,r18
  803948:	e0bffc17 	ldw	r2,-16(fp)
  80394c:	10c04d05 	stb	r3,308(r2)
  d->_g81 = d->_g97 && d->_cg82;
  803950:	e0bffc17 	ldw	r2,-16(fp)
  803954:	10802e83 	ldbu	r2,186(r2)
  803958:	10803fcc 	andi	r2,r2,255
  80395c:	1080201c 	xori	r2,r2,128
  803960:	10bfe004 	addi	r2,r2,-128
  803964:	10000826 	beq	r2,zero,803988 <logic+0x3154>
  803968:	e0bffc17 	ldw	r2,-16(fp)
  80396c:	10804d03 	ldbu	r2,308(r2)
  803970:	10803fcc 	andi	r2,r2,255
  803974:	1080201c 	xori	r2,r2,128
  803978:	10bfe004 	addi	r2,r2,-128
  80397c:	10000226 	beq	r2,zero,803988 <logic+0x3154>
  803980:	00800044 	movi	r2,1
  803984:	00000106 	br	80398c <logic+0x3158>
  803988:	0005883a 	mov	r2,zero
  80398c:	1007883a 	mov	r3,r2
  803990:	e0bffc17 	ldw	r2,-16(fp)
  803994:	10c02bc5 	stb	r3,175(r2)
  if (d->_g81) {
  803998:	e0bffc17 	ldw	r2,-16(fp)
  80399c:	10802bc3 	ldbu	r2,175(r2)
  8039a0:	10803fcc 	andi	r2,r2,255
  8039a4:	1080201c 	xori	r2,r2,128
  8039a8:	10bfe004 	addi	r2,r2,-128
  8039ac:	10003426 	beq	r2,zero,803a80 <logic+0x324c>
    d->sleepT = (d->sleepT < (d->VRP_time - d->_region2_null_VRP)) ? d->sleepT : (d->VRP_time - d->_region2_null_VRP);
  8039b0:	e0bffc17 	ldw	r2,-16(fp)
  8039b4:	14001517 	ldw	r16,84(r2)
  8039b8:	14401617 	ldw	r17,88(r2)
  8039bc:	e0bffc17 	ldw	r2,-16(fp)
  8039c0:	10800017 	ldw	r2,0(r2)
  8039c4:	1009883a 	mov	r4,r2
  8039c8:	0808ce00 	call	808ce0 <__floatsidf>
  8039cc:	1011883a 	mov	r8,r2
  8039d0:	1813883a 	mov	r9,r3
  8039d4:	e13ffc17 	ldw	r4,-16(fp)
  8039d8:	20800b17 	ldw	r2,44(r4)
  8039dc:	20c00c17 	ldw	r3,48(r4)
  8039e0:	100d883a 	mov	r6,r2
  8039e4:	180f883a 	mov	r7,r3
  8039e8:	4009883a 	mov	r4,r8
  8039ec:	480b883a 	mov	r5,r9
  8039f0:	08083e40 	call	8083e4 <__subdf3>
  8039f4:	1009883a 	mov	r4,r2
  8039f8:	180b883a 	mov	r5,r3
  8039fc:	2005883a 	mov	r2,r4
  803a00:	2807883a 	mov	r3,r5
  803a04:	100d883a 	mov	r6,r2
  803a08:	180f883a 	mov	r7,r3
  803a0c:	8009883a 	mov	r4,r16
  803a10:	880b883a 	mov	r5,r17
  803a14:	08082f00 	call	8082f0 <__ledf2>
  803a18:	1000040e 	bge	r2,zero,803a2c <logic+0x31f8>
  803a1c:	e13ffc17 	ldw	r4,-16(fp)
  803a20:	20801517 	ldw	r2,84(r4)
  803a24:	20c01617 	ldw	r3,88(r4)
  803a28:	00001206 	br	803a74 <logic+0x3240>
  803a2c:	e0bffc17 	ldw	r2,-16(fp)
  803a30:	10800017 	ldw	r2,0(r2)
  803a34:	1009883a 	mov	r4,r2
  803a38:	0808ce00 	call	808ce0 <__floatsidf>
  803a3c:	1011883a 	mov	r8,r2
  803a40:	1813883a 	mov	r9,r3
  803a44:	e13ffc17 	ldw	r4,-16(fp)
  803a48:	20800b17 	ldw	r2,44(r4)
  803a4c:	20c00c17 	ldw	r3,48(r4)
  803a50:	100d883a 	mov	r6,r2
  803a54:	180f883a 	mov	r7,r3
  803a58:	4009883a 	mov	r4,r8
  803a5c:	480b883a 	mov	r5,r9
  803a60:	08083e40 	call	8083e4 <__subdf3>
  803a64:	1009883a 	mov	r4,r2
  803a68:	180b883a 	mov	r5,r3
  803a6c:	2005883a 	mov	r2,r4
  803a70:	2807883a 	mov	r3,r5
  803a74:	e13ffc17 	ldw	r4,-16(fp)
  803a78:	20801515 	stw	r2,84(r4)
  803a7c:	20c01615 	stw	r3,88(r4)
  }
  d->_cg83 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803a80:	e0bffc17 	ldw	r2,-16(fp)
  803a84:	10801bc3 	ldbu	r2,111(r2)
  803a88:	10803fcc 	andi	r2,r2,255
  803a8c:	1080201c 	xori	r2,r2,128
  803a90:	10bfe004 	addi	r2,r2,-128
  803a94:	1000061e 	bne	r2,zero,803ab0 <logic+0x327c>
  803a98:	e0bffc17 	ldw	r2,-16(fp)
  803a9c:	10801c03 	ldbu	r2,112(r2)
  803aa0:	10803fcc 	andi	r2,r2,255
  803aa4:	1080201c 	xori	r2,r2,128
  803aa8:	10bfe004 	addi	r2,r2,-128
  803aac:	10000226 	beq	r2,zero,803ab8 <logic+0x3284>
  803ab0:	00800044 	movi	r2,1
  803ab4:	00000106 	br	803abc <logic+0x3288>
  803ab8:	0005883a 	mov	r2,zero
  803abc:	1007883a 	mov	r3,r2
  803ac0:	e0bffc17 	ldw	r2,-16(fp)
  803ac4:	10c04d45 	stb	r3,309(r2)
  d->_g97_e3 = d->_g81 && !d->_cg83 || d->_g85 && !d->_cg87;
  803ac8:	e0bffc17 	ldw	r2,-16(fp)
  803acc:	10802bc3 	ldbu	r2,175(r2)
  803ad0:	10803fcc 	andi	r2,r2,255
  803ad4:	1080201c 	xori	r2,r2,128
  803ad8:	10bfe004 	addi	r2,r2,-128
  803adc:	10000626 	beq	r2,zero,803af8 <logic+0x32c4>
  803ae0:	e0bffc17 	ldw	r2,-16(fp)
  803ae4:	10804d43 	ldbu	r2,309(r2)
  803ae8:	10803fcc 	andi	r2,r2,255
  803aec:	1080201c 	xori	r2,r2,128
  803af0:	10bfe004 	addi	r2,r2,-128
  803af4:	10000c26 	beq	r2,zero,803b28 <logic+0x32f4>
  803af8:	e0bffc17 	ldw	r2,-16(fp)
  803afc:	10802c43 	ldbu	r2,177(r2)
  803b00:	10803fcc 	andi	r2,r2,255
  803b04:	1080201c 	xori	r2,r2,128
  803b08:	10bfe004 	addi	r2,r2,-128
  803b0c:	10000826 	beq	r2,zero,803b30 <logic+0x32fc>
  803b10:	e0bffc17 	ldw	r2,-16(fp)
  803b14:	10804d83 	ldbu	r2,310(r2)
  803b18:	10803fcc 	andi	r2,r2,255
  803b1c:	1080201c 	xori	r2,r2,128
  803b20:	10bfe004 	addi	r2,r2,-128
  803b24:	1000021e 	bne	r2,zero,803b30 <logic+0x32fc>
  803b28:	00800044 	movi	r2,1
  803b2c:	00000106 	br	803b34 <logic+0x3300>
  803b30:	0005883a 	mov	r2,zero
  803b34:	1007883a 	mov	r3,r2
  803b38:	e0bffc17 	ldw	r2,-16(fp)
  803b3c:	10c05f05 	stb	r3,380(r2)
  d->_g88_e2 = d->_g97 && !d->_cg82;
  803b40:	e0bffc17 	ldw	r2,-16(fp)
  803b44:	10802e83 	ldbu	r2,186(r2)
  803b48:	10803fcc 	andi	r2,r2,255
  803b4c:	1080201c 	xori	r2,r2,128
  803b50:	10bfe004 	addi	r2,r2,-128
  803b54:	10000826 	beq	r2,zero,803b78 <logic+0x3344>
  803b58:	e0bffc17 	ldw	r2,-16(fp)
  803b5c:	10804d03 	ldbu	r2,308(r2)
  803b60:	10803fcc 	andi	r2,r2,255
  803b64:	1080201c 	xori	r2,r2,128
  803b68:	10bfe004 	addi	r2,r2,-128
  803b6c:	1000021e 	bne	r2,zero,803b78 <logic+0x3344>
  803b70:	00800044 	movi	r2,1
  803b74:	00000106 	br	803b7c <logic+0x3348>
  803b78:	0005883a 	mov	r2,zero
  803b7c:	1007883a 	mov	r3,r2
  803b80:	e0bffc17 	ldw	r2,-16(fp)
  803b84:	10c05ec5 	stb	r3,379(r2)
  d->_cg92 = d->_heart2_local__Atrig6 || d->_heart2_local__Atrig7;
  803b88:	e0bffc17 	ldw	r2,-16(fp)
  803b8c:	10801bc3 	ldbu	r2,111(r2)
  803b90:	10803fcc 	andi	r2,r2,255
  803b94:	1080201c 	xori	r2,r2,128
  803b98:	10bfe004 	addi	r2,r2,-128
  803b9c:	1000061e 	bne	r2,zero,803bb8 <logic+0x3384>
  803ba0:	e0bffc17 	ldw	r2,-16(fp)
  803ba4:	10801c03 	ldbu	r2,112(r2)
  803ba8:	10803fcc 	andi	r2,r2,255
  803bac:	1080201c 	xori	r2,r2,128
  803bb0:	10bfe004 	addi	r2,r2,-128
  803bb4:	10000226 	beq	r2,zero,803bc0 <logic+0x338c>
  803bb8:	00800044 	movi	r2,1
  803bbc:	00000106 	br	803bc4 <logic+0x3390>
  803bc0:	0005883a 	mov	r2,zero
  803bc4:	1007883a 	mov	r3,r2
  803bc8:	e0bffc17 	ldw	r2,-16(fp)
  803bcc:	10c04e45 	stb	r3,313(r2)
  d->_g116 = d->_g86 && !d->_cg89 || d->_g88_e2 && !d->_cg92;
  803bd0:	e0bffc17 	ldw	r2,-16(fp)
  803bd4:	10802c83 	ldbu	r2,178(r2)
  803bd8:	10803fcc 	andi	r2,r2,255
  803bdc:	1080201c 	xori	r2,r2,128
  803be0:	10bfe004 	addi	r2,r2,-128
  803be4:	10000626 	beq	r2,zero,803c00 <logic+0x33cc>
  803be8:	e0bffc17 	ldw	r2,-16(fp)
  803bec:	10804e03 	ldbu	r2,312(r2)
  803bf0:	10803fcc 	andi	r2,r2,255
  803bf4:	1080201c 	xori	r2,r2,128
  803bf8:	10bfe004 	addi	r2,r2,-128
  803bfc:	10000c26 	beq	r2,zero,803c30 <logic+0x33fc>
  803c00:	e0bffc17 	ldw	r2,-16(fp)
  803c04:	10805ec3 	ldbu	r2,379(r2)
  803c08:	10803fcc 	andi	r2,r2,255
  803c0c:	1080201c 	xori	r2,r2,128
  803c10:	10bfe004 	addi	r2,r2,-128
  803c14:	10000826 	beq	r2,zero,803c38 <logic+0x3404>
  803c18:	e0bffc17 	ldw	r2,-16(fp)
  803c1c:	10804e43 	ldbu	r2,313(r2)
  803c20:	10803fcc 	andi	r2,r2,255
  803c24:	1080201c 	xori	r2,r2,128
  803c28:	10bfe004 	addi	r2,r2,-128
  803c2c:	1000021e 	bne	r2,zero,803c38 <logic+0x3404>
  803c30:	00800044 	movi	r2,1
  803c34:	00000106 	br	803c3c <logic+0x3408>
  803c38:	0005883a 	mov	r2,zero
  803c3c:	1007883a 	mov	r3,r2
  803c40:	e0bffc17 	ldw	r2,-16(fp)
  803c44:	10c03245 	stb	r3,201(r2)
  d->_g114 = d->_g97 || d->_g98 && !d->VS;
  803c48:	e0bffc17 	ldw	r2,-16(fp)
  803c4c:	10802e83 	ldbu	r2,186(r2)
  803c50:	10803fcc 	andi	r2,r2,255
  803c54:	1080201c 	xori	r2,r2,128
  803c58:	10bfe004 	addi	r2,r2,-128
  803c5c:	10000c1e 	bne	r2,zero,803c90 <logic+0x345c>
  803c60:	e0bffc17 	ldw	r2,-16(fp)
  803c64:	10802ec3 	ldbu	r2,187(r2)
  803c68:	10803fcc 	andi	r2,r2,255
  803c6c:	1080201c 	xori	r2,r2,128
  803c70:	10bfe004 	addi	r2,r2,-128
  803c74:	10000826 	beq	r2,zero,803c98 <logic+0x3464>
  803c78:	e0bffc17 	ldw	r2,-16(fp)
  803c7c:	10801743 	ldbu	r2,93(r2)
  803c80:	10803fcc 	andi	r2,r2,255
  803c84:	1080201c 	xori	r2,r2,128
  803c88:	10bfe004 	addi	r2,r2,-128
  803c8c:	1000021e 	bne	r2,zero,803c98 <logic+0x3464>
  803c90:	00800044 	movi	r2,1
  803c94:	00000106 	br	803c9c <logic+0x3468>
  803c98:	0005883a 	mov	r2,zero
  803c9c:	1007883a 	mov	r3,r2
  803ca0:	e0bffc17 	ldw	r2,-16(fp)
  803ca4:	10c031c5 	stb	r3,199(r2)
  d->_g80 = d->_g112 && !d->_cg113;
  803ca8:	e0bffc17 	ldw	r2,-16(fp)
  803cac:	10803143 	ldbu	r2,197(r2)
  803cb0:	10803fcc 	andi	r2,r2,255
  803cb4:	1080201c 	xori	r2,r2,128
  803cb8:	10bfe004 	addi	r2,r2,-128
  803cbc:	10000826 	beq	r2,zero,803ce0 <logic+0x34ac>
  803cc0:	e0bffc17 	ldw	r2,-16(fp)
  803cc4:	10805043 	ldbu	r2,321(r2)
  803cc8:	10803fcc 	andi	r2,r2,255
  803ccc:	1080201c 	xori	r2,r2,128
  803cd0:	10bfe004 	addi	r2,r2,-128
  803cd4:	1000021e 	bne	r2,zero,803ce0 <logic+0x34ac>
  803cd8:	00800044 	movi	r2,1
  803cdc:	00000106 	br	803ce4 <logic+0x34b0>
  803ce0:	0005883a 	mov	r2,zero
  803ce4:	1007883a 	mov	r3,r2
  803ce8:	e0bffc17 	ldw	r2,-16(fp)
  803cec:	10c02b85 	stb	r3,174(r2)
  if (d->_g80) {
  803cf0:	e0bffc17 	ldw	r2,-16(fp)
  803cf4:	10802b83 	ldbu	r2,174(r2)
  803cf8:	10803fcc 	andi	r2,r2,255
  803cfc:	1080201c 	xori	r2,r2,128
  803d00:	10bfe004 	addi	r2,r2,-128
  803d04:	10000626 	beq	r2,zero,803d20 <logic+0x34ec>
    d->VS_i |= 1;
  803d08:	e0bffc17 	ldw	r2,-16(fp)
  803d0c:	10801903 	ldbu	r2,100(r2)
  803d10:	10800054 	ori	r2,r2,1
  803d14:	1007883a 	mov	r3,r2
  803d18:	e0bffc17 	ldw	r2,-16(fp)
  803d1c:	10c01905 	stb	r3,100(r2)
  }
  d->_g87 = d->_g96 && d->_cg100 || d->_g80;
  803d20:	e0bffc17 	ldw	r2,-16(fp)
  803d24:	10802e43 	ldbu	r2,185(r2)
  803d28:	10803fcc 	andi	r2,r2,255
  803d2c:	1080201c 	xori	r2,r2,128
  803d30:	10bfe004 	addi	r2,r2,-128
  803d34:	10000626 	beq	r2,zero,803d50 <logic+0x351c>
  803d38:	e0bffc17 	ldw	r2,-16(fp)
  803d3c:	10804f03 	ldbu	r2,316(r2)
  803d40:	10803fcc 	andi	r2,r2,255
  803d44:	1080201c 	xori	r2,r2,128
  803d48:	10bfe004 	addi	r2,r2,-128
  803d4c:	1000061e 	bne	r2,zero,803d68 <logic+0x3534>
  803d50:	e0bffc17 	ldw	r2,-16(fp)
  803d54:	10802b83 	ldbu	r2,174(r2)
  803d58:	10803fcc 	andi	r2,r2,255
  803d5c:	1080201c 	xori	r2,r2,128
  803d60:	10bfe004 	addi	r2,r2,-128
  803d64:	10000226 	beq	r2,zero,803d70 <logic+0x353c>
  803d68:	00800044 	movi	r2,1
  803d6c:	00000106 	br	803d74 <logic+0x3540>
  803d70:	0005883a 	mov	r2,zero
  803d74:	1007883a 	mov	r3,r2
  803d78:	e0bffc17 	ldw	r2,-16(fp)
  803d7c:	10c02cc5 	stb	r3,179(r2)
  if (d->_g87) {
  803d80:	e0bffc17 	ldw	r2,-16(fp)
  803d84:	10802cc3 	ldbu	r2,179(r2)
  803d88:	10803fcc 	andi	r2,r2,255
  803d8c:	1080201c 	xori	r2,r2,128
  803d90:	10bfe004 	addi	r2,r2,-128
  803d94:	10000426 	beq	r2,zero,803da8 <logic+0x3574>
    d->_heart2_local__Atrig8 = 0;
  803d98:	e0bffc17 	ldw	r2,-16(fp)
  803d9c:	10001c45 	stb	zero,113(r2)
    d->_heart2_local__Atrig9 = 0;
  803da0:	e0bffc17 	ldw	r2,-16(fp)
  803da4:	10001c85 	stb	zero,114(r2)
  }
  d->_cg102 = d->_heart2_local__Atrig8 || d->_heart2_local__Atrig9;
  803da8:	e0bffc17 	ldw	r2,-16(fp)
  803dac:	10801c43 	ldbu	r2,113(r2)
  803db0:	10803fcc 	andi	r2,r2,255
  803db4:	1080201c 	xori	r2,r2,128
  803db8:	10bfe004 	addi	r2,r2,-128
  803dbc:	1000061e 	bne	r2,zero,803dd8 <logic+0x35a4>
  803dc0:	e0bffc17 	ldw	r2,-16(fp)
  803dc4:	10801c83 	ldbu	r2,114(r2)
  803dc8:	10803fcc 	andi	r2,r2,255
  803dcc:	1080201c 	xori	r2,r2,128
  803dd0:	10bfe004 	addi	r2,r2,-128
  803dd4:	10000226 	beq	r2,zero,803de0 <logic+0x35ac>
  803dd8:	00800044 	movi	r2,1
  803ddc:	00000106 	br	803de4 <logic+0x35b0>
  803de0:	0005883a 	mov	r2,zero
  803de4:	1007883a 	mov	r3,r2
  803de8:	e0bffc17 	ldw	r2,-16(fp)
  803dec:	10c04f45 	stb	r3,317(r2)
  d->_g83 = d->_g87 && !d->_cg102 || d->_g55 && !d->_cg104;
  803df0:	e0bffc17 	ldw	r2,-16(fp)
  803df4:	10802cc3 	ldbu	r2,179(r2)
  803df8:	10803fcc 	andi	r2,r2,255
  803dfc:	1080201c 	xori	r2,r2,128
  803e00:	10bfe004 	addi	r2,r2,-128
  803e04:	10000626 	beq	r2,zero,803e20 <logic+0x35ec>
  803e08:	e0bffc17 	ldw	r2,-16(fp)
  803e0c:	10804f43 	ldbu	r2,317(r2)
  803e10:	10803fcc 	andi	r2,r2,255
  803e14:	1080201c 	xori	r2,r2,128
  803e18:	10bfe004 	addi	r2,r2,-128
  803e1c:	10000c26 	beq	r2,zero,803e50 <logic+0x361c>
  803e20:	e0bffc17 	ldw	r2,-16(fp)
  803e24:	108027c3 	ldbu	r2,159(r2)
  803e28:	10803fcc 	andi	r2,r2,255
  803e2c:	1080201c 	xori	r2,r2,128
  803e30:	10bfe004 	addi	r2,r2,-128
  803e34:	10000826 	beq	r2,zero,803e58 <logic+0x3624>
  803e38:	e0bffc17 	ldw	r2,-16(fp)
  803e3c:	10804f83 	ldbu	r2,318(r2)
  803e40:	10803fcc 	andi	r2,r2,255
  803e44:	1080201c 	xori	r2,r2,128
  803e48:	10bfe004 	addi	r2,r2,-128
  803e4c:	1000021e 	bne	r2,zero,803e58 <logic+0x3624>
  803e50:	00800044 	movi	r2,1
  803e54:	00000106 	br	803e5c <logic+0x3628>
  803e58:	0005883a 	mov	r2,zero
  803e5c:	1007883a 	mov	r3,r2
  803e60:	e0bffc17 	ldw	r2,-16(fp)
  803e64:	10c02c05 	stb	r3,176(r2)
  d->_g89 = d->_g87 || d->_g63 && !d->VS;
  803e68:	e0bffc17 	ldw	r2,-16(fp)
  803e6c:	10802cc3 	ldbu	r2,179(r2)
  803e70:	10803fcc 	andi	r2,r2,255
  803e74:	1080201c 	xori	r2,r2,128
  803e78:	10bfe004 	addi	r2,r2,-128
  803e7c:	10000c1e 	bne	r2,zero,803eb0 <logic+0x367c>
  803e80:	e0bffc17 	ldw	r2,-16(fp)
  803e84:	10802943 	ldbu	r2,165(r2)
  803e88:	10803fcc 	andi	r2,r2,255
  803e8c:	1080201c 	xori	r2,r2,128
  803e90:	10bfe004 	addi	r2,r2,-128
  803e94:	10000826 	beq	r2,zero,803eb8 <logic+0x3684>
  803e98:	e0bffc17 	ldw	r2,-16(fp)
  803e9c:	10801743 	ldbu	r2,93(r2)
  803ea0:	10803fcc 	andi	r2,r2,255
  803ea4:	1080201c 	xori	r2,r2,128
  803ea8:	10bfe004 	addi	r2,r2,-128
  803eac:	1000021e 	bne	r2,zero,803eb8 <logic+0x3684>
  803eb0:	00800044 	movi	r2,1
  803eb4:	00000106 	br	803ebc <logic+0x3688>
  803eb8:	0005883a 	mov	r2,zero
  803ebc:	1007883a 	mov	r3,r2
  803ec0:	e0bffc17 	ldw	r2,-16(fp)
  803ec4:	10c02d45 	stb	r3,181(r2)
  d->_g92 = d->_pg129;
  803ec8:	e0bffc17 	ldw	r2,-16(fp)
  803ecc:	10c06883 	ldbu	r3,418(r2)
  803ed0:	e0bffc17 	ldw	r2,-16(fp)
  803ed4:	10c02dc5 	stb	r3,183(r2)
  if (d->_g92) {
  803ed8:	e0bffc17 	ldw	r2,-16(fp)
  803edc:	10802dc3 	ldbu	r2,183(r2)
  803ee0:	10803fcc 	andi	r2,r2,255
  803ee4:	1080201c 	xori	r2,r2,128
  803ee8:	10bfe004 	addi	r2,r2,-128
  803eec:	10001226 	beq	r2,zero,803f38 <logic+0x3704>
    d->_region3_null_PVARP += d->deltaT;
  803ef0:	e13ffc17 	ldw	r4,-16(fp)
  803ef4:	20800d17 	ldw	r2,52(r4)
  803ef8:	20c00e17 	ldw	r3,56(r4)
  803efc:	e1bffc17 	ldw	r6,-16(fp)
  803f00:	31001317 	ldw	r4,76(r6)
  803f04:	31401417 	ldw	r5,80(r6)
  803f08:	200d883a 	mov	r6,r4
  803f0c:	280f883a 	mov	r7,r5
  803f10:	1009883a 	mov	r4,r2
  803f14:	180b883a 	mov	r5,r3
  803f18:	08079680 	call	807968 <__adddf3>
  803f1c:	1009883a 	mov	r4,r2
  803f20:	180b883a 	mov	r5,r3
  803f24:	2005883a 	mov	r2,r4
  803f28:	2807883a 	mov	r3,r5
  803f2c:	e13ffc17 	ldw	r4,-16(fp)
  803f30:	20800d15 	stw	r2,52(r4)
  803f34:	20c00e15 	stw	r3,56(r4)
  }
  d->_g77 = !d->_g92;
  803f38:	e0bffc17 	ldw	r2,-16(fp)
  803f3c:	10802dc3 	ldbu	r2,183(r2)
  803f40:	10803fcc 	andi	r2,r2,255
  803f44:	1080201c 	xori	r2,r2,128
  803f48:	10bfe004 	addi	r2,r2,-128
  803f4c:	1005003a 	cmpeq	r2,r2,zero
  803f50:	1007883a 	mov	r3,r2
  803f54:	e0bffc17 	ldw	r2,-16(fp)
  803f58:	10c02b45 	stb	r3,173(r2)
  d->_g98 = d->_pg134;
  803f5c:	e0bffc17 	ldw	r2,-16(fp)
  803f60:	10c068c3 	ldbu	r3,419(r2)
  803f64:	e0bffc17 	ldw	r2,-16(fp)
  803f68:	10c02ec5 	stb	r3,187(r2)
  d->_cg150 = d->v;
  803f6c:	e0bffc17 	ldw	r2,-16(fp)
  803f70:	10c018c3 	ldbu	r3,99(r2)
  803f74:	e0bffc17 	ldw	r2,-16(fp)
  803f78:	10c05405 	stb	r3,336(r2)
  d->_g113 = d->_g98 && d->_cg150;
  803f7c:	e0bffc17 	ldw	r2,-16(fp)
  803f80:	10802ec3 	ldbu	r2,187(r2)
  803f84:	10803fcc 	andi	r2,r2,255
  803f88:	1080201c 	xori	r2,r2,128
  803f8c:	10bfe004 	addi	r2,r2,-128
  803f90:	10000826 	beq	r2,zero,803fb4 <logic+0x3780>
  803f94:	e0bffc17 	ldw	r2,-16(fp)
  803f98:	10805403 	ldbu	r2,336(r2)
  803f9c:	10803fcc 	andi	r2,r2,255
  803fa0:	1080201c 	xori	r2,r2,128
  803fa4:	10bfe004 	addi	r2,r2,-128
  803fa8:	10000226 	beq	r2,zero,803fb4 <logic+0x3780>
  803fac:	00800044 	movi	r2,1
  803fb0:	00000106 	br	803fb8 <logic+0x3784>
  803fb4:	0005883a 	mov	r2,zero
  803fb8:	1007883a 	mov	r3,r2
  803fbc:	e0bffc17 	ldw	r2,-16(fp)
  803fc0:	10c03185 	stb	r3,198(r2)
  if (d->_g113) {
  803fc4:	e0bffc17 	ldw	r2,-16(fp)
  803fc8:	10803183 	ldbu	r2,198(r2)
  803fcc:	10803fcc 	andi	r2,r2,255
  803fd0:	1080201c 	xori	r2,r2,128
  803fd4:	10bfe004 	addi	r2,r2,-128
  803fd8:	10000326 	beq	r2,zero,803fe8 <logic+0x37b4>
    d->_heart2_local__Atrig12 = 1;
  803fdc:	e0bffc17 	ldw	r2,-16(fp)
  803fe0:	00c00044 	movi	r3,1
  803fe4:	10c01d45 	stb	r3,117(r2)
  }
  d->_g115 = d->_g98 && !d->_cg150;
  803fe8:	e0bffc17 	ldw	r2,-16(fp)
  803fec:	10802ec3 	ldbu	r2,187(r2)
  803ff0:	10803fcc 	andi	r2,r2,255
  803ff4:	1080201c 	xori	r2,r2,128
  803ff8:	10bfe004 	addi	r2,r2,-128
  803ffc:	10000826 	beq	r2,zero,804020 <logic+0x37ec>
  804000:	e0bffc17 	ldw	r2,-16(fp)
  804004:	10805403 	ldbu	r2,336(r2)
  804008:	10803fcc 	andi	r2,r2,255
  80400c:	1080201c 	xori	r2,r2,128
  804010:	10bfe004 	addi	r2,r2,-128
  804014:	1000021e 	bne	r2,zero,804020 <logic+0x37ec>
  804018:	00800044 	movi	r2,1
  80401c:	00000106 	br	804024 <logic+0x37f0>
  804020:	0005883a 	mov	r2,zero
  804024:	1007883a 	mov	r3,r2
  804028:	e0bffc17 	ldw	r2,-16(fp)
  80402c:	10c03205 	stb	r3,200(r2)
  d->_g100 = d->_g115 && d->AS;
  804030:	e0bffc17 	ldw	r2,-16(fp)
  804034:	10803203 	ldbu	r2,200(r2)
  804038:	10803fcc 	andi	r2,r2,255
  80403c:	1080201c 	xori	r2,r2,128
  804040:	10bfe004 	addi	r2,r2,-128
  804044:	10000826 	beq	r2,zero,804068 <logic+0x3834>
  804048:	e0bffc17 	ldw	r2,-16(fp)
  80404c:	10801703 	ldbu	r2,92(r2)
  804050:	10803fcc 	andi	r2,r2,255
  804054:	1080201c 	xori	r2,r2,128
  804058:	10bfe004 	addi	r2,r2,-128
  80405c:	10000226 	beq	r2,zero,804068 <logic+0x3834>
  804060:	00800044 	movi	r2,1
  804064:	00000106 	br	80406c <logic+0x3838>
  804068:	0005883a 	mov	r2,zero
  80406c:	1007883a 	mov	r3,r2
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	10c02f45 	stb	r3,189(r2)
  if (d->_g100) {
  804078:	e0bffc17 	ldw	r2,-16(fp)
  80407c:	10802f43 	ldbu	r2,189(r2)
  804080:	10803fcc 	andi	r2,r2,255
  804084:	1080201c 	xori	r2,r2,128
  804088:	10bfe004 	addi	r2,r2,-128
  80408c:	10000326 	beq	r2,zero,80409c <logic+0x3868>
    d->_heart2_local__Atrig13 = 1;
  804090:	e0bffc17 	ldw	r2,-16(fp)
  804094:	00c00044 	movi	r3,1
  804098:	10c01d85 	stb	r3,118(r2)
  }
  d->_cg146 = d->_heart2_local__Atrig12 || d->_heart2_local__Atrig13;
  80409c:	e0bffc17 	ldw	r2,-16(fp)
  8040a0:	10801d43 	ldbu	r2,117(r2)
  8040a4:	10803fcc 	andi	r2,r2,255
  8040a8:	1080201c 	xori	r2,r2,128
  8040ac:	10bfe004 	addi	r2,r2,-128
  8040b0:	1000061e 	bne	r2,zero,8040cc <logic+0x3898>
  8040b4:	e0bffc17 	ldw	r2,-16(fp)
  8040b8:	10801d83 	ldbu	r2,118(r2)
  8040bc:	10803fcc 	andi	r2,r2,255
  8040c0:	1080201c 	xori	r2,r2,128
  8040c4:	10bfe004 	addi	r2,r2,-128
  8040c8:	10000226 	beq	r2,zero,8040d4 <logic+0x38a0>
  8040cc:	00800044 	movi	r2,1
  8040d0:	00000106 	br	8040d8 <logic+0x38a4>
  8040d4:	0005883a 	mov	r2,zero
  8040d8:	1007883a 	mov	r3,r2
  8040dc:	e0bffc17 	ldw	r2,-16(fp)
  8040e0:	10c05385 	stb	r3,334(r2)
  d->_g104 = d->_g92 && d->_cg146;
  8040e4:	e0bffc17 	ldw	r2,-16(fp)
  8040e8:	10802dc3 	ldbu	r2,183(r2)
  8040ec:	10803fcc 	andi	r2,r2,255
  8040f0:	1080201c 	xori	r2,r2,128
  8040f4:	10bfe004 	addi	r2,r2,-128
  8040f8:	10000826 	beq	r2,zero,80411c <logic+0x38e8>
  8040fc:	e0bffc17 	ldw	r2,-16(fp)
  804100:	10805383 	ldbu	r2,334(r2)
  804104:	10803fcc 	andi	r2,r2,255
  804108:	1080201c 	xori	r2,r2,128
  80410c:	10bfe004 	addi	r2,r2,-128
  804110:	10000226 	beq	r2,zero,80411c <logic+0x38e8>
  804114:	00800044 	movi	r2,1
  804118:	00000106 	br	804120 <logic+0x38ec>
  80411c:	0005883a 	mov	r2,zero
  804120:	1007883a 	mov	r3,r2
  804124:	e0bffc17 	ldw	r2,-16(fp)
  804128:	10c02fc5 	stb	r3,191(r2)
  d->_g101 = !d->_g98;
  80412c:	e0bffc17 	ldw	r2,-16(fp)
  804130:	10802ec3 	ldbu	r2,187(r2)
  804134:	10803fcc 	andi	r2,r2,255
  804138:	1080201c 	xori	r2,r2,128
  80413c:	10bfe004 	addi	r2,r2,-128
  804140:	1005003a 	cmpeq	r2,r2,zero
  804144:	1007883a 	mov	r3,r2
  804148:	e0bffc17 	ldw	r2,-16(fp)
  80414c:	10c02f85 	stb	r3,190(r2)
  d->_g111 = d->_g113 || d->_g100;
  804150:	e0bffc17 	ldw	r2,-16(fp)
  804154:	10803183 	ldbu	r2,198(r2)
  804158:	10803fcc 	andi	r2,r2,255
  80415c:	1080201c 	xori	r2,r2,128
  804160:	10bfe004 	addi	r2,r2,-128
  804164:	1000061e 	bne	r2,zero,804180 <logic+0x394c>
  804168:	e0bffc17 	ldw	r2,-16(fp)
  80416c:	10802f43 	ldbu	r2,189(r2)
  804170:	10803fcc 	andi	r2,r2,255
  804174:	1080201c 	xori	r2,r2,128
  804178:	10bfe004 	addi	r2,r2,-128
  80417c:	10000226 	beq	r2,zero,804188 <logic+0x3954>
  804180:	00800044 	movi	r2,1
  804184:	00000106 	br	80418c <logic+0x3958>
  804188:	0005883a 	mov	r2,zero
  80418c:	1007883a 	mov	r3,r2
  804190:	e0bffc17 	ldw	r2,-16(fp)
  804194:	10c03105 	stb	r3,196(r2)
  d->_g150 = (d->_g77 || d->_g104) && (d->_g101 || d->_g111) && (d->_g104 || d->_g111);
  804198:	e0bffc17 	ldw	r2,-16(fp)
  80419c:	10802b43 	ldbu	r2,173(r2)
  8041a0:	10803fcc 	andi	r2,r2,255
  8041a4:	1080201c 	xori	r2,r2,128
  8041a8:	10bfe004 	addi	r2,r2,-128
  8041ac:	1000061e 	bne	r2,zero,8041c8 <logic+0x3994>
  8041b0:	e0bffc17 	ldw	r2,-16(fp)
  8041b4:	10802fc3 	ldbu	r2,191(r2)
  8041b8:	10803fcc 	andi	r2,r2,255
  8041bc:	1080201c 	xori	r2,r2,128
  8041c0:	10bfe004 	addi	r2,r2,-128
  8041c4:	10001a26 	beq	r2,zero,804230 <logic+0x39fc>
  8041c8:	e0bffc17 	ldw	r2,-16(fp)
  8041cc:	10802f83 	ldbu	r2,190(r2)
  8041d0:	10803fcc 	andi	r2,r2,255
  8041d4:	1080201c 	xori	r2,r2,128
  8041d8:	10bfe004 	addi	r2,r2,-128
  8041dc:	1000061e 	bne	r2,zero,8041f8 <logic+0x39c4>
  8041e0:	e0bffc17 	ldw	r2,-16(fp)
  8041e4:	10803103 	ldbu	r2,196(r2)
  8041e8:	10803fcc 	andi	r2,r2,255
  8041ec:	1080201c 	xori	r2,r2,128
  8041f0:	10bfe004 	addi	r2,r2,-128
  8041f4:	10000e26 	beq	r2,zero,804230 <logic+0x39fc>
  8041f8:	e0bffc17 	ldw	r2,-16(fp)
  8041fc:	10802fc3 	ldbu	r2,191(r2)
  804200:	10803fcc 	andi	r2,r2,255
  804204:	1080201c 	xori	r2,r2,128
  804208:	10bfe004 	addi	r2,r2,-128
  80420c:	1000061e 	bne	r2,zero,804228 <logic+0x39f4>
  804210:	e0bffc17 	ldw	r2,-16(fp)
  804214:	10803103 	ldbu	r2,196(r2)
  804218:	10803fcc 	andi	r2,r2,255
  80421c:	1080201c 	xori	r2,r2,128
  804220:	10bfe004 	addi	r2,r2,-128
  804224:	10000226 	beq	r2,zero,804230 <logic+0x39fc>
  804228:	00800044 	movi	r2,1
  80422c:	00000106 	br	804234 <logic+0x3a00>
  804230:	0005883a 	mov	r2,zero
  804234:	1007883a 	mov	r3,r2
  804238:	e0bffc17 	ldw	r2,-16(fp)
  80423c:	10c03785 	stb	r3,222(r2)
  d->_cg155 = d->_heart2_local__Atrig12;
  804240:	e0bffc17 	ldw	r2,-16(fp)
  804244:	10c01d43 	ldbu	r3,117(r2)
  804248:	e0bffc17 	ldw	r2,-16(fp)
  80424c:	10c05445 	stb	r3,337(r2)
  d->_g154 = d->_g150 && d->_cg155;
  804250:	e0bffc17 	ldw	r2,-16(fp)
  804254:	10803783 	ldbu	r2,222(r2)
  804258:	10803fcc 	andi	r2,r2,255
  80425c:	1080201c 	xori	r2,r2,128
  804260:	10bfe004 	addi	r2,r2,-128
  804264:	10000826 	beq	r2,zero,804288 <logic+0x3a54>
  804268:	e0bffc17 	ldw	r2,-16(fp)
  80426c:	10805443 	ldbu	r2,337(r2)
  804270:	10803fcc 	andi	r2,r2,255
  804274:	1080201c 	xori	r2,r2,128
  804278:	10bfe004 	addi	r2,r2,-128
  80427c:	10000226 	beq	r2,zero,804288 <logic+0x3a54>
  804280:	00800044 	movi	r2,1
  804284:	00000106 	br	80428c <logic+0x3a58>
  804288:	0005883a 	mov	r2,zero
  80428c:	1007883a 	mov	r3,r2
  804290:	e0bffc17 	ldw	r2,-16(fp)
  804294:	10c03885 	stb	r3,226(r2)
  if (d->_g154) {
  804298:	e0bffc17 	ldw	r2,-16(fp)
  80429c:	10803883 	ldbu	r2,226(r2)
  8042a0:	10803fcc 	andi	r2,r2,255
  8042a4:	1080201c 	xori	r2,r2,128
  8042a8:	10bfe004 	addi	r2,r2,-128
  8042ac:	10000326 	beq	r2,zero,8042bc <logic+0x3a88>
    d->_region3_null_PVARP = 0;
  8042b0:	e0bffc17 	ldw	r2,-16(fp)
  8042b4:	10000d15 	stw	zero,52(r2)
  8042b8:	10000e15 	stw	zero,56(r2)
  }
  d->_g151 = d->_pg130_e2;
  8042bc:	e0bffc17 	ldw	r2,-16(fp)
  8042c0:	10c06903 	ldbu	r3,420(r2)
  8042c4:	e0bffc17 	ldw	r2,-16(fp)
  8042c8:	10c037c5 	stb	r3,223(r2)
  if (d->_g151) {
  8042cc:	e0bffc17 	ldw	r2,-16(fp)
  8042d0:	108037c3 	ldbu	r2,223(r2)
  8042d4:	10803fcc 	andi	r2,r2,255
  8042d8:	1080201c 	xori	r2,r2,128
  8042dc:	10bfe004 	addi	r2,r2,-128
  8042e0:	10001226 	beq	r2,zero,80432c <logic+0x3af8>
    d->_region3_null_PVARP += d->deltaT;
  8042e4:	e13ffc17 	ldw	r4,-16(fp)
  8042e8:	20800d17 	ldw	r2,52(r4)
  8042ec:	20c00e17 	ldw	r3,56(r4)
  8042f0:	e1bffc17 	ldw	r6,-16(fp)
  8042f4:	31001317 	ldw	r4,76(r6)
  8042f8:	31401417 	ldw	r5,80(r6)
  8042fc:	200d883a 	mov	r6,r4
  804300:	280f883a 	mov	r7,r5
  804304:	1009883a 	mov	r4,r2
  804308:	180b883a 	mov	r5,r3
  80430c:	08079680 	call	807968 <__adddf3>
  804310:	1009883a 	mov	r4,r2
  804314:	180b883a 	mov	r5,r3
  804318:	2005883a 	mov	r2,r4
  80431c:	2807883a 	mov	r3,r5
  804320:	e13ffc17 	ldw	r4,-16(fp)
  804324:	20800d15 	stw	r2,52(r4)
  804328:	20c00e15 	stw	r3,56(r4)
  }
  d->_g147_e1 = !d->_g151;
  80432c:	e0bffc17 	ldw	r2,-16(fp)
  804330:	108037c3 	ldbu	r2,223(r2)
  804334:	10803fcc 	andi	r2,r2,255
  804338:	1080201c 	xori	r2,r2,128
  80433c:	10bfe004 	addi	r2,r2,-128
  804340:	1005003a 	cmpeq	r2,r2,zero
  804344:	1007883a 	mov	r3,r2
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	10c06085 	stb	r3,386(r2)
  d->_g152 = d->_pg158;
  804350:	e0bffc17 	ldw	r2,-16(fp)
  804354:	10c06943 	ldbu	r3,421(r2)
  804358:	e0bffc17 	ldw	r2,-16(fp)
  80435c:	10c03805 	stb	r3,224(r2)
  d->_cg137 = d->_region3_null_PVARP >= d->PVARP_time;
  804360:	e0bffc17 	ldw	r2,-16(fp)
  804364:	14000d17 	ldw	r16,52(r2)
  804368:	14400e17 	ldw	r17,56(r2)
  80436c:	e0bffc17 	ldw	r2,-16(fp)
  804370:	10800117 	ldw	r2,4(r2)
  804374:	1009883a 	mov	r4,r2
  804378:	0808ce00 	call	808ce0 <__floatsidf>
  80437c:	1009883a 	mov	r4,r2
  804380:	180b883a 	mov	r5,r3
  804384:	04800044 	movi	r18,1
  804388:	200d883a 	mov	r6,r4
  80438c:	280f883a 	mov	r7,r5
  804390:	8009883a 	mov	r4,r16
  804394:	880b883a 	mov	r5,r17
  804398:	08082140 	call	808214 <__gedf2>
  80439c:	1000010e 	bge	r2,zero,8043a4 <logic+0x3b70>
  8043a0:	0025883a 	mov	r18,zero
  8043a4:	9007883a 	mov	r3,r18
  8043a8:	e0bffc17 	ldw	r2,-16(fp)
  8043ac:	10c052c5 	stb	r3,331(r2)
  d->_g147 = d->_g152 && d->_cg137;
  8043b0:	e0bffc17 	ldw	r2,-16(fp)
  8043b4:	10803803 	ldbu	r2,224(r2)
  8043b8:	10803fcc 	andi	r2,r2,255
  8043bc:	1080201c 	xori	r2,r2,128
  8043c0:	10bfe004 	addi	r2,r2,-128
  8043c4:	10000826 	beq	r2,zero,8043e8 <logic+0x3bb4>
  8043c8:	e0bffc17 	ldw	r2,-16(fp)
  8043cc:	108052c3 	ldbu	r2,331(r2)
  8043d0:	10803fcc 	andi	r2,r2,255
  8043d4:	1080201c 	xori	r2,r2,128
  8043d8:	10bfe004 	addi	r2,r2,-128
  8043dc:	10000226 	beq	r2,zero,8043e8 <logic+0x3bb4>
  8043e0:	00800044 	movi	r2,1
  8043e4:	00000106 	br	8043ec <logic+0x3bb8>
  8043e8:	0005883a 	mov	r2,zero
  8043ec:	1007883a 	mov	r3,r2
  8043f0:	e0bffc17 	ldw	r2,-16(fp)
  8043f4:	10c03745 	stb	r3,221(r2)
  if (d->_g147) {
  8043f8:	e0bffc17 	ldw	r2,-16(fp)
  8043fc:	10803743 	ldbu	r2,221(r2)
  804400:	10803fcc 	andi	r2,r2,255
  804404:	1080201c 	xori	r2,r2,128
  804408:	10bfe004 	addi	r2,r2,-128
  80440c:	10000326 	beq	r2,zero,80441c <logic+0x3be8>
    d->_heart2_local__Atrig10 = 1;
  804410:	e0bffc17 	ldw	r2,-16(fp)
  804414:	00c00044 	movi	r3,1
  804418:	10c01cc5 	stb	r3,115(r2)
  }
  d->_g152_e2 = d->_g152 && !d->_cg137;
  80441c:	e0bffc17 	ldw	r2,-16(fp)
  804420:	10803803 	ldbu	r2,224(r2)
  804424:	10803fcc 	andi	r2,r2,255
  804428:	1080201c 	xori	r2,r2,128
  80442c:	10bfe004 	addi	r2,r2,-128
  804430:	10000826 	beq	r2,zero,804454 <logic+0x3c20>
  804434:	e0bffc17 	ldw	r2,-16(fp)
  804438:	108052c3 	ldbu	r2,331(r2)
  80443c:	10803fcc 	andi	r2,r2,255
  804440:	1080201c 	xori	r2,r2,128
  804444:	10bfe004 	addi	r2,r2,-128
  804448:	1000021e 	bne	r2,zero,804454 <logic+0x3c20>
  80444c:	00800044 	movi	r2,1
  804450:	00000106 	br	804458 <logic+0x3c24>
  804454:	0005883a 	mov	r2,zero
  804458:	1007883a 	mov	r3,r2
  80445c:	e0bffc17 	ldw	r2,-16(fp)
  804460:	10c060c5 	stb	r3,387(r2)
  d->_g141 = d->_g152_e2 && d->AS;
  804464:	e0bffc17 	ldw	r2,-16(fp)
  804468:	108060c3 	ldbu	r2,387(r2)
  80446c:	10803fcc 	andi	r2,r2,255
  804470:	1080201c 	xori	r2,r2,128
  804474:	10bfe004 	addi	r2,r2,-128
  804478:	10000826 	beq	r2,zero,80449c <logic+0x3c68>
  80447c:	e0bffc17 	ldw	r2,-16(fp)
  804480:	10801703 	ldbu	r2,92(r2)
  804484:	10803fcc 	andi	r2,r2,255
  804488:	1080201c 	xori	r2,r2,128
  80448c:	10bfe004 	addi	r2,r2,-128
  804490:	10000226 	beq	r2,zero,80449c <logic+0x3c68>
  804494:	00800044 	movi	r2,1
  804498:	00000106 	br	8044a0 <logic+0x3c6c>
  80449c:	0005883a 	mov	r2,zero
  8044a0:	1007883a 	mov	r3,r2
  8044a4:	e0bffc17 	ldw	r2,-16(fp)
  8044a8:	10c03645 	stb	r3,217(r2)
  if (d->_g141) {
  8044ac:	e0bffc17 	ldw	r2,-16(fp)
  8044b0:	10803643 	ldbu	r2,217(r2)
  8044b4:	10803fcc 	andi	r2,r2,255
  8044b8:	1080201c 	xori	r2,r2,128
  8044bc:	10bfe004 	addi	r2,r2,-128
  8044c0:	10000326 	beq	r2,zero,8044d0 <logic+0x3c9c>
    d->_heart2_local__Atrig11 = 1;
  8044c4:	e0bffc17 	ldw	r2,-16(fp)
  8044c8:	00c00044 	movi	r3,1
  8044cc:	10c01d05 	stb	r3,116(r2)
  }
  d->_cg122 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  8044d0:	e0bffc17 	ldw	r2,-16(fp)
  8044d4:	10801cc3 	ldbu	r2,115(r2)
  8044d8:	10803fcc 	andi	r2,r2,255
  8044dc:	1080201c 	xori	r2,r2,128
  8044e0:	10bfe004 	addi	r2,r2,-128
  8044e4:	1000061e 	bne	r2,zero,804500 <logic+0x3ccc>
  8044e8:	e0bffc17 	ldw	r2,-16(fp)
  8044ec:	10801d03 	ldbu	r2,116(r2)
  8044f0:	10803fcc 	andi	r2,r2,255
  8044f4:	1080201c 	xori	r2,r2,128
  8044f8:	10bfe004 	addi	r2,r2,-128
  8044fc:	10000226 	beq	r2,zero,804508 <logic+0x3cd4>
  804500:	00800044 	movi	r2,1
  804504:	00000106 	br	80450c <logic+0x3cd8>
  804508:	0005883a 	mov	r2,zero
  80450c:	1007883a 	mov	r3,r2
  804510:	e0bffc17 	ldw	r2,-16(fp)
  804514:	10c050c5 	stb	r3,323(r2)
  d->_g123 = d->_g151 && d->_cg122;
  804518:	e0bffc17 	ldw	r2,-16(fp)
  80451c:	108037c3 	ldbu	r2,223(r2)
  804520:	10803fcc 	andi	r2,r2,255
  804524:	1080201c 	xori	r2,r2,128
  804528:	10bfe004 	addi	r2,r2,-128
  80452c:	10000826 	beq	r2,zero,804550 <logic+0x3d1c>
  804530:	e0bffc17 	ldw	r2,-16(fp)
  804534:	108050c3 	ldbu	r2,323(r2)
  804538:	10803fcc 	andi	r2,r2,255
  80453c:	1080201c 	xori	r2,r2,128
  804540:	10bfe004 	addi	r2,r2,-128
  804544:	10000226 	beq	r2,zero,804550 <logic+0x3d1c>
  804548:	00800044 	movi	r2,1
  80454c:	00000106 	br	804554 <logic+0x3d20>
  804550:	0005883a 	mov	r2,zero
  804554:	1007883a 	mov	r3,r2
  804558:	e0bffc17 	ldw	r2,-16(fp)
  80455c:	10c03305 	stb	r3,204(r2)
  d->_g133 = d->_pg156;
  804560:	e0bffc17 	ldw	r2,-16(fp)
  804564:	10c06983 	ldbu	r3,422(r2)
  804568:	e0bffc17 	ldw	r2,-16(fp)
  80456c:	10c034c5 	stb	r3,211(r2)
  d->_g127 = d->_pg139;
  804570:	e0bffc17 	ldw	r2,-16(fp)
  804574:	10c069c3 	ldbu	r3,423(r2)
  804578:	e0bffc17 	ldw	r2,-16(fp)
  80457c:	10c03385 	stb	r3,206(r2)
  d->_g130_e2 = !(d->_g133 || d->_g127);
  804580:	e0bffc17 	ldw	r2,-16(fp)
  804584:	108034c3 	ldbu	r2,211(r2)
  804588:	10803fcc 	andi	r2,r2,255
  80458c:	1080201c 	xori	r2,r2,128
  804590:	10bfe004 	addi	r2,r2,-128
  804594:	1000081e 	bne	r2,zero,8045b8 <logic+0x3d84>
  804598:	e0bffc17 	ldw	r2,-16(fp)
  80459c:	10803383 	ldbu	r2,206(r2)
  8045a0:	10803fcc 	andi	r2,r2,255
  8045a4:	1080201c 	xori	r2,r2,128
  8045a8:	10bfe004 	addi	r2,r2,-128
  8045ac:	1000021e 	bne	r2,zero,8045b8 <logic+0x3d84>
  8045b0:	00800044 	movi	r2,1
  8045b4:	00000106 	br	8045bc <logic+0x3d88>
  8045b8:	0005883a 	mov	r2,zero
  8045bc:	1007883a 	mov	r3,r2
  8045c0:	e0bffc17 	ldw	r2,-16(fp)
  8045c4:	10c06005 	stb	r3,384(r2)
  d->_g127 = d->_g127 || d->_g133;
  8045c8:	e0bffc17 	ldw	r2,-16(fp)
  8045cc:	10803383 	ldbu	r2,206(r2)
  8045d0:	10803fcc 	andi	r2,r2,255
  8045d4:	1080201c 	xori	r2,r2,128
  8045d8:	10bfe004 	addi	r2,r2,-128
  8045dc:	1000061e 	bne	r2,zero,8045f8 <logic+0x3dc4>
  8045e0:	e0bffc17 	ldw	r2,-16(fp)
  8045e4:	108034c3 	ldbu	r2,211(r2)
  8045e8:	10803fcc 	andi	r2,r2,255
  8045ec:	1080201c 	xori	r2,r2,128
  8045f0:	10bfe004 	addi	r2,r2,-128
  8045f4:	10000226 	beq	r2,zero,804600 <logic+0x3dcc>
  8045f8:	00800044 	movi	r2,1
  8045fc:	00000106 	br	804604 <logic+0x3dd0>
  804600:	0005883a 	mov	r2,zero
  804604:	1007883a 	mov	r3,r2
  804608:	e0bffc17 	ldw	r2,-16(fp)
  80460c:	10c03385 	stb	r3,206(r2)
  d->_cg128 = d->_region3_null_PVARP < d->PVARP_time;
  804610:	e0bffc17 	ldw	r2,-16(fp)
  804614:	14000d17 	ldw	r16,52(r2)
  804618:	14400e17 	ldw	r17,56(r2)
  80461c:	e0bffc17 	ldw	r2,-16(fp)
  804620:	10800117 	ldw	r2,4(r2)
  804624:	1009883a 	mov	r4,r2
  804628:	0808ce00 	call	808ce0 <__floatsidf>
  80462c:	1009883a 	mov	r4,r2
  804630:	180b883a 	mov	r5,r3
  804634:	04800044 	movi	r18,1
  804638:	200d883a 	mov	r6,r4
  80463c:	280f883a 	mov	r7,r5
  804640:	8009883a 	mov	r4,r16
  804644:	880b883a 	mov	r5,r17
  804648:	08082f00 	call	8082f0 <__ledf2>
  80464c:	10000116 	blt	r2,zero,804654 <logic+0x3e20>
  804650:	0025883a 	mov	r18,zero
  804654:	9007883a 	mov	r3,r18
  804658:	e0bffc17 	ldw	r2,-16(fp)
  80465c:	10c051c5 	stb	r3,327(r2)
  d->_g133 = d->_g127 && d->_cg128;
  804660:	e0bffc17 	ldw	r2,-16(fp)
  804664:	10803383 	ldbu	r2,206(r2)
  804668:	10803fcc 	andi	r2,r2,255
  80466c:	1080201c 	xori	r2,r2,128
  804670:	10bfe004 	addi	r2,r2,-128
  804674:	10000826 	beq	r2,zero,804698 <logic+0x3e64>
  804678:	e0bffc17 	ldw	r2,-16(fp)
  80467c:	108051c3 	ldbu	r2,327(r2)
  804680:	10803fcc 	andi	r2,r2,255
  804684:	1080201c 	xori	r2,r2,128
  804688:	10bfe004 	addi	r2,r2,-128
  80468c:	10000226 	beq	r2,zero,804698 <logic+0x3e64>
  804690:	00800044 	movi	r2,1
  804694:	00000106 	br	80469c <logic+0x3e68>
  804698:	0005883a 	mov	r2,zero
  80469c:	1007883a 	mov	r3,r2
  8046a0:	e0bffc17 	ldw	r2,-16(fp)
  8046a4:	10c034c5 	stb	r3,211(r2)
  if (d->_g133) {
  8046a8:	e0bffc17 	ldw	r2,-16(fp)
  8046ac:	108034c3 	ldbu	r2,211(r2)
  8046b0:	10803fcc 	andi	r2,r2,255
  8046b4:	1080201c 	xori	r2,r2,128
  8046b8:	10bfe004 	addi	r2,r2,-128
  8046bc:	10003426 	beq	r2,zero,804790 <logic+0x3f5c>
    d->sleepT = (d->sleepT < (d->PVARP_time - d->_region3_null_PVARP)) ? d->sleepT : (d->PVARP_time - d->_region3_null_PVARP);
  8046c0:	e0bffc17 	ldw	r2,-16(fp)
  8046c4:	14001517 	ldw	r16,84(r2)
  8046c8:	14401617 	ldw	r17,88(r2)
  8046cc:	e0bffc17 	ldw	r2,-16(fp)
  8046d0:	10800117 	ldw	r2,4(r2)
  8046d4:	1009883a 	mov	r4,r2
  8046d8:	0808ce00 	call	808ce0 <__floatsidf>
  8046dc:	1011883a 	mov	r8,r2
  8046e0:	1813883a 	mov	r9,r3
  8046e4:	e13ffc17 	ldw	r4,-16(fp)
  8046e8:	20800d17 	ldw	r2,52(r4)
  8046ec:	20c00e17 	ldw	r3,56(r4)
  8046f0:	100d883a 	mov	r6,r2
  8046f4:	180f883a 	mov	r7,r3
  8046f8:	4009883a 	mov	r4,r8
  8046fc:	480b883a 	mov	r5,r9
  804700:	08083e40 	call	8083e4 <__subdf3>
  804704:	1009883a 	mov	r4,r2
  804708:	180b883a 	mov	r5,r3
  80470c:	2005883a 	mov	r2,r4
  804710:	2807883a 	mov	r3,r5
  804714:	100d883a 	mov	r6,r2
  804718:	180f883a 	mov	r7,r3
  80471c:	8009883a 	mov	r4,r16
  804720:	880b883a 	mov	r5,r17
  804724:	08082f00 	call	8082f0 <__ledf2>
  804728:	1000040e 	bge	r2,zero,80473c <logic+0x3f08>
  80472c:	e13ffc17 	ldw	r4,-16(fp)
  804730:	20801517 	ldw	r2,84(r4)
  804734:	20c01617 	ldw	r3,88(r4)
  804738:	00001206 	br	804784 <logic+0x3f50>
  80473c:	e0bffc17 	ldw	r2,-16(fp)
  804740:	10800117 	ldw	r2,4(r2)
  804744:	1009883a 	mov	r4,r2
  804748:	0808ce00 	call	808ce0 <__floatsidf>
  80474c:	1011883a 	mov	r8,r2
  804750:	1813883a 	mov	r9,r3
  804754:	e13ffc17 	ldw	r4,-16(fp)
  804758:	20800d17 	ldw	r2,52(r4)
  80475c:	20c00e17 	ldw	r3,56(r4)
  804760:	100d883a 	mov	r6,r2
  804764:	180f883a 	mov	r7,r3
  804768:	4009883a 	mov	r4,r8
  80476c:	480b883a 	mov	r5,r9
  804770:	08083e40 	call	8083e4 <__subdf3>
  804774:	1009883a 	mov	r4,r2
  804778:	180b883a 	mov	r5,r3
  80477c:	2005883a 	mov	r2,r4
  804780:	2807883a 	mov	r3,r5
  804784:	e13ffc17 	ldw	r4,-16(fp)
  804788:	20801515 	stw	r2,84(r4)
  80478c:	20c01615 	stw	r3,88(r4)
  }
  d->_cg129 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804790:	e0bffc17 	ldw	r2,-16(fp)
  804794:	10801cc3 	ldbu	r2,115(r2)
  804798:	10803fcc 	andi	r2,r2,255
  80479c:	1080201c 	xori	r2,r2,128
  8047a0:	10bfe004 	addi	r2,r2,-128
  8047a4:	1000061e 	bne	r2,zero,8047c0 <logic+0x3f8c>
  8047a8:	e0bffc17 	ldw	r2,-16(fp)
  8047ac:	10801d03 	ldbu	r2,116(r2)
  8047b0:	10803fcc 	andi	r2,r2,255
  8047b4:	1080201c 	xori	r2,r2,128
  8047b8:	10bfe004 	addi	r2,r2,-128
  8047bc:	10000226 	beq	r2,zero,8047c8 <logic+0x3f94>
  8047c0:	00800044 	movi	r2,1
  8047c4:	00000106 	br	8047cc <logic+0x3f98>
  8047c8:	0005883a 	mov	r2,zero
  8047cc:	1007883a 	mov	r3,r2
  8047d0:	e0bffc17 	ldw	r2,-16(fp)
  8047d4:	10c05185 	stb	r3,326(r2)
  d->_g128 = d->_g127 && !d->_cg128;
  8047d8:	e0bffc17 	ldw	r2,-16(fp)
  8047dc:	10803383 	ldbu	r2,206(r2)
  8047e0:	10803fcc 	andi	r2,r2,255
  8047e4:	1080201c 	xori	r2,r2,128
  8047e8:	10bfe004 	addi	r2,r2,-128
  8047ec:	10000826 	beq	r2,zero,804810 <logic+0x3fdc>
  8047f0:	e0bffc17 	ldw	r2,-16(fp)
  8047f4:	108051c3 	ldbu	r2,327(r2)
  8047f8:	10803fcc 	andi	r2,r2,255
  8047fc:	1080201c 	xori	r2,r2,128
  804800:	10bfe004 	addi	r2,r2,-128
  804804:	1000021e 	bne	r2,zero,804810 <logic+0x3fdc>
  804808:	00800044 	movi	r2,1
  80480c:	00000106 	br	804814 <logic+0x3fe0>
  804810:	0005883a 	mov	r2,zero
  804814:	1007883a 	mov	r3,r2
  804818:	e0bffc17 	ldw	r2,-16(fp)
  80481c:	10c033c5 	stb	r3,207(r2)
  d->_cg131 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804820:	e0bffc17 	ldw	r2,-16(fp)
  804824:	10801cc3 	ldbu	r2,115(r2)
  804828:	10803fcc 	andi	r2,r2,255
  80482c:	1080201c 	xori	r2,r2,128
  804830:	10bfe004 	addi	r2,r2,-128
  804834:	1000061e 	bne	r2,zero,804850 <logic+0x401c>
  804838:	e0bffc17 	ldw	r2,-16(fp)
  80483c:	10801d03 	ldbu	r2,116(r2)
  804840:	10803fcc 	andi	r2,r2,255
  804844:	1080201c 	xori	r2,r2,128
  804848:	10bfe004 	addi	r2,r2,-128
  80484c:	10000226 	beq	r2,zero,804858 <logic+0x4024>
  804850:	00800044 	movi	r2,1
  804854:	00000106 	br	80485c <logic+0x4028>
  804858:	0005883a 	mov	r2,zero
  80485c:	1007883a 	mov	r3,r2
  804860:	e0bffc17 	ldw	r2,-16(fp)
  804864:	10c05205 	stb	r3,328(r2)
  d->_g130 = d->_g133 && d->_cg129 || d->_g128 && d->_cg131;
  804868:	e0bffc17 	ldw	r2,-16(fp)
  80486c:	108034c3 	ldbu	r2,211(r2)
  804870:	10803fcc 	andi	r2,r2,255
  804874:	1080201c 	xori	r2,r2,128
  804878:	10bfe004 	addi	r2,r2,-128
  80487c:	10000626 	beq	r2,zero,804898 <logic+0x4064>
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	10805183 	ldbu	r2,326(r2)
  804888:	10803fcc 	andi	r2,r2,255
  80488c:	1080201c 	xori	r2,r2,128
  804890:	10bfe004 	addi	r2,r2,-128
  804894:	10000c1e 	bne	r2,zero,8048c8 <logic+0x4094>
  804898:	e0bffc17 	ldw	r2,-16(fp)
  80489c:	108033c3 	ldbu	r2,207(r2)
  8048a0:	10803fcc 	andi	r2,r2,255
  8048a4:	1080201c 	xori	r2,r2,128
  8048a8:	10bfe004 	addi	r2,r2,-128
  8048ac:	10000826 	beq	r2,zero,8048d0 <logic+0x409c>
  8048b0:	e0bffc17 	ldw	r2,-16(fp)
  8048b4:	10805203 	ldbu	r2,328(r2)
  8048b8:	10803fcc 	andi	r2,r2,255
  8048bc:	1080201c 	xori	r2,r2,128
  8048c0:	10bfe004 	addi	r2,r2,-128
  8048c4:	10000226 	beq	r2,zero,8048d0 <logic+0x409c>
  8048c8:	00800044 	movi	r2,1
  8048cc:	00000106 	br	8048d4 <logic+0x40a0>
  8048d0:	0005883a 	mov	r2,zero
  8048d4:	1007883a 	mov	r3,r2
  8048d8:	e0bffc17 	ldw	r2,-16(fp)
  8048dc:	10c03445 	stb	r3,209(r2)
  d->_g137 = !d->_g152;
  8048e0:	e0bffc17 	ldw	r2,-16(fp)
  8048e4:	10803803 	ldbu	r2,224(r2)
  8048e8:	10803fcc 	andi	r2,r2,255
  8048ec:	1080201c 	xori	r2,r2,128
  8048f0:	10bfe004 	addi	r2,r2,-128
  8048f4:	1005003a 	cmpeq	r2,r2,zero
  8048f8:	1007883a 	mov	r3,r2
  8048fc:	e0bffc17 	ldw	r2,-16(fp)
  804900:	10c03545 	stb	r3,213(r2)
  d->_g138 = d->_g147 || d->_g141;
  804904:	e0bffc17 	ldw	r2,-16(fp)
  804908:	10803743 	ldbu	r2,221(r2)
  80490c:	10803fcc 	andi	r2,r2,255
  804910:	1080201c 	xori	r2,r2,128
  804914:	10bfe004 	addi	r2,r2,-128
  804918:	1000061e 	bne	r2,zero,804934 <logic+0x4100>
  80491c:	e0bffc17 	ldw	r2,-16(fp)
  804920:	10803643 	ldbu	r2,217(r2)
  804924:	10803fcc 	andi	r2,r2,255
  804928:	1080201c 	xori	r2,r2,128
  80492c:	10bfe004 	addi	r2,r2,-128
  804930:	10000226 	beq	r2,zero,80493c <logic+0x4108>
  804934:	00800044 	movi	r2,1
  804938:	00000106 	br	804940 <logic+0x410c>
  80493c:	0005883a 	mov	r2,zero
  804940:	1007883a 	mov	r3,r2
  804944:	e0bffc17 	ldw	r2,-16(fp)
  804948:	10c03585 	stb	r3,214(r2)
  d->_g141 = (d->_g147_e1 || d->_g123) && (d->_g130_e2 || d->_g130) && (d->_g137 || d->_g138) && (d->_g123 || d->_g130 || d->_g138);
  80494c:	e0bffc17 	ldw	r2,-16(fp)
  804950:	10806083 	ldbu	r2,386(r2)
  804954:	10803fcc 	andi	r2,r2,255
  804958:	1080201c 	xori	r2,r2,128
  80495c:	10bfe004 	addi	r2,r2,-128
  804960:	1000061e 	bne	r2,zero,80497c <logic+0x4148>
  804964:	e0bffc17 	ldw	r2,-16(fp)
  804968:	10803303 	ldbu	r2,204(r2)
  80496c:	10803fcc 	andi	r2,r2,255
  804970:	1080201c 	xori	r2,r2,128
  804974:	10bfe004 	addi	r2,r2,-128
  804978:	10002c26 	beq	r2,zero,804a2c <logic+0x41f8>
  80497c:	e0bffc17 	ldw	r2,-16(fp)
  804980:	10806003 	ldbu	r2,384(r2)
  804984:	10803fcc 	andi	r2,r2,255
  804988:	1080201c 	xori	r2,r2,128
  80498c:	10bfe004 	addi	r2,r2,-128
  804990:	1000061e 	bne	r2,zero,8049ac <logic+0x4178>
  804994:	e0bffc17 	ldw	r2,-16(fp)
  804998:	10803443 	ldbu	r2,209(r2)
  80499c:	10803fcc 	andi	r2,r2,255
  8049a0:	1080201c 	xori	r2,r2,128
  8049a4:	10bfe004 	addi	r2,r2,-128
  8049a8:	10002026 	beq	r2,zero,804a2c <logic+0x41f8>
  8049ac:	e0bffc17 	ldw	r2,-16(fp)
  8049b0:	10803543 	ldbu	r2,213(r2)
  8049b4:	10803fcc 	andi	r2,r2,255
  8049b8:	1080201c 	xori	r2,r2,128
  8049bc:	10bfe004 	addi	r2,r2,-128
  8049c0:	1000061e 	bne	r2,zero,8049dc <logic+0x41a8>
  8049c4:	e0bffc17 	ldw	r2,-16(fp)
  8049c8:	10803583 	ldbu	r2,214(r2)
  8049cc:	10803fcc 	andi	r2,r2,255
  8049d0:	1080201c 	xori	r2,r2,128
  8049d4:	10bfe004 	addi	r2,r2,-128
  8049d8:	10001426 	beq	r2,zero,804a2c <logic+0x41f8>
  8049dc:	e0bffc17 	ldw	r2,-16(fp)
  8049e0:	10803303 	ldbu	r2,204(r2)
  8049e4:	10803fcc 	andi	r2,r2,255
  8049e8:	1080201c 	xori	r2,r2,128
  8049ec:	10bfe004 	addi	r2,r2,-128
  8049f0:	10000c1e 	bne	r2,zero,804a24 <logic+0x41f0>
  8049f4:	e0bffc17 	ldw	r2,-16(fp)
  8049f8:	10803443 	ldbu	r2,209(r2)
  8049fc:	10803fcc 	andi	r2,r2,255
  804a00:	1080201c 	xori	r2,r2,128
  804a04:	10bfe004 	addi	r2,r2,-128
  804a08:	1000061e 	bne	r2,zero,804a24 <logic+0x41f0>
  804a0c:	e0bffc17 	ldw	r2,-16(fp)
  804a10:	10803583 	ldbu	r2,214(r2)
  804a14:	10803fcc 	andi	r2,r2,255
  804a18:	1080201c 	xori	r2,r2,128
  804a1c:	10bfe004 	addi	r2,r2,-128
  804a20:	10000226 	beq	r2,zero,804a2c <logic+0x41f8>
  804a24:	00800044 	movi	r2,1
  804a28:	00000106 	br	804a30 <logic+0x41fc>
  804a2c:	0005883a 	mov	r2,zero
  804a30:	1007883a 	mov	r3,r2
  804a34:	e0bffc17 	ldw	r2,-16(fp)
  804a38:	10c03645 	stb	r3,217(r2)
  d->_cg142 = d->_heart2_local__Atrig10;
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10c01cc3 	ldbu	r3,115(r2)
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10c05305 	stb	r3,332(r2)
  d->_g123 = d->_g141 && !d->_cg142;
  804a4c:	e0bffc17 	ldw	r2,-16(fp)
  804a50:	10803643 	ldbu	r2,217(r2)
  804a54:	10803fcc 	andi	r2,r2,255
  804a58:	1080201c 	xori	r2,r2,128
  804a5c:	10bfe004 	addi	r2,r2,-128
  804a60:	10000826 	beq	r2,zero,804a84 <logic+0x4250>
  804a64:	e0bffc17 	ldw	r2,-16(fp)
  804a68:	10805303 	ldbu	r2,332(r2)
  804a6c:	10803fcc 	andi	r2,r2,255
  804a70:	1080201c 	xori	r2,r2,128
  804a74:	10bfe004 	addi	r2,r2,-128
  804a78:	1000021e 	bne	r2,zero,804a84 <logic+0x4250>
  804a7c:	00800044 	movi	r2,1
  804a80:	00000106 	br	804a88 <logic+0x4254>
  804a84:	0005883a 	mov	r2,zero
  804a88:	1007883a 	mov	r3,r2
  804a8c:	e0bffc17 	ldw	r2,-16(fp)
  804a90:	10c03305 	stb	r3,204(r2)
  if (d->_g123) {
  804a94:	e0bffc17 	ldw	r2,-16(fp)
  804a98:	10803303 	ldbu	r2,204(r2)
  804a9c:	10803fcc 	andi	r2,r2,255
  804aa0:	1080201c 	xori	r2,r2,128
  804aa4:	10bfe004 	addi	r2,r2,-128
  804aa8:	10000626 	beq	r2,zero,804ac4 <logic+0x4290>
    d->AR |= 1;
  804aac:	e0bffc17 	ldw	r2,-16(fp)
  804ab0:	10801843 	ldbu	r2,97(r2)
  804ab4:	10800054 	ori	r2,r2,1
  804ab8:	1007883a 	mov	r3,r2
  804abc:	e0bffc17 	ldw	r2,-16(fp)
  804ac0:	10c01845 	stb	r3,97(r2)
  }
  d->_g123_e1 = d->_GO || d->_g154 || d->_g123;
  804ac4:	e0bffc17 	ldw	r2,-16(fp)
  804ac8:	10804543 	ldbu	r2,277(r2)
  804acc:	10803fcc 	andi	r2,r2,255
  804ad0:	1080201c 	xori	r2,r2,128
  804ad4:	10bfe004 	addi	r2,r2,-128
  804ad8:	10000c1e 	bne	r2,zero,804b0c <logic+0x42d8>
  804adc:	e0bffc17 	ldw	r2,-16(fp)
  804ae0:	10803883 	ldbu	r2,226(r2)
  804ae4:	10803fcc 	andi	r2,r2,255
  804ae8:	1080201c 	xori	r2,r2,128
  804aec:	10bfe004 	addi	r2,r2,-128
  804af0:	1000061e 	bne	r2,zero,804b0c <logic+0x42d8>
  804af4:	e0bffc17 	ldw	r2,-16(fp)
  804af8:	10803303 	ldbu	r2,204(r2)
  804afc:	10803fcc 	andi	r2,r2,255
  804b00:	1080201c 	xori	r2,r2,128
  804b04:	10bfe004 	addi	r2,r2,-128
  804b08:	10000226 	beq	r2,zero,804b14 <logic+0x42e0>
  804b0c:	00800044 	movi	r2,1
  804b10:	00000106 	br	804b18 <logic+0x42e4>
  804b14:	0005883a 	mov	r2,zero
  804b18:	1007883a 	mov	r3,r2
  804b1c:	e0bffc17 	ldw	r2,-16(fp)
  804b20:	10c05fc5 	stb	r3,383(r2)
  if (d->_g123_e1) {
  804b24:	e0bffc17 	ldw	r2,-16(fp)
  804b28:	10805fc3 	ldbu	r2,383(r2)
  804b2c:	10803fcc 	andi	r2,r2,255
  804b30:	1080201c 	xori	r2,r2,128
  804b34:	10bfe004 	addi	r2,r2,-128
  804b38:	10000426 	beq	r2,zero,804b4c <logic+0x4318>
    d->_heart2_local__Atrig10 = 0;
  804b3c:	e0bffc17 	ldw	r2,-16(fp)
  804b40:	10001cc5 	stb	zero,115(r2)
    d->_heart2_local__Atrig11 = 0;
  804b44:	e0bffc17 	ldw	r2,-16(fp)
  804b48:	10001d05 	stb	zero,116(r2)
  }
  d->_cg120 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804b4c:	e0bffc17 	ldw	r2,-16(fp)
  804b50:	10801cc3 	ldbu	r2,115(r2)
  804b54:	10803fcc 	andi	r2,r2,255
  804b58:	1080201c 	xori	r2,r2,128
  804b5c:	10bfe004 	addi	r2,r2,-128
  804b60:	1000061e 	bne	r2,zero,804b7c <logic+0x4348>
  804b64:	e0bffc17 	ldw	r2,-16(fp)
  804b68:	10801d03 	ldbu	r2,116(r2)
  804b6c:	10803fcc 	andi	r2,r2,255
  804b70:	1080201c 	xori	r2,r2,128
  804b74:	10bfe004 	addi	r2,r2,-128
  804b78:	10000226 	beq	r2,zero,804b84 <logic+0x4350>
  804b7c:	00800044 	movi	r2,1
  804b80:	00000106 	br	804b88 <logic+0x4354>
  804b84:	0005883a 	mov	r2,zero
  804b88:	1007883a 	mov	r3,r2
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10c05085 	stb	r3,322(r2)
  d->_g130_e2 = d->_g123_e1 && !d->_cg120 || d->_g151 && !d->_cg122;
  804b94:	e0bffc17 	ldw	r2,-16(fp)
  804b98:	10805fc3 	ldbu	r2,383(r2)
  804b9c:	10803fcc 	andi	r2,r2,255
  804ba0:	1080201c 	xori	r2,r2,128
  804ba4:	10bfe004 	addi	r2,r2,-128
  804ba8:	10000626 	beq	r2,zero,804bc4 <logic+0x4390>
  804bac:	e0bffc17 	ldw	r2,-16(fp)
  804bb0:	10805083 	ldbu	r2,322(r2)
  804bb4:	10803fcc 	andi	r2,r2,255
  804bb8:	1080201c 	xori	r2,r2,128
  804bbc:	10bfe004 	addi	r2,r2,-128
  804bc0:	10000c26 	beq	r2,zero,804bf4 <logic+0x43c0>
  804bc4:	e0bffc17 	ldw	r2,-16(fp)
  804bc8:	108037c3 	ldbu	r2,223(r2)
  804bcc:	10803fcc 	andi	r2,r2,255
  804bd0:	1080201c 	xori	r2,r2,128
  804bd4:	10bfe004 	addi	r2,r2,-128
  804bd8:	10000826 	beq	r2,zero,804bfc <logic+0x43c8>
  804bdc:	e0bffc17 	ldw	r2,-16(fp)
  804be0:	108050c3 	ldbu	r2,323(r2)
  804be4:	10803fcc 	andi	r2,r2,255
  804be8:	1080201c 	xori	r2,r2,128
  804bec:	10bfe004 	addi	r2,r2,-128
  804bf0:	1000021e 	bne	r2,zero,804bfc <logic+0x43c8>
  804bf4:	00800044 	movi	r2,1
  804bf8:	00000106 	br	804c00 <logic+0x43cc>
  804bfc:	0005883a 	mov	r2,zero
  804c00:	1007883a 	mov	r3,r2
  804c04:	e0bffc17 	ldw	r2,-16(fp)
  804c08:	10c06005 	stb	r3,384(r2)
  d->_cg124 = d->_region3_null_PVARP < d->PVARP_time;
  804c0c:	e0bffc17 	ldw	r2,-16(fp)
  804c10:	14000d17 	ldw	r16,52(r2)
  804c14:	14400e17 	ldw	r17,56(r2)
  804c18:	e0bffc17 	ldw	r2,-16(fp)
  804c1c:	10800117 	ldw	r2,4(r2)
  804c20:	1009883a 	mov	r4,r2
  804c24:	0808ce00 	call	808ce0 <__floatsidf>
  804c28:	1009883a 	mov	r4,r2
  804c2c:	180b883a 	mov	r5,r3
  804c30:	04800044 	movi	r18,1
  804c34:	200d883a 	mov	r6,r4
  804c38:	280f883a 	mov	r7,r5
  804c3c:	8009883a 	mov	r4,r16
  804c40:	880b883a 	mov	r5,r17
  804c44:	08082f00 	call	8082f0 <__ledf2>
  804c48:	10000116 	blt	r2,zero,804c50 <logic+0x441c>
  804c4c:	0025883a 	mov	r18,zero
  804c50:	9007883a 	mov	r3,r18
  804c54:	e0bffc17 	ldw	r2,-16(fp)
  804c58:	10c05105 	stb	r3,324(r2)
  d->_g130 = d->_g123_e1 && d->_cg124;
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10805fc3 	ldbu	r2,383(r2)
  804c64:	10803fcc 	andi	r2,r2,255
  804c68:	1080201c 	xori	r2,r2,128
  804c6c:	10bfe004 	addi	r2,r2,-128
  804c70:	10000826 	beq	r2,zero,804c94 <logic+0x4460>
  804c74:	e0bffc17 	ldw	r2,-16(fp)
  804c78:	10805103 	ldbu	r2,324(r2)
  804c7c:	10803fcc 	andi	r2,r2,255
  804c80:	1080201c 	xori	r2,r2,128
  804c84:	10bfe004 	addi	r2,r2,-128
  804c88:	10000226 	beq	r2,zero,804c94 <logic+0x4460>
  804c8c:	00800044 	movi	r2,1
  804c90:	00000106 	br	804c98 <logic+0x4464>
  804c94:	0005883a 	mov	r2,zero
  804c98:	1007883a 	mov	r3,r2
  804c9c:	e0bffc17 	ldw	r2,-16(fp)
  804ca0:	10c03445 	stb	r3,209(r2)
  if (d->_g130) {
  804ca4:	e0bffc17 	ldw	r2,-16(fp)
  804ca8:	10803443 	ldbu	r2,209(r2)
  804cac:	10803fcc 	andi	r2,r2,255
  804cb0:	1080201c 	xori	r2,r2,128
  804cb4:	10bfe004 	addi	r2,r2,-128
  804cb8:	10003426 	beq	r2,zero,804d8c <logic+0x4558>
    d->sleepT = (d->sleepT < (d->PVARP_time - d->_region3_null_PVARP)) ? d->sleepT : (d->PVARP_time - d->_region3_null_PVARP);
  804cbc:	e0bffc17 	ldw	r2,-16(fp)
  804cc0:	14001517 	ldw	r16,84(r2)
  804cc4:	14401617 	ldw	r17,88(r2)
  804cc8:	e0bffc17 	ldw	r2,-16(fp)
  804ccc:	10800117 	ldw	r2,4(r2)
  804cd0:	1009883a 	mov	r4,r2
  804cd4:	0808ce00 	call	808ce0 <__floatsidf>
  804cd8:	1011883a 	mov	r8,r2
  804cdc:	1813883a 	mov	r9,r3
  804ce0:	e13ffc17 	ldw	r4,-16(fp)
  804ce4:	20800d17 	ldw	r2,52(r4)
  804ce8:	20c00e17 	ldw	r3,56(r4)
  804cec:	100d883a 	mov	r6,r2
  804cf0:	180f883a 	mov	r7,r3
  804cf4:	4009883a 	mov	r4,r8
  804cf8:	480b883a 	mov	r5,r9
  804cfc:	08083e40 	call	8083e4 <__subdf3>
  804d00:	1009883a 	mov	r4,r2
  804d04:	180b883a 	mov	r5,r3
  804d08:	2005883a 	mov	r2,r4
  804d0c:	2807883a 	mov	r3,r5
  804d10:	100d883a 	mov	r6,r2
  804d14:	180f883a 	mov	r7,r3
  804d18:	8009883a 	mov	r4,r16
  804d1c:	880b883a 	mov	r5,r17
  804d20:	08082f00 	call	8082f0 <__ledf2>
  804d24:	1000040e 	bge	r2,zero,804d38 <logic+0x4504>
  804d28:	e13ffc17 	ldw	r4,-16(fp)
  804d2c:	20801517 	ldw	r2,84(r4)
  804d30:	20c01617 	ldw	r3,88(r4)
  804d34:	00001206 	br	804d80 <logic+0x454c>
  804d38:	e0bffc17 	ldw	r2,-16(fp)
  804d3c:	10800117 	ldw	r2,4(r2)
  804d40:	1009883a 	mov	r4,r2
  804d44:	0808ce00 	call	808ce0 <__floatsidf>
  804d48:	1011883a 	mov	r8,r2
  804d4c:	1813883a 	mov	r9,r3
  804d50:	e13ffc17 	ldw	r4,-16(fp)
  804d54:	20800d17 	ldw	r2,52(r4)
  804d58:	20c00e17 	ldw	r3,56(r4)
  804d5c:	100d883a 	mov	r6,r2
  804d60:	180f883a 	mov	r7,r3
  804d64:	4009883a 	mov	r4,r8
  804d68:	480b883a 	mov	r5,r9
  804d6c:	08083e40 	call	8083e4 <__subdf3>
  804d70:	1009883a 	mov	r4,r2
  804d74:	180b883a 	mov	r5,r3
  804d78:	2005883a 	mov	r2,r4
  804d7c:	2807883a 	mov	r3,r5
  804d80:	e13ffc17 	ldw	r4,-16(fp)
  804d84:	20801515 	stw	r2,84(r4)
  804d88:	20c01615 	stw	r3,88(r4)
  }
  d->_cg125 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804d8c:	e0bffc17 	ldw	r2,-16(fp)
  804d90:	10801cc3 	ldbu	r2,115(r2)
  804d94:	10803fcc 	andi	r2,r2,255
  804d98:	1080201c 	xori	r2,r2,128
  804d9c:	10bfe004 	addi	r2,r2,-128
  804da0:	1000061e 	bne	r2,zero,804dbc <logic+0x4588>
  804da4:	e0bffc17 	ldw	r2,-16(fp)
  804da8:	10801d03 	ldbu	r2,116(r2)
  804dac:	10803fcc 	andi	r2,r2,255
  804db0:	1080201c 	xori	r2,r2,128
  804db4:	10bfe004 	addi	r2,r2,-128
  804db8:	10000226 	beq	r2,zero,804dc4 <logic+0x4590>
  804dbc:	00800044 	movi	r2,1
  804dc0:	00000106 	br	804dc8 <logic+0x4594>
  804dc4:	0005883a 	mov	r2,zero
  804dc8:	1007883a 	mov	r3,r2
  804dcc:	e0bffc17 	ldw	r2,-16(fp)
  804dd0:	10c05145 	stb	r3,325(r2)
  d->_g139 = d->_g130 && !d->_cg125 || d->_g133 && !d->_cg129;
  804dd4:	e0bffc17 	ldw	r2,-16(fp)
  804dd8:	10803443 	ldbu	r2,209(r2)
  804ddc:	10803fcc 	andi	r2,r2,255
  804de0:	1080201c 	xori	r2,r2,128
  804de4:	10bfe004 	addi	r2,r2,-128
  804de8:	10000626 	beq	r2,zero,804e04 <logic+0x45d0>
  804dec:	e0bffc17 	ldw	r2,-16(fp)
  804df0:	10805143 	ldbu	r2,325(r2)
  804df4:	10803fcc 	andi	r2,r2,255
  804df8:	1080201c 	xori	r2,r2,128
  804dfc:	10bfe004 	addi	r2,r2,-128
  804e00:	10000c26 	beq	r2,zero,804e34 <logic+0x4600>
  804e04:	e0bffc17 	ldw	r2,-16(fp)
  804e08:	108034c3 	ldbu	r2,211(r2)
  804e0c:	10803fcc 	andi	r2,r2,255
  804e10:	1080201c 	xori	r2,r2,128
  804e14:	10bfe004 	addi	r2,r2,-128
  804e18:	10000826 	beq	r2,zero,804e3c <logic+0x4608>
  804e1c:	e0bffc17 	ldw	r2,-16(fp)
  804e20:	10805183 	ldbu	r2,326(r2)
  804e24:	10803fcc 	andi	r2,r2,255
  804e28:	1080201c 	xori	r2,r2,128
  804e2c:	10bfe004 	addi	r2,r2,-128
  804e30:	1000021e 	bne	r2,zero,804e3c <logic+0x4608>
  804e34:	00800044 	movi	r2,1
  804e38:	00000106 	br	804e40 <logic+0x460c>
  804e3c:	0005883a 	mov	r2,zero
  804e40:	1007883a 	mov	r3,r2
  804e44:	e0bffc17 	ldw	r2,-16(fp)
  804e48:	10c035c5 	stb	r3,215(r2)
  d->_g139_e3 = d->_g123_e1 && !d->_cg124;
  804e4c:	e0bffc17 	ldw	r2,-16(fp)
  804e50:	10805fc3 	ldbu	r2,383(r2)
  804e54:	10803fcc 	andi	r2,r2,255
  804e58:	1080201c 	xori	r2,r2,128
  804e5c:	10bfe004 	addi	r2,r2,-128
  804e60:	10000826 	beq	r2,zero,804e84 <logic+0x4650>
  804e64:	e0bffc17 	ldw	r2,-16(fp)
  804e68:	10805103 	ldbu	r2,324(r2)
  804e6c:	10803fcc 	andi	r2,r2,255
  804e70:	1080201c 	xori	r2,r2,128
  804e74:	10bfe004 	addi	r2,r2,-128
  804e78:	1000021e 	bne	r2,zero,804e84 <logic+0x4650>
  804e7c:	00800044 	movi	r2,1
  804e80:	00000106 	br	804e88 <logic+0x4654>
  804e84:	0005883a 	mov	r2,zero
  804e88:	1007883a 	mov	r3,r2
  804e8c:	e0bffc17 	ldw	r2,-16(fp)
  804e90:	10c06045 	stb	r3,385(r2)
  d->_cg134 = d->_heart2_local__Atrig10 || d->_heart2_local__Atrig11;
  804e94:	e0bffc17 	ldw	r2,-16(fp)
  804e98:	10801cc3 	ldbu	r2,115(r2)
  804e9c:	10803fcc 	andi	r2,r2,255
  804ea0:	1080201c 	xori	r2,r2,128
  804ea4:	10bfe004 	addi	r2,r2,-128
  804ea8:	1000061e 	bne	r2,zero,804ec4 <logic+0x4690>
  804eac:	e0bffc17 	ldw	r2,-16(fp)
  804eb0:	10801d03 	ldbu	r2,116(r2)
  804eb4:	10803fcc 	andi	r2,r2,255
  804eb8:	1080201c 	xori	r2,r2,128
  804ebc:	10bfe004 	addi	r2,r2,-128
  804ec0:	10000226 	beq	r2,zero,804ecc <logic+0x4698>
  804ec4:	00800044 	movi	r2,1
  804ec8:	00000106 	br	804ed0 <logic+0x469c>
  804ecc:	0005883a 	mov	r2,zero
  804ed0:	1007883a 	mov	r3,r2
  804ed4:	e0bffc17 	ldw	r2,-16(fp)
  804ed8:	10c05245 	stb	r3,329(r2)
  d->_g156 = d->_g128 && !d->_cg131 || d->_g139_e3 && !d->_cg134;
  804edc:	e0bffc17 	ldw	r2,-16(fp)
  804ee0:	108033c3 	ldbu	r2,207(r2)
  804ee4:	10803fcc 	andi	r2,r2,255
  804ee8:	1080201c 	xori	r2,r2,128
  804eec:	10bfe004 	addi	r2,r2,-128
  804ef0:	10000626 	beq	r2,zero,804f0c <logic+0x46d8>
  804ef4:	e0bffc17 	ldw	r2,-16(fp)
  804ef8:	10805203 	ldbu	r2,328(r2)
  804efc:	10803fcc 	andi	r2,r2,255
  804f00:	1080201c 	xori	r2,r2,128
  804f04:	10bfe004 	addi	r2,r2,-128
  804f08:	10000c26 	beq	r2,zero,804f3c <logic+0x4708>
  804f0c:	e0bffc17 	ldw	r2,-16(fp)
  804f10:	10806043 	ldbu	r2,385(r2)
  804f14:	10803fcc 	andi	r2,r2,255
  804f18:	1080201c 	xori	r2,r2,128
  804f1c:	10bfe004 	addi	r2,r2,-128
  804f20:	10000826 	beq	r2,zero,804f44 <logic+0x4710>
  804f24:	e0bffc17 	ldw	r2,-16(fp)
  804f28:	10805243 	ldbu	r2,329(r2)
  804f2c:	10803fcc 	andi	r2,r2,255
  804f30:	1080201c 	xori	r2,r2,128
  804f34:	10bfe004 	addi	r2,r2,-128
  804f38:	1000021e 	bne	r2,zero,804f44 <logic+0x4710>
  804f3c:	00800044 	movi	r2,1
  804f40:	00000106 	br	804f48 <logic+0x4714>
  804f44:	0005883a 	mov	r2,zero
  804f48:	1007883a 	mov	r3,r2
  804f4c:	e0bffc17 	ldw	r2,-16(fp)
  804f50:	10c03905 	stb	r3,228(r2)
  d->_g158 = d->_g123_e1 || d->_g152_e2 && !d->AS;
  804f54:	e0bffc17 	ldw	r2,-16(fp)
  804f58:	10805fc3 	ldbu	r2,383(r2)
  804f5c:	10803fcc 	andi	r2,r2,255
  804f60:	1080201c 	xori	r2,r2,128
  804f64:	10bfe004 	addi	r2,r2,-128
  804f68:	10000c1e 	bne	r2,zero,804f9c <logic+0x4768>
  804f6c:	e0bffc17 	ldw	r2,-16(fp)
  804f70:	108060c3 	ldbu	r2,387(r2)
  804f74:	10803fcc 	andi	r2,r2,255
  804f78:	1080201c 	xori	r2,r2,128
  804f7c:	10bfe004 	addi	r2,r2,-128
  804f80:	10000826 	beq	r2,zero,804fa4 <logic+0x4770>
  804f84:	e0bffc17 	ldw	r2,-16(fp)
  804f88:	10801703 	ldbu	r2,92(r2)
  804f8c:	10803fcc 	andi	r2,r2,255
  804f90:	1080201c 	xori	r2,r2,128
  804f94:	10bfe004 	addi	r2,r2,-128
  804f98:	1000021e 	bne	r2,zero,804fa4 <logic+0x4770>
  804f9c:	00800044 	movi	r2,1
  804fa0:	00000106 	br	804fa8 <logic+0x4774>
  804fa4:	0005883a 	mov	r2,zero
  804fa8:	1007883a 	mov	r3,r2
  804fac:	e0bffc17 	ldw	r2,-16(fp)
  804fb0:	10c03985 	stb	r3,230(r2)
  d->_g122 = d->_g150 && !d->_cg155;
  804fb4:	e0bffc17 	ldw	r2,-16(fp)
  804fb8:	10803783 	ldbu	r2,222(r2)
  804fbc:	10803fcc 	andi	r2,r2,255
  804fc0:	1080201c 	xori	r2,r2,128
  804fc4:	10bfe004 	addi	r2,r2,-128
  804fc8:	10000826 	beq	r2,zero,804fec <logic+0x47b8>
  804fcc:	e0bffc17 	ldw	r2,-16(fp)
  804fd0:	10805443 	ldbu	r2,337(r2)
  804fd4:	10803fcc 	andi	r2,r2,255
  804fd8:	1080201c 	xori	r2,r2,128
  804fdc:	10bfe004 	addi	r2,r2,-128
  804fe0:	1000021e 	bne	r2,zero,804fec <logic+0x47b8>
  804fe4:	00800044 	movi	r2,1
  804fe8:	00000106 	br	804ff0 <logic+0x47bc>
  804fec:	0005883a 	mov	r2,zero
  804ff0:	1007883a 	mov	r3,r2
  804ff4:	e0bffc17 	ldw	r2,-16(fp)
  804ff8:	10c032c5 	stb	r3,203(r2)
  if (d->_g122) {
  804ffc:	e0bffc17 	ldw	r2,-16(fp)
  805000:	108032c3 	ldbu	r2,203(r2)
  805004:	10803fcc 	andi	r2,r2,255
  805008:	1080201c 	xori	r2,r2,128
  80500c:	10bfe004 	addi	r2,r2,-128
  805010:	10000626 	beq	r2,zero,80502c <logic+0x47f8>
    d->a |= 1;
  805014:	e0bffc17 	ldw	r2,-16(fp)
  805018:	10801883 	ldbu	r2,98(r2)
  80501c:	10800054 	ori	r2,r2,1
  805020:	1007883a 	mov	r3,r2
  805024:	e0bffc17 	ldw	r2,-16(fp)
  805028:	10c01885 	stb	r3,98(r2)
  }
  d->_g125 = d->_g141 && d->_cg142 || d->_g122;
  80502c:	e0bffc17 	ldw	r2,-16(fp)
  805030:	10803643 	ldbu	r2,217(r2)
  805034:	10803fcc 	andi	r2,r2,255
  805038:	1080201c 	xori	r2,r2,128
  80503c:	10bfe004 	addi	r2,r2,-128
  805040:	10000626 	beq	r2,zero,80505c <logic+0x4828>
  805044:	e0bffc17 	ldw	r2,-16(fp)
  805048:	10805303 	ldbu	r2,332(r2)
  80504c:	10803fcc 	andi	r2,r2,255
  805050:	1080201c 	xori	r2,r2,128
  805054:	10bfe004 	addi	r2,r2,-128
  805058:	1000061e 	bne	r2,zero,805074 <logic+0x4840>
  80505c:	e0bffc17 	ldw	r2,-16(fp)
  805060:	108032c3 	ldbu	r2,203(r2)
  805064:	10803fcc 	andi	r2,r2,255
  805068:	1080201c 	xori	r2,r2,128
  80506c:	10bfe004 	addi	r2,r2,-128
  805070:	10000226 	beq	r2,zero,80507c <logic+0x4848>
  805074:	00800044 	movi	r2,1
  805078:	00000106 	br	805080 <logic+0x484c>
  80507c:	0005883a 	mov	r2,zero
  805080:	1007883a 	mov	r3,r2
  805084:	e0bffc17 	ldw	r2,-16(fp)
  805088:	10c03345 	stb	r3,205(r2)
  if (d->_g125) {
  80508c:	e0bffc17 	ldw	r2,-16(fp)
  805090:	10803343 	ldbu	r2,205(r2)
  805094:	10803fcc 	andi	r2,r2,255
  805098:	1080201c 	xori	r2,r2,128
  80509c:	10bfe004 	addi	r2,r2,-128
  8050a0:	10000426 	beq	r2,zero,8050b4 <logic+0x4880>
    d->_heart2_local__Atrig12 = 0;
  8050a4:	e0bffc17 	ldw	r2,-16(fp)
  8050a8:	10001d45 	stb	zero,117(r2)
    d->_heart2_local__Atrig13 = 0;
  8050ac:	e0bffc17 	ldw	r2,-16(fp)
  8050b0:	10001d85 	stb	zero,118(r2)
  }
  d->_cg144 = d->_heart2_local__Atrig12 || d->_heart2_local__Atrig13;
  8050b4:	e0bffc17 	ldw	r2,-16(fp)
  8050b8:	10801d43 	ldbu	r2,117(r2)
  8050bc:	10803fcc 	andi	r2,r2,255
  8050c0:	1080201c 	xori	r2,r2,128
  8050c4:	10bfe004 	addi	r2,r2,-128
  8050c8:	1000061e 	bne	r2,zero,8050e4 <logic+0x48b0>
  8050cc:	e0bffc17 	ldw	r2,-16(fp)
  8050d0:	10801d83 	ldbu	r2,118(r2)
  8050d4:	10803fcc 	andi	r2,r2,255
  8050d8:	1080201c 	xori	r2,r2,128
  8050dc:	10bfe004 	addi	r2,r2,-128
  8050e0:	10000226 	beq	r2,zero,8050ec <logic+0x48b8>
  8050e4:	00800044 	movi	r2,1
  8050e8:	00000106 	br	8050f0 <logic+0x48bc>
  8050ec:	0005883a 	mov	r2,zero
  8050f0:	1007883a 	mov	r3,r2
  8050f4:	e0bffc17 	ldw	r2,-16(fp)
  8050f8:	10c05345 	stb	r3,333(r2)
  d->_g129 = d->_g125 && !d->_cg144 || d->_g92 && !d->_cg146;
  8050fc:	e0bffc17 	ldw	r2,-16(fp)
  805100:	10803343 	ldbu	r2,205(r2)
  805104:	10803fcc 	andi	r2,r2,255
  805108:	1080201c 	xori	r2,r2,128
  80510c:	10bfe004 	addi	r2,r2,-128
  805110:	10000626 	beq	r2,zero,80512c <logic+0x48f8>
  805114:	e0bffc17 	ldw	r2,-16(fp)
  805118:	10805343 	ldbu	r2,333(r2)
  80511c:	10803fcc 	andi	r2,r2,255
  805120:	1080201c 	xori	r2,r2,128
  805124:	10bfe004 	addi	r2,r2,-128
  805128:	10000c26 	beq	r2,zero,80515c <logic+0x4928>
  80512c:	e0bffc17 	ldw	r2,-16(fp)
  805130:	10802dc3 	ldbu	r2,183(r2)
  805134:	10803fcc 	andi	r2,r2,255
  805138:	1080201c 	xori	r2,r2,128
  80513c:	10bfe004 	addi	r2,r2,-128
  805140:	10000826 	beq	r2,zero,805164 <logic+0x4930>
  805144:	e0bffc17 	ldw	r2,-16(fp)
  805148:	10805383 	ldbu	r2,334(r2)
  80514c:	10803fcc 	andi	r2,r2,255
  805150:	1080201c 	xori	r2,r2,128
  805154:	10bfe004 	addi	r2,r2,-128
  805158:	1000021e 	bne	r2,zero,805164 <logic+0x4930>
  80515c:	00800044 	movi	r2,1
  805160:	00000106 	br	805168 <logic+0x4934>
  805164:	0005883a 	mov	r2,zero
  805168:	1007883a 	mov	r3,r2
  80516c:	e0bffc17 	ldw	r2,-16(fp)
  805170:	10c03405 	stb	r3,208(r2)
  d->_g134 = d->_g125 || d->_g115 && !d->AS;
  805174:	e0bffc17 	ldw	r2,-16(fp)
  805178:	10803343 	ldbu	r2,205(r2)
  80517c:	10803fcc 	andi	r2,r2,255
  805180:	1080201c 	xori	r2,r2,128
  805184:	10bfe004 	addi	r2,r2,-128
  805188:	10000c1e 	bne	r2,zero,8051bc <logic+0x4988>
  80518c:	e0bffc17 	ldw	r2,-16(fp)
  805190:	10803203 	ldbu	r2,200(r2)
  805194:	10803fcc 	andi	r2,r2,255
  805198:	1080201c 	xori	r2,r2,128
  80519c:	10bfe004 	addi	r2,r2,-128
  8051a0:	10000826 	beq	r2,zero,8051c4 <logic+0x4990>
  8051a4:	e0bffc17 	ldw	r2,-16(fp)
  8051a8:	10801703 	ldbu	r2,92(r2)
  8051ac:	10803fcc 	andi	r2,r2,255
  8051b0:	1080201c 	xori	r2,r2,128
  8051b4:	10bfe004 	addi	r2,r2,-128
  8051b8:	1000021e 	bne	r2,zero,8051c4 <logic+0x4990>
  8051bc:	00800044 	movi	r2,1
  8051c0:	00000106 	br	8051c8 <logic+0x4994>
  8051c4:	0005883a 	mov	r2,zero
  8051c8:	1007883a 	mov	r3,r2
  8051cc:	e0bffc17 	ldw	r2,-16(fp)
  8051d0:	10c03505 	stb	r3,212(r2)
  d->_g131 = d->_pg179;
  8051d4:	e0bffc17 	ldw	r2,-16(fp)
  8051d8:	10c06a03 	ldbu	r3,424(r2)
  8051dc:	e0bffc17 	ldw	r2,-16(fp)
  8051e0:	10c03485 	stb	r3,210(r2)
  if (d->_g131) {
  8051e4:	e0bffc17 	ldw	r2,-16(fp)
  8051e8:	10803483 	ldbu	r2,210(r2)
  8051ec:	10803fcc 	andi	r2,r2,255
  8051f0:	1080201c 	xori	r2,r2,128
  8051f4:	10bfe004 	addi	r2,r2,-128
  8051f8:	10001226 	beq	r2,zero,805244 <logic+0x4a10>
    d->_region4_null_AEI += d->deltaT;
  8051fc:	e13ffc17 	ldw	r4,-16(fp)
  805200:	20800f17 	ldw	r2,60(r4)
  805204:	20c01017 	ldw	r3,64(r4)
  805208:	e1bffc17 	ldw	r6,-16(fp)
  80520c:	31001317 	ldw	r4,76(r6)
  805210:	31401417 	ldw	r5,80(r6)
  805214:	200d883a 	mov	r6,r4
  805218:	280f883a 	mov	r7,r5
  80521c:	1009883a 	mov	r4,r2
  805220:	180b883a 	mov	r5,r3
  805224:	08079680 	call	807968 <__adddf3>
  805228:	1009883a 	mov	r4,r2
  80522c:	180b883a 	mov	r5,r3
  805230:	2005883a 	mov	r2,r4
  805234:	2807883a 	mov	r3,r5
  805238:	e13ffc17 	ldw	r4,-16(fp)
  80523c:	20800f15 	stw	r2,60(r4)
  805240:	20c01015 	stw	r3,64(r4)
  }
  d->_g119 = !d->_g131;
  805244:	e0bffc17 	ldw	r2,-16(fp)
  805248:	10803483 	ldbu	r2,210(r2)
  80524c:	10803fcc 	andi	r2,r2,255
  805250:	1080201c 	xori	r2,r2,128
  805254:	10bfe004 	addi	r2,r2,-128
  805258:	1005003a 	cmpeq	r2,r2,zero
  80525c:	1007883a 	mov	r3,r2
  805260:	e0bffc17 	ldw	r2,-16(fp)
  805264:	10c03285 	stb	r3,202(r2)
  d->_g140 = d->_pg181_e3;
  805268:	e0bffc17 	ldw	r2,-16(fp)
  80526c:	10c06a43 	ldbu	r3,425(r2)
  805270:	e0bffc17 	ldw	r2,-16(fp)
  805274:	10c03605 	stb	r3,216(r2)
  d->_cg193 = d->v;
  805278:	e0bffc17 	ldw	r2,-16(fp)
  80527c:	10c018c3 	ldbu	r3,99(r2)
  805280:	e0bffc17 	ldw	r2,-16(fp)
  805284:	10c057c5 	stb	r3,351(r2)
  d->_g155 = d->_g140 && d->_cg193;
  805288:	e0bffc17 	ldw	r2,-16(fp)
  80528c:	10803603 	ldbu	r2,216(r2)
  805290:	10803fcc 	andi	r2,r2,255
  805294:	1080201c 	xori	r2,r2,128
  805298:	10bfe004 	addi	r2,r2,-128
  80529c:	10000826 	beq	r2,zero,8052c0 <logic+0x4a8c>
  8052a0:	e0bffc17 	ldw	r2,-16(fp)
  8052a4:	108057c3 	ldbu	r2,351(r2)
  8052a8:	10803fcc 	andi	r2,r2,255
  8052ac:	1080201c 	xori	r2,r2,128
  8052b0:	10bfe004 	addi	r2,r2,-128
  8052b4:	10000226 	beq	r2,zero,8052c0 <logic+0x4a8c>
  8052b8:	00800044 	movi	r2,1
  8052bc:	00000106 	br	8052c4 <logic+0x4a90>
  8052c0:	0005883a 	mov	r2,zero
  8052c4:	1007883a 	mov	r3,r2
  8052c8:	e0bffc17 	ldw	r2,-16(fp)
  8052cc:	10c038c5 	stb	r3,227(r2)
  if (d->_g155) {
  8052d0:	e0bffc17 	ldw	r2,-16(fp)
  8052d4:	108038c3 	ldbu	r2,227(r2)
  8052d8:	10803fcc 	andi	r2,r2,255
  8052dc:	1080201c 	xori	r2,r2,128
  8052e0:	10bfe004 	addi	r2,r2,-128
  8052e4:	10000326 	beq	r2,zero,8052f4 <logic+0x4ac0>
    d->_heart2_local__Atrig16 = 1;
  8052e8:	e0bffc17 	ldw	r2,-16(fp)
  8052ec:	00c00044 	movi	r3,1
  8052f0:	10c01e45 	stb	r3,121(r2)
  }
  d->_cg189 = d->_heart2_local__Atrig16;
  8052f4:	e0bffc17 	ldw	r2,-16(fp)
  8052f8:	10c01e43 	ldbu	r3,121(r2)
  8052fc:	e0bffc17 	ldw	r2,-16(fp)
  805300:	10c05785 	stb	r3,350(r2)
  d->_g157 = d->_g131 && d->_cg189;
  805304:	e0bffc17 	ldw	r2,-16(fp)
  805308:	10803483 	ldbu	r2,210(r2)
  80530c:	10803fcc 	andi	r2,r2,255
  805310:	1080201c 	xori	r2,r2,128
  805314:	10bfe004 	addi	r2,r2,-128
  805318:	10000826 	beq	r2,zero,80533c <logic+0x4b08>
  80531c:	e0bffc17 	ldw	r2,-16(fp)
  805320:	10805783 	ldbu	r2,350(r2)
  805324:	10803fcc 	andi	r2,r2,255
  805328:	1080201c 	xori	r2,r2,128
  80532c:	10bfe004 	addi	r2,r2,-128
  805330:	10000226 	beq	r2,zero,80533c <logic+0x4b08>
  805334:	00800044 	movi	r2,1
  805338:	00000106 	br	805340 <logic+0x4b0c>
  80533c:	0005883a 	mov	r2,zero
  805340:	1007883a 	mov	r3,r2
  805344:	e0bffc17 	ldw	r2,-16(fp)
  805348:	10c03945 	stb	r3,229(r2)
  d->_g142 = !d->_g140;
  80534c:	e0bffc17 	ldw	r2,-16(fp)
  805350:	10803603 	ldbu	r2,216(r2)
  805354:	10803fcc 	andi	r2,r2,255
  805358:	1080201c 	xori	r2,r2,128
  80535c:	10bfe004 	addi	r2,r2,-128
  805360:	1005003a 	cmpeq	r2,r2,zero
  805364:	1007883a 	mov	r3,r2
  805368:	e0bffc17 	ldw	r2,-16(fp)
  80536c:	10c03685 	stb	r3,218(r2)
  d->_g146 = (d->_g119 || d->_g157) && (d->_g142 || d->_g155) && (d->_g157 || d->_g155);
  805370:	e0bffc17 	ldw	r2,-16(fp)
  805374:	10803283 	ldbu	r2,202(r2)
  805378:	10803fcc 	andi	r2,r2,255
  80537c:	1080201c 	xori	r2,r2,128
  805380:	10bfe004 	addi	r2,r2,-128
  805384:	1000061e 	bne	r2,zero,8053a0 <logic+0x4b6c>
  805388:	e0bffc17 	ldw	r2,-16(fp)
  80538c:	10803943 	ldbu	r2,229(r2)
  805390:	10803fcc 	andi	r2,r2,255
  805394:	1080201c 	xori	r2,r2,128
  805398:	10bfe004 	addi	r2,r2,-128
  80539c:	10001a26 	beq	r2,zero,805408 <logic+0x4bd4>
  8053a0:	e0bffc17 	ldw	r2,-16(fp)
  8053a4:	10803683 	ldbu	r2,218(r2)
  8053a8:	10803fcc 	andi	r2,r2,255
  8053ac:	1080201c 	xori	r2,r2,128
  8053b0:	10bfe004 	addi	r2,r2,-128
  8053b4:	1000061e 	bne	r2,zero,8053d0 <logic+0x4b9c>
  8053b8:	e0bffc17 	ldw	r2,-16(fp)
  8053bc:	108038c3 	ldbu	r2,227(r2)
  8053c0:	10803fcc 	andi	r2,r2,255
  8053c4:	1080201c 	xori	r2,r2,128
  8053c8:	10bfe004 	addi	r2,r2,-128
  8053cc:	10000e26 	beq	r2,zero,805408 <logic+0x4bd4>
  8053d0:	e0bffc17 	ldw	r2,-16(fp)
  8053d4:	10803943 	ldbu	r2,229(r2)
  8053d8:	10803fcc 	andi	r2,r2,255
  8053dc:	1080201c 	xori	r2,r2,128
  8053e0:	10bfe004 	addi	r2,r2,-128
  8053e4:	1000061e 	bne	r2,zero,805400 <logic+0x4bcc>
  8053e8:	e0bffc17 	ldw	r2,-16(fp)
  8053ec:	108038c3 	ldbu	r2,227(r2)
  8053f0:	10803fcc 	andi	r2,r2,255
  8053f4:	1080201c 	xori	r2,r2,128
  8053f8:	10bfe004 	addi	r2,r2,-128
  8053fc:	10000226 	beq	r2,zero,805408 <logic+0x4bd4>
  805400:	00800044 	movi	r2,1
  805404:	00000106 	br	80540c <logic+0x4bd8>
  805408:	0005883a 	mov	r2,zero
  80540c:	1007883a 	mov	r3,r2
  805410:	e0bffc17 	ldw	r2,-16(fp)
  805414:	10c03705 	stb	r3,220(r2)
  if (d->_g146) {
  805418:	e0bffc17 	ldw	r2,-16(fp)
  80541c:	10803703 	ldbu	r2,220(r2)
  805420:	10803fcc 	andi	r2,r2,255
  805424:	1080201c 	xori	r2,r2,128
  805428:	10bfe004 	addi	r2,r2,-128
  80542c:	10000326 	beq	r2,zero,80543c <logic+0x4c08>
    d->_region4_null_AEI = 0;
  805430:	e0bffc17 	ldw	r2,-16(fp)
  805434:	10000f15 	stw	zero,60(r2)
  805438:	10001015 	stw	zero,64(r2)
  }
  d->_g153 = d->_GO || d->_g146;
  80543c:	e0bffc17 	ldw	r2,-16(fp)
  805440:	10804543 	ldbu	r2,277(r2)
  805444:	10803fcc 	andi	r2,r2,255
  805448:	1080201c 	xori	r2,r2,128
  80544c:	10bfe004 	addi	r2,r2,-128
  805450:	1000061e 	bne	r2,zero,80546c <logic+0x4c38>
  805454:	e0bffc17 	ldw	r2,-16(fp)
  805458:	10803703 	ldbu	r2,220(r2)
  80545c:	10803fcc 	andi	r2,r2,255
  805460:	1080201c 	xori	r2,r2,128
  805464:	10bfe004 	addi	r2,r2,-128
  805468:	10000226 	beq	r2,zero,805474 <logic+0x4c40>
  80546c:	00800044 	movi	r2,1
  805470:	00000106 	br	805478 <logic+0x4c44>
  805474:	0005883a 	mov	r2,zero
  805478:	1007883a 	mov	r3,r2
  80547c:	e0bffc17 	ldw	r2,-16(fp)
  805480:	10c03845 	stb	r3,225(r2)
  if (d->_g153) {
  805484:	e0bffc17 	ldw	r2,-16(fp)
  805488:	10803843 	ldbu	r2,225(r2)
  80548c:	10803fcc 	andi	r2,r2,255
  805490:	1080201c 	xori	r2,r2,128
  805494:	10bfe004 	addi	r2,r2,-128
  805498:	10000426 	beq	r2,zero,8054ac <logic+0x4c78>
    d->_heart2_local__Atrig14 = 0;
  80549c:	e0bffc17 	ldw	r2,-16(fp)
  8054a0:	10001dc5 	stb	zero,119(r2)
    d->_heart2_local__Atrig15 = 0;
  8054a4:	e0bffc17 	ldw	r2,-16(fp)
  8054a8:	10001e05 	stb	zero,120(r2)
  }
  d->_cg162 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  8054ac:	e0bffc17 	ldw	r2,-16(fp)
  8054b0:	10801dc3 	ldbu	r2,119(r2)
  8054b4:	10803fcc 	andi	r2,r2,255
  8054b8:	1080201c 	xori	r2,r2,128
  8054bc:	10bfe004 	addi	r2,r2,-128
  8054c0:	1000061e 	bne	r2,zero,8054dc <logic+0x4ca8>
  8054c4:	e0bffc17 	ldw	r2,-16(fp)
  8054c8:	10801e03 	ldbu	r2,120(r2)
  8054cc:	10803fcc 	andi	r2,r2,255
  8054d0:	1080201c 	xori	r2,r2,128
  8054d4:	10bfe004 	addi	r2,r2,-128
  8054d8:	10000226 	beq	r2,zero,8054e4 <logic+0x4cb0>
  8054dc:	00800044 	movi	r2,1
  8054e0:	00000106 	br	8054e8 <logic+0x4cb4>
  8054e4:	0005883a 	mov	r2,zero
  8054e8:	1007883a 	mov	r3,r2
  8054ec:	e0bffc17 	ldw	r2,-16(fp)
  8054f0:	10c05485 	stb	r3,338(r2)
  d->_g143 = d->_pg195;
  8054f4:	e0bffc17 	ldw	r2,-16(fp)
  8054f8:	10c06a83 	ldbu	r3,426(r2)
  8054fc:	e0bffc17 	ldw	r2,-16(fp)
  805500:	10c036c5 	stb	r3,219(r2)
  if (d->_g143) {
  805504:	e0bffc17 	ldw	r2,-16(fp)
  805508:	108036c3 	ldbu	r2,219(r2)
  80550c:	10803fcc 	andi	r2,r2,255
  805510:	1080201c 	xori	r2,r2,128
  805514:	10bfe004 	addi	r2,r2,-128
  805518:	10001226 	beq	r2,zero,805564 <logic+0x4d30>
    d->_region4_null_AEI += d->deltaT;
  80551c:	e13ffc17 	ldw	r4,-16(fp)
  805520:	20800f17 	ldw	r2,60(r4)
  805524:	20c01017 	ldw	r3,64(r4)
  805528:	e1bffc17 	ldw	r6,-16(fp)
  80552c:	31001317 	ldw	r4,76(r6)
  805530:	31401417 	ldw	r5,80(r6)
  805534:	200d883a 	mov	r6,r4
  805538:	280f883a 	mov	r7,r5
  80553c:	1009883a 	mov	r4,r2
  805540:	180b883a 	mov	r5,r3
  805544:	08079680 	call	807968 <__adddf3>
  805548:	1009883a 	mov	r4,r2
  80554c:	180b883a 	mov	r5,r3
  805550:	2005883a 	mov	r2,r4
  805554:	2807883a 	mov	r3,r5
  805558:	e13ffc17 	ldw	r4,-16(fp)
  80555c:	20800f15 	stw	r2,60(r4)
  805560:	20c01015 	stw	r3,64(r4)
  }
  d->_g190_e1 = d->_pg173;
  805564:	e0bffc17 	ldw	r2,-16(fp)
  805568:	10c06ac3 	ldbu	r3,427(r2)
  80556c:	e0bffc17 	ldw	r2,-16(fp)
  805570:	10c061c5 	stb	r3,391(r2)
  d->_cg179 = d->_region4_null_AEI >= d->AEI_time;
  805574:	e0bffc17 	ldw	r2,-16(fp)
  805578:	14000f17 	ldw	r16,60(r2)
  80557c:	14401017 	ldw	r17,64(r2)
  805580:	e0bffc17 	ldw	r2,-16(fp)
  805584:	10800417 	ldw	r2,16(r2)
  805588:	1009883a 	mov	r4,r2
  80558c:	0808ce00 	call	808ce0 <__floatsidf>
  805590:	1009883a 	mov	r4,r2
  805594:	180b883a 	mov	r5,r3
  805598:	04800044 	movi	r18,1
  80559c:	200d883a 	mov	r6,r4
  8055a0:	280f883a 	mov	r7,r5
  8055a4:	8009883a 	mov	r4,r16
  8055a8:	880b883a 	mov	r5,r17
  8055ac:	08082140 	call	808214 <__gedf2>
  8055b0:	1000010e 	bge	r2,zero,8055b8 <logic+0x4d84>
  8055b4:	0025883a 	mov	r18,zero
  8055b8:	9007883a 	mov	r3,r18
  8055bc:	e0bffc17 	ldw	r2,-16(fp)
  8055c0:	10c056c5 	stb	r3,347(r2)
  d->_g190 = d->_g190_e1 && d->_cg179;
  8055c4:	e0bffc17 	ldw	r2,-16(fp)
  8055c8:	108061c3 	ldbu	r2,391(r2)
  8055cc:	10803fcc 	andi	r2,r2,255
  8055d0:	1080201c 	xori	r2,r2,128
  8055d4:	10bfe004 	addi	r2,r2,-128
  8055d8:	10000826 	beq	r2,zero,8055fc <logic+0x4dc8>
  8055dc:	e0bffc17 	ldw	r2,-16(fp)
  8055e0:	108056c3 	ldbu	r2,347(r2)
  8055e4:	10803fcc 	andi	r2,r2,255
  8055e8:	1080201c 	xori	r2,r2,128
  8055ec:	10bfe004 	addi	r2,r2,-128
  8055f0:	10000226 	beq	r2,zero,8055fc <logic+0x4dc8>
  8055f4:	00800044 	movi	r2,1
  8055f8:	00000106 	br	805600 <logic+0x4dcc>
  8055fc:	0005883a 	mov	r2,zero
  805600:	1007883a 	mov	r3,r2
  805604:	e0bffc17 	ldw	r2,-16(fp)
  805608:	10c03ec5 	stb	r3,251(r2)
  if (d->_g190) {
  80560c:	e0bffc17 	ldw	r2,-16(fp)
  805610:	10803ec3 	ldbu	r2,251(r2)
  805614:	10803fcc 	andi	r2,r2,255
  805618:	1080201c 	xori	r2,r2,128
  80561c:	10bfe004 	addi	r2,r2,-128
  805620:	10000326 	beq	r2,zero,805630 <logic+0x4dfc>
    d->_heart2_local__Atrig14 = 1;
  805624:	e0bffc17 	ldw	r2,-16(fp)
  805628:	00c00044 	movi	r3,1
  80562c:	10c01dc5 	stb	r3,119(r2)
  }
  d->_g194_e2 = d->_g190_e1 && !d->_cg179;
  805630:	e0bffc17 	ldw	r2,-16(fp)
  805634:	108061c3 	ldbu	r2,391(r2)
  805638:	10803fcc 	andi	r2,r2,255
  80563c:	1080201c 	xori	r2,r2,128
  805640:	10bfe004 	addi	r2,r2,-128
  805644:	10000826 	beq	r2,zero,805668 <logic+0x4e34>
  805648:	e0bffc17 	ldw	r2,-16(fp)
  80564c:	108056c3 	ldbu	r2,347(r2)
  805650:	10803fcc 	andi	r2,r2,255
  805654:	1080201c 	xori	r2,r2,128
  805658:	10bfe004 	addi	r2,r2,-128
  80565c:	1000021e 	bne	r2,zero,805668 <logic+0x4e34>
  805660:	00800044 	movi	r2,1
  805664:	00000106 	br	80566c <logic+0x4e38>
  805668:	0005883a 	mov	r2,zero
  80566c:	1007883a 	mov	r3,r2
  805670:	e0bffc17 	ldw	r2,-16(fp)
  805674:	10c06205 	stb	r3,392(r2)
  d->_cg182 = d->a;
  805678:	e0bffc17 	ldw	r2,-16(fp)
  80567c:	10c01883 	ldbu	r3,98(r2)
  805680:	e0bffc17 	ldw	r2,-16(fp)
  805684:	10c05685 	stb	r3,346(r2)
  d->_g194 = d->_g194_e2 && d->_cg182;
  805688:	e0bffc17 	ldw	r2,-16(fp)
  80568c:	10806203 	ldbu	r2,392(r2)
  805690:	10803fcc 	andi	r2,r2,255
  805694:	1080201c 	xori	r2,r2,128
  805698:	10bfe004 	addi	r2,r2,-128
  80569c:	10000826 	beq	r2,zero,8056c0 <logic+0x4e8c>
  8056a0:	e0bffc17 	ldw	r2,-16(fp)
  8056a4:	10805683 	ldbu	r2,346(r2)
  8056a8:	10803fcc 	andi	r2,r2,255
  8056ac:	1080201c 	xori	r2,r2,128
  8056b0:	10bfe004 	addi	r2,r2,-128
  8056b4:	10000226 	beq	r2,zero,8056c0 <logic+0x4e8c>
  8056b8:	00800044 	movi	r2,1
  8056bc:	00000106 	br	8056c4 <logic+0x4e90>
  8056c0:	0005883a 	mov	r2,zero
  8056c4:	1007883a 	mov	r3,r2
  8056c8:	e0bffc17 	ldw	r2,-16(fp)
  8056cc:	10c03f45 	stb	r3,253(r2)
  if (d->_g194) {
  8056d0:	e0bffc17 	ldw	r2,-16(fp)
  8056d4:	10803f43 	ldbu	r2,253(r2)
  8056d8:	10803fcc 	andi	r2,r2,255
  8056dc:	1080201c 	xori	r2,r2,128
  8056e0:	10bfe004 	addi	r2,r2,-128
  8056e4:	10000326 	beq	r2,zero,8056f4 <logic+0x4ec0>
    d->_heart2_local__Atrig15 = 1;
  8056e8:	e0bffc17 	ldw	r2,-16(fp)
  8056ec:	00c00044 	movi	r3,1
  8056f0:	10c01e05 	stb	r3,120(r2)
  }
  d->_cg164 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  8056f4:	e0bffc17 	ldw	r2,-16(fp)
  8056f8:	10801dc3 	ldbu	r2,119(r2)
  8056fc:	10803fcc 	andi	r2,r2,255
  805700:	1080201c 	xori	r2,r2,128
  805704:	10bfe004 	addi	r2,r2,-128
  805708:	1000061e 	bne	r2,zero,805724 <logic+0x4ef0>
  80570c:	e0bffc17 	ldw	r2,-16(fp)
  805710:	10801e03 	ldbu	r2,120(r2)
  805714:	10803fcc 	andi	r2,r2,255
  805718:	1080201c 	xori	r2,r2,128
  80571c:	10bfe004 	addi	r2,r2,-128
  805720:	10000226 	beq	r2,zero,80572c <logic+0x4ef8>
  805724:	00800044 	movi	r2,1
  805728:	00000106 	br	805730 <logic+0x4efc>
  80572c:	0005883a 	mov	r2,zero
  805730:	1007883a 	mov	r3,r2
  805734:	e0bffc17 	ldw	r2,-16(fp)
  805738:	10c054c5 	stb	r3,339(r2)
  d->_g195 = d->_g153 && !d->_cg162 || d->_g143 && !d->_cg164;
  80573c:	e0bffc17 	ldw	r2,-16(fp)
  805740:	10803843 	ldbu	r2,225(r2)
  805744:	10803fcc 	andi	r2,r2,255
  805748:	1080201c 	xori	r2,r2,128
  80574c:	10bfe004 	addi	r2,r2,-128
  805750:	10000626 	beq	r2,zero,80576c <logic+0x4f38>
  805754:	e0bffc17 	ldw	r2,-16(fp)
  805758:	10805483 	ldbu	r2,338(r2)
  80575c:	10803fcc 	andi	r2,r2,255
  805760:	1080201c 	xori	r2,r2,128
  805764:	10bfe004 	addi	r2,r2,-128
  805768:	10000c26 	beq	r2,zero,80579c <logic+0x4f68>
  80576c:	e0bffc17 	ldw	r2,-16(fp)
  805770:	108036c3 	ldbu	r2,219(r2)
  805774:	10803fcc 	andi	r2,r2,255
  805778:	1080201c 	xori	r2,r2,128
  80577c:	10bfe004 	addi	r2,r2,-128
  805780:	10000826 	beq	r2,zero,8057a4 <logic+0x4f70>
  805784:	e0bffc17 	ldw	r2,-16(fp)
  805788:	108054c3 	ldbu	r2,339(r2)
  80578c:	10803fcc 	andi	r2,r2,255
  805790:	1080201c 	xori	r2,r2,128
  805794:	10bfe004 	addi	r2,r2,-128
  805798:	1000021e 	bne	r2,zero,8057a4 <logic+0x4f70>
  80579c:	00800044 	movi	r2,1
  8057a0:	00000106 	br	8057a8 <logic+0x4f74>
  8057a4:	0005883a 	mov	r2,zero
  8057a8:	1007883a 	mov	r3,r2
  8057ac:	e0bffc17 	ldw	r2,-16(fp)
  8057b0:	10c03f85 	stb	r3,254(r2)
  d->_g165 = d->_g143 && d->_cg164;
  8057b4:	e0bffc17 	ldw	r2,-16(fp)
  8057b8:	108036c3 	ldbu	r2,219(r2)
  8057bc:	10803fcc 	andi	r2,r2,255
  8057c0:	1080201c 	xori	r2,r2,128
  8057c4:	10bfe004 	addi	r2,r2,-128
  8057c8:	10000826 	beq	r2,zero,8057ec <logic+0x4fb8>
  8057cc:	e0bffc17 	ldw	r2,-16(fp)
  8057d0:	108054c3 	ldbu	r2,339(r2)
  8057d4:	10803fcc 	andi	r2,r2,255
  8057d8:	1080201c 	xori	r2,r2,128
  8057dc:	10bfe004 	addi	r2,r2,-128
  8057e0:	10000226 	beq	r2,zero,8057ec <logic+0x4fb8>
  8057e4:	00800044 	movi	r2,1
  8057e8:	00000106 	br	8057f0 <logic+0x4fbc>
  8057ec:	0005883a 	mov	r2,zero
  8057f0:	1007883a 	mov	r3,r2
  8057f4:	e0bffc17 	ldw	r2,-16(fp)
  8057f8:	10c03a45 	stb	r3,233(r2)
  d->_cg166 = d->_region4_null_AEI < d->AEI_time;
  8057fc:	e0bffc17 	ldw	r2,-16(fp)
  805800:	14000f17 	ldw	r16,60(r2)
  805804:	14401017 	ldw	r17,64(r2)
  805808:	e0bffc17 	ldw	r2,-16(fp)
  80580c:	10800417 	ldw	r2,16(r2)
  805810:	1009883a 	mov	r4,r2
  805814:	0808ce00 	call	808ce0 <__floatsidf>
  805818:	1009883a 	mov	r4,r2
  80581c:	180b883a 	mov	r5,r3
  805820:	04800044 	movi	r18,1
  805824:	200d883a 	mov	r6,r4
  805828:	280f883a 	mov	r7,r5
  80582c:	8009883a 	mov	r4,r16
  805830:	880b883a 	mov	r5,r17
  805834:	08082f00 	call	8082f0 <__ledf2>
  805838:	10000116 	blt	r2,zero,805840 <logic+0x500c>
  80583c:	0025883a 	mov	r18,zero
  805840:	9007883a 	mov	r3,r18
  805844:	e0bffc17 	ldw	r2,-16(fp)
  805848:	10c05505 	stb	r3,340(r2)
  d->_g167 = d->_g153 && d->_cg166;
  80584c:	e0bffc17 	ldw	r2,-16(fp)
  805850:	10803843 	ldbu	r2,225(r2)
  805854:	10803fcc 	andi	r2,r2,255
  805858:	1080201c 	xori	r2,r2,128
  80585c:	10bfe004 	addi	r2,r2,-128
  805860:	10000826 	beq	r2,zero,805884 <logic+0x5050>
  805864:	e0bffc17 	ldw	r2,-16(fp)
  805868:	10805503 	ldbu	r2,340(r2)
  80586c:	10803fcc 	andi	r2,r2,255
  805870:	1080201c 	xori	r2,r2,128
  805874:	10bfe004 	addi	r2,r2,-128
  805878:	10000226 	beq	r2,zero,805884 <logic+0x5050>
  80587c:	00800044 	movi	r2,1
  805880:	00000106 	br	805888 <logic+0x5054>
  805884:	0005883a 	mov	r2,zero
  805888:	1007883a 	mov	r3,r2
  80588c:	e0bffc17 	ldw	r2,-16(fp)
  805890:	10c03a85 	stb	r3,234(r2)
  if (d->_g167) {
  805894:	e0bffc17 	ldw	r2,-16(fp)
  805898:	10803a83 	ldbu	r2,234(r2)
  80589c:	10803fcc 	andi	r2,r2,255
  8058a0:	1080201c 	xori	r2,r2,128
  8058a4:	10bfe004 	addi	r2,r2,-128
  8058a8:	10003426 	beq	r2,zero,80597c <logic+0x5148>
    d->sleepT = (d->sleepT < (d->AEI_time - d->_region4_null_AEI)) ? d->sleepT : (d->AEI_time - d->_region4_null_AEI);
  8058ac:	e0bffc17 	ldw	r2,-16(fp)
  8058b0:	14001517 	ldw	r16,84(r2)
  8058b4:	14401617 	ldw	r17,88(r2)
  8058b8:	e0bffc17 	ldw	r2,-16(fp)
  8058bc:	10800417 	ldw	r2,16(r2)
  8058c0:	1009883a 	mov	r4,r2
  8058c4:	0808ce00 	call	808ce0 <__floatsidf>
  8058c8:	1011883a 	mov	r8,r2
  8058cc:	1813883a 	mov	r9,r3
  8058d0:	e13ffc17 	ldw	r4,-16(fp)
  8058d4:	20800f17 	ldw	r2,60(r4)
  8058d8:	20c01017 	ldw	r3,64(r4)
  8058dc:	100d883a 	mov	r6,r2
  8058e0:	180f883a 	mov	r7,r3
  8058e4:	4009883a 	mov	r4,r8
  8058e8:	480b883a 	mov	r5,r9
  8058ec:	08083e40 	call	8083e4 <__subdf3>
  8058f0:	1009883a 	mov	r4,r2
  8058f4:	180b883a 	mov	r5,r3
  8058f8:	2005883a 	mov	r2,r4
  8058fc:	2807883a 	mov	r3,r5
  805900:	100d883a 	mov	r6,r2
  805904:	180f883a 	mov	r7,r3
  805908:	8009883a 	mov	r4,r16
  80590c:	880b883a 	mov	r5,r17
  805910:	08082f00 	call	8082f0 <__ledf2>
  805914:	1000040e 	bge	r2,zero,805928 <logic+0x50f4>
  805918:	e13ffc17 	ldw	r4,-16(fp)
  80591c:	20801517 	ldw	r2,84(r4)
  805920:	20c01617 	ldw	r3,88(r4)
  805924:	00001206 	br	805970 <logic+0x513c>
  805928:	e0bffc17 	ldw	r2,-16(fp)
  80592c:	10800417 	ldw	r2,16(r2)
  805930:	1009883a 	mov	r4,r2
  805934:	0808ce00 	call	808ce0 <__floatsidf>
  805938:	1011883a 	mov	r8,r2
  80593c:	1813883a 	mov	r9,r3
  805940:	e13ffc17 	ldw	r4,-16(fp)
  805944:	20800f17 	ldw	r2,60(r4)
  805948:	20c01017 	ldw	r3,64(r4)
  80594c:	100d883a 	mov	r6,r2
  805950:	180f883a 	mov	r7,r3
  805954:	4009883a 	mov	r4,r8
  805958:	480b883a 	mov	r5,r9
  80595c:	08083e40 	call	8083e4 <__subdf3>
  805960:	1009883a 	mov	r4,r2
  805964:	180b883a 	mov	r5,r3
  805968:	2005883a 	mov	r2,r4
  80596c:	2807883a 	mov	r3,r5
  805970:	e13ffc17 	ldw	r4,-16(fp)
  805974:	20801515 	stw	r2,84(r4)
  805978:	20c01615 	stw	r3,88(r4)
  }
  d->_cg167 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  80597c:	e0bffc17 	ldw	r2,-16(fp)
  805980:	10801dc3 	ldbu	r2,119(r2)
  805984:	10803fcc 	andi	r2,r2,255
  805988:	1080201c 	xori	r2,r2,128
  80598c:	10bfe004 	addi	r2,r2,-128
  805990:	1000061e 	bne	r2,zero,8059ac <logic+0x5178>
  805994:	e0bffc17 	ldw	r2,-16(fp)
  805998:	10801e03 	ldbu	r2,120(r2)
  80599c:	10803fcc 	andi	r2,r2,255
  8059a0:	1080201c 	xori	r2,r2,128
  8059a4:	10bfe004 	addi	r2,r2,-128
  8059a8:	10000226 	beq	r2,zero,8059b4 <logic+0x5180>
  8059ac:	00800044 	movi	r2,1
  8059b0:	00000106 	br	8059b8 <logic+0x5184>
  8059b4:	0005883a 	mov	r2,zero
  8059b8:	1007883a 	mov	r3,r2
  8059bc:	e0bffc17 	ldw	r2,-16(fp)
  8059c0:	10c05545 	stb	r3,341(r2)
  d->_g169 = d->_pg167;
  8059c4:	e0bffc17 	ldw	r2,-16(fp)
  8059c8:	10c06b03 	ldbu	r3,428(r2)
  8059cc:	e0bffc17 	ldw	r2,-16(fp)
  8059d0:	10c03ac5 	stb	r3,235(r2)
  d->_g175 = d->_pg176;
  8059d4:	e0bffc17 	ldw	r2,-16(fp)
  8059d8:	10c06b43 	ldbu	r3,429(r2)
  8059dc:	e0bffc17 	ldw	r2,-16(fp)
  8059e0:	10c03c05 	stb	r3,240(r2)
  d->_g170 = d->_g169 || d->_g175;
  8059e4:	e0bffc17 	ldw	r2,-16(fp)
  8059e8:	10803ac3 	ldbu	r2,235(r2)
  8059ec:	10803fcc 	andi	r2,r2,255
  8059f0:	1080201c 	xori	r2,r2,128
  8059f4:	10bfe004 	addi	r2,r2,-128
  8059f8:	1000061e 	bne	r2,zero,805a14 <logic+0x51e0>
  8059fc:	e0bffc17 	ldw	r2,-16(fp)
  805a00:	10803c03 	ldbu	r2,240(r2)
  805a04:	10803fcc 	andi	r2,r2,255
  805a08:	1080201c 	xori	r2,r2,128
  805a0c:	10bfe004 	addi	r2,r2,-128
  805a10:	10000226 	beq	r2,zero,805a1c <logic+0x51e8>
  805a14:	00800044 	movi	r2,1
  805a18:	00000106 	br	805a20 <logic+0x51ec>
  805a1c:	0005883a 	mov	r2,zero
  805a20:	1007883a 	mov	r3,r2
  805a24:	e0bffc17 	ldw	r2,-16(fp)
  805a28:	10c03b05 	stb	r3,236(r2)
  d->_cg170 = d->_region4_null_AEI < d->AEI_time;
  805a2c:	e0bffc17 	ldw	r2,-16(fp)
  805a30:	14000f17 	ldw	r16,60(r2)
  805a34:	14401017 	ldw	r17,64(r2)
  805a38:	e0bffc17 	ldw	r2,-16(fp)
  805a3c:	10800417 	ldw	r2,16(r2)
  805a40:	1009883a 	mov	r4,r2
  805a44:	0808ce00 	call	808ce0 <__floatsidf>
  805a48:	1009883a 	mov	r4,r2
  805a4c:	180b883a 	mov	r5,r3
  805a50:	04800044 	movi	r18,1
  805a54:	200d883a 	mov	r6,r4
  805a58:	280f883a 	mov	r7,r5
  805a5c:	8009883a 	mov	r4,r16
  805a60:	880b883a 	mov	r5,r17
  805a64:	08082f00 	call	8082f0 <__ledf2>
  805a68:	10000116 	blt	r2,zero,805a70 <logic+0x523c>
  805a6c:	0025883a 	mov	r18,zero
  805a70:	9007883a 	mov	r3,r18
  805a74:	e0bffc17 	ldw	r2,-16(fp)
  805a78:	10c055c5 	stb	r3,343(r2)
  d->_g171 = d->_g170 && d->_cg170;
  805a7c:	e0bffc17 	ldw	r2,-16(fp)
  805a80:	10803b03 	ldbu	r2,236(r2)
  805a84:	10803fcc 	andi	r2,r2,255
  805a88:	1080201c 	xori	r2,r2,128
  805a8c:	10bfe004 	addi	r2,r2,-128
  805a90:	10000826 	beq	r2,zero,805ab4 <logic+0x5280>
  805a94:	e0bffc17 	ldw	r2,-16(fp)
  805a98:	108055c3 	ldbu	r2,343(r2)
  805a9c:	10803fcc 	andi	r2,r2,255
  805aa0:	1080201c 	xori	r2,r2,128
  805aa4:	10bfe004 	addi	r2,r2,-128
  805aa8:	10000226 	beq	r2,zero,805ab4 <logic+0x5280>
  805aac:	00800044 	movi	r2,1
  805ab0:	00000106 	br	805ab8 <logic+0x5284>
  805ab4:	0005883a 	mov	r2,zero
  805ab8:	1007883a 	mov	r3,r2
  805abc:	e0bffc17 	ldw	r2,-16(fp)
  805ac0:	10c03b45 	stb	r3,237(r2)
  if (d->_g171) {
  805ac4:	e0bffc17 	ldw	r2,-16(fp)
  805ac8:	10803b43 	ldbu	r2,237(r2)
  805acc:	10803fcc 	andi	r2,r2,255
  805ad0:	1080201c 	xori	r2,r2,128
  805ad4:	10bfe004 	addi	r2,r2,-128
  805ad8:	10003426 	beq	r2,zero,805bac <logic+0x5378>
    d->sleepT = (d->sleepT < (d->AEI_time - d->_region4_null_AEI)) ? d->sleepT : (d->AEI_time - d->_region4_null_AEI);
  805adc:	e0bffc17 	ldw	r2,-16(fp)
  805ae0:	14001517 	ldw	r16,84(r2)
  805ae4:	14401617 	ldw	r17,88(r2)
  805ae8:	e0bffc17 	ldw	r2,-16(fp)
  805aec:	10800417 	ldw	r2,16(r2)
  805af0:	1009883a 	mov	r4,r2
  805af4:	0808ce00 	call	808ce0 <__floatsidf>
  805af8:	1011883a 	mov	r8,r2
  805afc:	1813883a 	mov	r9,r3
  805b00:	e13ffc17 	ldw	r4,-16(fp)
  805b04:	20800f17 	ldw	r2,60(r4)
  805b08:	20c01017 	ldw	r3,64(r4)
  805b0c:	100d883a 	mov	r6,r2
  805b10:	180f883a 	mov	r7,r3
  805b14:	4009883a 	mov	r4,r8
  805b18:	480b883a 	mov	r5,r9
  805b1c:	08083e40 	call	8083e4 <__subdf3>
  805b20:	1009883a 	mov	r4,r2
  805b24:	180b883a 	mov	r5,r3
  805b28:	2005883a 	mov	r2,r4
  805b2c:	2807883a 	mov	r3,r5
  805b30:	100d883a 	mov	r6,r2
  805b34:	180f883a 	mov	r7,r3
  805b38:	8009883a 	mov	r4,r16
  805b3c:	880b883a 	mov	r5,r17
  805b40:	08082f00 	call	8082f0 <__ledf2>
  805b44:	1000040e 	bge	r2,zero,805b58 <logic+0x5324>
  805b48:	e13ffc17 	ldw	r4,-16(fp)
  805b4c:	20801517 	ldw	r2,84(r4)
  805b50:	20c01617 	ldw	r3,88(r4)
  805b54:	00001206 	br	805ba0 <logic+0x536c>
  805b58:	e0bffc17 	ldw	r2,-16(fp)
  805b5c:	10800417 	ldw	r2,16(r2)
  805b60:	1009883a 	mov	r4,r2
  805b64:	0808ce00 	call	808ce0 <__floatsidf>
  805b68:	1011883a 	mov	r8,r2
  805b6c:	1813883a 	mov	r9,r3
  805b70:	e13ffc17 	ldw	r4,-16(fp)
  805b74:	20800f17 	ldw	r2,60(r4)
  805b78:	20c01017 	ldw	r3,64(r4)
  805b7c:	100d883a 	mov	r6,r2
  805b80:	180f883a 	mov	r7,r3
  805b84:	4009883a 	mov	r4,r8
  805b88:	480b883a 	mov	r5,r9
  805b8c:	08083e40 	call	8083e4 <__subdf3>
  805b90:	1009883a 	mov	r4,r2
  805b94:	180b883a 	mov	r5,r3
  805b98:	2005883a 	mov	r2,r4
  805b9c:	2807883a 	mov	r3,r5
  805ba0:	e13ffc17 	ldw	r4,-16(fp)
  805ba4:	20801515 	stw	r2,84(r4)
  805ba8:	20c01615 	stw	r3,88(r4)
  }
  d->_cg171 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805bac:	e0bffc17 	ldw	r2,-16(fp)
  805bb0:	10801dc3 	ldbu	r2,119(r2)
  805bb4:	10803fcc 	andi	r2,r2,255
  805bb8:	1080201c 	xori	r2,r2,128
  805bbc:	10bfe004 	addi	r2,r2,-128
  805bc0:	1000061e 	bne	r2,zero,805bdc <logic+0x53a8>
  805bc4:	e0bffc17 	ldw	r2,-16(fp)
  805bc8:	10801e03 	ldbu	r2,120(r2)
  805bcc:	10803fcc 	andi	r2,r2,255
  805bd0:	1080201c 	xori	r2,r2,128
  805bd4:	10bfe004 	addi	r2,r2,-128
  805bd8:	10000226 	beq	r2,zero,805be4 <logic+0x53b0>
  805bdc:	00800044 	movi	r2,1
  805be0:	00000106 	br	805be8 <logic+0x53b4>
  805be4:	0005883a 	mov	r2,zero
  805be8:	1007883a 	mov	r3,r2
  805bec:	e0bffc17 	ldw	r2,-16(fp)
  805bf0:	10c05585 	stb	r3,342(r2)
  d->_g167 = d->_g167 && !d->_cg167 || d->_g171 && !d->_cg171;
  805bf4:	e0bffc17 	ldw	r2,-16(fp)
  805bf8:	10803a83 	ldbu	r2,234(r2)
  805bfc:	10803fcc 	andi	r2,r2,255
  805c00:	1080201c 	xori	r2,r2,128
  805c04:	10bfe004 	addi	r2,r2,-128
  805c08:	10000626 	beq	r2,zero,805c24 <logic+0x53f0>
  805c0c:	e0bffc17 	ldw	r2,-16(fp)
  805c10:	10805543 	ldbu	r2,341(r2)
  805c14:	10803fcc 	andi	r2,r2,255
  805c18:	1080201c 	xori	r2,r2,128
  805c1c:	10bfe004 	addi	r2,r2,-128
  805c20:	10000c26 	beq	r2,zero,805c54 <logic+0x5420>
  805c24:	e0bffc17 	ldw	r2,-16(fp)
  805c28:	10803b43 	ldbu	r2,237(r2)
  805c2c:	10803fcc 	andi	r2,r2,255
  805c30:	1080201c 	xori	r2,r2,128
  805c34:	10bfe004 	addi	r2,r2,-128
  805c38:	10000826 	beq	r2,zero,805c5c <logic+0x5428>
  805c3c:	e0bffc17 	ldw	r2,-16(fp)
  805c40:	10805583 	ldbu	r2,342(r2)
  805c44:	10803fcc 	andi	r2,r2,255
  805c48:	1080201c 	xori	r2,r2,128
  805c4c:	10bfe004 	addi	r2,r2,-128
  805c50:	1000021e 	bne	r2,zero,805c5c <logic+0x5428>
  805c54:	00800044 	movi	r2,1
  805c58:	00000106 	br	805c60 <logic+0x542c>
  805c5c:	0005883a 	mov	r2,zero
  805c60:	1007883a 	mov	r3,r2
  805c64:	e0bffc17 	ldw	r2,-16(fp)
  805c68:	10c03a85 	stb	r3,234(r2)
  d->_g170 = d->_g170 && !d->_cg170;
  805c6c:	e0bffc17 	ldw	r2,-16(fp)
  805c70:	10803b03 	ldbu	r2,236(r2)
  805c74:	10803fcc 	andi	r2,r2,255
  805c78:	1080201c 	xori	r2,r2,128
  805c7c:	10bfe004 	addi	r2,r2,-128
  805c80:	10000826 	beq	r2,zero,805ca4 <logic+0x5470>
  805c84:	e0bffc17 	ldw	r2,-16(fp)
  805c88:	108055c3 	ldbu	r2,343(r2)
  805c8c:	10803fcc 	andi	r2,r2,255
  805c90:	1080201c 	xori	r2,r2,128
  805c94:	10bfe004 	addi	r2,r2,-128
  805c98:	1000021e 	bne	r2,zero,805ca4 <logic+0x5470>
  805c9c:	00800044 	movi	r2,1
  805ca0:	00000106 	br	805ca8 <logic+0x5474>
  805ca4:	0005883a 	mov	r2,zero
  805ca8:	1007883a 	mov	r3,r2
  805cac:	e0bffc17 	ldw	r2,-16(fp)
  805cb0:	10c03b05 	stb	r3,236(r2)
  d->_cg173 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805cb4:	e0bffc17 	ldw	r2,-16(fp)
  805cb8:	10801dc3 	ldbu	r2,119(r2)
  805cbc:	10803fcc 	andi	r2,r2,255
  805cc0:	1080201c 	xori	r2,r2,128
  805cc4:	10bfe004 	addi	r2,r2,-128
  805cc8:	1000061e 	bne	r2,zero,805ce4 <logic+0x54b0>
  805ccc:	e0bffc17 	ldw	r2,-16(fp)
  805cd0:	10801e03 	ldbu	r2,120(r2)
  805cd4:	10803fcc 	andi	r2,r2,255
  805cd8:	1080201c 	xori	r2,r2,128
  805cdc:	10bfe004 	addi	r2,r2,-128
  805ce0:	10000226 	beq	r2,zero,805cec <logic+0x54b8>
  805ce4:	00800044 	movi	r2,1
  805ce8:	00000106 	br	805cf0 <logic+0x54bc>
  805cec:	0005883a 	mov	r2,zero
  805cf0:	1007883a 	mov	r3,r2
  805cf4:	e0bffc17 	ldw	r2,-16(fp)
  805cf8:	10c05605 	stb	r3,344(r2)
  d->_g171 = d->_g171 && d->_cg171 || d->_g170 && d->_cg173;
  805cfc:	e0bffc17 	ldw	r2,-16(fp)
  805d00:	10803b43 	ldbu	r2,237(r2)
  805d04:	10803fcc 	andi	r2,r2,255
  805d08:	1080201c 	xori	r2,r2,128
  805d0c:	10bfe004 	addi	r2,r2,-128
  805d10:	10000626 	beq	r2,zero,805d2c <logic+0x54f8>
  805d14:	e0bffc17 	ldw	r2,-16(fp)
  805d18:	10805583 	ldbu	r2,342(r2)
  805d1c:	10803fcc 	andi	r2,r2,255
  805d20:	1080201c 	xori	r2,r2,128
  805d24:	10bfe004 	addi	r2,r2,-128
  805d28:	10000c1e 	bne	r2,zero,805d5c <logic+0x5528>
  805d2c:	e0bffc17 	ldw	r2,-16(fp)
  805d30:	10803b03 	ldbu	r2,236(r2)
  805d34:	10803fcc 	andi	r2,r2,255
  805d38:	1080201c 	xori	r2,r2,128
  805d3c:	10bfe004 	addi	r2,r2,-128
  805d40:	10000826 	beq	r2,zero,805d64 <logic+0x5530>
  805d44:	e0bffc17 	ldw	r2,-16(fp)
  805d48:	10805603 	ldbu	r2,344(r2)
  805d4c:	10803fcc 	andi	r2,r2,255
  805d50:	1080201c 	xori	r2,r2,128
  805d54:	10bfe004 	addi	r2,r2,-128
  805d58:	10000226 	beq	r2,zero,805d64 <logic+0x5530>
  805d5c:	00800044 	movi	r2,1
  805d60:	00000106 	br	805d68 <logic+0x5534>
  805d64:	0005883a 	mov	r2,zero
  805d68:	1007883a 	mov	r3,r2
  805d6c:	e0bffc17 	ldw	r2,-16(fp)
  805d70:	10c03b45 	stb	r3,237(r2)
  d->_g176 = d->_g153 && !d->_cg166;
  805d74:	e0bffc17 	ldw	r2,-16(fp)
  805d78:	10803843 	ldbu	r2,225(r2)
  805d7c:	10803fcc 	andi	r2,r2,255
  805d80:	1080201c 	xori	r2,r2,128
  805d84:	10bfe004 	addi	r2,r2,-128
  805d88:	10000826 	beq	r2,zero,805dac <logic+0x5578>
  805d8c:	e0bffc17 	ldw	r2,-16(fp)
  805d90:	10805503 	ldbu	r2,340(r2)
  805d94:	10803fcc 	andi	r2,r2,255
  805d98:	1080201c 	xori	r2,r2,128
  805d9c:	10bfe004 	addi	r2,r2,-128
  805da0:	1000021e 	bne	r2,zero,805dac <logic+0x5578>
  805da4:	00800044 	movi	r2,1
  805da8:	00000106 	br	805db0 <logic+0x557c>
  805dac:	0005883a 	mov	r2,zero
  805db0:	1007883a 	mov	r3,r2
  805db4:	e0bffc17 	ldw	r2,-16(fp)
  805db8:	10c03c45 	stb	r3,241(r2)
  d->_cg176 = d->_heart2_local__Atrig14 || d->_heart2_local__Atrig15;
  805dbc:	e0bffc17 	ldw	r2,-16(fp)
  805dc0:	10801dc3 	ldbu	r2,119(r2)
  805dc4:	10803fcc 	andi	r2,r2,255
  805dc8:	1080201c 	xori	r2,r2,128
  805dcc:	10bfe004 	addi	r2,r2,-128
  805dd0:	1000061e 	bne	r2,zero,805dec <logic+0x55b8>
  805dd4:	e0bffc17 	ldw	r2,-16(fp)
  805dd8:	10801e03 	ldbu	r2,120(r2)
  805ddc:	10803fcc 	andi	r2,r2,255
  805de0:	1080201c 	xori	r2,r2,128
  805de4:	10bfe004 	addi	r2,r2,-128
  805de8:	10000226 	beq	r2,zero,805df4 <logic+0x55c0>
  805dec:	00800044 	movi	r2,1
  805df0:	00000106 	br	805df8 <logic+0x55c4>
  805df4:	0005883a 	mov	r2,zero
  805df8:	1007883a 	mov	r3,r2
  805dfc:	e0bffc17 	ldw	r2,-16(fp)
  805e00:	10c05645 	stb	r3,345(r2)
  d->_g176 = d->_g170 && !d->_cg173 || d->_g176 && !d->_cg176;
  805e04:	e0bffc17 	ldw	r2,-16(fp)
  805e08:	10803b03 	ldbu	r2,236(r2)
  805e0c:	10803fcc 	andi	r2,r2,255
  805e10:	1080201c 	xori	r2,r2,128
  805e14:	10bfe004 	addi	r2,r2,-128
  805e18:	10000626 	beq	r2,zero,805e34 <logic+0x5600>
  805e1c:	e0bffc17 	ldw	r2,-16(fp)
  805e20:	10805603 	ldbu	r2,344(r2)
  805e24:	10803fcc 	andi	r2,r2,255
  805e28:	1080201c 	xori	r2,r2,128
  805e2c:	10bfe004 	addi	r2,r2,-128
  805e30:	10000c26 	beq	r2,zero,805e64 <logic+0x5630>
  805e34:	e0bffc17 	ldw	r2,-16(fp)
  805e38:	10803c43 	ldbu	r2,241(r2)
  805e3c:	10803fcc 	andi	r2,r2,255
  805e40:	1080201c 	xori	r2,r2,128
  805e44:	10bfe004 	addi	r2,r2,-128
  805e48:	10000826 	beq	r2,zero,805e6c <logic+0x5638>
  805e4c:	e0bffc17 	ldw	r2,-16(fp)
  805e50:	10805643 	ldbu	r2,345(r2)
  805e54:	10803fcc 	andi	r2,r2,255
  805e58:	1080201c 	xori	r2,r2,128
  805e5c:	10bfe004 	addi	r2,r2,-128
  805e60:	1000021e 	bne	r2,zero,805e6c <logic+0x5638>
  805e64:	00800044 	movi	r2,1
  805e68:	00000106 	br	805e70 <logic+0x563c>
  805e6c:	0005883a 	mov	r2,zero
  805e70:	1007883a 	mov	r3,r2
  805e74:	e0bffc17 	ldw	r2,-16(fp)
  805e78:	10c03c45 	stb	r3,241(r2)
  d->_g173 = d->_g153 || d->_g194_e2 && !d->_cg182;
  805e7c:	e0bffc17 	ldw	r2,-16(fp)
  805e80:	10803843 	ldbu	r2,225(r2)
  805e84:	10803fcc 	andi	r2,r2,255
  805e88:	1080201c 	xori	r2,r2,128
  805e8c:	10bfe004 	addi	r2,r2,-128
  805e90:	10000c1e 	bne	r2,zero,805ec4 <logic+0x5690>
  805e94:	e0bffc17 	ldw	r2,-16(fp)
  805e98:	10806203 	ldbu	r2,392(r2)
  805e9c:	10803fcc 	andi	r2,r2,255
  805ea0:	1080201c 	xori	r2,r2,128
  805ea4:	10bfe004 	addi	r2,r2,-128
  805ea8:	10000826 	beq	r2,zero,805ecc <logic+0x5698>
  805eac:	e0bffc17 	ldw	r2,-16(fp)
  805eb0:	10805683 	ldbu	r2,346(r2)
  805eb4:	10803fcc 	andi	r2,r2,255
  805eb8:	1080201c 	xori	r2,r2,128
  805ebc:	10bfe004 	addi	r2,r2,-128
  805ec0:	1000021e 	bne	r2,zero,805ecc <logic+0x5698>
  805ec4:	00800044 	movi	r2,1
  805ec8:	00000106 	br	805ed0 <logic+0x569c>
  805ecc:	0005883a 	mov	r2,zero
  805ed0:	1007883a 	mov	r3,r2
  805ed4:	e0bffc17 	ldw	r2,-16(fp)
  805ed8:	10c03bc5 	stb	r3,239(r2)
  d->_g182 = d->_g190 || d->_g194;
  805edc:	e0bffc17 	ldw	r2,-16(fp)
  805ee0:	10803ec3 	ldbu	r2,251(r2)
  805ee4:	10803fcc 	andi	r2,r2,255
  805ee8:	1080201c 	xori	r2,r2,128
  805eec:	10bfe004 	addi	r2,r2,-128
  805ef0:	1000061e 	bne	r2,zero,805f0c <logic+0x56d8>
  805ef4:	e0bffc17 	ldw	r2,-16(fp)
  805ef8:	10803f43 	ldbu	r2,253(r2)
  805efc:	10803fcc 	andi	r2,r2,255
  805f00:	1080201c 	xori	r2,r2,128
  805f04:	10bfe004 	addi	r2,r2,-128
  805f08:	10000226 	beq	r2,zero,805f14 <logic+0x56e0>
  805f0c:	00800044 	movi	r2,1
  805f10:	00000106 	br	805f18 <logic+0x56e4>
  805f14:	0005883a 	mov	r2,zero
  805f18:	1007883a 	mov	r3,r2
  805f1c:	e0bffc17 	ldw	r2,-16(fp)
  805f20:	10c03d45 	stb	r3,245(r2)
  d->_g161 = !d->_g143;
  805f24:	e0bffc17 	ldw	r2,-16(fp)
  805f28:	108036c3 	ldbu	r2,219(r2)
  805f2c:	10803fcc 	andi	r2,r2,255
  805f30:	1080201c 	xori	r2,r2,128
  805f34:	10bfe004 	addi	r2,r2,-128
  805f38:	1005003a 	cmpeq	r2,r2,zero
  805f3c:	1007883a 	mov	r3,r2
  805f40:	e0bffc17 	ldw	r2,-16(fp)
  805f44:	10c039c5 	stb	r3,231(r2)
  d->_g183 = !(d->_g175 || d->_g169);
  805f48:	e0bffc17 	ldw	r2,-16(fp)
  805f4c:	10803c03 	ldbu	r2,240(r2)
  805f50:	10803fcc 	andi	r2,r2,255
  805f54:	1080201c 	xori	r2,r2,128
  805f58:	10bfe004 	addi	r2,r2,-128
  805f5c:	1000081e 	bne	r2,zero,805f80 <logic+0x574c>
  805f60:	e0bffc17 	ldw	r2,-16(fp)
  805f64:	10803ac3 	ldbu	r2,235(r2)
  805f68:	10803fcc 	andi	r2,r2,255
  805f6c:	1080201c 	xori	r2,r2,128
  805f70:	10bfe004 	addi	r2,r2,-128
  805f74:	1000021e 	bne	r2,zero,805f80 <logic+0x574c>
  805f78:	00800044 	movi	r2,1
  805f7c:	00000106 	br	805f84 <logic+0x5750>
  805f80:	0005883a 	mov	r2,zero
  805f84:	1007883a 	mov	r3,r2
  805f88:	e0bffc17 	ldw	r2,-16(fp)
  805f8c:	10c03d85 	stb	r3,246(r2)
  d->_g180 = !d->_g190_e1;
  805f90:	e0bffc17 	ldw	r2,-16(fp)
  805f94:	108061c3 	ldbu	r2,391(r2)
  805f98:	10803fcc 	andi	r2,r2,255
  805f9c:	1080201c 	xori	r2,r2,128
  805fa0:	10bfe004 	addi	r2,r2,-128
  805fa4:	1005003a 	cmpeq	r2,r2,zero
  805fa8:	1007883a 	mov	r3,r2
  805fac:	e0bffc17 	ldw	r2,-16(fp)
  805fb0:	10c03cc5 	stb	r3,243(r2)
  d->_g164 = (d->_g161 || d->_g165) && (d->_g183 || d->_g171) && (d->_g180 || d->_g182) && (d->_g165 || d->_g171 || d->_g182);
  805fb4:	e0bffc17 	ldw	r2,-16(fp)
  805fb8:	108039c3 	ldbu	r2,231(r2)
  805fbc:	10803fcc 	andi	r2,r2,255
  805fc0:	1080201c 	xori	r2,r2,128
  805fc4:	10bfe004 	addi	r2,r2,-128
  805fc8:	1000061e 	bne	r2,zero,805fe4 <logic+0x57b0>
  805fcc:	e0bffc17 	ldw	r2,-16(fp)
  805fd0:	10803a43 	ldbu	r2,233(r2)
  805fd4:	10803fcc 	andi	r2,r2,255
  805fd8:	1080201c 	xori	r2,r2,128
  805fdc:	10bfe004 	addi	r2,r2,-128
  805fe0:	10002c26 	beq	r2,zero,806094 <logic+0x5860>
  805fe4:	e0bffc17 	ldw	r2,-16(fp)
  805fe8:	10803d83 	ldbu	r2,246(r2)
  805fec:	10803fcc 	andi	r2,r2,255
  805ff0:	1080201c 	xori	r2,r2,128
  805ff4:	10bfe004 	addi	r2,r2,-128
  805ff8:	1000061e 	bne	r2,zero,806014 <logic+0x57e0>
  805ffc:	e0bffc17 	ldw	r2,-16(fp)
  806000:	10803b43 	ldbu	r2,237(r2)
  806004:	10803fcc 	andi	r2,r2,255
  806008:	1080201c 	xori	r2,r2,128
  80600c:	10bfe004 	addi	r2,r2,-128
  806010:	10002026 	beq	r2,zero,806094 <logic+0x5860>
  806014:	e0bffc17 	ldw	r2,-16(fp)
  806018:	10803cc3 	ldbu	r2,243(r2)
  80601c:	10803fcc 	andi	r2,r2,255
  806020:	1080201c 	xori	r2,r2,128
  806024:	10bfe004 	addi	r2,r2,-128
  806028:	1000061e 	bne	r2,zero,806044 <logic+0x5810>
  80602c:	e0bffc17 	ldw	r2,-16(fp)
  806030:	10803d43 	ldbu	r2,245(r2)
  806034:	10803fcc 	andi	r2,r2,255
  806038:	1080201c 	xori	r2,r2,128
  80603c:	10bfe004 	addi	r2,r2,-128
  806040:	10001426 	beq	r2,zero,806094 <logic+0x5860>
  806044:	e0bffc17 	ldw	r2,-16(fp)
  806048:	10803a43 	ldbu	r2,233(r2)
  80604c:	10803fcc 	andi	r2,r2,255
  806050:	1080201c 	xori	r2,r2,128
  806054:	10bfe004 	addi	r2,r2,-128
  806058:	10000c1e 	bne	r2,zero,80608c <logic+0x5858>
  80605c:	e0bffc17 	ldw	r2,-16(fp)
  806060:	10803b43 	ldbu	r2,237(r2)
  806064:	10803fcc 	andi	r2,r2,255
  806068:	1080201c 	xori	r2,r2,128
  80606c:	10bfe004 	addi	r2,r2,-128
  806070:	1000061e 	bne	r2,zero,80608c <logic+0x5858>
  806074:	e0bffc17 	ldw	r2,-16(fp)
  806078:	10803d43 	ldbu	r2,245(r2)
  80607c:	10803fcc 	andi	r2,r2,255
  806080:	1080201c 	xori	r2,r2,128
  806084:	10bfe004 	addi	r2,r2,-128
  806088:	10000226 	beq	r2,zero,806094 <logic+0x5860>
  80608c:	00800044 	movi	r2,1
  806090:	00000106 	br	806098 <logic+0x5864>
  806094:	0005883a 	mov	r2,zero
  806098:	1007883a 	mov	r3,r2
  80609c:	e0bffc17 	ldw	r2,-16(fp)
  8060a0:	10c03a05 	stb	r3,232(r2)
  d->_cg184 = d->_heart2_local__Atrig14;
  8060a4:	e0bffc17 	ldw	r2,-16(fp)
  8060a8:	10c01dc3 	ldbu	r3,119(r2)
  8060ac:	e0bffc17 	ldw	r2,-16(fp)
  8060b0:	10c05705 	stb	r3,348(r2)
  d->_g175 = d->_g164 && d->_cg184;
  8060b4:	e0bffc17 	ldw	r2,-16(fp)
  8060b8:	10803a03 	ldbu	r2,232(r2)
  8060bc:	10803fcc 	andi	r2,r2,255
  8060c0:	1080201c 	xori	r2,r2,128
  8060c4:	10bfe004 	addi	r2,r2,-128
  8060c8:	10000826 	beq	r2,zero,8060ec <logic+0x58b8>
  8060cc:	e0bffc17 	ldw	r2,-16(fp)
  8060d0:	10805703 	ldbu	r2,348(r2)
  8060d4:	10803fcc 	andi	r2,r2,255
  8060d8:	1080201c 	xori	r2,r2,128
  8060dc:	10bfe004 	addi	r2,r2,-128
  8060e0:	10000226 	beq	r2,zero,8060ec <logic+0x58b8>
  8060e4:	00800044 	movi	r2,1
  8060e8:	00000106 	br	8060f0 <logic+0x58bc>
  8060ec:	0005883a 	mov	r2,zero
  8060f0:	1007883a 	mov	r3,r2
  8060f4:	e0bffc17 	ldw	r2,-16(fp)
  8060f8:	10c03c05 	stb	r3,240(r2)
  if (d->_g175) {
  8060fc:	e0bffc17 	ldw	r2,-16(fp)
  806100:	10803c03 	ldbu	r2,240(r2)
  806104:	10803fcc 	andi	r2,r2,255
  806108:	1080201c 	xori	r2,r2,128
  80610c:	10bfe004 	addi	r2,r2,-128
  806110:	10000c26 	beq	r2,zero,806144 <logic+0x5910>
    d->AP |= 1;
  806114:	e0bffc17 	ldw	r2,-16(fp)
  806118:	10801783 	ldbu	r2,94(r2)
  80611c:	10800054 	ori	r2,r2,1
  806120:	1007883a 	mov	r3,r2
  806124:	e0bffc17 	ldw	r2,-16(fp)
  806128:	10c01785 	stb	r3,94(r2)
    d->a |= 1;
  80612c:	e0bffc17 	ldw	r2,-16(fp)
  806130:	10801883 	ldbu	r2,98(r2)
  806134:	10800054 	ori	r2,r2,1
  806138:	1007883a 	mov	r3,r2
  80613c:	e0bffc17 	ldw	r2,-16(fp)
  806140:	10c01885 	stb	r3,98(r2)
  }
  d->_g169 = d->_g175 || d->_g164 && !d->_cg184;
  806144:	e0bffc17 	ldw	r2,-16(fp)
  806148:	10803c03 	ldbu	r2,240(r2)
  80614c:	10803fcc 	andi	r2,r2,255
  806150:	1080201c 	xori	r2,r2,128
  806154:	10bfe004 	addi	r2,r2,-128
  806158:	10000c1e 	bne	r2,zero,80618c <logic+0x5958>
  80615c:	e0bffc17 	ldw	r2,-16(fp)
  806160:	10803a03 	ldbu	r2,232(r2)
  806164:	10803fcc 	andi	r2,r2,255
  806168:	1080201c 	xori	r2,r2,128
  80616c:	10bfe004 	addi	r2,r2,-128
  806170:	10000826 	beq	r2,zero,806194 <logic+0x5960>
  806174:	e0bffc17 	ldw	r2,-16(fp)
  806178:	10805703 	ldbu	r2,348(r2)
  80617c:	10803fcc 	andi	r2,r2,255
  806180:	1080201c 	xori	r2,r2,128
  806184:	10bfe004 	addi	r2,r2,-128
  806188:	1000021e 	bne	r2,zero,806194 <logic+0x5960>
  80618c:	00800044 	movi	r2,1
  806190:	00000106 	br	806198 <logic+0x5964>
  806194:	0005883a 	mov	r2,zero
  806198:	1007883a 	mov	r3,r2
  80619c:	e0bffc17 	ldw	r2,-16(fp)
  8061a0:	10c03ac5 	stb	r3,235(r2)
  if (d->_g169) {
  8061a4:	e0bffc17 	ldw	r2,-16(fp)
  8061a8:	10803ac3 	ldbu	r2,235(r2)
  8061ac:	10803fcc 	andi	r2,r2,255
  8061b0:	1080201c 	xori	r2,r2,128
  8061b4:	10bfe004 	addi	r2,r2,-128
  8061b8:	10000226 	beq	r2,zero,8061c4 <logic+0x5990>
    d->_heart2_local__Atrig16 = 0;
  8061bc:	e0bffc17 	ldw	r2,-16(fp)
  8061c0:	10001e45 	stb	zero,121(r2)
  }
  d->_cg187 = d->_heart2_local__Atrig16;
  8061c4:	e0bffc17 	ldw	r2,-16(fp)
  8061c8:	10c01e43 	ldbu	r3,121(r2)
  8061cc:	e0bffc17 	ldw	r2,-16(fp)
  8061d0:	10c05745 	stb	r3,349(r2)
  d->_g179 = d->_g169 && !d->_cg187 || d->_g131 && !d->_cg189;
  8061d4:	e0bffc17 	ldw	r2,-16(fp)
  8061d8:	10803ac3 	ldbu	r2,235(r2)
  8061dc:	10803fcc 	andi	r2,r2,255
  8061e0:	1080201c 	xori	r2,r2,128
  8061e4:	10bfe004 	addi	r2,r2,-128
  8061e8:	10000626 	beq	r2,zero,806204 <logic+0x59d0>
  8061ec:	e0bffc17 	ldw	r2,-16(fp)
  8061f0:	10805743 	ldbu	r2,349(r2)
  8061f4:	10803fcc 	andi	r2,r2,255
  8061f8:	1080201c 	xori	r2,r2,128
  8061fc:	10bfe004 	addi	r2,r2,-128
  806200:	10000c26 	beq	r2,zero,806234 <logic+0x5a00>
  806204:	e0bffc17 	ldw	r2,-16(fp)
  806208:	10803483 	ldbu	r2,210(r2)
  80620c:	10803fcc 	andi	r2,r2,255
  806210:	1080201c 	xori	r2,r2,128
  806214:	10bfe004 	addi	r2,r2,-128
  806218:	10000826 	beq	r2,zero,80623c <logic+0x5a08>
  80621c:	e0bffc17 	ldw	r2,-16(fp)
  806220:	10805783 	ldbu	r2,350(r2)
  806224:	10803fcc 	andi	r2,r2,255
  806228:	1080201c 	xori	r2,r2,128
  80622c:	10bfe004 	addi	r2,r2,-128
  806230:	1000021e 	bne	r2,zero,80623c <logic+0x5a08>
  806234:	00800044 	movi	r2,1
  806238:	00000106 	br	806240 <logic+0x5a0c>
  80623c:	0005883a 	mov	r2,zero
  806240:	1007883a 	mov	r3,r2
  806244:	e0bffc17 	ldw	r2,-16(fp)
  806248:	10c03c85 	stb	r3,242(r2)
  d->_g181_e3 = d->_g169 || d->_g140 && !d->_cg193;
  80624c:	e0bffc17 	ldw	r2,-16(fp)
  806250:	10803ac3 	ldbu	r2,235(r2)
  806254:	10803fcc 	andi	r2,r2,255
  806258:	1080201c 	xori	r2,r2,128
  80625c:	10bfe004 	addi	r2,r2,-128
  806260:	10000c1e 	bne	r2,zero,806294 <logic+0x5a60>
  806264:	e0bffc17 	ldw	r2,-16(fp)
  806268:	10803603 	ldbu	r2,216(r2)
  80626c:	10803fcc 	andi	r2,r2,255
  806270:	1080201c 	xori	r2,r2,128
  806274:	10bfe004 	addi	r2,r2,-128
  806278:	10000826 	beq	r2,zero,80629c <logic+0x5a68>
  80627c:	e0bffc17 	ldw	r2,-16(fp)
  806280:	108057c3 	ldbu	r2,351(r2)
  806284:	10803fcc 	andi	r2,r2,255
  806288:	1080201c 	xori	r2,r2,128
  80628c:	10bfe004 	addi	r2,r2,-128
  806290:	1000021e 	bne	r2,zero,80629c <logic+0x5a68>
  806294:	00800044 	movi	r2,1
  806298:	00000106 	br	8062a0 <logic+0x5a6c>
  80629c:	0005883a 	mov	r2,zero
  8062a0:	1007883a 	mov	r3,r2
  8062a4:	e0bffc17 	ldw	r2,-16(fp)
  8062a8:	10c06185 	stb	r3,390(r2)
  d->_g181 = d->_pg206;
  8062ac:	e0bffc17 	ldw	r2,-16(fp)
  8062b0:	10c06b83 	ldbu	r3,430(r2)
  8062b4:	e0bffc17 	ldw	r2,-16(fp)
  8062b8:	10c03d05 	stb	r3,244(r2)
  if (d->_g181) {
  8062bc:	e0bffc17 	ldw	r2,-16(fp)
  8062c0:	10803d03 	ldbu	r2,244(r2)
  8062c4:	10803fcc 	andi	r2,r2,255
  8062c8:	1080201c 	xori	r2,r2,128
  8062cc:	10bfe004 	addi	r2,r2,-128
  8062d0:	10001226 	beq	r2,zero,80631c <logic+0x5ae8>
    d->_region5_null_AVI += d->deltaT;
  8062d4:	e13ffc17 	ldw	r4,-16(fp)
  8062d8:	20801117 	ldw	r2,68(r4)
  8062dc:	20c01217 	ldw	r3,72(r4)
  8062e0:	e1bffc17 	ldw	r6,-16(fp)
  8062e4:	31001317 	ldw	r4,76(r6)
  8062e8:	31401417 	ldw	r5,80(r6)
  8062ec:	200d883a 	mov	r6,r4
  8062f0:	280f883a 	mov	r7,r5
  8062f4:	1009883a 	mov	r4,r2
  8062f8:	180b883a 	mov	r5,r3
  8062fc:	08079680 	call	807968 <__adddf3>
  806300:	1009883a 	mov	r4,r2
  806304:	180b883a 	mov	r5,r3
  806308:	2005883a 	mov	r2,r4
  80630c:	2807883a 	mov	r3,r5
  806310:	e13ffc17 	ldw	r4,-16(fp)
  806314:	20801115 	stw	r2,68(r4)
  806318:	20c01215 	stw	r3,72(r4)
  }
  d->_g165 = !d->_g181;
  80631c:	e0bffc17 	ldw	r2,-16(fp)
  806320:	10803d03 	ldbu	r2,244(r2)
  806324:	10803fcc 	andi	r2,r2,255
  806328:	1080201c 	xori	r2,r2,128
  80632c:	10bfe004 	addi	r2,r2,-128
  806330:	1005003a 	cmpeq	r2,r2,zero
  806334:	1007883a 	mov	r3,r2
  806338:	e0bffc17 	ldw	r2,-16(fp)
  80633c:	10c03a45 	stb	r3,233(r2)
  d->_g165_e1 = d->_pg213;
  806340:	e0bffc17 	ldw	r2,-16(fp)
  806344:	10c06bc3 	ldbu	r3,431(r2)
  806348:	e0bffc17 	ldw	r2,-16(fp)
  80634c:	10c06105 	stb	r3,388(r2)
  d->_cg225 = d->v;
  806350:	e0bffc17 	ldw	r2,-16(fp)
  806354:	10c018c3 	ldbu	r3,99(r2)
  806358:	e0bffc17 	ldw	r2,-16(fp)
  80635c:	10c05b45 	stb	r3,365(r2)
  d->_g172 = d->_g165_e1 && d->_cg225;
  806360:	e0bffc17 	ldw	r2,-16(fp)
  806364:	10806103 	ldbu	r2,388(r2)
  806368:	10803fcc 	andi	r2,r2,255
  80636c:	1080201c 	xori	r2,r2,128
  806370:	10bfe004 	addi	r2,r2,-128
  806374:	10000826 	beq	r2,zero,806398 <logic+0x5b64>
  806378:	e0bffc17 	ldw	r2,-16(fp)
  80637c:	10805b43 	ldbu	r2,365(r2)
  806380:	10803fcc 	andi	r2,r2,255
  806384:	1080201c 	xori	r2,r2,128
  806388:	10bfe004 	addi	r2,r2,-128
  80638c:	10000226 	beq	r2,zero,806398 <logic+0x5b64>
  806390:	00800044 	movi	r2,1
  806394:	00000106 	br	80639c <logic+0x5b68>
  806398:	0005883a 	mov	r2,zero
  80639c:	1007883a 	mov	r3,r2
  8063a0:	e0bffc17 	ldw	r2,-16(fp)
  8063a4:	10c03b85 	stb	r3,238(r2)
  if (d->_g172) {
  8063a8:	e0bffc17 	ldw	r2,-16(fp)
  8063ac:	10803b83 	ldbu	r2,238(r2)
  8063b0:	10803fcc 	andi	r2,r2,255
  8063b4:	1080201c 	xori	r2,r2,128
  8063b8:	10bfe004 	addi	r2,r2,-128
  8063bc:	10000326 	beq	r2,zero,8063cc <logic+0x5b98>
    d->_heart2_local__Atrig18 = 1;
  8063c0:	e0bffc17 	ldw	r2,-16(fp)
  8063c4:	00c00044 	movi	r3,1
  8063c8:	10c01ec5 	stb	r3,123(r2)
  }
  d->_g172_e2 = d->_g165_e1 && !d->_cg225;
  8063cc:	e0bffc17 	ldw	r2,-16(fp)
  8063d0:	10806103 	ldbu	r2,388(r2)
  8063d4:	10803fcc 	andi	r2,r2,255
  8063d8:	1080201c 	xori	r2,r2,128
  8063dc:	10bfe004 	addi	r2,r2,-128
  8063e0:	10000826 	beq	r2,zero,806404 <logic+0x5bd0>
  8063e4:	e0bffc17 	ldw	r2,-16(fp)
  8063e8:	10805b43 	ldbu	r2,365(r2)
  8063ec:	10803fcc 	andi	r2,r2,255
  8063f0:	1080201c 	xori	r2,r2,128
  8063f4:	10bfe004 	addi	r2,r2,-128
  8063f8:	1000021e 	bne	r2,zero,806404 <logic+0x5bd0>
  8063fc:	00800044 	movi	r2,1
  806400:	00000106 	br	806408 <logic+0x5bd4>
  806404:	0005883a 	mov	r2,zero
  806408:	1007883a 	mov	r3,r2
  80640c:	e0bffc17 	ldw	r2,-16(fp)
  806410:	10c06145 	stb	r3,389(r2)
  d->_cg228 = d->ready && d->_region5_null_AVI >= d->AVI_time;
  806414:	e0bffc17 	ldw	r2,-16(fp)
  806418:	10800603 	ldbu	r2,24(r2)
  80641c:	10803fcc 	andi	r2,r2,255
  806420:	1080201c 	xori	r2,r2,128
  806424:	10bfe004 	addi	r2,r2,-128
  806428:	10001126 	beq	r2,zero,806470 <logic+0x5c3c>
  80642c:	e0bffc17 	ldw	r2,-16(fp)
  806430:	14001117 	ldw	r16,68(r2)
  806434:	14401217 	ldw	r17,72(r2)
  806438:	e0bffc17 	ldw	r2,-16(fp)
  80643c:	10800517 	ldw	r2,20(r2)
  806440:	1009883a 	mov	r4,r2
  806444:	0808ce00 	call	808ce0 <__floatsidf>
  806448:	1009883a 	mov	r4,r2
  80644c:	180b883a 	mov	r5,r3
  806450:	200d883a 	mov	r6,r4
  806454:	280f883a 	mov	r7,r5
  806458:	8009883a 	mov	r4,r16
  80645c:	880b883a 	mov	r5,r17
  806460:	08082140 	call	808214 <__gedf2>
  806464:	10000216 	blt	r2,zero,806470 <logic+0x5c3c>
  806468:	00800044 	movi	r2,1
  80646c:	00000106 	br	806474 <logic+0x5c40>
  806470:	0005883a 	mov	r2,zero
  806474:	1007883a 	mov	r3,r2
  806478:	e0bffc17 	ldw	r2,-16(fp)
  80647c:	10c05b05 	stb	r3,364(r2)
  d->_g185 = d->_g172_e2 && d->_cg228;
  806480:	e0bffc17 	ldw	r2,-16(fp)
  806484:	10806143 	ldbu	r2,389(r2)
  806488:	10803fcc 	andi	r2,r2,255
  80648c:	1080201c 	xori	r2,r2,128
  806490:	10bfe004 	addi	r2,r2,-128
  806494:	10000826 	beq	r2,zero,8064b8 <logic+0x5c84>
  806498:	e0bffc17 	ldw	r2,-16(fp)
  80649c:	10805b03 	ldbu	r2,364(r2)
  8064a0:	10803fcc 	andi	r2,r2,255
  8064a4:	1080201c 	xori	r2,r2,128
  8064a8:	10bfe004 	addi	r2,r2,-128
  8064ac:	10000226 	beq	r2,zero,8064b8 <logic+0x5c84>
  8064b0:	00800044 	movi	r2,1
  8064b4:	00000106 	br	8064bc <logic+0x5c88>
  8064b8:	0005883a 	mov	r2,zero
  8064bc:	1007883a 	mov	r3,r2
  8064c0:	e0bffc17 	ldw	r2,-16(fp)
  8064c4:	10c03e05 	stb	r3,248(r2)
  if (d->_g185) {
  8064c8:	e0bffc17 	ldw	r2,-16(fp)
  8064cc:	10803e03 	ldbu	r2,248(r2)
  8064d0:	10803fcc 	andi	r2,r2,255
  8064d4:	1080201c 	xori	r2,r2,128
  8064d8:	10bfe004 	addi	r2,r2,-128
  8064dc:	10000326 	beq	r2,zero,8064ec <logic+0x5cb8>
    d->_heart2_local__Atrig19 = 1;
  8064e0:	e0bffc17 	ldw	r2,-16(fp)
  8064e4:	00c00044 	movi	r3,1
  8064e8:	10c01f05 	stb	r3,124(r2)
  }
  d->_cg210 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  8064ec:	e0bffc17 	ldw	r2,-16(fp)
  8064f0:	10801ec3 	ldbu	r2,123(r2)
  8064f4:	10803fcc 	andi	r2,r2,255
  8064f8:	1080201c 	xori	r2,r2,128
  8064fc:	10bfe004 	addi	r2,r2,-128
  806500:	1000061e 	bne	r2,zero,80651c <logic+0x5ce8>
  806504:	e0bffc17 	ldw	r2,-16(fp)
  806508:	10801f03 	ldbu	r2,124(r2)
  80650c:	10803fcc 	andi	r2,r2,255
  806510:	1080201c 	xori	r2,r2,128
  806514:	10bfe004 	addi	r2,r2,-128
  806518:	10000226 	beq	r2,zero,806524 <logic+0x5cf0>
  80651c:	00800044 	movi	r2,1
  806520:	00000106 	br	806528 <logic+0x5cf4>
  806524:	0005883a 	mov	r2,zero
  806528:	1007883a 	mov	r3,r2
  80652c:	e0bffc17 	ldw	r2,-16(fp)
  806530:	10c05945 	stb	r3,357(r2)
  d->_g184 = d->_g181 && d->_cg210;
  806534:	e0bffc17 	ldw	r2,-16(fp)
  806538:	10803d03 	ldbu	r2,244(r2)
  80653c:	10803fcc 	andi	r2,r2,255
  806540:	1080201c 	xori	r2,r2,128
  806544:	10bfe004 	addi	r2,r2,-128
  806548:	10000826 	beq	r2,zero,80656c <logic+0x5d38>
  80654c:	e0bffc17 	ldw	r2,-16(fp)
  806550:	10805943 	ldbu	r2,357(r2)
  806554:	10803fcc 	andi	r2,r2,255
  806558:	1080201c 	xori	r2,r2,128
  80655c:	10bfe004 	addi	r2,r2,-128
  806560:	10000226 	beq	r2,zero,80656c <logic+0x5d38>
  806564:	00800044 	movi	r2,1
  806568:	00000106 	br	806570 <logic+0x5d3c>
  80656c:	0005883a 	mov	r2,zero
  806570:	1007883a 	mov	r3,r2
  806574:	e0bffc17 	ldw	r2,-16(fp)
  806578:	10c03dc5 	stb	r3,247(r2)
  d->_g189 = d->_pg210;
  80657c:	e0bffc17 	ldw	r2,-16(fp)
  806580:	10c06c03 	ldbu	r3,432(r2)
  806584:	e0bffc17 	ldw	r2,-16(fp)
  806588:	10c03e85 	stb	r3,250(r2)
  d->_g193 = d->_pg202;
  80658c:	e0bffc17 	ldw	r2,-16(fp)
  806590:	10c06c43 	ldbu	r3,433(r2)
  806594:	e0bffc17 	ldw	r2,-16(fp)
  806598:	10c03f05 	stb	r3,252(r2)
  d->_g186 = !(d->_g189 || d->_g193);
  80659c:	e0bffc17 	ldw	r2,-16(fp)
  8065a0:	10803e83 	ldbu	r2,250(r2)
  8065a4:	10803fcc 	andi	r2,r2,255
  8065a8:	1080201c 	xori	r2,r2,128
  8065ac:	10bfe004 	addi	r2,r2,-128
  8065b0:	1000081e 	bne	r2,zero,8065d4 <logic+0x5da0>
  8065b4:	e0bffc17 	ldw	r2,-16(fp)
  8065b8:	10803f03 	ldbu	r2,252(r2)
  8065bc:	10803fcc 	andi	r2,r2,255
  8065c0:	1080201c 	xori	r2,r2,128
  8065c4:	10bfe004 	addi	r2,r2,-128
  8065c8:	1000021e 	bne	r2,zero,8065d4 <logic+0x5da0>
  8065cc:	00800044 	movi	r2,1
  8065d0:	00000106 	br	8065d8 <logic+0x5da4>
  8065d4:	0005883a 	mov	r2,zero
  8065d8:	1007883a 	mov	r3,r2
  8065dc:	e0bffc17 	ldw	r2,-16(fp)
  8065e0:	10c03e45 	stb	r3,249(r2)
  d->_g215 = d->_g193 || d->_g189;
  8065e4:	e0bffc17 	ldw	r2,-16(fp)
  8065e8:	10803f03 	ldbu	r2,252(r2)
  8065ec:	10803fcc 	andi	r2,r2,255
  8065f0:	1080201c 	xori	r2,r2,128
  8065f4:	10bfe004 	addi	r2,r2,-128
  8065f8:	1000061e 	bne	r2,zero,806614 <logic+0x5de0>
  8065fc:	e0bffc17 	ldw	r2,-16(fp)
  806600:	10803e83 	ldbu	r2,250(r2)
  806604:	10803fcc 	andi	r2,r2,255
  806608:	1080201c 	xori	r2,r2,128
  80660c:	10bfe004 	addi	r2,r2,-128
  806610:	10000226 	beq	r2,zero,80661c <logic+0x5de8>
  806614:	00800044 	movi	r2,1
  806618:	00000106 	br	806620 <logic+0x5dec>
  80661c:	0005883a 	mov	r2,zero
  806620:	1007883a 	mov	r3,r2
  806624:	e0bffc17 	ldw	r2,-16(fp)
  806628:	10c041c5 	stb	r3,263(r2)
  d->_cg216 = d->_region5_null_AVI < d->AVI_time;
  80662c:	e0bffc17 	ldw	r2,-16(fp)
  806630:	14001117 	ldw	r16,68(r2)
  806634:	14401217 	ldw	r17,72(r2)
  806638:	e0bffc17 	ldw	r2,-16(fp)
  80663c:	10800517 	ldw	r2,20(r2)
  806640:	1009883a 	mov	r4,r2
  806644:	0808ce00 	call	808ce0 <__floatsidf>
  806648:	1009883a 	mov	r4,r2
  80664c:	180b883a 	mov	r5,r3
  806650:	04800044 	movi	r18,1
  806654:	200d883a 	mov	r6,r4
  806658:	280f883a 	mov	r7,r5
  80665c:	8009883a 	mov	r4,r16
  806660:	880b883a 	mov	r5,r17
  806664:	08082f00 	call	8082f0 <__ledf2>
  806668:	10000116 	blt	r2,zero,806670 <logic+0x5e3c>
  80666c:	0025883a 	mov	r18,zero
  806670:	9007883a 	mov	r3,r18
  806674:	e0bffc17 	ldw	r2,-16(fp)
  806678:	10c05a45 	stb	r3,361(r2)
  d->_g221 = d->_g215 && d->_cg216;
  80667c:	e0bffc17 	ldw	r2,-16(fp)
  806680:	108041c3 	ldbu	r2,263(r2)
  806684:	10803fcc 	andi	r2,r2,255
  806688:	1080201c 	xori	r2,r2,128
  80668c:	10bfe004 	addi	r2,r2,-128
  806690:	10000826 	beq	r2,zero,8066b4 <logic+0x5e80>
  806694:	e0bffc17 	ldw	r2,-16(fp)
  806698:	10805a43 	ldbu	r2,361(r2)
  80669c:	10803fcc 	andi	r2,r2,255
  8066a0:	1080201c 	xori	r2,r2,128
  8066a4:	10bfe004 	addi	r2,r2,-128
  8066a8:	10000226 	beq	r2,zero,8066b4 <logic+0x5e80>
  8066ac:	00800044 	movi	r2,1
  8066b0:	00000106 	br	8066b8 <logic+0x5e84>
  8066b4:	0005883a 	mov	r2,zero
  8066b8:	1007883a 	mov	r3,r2
  8066bc:	e0bffc17 	ldw	r2,-16(fp)
  8066c0:	10c042c5 	stb	r3,267(r2)
  if (d->_g221) {
  8066c4:	e0bffc17 	ldw	r2,-16(fp)
  8066c8:	108042c3 	ldbu	r2,267(r2)
  8066cc:	10803fcc 	andi	r2,r2,255
  8066d0:	1080201c 	xori	r2,r2,128
  8066d4:	10bfe004 	addi	r2,r2,-128
  8066d8:	10003426 	beq	r2,zero,8067ac <logic+0x5f78>
    d->sleepT = (d->sleepT < (d->AVI_time - d->_region5_null_AVI)) ? d->sleepT : (d->AVI_time - d->_region5_null_AVI);
  8066dc:	e0bffc17 	ldw	r2,-16(fp)
  8066e0:	14001517 	ldw	r16,84(r2)
  8066e4:	14401617 	ldw	r17,88(r2)
  8066e8:	e0bffc17 	ldw	r2,-16(fp)
  8066ec:	10800517 	ldw	r2,20(r2)
  8066f0:	1009883a 	mov	r4,r2
  8066f4:	0808ce00 	call	808ce0 <__floatsidf>
  8066f8:	1011883a 	mov	r8,r2
  8066fc:	1813883a 	mov	r9,r3
  806700:	e13ffc17 	ldw	r4,-16(fp)
  806704:	20801117 	ldw	r2,68(r4)
  806708:	20c01217 	ldw	r3,72(r4)
  80670c:	100d883a 	mov	r6,r2
  806710:	180f883a 	mov	r7,r3
  806714:	4009883a 	mov	r4,r8
  806718:	480b883a 	mov	r5,r9
  80671c:	08083e40 	call	8083e4 <__subdf3>
  806720:	1009883a 	mov	r4,r2
  806724:	180b883a 	mov	r5,r3
  806728:	2005883a 	mov	r2,r4
  80672c:	2807883a 	mov	r3,r5
  806730:	100d883a 	mov	r6,r2
  806734:	180f883a 	mov	r7,r3
  806738:	8009883a 	mov	r4,r16
  80673c:	880b883a 	mov	r5,r17
  806740:	08082f00 	call	8082f0 <__ledf2>
  806744:	1000040e 	bge	r2,zero,806758 <logic+0x5f24>
  806748:	e13ffc17 	ldw	r4,-16(fp)
  80674c:	20801517 	ldw	r2,84(r4)
  806750:	20c01617 	ldw	r3,88(r4)
  806754:	00001206 	br	8067a0 <logic+0x5f6c>
  806758:	e0bffc17 	ldw	r2,-16(fp)
  80675c:	10800517 	ldw	r2,20(r2)
  806760:	1009883a 	mov	r4,r2
  806764:	0808ce00 	call	808ce0 <__floatsidf>
  806768:	1011883a 	mov	r8,r2
  80676c:	1813883a 	mov	r9,r3
  806770:	e13ffc17 	ldw	r4,-16(fp)
  806774:	20801117 	ldw	r2,68(r4)
  806778:	20c01217 	ldw	r3,72(r4)
  80677c:	100d883a 	mov	r6,r2
  806780:	180f883a 	mov	r7,r3
  806784:	4009883a 	mov	r4,r8
  806788:	480b883a 	mov	r5,r9
  80678c:	08083e40 	call	8083e4 <__subdf3>
  806790:	1009883a 	mov	r4,r2
  806794:	180b883a 	mov	r5,r3
  806798:	2005883a 	mov	r2,r4
  80679c:	2807883a 	mov	r3,r5
  8067a0:	e13ffc17 	ldw	r4,-16(fp)
  8067a4:	20801515 	stw	r2,84(r4)
  8067a8:	20c01615 	stw	r3,88(r4)
  }
  d->_cg217 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  8067ac:	e0bffc17 	ldw	r2,-16(fp)
  8067b0:	10801ec3 	ldbu	r2,123(r2)
  8067b4:	10803fcc 	andi	r2,r2,255
  8067b8:	1080201c 	xori	r2,r2,128
  8067bc:	10bfe004 	addi	r2,r2,-128
  8067c0:	1000061e 	bne	r2,zero,8067dc <logic+0x5fa8>
  8067c4:	e0bffc17 	ldw	r2,-16(fp)
  8067c8:	10801f03 	ldbu	r2,124(r2)
  8067cc:	10803fcc 	andi	r2,r2,255
  8067d0:	1080201c 	xori	r2,r2,128
  8067d4:	10bfe004 	addi	r2,r2,-128
  8067d8:	10000226 	beq	r2,zero,8067e4 <logic+0x5fb0>
  8067dc:	00800044 	movi	r2,1
  8067e0:	00000106 	br	8067e8 <logic+0x5fb4>
  8067e4:	0005883a 	mov	r2,zero
  8067e8:	1007883a 	mov	r3,r2
  8067ec:	e0bffc17 	ldw	r2,-16(fp)
  8067f0:	10c05a05 	stb	r3,360(r2)
  d->_g216 = d->_g215 && !d->_cg216;
  8067f4:	e0bffc17 	ldw	r2,-16(fp)
  8067f8:	108041c3 	ldbu	r2,263(r2)
  8067fc:	10803fcc 	andi	r2,r2,255
  806800:	1080201c 	xori	r2,r2,128
  806804:	10bfe004 	addi	r2,r2,-128
  806808:	10000826 	beq	r2,zero,80682c <logic+0x5ff8>
  80680c:	e0bffc17 	ldw	r2,-16(fp)
  806810:	10805a43 	ldbu	r2,361(r2)
  806814:	10803fcc 	andi	r2,r2,255
  806818:	1080201c 	xori	r2,r2,128
  80681c:	10bfe004 	addi	r2,r2,-128
  806820:	1000021e 	bne	r2,zero,80682c <logic+0x5ff8>
  806824:	00800044 	movi	r2,1
  806828:	00000106 	br	806830 <logic+0x5ffc>
  80682c:	0005883a 	mov	r2,zero
  806830:	1007883a 	mov	r3,r2
  806834:	e0bffc17 	ldw	r2,-16(fp)
  806838:	10c04205 	stb	r3,264(r2)
  d->_cg219 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  80683c:	e0bffc17 	ldw	r2,-16(fp)
  806840:	10801ec3 	ldbu	r2,123(r2)
  806844:	10803fcc 	andi	r2,r2,255
  806848:	1080201c 	xori	r2,r2,128
  80684c:	10bfe004 	addi	r2,r2,-128
  806850:	1000061e 	bne	r2,zero,80686c <logic+0x6038>
  806854:	e0bffc17 	ldw	r2,-16(fp)
  806858:	10801f03 	ldbu	r2,124(r2)
  80685c:	10803fcc 	andi	r2,r2,255
  806860:	1080201c 	xori	r2,r2,128
  806864:	10bfe004 	addi	r2,r2,-128
  806868:	10000226 	beq	r2,zero,806874 <logic+0x6040>
  80686c:	00800044 	movi	r2,1
  806870:	00000106 	br	806878 <logic+0x6044>
  806874:	0005883a 	mov	r2,zero
  806878:	1007883a 	mov	r3,r2
  80687c:	e0bffc17 	ldw	r2,-16(fp)
  806880:	10c05a85 	stb	r3,362(r2)
  d->_g218 = d->_g221 && d->_cg217 || d->_g216 && d->_cg219;
  806884:	e0bffc17 	ldw	r2,-16(fp)
  806888:	108042c3 	ldbu	r2,267(r2)
  80688c:	10803fcc 	andi	r2,r2,255
  806890:	1080201c 	xori	r2,r2,128
  806894:	10bfe004 	addi	r2,r2,-128
  806898:	10000626 	beq	r2,zero,8068b4 <logic+0x6080>
  80689c:	e0bffc17 	ldw	r2,-16(fp)
  8068a0:	10805a03 	ldbu	r2,360(r2)
  8068a4:	10803fcc 	andi	r2,r2,255
  8068a8:	1080201c 	xori	r2,r2,128
  8068ac:	10bfe004 	addi	r2,r2,-128
  8068b0:	10000c1e 	bne	r2,zero,8068e4 <logic+0x60b0>
  8068b4:	e0bffc17 	ldw	r2,-16(fp)
  8068b8:	10804203 	ldbu	r2,264(r2)
  8068bc:	10803fcc 	andi	r2,r2,255
  8068c0:	1080201c 	xori	r2,r2,128
  8068c4:	10bfe004 	addi	r2,r2,-128
  8068c8:	10000826 	beq	r2,zero,8068ec <logic+0x60b8>
  8068cc:	e0bffc17 	ldw	r2,-16(fp)
  8068d0:	10805a83 	ldbu	r2,362(r2)
  8068d4:	10803fcc 	andi	r2,r2,255
  8068d8:	1080201c 	xori	r2,r2,128
  8068dc:	10bfe004 	addi	r2,r2,-128
  8068e0:	10000226 	beq	r2,zero,8068ec <logic+0x60b8>
  8068e4:	00800044 	movi	r2,1
  8068e8:	00000106 	br	8068f0 <logic+0x60bc>
  8068ec:	0005883a 	mov	r2,zero
  8068f0:	1007883a 	mov	r3,r2
  8068f4:	e0bffc17 	ldw	r2,-16(fp)
  8068f8:	10c04285 	stb	r3,266(r2)
  d->_g225 = !d->_g165_e1;
  8068fc:	e0bffc17 	ldw	r2,-16(fp)
  806900:	10806103 	ldbu	r2,388(r2)
  806904:	10803fcc 	andi	r2,r2,255
  806908:	1080201c 	xori	r2,r2,128
  80690c:	10bfe004 	addi	r2,r2,-128
  806910:	1005003a 	cmpeq	r2,r2,zero
  806914:	1007883a 	mov	r3,r2
  806918:	e0bffc17 	ldw	r2,-16(fp)
  80691c:	10c04305 	stb	r3,268(r2)
  d->_g226 = d->_g172 || d->_g185;
  806920:	e0bffc17 	ldw	r2,-16(fp)
  806924:	10803b83 	ldbu	r2,238(r2)
  806928:	10803fcc 	andi	r2,r2,255
  80692c:	1080201c 	xori	r2,r2,128
  806930:	10bfe004 	addi	r2,r2,-128
  806934:	1000061e 	bne	r2,zero,806950 <logic+0x611c>
  806938:	e0bffc17 	ldw	r2,-16(fp)
  80693c:	10803e03 	ldbu	r2,248(r2)
  806940:	10803fcc 	andi	r2,r2,255
  806944:	1080201c 	xori	r2,r2,128
  806948:	10bfe004 	addi	r2,r2,-128
  80694c:	10000226 	beq	r2,zero,806958 <logic+0x6124>
  806950:	00800044 	movi	r2,1
  806954:	00000106 	br	80695c <logic+0x6128>
  806958:	0005883a 	mov	r2,zero
  80695c:	1007883a 	mov	r3,r2
  806960:	e0bffc17 	ldw	r2,-16(fp)
  806964:	10c04345 	stb	r3,269(r2)
  d->_g229 = (d->_g165 || d->_g184) && (d->_g186 || d->_g218) && (d->_g225 || d->_g226) && (d->_g184 || d->_g218 || d->_g226);
  806968:	e0bffc17 	ldw	r2,-16(fp)
  80696c:	10803a43 	ldbu	r2,233(r2)
  806970:	10803fcc 	andi	r2,r2,255
  806974:	1080201c 	xori	r2,r2,128
  806978:	10bfe004 	addi	r2,r2,-128
  80697c:	1000061e 	bne	r2,zero,806998 <logic+0x6164>
  806980:	e0bffc17 	ldw	r2,-16(fp)
  806984:	10803dc3 	ldbu	r2,247(r2)
  806988:	10803fcc 	andi	r2,r2,255
  80698c:	1080201c 	xori	r2,r2,128
  806990:	10bfe004 	addi	r2,r2,-128
  806994:	10002c26 	beq	r2,zero,806a48 <logic+0x6214>
  806998:	e0bffc17 	ldw	r2,-16(fp)
  80699c:	10803e43 	ldbu	r2,249(r2)
  8069a0:	10803fcc 	andi	r2,r2,255
  8069a4:	1080201c 	xori	r2,r2,128
  8069a8:	10bfe004 	addi	r2,r2,-128
  8069ac:	1000061e 	bne	r2,zero,8069c8 <logic+0x6194>
  8069b0:	e0bffc17 	ldw	r2,-16(fp)
  8069b4:	10804283 	ldbu	r2,266(r2)
  8069b8:	10803fcc 	andi	r2,r2,255
  8069bc:	1080201c 	xori	r2,r2,128
  8069c0:	10bfe004 	addi	r2,r2,-128
  8069c4:	10002026 	beq	r2,zero,806a48 <logic+0x6214>
  8069c8:	e0bffc17 	ldw	r2,-16(fp)
  8069cc:	10804303 	ldbu	r2,268(r2)
  8069d0:	10803fcc 	andi	r2,r2,255
  8069d4:	1080201c 	xori	r2,r2,128
  8069d8:	10bfe004 	addi	r2,r2,-128
  8069dc:	1000061e 	bne	r2,zero,8069f8 <logic+0x61c4>
  8069e0:	e0bffc17 	ldw	r2,-16(fp)
  8069e4:	10804343 	ldbu	r2,269(r2)
  8069e8:	10803fcc 	andi	r2,r2,255
  8069ec:	1080201c 	xori	r2,r2,128
  8069f0:	10bfe004 	addi	r2,r2,-128
  8069f4:	10001426 	beq	r2,zero,806a48 <logic+0x6214>
  8069f8:	e0bffc17 	ldw	r2,-16(fp)
  8069fc:	10803dc3 	ldbu	r2,247(r2)
  806a00:	10803fcc 	andi	r2,r2,255
  806a04:	1080201c 	xori	r2,r2,128
  806a08:	10bfe004 	addi	r2,r2,-128
  806a0c:	10000c1e 	bne	r2,zero,806a40 <logic+0x620c>
  806a10:	e0bffc17 	ldw	r2,-16(fp)
  806a14:	10804283 	ldbu	r2,266(r2)
  806a18:	10803fcc 	andi	r2,r2,255
  806a1c:	1080201c 	xori	r2,r2,128
  806a20:	10bfe004 	addi	r2,r2,-128
  806a24:	1000061e 	bne	r2,zero,806a40 <logic+0x620c>
  806a28:	e0bffc17 	ldw	r2,-16(fp)
  806a2c:	10804343 	ldbu	r2,269(r2)
  806a30:	10803fcc 	andi	r2,r2,255
  806a34:	1080201c 	xori	r2,r2,128
  806a38:	10bfe004 	addi	r2,r2,-128
  806a3c:	10000226 	beq	r2,zero,806a48 <logic+0x6214>
  806a40:	00800044 	movi	r2,1
  806a44:	00000106 	br	806a4c <logic+0x6218>
  806a48:	0005883a 	mov	r2,zero
  806a4c:	1007883a 	mov	r3,r2
  806a50:	e0bffc17 	ldw	r2,-16(fp)
  806a54:	10c043c5 	stb	r3,271(r2)
  d->_cg230 = d->_heart2_local__Atrig18;
  806a58:	e0bffc17 	ldw	r2,-16(fp)
  806a5c:	10c01ec3 	ldbu	r3,123(r2)
  806a60:	e0bffc17 	ldw	r2,-16(fp)
  806a64:	10c05805 	stb	r3,352(r2)
  d->_g227_e3 = d->_g229 && !d->_cg230;
  806a68:	e0bffc17 	ldw	r2,-16(fp)
  806a6c:	108043c3 	ldbu	r2,271(r2)
  806a70:	10803fcc 	andi	r2,r2,255
  806a74:	1080201c 	xori	r2,r2,128
  806a78:	10bfe004 	addi	r2,r2,-128
  806a7c:	10000826 	beq	r2,zero,806aa0 <logic+0x626c>
  806a80:	e0bffc17 	ldw	r2,-16(fp)
  806a84:	10805803 	ldbu	r2,352(r2)
  806a88:	10803fcc 	andi	r2,r2,255
  806a8c:	1080201c 	xori	r2,r2,128
  806a90:	10bfe004 	addi	r2,r2,-128
  806a94:	1000021e 	bne	r2,zero,806aa0 <logic+0x626c>
  806a98:	00800044 	movi	r2,1
  806a9c:	00000106 	br	806aa4 <logic+0x6270>
  806aa0:	0005883a 	mov	r2,zero
  806aa4:	1007883a 	mov	r3,r2
  806aa8:	e0bffc17 	ldw	r2,-16(fp)
  806aac:	10c06345 	stb	r3,397(r2)
  if (d->_g227_e3) {
  806ab0:	e0bffc17 	ldw	r2,-16(fp)
  806ab4:	10806343 	ldbu	r2,397(r2)
  806ab8:	10803fcc 	andi	r2,r2,255
  806abc:	1080201c 	xori	r2,r2,128
  806ac0:	10bfe004 	addi	r2,r2,-128
  806ac4:	10000626 	beq	r2,zero,806ae0 <logic+0x62ac>
    d->VP |= 1;
  806ac8:	e0bffc17 	ldw	r2,-16(fp)
  806acc:	108017c3 	ldbu	r2,95(r2)
  806ad0:	10800054 	ori	r2,r2,1
  806ad4:	1007883a 	mov	r3,r2
  806ad8:	e0bffc17 	ldw	r2,-16(fp)
  806adc:	10c017c5 	stb	r3,95(r2)
  }
  d->_g211 = d->_GO || d->_g229 && d->_cg230 || d->_g227_e3;
  806ae0:	e0bffc17 	ldw	r2,-16(fp)
  806ae4:	10804543 	ldbu	r2,277(r2)
  806ae8:	10803fcc 	andi	r2,r2,255
  806aec:	1080201c 	xori	r2,r2,128
  806af0:	10bfe004 	addi	r2,r2,-128
  806af4:	1000121e 	bne	r2,zero,806b40 <logic+0x630c>
  806af8:	e0bffc17 	ldw	r2,-16(fp)
  806afc:	108043c3 	ldbu	r2,271(r2)
  806b00:	10803fcc 	andi	r2,r2,255
  806b04:	1080201c 	xori	r2,r2,128
  806b08:	10bfe004 	addi	r2,r2,-128
  806b0c:	10000626 	beq	r2,zero,806b28 <logic+0x62f4>
  806b10:	e0bffc17 	ldw	r2,-16(fp)
  806b14:	10805803 	ldbu	r2,352(r2)
  806b18:	10803fcc 	andi	r2,r2,255
  806b1c:	1080201c 	xori	r2,r2,128
  806b20:	10bfe004 	addi	r2,r2,-128
  806b24:	1000061e 	bne	r2,zero,806b40 <logic+0x630c>
  806b28:	e0bffc17 	ldw	r2,-16(fp)
  806b2c:	10806343 	ldbu	r2,397(r2)
  806b30:	10803fcc 	andi	r2,r2,255
  806b34:	1080201c 	xori	r2,r2,128
  806b38:	10bfe004 	addi	r2,r2,-128
  806b3c:	10000226 	beq	r2,zero,806b48 <logic+0x6314>
  806b40:	00800044 	movi	r2,1
  806b44:	00000106 	br	806b4c <logic+0x6318>
  806b48:	0005883a 	mov	r2,zero
  806b4c:	1007883a 	mov	r3,r2
  806b50:	e0bffc17 	ldw	r2,-16(fp)
  806b54:	10c04145 	stb	r3,261(r2)
  if (d->_g211) {
  806b58:	e0bffc17 	ldw	r2,-16(fp)
  806b5c:	10804143 	ldbu	r2,261(r2)
  806b60:	10803fcc 	andi	r2,r2,255
  806b64:	1080201c 	xori	r2,r2,128
  806b68:	10bfe004 	addi	r2,r2,-128
  806b6c:	10000226 	beq	r2,zero,806b78 <logic+0x6344>
    d->_heart2_local__Atrig17 = 0;
  806b70:	e0bffc17 	ldw	r2,-16(fp)
  806b74:	10001e85 	stb	zero,122(r2)
  }
  d->_cg199 = d->_heart2_local__Atrig17;
  806b78:	e0bffc17 	ldw	r2,-16(fp)
  806b7c:	10c01e83 	ldbu	r3,122(r2)
  806b80:	e0bffc17 	ldw	r2,-16(fp)
  806b84:	10c05845 	stb	r3,353(r2)
  d->_g218_e2 = d->_pg231;
  806b88:	e0bffc17 	ldw	r2,-16(fp)
  806b8c:	10c06c83 	ldbu	r3,434(r2)
  806b90:	e0bffc17 	ldw	r2,-16(fp)
  806b94:	10c06305 	stb	r3,396(r2)
  d->_cg205 = d->a;
  806b98:	e0bffc17 	ldw	r2,-16(fp)
  806b9c:	10c01883 	ldbu	r3,98(r2)
  806ba0:	e0bffc17 	ldw	r2,-16(fp)
  806ba4:	10c058c5 	stb	r3,355(r2)
  d->_g218 = d->_g218_e2 && d->_cg205;
  806ba8:	e0bffc17 	ldw	r2,-16(fp)
  806bac:	10806303 	ldbu	r2,396(r2)
  806bb0:	10803fcc 	andi	r2,r2,255
  806bb4:	1080201c 	xori	r2,r2,128
  806bb8:	10bfe004 	addi	r2,r2,-128
  806bbc:	10000826 	beq	r2,zero,806be0 <logic+0x63ac>
  806bc0:	e0bffc17 	ldw	r2,-16(fp)
  806bc4:	108058c3 	ldbu	r2,355(r2)
  806bc8:	10803fcc 	andi	r2,r2,255
  806bcc:	1080201c 	xori	r2,r2,128
  806bd0:	10bfe004 	addi	r2,r2,-128
  806bd4:	10000226 	beq	r2,zero,806be0 <logic+0x63ac>
  806bd8:	00800044 	movi	r2,1
  806bdc:	00000106 	br	806be4 <logic+0x63b0>
  806be0:	0005883a 	mov	r2,zero
  806be4:	1007883a 	mov	r3,r2
  806be8:	e0bffc17 	ldw	r2,-16(fp)
  806bec:	10c04285 	stb	r3,266(r2)
  if (d->_g218) {
  806bf0:	e0bffc17 	ldw	r2,-16(fp)
  806bf4:	10804283 	ldbu	r2,266(r2)
  806bf8:	10803fcc 	andi	r2,r2,255
  806bfc:	1080201c 	xori	r2,r2,128
  806c00:	10bfe004 	addi	r2,r2,-128
  806c04:	10000326 	beq	r2,zero,806c14 <logic+0x63e0>
    d->_heart2_local__Atrig17 = 1;
  806c08:	e0bffc17 	ldw	r2,-16(fp)
  806c0c:	00c00044 	movi	r3,1
  806c10:	10c01e85 	stb	r3,122(r2)
  }
  d->_g227 = d->_pg211_e1;
  806c14:	e0bffc17 	ldw	r2,-16(fp)
  806c18:	10c06cc3 	ldbu	r3,435(r2)
  806c1c:	e0bffc17 	ldw	r2,-16(fp)
  806c20:	10c04385 	stb	r3,270(r2)
  if (d->_g227) {
  806c24:	e0bffc17 	ldw	r2,-16(fp)
  806c28:	10804383 	ldbu	r2,270(r2)
  806c2c:	10803fcc 	andi	r2,r2,255
  806c30:	1080201c 	xori	r2,r2,128
  806c34:	10bfe004 	addi	r2,r2,-128
  806c38:	10001226 	beq	r2,zero,806c84 <logic+0x6450>
    d->_region5_null_AVI += d->deltaT;
  806c3c:	e13ffc17 	ldw	r4,-16(fp)
  806c40:	20801117 	ldw	r2,68(r4)
  806c44:	20c01217 	ldw	r3,72(r4)
  806c48:	e1bffc17 	ldw	r6,-16(fp)
  806c4c:	31001317 	ldw	r4,76(r6)
  806c50:	31401417 	ldw	r5,80(r6)
  806c54:	200d883a 	mov	r6,r4
  806c58:	280f883a 	mov	r7,r5
  806c5c:	1009883a 	mov	r4,r2
  806c60:	180b883a 	mov	r5,r3
  806c64:	08079680 	call	807968 <__adddf3>
  806c68:	1009883a 	mov	r4,r2
  806c6c:	180b883a 	mov	r5,r3
  806c70:	2005883a 	mov	r2,r4
  806c74:	2807883a 	mov	r3,r5
  806c78:	e13ffc17 	ldw	r4,-16(fp)
  806c7c:	20801115 	stw	r2,68(r4)
  806c80:	20c01215 	stw	r3,72(r4)
  }
  d->_cg201 = d->_heart2_local__Atrig17;
  806c84:	e0bffc17 	ldw	r2,-16(fp)
  806c88:	10c01e83 	ldbu	r3,122(r2)
  806c8c:	e0bffc17 	ldw	r2,-16(fp)
  806c90:	10c05885 	stb	r3,354(r2)
  d->_g211_e1 = d->_g211 && !d->_cg199 || d->_g227 && !d->_cg201;
  806c94:	e0bffc17 	ldw	r2,-16(fp)
  806c98:	10804143 	ldbu	r2,261(r2)
  806c9c:	10803fcc 	andi	r2,r2,255
  806ca0:	1080201c 	xori	r2,r2,128
  806ca4:	10bfe004 	addi	r2,r2,-128
  806ca8:	10000626 	beq	r2,zero,806cc4 <logic+0x6490>
  806cac:	e0bffc17 	ldw	r2,-16(fp)
  806cb0:	10805843 	ldbu	r2,353(r2)
  806cb4:	10803fcc 	andi	r2,r2,255
  806cb8:	1080201c 	xori	r2,r2,128
  806cbc:	10bfe004 	addi	r2,r2,-128
  806cc0:	10000c26 	beq	r2,zero,806cf4 <logic+0x64c0>
  806cc4:	e0bffc17 	ldw	r2,-16(fp)
  806cc8:	10804383 	ldbu	r2,270(r2)
  806ccc:	10803fcc 	andi	r2,r2,255
  806cd0:	1080201c 	xori	r2,r2,128
  806cd4:	10bfe004 	addi	r2,r2,-128
  806cd8:	10000826 	beq	r2,zero,806cfc <logic+0x64c8>
  806cdc:	e0bffc17 	ldw	r2,-16(fp)
  806ce0:	10805883 	ldbu	r2,354(r2)
  806ce4:	10803fcc 	andi	r2,r2,255
  806ce8:	1080201c 	xori	r2,r2,128
  806cec:	10bfe004 	addi	r2,r2,-128
  806cf0:	1000021e 	bne	r2,zero,806cfc <logic+0x64c8>
  806cf4:	00800044 	movi	r2,1
  806cf8:	00000106 	br	806d00 <logic+0x64cc>
  806cfc:	0005883a 	mov	r2,zero
  806d00:	1007883a 	mov	r3,r2
  806d04:	e0bffc17 	ldw	r2,-16(fp)
  806d08:	10c062c5 	stb	r3,395(r2)
  d->_g230 = d->_g227 && d->_cg201;
  806d0c:	e0bffc17 	ldw	r2,-16(fp)
  806d10:	10804383 	ldbu	r2,270(r2)
  806d14:	10803fcc 	andi	r2,r2,255
  806d18:	1080201c 	xori	r2,r2,128
  806d1c:	10bfe004 	addi	r2,r2,-128
  806d20:	10000826 	beq	r2,zero,806d44 <logic+0x6510>
  806d24:	e0bffc17 	ldw	r2,-16(fp)
  806d28:	10805883 	ldbu	r2,354(r2)
  806d2c:	10803fcc 	andi	r2,r2,255
  806d30:	1080201c 	xori	r2,r2,128
  806d34:	10bfe004 	addi	r2,r2,-128
  806d38:	10000226 	beq	r2,zero,806d44 <logic+0x6510>
  806d3c:	00800044 	movi	r2,1
  806d40:	00000106 	br	806d48 <logic+0x6514>
  806d44:	0005883a 	mov	r2,zero
  806d48:	1007883a 	mov	r3,r2
  806d4c:	e0bffc17 	ldw	r2,-16(fp)
  806d50:	10c04405 	stb	r3,272(r2)
  d->_g231 = d->_g211 || d->_g218_e2 && !d->_cg205;
  806d54:	e0bffc17 	ldw	r2,-16(fp)
  806d58:	10804143 	ldbu	r2,261(r2)
  806d5c:	10803fcc 	andi	r2,r2,255
  806d60:	1080201c 	xori	r2,r2,128
  806d64:	10bfe004 	addi	r2,r2,-128
  806d68:	10000c1e 	bne	r2,zero,806d9c <logic+0x6568>
  806d6c:	e0bffc17 	ldw	r2,-16(fp)
  806d70:	10806303 	ldbu	r2,396(r2)
  806d74:	10803fcc 	andi	r2,r2,255
  806d78:	1080201c 	xori	r2,r2,128
  806d7c:	10bfe004 	addi	r2,r2,-128
  806d80:	10000826 	beq	r2,zero,806da4 <logic+0x6570>
  806d84:	e0bffc17 	ldw	r2,-16(fp)
  806d88:	108058c3 	ldbu	r2,355(r2)
  806d8c:	10803fcc 	andi	r2,r2,255
  806d90:	1080201c 	xori	r2,r2,128
  806d94:	10bfe004 	addi	r2,r2,-128
  806d98:	1000021e 	bne	r2,zero,806da4 <logic+0x6570>
  806d9c:	00800044 	movi	r2,1
  806da0:	00000106 	br	806da8 <logic+0x6574>
  806da4:	0005883a 	mov	r2,zero
  806da8:	1007883a 	mov	r3,r2
  806dac:	e0bffc17 	ldw	r2,-16(fp)
  806db0:	10c04445 	stb	r3,273(r2)
  d->_g198 = !d->_g227;
  806db4:	e0bffc17 	ldw	r2,-16(fp)
  806db8:	10804383 	ldbu	r2,270(r2)
  806dbc:	10803fcc 	andi	r2,r2,255
  806dc0:	1080201c 	xori	r2,r2,128
  806dc4:	10bfe004 	addi	r2,r2,-128
  806dc8:	1005003a 	cmpeq	r2,r2,zero
  806dcc:	1007883a 	mov	r3,r2
  806dd0:	e0bffc17 	ldw	r2,-16(fp)
  806dd4:	10c03fc5 	stb	r3,255(r2)
  d->_g201 = !d->_g218_e2;
  806dd8:	e0bffc17 	ldw	r2,-16(fp)
  806ddc:	10806303 	ldbu	r2,396(r2)
  806de0:	10803fcc 	andi	r2,r2,255
  806de4:	1080201c 	xori	r2,r2,128
  806de8:	10bfe004 	addi	r2,r2,-128
  806dec:	1005003a 	cmpeq	r2,r2,zero
  806df0:	1007883a 	mov	r3,r2
  806df4:	e0bffc17 	ldw	r2,-16(fp)
  806df8:	10c04005 	stb	r3,256(r2)
  d->_g205 = (d->_g198 || d->_g230) && (d->_g201 || d->_g218) && (d->_g230 || d->_g218);
  806dfc:	e0bffc17 	ldw	r2,-16(fp)
  806e00:	10803fc3 	ldbu	r2,255(r2)
  806e04:	10803fcc 	andi	r2,r2,255
  806e08:	1080201c 	xori	r2,r2,128
  806e0c:	10bfe004 	addi	r2,r2,-128
  806e10:	1000061e 	bne	r2,zero,806e2c <logic+0x65f8>
  806e14:	e0bffc17 	ldw	r2,-16(fp)
  806e18:	10804403 	ldbu	r2,272(r2)
  806e1c:	10803fcc 	andi	r2,r2,255
  806e20:	1080201c 	xori	r2,r2,128
  806e24:	10bfe004 	addi	r2,r2,-128
  806e28:	10001a26 	beq	r2,zero,806e94 <logic+0x6660>
  806e2c:	e0bffc17 	ldw	r2,-16(fp)
  806e30:	10804003 	ldbu	r2,256(r2)
  806e34:	10803fcc 	andi	r2,r2,255
  806e38:	1080201c 	xori	r2,r2,128
  806e3c:	10bfe004 	addi	r2,r2,-128
  806e40:	1000061e 	bne	r2,zero,806e5c <logic+0x6628>
  806e44:	e0bffc17 	ldw	r2,-16(fp)
  806e48:	10804283 	ldbu	r2,266(r2)
  806e4c:	10803fcc 	andi	r2,r2,255
  806e50:	1080201c 	xori	r2,r2,128
  806e54:	10bfe004 	addi	r2,r2,-128
  806e58:	10000e26 	beq	r2,zero,806e94 <logic+0x6660>
  806e5c:	e0bffc17 	ldw	r2,-16(fp)
  806e60:	10804403 	ldbu	r2,272(r2)
  806e64:	10803fcc 	andi	r2,r2,255
  806e68:	1080201c 	xori	r2,r2,128
  806e6c:	10bfe004 	addi	r2,r2,-128
  806e70:	1000061e 	bne	r2,zero,806e8c <logic+0x6658>
  806e74:	e0bffc17 	ldw	r2,-16(fp)
  806e78:	10804283 	ldbu	r2,266(r2)
  806e7c:	10803fcc 	andi	r2,r2,255
  806e80:	1080201c 	xori	r2,r2,128
  806e84:	10bfe004 	addi	r2,r2,-128
  806e88:	10000226 	beq	r2,zero,806e94 <logic+0x6660>
  806e8c:	00800044 	movi	r2,1
  806e90:	00000106 	br	806e98 <logic+0x6664>
  806e94:	0005883a 	mov	r2,zero
  806e98:	1007883a 	mov	r3,r2
  806e9c:	e0bffc17 	ldw	r2,-16(fp)
  806ea0:	10c04085 	stb	r3,258(r2)
  if (d->_g205) {
  806ea4:	e0bffc17 	ldw	r2,-16(fp)
  806ea8:	10804083 	ldbu	r2,258(r2)
  806eac:	10803fcc 	andi	r2,r2,255
  806eb0:	1080201c 	xori	r2,r2,128
  806eb4:	10bfe004 	addi	r2,r2,-128
  806eb8:	10000726 	beq	r2,zero,806ed8 <logic+0x66a4>
    d->_region5_null_AVI = 0;
  806ebc:	e0bffc17 	ldw	r2,-16(fp)
  806ec0:	10001115 	stw	zero,68(r2)
  806ec4:	10001215 	stw	zero,72(r2)
    d->_heart2_local__Atrig18 = 0;
  806ec8:	e0bffc17 	ldw	r2,-16(fp)
  806ecc:	10001ec5 	stb	zero,123(r2)
    d->_heart2_local__Atrig19 = 0;
  806ed0:	e0bffc17 	ldw	r2,-16(fp)
  806ed4:	10001f05 	stb	zero,124(r2)
  }
  d->_cg208 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  806ed8:	e0bffc17 	ldw	r2,-16(fp)
  806edc:	10801ec3 	ldbu	r2,123(r2)
  806ee0:	10803fcc 	andi	r2,r2,255
  806ee4:	1080201c 	xori	r2,r2,128
  806ee8:	10bfe004 	addi	r2,r2,-128
  806eec:	1000061e 	bne	r2,zero,806f08 <logic+0x66d4>
  806ef0:	e0bffc17 	ldw	r2,-16(fp)
  806ef4:	10801f03 	ldbu	r2,124(r2)
  806ef8:	10803fcc 	andi	r2,r2,255
  806efc:	1080201c 	xori	r2,r2,128
  806f00:	10bfe004 	addi	r2,r2,-128
  806f04:	10000226 	beq	r2,zero,806f10 <logic+0x66dc>
  806f08:	00800044 	movi	r2,1
  806f0c:	00000106 	br	806f14 <logic+0x66e0>
  806f10:	0005883a 	mov	r2,zero
  806f14:	1007883a 	mov	r3,r2
  806f18:	e0bffc17 	ldw	r2,-16(fp)
  806f1c:	10c05905 	stb	r3,356(r2)
  d->_g206 = d->_g205 && !d->_cg208 || d->_g181 && !d->_cg210;
  806f20:	e0bffc17 	ldw	r2,-16(fp)
  806f24:	10804083 	ldbu	r2,258(r2)
  806f28:	10803fcc 	andi	r2,r2,255
  806f2c:	1080201c 	xori	r2,r2,128
  806f30:	10bfe004 	addi	r2,r2,-128
  806f34:	10000626 	beq	r2,zero,806f50 <logic+0x671c>
  806f38:	e0bffc17 	ldw	r2,-16(fp)
  806f3c:	10805903 	ldbu	r2,356(r2)
  806f40:	10803fcc 	andi	r2,r2,255
  806f44:	1080201c 	xori	r2,r2,128
  806f48:	10bfe004 	addi	r2,r2,-128
  806f4c:	10000c26 	beq	r2,zero,806f80 <logic+0x674c>
  806f50:	e0bffc17 	ldw	r2,-16(fp)
  806f54:	10803d03 	ldbu	r2,244(r2)
  806f58:	10803fcc 	andi	r2,r2,255
  806f5c:	1080201c 	xori	r2,r2,128
  806f60:	10bfe004 	addi	r2,r2,-128
  806f64:	10000826 	beq	r2,zero,806f88 <logic+0x6754>
  806f68:	e0bffc17 	ldw	r2,-16(fp)
  806f6c:	10805943 	ldbu	r2,357(r2)
  806f70:	10803fcc 	andi	r2,r2,255
  806f74:	1080201c 	xori	r2,r2,128
  806f78:	10bfe004 	addi	r2,r2,-128
  806f7c:	1000021e 	bne	r2,zero,806f88 <logic+0x6754>
  806f80:	00800044 	movi	r2,1
  806f84:	00000106 	br	806f8c <logic+0x6758>
  806f88:	0005883a 	mov	r2,zero
  806f8c:	1007883a 	mov	r3,r2
  806f90:	e0bffc17 	ldw	r2,-16(fp)
  806f94:	10c040c5 	stb	r3,259(r2)
  d->_cg212 = d->_region5_null_AVI < d->AVI_time;
  806f98:	e0bffc17 	ldw	r2,-16(fp)
  806f9c:	14001117 	ldw	r16,68(r2)
  806fa0:	14401217 	ldw	r17,72(r2)
  806fa4:	e0bffc17 	ldw	r2,-16(fp)
  806fa8:	10800517 	ldw	r2,20(r2)
  806fac:	1009883a 	mov	r4,r2
  806fb0:	0808ce00 	call	808ce0 <__floatsidf>
  806fb4:	1009883a 	mov	r4,r2
  806fb8:	180b883a 	mov	r5,r3
  806fbc:	04800044 	movi	r18,1
  806fc0:	200d883a 	mov	r6,r4
  806fc4:	280f883a 	mov	r7,r5
  806fc8:	8009883a 	mov	r4,r16
  806fcc:	880b883a 	mov	r5,r17
  806fd0:	08082f00 	call	8082f0 <__ledf2>
  806fd4:	10000116 	blt	r2,zero,806fdc <logic+0x67a8>
  806fd8:	0025883a 	mov	r18,zero
  806fdc:	9007883a 	mov	r3,r18
  806fe0:	e0bffc17 	ldw	r2,-16(fp)
  806fe4:	10c05985 	stb	r3,358(r2)
  d->_g206_e2 = d->_g205 && d->_cg212;
  806fe8:	e0bffc17 	ldw	r2,-16(fp)
  806fec:	10804083 	ldbu	r2,258(r2)
  806ff0:	10803fcc 	andi	r2,r2,255
  806ff4:	1080201c 	xori	r2,r2,128
  806ff8:	10bfe004 	addi	r2,r2,-128
  806ffc:	10000826 	beq	r2,zero,807020 <logic+0x67ec>
  807000:	e0bffc17 	ldw	r2,-16(fp)
  807004:	10805983 	ldbu	r2,358(r2)
  807008:	10803fcc 	andi	r2,r2,255
  80700c:	1080201c 	xori	r2,r2,128
  807010:	10bfe004 	addi	r2,r2,-128
  807014:	10000226 	beq	r2,zero,807020 <logic+0x67ec>
  807018:	00800044 	movi	r2,1
  80701c:	00000106 	br	807024 <logic+0x67f0>
  807020:	0005883a 	mov	r2,zero
  807024:	1007883a 	mov	r3,r2
  807028:	e0bffc17 	ldw	r2,-16(fp)
  80702c:	10c06285 	stb	r3,394(r2)
  if (d->_g206_e2) {
  807030:	e0bffc17 	ldw	r2,-16(fp)
  807034:	10806283 	ldbu	r2,394(r2)
  807038:	10803fcc 	andi	r2,r2,255
  80703c:	1080201c 	xori	r2,r2,128
  807040:	10bfe004 	addi	r2,r2,-128
  807044:	10003426 	beq	r2,zero,807118 <logic+0x68e4>
    d->sleepT = (d->sleepT < (d->AVI_time - d->_region5_null_AVI)) ? d->sleepT : (d->AVI_time - d->_region5_null_AVI);
  807048:	e0bffc17 	ldw	r2,-16(fp)
  80704c:	14001517 	ldw	r16,84(r2)
  807050:	14401617 	ldw	r17,88(r2)
  807054:	e0bffc17 	ldw	r2,-16(fp)
  807058:	10800517 	ldw	r2,20(r2)
  80705c:	1009883a 	mov	r4,r2
  807060:	0808ce00 	call	808ce0 <__floatsidf>
  807064:	1011883a 	mov	r8,r2
  807068:	1813883a 	mov	r9,r3
  80706c:	e13ffc17 	ldw	r4,-16(fp)
  807070:	20801117 	ldw	r2,68(r4)
  807074:	20c01217 	ldw	r3,72(r4)
  807078:	100d883a 	mov	r6,r2
  80707c:	180f883a 	mov	r7,r3
  807080:	4009883a 	mov	r4,r8
  807084:	480b883a 	mov	r5,r9
  807088:	08083e40 	call	8083e4 <__subdf3>
  80708c:	1009883a 	mov	r4,r2
  807090:	180b883a 	mov	r5,r3
  807094:	2005883a 	mov	r2,r4
  807098:	2807883a 	mov	r3,r5
  80709c:	100d883a 	mov	r6,r2
  8070a0:	180f883a 	mov	r7,r3
  8070a4:	8009883a 	mov	r4,r16
  8070a8:	880b883a 	mov	r5,r17
  8070ac:	08082f00 	call	8082f0 <__ledf2>
  8070b0:	1000040e 	bge	r2,zero,8070c4 <logic+0x6890>
  8070b4:	e13ffc17 	ldw	r4,-16(fp)
  8070b8:	20801517 	ldw	r2,84(r4)
  8070bc:	20c01617 	ldw	r3,88(r4)
  8070c0:	00001206 	br	80710c <logic+0x68d8>
  8070c4:	e0bffc17 	ldw	r2,-16(fp)
  8070c8:	10800517 	ldw	r2,20(r2)
  8070cc:	1009883a 	mov	r4,r2
  8070d0:	0808ce00 	call	808ce0 <__floatsidf>
  8070d4:	1011883a 	mov	r8,r2
  8070d8:	1813883a 	mov	r9,r3
  8070dc:	e13ffc17 	ldw	r4,-16(fp)
  8070e0:	20801117 	ldw	r2,68(r4)
  8070e4:	20c01217 	ldw	r3,72(r4)
  8070e8:	100d883a 	mov	r6,r2
  8070ec:	180f883a 	mov	r7,r3
  8070f0:	4009883a 	mov	r4,r8
  8070f4:	480b883a 	mov	r5,r9
  8070f8:	08083e40 	call	8083e4 <__subdf3>
  8070fc:	1009883a 	mov	r4,r2
  807100:	180b883a 	mov	r5,r3
  807104:	2005883a 	mov	r2,r4
  807108:	2807883a 	mov	r3,r5
  80710c:	e13ffc17 	ldw	r4,-16(fp)
  807110:	20801515 	stw	r2,84(r4)
  807114:	20c01615 	stw	r3,88(r4)
  }
  d->_cg213 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  807118:	e0bffc17 	ldw	r2,-16(fp)
  80711c:	10801ec3 	ldbu	r2,123(r2)
  807120:	10803fcc 	andi	r2,r2,255
  807124:	1080201c 	xori	r2,r2,128
  807128:	10bfe004 	addi	r2,r2,-128
  80712c:	1000061e 	bne	r2,zero,807148 <logic+0x6914>
  807130:	e0bffc17 	ldw	r2,-16(fp)
  807134:	10801f03 	ldbu	r2,124(r2)
  807138:	10803fcc 	andi	r2,r2,255
  80713c:	1080201c 	xori	r2,r2,128
  807140:	10bfe004 	addi	r2,r2,-128
  807144:	10000226 	beq	r2,zero,807150 <logic+0x691c>
  807148:	00800044 	movi	r2,1
  80714c:	00000106 	br	807154 <logic+0x6920>
  807150:	0005883a 	mov	r2,zero
  807154:	1007883a 	mov	r3,r2
  807158:	e0bffc17 	ldw	r2,-16(fp)
  80715c:	10c059c5 	stb	r3,359(r2)
  d->_g202 = d->_g206_e2 && !d->_cg213 || d->_g221 && !d->_cg217;
  807160:	e0bffc17 	ldw	r2,-16(fp)
  807164:	10806283 	ldbu	r2,394(r2)
  807168:	10803fcc 	andi	r2,r2,255
  80716c:	1080201c 	xori	r2,r2,128
  807170:	10bfe004 	addi	r2,r2,-128
  807174:	10000626 	beq	r2,zero,807190 <logic+0x695c>
  807178:	e0bffc17 	ldw	r2,-16(fp)
  80717c:	108059c3 	ldbu	r2,359(r2)
  807180:	10803fcc 	andi	r2,r2,255
  807184:	1080201c 	xori	r2,r2,128
  807188:	10bfe004 	addi	r2,r2,-128
  80718c:	10000c26 	beq	r2,zero,8071c0 <logic+0x698c>
  807190:	e0bffc17 	ldw	r2,-16(fp)
  807194:	108042c3 	ldbu	r2,267(r2)
  807198:	10803fcc 	andi	r2,r2,255
  80719c:	1080201c 	xori	r2,r2,128
  8071a0:	10bfe004 	addi	r2,r2,-128
  8071a4:	10000826 	beq	r2,zero,8071c8 <logic+0x6994>
  8071a8:	e0bffc17 	ldw	r2,-16(fp)
  8071ac:	10805a03 	ldbu	r2,360(r2)
  8071b0:	10803fcc 	andi	r2,r2,255
  8071b4:	1080201c 	xori	r2,r2,128
  8071b8:	10bfe004 	addi	r2,r2,-128
  8071bc:	1000021e 	bne	r2,zero,8071c8 <logic+0x6994>
  8071c0:	00800044 	movi	r2,1
  8071c4:	00000106 	br	8071cc <logic+0x6998>
  8071c8:	0005883a 	mov	r2,zero
  8071cc:	1007883a 	mov	r3,r2
  8071d0:	e0bffc17 	ldw	r2,-16(fp)
  8071d4:	10c04045 	stb	r3,257(r2)
  d->_g202_e1 = d->_g205 && !d->_cg212;
  8071d8:	e0bffc17 	ldw	r2,-16(fp)
  8071dc:	10804083 	ldbu	r2,258(r2)
  8071e0:	10803fcc 	andi	r2,r2,255
  8071e4:	1080201c 	xori	r2,r2,128
  8071e8:	10bfe004 	addi	r2,r2,-128
  8071ec:	10000826 	beq	r2,zero,807210 <logic+0x69dc>
  8071f0:	e0bffc17 	ldw	r2,-16(fp)
  8071f4:	10805983 	ldbu	r2,358(r2)
  8071f8:	10803fcc 	andi	r2,r2,255
  8071fc:	1080201c 	xori	r2,r2,128
  807200:	10bfe004 	addi	r2,r2,-128
  807204:	1000021e 	bne	r2,zero,807210 <logic+0x69dc>
  807208:	00800044 	movi	r2,1
  80720c:	00000106 	br	807214 <logic+0x69e0>
  807210:	0005883a 	mov	r2,zero
  807214:	1007883a 	mov	r3,r2
  807218:	e0bffc17 	ldw	r2,-16(fp)
  80721c:	10c06245 	stb	r3,393(r2)
  d->_cg222 = d->_heart2_local__Atrig18 || d->_heart2_local__Atrig19;
  807220:	e0bffc17 	ldw	r2,-16(fp)
  807224:	10801ec3 	ldbu	r2,123(r2)
  807228:	10803fcc 	andi	r2,r2,255
  80722c:	1080201c 	xori	r2,r2,128
  807230:	10bfe004 	addi	r2,r2,-128
  807234:	1000061e 	bne	r2,zero,807250 <logic+0x6a1c>
  807238:	e0bffc17 	ldw	r2,-16(fp)
  80723c:	10801f03 	ldbu	r2,124(r2)
  807240:	10803fcc 	andi	r2,r2,255
  807244:	1080201c 	xori	r2,r2,128
  807248:	10bfe004 	addi	r2,r2,-128
  80724c:	10000226 	beq	r2,zero,807258 <logic+0x6a24>
  807250:	00800044 	movi	r2,1
  807254:	00000106 	br	80725c <logic+0x6a28>
  807258:	0005883a 	mov	r2,zero
  80725c:	1007883a 	mov	r3,r2
  807260:	e0bffc17 	ldw	r2,-16(fp)
  807264:	10c05ac5 	stb	r3,363(r2)
  d->_g210 = d->_g216 && !d->_cg219 || d->_g202_e1 && !d->_cg222;
  807268:	e0bffc17 	ldw	r2,-16(fp)
  80726c:	10804203 	ldbu	r2,264(r2)
  807270:	10803fcc 	andi	r2,r2,255
  807274:	1080201c 	xori	r2,r2,128
  807278:	10bfe004 	addi	r2,r2,-128
  80727c:	10000626 	beq	r2,zero,807298 <logic+0x6a64>
  807280:	e0bffc17 	ldw	r2,-16(fp)
  807284:	10805a83 	ldbu	r2,362(r2)
  807288:	10803fcc 	andi	r2,r2,255
  80728c:	1080201c 	xori	r2,r2,128
  807290:	10bfe004 	addi	r2,r2,-128
  807294:	10000c26 	beq	r2,zero,8072c8 <logic+0x6a94>
  807298:	e0bffc17 	ldw	r2,-16(fp)
  80729c:	10806243 	ldbu	r2,393(r2)
  8072a0:	10803fcc 	andi	r2,r2,255
  8072a4:	1080201c 	xori	r2,r2,128
  8072a8:	10bfe004 	addi	r2,r2,-128
  8072ac:	10000826 	beq	r2,zero,8072d0 <logic+0x6a9c>
  8072b0:	e0bffc17 	ldw	r2,-16(fp)
  8072b4:	10805ac3 	ldbu	r2,363(r2)
  8072b8:	10803fcc 	andi	r2,r2,255
  8072bc:	1080201c 	xori	r2,r2,128
  8072c0:	10bfe004 	addi	r2,r2,-128
  8072c4:	1000021e 	bne	r2,zero,8072d0 <logic+0x6a9c>
  8072c8:	00800044 	movi	r2,1
  8072cc:	00000106 	br	8072d4 <logic+0x6aa0>
  8072d0:	0005883a 	mov	r2,zero
  8072d4:	1007883a 	mov	r3,r2
  8072d8:	e0bffc17 	ldw	r2,-16(fp)
  8072dc:	10c04105 	stb	r3,260(r2)
  d->_g213 = d->_g205 || d->_g172_e2 && !d->_cg228;
  8072e0:	e0bffc17 	ldw	r2,-16(fp)
  8072e4:	10804083 	ldbu	r2,258(r2)
  8072e8:	10803fcc 	andi	r2,r2,255
  8072ec:	1080201c 	xori	r2,r2,128
  8072f0:	10bfe004 	addi	r2,r2,-128
  8072f4:	10000c1e 	bne	r2,zero,807328 <logic+0x6af4>
  8072f8:	e0bffc17 	ldw	r2,-16(fp)
  8072fc:	10806143 	ldbu	r2,389(r2)
  807300:	10803fcc 	andi	r2,r2,255
  807304:	1080201c 	xori	r2,r2,128
  807308:	10bfe004 	addi	r2,r2,-128
  80730c:	10000826 	beq	r2,zero,807330 <logic+0x6afc>
  807310:	e0bffc17 	ldw	r2,-16(fp)
  807314:	10805b03 	ldbu	r2,364(r2)
  807318:	10803fcc 	andi	r2,r2,255
  80731c:	1080201c 	xori	r2,r2,128
  807320:	10bfe004 	addi	r2,r2,-128
  807324:	1000021e 	bne	r2,zero,807330 <logic+0x6afc>
  807328:	00800044 	movi	r2,1
  80732c:	00000106 	br	807334 <logic+0x6b00>
  807330:	0005883a 	mov	r2,zero
  807334:	1007883a 	mov	r3,r2
  807338:	e0bffc17 	ldw	r2,-16(fp)
  80733c:	10c04185 	stb	r3,262(r2)
  d->_g217 = d->_GO || d->_g236 || d->_g238 || d->_g235 && !d->_cg237;
  807340:	e0bffc17 	ldw	r2,-16(fp)
  807344:	10804543 	ldbu	r2,277(r2)
  807348:	10803fcc 	andi	r2,r2,255
  80734c:	1080201c 	xori	r2,r2,128
  807350:	10bfe004 	addi	r2,r2,-128
  807354:	1000181e 	bne	r2,zero,8073b8 <logic+0x6b84>
  807358:	e0bffc17 	ldw	r2,-16(fp)
  80735c:	108044c3 	ldbu	r2,275(r2)
  807360:	10803fcc 	andi	r2,r2,255
  807364:	1080201c 	xori	r2,r2,128
  807368:	10bfe004 	addi	r2,r2,-128
  80736c:	1000121e 	bne	r2,zero,8073b8 <logic+0x6b84>
  807370:	e0bffc17 	ldw	r2,-16(fp)
  807374:	10804503 	ldbu	r2,276(r2)
  807378:	10803fcc 	andi	r2,r2,255
  80737c:	1080201c 	xori	r2,r2,128
  807380:	10bfe004 	addi	r2,r2,-128
  807384:	10000c1e 	bne	r2,zero,8073b8 <logic+0x6b84>
  807388:	e0bffc17 	ldw	r2,-16(fp)
  80738c:	10804483 	ldbu	r2,274(r2)
  807390:	10803fcc 	andi	r2,r2,255
  807394:	1080201c 	xori	r2,r2,128
  807398:	10bfe004 	addi	r2,r2,-128
  80739c:	10000826 	beq	r2,zero,8073c0 <logic+0x6b8c>
  8073a0:	e0bffc17 	ldw	r2,-16(fp)
  8073a4:	10805b83 	ldbu	r2,366(r2)
  8073a8:	10803fcc 	andi	r2,r2,255
  8073ac:	1080201c 	xori	r2,r2,128
  8073b0:	10bfe004 	addi	r2,r2,-128
  8073b4:	1000021e 	bne	r2,zero,8073c0 <logic+0x6b8c>
  8073b8:	00800044 	movi	r2,1
  8073bc:	00000106 	br	8073c4 <logic+0x6b90>
  8073c0:	0005883a 	mov	r2,zero
  8073c4:	1007883a 	mov	r3,r2
  8073c8:	e0bffc17 	ldw	r2,-16(fp)
  8073cc:	10c04245 	stb	r3,265(r2)
  d->_reg_VP = d->VP;
  8073d0:	e0bffc17 	ldw	r2,-16(fp)
  8073d4:	10c017c3 	ldbu	r3,95(r2)
  8073d8:	e0bffc17 	ldw	r2,-16(fp)
  8073dc:	10c01945 	stb	r3,101(r2)
  d->_reg_VS_i = d->VS_i;
  8073e0:	e0bffc17 	ldw	r2,-16(fp)
  8073e4:	10c01903 	ldbu	r3,100(r2)
  8073e8:	e0bffc17 	ldw	r2,-16(fp)
  8073ec:	10c019c5 	stb	r3,103(r2)
}
  8073f0:	0001883a 	nop
  8073f4:	e6fffd04 	addi	sp,fp,-12
  8073f8:	dfc00417 	ldw	ra,16(sp)
  8073fc:	df000317 	ldw	fp,12(sp)
  807400:	dc800217 	ldw	r18,8(sp)
  807404:	dc400117 	ldw	r17,4(sp)
  807408:	dc000017 	ldw	r16,0(sp)
  80740c:	dec00504 	addi	sp,sp,20
  807410:	f800283a 	ret

00807414 <reset>:

void reset(TickData* d) {
  807414:	defffe04 	addi	sp,sp,-8
  807418:	df000115 	stw	fp,4(sp)
  80741c:	df000104 	addi	fp,sp,4
  807420:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  807424:	e0bfff17 	ldw	r2,-4(fp)
  807428:	00c00044 	movi	r3,1
  80742c:	10c04545 	stb	r3,277(r2)
  d->_TERM = 0;
  807430:	e0bfff17 	ldw	r2,-4(fp)
  807434:	10006385 	stb	zero,398(r2)
  d->VRP_time = VRP_VALUE;
  807438:	e0bfff17 	ldw	r2,-4(fp)
  80743c:	00c02584 	movi	r3,150
  807440:	10c00015 	stw	r3,0(r2)
  d->PVARP_time = PVARP_VALUE;
  807444:	e0bfff17 	ldw	r2,-4(fp)
  807448:	00c00c84 	movi	r3,50
  80744c:	10c00115 	stw	r3,4(r2)
  d->URI_time = URI_VALUE;
  807450:	e0bfff17 	ldw	r2,-4(fp)
  807454:	00c0e104 	movi	r3,900
  807458:	10c00215 	stw	r3,8(r2)
  d->LRI_time = LRI_VALUE;
  80745c:	e0bfff17 	ldw	r2,-4(fp)
  807460:	00c0ed84 	movi	r3,950
  807464:	10c00315 	stw	r3,12(r2)
  d->AEI_time = AEI_VALUE;
  807468:	e0bfff17 	ldw	r2,-4(fp)
  80746c:	00c0c804 	movi	r3,800
  807470:	10c00415 	stw	r3,16(r2)
  d->AVI_time = AVI_VALUE;
  807474:	e0bfff17 	ldw	r2,-4(fp)
  807478:	00c04b04 	movi	r3,300
  80747c:	10c00515 	stw	r3,20(r2)
  d->ready = 0;
  807480:	e0bfff17 	ldw	r2,-4(fp)
  807484:	10000605 	stb	zero,24(r2)
  d->_region0_null_URI = 0.0;
  807488:	e0bfff17 	ldw	r2,-4(fp)
  80748c:	10000715 	stw	zero,28(r2)
  807490:	10000815 	stw	zero,32(r2)
  d->_region1_null_LRI = 0.0;
  807494:	e0bfff17 	ldw	r2,-4(fp)
  807498:	10000915 	stw	zero,36(r2)
  80749c:	10000a15 	stw	zero,40(r2)
  d->_region2_null_VRP = 0.0;
  8074a0:	e0bfff17 	ldw	r2,-4(fp)
  8074a4:	10000b15 	stw	zero,44(r2)
  8074a8:	10000c15 	stw	zero,48(r2)
  d->_region3_null_PVARP = 0.0;
  8074ac:	e0bfff17 	ldw	r2,-4(fp)
  8074b0:	10000d15 	stw	zero,52(r2)
  8074b4:	10000e15 	stw	zero,56(r2)
  d->_region4_null_AEI = 0.0;
  8074b8:	e0bfff17 	ldw	r2,-4(fp)
  8074bc:	10000f15 	stw	zero,60(r2)
  8074c0:	10001015 	stw	zero,64(r2)
  d->_region5_null_AVI = 0.0;
  8074c4:	e0bfff17 	ldw	r2,-4(fp)
  8074c8:	10001115 	stw	zero,68(r2)
  8074cc:	10001215 	stw	zero,72(r2)
  d->deltaT = 0.0;
  8074d0:	e0bfff17 	ldw	r2,-4(fp)
  8074d4:	10001315 	stw	zero,76(r2)
  8074d8:	10001415 	stw	zero,80(r2)
  d->sleepT = 0.0;
  8074dc:	e0bfff17 	ldw	r2,-4(fp)
  8074e0:	10001515 	stw	zero,84(r2)
  8074e4:	10001615 	stw	zero,88(r2)
  d->_reg_VP = 0;
  8074e8:	e0bfff17 	ldw	r2,-4(fp)
  8074ec:	10001945 	stb	zero,101(r2)
  d->_reg_VS_i = 0;
  8074f0:	e0bfff17 	ldw	r2,-4(fp)
  8074f4:	100019c5 	stb	zero,103(r2)
  d->_pg9 = 0;
  8074f8:	e0bfff17 	ldw	r2,-4(fp)
  8074fc:	100063c5 	stb	zero,399(r2)
  d->_pg217 = 0;
  807500:	e0bfff17 	ldw	r2,-4(fp)
  807504:	10006405 	stb	zero,400(r2)
  d->_pg13 = 0;
  807508:	e0bfff17 	ldw	r2,-4(fp)
  80750c:	10006445 	stb	zero,401(r2)
  d->_pg7_e1 = 0;
  807510:	e0bfff17 	ldw	r2,-4(fp)
  807514:	10006485 	stb	zero,402(r2)
  d->_pg36 = 0;
  807518:	e0bfff17 	ldw	r2,-4(fp)
  80751c:	100064c5 	stb	zero,403(r2)
  d->_pg37 = 0;
  807520:	e0bfff17 	ldw	r2,-4(fp)
  807524:	10006505 	stb	zero,404(r2)
  d->_pg14 = 0;
  807528:	e0bfff17 	ldw	r2,-4(fp)
  80752c:	10006545 	stb	zero,405(r2)
  d->_pg46 = 0;
  807530:	e0bfff17 	ldw	r2,-4(fp)
  807534:	10006585 	stb	zero,406(r2)
  d->_pg50 = 0;
  807538:	e0bfff17 	ldw	r2,-4(fp)
  80753c:	100065c5 	stb	zero,407(r2)
  d->_pg44_e1 = 0;
  807540:	e0bfff17 	ldw	r2,-4(fp)
  807544:	10006605 	stb	zero,408(r2)
  d->_pg74 = 0;
  807548:	e0bfff17 	ldw	r2,-4(fp)
  80754c:	10006645 	stb	zero,409(r2)
  d->_pg73 = 0;
  807550:	e0bfff17 	ldw	r2,-4(fp)
  807554:	10006685 	stb	zero,410(r2)
  d->_pg51_e2 = 0;
  807558:	e0bfff17 	ldw	r2,-4(fp)
  80755c:	100066c5 	stb	zero,411(r2)
  d->_pg83 = 0;
  807560:	e0bfff17 	ldw	r2,-4(fp)
  807564:	10006705 	stb	zero,412(r2)
  d->_pg89 = 0;
  807568:	e0bfff17 	ldw	r2,-4(fp)
  80756c:	10006745 	stb	zero,413(r2)
  d->_pg88 = 0;
  807570:	e0bfff17 	ldw	r2,-4(fp)
  807574:	10006785 	stb	zero,414(r2)
  d->_pg114 = 0;
  807578:	e0bfff17 	ldw	r2,-4(fp)
  80757c:	100067c5 	stb	zero,415(r2)
  d->_pg116 = 0;
  807580:	e0bfff17 	ldw	r2,-4(fp)
  807584:	10006805 	stb	zero,416(r2)
  d->_pg97_e3 = 0;
  807588:	e0bfff17 	ldw	r2,-4(fp)
  80758c:	10006845 	stb	zero,417(r2)
  d->_pg129 = 0;
  807590:	e0bfff17 	ldw	r2,-4(fp)
  807594:	10006885 	stb	zero,418(r2)
  d->_pg134 = 0;
  807598:	e0bfff17 	ldw	r2,-4(fp)
  80759c:	100068c5 	stb	zero,419(r2)
  d->_pg130_e2 = 0;
  8075a0:	e0bfff17 	ldw	r2,-4(fp)
  8075a4:	10006905 	stb	zero,420(r2)
  d->_pg158 = 0;
  8075a8:	e0bfff17 	ldw	r2,-4(fp)
  8075ac:	10006945 	stb	zero,421(r2)
  d->_pg156 = 0;
  8075b0:	e0bfff17 	ldw	r2,-4(fp)
  8075b4:	10006985 	stb	zero,422(r2)
  d->_pg139 = 0;
  8075b8:	e0bfff17 	ldw	r2,-4(fp)
  8075bc:	100069c5 	stb	zero,423(r2)
  d->_pg179 = 0;
  8075c0:	e0bfff17 	ldw	r2,-4(fp)
  8075c4:	10006a05 	stb	zero,424(r2)
  d->_pg181_e3 = 0;
  8075c8:	e0bfff17 	ldw	r2,-4(fp)
  8075cc:	10006a45 	stb	zero,425(r2)
  d->_pg195 = 0;
  8075d0:	e0bfff17 	ldw	r2,-4(fp)
  8075d4:	10006a85 	stb	zero,426(r2)
  d->_pg173 = 0;
  8075d8:	e0bfff17 	ldw	r2,-4(fp)
  8075dc:	10006ac5 	stb	zero,427(r2)
  d->_pg167 = 0;
  8075e0:	e0bfff17 	ldw	r2,-4(fp)
  8075e4:	10006b05 	stb	zero,428(r2)
  d->_pg176 = 0;
  8075e8:	e0bfff17 	ldw	r2,-4(fp)
  8075ec:	10006b45 	stb	zero,429(r2)
  d->_pg206 = 0;
  8075f0:	e0bfff17 	ldw	r2,-4(fp)
  8075f4:	10006b85 	stb	zero,430(r2)
  d->_pg213 = 0;
  8075f8:	e0bfff17 	ldw	r2,-4(fp)
  8075fc:	10006bc5 	stb	zero,431(r2)
  d->_pg210 = 0;
  807600:	e0bfff17 	ldw	r2,-4(fp)
  807604:	10006c05 	stb	zero,432(r2)
  d->_pg202 = 0;
  807608:	e0bfff17 	ldw	r2,-4(fp)
  80760c:	10006c45 	stb	zero,433(r2)
  d->_pg231 = 0;
  807610:	e0bfff17 	ldw	r2,-4(fp)
  807614:	10006c85 	stb	zero,434(r2)
  d->_pg211_e1 = 0;
  807618:	e0bfff17 	ldw	r2,-4(fp)
  80761c:	10006cc5 	stb	zero,435(r2)
}
  807620:	0001883a 	nop
  807624:	e037883a 	mov	sp,fp
  807628:	df000017 	ldw	fp,0(sp)
  80762c:	dec00104 	addi	sp,sp,4
  807630:	f800283a 	ret

00807634 <tick>:

void tick(TickData* d) {
  807634:	defffd04 	addi	sp,sp,-12
  807638:	dfc00215 	stw	ra,8(sp)
  80763c:	df000115 	stw	fp,4(sp)
  807640:	df000104 	addi	fp,sp,4
  807644:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  807648:	e13fff17 	ldw	r4,-4(fp)
  80764c:	08008340 	call	800834 <logic>

  d->_pg9 = d->_g9;
  807650:	e0bfff17 	ldw	r2,-4(fp)
  807654:	10c02003 	ldbu	r3,128(r2)
  807658:	e0bfff17 	ldw	r2,-4(fp)
  80765c:	10c063c5 	stb	r3,399(r2)
  d->_pg217 = d->_g217;
  807660:	e0bfff17 	ldw	r2,-4(fp)
  807664:	10c04243 	ldbu	r3,265(r2)
  807668:	e0bfff17 	ldw	r2,-4(fp)
  80766c:	10c06405 	stb	r3,400(r2)
  d->_pg13 = d->_g13;
  807670:	e0bfff17 	ldw	r2,-4(fp)
  807674:	10c020c3 	ldbu	r3,131(r2)
  807678:	e0bfff17 	ldw	r2,-4(fp)
  80767c:	10c06445 	stb	r3,401(r2)
  d->_pg7_e1 = d->_g7_e1;
  807680:	e0bfff17 	ldw	r2,-4(fp)
  807684:	10c05c03 	ldbu	r3,368(r2)
  807688:	e0bfff17 	ldw	r2,-4(fp)
  80768c:	10c06485 	stb	r3,402(r2)
  d->_pg36 = d->_g36;
  807690:	e0bfff17 	ldw	r2,-4(fp)
  807694:	10c024c3 	ldbu	r3,147(r2)
  807698:	e0bfff17 	ldw	r2,-4(fp)
  80769c:	10c064c5 	stb	r3,403(r2)
  d->_pg37 = d->_g37;
  8076a0:	e0bfff17 	ldw	r2,-4(fp)
  8076a4:	10c02503 	ldbu	r3,148(r2)
  8076a8:	e0bfff17 	ldw	r2,-4(fp)
  8076ac:	10c06505 	stb	r3,404(r2)
  d->_pg14 = d->_g14;
  8076b0:	e0bfff17 	ldw	r2,-4(fp)
  8076b4:	10c02103 	ldbu	r3,132(r2)
  8076b8:	e0bfff17 	ldw	r2,-4(fp)
  8076bc:	10c06545 	stb	r3,405(r2)
  d->_pg46 = d->_g46;
  8076c0:	e0bfff17 	ldw	r2,-4(fp)
  8076c4:	10c02603 	ldbu	r3,152(r2)
  8076c8:	e0bfff17 	ldw	r2,-4(fp)
  8076cc:	10c06585 	stb	r3,406(r2)
  d->_pg50 = d->_g50;
  8076d0:	e0bfff17 	ldw	r2,-4(fp)
  8076d4:	10c026c3 	ldbu	r3,155(r2)
  8076d8:	e0bfff17 	ldw	r2,-4(fp)
  8076dc:	10c065c5 	stb	r3,407(r2)
  d->_pg44_e1 = d->_g44_e1;
  8076e0:	e0bfff17 	ldw	r2,-4(fp)
  8076e4:	10c05d43 	ldbu	r3,373(r2)
  8076e8:	e0bfff17 	ldw	r2,-4(fp)
  8076ec:	10c06605 	stb	r3,408(r2)
  d->_pg74 = d->_g74;
  8076f0:	e0bfff17 	ldw	r2,-4(fp)
  8076f4:	10c02b03 	ldbu	r3,172(r2)
  8076f8:	e0bfff17 	ldw	r2,-4(fp)
  8076fc:	10c06645 	stb	r3,409(r2)
  d->_pg73 = d->_g73;
  807700:	e0bfff17 	ldw	r2,-4(fp)
  807704:	10c02ac3 	ldbu	r3,171(r2)
  807708:	e0bfff17 	ldw	r2,-4(fp)
  80770c:	10c06685 	stb	r3,410(r2)
  d->_pg51_e2 = d->_g51_e2;
  807710:	e0bfff17 	ldw	r2,-4(fp)
  807714:	10c05d83 	ldbu	r3,374(r2)
  807718:	e0bfff17 	ldw	r2,-4(fp)
  80771c:	10c066c5 	stb	r3,411(r2)
  d->_pg83 = d->_g83;
  807720:	e0bfff17 	ldw	r2,-4(fp)
  807724:	10c02c03 	ldbu	r3,176(r2)
  807728:	e0bfff17 	ldw	r2,-4(fp)
  80772c:	10c06705 	stb	r3,412(r2)
  d->_pg89 = d->_g89;
  807730:	e0bfff17 	ldw	r2,-4(fp)
  807734:	10c02d43 	ldbu	r3,181(r2)
  807738:	e0bfff17 	ldw	r2,-4(fp)
  80773c:	10c06745 	stb	r3,413(r2)
  d->_pg88 = d->_g88;
  807740:	e0bfff17 	ldw	r2,-4(fp)
  807744:	10c02d03 	ldbu	r3,180(r2)
  807748:	e0bfff17 	ldw	r2,-4(fp)
  80774c:	10c06785 	stb	r3,414(r2)
  d->_pg114 = d->_g114;
  807750:	e0bfff17 	ldw	r2,-4(fp)
  807754:	10c031c3 	ldbu	r3,199(r2)
  807758:	e0bfff17 	ldw	r2,-4(fp)
  80775c:	10c067c5 	stb	r3,415(r2)
  d->_pg116 = d->_g116;
  807760:	e0bfff17 	ldw	r2,-4(fp)
  807764:	10c03243 	ldbu	r3,201(r2)
  807768:	e0bfff17 	ldw	r2,-4(fp)
  80776c:	10c06805 	stb	r3,416(r2)
  d->_pg97_e3 = d->_g97_e3;
  807770:	e0bfff17 	ldw	r2,-4(fp)
  807774:	10c05f03 	ldbu	r3,380(r2)
  807778:	e0bfff17 	ldw	r2,-4(fp)
  80777c:	10c06845 	stb	r3,417(r2)
  d->_pg129 = d->_g129;
  807780:	e0bfff17 	ldw	r2,-4(fp)
  807784:	10c03403 	ldbu	r3,208(r2)
  807788:	e0bfff17 	ldw	r2,-4(fp)
  80778c:	10c06885 	stb	r3,418(r2)
  d->_pg134 = d->_g134;
  807790:	e0bfff17 	ldw	r2,-4(fp)
  807794:	10c03503 	ldbu	r3,212(r2)
  807798:	e0bfff17 	ldw	r2,-4(fp)
  80779c:	10c068c5 	stb	r3,419(r2)
  d->_pg130_e2 = d->_g130_e2;
  8077a0:	e0bfff17 	ldw	r2,-4(fp)
  8077a4:	10c06003 	ldbu	r3,384(r2)
  8077a8:	e0bfff17 	ldw	r2,-4(fp)
  8077ac:	10c06905 	stb	r3,420(r2)
  d->_pg158 = d->_g158;
  8077b0:	e0bfff17 	ldw	r2,-4(fp)
  8077b4:	10c03983 	ldbu	r3,230(r2)
  8077b8:	e0bfff17 	ldw	r2,-4(fp)
  8077bc:	10c06945 	stb	r3,421(r2)
  d->_pg156 = d->_g156;
  8077c0:	e0bfff17 	ldw	r2,-4(fp)
  8077c4:	10c03903 	ldbu	r3,228(r2)
  8077c8:	e0bfff17 	ldw	r2,-4(fp)
  8077cc:	10c06985 	stb	r3,422(r2)
  d->_pg139 = d->_g139;
  8077d0:	e0bfff17 	ldw	r2,-4(fp)
  8077d4:	10c035c3 	ldbu	r3,215(r2)
  8077d8:	e0bfff17 	ldw	r2,-4(fp)
  8077dc:	10c069c5 	stb	r3,423(r2)
  d->_pg179 = d->_g179;
  8077e0:	e0bfff17 	ldw	r2,-4(fp)
  8077e4:	10c03c83 	ldbu	r3,242(r2)
  8077e8:	e0bfff17 	ldw	r2,-4(fp)
  8077ec:	10c06a05 	stb	r3,424(r2)
  d->_pg181_e3 = d->_g181_e3;
  8077f0:	e0bfff17 	ldw	r2,-4(fp)
  8077f4:	10c06183 	ldbu	r3,390(r2)
  8077f8:	e0bfff17 	ldw	r2,-4(fp)
  8077fc:	10c06a45 	stb	r3,425(r2)
  d->_pg195 = d->_g195;
  807800:	e0bfff17 	ldw	r2,-4(fp)
  807804:	10c03f83 	ldbu	r3,254(r2)
  807808:	e0bfff17 	ldw	r2,-4(fp)
  80780c:	10c06a85 	stb	r3,426(r2)
  d->_pg173 = d->_g173;
  807810:	e0bfff17 	ldw	r2,-4(fp)
  807814:	10c03bc3 	ldbu	r3,239(r2)
  807818:	e0bfff17 	ldw	r2,-4(fp)
  80781c:	10c06ac5 	stb	r3,427(r2)
  d->_pg167 = d->_g167;
  807820:	e0bfff17 	ldw	r2,-4(fp)
  807824:	10c03a83 	ldbu	r3,234(r2)
  807828:	e0bfff17 	ldw	r2,-4(fp)
  80782c:	10c06b05 	stb	r3,428(r2)
  d->_pg176 = d->_g176;
  807830:	e0bfff17 	ldw	r2,-4(fp)
  807834:	10c03c43 	ldbu	r3,241(r2)
  807838:	e0bfff17 	ldw	r2,-4(fp)
  80783c:	10c06b45 	stb	r3,429(r2)
  d->_pg206 = d->_g206;
  807840:	e0bfff17 	ldw	r2,-4(fp)
  807844:	10c040c3 	ldbu	r3,259(r2)
  807848:	e0bfff17 	ldw	r2,-4(fp)
  80784c:	10c06b85 	stb	r3,430(r2)
  d->_pg213 = d->_g213;
  807850:	e0bfff17 	ldw	r2,-4(fp)
  807854:	10c04183 	ldbu	r3,262(r2)
  807858:	e0bfff17 	ldw	r2,-4(fp)
  80785c:	10c06bc5 	stb	r3,431(r2)
  d->_pg210 = d->_g210;
  807860:	e0bfff17 	ldw	r2,-4(fp)
  807864:	10c04103 	ldbu	r3,260(r2)
  807868:	e0bfff17 	ldw	r2,-4(fp)
  80786c:	10c06c05 	stb	r3,432(r2)
  d->_pg202 = d->_g202;
  807870:	e0bfff17 	ldw	r2,-4(fp)
  807874:	10c04043 	ldbu	r3,257(r2)
  807878:	e0bfff17 	ldw	r2,-4(fp)
  80787c:	10c06c45 	stb	r3,433(r2)
  d->_pg231 = d->_g231;
  807880:	e0bfff17 	ldw	r2,-4(fp)
  807884:	10c04443 	ldbu	r3,273(r2)
  807888:	e0bfff17 	ldw	r2,-4(fp)
  80788c:	10c06c85 	stb	r3,434(r2)
  d->_pg211_e1 = d->_g211_e1;
  807890:	e0bfff17 	ldw	r2,-4(fp)
  807894:	10c062c3 	ldbu	r3,395(r2)
  807898:	e0bfff17 	ldw	r2,-4(fp)
  80789c:	10c06cc5 	stb	r3,435(r2)
  d->_GO = 0;
  8078a0:	e0bfff17 	ldw	r2,-4(fp)
  8078a4:	10004545 	stb	zero,277(r2)
}
  8078a8:	0001883a 	nop
  8078ac:	e037883a 	mov	sp,fp
  8078b0:	dfc00117 	ldw	ra,4(sp)
  8078b4:	df000017 	ldw	fp,0(sp)
  8078b8:	dec00204 	addi	sp,sp,8
  8078bc:	f800283a 	ret

008078c0 <uart_tx>:
#include "system.h"
#include "altera_avalon_uart_regs.h"


// uart sends 1 char
void uart_tx(char character_to_send) {
  8078c0:	defffe04 	addi	sp,sp,-8
  8078c4:	df000115 	stw	fp,4(sp)
  8078c8:	df000104 	addi	fp,sp,4
  8078cc:	2005883a 	mov	r2,r4
  8078d0:	e0bfff05 	stb	r2,-4(fp)
    while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK)); //wait til ready to transmit
  8078d4:	0001883a 	nop
  8078d8:	00804074 	movhi	r2,257
  8078dc:	10841204 	addi	r2,r2,4168
  8078e0:	10800037 	ldwio	r2,0(r2)
  8078e4:	1080100c 	andi	r2,r2,64
  8078e8:	103ffb26 	beq	r2,zero,8078d8 <__alt_mem_onchip_mem+0xff7ff8d8>
    IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, character_to_send);
  8078ec:	e0ffff07 	ldb	r3,-4(fp)
  8078f0:	00804074 	movhi	r2,257
  8078f4:	10841104 	addi	r2,r2,4164
  8078f8:	10c00035 	stwio	r3,0(r2)
}
  8078fc:	0001883a 	nop
  807900:	e037883a 	mov	sp,fp
  807904:	df000017 	ldw	fp,0(sp)
  807908:	dec00104 	addi	sp,sp,4
  80790c:	f800283a 	ret

00807910 <uart_rx>:

// uart checks if recieved a char
int uart_rx(char * character_to_receive) {
  807910:	defffe04 	addi	sp,sp,-8
  807914:	df000115 	stw	fp,4(sp)
  807918:	df000104 	addi	fp,sp,4
  80791c:	e13fff15 	stw	r4,-4(fp)
    if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK) { //if data is available
  807920:	00804074 	movhi	r2,257
  807924:	10841204 	addi	r2,r2,4168
  807928:	10800037 	ldwio	r2,0(r2)
  80792c:	1080200c 	andi	r2,r2,128
  807930:	10000826 	beq	r2,zero,807954 <uart_rx+0x44>
        * character_to_receive = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE); //store data
  807934:	00804074 	movhi	r2,257
  807938:	10841004 	addi	r2,r2,4160
  80793c:	10800037 	ldwio	r2,0(r2)
  807940:	1007883a 	mov	r3,r2
  807944:	e0bfff17 	ldw	r2,-4(fp)
  807948:	10c00005 	stb	r3,0(r2)
        return 1;
  80794c:	00800044 	movi	r2,1
  807950:	00000106 	br	807958 <uart_rx+0x48>
    }
    return 0;
  807954:	0005883a 	mov	r2,zero
}
  807958:	e037883a 	mov	sp,fp
  80795c:	df000017 	ldw	fp,0(sp)
  807960:	dec00104 	addi	sp,sp,4
  807964:	f800283a 	ret

00807968 <__adddf3>:
  807968:	02c00434 	movhi	r11,16
  80796c:	5affffc4 	addi	r11,r11,-1
  807970:	2806d7fa 	srli	r3,r5,31
  807974:	2ad4703a 	and	r10,r5,r11
  807978:	3ad2703a 	and	r9,r7,r11
  80797c:	3804d53a 	srli	r2,r7,20
  807980:	3018d77a 	srli	r12,r6,29
  807984:	280ad53a 	srli	r5,r5,20
  807988:	501490fa 	slli	r10,r10,3
  80798c:	2010d77a 	srli	r8,r4,29
  807990:	481290fa 	slli	r9,r9,3
  807994:	380ed7fa 	srli	r7,r7,31
  807998:	defffb04 	addi	sp,sp,-20
  80799c:	dc800215 	stw	r18,8(sp)
  8079a0:	dc400115 	stw	r17,4(sp)
  8079a4:	dc000015 	stw	r16,0(sp)
  8079a8:	dfc00415 	stw	ra,16(sp)
  8079ac:	dcc00315 	stw	r19,12(sp)
  8079b0:	1c803fcc 	andi	r18,r3,255
  8079b4:	2c01ffcc 	andi	r16,r5,2047
  8079b8:	5210b03a 	or	r8,r10,r8
  8079bc:	202290fa 	slli	r17,r4,3
  8079c0:	1081ffcc 	andi	r2,r2,2047
  8079c4:	4b12b03a 	or	r9,r9,r12
  8079c8:	300c90fa 	slli	r6,r6,3
  8079cc:	91c07526 	beq	r18,r7,807ba4 <__adddf3+0x23c>
  8079d0:	8087c83a 	sub	r3,r16,r2
  8079d4:	00c0ab0e 	bge	zero,r3,807c84 <__adddf3+0x31c>
  8079d8:	10002a1e 	bne	r2,zero,807a84 <__adddf3+0x11c>
  8079dc:	4984b03a 	or	r2,r9,r6
  8079e0:	1000961e 	bne	r2,zero,807c3c <__adddf3+0x2d4>
  8079e4:	888001cc 	andi	r2,r17,7
  8079e8:	10000726 	beq	r2,zero,807a08 <__adddf3+0xa0>
  8079ec:	888003cc 	andi	r2,r17,15
  8079f0:	00c00104 	movi	r3,4
  8079f4:	10c00426 	beq	r2,r3,807a08 <__adddf3+0xa0>
  8079f8:	88c7883a 	add	r3,r17,r3
  8079fc:	1c63803a 	cmpltu	r17,r3,r17
  807a00:	4451883a 	add	r8,r8,r17
  807a04:	1823883a 	mov	r17,r3
  807a08:	4080202c 	andhi	r2,r8,128
  807a0c:	10005926 	beq	r2,zero,807b74 <__adddf3+0x20c>
  807a10:	84000044 	addi	r16,r16,1
  807a14:	0081ffc4 	movi	r2,2047
  807a18:	8080ba26 	beq	r16,r2,807d04 <__adddf3+0x39c>
  807a1c:	00bfe034 	movhi	r2,65408
  807a20:	10bfffc4 	addi	r2,r2,-1
  807a24:	4090703a 	and	r8,r8,r2
  807a28:	4004977a 	slli	r2,r8,29
  807a2c:	4010927a 	slli	r8,r8,9
  807a30:	8822d0fa 	srli	r17,r17,3
  807a34:	8401ffcc 	andi	r16,r16,2047
  807a38:	4010d33a 	srli	r8,r8,12
  807a3c:	9007883a 	mov	r3,r18
  807a40:	1444b03a 	or	r2,r2,r17
  807a44:	8401ffcc 	andi	r16,r16,2047
  807a48:	8020953a 	slli	r16,r16,20
  807a4c:	18c03fcc 	andi	r3,r3,255
  807a50:	01000434 	movhi	r4,16
  807a54:	213fffc4 	addi	r4,r4,-1
  807a58:	180697fa 	slli	r3,r3,31
  807a5c:	4110703a 	and	r8,r8,r4
  807a60:	4410b03a 	or	r8,r8,r16
  807a64:	40c6b03a 	or	r3,r8,r3
  807a68:	dfc00417 	ldw	ra,16(sp)
  807a6c:	dcc00317 	ldw	r19,12(sp)
  807a70:	dc800217 	ldw	r18,8(sp)
  807a74:	dc400117 	ldw	r17,4(sp)
  807a78:	dc000017 	ldw	r16,0(sp)
  807a7c:	dec00504 	addi	sp,sp,20
  807a80:	f800283a 	ret
  807a84:	0081ffc4 	movi	r2,2047
  807a88:	80bfd626 	beq	r16,r2,8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807a8c:	4a402034 	orhi	r9,r9,128
  807a90:	00800e04 	movi	r2,56
  807a94:	10c09f16 	blt	r2,r3,807d14 <__adddf3+0x3ac>
  807a98:	008007c4 	movi	r2,31
  807a9c:	10c0c216 	blt	r2,r3,807da8 <__adddf3+0x440>
  807aa0:	00800804 	movi	r2,32
  807aa4:	10c5c83a 	sub	r2,r2,r3
  807aa8:	488a983a 	sll	r5,r9,r2
  807aac:	30c8d83a 	srl	r4,r6,r3
  807ab0:	3084983a 	sll	r2,r6,r2
  807ab4:	48c6d83a 	srl	r3,r9,r3
  807ab8:	290cb03a 	or	r6,r5,r4
  807abc:	1004c03a 	cmpne	r2,r2,zero
  807ac0:	308cb03a 	or	r6,r6,r2
  807ac4:	898dc83a 	sub	r6,r17,r6
  807ac8:	89a3803a 	cmpltu	r17,r17,r6
  807acc:	40d1c83a 	sub	r8,r8,r3
  807ad0:	4451c83a 	sub	r8,r8,r17
  807ad4:	3023883a 	mov	r17,r6
  807ad8:	4080202c 	andhi	r2,r8,128
  807adc:	10002326 	beq	r2,zero,807b6c <__adddf3+0x204>
  807ae0:	04c02034 	movhi	r19,128
  807ae4:	9cffffc4 	addi	r19,r19,-1
  807ae8:	44e6703a 	and	r19,r8,r19
  807aec:	98007626 	beq	r19,zero,807cc8 <__adddf3+0x360>
  807af0:	9809883a 	mov	r4,r19
  807af4:	0808dbc0 	call	808dbc <__clzsi2>
  807af8:	10fffe04 	addi	r3,r2,-8
  807afc:	010007c4 	movi	r4,31
  807b00:	20c07716 	blt	r4,r3,807ce0 <__adddf3+0x378>
  807b04:	00800804 	movi	r2,32
  807b08:	10c5c83a 	sub	r2,r2,r3
  807b0c:	8884d83a 	srl	r2,r17,r2
  807b10:	98d0983a 	sll	r8,r19,r3
  807b14:	88e2983a 	sll	r17,r17,r3
  807b18:	1204b03a 	or	r2,r2,r8
  807b1c:	1c007416 	blt	r3,r16,807cf0 <__adddf3+0x388>
  807b20:	1c21c83a 	sub	r16,r3,r16
  807b24:	82000044 	addi	r8,r16,1
  807b28:	00c007c4 	movi	r3,31
  807b2c:	1a009116 	blt	r3,r8,807d74 <__adddf3+0x40c>
  807b30:	00c00804 	movi	r3,32
  807b34:	1a07c83a 	sub	r3,r3,r8
  807b38:	8a08d83a 	srl	r4,r17,r8
  807b3c:	88e2983a 	sll	r17,r17,r3
  807b40:	10c6983a 	sll	r3,r2,r3
  807b44:	1210d83a 	srl	r8,r2,r8
  807b48:	8804c03a 	cmpne	r2,r17,zero
  807b4c:	1906b03a 	or	r3,r3,r4
  807b50:	18a2b03a 	or	r17,r3,r2
  807b54:	0021883a 	mov	r16,zero
  807b58:	003fa206 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807b5c:	1890b03a 	or	r8,r3,r2
  807b60:	40017d26 	beq	r8,zero,808158 <__adddf3+0x7f0>
  807b64:	1011883a 	mov	r8,r2
  807b68:	1823883a 	mov	r17,r3
  807b6c:	888001cc 	andi	r2,r17,7
  807b70:	103f9e1e 	bne	r2,zero,8079ec <__alt_mem_onchip_mem+0xff7ff9ec>
  807b74:	4004977a 	slli	r2,r8,29
  807b78:	8822d0fa 	srli	r17,r17,3
  807b7c:	4010d0fa 	srli	r8,r8,3
  807b80:	9007883a 	mov	r3,r18
  807b84:	1444b03a 	or	r2,r2,r17
  807b88:	0101ffc4 	movi	r4,2047
  807b8c:	81002426 	beq	r16,r4,807c20 <__adddf3+0x2b8>
  807b90:	8120703a 	and	r16,r16,r4
  807b94:	01000434 	movhi	r4,16
  807b98:	213fffc4 	addi	r4,r4,-1
  807b9c:	4110703a 	and	r8,r8,r4
  807ba0:	003fa806 	br	807a44 <__alt_mem_onchip_mem+0xff7ffa44>
  807ba4:	8089c83a 	sub	r4,r16,r2
  807ba8:	01005e0e 	bge	zero,r4,807d24 <__adddf3+0x3bc>
  807bac:	10002b26 	beq	r2,zero,807c5c <__adddf3+0x2f4>
  807bb0:	0081ffc4 	movi	r2,2047
  807bb4:	80bf8b26 	beq	r16,r2,8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807bb8:	4a402034 	orhi	r9,r9,128
  807bbc:	00800e04 	movi	r2,56
  807bc0:	1100a40e 	bge	r2,r4,807e54 <__adddf3+0x4ec>
  807bc4:	498cb03a 	or	r6,r9,r6
  807bc8:	300ac03a 	cmpne	r5,r6,zero
  807bcc:	0013883a 	mov	r9,zero
  807bd0:	2c4b883a 	add	r5,r5,r17
  807bd4:	2c63803a 	cmpltu	r17,r5,r17
  807bd8:	4a11883a 	add	r8,r9,r8
  807bdc:	8a11883a 	add	r8,r17,r8
  807be0:	2823883a 	mov	r17,r5
  807be4:	4080202c 	andhi	r2,r8,128
  807be8:	103fe026 	beq	r2,zero,807b6c <__alt_mem_onchip_mem+0xff7ffb6c>
  807bec:	84000044 	addi	r16,r16,1
  807bf0:	0081ffc4 	movi	r2,2047
  807bf4:	8080d226 	beq	r16,r2,807f40 <__adddf3+0x5d8>
  807bf8:	00bfe034 	movhi	r2,65408
  807bfc:	10bfffc4 	addi	r2,r2,-1
  807c00:	4090703a 	and	r8,r8,r2
  807c04:	880ad07a 	srli	r5,r17,1
  807c08:	400897fa 	slli	r4,r8,31
  807c0c:	88c0004c 	andi	r3,r17,1
  807c10:	28e2b03a 	or	r17,r5,r3
  807c14:	4010d07a 	srli	r8,r8,1
  807c18:	2462b03a 	or	r17,r4,r17
  807c1c:	003f7106 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807c20:	4088b03a 	or	r4,r8,r2
  807c24:	20014526 	beq	r4,zero,80813c <__adddf3+0x7d4>
  807c28:	01000434 	movhi	r4,16
  807c2c:	42000234 	orhi	r8,r8,8
  807c30:	213fffc4 	addi	r4,r4,-1
  807c34:	4110703a 	and	r8,r8,r4
  807c38:	003f8206 	br	807a44 <__alt_mem_onchip_mem+0xff7ffa44>
  807c3c:	18ffffc4 	addi	r3,r3,-1
  807c40:	1800491e 	bne	r3,zero,807d68 <__adddf3+0x400>
  807c44:	898bc83a 	sub	r5,r17,r6
  807c48:	8963803a 	cmpltu	r17,r17,r5
  807c4c:	4251c83a 	sub	r8,r8,r9
  807c50:	4451c83a 	sub	r8,r8,r17
  807c54:	2823883a 	mov	r17,r5
  807c58:	003f9f06 	br	807ad8 <__alt_mem_onchip_mem+0xff7ffad8>
  807c5c:	4984b03a 	or	r2,r9,r6
  807c60:	103f6026 	beq	r2,zero,8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807c64:	213fffc4 	addi	r4,r4,-1
  807c68:	2000931e 	bne	r4,zero,807eb8 <__adddf3+0x550>
  807c6c:	898d883a 	add	r6,r17,r6
  807c70:	3463803a 	cmpltu	r17,r6,r17
  807c74:	4251883a 	add	r8,r8,r9
  807c78:	8a11883a 	add	r8,r17,r8
  807c7c:	3023883a 	mov	r17,r6
  807c80:	003fd806 	br	807be4 <__alt_mem_onchip_mem+0xff7ffbe4>
  807c84:	1800541e 	bne	r3,zero,807dd8 <__adddf3+0x470>
  807c88:	80800044 	addi	r2,r16,1
  807c8c:	1081ffcc 	andi	r2,r2,2047
  807c90:	00c00044 	movi	r3,1
  807c94:	1880a00e 	bge	r3,r2,807f18 <__adddf3+0x5b0>
  807c98:	8989c83a 	sub	r4,r17,r6
  807c9c:	8905803a 	cmpltu	r2,r17,r4
  807ca0:	4267c83a 	sub	r19,r8,r9
  807ca4:	98a7c83a 	sub	r19,r19,r2
  807ca8:	9880202c 	andhi	r2,r19,128
  807cac:	10006326 	beq	r2,zero,807e3c <__adddf3+0x4d4>
  807cb0:	3463c83a 	sub	r17,r6,r17
  807cb4:	4a07c83a 	sub	r3,r9,r8
  807cb8:	344d803a 	cmpltu	r6,r6,r17
  807cbc:	19a7c83a 	sub	r19,r3,r6
  807cc0:	3825883a 	mov	r18,r7
  807cc4:	983f8a1e 	bne	r19,zero,807af0 <__alt_mem_onchip_mem+0xff7ffaf0>
  807cc8:	8809883a 	mov	r4,r17
  807ccc:	0808dbc0 	call	808dbc <__clzsi2>
  807cd0:	10800804 	addi	r2,r2,32
  807cd4:	10fffe04 	addi	r3,r2,-8
  807cd8:	010007c4 	movi	r4,31
  807cdc:	20ff890e 	bge	r4,r3,807b04 <__alt_mem_onchip_mem+0xff7ffb04>
  807ce0:	10bff604 	addi	r2,r2,-40
  807ce4:	8884983a 	sll	r2,r17,r2
  807ce8:	0023883a 	mov	r17,zero
  807cec:	1c3f8c0e 	bge	r3,r16,807b20 <__alt_mem_onchip_mem+0xff7ffb20>
  807cf0:	023fe034 	movhi	r8,65408
  807cf4:	423fffc4 	addi	r8,r8,-1
  807cf8:	80e1c83a 	sub	r16,r16,r3
  807cfc:	1210703a 	and	r8,r2,r8
  807d00:	003f3806 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807d04:	9007883a 	mov	r3,r18
  807d08:	0011883a 	mov	r8,zero
  807d0c:	0005883a 	mov	r2,zero
  807d10:	003f4c06 	br	807a44 <__alt_mem_onchip_mem+0xff7ffa44>
  807d14:	498cb03a 	or	r6,r9,r6
  807d18:	300cc03a 	cmpne	r6,r6,zero
  807d1c:	0007883a 	mov	r3,zero
  807d20:	003f6806 	br	807ac4 <__alt_mem_onchip_mem+0xff7ffac4>
  807d24:	20009c1e 	bne	r4,zero,807f98 <__adddf3+0x630>
  807d28:	80800044 	addi	r2,r16,1
  807d2c:	1141ffcc 	andi	r5,r2,2047
  807d30:	01000044 	movi	r4,1
  807d34:	2140670e 	bge	r4,r5,807ed4 <__adddf3+0x56c>
  807d38:	0101ffc4 	movi	r4,2047
  807d3c:	11007f26 	beq	r2,r4,807f3c <__adddf3+0x5d4>
  807d40:	898d883a 	add	r6,r17,r6
  807d44:	4247883a 	add	r3,r8,r9
  807d48:	3451803a 	cmpltu	r8,r6,r17
  807d4c:	40d1883a 	add	r8,r8,r3
  807d50:	402297fa 	slli	r17,r8,31
  807d54:	300cd07a 	srli	r6,r6,1
  807d58:	4010d07a 	srli	r8,r8,1
  807d5c:	1021883a 	mov	r16,r2
  807d60:	89a2b03a 	or	r17,r17,r6
  807d64:	003f1f06 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807d68:	0081ffc4 	movi	r2,2047
  807d6c:	80bf481e 	bne	r16,r2,807a90 <__alt_mem_onchip_mem+0xff7ffa90>
  807d70:	003f1c06 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807d74:	843ff844 	addi	r16,r16,-31
  807d78:	01000804 	movi	r4,32
  807d7c:	1406d83a 	srl	r3,r2,r16
  807d80:	41005026 	beq	r8,r4,807ec4 <__adddf3+0x55c>
  807d84:	01001004 	movi	r4,64
  807d88:	2211c83a 	sub	r8,r4,r8
  807d8c:	1204983a 	sll	r2,r2,r8
  807d90:	88a2b03a 	or	r17,r17,r2
  807d94:	8822c03a 	cmpne	r17,r17,zero
  807d98:	1c62b03a 	or	r17,r3,r17
  807d9c:	0011883a 	mov	r8,zero
  807da0:	0021883a 	mov	r16,zero
  807da4:	003f7106 	br	807b6c <__alt_mem_onchip_mem+0xff7ffb6c>
  807da8:	193ff804 	addi	r4,r3,-32
  807dac:	00800804 	movi	r2,32
  807db0:	4908d83a 	srl	r4,r9,r4
  807db4:	18804526 	beq	r3,r2,807ecc <__adddf3+0x564>
  807db8:	00801004 	movi	r2,64
  807dbc:	10c5c83a 	sub	r2,r2,r3
  807dc0:	4886983a 	sll	r3,r9,r2
  807dc4:	198cb03a 	or	r6,r3,r6
  807dc8:	300cc03a 	cmpne	r6,r6,zero
  807dcc:	218cb03a 	or	r6,r4,r6
  807dd0:	0007883a 	mov	r3,zero
  807dd4:	003f3b06 	br	807ac4 <__alt_mem_onchip_mem+0xff7ffac4>
  807dd8:	80002a26 	beq	r16,zero,807e84 <__adddf3+0x51c>
  807ddc:	0101ffc4 	movi	r4,2047
  807de0:	11006826 	beq	r2,r4,807f84 <__adddf3+0x61c>
  807de4:	00c7c83a 	sub	r3,zero,r3
  807de8:	42002034 	orhi	r8,r8,128
  807dec:	01000e04 	movi	r4,56
  807df0:	20c07c16 	blt	r4,r3,807fe4 <__adddf3+0x67c>
  807df4:	010007c4 	movi	r4,31
  807df8:	20c0da16 	blt	r4,r3,808164 <__adddf3+0x7fc>
  807dfc:	01000804 	movi	r4,32
  807e00:	20c9c83a 	sub	r4,r4,r3
  807e04:	4114983a 	sll	r10,r8,r4
  807e08:	88cad83a 	srl	r5,r17,r3
  807e0c:	8908983a 	sll	r4,r17,r4
  807e10:	40c6d83a 	srl	r3,r8,r3
  807e14:	5162b03a 	or	r17,r10,r5
  807e18:	2008c03a 	cmpne	r4,r4,zero
  807e1c:	8922b03a 	or	r17,r17,r4
  807e20:	3463c83a 	sub	r17,r6,r17
  807e24:	48c7c83a 	sub	r3,r9,r3
  807e28:	344d803a 	cmpltu	r6,r6,r17
  807e2c:	1991c83a 	sub	r8,r3,r6
  807e30:	1021883a 	mov	r16,r2
  807e34:	3825883a 	mov	r18,r7
  807e38:	003f2706 	br	807ad8 <__alt_mem_onchip_mem+0xff7ffad8>
  807e3c:	24d0b03a 	or	r8,r4,r19
  807e40:	40001b1e 	bne	r8,zero,807eb0 <__adddf3+0x548>
  807e44:	0005883a 	mov	r2,zero
  807e48:	0007883a 	mov	r3,zero
  807e4c:	0021883a 	mov	r16,zero
  807e50:	003f4d06 	br	807b88 <__alt_mem_onchip_mem+0xff7ffb88>
  807e54:	008007c4 	movi	r2,31
  807e58:	11003c16 	blt	r2,r4,807f4c <__adddf3+0x5e4>
  807e5c:	00800804 	movi	r2,32
  807e60:	1105c83a 	sub	r2,r2,r4
  807e64:	488e983a 	sll	r7,r9,r2
  807e68:	310ad83a 	srl	r5,r6,r4
  807e6c:	3084983a 	sll	r2,r6,r2
  807e70:	4912d83a 	srl	r9,r9,r4
  807e74:	394ab03a 	or	r5,r7,r5
  807e78:	1004c03a 	cmpne	r2,r2,zero
  807e7c:	288ab03a 	or	r5,r5,r2
  807e80:	003f5306 	br	807bd0 <__alt_mem_onchip_mem+0xff7ffbd0>
  807e84:	4448b03a 	or	r4,r8,r17
  807e88:	20003e26 	beq	r4,zero,807f84 <__adddf3+0x61c>
  807e8c:	00c6303a 	nor	r3,zero,r3
  807e90:	18003a1e 	bne	r3,zero,807f7c <__adddf3+0x614>
  807e94:	3463c83a 	sub	r17,r6,r17
  807e98:	4a07c83a 	sub	r3,r9,r8
  807e9c:	344d803a 	cmpltu	r6,r6,r17
  807ea0:	1991c83a 	sub	r8,r3,r6
  807ea4:	1021883a 	mov	r16,r2
  807ea8:	3825883a 	mov	r18,r7
  807eac:	003f0a06 	br	807ad8 <__alt_mem_onchip_mem+0xff7ffad8>
  807eb0:	2023883a 	mov	r17,r4
  807eb4:	003f0d06 	br	807aec <__alt_mem_onchip_mem+0xff7ffaec>
  807eb8:	0081ffc4 	movi	r2,2047
  807ebc:	80bf3f1e 	bne	r16,r2,807bbc <__alt_mem_onchip_mem+0xff7ffbbc>
  807ec0:	003ec806 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807ec4:	0005883a 	mov	r2,zero
  807ec8:	003fb106 	br	807d90 <__alt_mem_onchip_mem+0xff7ffd90>
  807ecc:	0007883a 	mov	r3,zero
  807ed0:	003fbc06 	br	807dc4 <__alt_mem_onchip_mem+0xff7ffdc4>
  807ed4:	4444b03a 	or	r2,r8,r17
  807ed8:	8000871e 	bne	r16,zero,8080f8 <__adddf3+0x790>
  807edc:	1000ba26 	beq	r2,zero,8081c8 <__adddf3+0x860>
  807ee0:	4984b03a 	or	r2,r9,r6
  807ee4:	103ebf26 	beq	r2,zero,8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807ee8:	8985883a 	add	r2,r17,r6
  807eec:	4247883a 	add	r3,r8,r9
  807ef0:	1451803a 	cmpltu	r8,r2,r17
  807ef4:	40d1883a 	add	r8,r8,r3
  807ef8:	40c0202c 	andhi	r3,r8,128
  807efc:	1023883a 	mov	r17,r2
  807f00:	183f1a26 	beq	r3,zero,807b6c <__alt_mem_onchip_mem+0xff7ffb6c>
  807f04:	00bfe034 	movhi	r2,65408
  807f08:	10bfffc4 	addi	r2,r2,-1
  807f0c:	2021883a 	mov	r16,r4
  807f10:	4090703a 	and	r8,r8,r2
  807f14:	003eb306 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807f18:	4444b03a 	or	r2,r8,r17
  807f1c:	8000291e 	bne	r16,zero,807fc4 <__adddf3+0x65c>
  807f20:	10004b1e 	bne	r2,zero,808050 <__adddf3+0x6e8>
  807f24:	4990b03a 	or	r8,r9,r6
  807f28:	40008b26 	beq	r8,zero,808158 <__adddf3+0x7f0>
  807f2c:	4811883a 	mov	r8,r9
  807f30:	3023883a 	mov	r17,r6
  807f34:	3825883a 	mov	r18,r7
  807f38:	003eaa06 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807f3c:	1021883a 	mov	r16,r2
  807f40:	0011883a 	mov	r8,zero
  807f44:	0005883a 	mov	r2,zero
  807f48:	003f0f06 	br	807b88 <__alt_mem_onchip_mem+0xff7ffb88>
  807f4c:	217ff804 	addi	r5,r4,-32
  807f50:	00800804 	movi	r2,32
  807f54:	494ad83a 	srl	r5,r9,r5
  807f58:	20807d26 	beq	r4,r2,808150 <__adddf3+0x7e8>
  807f5c:	00801004 	movi	r2,64
  807f60:	1109c83a 	sub	r4,r2,r4
  807f64:	4912983a 	sll	r9,r9,r4
  807f68:	498cb03a 	or	r6,r9,r6
  807f6c:	300cc03a 	cmpne	r6,r6,zero
  807f70:	298ab03a 	or	r5,r5,r6
  807f74:	0013883a 	mov	r9,zero
  807f78:	003f1506 	br	807bd0 <__alt_mem_onchip_mem+0xff7ffbd0>
  807f7c:	0101ffc4 	movi	r4,2047
  807f80:	113f9a1e 	bne	r2,r4,807dec <__alt_mem_onchip_mem+0xff7ffdec>
  807f84:	4811883a 	mov	r8,r9
  807f88:	3023883a 	mov	r17,r6
  807f8c:	1021883a 	mov	r16,r2
  807f90:	3825883a 	mov	r18,r7
  807f94:	003e9306 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807f98:	8000161e 	bne	r16,zero,807ff4 <__adddf3+0x68c>
  807f9c:	444ab03a 	or	r5,r8,r17
  807fa0:	28005126 	beq	r5,zero,8080e8 <__adddf3+0x780>
  807fa4:	0108303a 	nor	r4,zero,r4
  807fa8:	20004d1e 	bne	r4,zero,8080e0 <__adddf3+0x778>
  807fac:	89a3883a 	add	r17,r17,r6
  807fb0:	4253883a 	add	r9,r8,r9
  807fb4:	898d803a 	cmpltu	r6,r17,r6
  807fb8:	3251883a 	add	r8,r6,r9
  807fbc:	1021883a 	mov	r16,r2
  807fc0:	003f0806 	br	807be4 <__alt_mem_onchip_mem+0xff7ffbe4>
  807fc4:	1000301e 	bne	r2,zero,808088 <__adddf3+0x720>
  807fc8:	4984b03a 	or	r2,r9,r6
  807fcc:	10007126 	beq	r2,zero,808194 <__adddf3+0x82c>
  807fd0:	4811883a 	mov	r8,r9
  807fd4:	3023883a 	mov	r17,r6
  807fd8:	3825883a 	mov	r18,r7
  807fdc:	0401ffc4 	movi	r16,2047
  807fe0:	003e8006 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  807fe4:	4462b03a 	or	r17,r8,r17
  807fe8:	8822c03a 	cmpne	r17,r17,zero
  807fec:	0007883a 	mov	r3,zero
  807ff0:	003f8b06 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>
  807ff4:	0141ffc4 	movi	r5,2047
  807ff8:	11403b26 	beq	r2,r5,8080e8 <__adddf3+0x780>
  807ffc:	0109c83a 	sub	r4,zero,r4
  808000:	42002034 	orhi	r8,r8,128
  808004:	01400e04 	movi	r5,56
  808008:	29006716 	blt	r5,r4,8081a8 <__adddf3+0x840>
  80800c:	014007c4 	movi	r5,31
  808010:	29007016 	blt	r5,r4,8081d4 <__adddf3+0x86c>
  808014:	01400804 	movi	r5,32
  808018:	290bc83a 	sub	r5,r5,r4
  80801c:	4154983a 	sll	r10,r8,r5
  808020:	890ed83a 	srl	r7,r17,r4
  808024:	894a983a 	sll	r5,r17,r5
  808028:	4108d83a 	srl	r4,r8,r4
  80802c:	51e2b03a 	or	r17,r10,r7
  808030:	280ac03a 	cmpne	r5,r5,zero
  808034:	8962b03a 	or	r17,r17,r5
  808038:	89a3883a 	add	r17,r17,r6
  80803c:	2253883a 	add	r9,r4,r9
  808040:	898d803a 	cmpltu	r6,r17,r6
  808044:	3251883a 	add	r8,r6,r9
  808048:	1021883a 	mov	r16,r2
  80804c:	003ee506 	br	807be4 <__alt_mem_onchip_mem+0xff7ffbe4>
  808050:	4984b03a 	or	r2,r9,r6
  808054:	103e6326 	beq	r2,zero,8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  808058:	8987c83a 	sub	r3,r17,r6
  80805c:	88c9803a 	cmpltu	r4,r17,r3
  808060:	4245c83a 	sub	r2,r8,r9
  808064:	1105c83a 	sub	r2,r2,r4
  808068:	1100202c 	andhi	r4,r2,128
  80806c:	203ebb26 	beq	r4,zero,807b5c <__alt_mem_onchip_mem+0xff7ffb5c>
  808070:	3463c83a 	sub	r17,r6,r17
  808074:	4a07c83a 	sub	r3,r9,r8
  808078:	344d803a 	cmpltu	r6,r6,r17
  80807c:	1991c83a 	sub	r8,r3,r6
  808080:	3825883a 	mov	r18,r7
  808084:	003e5706 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  808088:	4984b03a 	or	r2,r9,r6
  80808c:	10002e26 	beq	r2,zero,808148 <__adddf3+0x7e0>
  808090:	4004d0fa 	srli	r2,r8,3
  808094:	8822d0fa 	srli	r17,r17,3
  808098:	4010977a 	slli	r8,r8,29
  80809c:	10c0022c 	andhi	r3,r2,8
  8080a0:	4462b03a 	or	r17,r8,r17
  8080a4:	18000826 	beq	r3,zero,8080c8 <__adddf3+0x760>
  8080a8:	4808d0fa 	srli	r4,r9,3
  8080ac:	20c0022c 	andhi	r3,r4,8
  8080b0:	1800051e 	bne	r3,zero,8080c8 <__adddf3+0x760>
  8080b4:	300cd0fa 	srli	r6,r6,3
  8080b8:	4806977a 	slli	r3,r9,29
  8080bc:	2005883a 	mov	r2,r4
  8080c0:	3825883a 	mov	r18,r7
  8080c4:	19a2b03a 	or	r17,r3,r6
  8080c8:	8810d77a 	srli	r8,r17,29
  8080cc:	100490fa 	slli	r2,r2,3
  8080d0:	882290fa 	slli	r17,r17,3
  8080d4:	0401ffc4 	movi	r16,2047
  8080d8:	4090b03a 	or	r8,r8,r2
  8080dc:	003e4106 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  8080e0:	0141ffc4 	movi	r5,2047
  8080e4:	117fc71e 	bne	r2,r5,808004 <__alt_mem_onchip_mem+0xff800004>
  8080e8:	4811883a 	mov	r8,r9
  8080ec:	3023883a 	mov	r17,r6
  8080f0:	1021883a 	mov	r16,r2
  8080f4:	003e3b06 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  8080f8:	10002f26 	beq	r2,zero,8081b8 <__adddf3+0x850>
  8080fc:	4984b03a 	or	r2,r9,r6
  808100:	10001126 	beq	r2,zero,808148 <__adddf3+0x7e0>
  808104:	4004d0fa 	srli	r2,r8,3
  808108:	8822d0fa 	srli	r17,r17,3
  80810c:	4010977a 	slli	r8,r8,29
  808110:	10c0022c 	andhi	r3,r2,8
  808114:	4462b03a 	or	r17,r8,r17
  808118:	183feb26 	beq	r3,zero,8080c8 <__alt_mem_onchip_mem+0xff8000c8>
  80811c:	4808d0fa 	srli	r4,r9,3
  808120:	20c0022c 	andhi	r3,r4,8
  808124:	183fe81e 	bne	r3,zero,8080c8 <__alt_mem_onchip_mem+0xff8000c8>
  808128:	300cd0fa 	srli	r6,r6,3
  80812c:	4806977a 	slli	r3,r9,29
  808130:	2005883a 	mov	r2,r4
  808134:	19a2b03a 	or	r17,r3,r6
  808138:	003fe306 	br	8080c8 <__alt_mem_onchip_mem+0xff8000c8>
  80813c:	0011883a 	mov	r8,zero
  808140:	0005883a 	mov	r2,zero
  808144:	003e3f06 	br	807a44 <__alt_mem_onchip_mem+0xff7ffa44>
  808148:	0401ffc4 	movi	r16,2047
  80814c:	003e2506 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  808150:	0013883a 	mov	r9,zero
  808154:	003f8406 	br	807f68 <__alt_mem_onchip_mem+0xff7fff68>
  808158:	0005883a 	mov	r2,zero
  80815c:	0007883a 	mov	r3,zero
  808160:	003e8906 	br	807b88 <__alt_mem_onchip_mem+0xff7ffb88>
  808164:	197ff804 	addi	r5,r3,-32
  808168:	01000804 	movi	r4,32
  80816c:	414ad83a 	srl	r5,r8,r5
  808170:	19002426 	beq	r3,r4,808204 <__adddf3+0x89c>
  808174:	01001004 	movi	r4,64
  808178:	20c7c83a 	sub	r3,r4,r3
  80817c:	40c6983a 	sll	r3,r8,r3
  808180:	1c46b03a 	or	r3,r3,r17
  808184:	1806c03a 	cmpne	r3,r3,zero
  808188:	28e2b03a 	or	r17,r5,r3
  80818c:	0007883a 	mov	r3,zero
  808190:	003f2306 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>
  808194:	0007883a 	mov	r3,zero
  808198:	5811883a 	mov	r8,r11
  80819c:	00bfffc4 	movi	r2,-1
  8081a0:	0401ffc4 	movi	r16,2047
  8081a4:	003e7806 	br	807b88 <__alt_mem_onchip_mem+0xff7ffb88>
  8081a8:	4462b03a 	or	r17,r8,r17
  8081ac:	8822c03a 	cmpne	r17,r17,zero
  8081b0:	0009883a 	mov	r4,zero
  8081b4:	003fa006 	br	808038 <__alt_mem_onchip_mem+0xff800038>
  8081b8:	4811883a 	mov	r8,r9
  8081bc:	3023883a 	mov	r17,r6
  8081c0:	0401ffc4 	movi	r16,2047
  8081c4:	003e0706 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  8081c8:	4811883a 	mov	r8,r9
  8081cc:	3023883a 	mov	r17,r6
  8081d0:	003e0406 	br	8079e4 <__alt_mem_onchip_mem+0xff7ff9e4>
  8081d4:	21fff804 	addi	r7,r4,-32
  8081d8:	01400804 	movi	r5,32
  8081dc:	41ced83a 	srl	r7,r8,r7
  8081e0:	21400a26 	beq	r4,r5,80820c <__adddf3+0x8a4>
  8081e4:	01401004 	movi	r5,64
  8081e8:	2909c83a 	sub	r4,r5,r4
  8081ec:	4108983a 	sll	r4,r8,r4
  8081f0:	2448b03a 	or	r4,r4,r17
  8081f4:	2008c03a 	cmpne	r4,r4,zero
  8081f8:	3922b03a 	or	r17,r7,r4
  8081fc:	0009883a 	mov	r4,zero
  808200:	003f8d06 	br	808038 <__alt_mem_onchip_mem+0xff800038>
  808204:	0007883a 	mov	r3,zero
  808208:	003fdd06 	br	808180 <__alt_mem_onchip_mem+0xff800180>
  80820c:	0009883a 	mov	r4,zero
  808210:	003ff706 	br	8081f0 <__alt_mem_onchip_mem+0xff8001f0>

00808214 <__gedf2>:
  808214:	2804d53a 	srli	r2,r5,20
  808218:	3806d53a 	srli	r3,r7,20
  80821c:	02000434 	movhi	r8,16
  808220:	423fffc4 	addi	r8,r8,-1
  808224:	1081ffcc 	andi	r2,r2,2047
  808228:	0241ffc4 	movi	r9,2047
  80822c:	2a14703a 	and	r10,r5,r8
  808230:	18c1ffcc 	andi	r3,r3,2047
  808234:	3a10703a 	and	r8,r7,r8
  808238:	280ad7fa 	srli	r5,r5,31
  80823c:	380ed7fa 	srli	r7,r7,31
  808240:	12401d26 	beq	r2,r9,8082b8 <__gedf2+0xa4>
  808244:	0241ffc4 	movi	r9,2047
  808248:	1a401226 	beq	r3,r9,808294 <__gedf2+0x80>
  80824c:	1000081e 	bne	r2,zero,808270 <__gedf2+0x5c>
  808250:	2296b03a 	or	r11,r4,r10
  808254:	5813003a 	cmpeq	r9,r11,zero
  808258:	1800091e 	bne	r3,zero,808280 <__gedf2+0x6c>
  80825c:	3218b03a 	or	r12,r6,r8
  808260:	6000071e 	bne	r12,zero,808280 <__gedf2+0x6c>
  808264:	0005883a 	mov	r2,zero
  808268:	5800101e 	bne	r11,zero,8082ac <__gedf2+0x98>
  80826c:	f800283a 	ret
  808270:	18000c1e 	bne	r3,zero,8082a4 <__gedf2+0x90>
  808274:	3212b03a 	or	r9,r6,r8
  808278:	48000c26 	beq	r9,zero,8082ac <__gedf2+0x98>
  80827c:	0013883a 	mov	r9,zero
  808280:	39c03fcc 	andi	r7,r7,255
  808284:	48000826 	beq	r9,zero,8082a8 <__gedf2+0x94>
  808288:	38000926 	beq	r7,zero,8082b0 <__gedf2+0x9c>
  80828c:	00800044 	movi	r2,1
  808290:	f800283a 	ret
  808294:	3212b03a 	or	r9,r6,r8
  808298:	483fec26 	beq	r9,zero,80824c <__alt_mem_onchip_mem+0xff80024c>
  80829c:	00bfff84 	movi	r2,-2
  8082a0:	f800283a 	ret
  8082a4:	39c03fcc 	andi	r7,r7,255
  8082a8:	29c00626 	beq	r5,r7,8082c4 <__gedf2+0xb0>
  8082ac:	283ff726 	beq	r5,zero,80828c <__alt_mem_onchip_mem+0xff80028c>
  8082b0:	00bfffc4 	movi	r2,-1
  8082b4:	f800283a 	ret
  8082b8:	2292b03a 	or	r9,r4,r10
  8082bc:	483fe126 	beq	r9,zero,808244 <__alt_mem_onchip_mem+0xff800244>
  8082c0:	003ff606 	br	80829c <__alt_mem_onchip_mem+0xff80029c>
  8082c4:	18bff916 	blt	r3,r2,8082ac <__alt_mem_onchip_mem+0xff8002ac>
  8082c8:	10c00316 	blt	r2,r3,8082d8 <__gedf2+0xc4>
  8082cc:	42bff736 	bltu	r8,r10,8082ac <__alt_mem_onchip_mem+0xff8002ac>
  8082d0:	52000326 	beq	r10,r8,8082e0 <__gedf2+0xcc>
  8082d4:	5200042e 	bgeu	r10,r8,8082e8 <__gedf2+0xd4>
  8082d8:	283fec1e 	bne	r5,zero,80828c <__alt_mem_onchip_mem+0xff80028c>
  8082dc:	003ff406 	br	8082b0 <__alt_mem_onchip_mem+0xff8002b0>
  8082e0:	313ff236 	bltu	r6,r4,8082ac <__alt_mem_onchip_mem+0xff8002ac>
  8082e4:	21bffc36 	bltu	r4,r6,8082d8 <__alt_mem_onchip_mem+0xff8002d8>
  8082e8:	0005883a 	mov	r2,zero
  8082ec:	f800283a 	ret

008082f0 <__ledf2>:
  8082f0:	2804d53a 	srli	r2,r5,20
  8082f4:	3810d53a 	srli	r8,r7,20
  8082f8:	00c00434 	movhi	r3,16
  8082fc:	18ffffc4 	addi	r3,r3,-1
  808300:	1081ffcc 	andi	r2,r2,2047
  808304:	0241ffc4 	movi	r9,2047
  808308:	28d4703a 	and	r10,r5,r3
  80830c:	4201ffcc 	andi	r8,r8,2047
  808310:	38c6703a 	and	r3,r7,r3
  808314:	280ad7fa 	srli	r5,r5,31
  808318:	380ed7fa 	srli	r7,r7,31
  80831c:	12401f26 	beq	r2,r9,80839c <__ledf2+0xac>
  808320:	0241ffc4 	movi	r9,2047
  808324:	42401426 	beq	r8,r9,808378 <__ledf2+0x88>
  808328:	1000091e 	bne	r2,zero,808350 <__ledf2+0x60>
  80832c:	2296b03a 	or	r11,r4,r10
  808330:	5813003a 	cmpeq	r9,r11,zero
  808334:	29403fcc 	andi	r5,r5,255
  808338:	40000a1e 	bne	r8,zero,808364 <__ledf2+0x74>
  80833c:	30d8b03a 	or	r12,r6,r3
  808340:	6000081e 	bne	r12,zero,808364 <__ledf2+0x74>
  808344:	0005883a 	mov	r2,zero
  808348:	5800111e 	bne	r11,zero,808390 <__ledf2+0xa0>
  80834c:	f800283a 	ret
  808350:	29403fcc 	andi	r5,r5,255
  808354:	40000c1e 	bne	r8,zero,808388 <__ledf2+0x98>
  808358:	30d2b03a 	or	r9,r6,r3
  80835c:	48000c26 	beq	r9,zero,808390 <__ledf2+0xa0>
  808360:	0013883a 	mov	r9,zero
  808364:	39c03fcc 	andi	r7,r7,255
  808368:	48000826 	beq	r9,zero,80838c <__ledf2+0x9c>
  80836c:	38001126 	beq	r7,zero,8083b4 <__ledf2+0xc4>
  808370:	00800044 	movi	r2,1
  808374:	f800283a 	ret
  808378:	30d2b03a 	or	r9,r6,r3
  80837c:	483fea26 	beq	r9,zero,808328 <__alt_mem_onchip_mem+0xff800328>
  808380:	00800084 	movi	r2,2
  808384:	f800283a 	ret
  808388:	39c03fcc 	andi	r7,r7,255
  80838c:	39400726 	beq	r7,r5,8083ac <__ledf2+0xbc>
  808390:	2800081e 	bne	r5,zero,8083b4 <__ledf2+0xc4>
  808394:	00800044 	movi	r2,1
  808398:	f800283a 	ret
  80839c:	2292b03a 	or	r9,r4,r10
  8083a0:	483fdf26 	beq	r9,zero,808320 <__alt_mem_onchip_mem+0xff800320>
  8083a4:	00800084 	movi	r2,2
  8083a8:	f800283a 	ret
  8083ac:	4080030e 	bge	r8,r2,8083bc <__ledf2+0xcc>
  8083b0:	383fef26 	beq	r7,zero,808370 <__alt_mem_onchip_mem+0xff800370>
  8083b4:	00bfffc4 	movi	r2,-1
  8083b8:	f800283a 	ret
  8083bc:	123feb16 	blt	r2,r8,80836c <__alt_mem_onchip_mem+0xff80036c>
  8083c0:	1abff336 	bltu	r3,r10,808390 <__alt_mem_onchip_mem+0xff800390>
  8083c4:	50c00326 	beq	r10,r3,8083d4 <__ledf2+0xe4>
  8083c8:	50c0042e 	bgeu	r10,r3,8083dc <__ledf2+0xec>
  8083cc:	283fe81e 	bne	r5,zero,808370 <__alt_mem_onchip_mem+0xff800370>
  8083d0:	003ff806 	br	8083b4 <__alt_mem_onchip_mem+0xff8003b4>
  8083d4:	313fee36 	bltu	r6,r4,808390 <__alt_mem_onchip_mem+0xff800390>
  8083d8:	21bffc36 	bltu	r4,r6,8083cc <__alt_mem_onchip_mem+0xff8003cc>
  8083dc:	0005883a 	mov	r2,zero
  8083e0:	f800283a 	ret

008083e4 <__subdf3>:
  8083e4:	02000434 	movhi	r8,16
  8083e8:	423fffc4 	addi	r8,r8,-1
  8083ec:	defffb04 	addi	sp,sp,-20
  8083f0:	2a14703a 	and	r10,r5,r8
  8083f4:	3812d53a 	srli	r9,r7,20
  8083f8:	3a10703a 	and	r8,r7,r8
  8083fc:	2006d77a 	srli	r3,r4,29
  808400:	3004d77a 	srli	r2,r6,29
  808404:	dc000015 	stw	r16,0(sp)
  808408:	501490fa 	slli	r10,r10,3
  80840c:	2820d53a 	srli	r16,r5,20
  808410:	401090fa 	slli	r8,r8,3
  808414:	dc800215 	stw	r18,8(sp)
  808418:	dc400115 	stw	r17,4(sp)
  80841c:	dfc00415 	stw	ra,16(sp)
  808420:	202290fa 	slli	r17,r4,3
  808424:	dcc00315 	stw	r19,12(sp)
  808428:	4a41ffcc 	andi	r9,r9,2047
  80842c:	0101ffc4 	movi	r4,2047
  808430:	2824d7fa 	srli	r18,r5,31
  808434:	8401ffcc 	andi	r16,r16,2047
  808438:	50c6b03a 	or	r3,r10,r3
  80843c:	380ed7fa 	srli	r7,r7,31
  808440:	408ab03a 	or	r5,r8,r2
  808444:	300c90fa 	slli	r6,r6,3
  808448:	49009626 	beq	r9,r4,8086a4 <__subdf3+0x2c0>
  80844c:	39c0005c 	xori	r7,r7,1
  808450:	8245c83a 	sub	r2,r16,r9
  808454:	3c807426 	beq	r7,r18,808628 <__subdf3+0x244>
  808458:	0080af0e 	bge	zero,r2,808718 <__subdf3+0x334>
  80845c:	48002a1e 	bne	r9,zero,808508 <__subdf3+0x124>
  808460:	2988b03a 	or	r4,r5,r6
  808464:	20009a1e 	bne	r4,zero,8086d0 <__subdf3+0x2ec>
  808468:	888001cc 	andi	r2,r17,7
  80846c:	10000726 	beq	r2,zero,80848c <__subdf3+0xa8>
  808470:	888003cc 	andi	r2,r17,15
  808474:	01000104 	movi	r4,4
  808478:	11000426 	beq	r2,r4,80848c <__subdf3+0xa8>
  80847c:	890b883a 	add	r5,r17,r4
  808480:	2c63803a 	cmpltu	r17,r5,r17
  808484:	1c47883a 	add	r3,r3,r17
  808488:	2823883a 	mov	r17,r5
  80848c:	1880202c 	andhi	r2,r3,128
  808490:	10005926 	beq	r2,zero,8085f8 <__subdf3+0x214>
  808494:	84000044 	addi	r16,r16,1
  808498:	0081ffc4 	movi	r2,2047
  80849c:	8080be26 	beq	r16,r2,808798 <__subdf3+0x3b4>
  8084a0:	017fe034 	movhi	r5,65408
  8084a4:	297fffc4 	addi	r5,r5,-1
  8084a8:	1946703a 	and	r3,r3,r5
  8084ac:	1804977a 	slli	r2,r3,29
  8084b0:	1806927a 	slli	r3,r3,9
  8084b4:	8822d0fa 	srli	r17,r17,3
  8084b8:	8401ffcc 	andi	r16,r16,2047
  8084bc:	180ad33a 	srli	r5,r3,12
  8084c0:	9100004c 	andi	r4,r18,1
  8084c4:	1444b03a 	or	r2,r2,r17
  8084c8:	80c1ffcc 	andi	r3,r16,2047
  8084cc:	1820953a 	slli	r16,r3,20
  8084d0:	20c03fcc 	andi	r3,r4,255
  8084d4:	180897fa 	slli	r4,r3,31
  8084d8:	00c00434 	movhi	r3,16
  8084dc:	18ffffc4 	addi	r3,r3,-1
  8084e0:	28c6703a 	and	r3,r5,r3
  8084e4:	1c06b03a 	or	r3,r3,r16
  8084e8:	1906b03a 	or	r3,r3,r4
  8084ec:	dfc00417 	ldw	ra,16(sp)
  8084f0:	dcc00317 	ldw	r19,12(sp)
  8084f4:	dc800217 	ldw	r18,8(sp)
  8084f8:	dc400117 	ldw	r17,4(sp)
  8084fc:	dc000017 	ldw	r16,0(sp)
  808500:	dec00504 	addi	sp,sp,20
  808504:	f800283a 	ret
  808508:	0101ffc4 	movi	r4,2047
  80850c:	813fd626 	beq	r16,r4,808468 <__alt_mem_onchip_mem+0xff800468>
  808510:	29402034 	orhi	r5,r5,128
  808514:	01000e04 	movi	r4,56
  808518:	2080a316 	blt	r4,r2,8087a8 <__subdf3+0x3c4>
  80851c:	010007c4 	movi	r4,31
  808520:	2080c616 	blt	r4,r2,80883c <__subdf3+0x458>
  808524:	01000804 	movi	r4,32
  808528:	2089c83a 	sub	r4,r4,r2
  80852c:	2910983a 	sll	r8,r5,r4
  808530:	308ed83a 	srl	r7,r6,r2
  808534:	3108983a 	sll	r4,r6,r4
  808538:	2884d83a 	srl	r2,r5,r2
  80853c:	41ccb03a 	or	r6,r8,r7
  808540:	2008c03a 	cmpne	r4,r4,zero
  808544:	310cb03a 	or	r6,r6,r4
  808548:	898dc83a 	sub	r6,r17,r6
  80854c:	89a3803a 	cmpltu	r17,r17,r6
  808550:	1887c83a 	sub	r3,r3,r2
  808554:	1c47c83a 	sub	r3,r3,r17
  808558:	3023883a 	mov	r17,r6
  80855c:	1880202c 	andhi	r2,r3,128
  808560:	10002326 	beq	r2,zero,8085f0 <__subdf3+0x20c>
  808564:	04c02034 	movhi	r19,128
  808568:	9cffffc4 	addi	r19,r19,-1
  80856c:	1ce6703a 	and	r19,r3,r19
  808570:	98007a26 	beq	r19,zero,80875c <__subdf3+0x378>
  808574:	9809883a 	mov	r4,r19
  808578:	0808dbc0 	call	808dbc <__clzsi2>
  80857c:	113ffe04 	addi	r4,r2,-8
  808580:	00c007c4 	movi	r3,31
  808584:	19007b16 	blt	r3,r4,808774 <__subdf3+0x390>
  808588:	00800804 	movi	r2,32
  80858c:	1105c83a 	sub	r2,r2,r4
  808590:	8884d83a 	srl	r2,r17,r2
  808594:	9906983a 	sll	r3,r19,r4
  808598:	8922983a 	sll	r17,r17,r4
  80859c:	10c4b03a 	or	r2,r2,r3
  8085a0:	24007816 	blt	r4,r16,808784 <__subdf3+0x3a0>
  8085a4:	2421c83a 	sub	r16,r4,r16
  8085a8:	80c00044 	addi	r3,r16,1
  8085ac:	010007c4 	movi	r4,31
  8085b0:	20c09516 	blt	r4,r3,808808 <__subdf3+0x424>
  8085b4:	01400804 	movi	r5,32
  8085b8:	28cbc83a 	sub	r5,r5,r3
  8085bc:	88c8d83a 	srl	r4,r17,r3
  8085c0:	8962983a 	sll	r17,r17,r5
  8085c4:	114a983a 	sll	r5,r2,r5
  8085c8:	10c6d83a 	srl	r3,r2,r3
  8085cc:	8804c03a 	cmpne	r2,r17,zero
  8085d0:	290ab03a 	or	r5,r5,r4
  8085d4:	28a2b03a 	or	r17,r5,r2
  8085d8:	0021883a 	mov	r16,zero
  8085dc:	003fa206 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  8085e0:	2090b03a 	or	r8,r4,r2
  8085e4:	40018e26 	beq	r8,zero,808c20 <__subdf3+0x83c>
  8085e8:	1007883a 	mov	r3,r2
  8085ec:	2023883a 	mov	r17,r4
  8085f0:	888001cc 	andi	r2,r17,7
  8085f4:	103f9e1e 	bne	r2,zero,808470 <__alt_mem_onchip_mem+0xff800470>
  8085f8:	1804977a 	slli	r2,r3,29
  8085fc:	8822d0fa 	srli	r17,r17,3
  808600:	1810d0fa 	srli	r8,r3,3
  808604:	9100004c 	andi	r4,r18,1
  808608:	1444b03a 	or	r2,r2,r17
  80860c:	00c1ffc4 	movi	r3,2047
  808610:	80c02826 	beq	r16,r3,8086b4 <__subdf3+0x2d0>
  808614:	01400434 	movhi	r5,16
  808618:	297fffc4 	addi	r5,r5,-1
  80861c:	80e0703a 	and	r16,r16,r3
  808620:	414a703a 	and	r5,r8,r5
  808624:	003fa806 	br	8084c8 <__alt_mem_onchip_mem+0xff8004c8>
  808628:	0080630e 	bge	zero,r2,8087b8 <__subdf3+0x3d4>
  80862c:	48003026 	beq	r9,zero,8086f0 <__subdf3+0x30c>
  808630:	0101ffc4 	movi	r4,2047
  808634:	813f8c26 	beq	r16,r4,808468 <__alt_mem_onchip_mem+0xff800468>
  808638:	29402034 	orhi	r5,r5,128
  80863c:	01000e04 	movi	r4,56
  808640:	2080a90e 	bge	r4,r2,8088e8 <__subdf3+0x504>
  808644:	298cb03a 	or	r6,r5,r6
  808648:	3012c03a 	cmpne	r9,r6,zero
  80864c:	0005883a 	mov	r2,zero
  808650:	4c53883a 	add	r9,r9,r17
  808654:	4c63803a 	cmpltu	r17,r9,r17
  808658:	10c7883a 	add	r3,r2,r3
  80865c:	88c7883a 	add	r3,r17,r3
  808660:	4823883a 	mov	r17,r9
  808664:	1880202c 	andhi	r2,r3,128
  808668:	1000d026 	beq	r2,zero,8089ac <__subdf3+0x5c8>
  80866c:	84000044 	addi	r16,r16,1
  808670:	0081ffc4 	movi	r2,2047
  808674:	8080fe26 	beq	r16,r2,808a70 <__subdf3+0x68c>
  808678:	00bfe034 	movhi	r2,65408
  80867c:	10bfffc4 	addi	r2,r2,-1
  808680:	1886703a 	and	r3,r3,r2
  808684:	880ad07a 	srli	r5,r17,1
  808688:	180497fa 	slli	r2,r3,31
  80868c:	8900004c 	andi	r4,r17,1
  808690:	2922b03a 	or	r17,r5,r4
  808694:	1806d07a 	srli	r3,r3,1
  808698:	1462b03a 	or	r17,r2,r17
  80869c:	3825883a 	mov	r18,r7
  8086a0:	003f7106 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  8086a4:	2984b03a 	or	r2,r5,r6
  8086a8:	103f6826 	beq	r2,zero,80844c <__alt_mem_onchip_mem+0xff80044c>
  8086ac:	39c03fcc 	andi	r7,r7,255
  8086b0:	003f6706 	br	808450 <__alt_mem_onchip_mem+0xff800450>
  8086b4:	4086b03a 	or	r3,r8,r2
  8086b8:	18015226 	beq	r3,zero,808c04 <__subdf3+0x820>
  8086bc:	00c00434 	movhi	r3,16
  8086c0:	41400234 	orhi	r5,r8,8
  8086c4:	18ffffc4 	addi	r3,r3,-1
  8086c8:	28ca703a 	and	r5,r5,r3
  8086cc:	003f7e06 	br	8084c8 <__alt_mem_onchip_mem+0xff8004c8>
  8086d0:	10bfffc4 	addi	r2,r2,-1
  8086d4:	1000491e 	bne	r2,zero,8087fc <__subdf3+0x418>
  8086d8:	898fc83a 	sub	r7,r17,r6
  8086dc:	89e3803a 	cmpltu	r17,r17,r7
  8086e0:	1947c83a 	sub	r3,r3,r5
  8086e4:	1c47c83a 	sub	r3,r3,r17
  8086e8:	3823883a 	mov	r17,r7
  8086ec:	003f9b06 	br	80855c <__alt_mem_onchip_mem+0xff80055c>
  8086f0:	2988b03a 	or	r4,r5,r6
  8086f4:	203f5c26 	beq	r4,zero,808468 <__alt_mem_onchip_mem+0xff800468>
  8086f8:	10bfffc4 	addi	r2,r2,-1
  8086fc:	1000931e 	bne	r2,zero,80894c <__subdf3+0x568>
  808700:	898d883a 	add	r6,r17,r6
  808704:	3463803a 	cmpltu	r17,r6,r17
  808708:	1947883a 	add	r3,r3,r5
  80870c:	88c7883a 	add	r3,r17,r3
  808710:	3023883a 	mov	r17,r6
  808714:	003fd306 	br	808664 <__alt_mem_onchip_mem+0xff800664>
  808718:	1000541e 	bne	r2,zero,80886c <__subdf3+0x488>
  80871c:	80800044 	addi	r2,r16,1
  808720:	1081ffcc 	andi	r2,r2,2047
  808724:	01000044 	movi	r4,1
  808728:	2080a20e 	bge	r4,r2,8089b4 <__subdf3+0x5d0>
  80872c:	8989c83a 	sub	r4,r17,r6
  808730:	8905803a 	cmpltu	r2,r17,r4
  808734:	1967c83a 	sub	r19,r3,r5
  808738:	98a7c83a 	sub	r19,r19,r2
  80873c:	9880202c 	andhi	r2,r19,128
  808740:	10006326 	beq	r2,zero,8088d0 <__subdf3+0x4ec>
  808744:	3463c83a 	sub	r17,r6,r17
  808748:	28c7c83a 	sub	r3,r5,r3
  80874c:	344d803a 	cmpltu	r6,r6,r17
  808750:	19a7c83a 	sub	r19,r3,r6
  808754:	3825883a 	mov	r18,r7
  808758:	983f861e 	bne	r19,zero,808574 <__alt_mem_onchip_mem+0xff800574>
  80875c:	8809883a 	mov	r4,r17
  808760:	0808dbc0 	call	808dbc <__clzsi2>
  808764:	10800804 	addi	r2,r2,32
  808768:	113ffe04 	addi	r4,r2,-8
  80876c:	00c007c4 	movi	r3,31
  808770:	193f850e 	bge	r3,r4,808588 <__alt_mem_onchip_mem+0xff800588>
  808774:	10bff604 	addi	r2,r2,-40
  808778:	8884983a 	sll	r2,r17,r2
  80877c:	0023883a 	mov	r17,zero
  808780:	243f880e 	bge	r4,r16,8085a4 <__alt_mem_onchip_mem+0xff8005a4>
  808784:	00ffe034 	movhi	r3,65408
  808788:	18ffffc4 	addi	r3,r3,-1
  80878c:	8121c83a 	sub	r16,r16,r4
  808790:	10c6703a 	and	r3,r2,r3
  808794:	003f3406 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808798:	9100004c 	andi	r4,r18,1
  80879c:	000b883a 	mov	r5,zero
  8087a0:	0005883a 	mov	r2,zero
  8087a4:	003f4806 	br	8084c8 <__alt_mem_onchip_mem+0xff8004c8>
  8087a8:	298cb03a 	or	r6,r5,r6
  8087ac:	300cc03a 	cmpne	r6,r6,zero
  8087b0:	0005883a 	mov	r2,zero
  8087b4:	003f6406 	br	808548 <__alt_mem_onchip_mem+0xff800548>
  8087b8:	10009a1e 	bne	r2,zero,808a24 <__subdf3+0x640>
  8087bc:	82400044 	addi	r9,r16,1
  8087c0:	4881ffcc 	andi	r2,r9,2047
  8087c4:	02800044 	movi	r10,1
  8087c8:	5080670e 	bge	r10,r2,808968 <__subdf3+0x584>
  8087cc:	0081ffc4 	movi	r2,2047
  8087d0:	4880af26 	beq	r9,r2,808a90 <__subdf3+0x6ac>
  8087d4:	898d883a 	add	r6,r17,r6
  8087d8:	1945883a 	add	r2,r3,r5
  8087dc:	3447803a 	cmpltu	r3,r6,r17
  8087e0:	1887883a 	add	r3,r3,r2
  8087e4:	182297fa 	slli	r17,r3,31
  8087e8:	300cd07a 	srli	r6,r6,1
  8087ec:	1806d07a 	srli	r3,r3,1
  8087f0:	4821883a 	mov	r16,r9
  8087f4:	89a2b03a 	or	r17,r17,r6
  8087f8:	003f1b06 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  8087fc:	0101ffc4 	movi	r4,2047
  808800:	813f441e 	bne	r16,r4,808514 <__alt_mem_onchip_mem+0xff800514>
  808804:	003f1806 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808808:	843ff844 	addi	r16,r16,-31
  80880c:	01400804 	movi	r5,32
  808810:	1408d83a 	srl	r4,r2,r16
  808814:	19405026 	beq	r3,r5,808958 <__subdf3+0x574>
  808818:	01401004 	movi	r5,64
  80881c:	28c7c83a 	sub	r3,r5,r3
  808820:	10c4983a 	sll	r2,r2,r3
  808824:	88a2b03a 	or	r17,r17,r2
  808828:	8822c03a 	cmpne	r17,r17,zero
  80882c:	2462b03a 	or	r17,r4,r17
  808830:	0007883a 	mov	r3,zero
  808834:	0021883a 	mov	r16,zero
  808838:	003f6d06 	br	8085f0 <__alt_mem_onchip_mem+0xff8005f0>
  80883c:	11fff804 	addi	r7,r2,-32
  808840:	01000804 	movi	r4,32
  808844:	29ced83a 	srl	r7,r5,r7
  808848:	11004526 	beq	r2,r4,808960 <__subdf3+0x57c>
  80884c:	01001004 	movi	r4,64
  808850:	2089c83a 	sub	r4,r4,r2
  808854:	2904983a 	sll	r2,r5,r4
  808858:	118cb03a 	or	r6,r2,r6
  80885c:	300cc03a 	cmpne	r6,r6,zero
  808860:	398cb03a 	or	r6,r7,r6
  808864:	0005883a 	mov	r2,zero
  808868:	003f3706 	br	808548 <__alt_mem_onchip_mem+0xff800548>
  80886c:	80002a26 	beq	r16,zero,808918 <__subdf3+0x534>
  808870:	0101ffc4 	movi	r4,2047
  808874:	49006626 	beq	r9,r4,808a10 <__subdf3+0x62c>
  808878:	0085c83a 	sub	r2,zero,r2
  80887c:	18c02034 	orhi	r3,r3,128
  808880:	01000e04 	movi	r4,56
  808884:	20807e16 	blt	r4,r2,808a80 <__subdf3+0x69c>
  808888:	010007c4 	movi	r4,31
  80888c:	2080e716 	blt	r4,r2,808c2c <__subdf3+0x848>
  808890:	01000804 	movi	r4,32
  808894:	2089c83a 	sub	r4,r4,r2
  808898:	1914983a 	sll	r10,r3,r4
  80889c:	8890d83a 	srl	r8,r17,r2
  8088a0:	8908983a 	sll	r4,r17,r4
  8088a4:	1884d83a 	srl	r2,r3,r2
  8088a8:	5222b03a 	or	r17,r10,r8
  8088ac:	2006c03a 	cmpne	r3,r4,zero
  8088b0:	88e2b03a 	or	r17,r17,r3
  8088b4:	3463c83a 	sub	r17,r6,r17
  8088b8:	2885c83a 	sub	r2,r5,r2
  8088bc:	344d803a 	cmpltu	r6,r6,r17
  8088c0:	1187c83a 	sub	r3,r2,r6
  8088c4:	4821883a 	mov	r16,r9
  8088c8:	3825883a 	mov	r18,r7
  8088cc:	003f2306 	br	80855c <__alt_mem_onchip_mem+0xff80055c>
  8088d0:	24d0b03a 	or	r8,r4,r19
  8088d4:	40001b1e 	bne	r8,zero,808944 <__subdf3+0x560>
  8088d8:	0005883a 	mov	r2,zero
  8088dc:	0009883a 	mov	r4,zero
  8088e0:	0021883a 	mov	r16,zero
  8088e4:	003f4906 	br	80860c <__alt_mem_onchip_mem+0xff80060c>
  8088e8:	010007c4 	movi	r4,31
  8088ec:	20803a16 	blt	r4,r2,8089d8 <__subdf3+0x5f4>
  8088f0:	01000804 	movi	r4,32
  8088f4:	2089c83a 	sub	r4,r4,r2
  8088f8:	2912983a 	sll	r9,r5,r4
  8088fc:	3090d83a 	srl	r8,r6,r2
  808900:	3108983a 	sll	r4,r6,r4
  808904:	2884d83a 	srl	r2,r5,r2
  808908:	4a12b03a 	or	r9,r9,r8
  80890c:	2008c03a 	cmpne	r4,r4,zero
  808910:	4912b03a 	or	r9,r9,r4
  808914:	003f4e06 	br	808650 <__alt_mem_onchip_mem+0xff800650>
  808918:	1c48b03a 	or	r4,r3,r17
  80891c:	20003c26 	beq	r4,zero,808a10 <__subdf3+0x62c>
  808920:	0084303a 	nor	r2,zero,r2
  808924:	1000381e 	bne	r2,zero,808a08 <__subdf3+0x624>
  808928:	3463c83a 	sub	r17,r6,r17
  80892c:	28c5c83a 	sub	r2,r5,r3
  808930:	344d803a 	cmpltu	r6,r6,r17
  808934:	1187c83a 	sub	r3,r2,r6
  808938:	4821883a 	mov	r16,r9
  80893c:	3825883a 	mov	r18,r7
  808940:	003f0606 	br	80855c <__alt_mem_onchip_mem+0xff80055c>
  808944:	2023883a 	mov	r17,r4
  808948:	003f0906 	br	808570 <__alt_mem_onchip_mem+0xff800570>
  80894c:	0101ffc4 	movi	r4,2047
  808950:	813f3a1e 	bne	r16,r4,80863c <__alt_mem_onchip_mem+0xff80063c>
  808954:	003ec406 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808958:	0005883a 	mov	r2,zero
  80895c:	003fb106 	br	808824 <__alt_mem_onchip_mem+0xff800824>
  808960:	0005883a 	mov	r2,zero
  808964:	003fbc06 	br	808858 <__alt_mem_onchip_mem+0xff800858>
  808968:	1c44b03a 	or	r2,r3,r17
  80896c:	80008e1e 	bne	r16,zero,808ba8 <__subdf3+0x7c4>
  808970:	1000c826 	beq	r2,zero,808c94 <__subdf3+0x8b0>
  808974:	2984b03a 	or	r2,r5,r6
  808978:	103ebb26 	beq	r2,zero,808468 <__alt_mem_onchip_mem+0xff800468>
  80897c:	8989883a 	add	r4,r17,r6
  808980:	1945883a 	add	r2,r3,r5
  808984:	2447803a 	cmpltu	r3,r4,r17
  808988:	1887883a 	add	r3,r3,r2
  80898c:	1880202c 	andhi	r2,r3,128
  808990:	2023883a 	mov	r17,r4
  808994:	103f1626 	beq	r2,zero,8085f0 <__alt_mem_onchip_mem+0xff8005f0>
  808998:	00bfe034 	movhi	r2,65408
  80899c:	10bfffc4 	addi	r2,r2,-1
  8089a0:	5021883a 	mov	r16,r10
  8089a4:	1886703a 	and	r3,r3,r2
  8089a8:	003eaf06 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  8089ac:	3825883a 	mov	r18,r7
  8089b0:	003f0f06 	br	8085f0 <__alt_mem_onchip_mem+0xff8005f0>
  8089b4:	1c44b03a 	or	r2,r3,r17
  8089b8:	8000251e 	bne	r16,zero,808a50 <__subdf3+0x66c>
  8089bc:	1000661e 	bne	r2,zero,808b58 <__subdf3+0x774>
  8089c0:	2990b03a 	or	r8,r5,r6
  8089c4:	40009626 	beq	r8,zero,808c20 <__subdf3+0x83c>
  8089c8:	2807883a 	mov	r3,r5
  8089cc:	3023883a 	mov	r17,r6
  8089d0:	3825883a 	mov	r18,r7
  8089d4:	003ea406 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  8089d8:	127ff804 	addi	r9,r2,-32
  8089dc:	01000804 	movi	r4,32
  8089e0:	2a52d83a 	srl	r9,r5,r9
  8089e4:	11008c26 	beq	r2,r4,808c18 <__subdf3+0x834>
  8089e8:	01001004 	movi	r4,64
  8089ec:	2085c83a 	sub	r2,r4,r2
  8089f0:	2884983a 	sll	r2,r5,r2
  8089f4:	118cb03a 	or	r6,r2,r6
  8089f8:	300cc03a 	cmpne	r6,r6,zero
  8089fc:	4992b03a 	or	r9,r9,r6
  808a00:	0005883a 	mov	r2,zero
  808a04:	003f1206 	br	808650 <__alt_mem_onchip_mem+0xff800650>
  808a08:	0101ffc4 	movi	r4,2047
  808a0c:	493f9c1e 	bne	r9,r4,808880 <__alt_mem_onchip_mem+0xff800880>
  808a10:	2807883a 	mov	r3,r5
  808a14:	3023883a 	mov	r17,r6
  808a18:	4821883a 	mov	r16,r9
  808a1c:	3825883a 	mov	r18,r7
  808a20:	003e9106 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808a24:	80001f1e 	bne	r16,zero,808aa4 <__subdf3+0x6c0>
  808a28:	1c48b03a 	or	r4,r3,r17
  808a2c:	20005a26 	beq	r4,zero,808b98 <__subdf3+0x7b4>
  808a30:	0084303a 	nor	r2,zero,r2
  808a34:	1000561e 	bne	r2,zero,808b90 <__subdf3+0x7ac>
  808a38:	89a3883a 	add	r17,r17,r6
  808a3c:	1945883a 	add	r2,r3,r5
  808a40:	898d803a 	cmpltu	r6,r17,r6
  808a44:	3087883a 	add	r3,r6,r2
  808a48:	4821883a 	mov	r16,r9
  808a4c:	003f0506 	br	808664 <__alt_mem_onchip_mem+0xff800664>
  808a50:	10002b1e 	bne	r2,zero,808b00 <__subdf3+0x71c>
  808a54:	2984b03a 	or	r2,r5,r6
  808a58:	10008026 	beq	r2,zero,808c5c <__subdf3+0x878>
  808a5c:	2807883a 	mov	r3,r5
  808a60:	3023883a 	mov	r17,r6
  808a64:	3825883a 	mov	r18,r7
  808a68:	0401ffc4 	movi	r16,2047
  808a6c:	003e7e06 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808a70:	3809883a 	mov	r4,r7
  808a74:	0011883a 	mov	r8,zero
  808a78:	0005883a 	mov	r2,zero
  808a7c:	003ee306 	br	80860c <__alt_mem_onchip_mem+0xff80060c>
  808a80:	1c62b03a 	or	r17,r3,r17
  808a84:	8822c03a 	cmpne	r17,r17,zero
  808a88:	0005883a 	mov	r2,zero
  808a8c:	003f8906 	br	8088b4 <__alt_mem_onchip_mem+0xff8008b4>
  808a90:	3809883a 	mov	r4,r7
  808a94:	4821883a 	mov	r16,r9
  808a98:	0011883a 	mov	r8,zero
  808a9c:	0005883a 	mov	r2,zero
  808aa0:	003eda06 	br	80860c <__alt_mem_onchip_mem+0xff80060c>
  808aa4:	0101ffc4 	movi	r4,2047
  808aa8:	49003b26 	beq	r9,r4,808b98 <__subdf3+0x7b4>
  808aac:	0085c83a 	sub	r2,zero,r2
  808ab0:	18c02034 	orhi	r3,r3,128
  808ab4:	01000e04 	movi	r4,56
  808ab8:	20806e16 	blt	r4,r2,808c74 <__subdf3+0x890>
  808abc:	010007c4 	movi	r4,31
  808ac0:	20807716 	blt	r4,r2,808ca0 <__subdf3+0x8bc>
  808ac4:	01000804 	movi	r4,32
  808ac8:	2089c83a 	sub	r4,r4,r2
  808acc:	1914983a 	sll	r10,r3,r4
  808ad0:	8890d83a 	srl	r8,r17,r2
  808ad4:	8908983a 	sll	r4,r17,r4
  808ad8:	1884d83a 	srl	r2,r3,r2
  808adc:	5222b03a 	or	r17,r10,r8
  808ae0:	2006c03a 	cmpne	r3,r4,zero
  808ae4:	88e2b03a 	or	r17,r17,r3
  808ae8:	89a3883a 	add	r17,r17,r6
  808aec:	1145883a 	add	r2,r2,r5
  808af0:	898d803a 	cmpltu	r6,r17,r6
  808af4:	3087883a 	add	r3,r6,r2
  808af8:	4821883a 	mov	r16,r9
  808afc:	003ed906 	br	808664 <__alt_mem_onchip_mem+0xff800664>
  808b00:	2984b03a 	or	r2,r5,r6
  808b04:	10004226 	beq	r2,zero,808c10 <__subdf3+0x82c>
  808b08:	1808d0fa 	srli	r4,r3,3
  808b0c:	8822d0fa 	srli	r17,r17,3
  808b10:	1806977a 	slli	r3,r3,29
  808b14:	2080022c 	andhi	r2,r4,8
  808b18:	1c62b03a 	or	r17,r3,r17
  808b1c:	10000826 	beq	r2,zero,808b40 <__subdf3+0x75c>
  808b20:	2812d0fa 	srli	r9,r5,3
  808b24:	4880022c 	andhi	r2,r9,8
  808b28:	1000051e 	bne	r2,zero,808b40 <__subdf3+0x75c>
  808b2c:	300cd0fa 	srli	r6,r6,3
  808b30:	2804977a 	slli	r2,r5,29
  808b34:	4809883a 	mov	r4,r9
  808b38:	3825883a 	mov	r18,r7
  808b3c:	11a2b03a 	or	r17,r2,r6
  808b40:	8806d77a 	srli	r3,r17,29
  808b44:	200890fa 	slli	r4,r4,3
  808b48:	882290fa 	slli	r17,r17,3
  808b4c:	0401ffc4 	movi	r16,2047
  808b50:	1906b03a 	or	r3,r3,r4
  808b54:	003e4406 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808b58:	2984b03a 	or	r2,r5,r6
  808b5c:	103e4226 	beq	r2,zero,808468 <__alt_mem_onchip_mem+0xff800468>
  808b60:	8989c83a 	sub	r4,r17,r6
  808b64:	8911803a 	cmpltu	r8,r17,r4
  808b68:	1945c83a 	sub	r2,r3,r5
  808b6c:	1205c83a 	sub	r2,r2,r8
  808b70:	1200202c 	andhi	r8,r2,128
  808b74:	403e9a26 	beq	r8,zero,8085e0 <__alt_mem_onchip_mem+0xff8005e0>
  808b78:	3463c83a 	sub	r17,r6,r17
  808b7c:	28c5c83a 	sub	r2,r5,r3
  808b80:	344d803a 	cmpltu	r6,r6,r17
  808b84:	1187c83a 	sub	r3,r2,r6
  808b88:	3825883a 	mov	r18,r7
  808b8c:	003e3606 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808b90:	0101ffc4 	movi	r4,2047
  808b94:	493fc71e 	bne	r9,r4,808ab4 <__alt_mem_onchip_mem+0xff800ab4>
  808b98:	2807883a 	mov	r3,r5
  808b9c:	3023883a 	mov	r17,r6
  808ba0:	4821883a 	mov	r16,r9
  808ba4:	003e3006 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808ba8:	10003626 	beq	r2,zero,808c84 <__subdf3+0x8a0>
  808bac:	2984b03a 	or	r2,r5,r6
  808bb0:	10001726 	beq	r2,zero,808c10 <__subdf3+0x82c>
  808bb4:	1808d0fa 	srli	r4,r3,3
  808bb8:	8822d0fa 	srli	r17,r17,3
  808bbc:	1806977a 	slli	r3,r3,29
  808bc0:	2080022c 	andhi	r2,r4,8
  808bc4:	1c62b03a 	or	r17,r3,r17
  808bc8:	10000726 	beq	r2,zero,808be8 <__subdf3+0x804>
  808bcc:	2812d0fa 	srli	r9,r5,3
  808bd0:	4880022c 	andhi	r2,r9,8
  808bd4:	1000041e 	bne	r2,zero,808be8 <__subdf3+0x804>
  808bd8:	300cd0fa 	srli	r6,r6,3
  808bdc:	2804977a 	slli	r2,r5,29
  808be0:	4809883a 	mov	r4,r9
  808be4:	11a2b03a 	or	r17,r2,r6
  808be8:	8806d77a 	srli	r3,r17,29
  808bec:	200890fa 	slli	r4,r4,3
  808bf0:	882290fa 	slli	r17,r17,3
  808bf4:	3825883a 	mov	r18,r7
  808bf8:	1906b03a 	or	r3,r3,r4
  808bfc:	0401ffc4 	movi	r16,2047
  808c00:	003e1906 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808c04:	000b883a 	mov	r5,zero
  808c08:	0005883a 	mov	r2,zero
  808c0c:	003e2e06 	br	8084c8 <__alt_mem_onchip_mem+0xff8004c8>
  808c10:	0401ffc4 	movi	r16,2047
  808c14:	003e1406 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808c18:	0005883a 	mov	r2,zero
  808c1c:	003f7506 	br	8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808c20:	0005883a 	mov	r2,zero
  808c24:	0009883a 	mov	r4,zero
  808c28:	003e7806 	br	80860c <__alt_mem_onchip_mem+0xff80060c>
  808c2c:	123ff804 	addi	r8,r2,-32
  808c30:	01000804 	movi	r4,32
  808c34:	1a10d83a 	srl	r8,r3,r8
  808c38:	11002526 	beq	r2,r4,808cd0 <__subdf3+0x8ec>
  808c3c:	01001004 	movi	r4,64
  808c40:	2085c83a 	sub	r2,r4,r2
  808c44:	1884983a 	sll	r2,r3,r2
  808c48:	1444b03a 	or	r2,r2,r17
  808c4c:	1004c03a 	cmpne	r2,r2,zero
  808c50:	40a2b03a 	or	r17,r8,r2
  808c54:	0005883a 	mov	r2,zero
  808c58:	003f1606 	br	8088b4 <__alt_mem_onchip_mem+0xff8008b4>
  808c5c:	02000434 	movhi	r8,16
  808c60:	0009883a 	mov	r4,zero
  808c64:	423fffc4 	addi	r8,r8,-1
  808c68:	00bfffc4 	movi	r2,-1
  808c6c:	0401ffc4 	movi	r16,2047
  808c70:	003e6606 	br	80860c <__alt_mem_onchip_mem+0xff80060c>
  808c74:	1c62b03a 	or	r17,r3,r17
  808c78:	8822c03a 	cmpne	r17,r17,zero
  808c7c:	0005883a 	mov	r2,zero
  808c80:	003f9906 	br	808ae8 <__alt_mem_onchip_mem+0xff800ae8>
  808c84:	2807883a 	mov	r3,r5
  808c88:	3023883a 	mov	r17,r6
  808c8c:	0401ffc4 	movi	r16,2047
  808c90:	003df506 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808c94:	2807883a 	mov	r3,r5
  808c98:	3023883a 	mov	r17,r6
  808c9c:	003df206 	br	808468 <__alt_mem_onchip_mem+0xff800468>
  808ca0:	123ff804 	addi	r8,r2,-32
  808ca4:	01000804 	movi	r4,32
  808ca8:	1a10d83a 	srl	r8,r3,r8
  808cac:	11000a26 	beq	r2,r4,808cd8 <__subdf3+0x8f4>
  808cb0:	01001004 	movi	r4,64
  808cb4:	2085c83a 	sub	r2,r4,r2
  808cb8:	1884983a 	sll	r2,r3,r2
  808cbc:	1444b03a 	or	r2,r2,r17
  808cc0:	1004c03a 	cmpne	r2,r2,zero
  808cc4:	40a2b03a 	or	r17,r8,r2
  808cc8:	0005883a 	mov	r2,zero
  808ccc:	003f8606 	br	808ae8 <__alt_mem_onchip_mem+0xff800ae8>
  808cd0:	0005883a 	mov	r2,zero
  808cd4:	003fdc06 	br	808c48 <__alt_mem_onchip_mem+0xff800c48>
  808cd8:	0005883a 	mov	r2,zero
  808cdc:	003ff706 	br	808cbc <__alt_mem_onchip_mem+0xff800cbc>

00808ce0 <__floatsidf>:
  808ce0:	defffd04 	addi	sp,sp,-12
  808ce4:	dfc00215 	stw	ra,8(sp)
  808ce8:	dc400115 	stw	r17,4(sp)
  808cec:	dc000015 	stw	r16,0(sp)
  808cf0:	20002b26 	beq	r4,zero,808da0 <__floatsidf+0xc0>
  808cf4:	2023883a 	mov	r17,r4
  808cf8:	2020d7fa 	srli	r16,r4,31
  808cfc:	20002d16 	blt	r4,zero,808db4 <__floatsidf+0xd4>
  808d00:	8809883a 	mov	r4,r17
  808d04:	0808dbc0 	call	808dbc <__clzsi2>
  808d08:	01410784 	movi	r5,1054
  808d0c:	288bc83a 	sub	r5,r5,r2
  808d10:	01010cc4 	movi	r4,1075
  808d14:	2149c83a 	sub	r4,r4,r5
  808d18:	00c007c4 	movi	r3,31
  808d1c:	1900160e 	bge	r3,r4,808d78 <__floatsidf+0x98>
  808d20:	00c104c4 	movi	r3,1043
  808d24:	1947c83a 	sub	r3,r3,r5
  808d28:	88c6983a 	sll	r3,r17,r3
  808d2c:	00800434 	movhi	r2,16
  808d30:	10bfffc4 	addi	r2,r2,-1
  808d34:	1886703a 	and	r3,r3,r2
  808d38:	2941ffcc 	andi	r5,r5,2047
  808d3c:	800d883a 	mov	r6,r16
  808d40:	0005883a 	mov	r2,zero
  808d44:	280a953a 	slli	r5,r5,20
  808d48:	31803fcc 	andi	r6,r6,255
  808d4c:	01000434 	movhi	r4,16
  808d50:	300c97fa 	slli	r6,r6,31
  808d54:	213fffc4 	addi	r4,r4,-1
  808d58:	1906703a 	and	r3,r3,r4
  808d5c:	1946b03a 	or	r3,r3,r5
  808d60:	1986b03a 	or	r3,r3,r6
  808d64:	dfc00217 	ldw	ra,8(sp)
  808d68:	dc400117 	ldw	r17,4(sp)
  808d6c:	dc000017 	ldw	r16,0(sp)
  808d70:	dec00304 	addi	sp,sp,12
  808d74:	f800283a 	ret
  808d78:	00c002c4 	movi	r3,11
  808d7c:	1887c83a 	sub	r3,r3,r2
  808d80:	88c6d83a 	srl	r3,r17,r3
  808d84:	8904983a 	sll	r2,r17,r4
  808d88:	01000434 	movhi	r4,16
  808d8c:	213fffc4 	addi	r4,r4,-1
  808d90:	2941ffcc 	andi	r5,r5,2047
  808d94:	1906703a 	and	r3,r3,r4
  808d98:	800d883a 	mov	r6,r16
  808d9c:	003fe906 	br	808d44 <__alt_mem_onchip_mem+0xff800d44>
  808da0:	000d883a 	mov	r6,zero
  808da4:	000b883a 	mov	r5,zero
  808da8:	0007883a 	mov	r3,zero
  808dac:	0005883a 	mov	r2,zero
  808db0:	003fe406 	br	808d44 <__alt_mem_onchip_mem+0xff800d44>
  808db4:	0123c83a 	sub	r17,zero,r4
  808db8:	003fd106 	br	808d00 <__alt_mem_onchip_mem+0xff800d00>

00808dbc <__clzsi2>:
  808dbc:	00bfffd4 	movui	r2,65535
  808dc0:	11000536 	bltu	r2,r4,808dd8 <__clzsi2+0x1c>
  808dc4:	00803fc4 	movi	r2,255
  808dc8:	11000f36 	bltu	r2,r4,808e08 <__clzsi2+0x4c>
  808dcc:	00800804 	movi	r2,32
  808dd0:	0007883a 	mov	r3,zero
  808dd4:	00000506 	br	808dec <__clzsi2+0x30>
  808dd8:	00804034 	movhi	r2,256
  808ddc:	10bfffc4 	addi	r2,r2,-1
  808de0:	11000c2e 	bgeu	r2,r4,808e14 <__clzsi2+0x58>
  808de4:	00800204 	movi	r2,8
  808de8:	00c00604 	movi	r3,24
  808dec:	20c8d83a 	srl	r4,r4,r3
  808df0:	00c02074 	movhi	r3,129
  808df4:	18f36f04 	addi	r3,r3,-12868
  808df8:	1909883a 	add	r4,r3,r4
  808dfc:	20c00003 	ldbu	r3,0(r4)
  808e00:	10c5c83a 	sub	r2,r2,r3
  808e04:	f800283a 	ret
  808e08:	00800604 	movi	r2,24
  808e0c:	00c00204 	movi	r3,8
  808e10:	003ff606 	br	808dec <__alt_mem_onchip_mem+0xff800dec>
  808e14:	00800404 	movi	r2,16
  808e18:	1007883a 	mov	r3,r2
  808e1c:	003ff306 	br	808dec <__alt_mem_onchip_mem+0xff800dec>

00808e20 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  808e20:	defff504 	addi	sp,sp,-44
  808e24:	df000a15 	stw	fp,40(sp)
  808e28:	df000a04 	addi	fp,sp,40
  808e2c:	e13ffc15 	stw	r4,-16(fp)
  808e30:	e17ffd15 	stw	r5,-12(fp)
  808e34:	e1bffe15 	stw	r6,-8(fp)
  808e38:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  808e3c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  808e40:	d0a62617 	ldw	r2,-26472(gp)
  
  if (alt_ticks_per_second ())
  808e44:	10003c26 	beq	r2,zero,808f38 <alt_alarm_start+0x118>
  {
    if (alarm)
  808e48:	e0bffc17 	ldw	r2,-16(fp)
  808e4c:	10003826 	beq	r2,zero,808f30 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  808e50:	e0bffc17 	ldw	r2,-16(fp)
  808e54:	e0fffe17 	ldw	r3,-8(fp)
  808e58:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  808e5c:	e0bffc17 	ldw	r2,-16(fp)
  808e60:	e0ffff17 	ldw	r3,-4(fp)
  808e64:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808e68:	0005303a 	rdctl	r2,status
  808e6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808e70:	e0fff917 	ldw	r3,-28(fp)
  808e74:	00bfff84 	movi	r2,-2
  808e78:	1884703a 	and	r2,r3,r2
  808e7c:	1001703a 	wrctl	status,r2
  
  return context;
  808e80:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  808e84:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  808e88:	d0a62717 	ldw	r2,-26468(gp)
      
      current_nticks = alt_nticks();
  808e8c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  808e90:	e0fffd17 	ldw	r3,-12(fp)
  808e94:	e0bff617 	ldw	r2,-40(fp)
  808e98:	1885883a 	add	r2,r3,r2
  808e9c:	10c00044 	addi	r3,r2,1
  808ea0:	e0bffc17 	ldw	r2,-16(fp)
  808ea4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  808ea8:	e0bffc17 	ldw	r2,-16(fp)
  808eac:	10c00217 	ldw	r3,8(r2)
  808eb0:	e0bff617 	ldw	r2,-40(fp)
  808eb4:	1880042e 	bgeu	r3,r2,808ec8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  808eb8:	e0bffc17 	ldw	r2,-16(fp)
  808ebc:	00c00044 	movi	r3,1
  808ec0:	10c00405 	stb	r3,16(r2)
  808ec4:	00000206 	br	808ed0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  808ec8:	e0bffc17 	ldw	r2,-16(fp)
  808ecc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  808ed0:	e0bffc17 	ldw	r2,-16(fp)
  808ed4:	d0e00104 	addi	r3,gp,-32764
  808ed8:	e0fffa15 	stw	r3,-24(fp)
  808edc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  808ee0:	e0bffb17 	ldw	r2,-20(fp)
  808ee4:	e0fffa17 	ldw	r3,-24(fp)
  808ee8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  808eec:	e0bffa17 	ldw	r2,-24(fp)
  808ef0:	10c00017 	ldw	r3,0(r2)
  808ef4:	e0bffb17 	ldw	r2,-20(fp)
  808ef8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  808efc:	e0bffa17 	ldw	r2,-24(fp)
  808f00:	10800017 	ldw	r2,0(r2)
  808f04:	e0fffb17 	ldw	r3,-20(fp)
  808f08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  808f0c:	e0bffa17 	ldw	r2,-24(fp)
  808f10:	e0fffb17 	ldw	r3,-20(fp)
  808f14:	10c00015 	stw	r3,0(r2)
  808f18:	e0bff817 	ldw	r2,-32(fp)
  808f1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808f20:	e0bff717 	ldw	r2,-36(fp)
  808f24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  808f28:	0005883a 	mov	r2,zero
  808f2c:	00000306 	br	808f3c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  808f30:	00bffa84 	movi	r2,-22
  808f34:	00000106 	br	808f3c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  808f38:	00bfde84 	movi	r2,-134
  }
}
  808f3c:	e037883a 	mov	sp,fp
  808f40:	df000017 	ldw	fp,0(sp)
  808f44:	dec00104 	addi	sp,sp,4
  808f48:	f800283a 	ret

00808f4c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  808f4c:	defffc04 	addi	sp,sp,-16
  808f50:	df000315 	stw	fp,12(sp)
  808f54:	df000304 	addi	fp,sp,12
  808f58:	e13ffd15 	stw	r4,-12(fp)
  808f5c:	e17ffe15 	stw	r5,-8(fp)
  808f60:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  808f64:	e0fffe17 	ldw	r3,-8(fp)
  808f68:	e0bffd17 	ldw	r2,-12(fp)
  808f6c:	18800c26 	beq	r3,r2,808fa0 <alt_load_section+0x54>
  {
    while( to != end )
  808f70:	00000806 	br	808f94 <alt_load_section+0x48>
    {
      *to++ = *from++;
  808f74:	e0bffe17 	ldw	r2,-8(fp)
  808f78:	10c00104 	addi	r3,r2,4
  808f7c:	e0fffe15 	stw	r3,-8(fp)
  808f80:	e0fffd17 	ldw	r3,-12(fp)
  808f84:	19000104 	addi	r4,r3,4
  808f88:	e13ffd15 	stw	r4,-12(fp)
  808f8c:	18c00017 	ldw	r3,0(r3)
  808f90:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  808f94:	e0fffe17 	ldw	r3,-8(fp)
  808f98:	e0bfff17 	ldw	r2,-4(fp)
  808f9c:	18bff51e 	bne	r3,r2,808f74 <__alt_mem_onchip_mem+0xff800f74>
    {
      *to++ = *from++;
    }
  }
}
  808fa0:	0001883a 	nop
  808fa4:	e037883a 	mov	sp,fp
  808fa8:	df000017 	ldw	fp,0(sp)
  808fac:	dec00104 	addi	sp,sp,4
  808fb0:	f800283a 	ret

00808fb4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  808fb4:	defffe04 	addi	sp,sp,-8
  808fb8:	dfc00115 	stw	ra,4(sp)
  808fbc:	df000015 	stw	fp,0(sp)
  808fc0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  808fc4:	01802074 	movhi	r6,129
  808fc8:	31ba7304 	addi	r6,r6,-5684
  808fcc:	01402074 	movhi	r5,129
  808fd0:	29746104 	addi	r5,r5,-11900
  808fd4:	01002074 	movhi	r4,129
  808fd8:	213a7304 	addi	r4,r4,-5684
  808fdc:	0808f4c0 	call	808f4c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  808fe0:	01802034 	movhi	r6,128
  808fe4:	31809104 	addi	r6,r6,580
  808fe8:	01402034 	movhi	r5,128
  808fec:	29400804 	addi	r5,r5,32
  808ff0:	01002034 	movhi	r4,128
  808ff4:	21000804 	addi	r4,r4,32
  808ff8:	0808f4c0 	call	808f4c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  808ffc:	01802074 	movhi	r6,129
  809000:	31b46104 	addi	r6,r6,-11900
  809004:	01402074 	movhi	r5,129
  809008:	29736f04 	addi	r5,r5,-12868
  80900c:	01002074 	movhi	r4,129
  809010:	21336f04 	addi	r4,r4,-12868
  809014:	0808f4c0 	call	808f4c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  809018:	080b7780 	call	80b778 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80901c:	080b98c0 	call	80b98c <alt_icache_flush_all>
}
  809020:	0001883a 	nop
  809024:	e037883a 	mov	sp,fp
  809028:	dfc00117 	ldw	ra,4(sp)
  80902c:	df000017 	ldw	fp,0(sp)
  809030:	dec00204 	addi	sp,sp,8
  809034:	f800283a 	ret

00809038 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  809038:	defffd04 	addi	sp,sp,-12
  80903c:	dfc00215 	stw	ra,8(sp)
  809040:	df000115 	stw	fp,4(sp)
  809044:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  809048:	0009883a 	mov	r4,zero
  80904c:	080928c0 	call	80928c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  809050:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  809054:	08092c40 	call	8092c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  809058:	01802074 	movhi	r6,129
  80905c:	31b3af04 	addi	r6,r6,-12612
  809060:	01402074 	movhi	r5,129
  809064:	2973af04 	addi	r5,r5,-12612
  809068:	01002074 	movhi	r4,129
  80906c:	2133af04 	addi	r4,r4,-12612
  809070:	080bd240 	call	80bd24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  809074:	080b8cc0 	call	80b8cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  809078:	01002074 	movhi	r4,129
  80907c:	212e4b04 	addi	r4,r4,-18132
  809080:	080c56c0 	call	80c56c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  809084:	d0a62317 	ldw	r2,-26484(gp)
  809088:	d0e62417 	ldw	r3,-26480(gp)
  80908c:	d1262517 	ldw	r4,-26476(gp)
  809090:	200d883a 	mov	r6,r4
  809094:	180b883a 	mov	r5,r3
  809098:	1009883a 	mov	r4,r2
  80909c:	08005f00 	call	8005f0 <main>
  8090a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8090a4:	01000044 	movi	r4,1
  8090a8:	080b6a80 	call	80b6a8 <close>
  exit (result);
  8090ac:	e13fff17 	ldw	r4,-4(fp)
  8090b0:	080c5800 	call	80c580 <exit>

008090b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8090b4:	defffa04 	addi	sp,sp,-24
  8090b8:	df000515 	stw	fp,20(sp)
  8090bc:	df000504 	addi	fp,sp,20
  8090c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8090c4:	0005303a 	rdctl	r2,status
  8090c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8090cc:	e0fffc17 	ldw	r3,-16(fp)
  8090d0:	00bfff84 	movi	r2,-2
  8090d4:	1884703a 	and	r2,r3,r2
  8090d8:	1001703a 	wrctl	status,r2
  
  return context;
  8090dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8090e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8090e4:	e0bfff17 	ldw	r2,-4(fp)
  8090e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8090ec:	e0bffd17 	ldw	r2,-12(fp)
  8090f0:	10800017 	ldw	r2,0(r2)
  8090f4:	e0fffd17 	ldw	r3,-12(fp)
  8090f8:	18c00117 	ldw	r3,4(r3)
  8090fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  809100:	e0bffd17 	ldw	r2,-12(fp)
  809104:	10800117 	ldw	r2,4(r2)
  809108:	e0fffd17 	ldw	r3,-12(fp)
  80910c:	18c00017 	ldw	r3,0(r3)
  809110:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  809114:	e0bffd17 	ldw	r2,-12(fp)
  809118:	e0fffd17 	ldw	r3,-12(fp)
  80911c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  809120:	e0bffd17 	ldw	r2,-12(fp)
  809124:	e0fffd17 	ldw	r3,-12(fp)
  809128:	10c00015 	stw	r3,0(r2)
  80912c:	e0bffb17 	ldw	r2,-20(fp)
  809130:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809134:	e0bffe17 	ldw	r2,-8(fp)
  809138:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80913c:	0001883a 	nop
  809140:	e037883a 	mov	sp,fp
  809144:	df000017 	ldw	fp,0(sp)
  809148:	dec00104 	addi	sp,sp,4
  80914c:	f800283a 	ret

00809150 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  809150:	defffb04 	addi	sp,sp,-20
  809154:	dfc00415 	stw	ra,16(sp)
  809158:	df000315 	stw	fp,12(sp)
  80915c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  809160:	d0a00117 	ldw	r2,-32764(gp)
  809164:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  809168:	d0a62717 	ldw	r2,-26468(gp)
  80916c:	10800044 	addi	r2,r2,1
  809170:	d0a62715 	stw	r2,-26468(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  809174:	00002e06 	br	809230 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  809178:	e0bffd17 	ldw	r2,-12(fp)
  80917c:	10800017 	ldw	r2,0(r2)
  809180:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  809184:	e0bffd17 	ldw	r2,-12(fp)
  809188:	10800403 	ldbu	r2,16(r2)
  80918c:	10803fcc 	andi	r2,r2,255
  809190:	10000426 	beq	r2,zero,8091a4 <alt_tick+0x54>
  809194:	d0a62717 	ldw	r2,-26468(gp)
  809198:	1000021e 	bne	r2,zero,8091a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80919c:	e0bffd17 	ldw	r2,-12(fp)
  8091a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8091a4:	e0bffd17 	ldw	r2,-12(fp)
  8091a8:	10800217 	ldw	r2,8(r2)
  8091ac:	d0e62717 	ldw	r3,-26468(gp)
  8091b0:	18801d36 	bltu	r3,r2,809228 <alt_tick+0xd8>
  8091b4:	e0bffd17 	ldw	r2,-12(fp)
  8091b8:	10800403 	ldbu	r2,16(r2)
  8091bc:	10803fcc 	andi	r2,r2,255
  8091c0:	1000191e 	bne	r2,zero,809228 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8091c4:	e0bffd17 	ldw	r2,-12(fp)
  8091c8:	10800317 	ldw	r2,12(r2)
  8091cc:	e0fffd17 	ldw	r3,-12(fp)
  8091d0:	18c00517 	ldw	r3,20(r3)
  8091d4:	1809883a 	mov	r4,r3
  8091d8:	103ee83a 	callr	r2
  8091dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8091e0:	e0bfff17 	ldw	r2,-4(fp)
  8091e4:	1000031e 	bne	r2,zero,8091f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8091e8:	e13ffd17 	ldw	r4,-12(fp)
  8091ec:	08090b40 	call	8090b4 <alt_alarm_stop>
  8091f0:	00000d06 	br	809228 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8091f4:	e0bffd17 	ldw	r2,-12(fp)
  8091f8:	10c00217 	ldw	r3,8(r2)
  8091fc:	e0bfff17 	ldw	r2,-4(fp)
  809200:	1887883a 	add	r3,r3,r2
  809204:	e0bffd17 	ldw	r2,-12(fp)
  809208:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80920c:	e0bffd17 	ldw	r2,-12(fp)
  809210:	10c00217 	ldw	r3,8(r2)
  809214:	d0a62717 	ldw	r2,-26468(gp)
  809218:	1880032e 	bgeu	r3,r2,809228 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80921c:	e0bffd17 	ldw	r2,-12(fp)
  809220:	00c00044 	movi	r3,1
  809224:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  809228:	e0bffe17 	ldw	r2,-8(fp)
  80922c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  809230:	e0fffd17 	ldw	r3,-12(fp)
  809234:	d0a00104 	addi	r2,gp,-32764
  809238:	18bfcf1e 	bne	r3,r2,809178 <__alt_mem_onchip_mem+0xff801178>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80923c:	0001883a 	nop
}
  809240:	0001883a 	nop
  809244:	e037883a 	mov	sp,fp
  809248:	dfc00117 	ldw	ra,4(sp)
  80924c:	df000017 	ldw	fp,0(sp)
  809250:	dec00204 	addi	sp,sp,8
  809254:	f800283a 	ret

00809258 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  809258:	defffd04 	addi	sp,sp,-12
  80925c:	dfc00215 	stw	ra,8(sp)
  809260:	df000115 	stw	fp,4(sp)
  809264:	df000104 	addi	fp,sp,4
  809268:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80926c:	d1600604 	addi	r5,gp,-32744
  809270:	e13fff17 	ldw	r4,-4(fp)
  809274:	080b8280 	call	80b828 <alt_dev_llist_insert>
}
  809278:	e037883a 	mov	sp,fp
  80927c:	dfc00117 	ldw	ra,4(sp)
  809280:	df000017 	ldw	fp,0(sp)
  809284:	dec00204 	addi	sp,sp,8
  809288:	f800283a 	ret

0080928c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80928c:	defffd04 	addi	sp,sp,-12
  809290:	dfc00215 	stw	ra,8(sp)
  809294:	df000115 	stw	fp,4(sp)
  809298:	df000104 	addi	fp,sp,4
  80929c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8092a0:	080c0880 	call	80c088 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8092a4:	00800044 	movi	r2,1
  8092a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8092ac:	0001883a 	nop
  8092b0:	e037883a 	mov	sp,fp
  8092b4:	dfc00117 	ldw	ra,4(sp)
  8092b8:	df000017 	ldw	fp,0(sp)
  8092bc:	dec00204 	addi	sp,sp,8
  8092c0:	f800283a 	ret

008092c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8092c4:	defffe04 	addi	sp,sp,-8
  8092c8:	dfc00115 	stw	ra,4(sp)
  8092cc:	df000015 	stw	fp,0(sp)
  8092d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8092d4:	01c0fa04 	movi	r7,1000
  8092d8:	01800084 	movi	r6,2
  8092dc:	000b883a 	mov	r5,zero
  8092e0:	01004074 	movhi	r4,257
  8092e4:	21040804 	addi	r4,r4,4128
  8092e8:	080ad180 	call	80ad18 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8092ec:	01800044 	movi	r6,1
  8092f0:	000b883a 	mov	r5,zero
  8092f4:	01002074 	movhi	r4,129
  8092f8:	21346b04 	addi	r4,r4,-11860
  8092fc:	08094c00 	call	8094c0 <altera_avalon_jtag_uart_init>
  809300:	01002074 	movhi	r4,129
  809304:	21346104 	addi	r4,r4,-11900
  809308:	08092580 	call	809258 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80930c:	01002074 	movhi	r4,129
  809310:	21388304 	addi	r4,r4,-7668
  809314:	080ab0c0 	call	80ab0c <altera_avalon_lcd_16207_init>
  809318:	01002074 	movhi	r4,129
  80931c:	21387904 	addi	r4,r4,-7708
  809320:	08092580 	call	809258 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  809324:	000d883a 	mov	r6,zero
  809328:	000b883a 	mov	r5,zero
  80932c:	01002074 	movhi	r4,129
  809330:	2138cb04 	addi	r4,r4,-7380
  809334:	080aea40 	call	80aea4 <altera_avalon_uart_init>
  809338:	01002074 	movhi	r4,129
  80933c:	2138c104 	addi	r4,r4,-7420
  809340:	08092580 	call	809258 <alt_dev_reg>
}
  809344:	0001883a 	nop
  809348:	e037883a 	mov	sp,fp
  80934c:	dfc00117 	ldw	ra,4(sp)
  809350:	df000017 	ldw	fp,0(sp)
  809354:	dec00204 	addi	sp,sp,8
  809358:	f800283a 	ret

0080935c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80935c:	defffa04 	addi	sp,sp,-24
  809360:	dfc00515 	stw	ra,20(sp)
  809364:	df000415 	stw	fp,16(sp)
  809368:	df000404 	addi	fp,sp,16
  80936c:	e13ffd15 	stw	r4,-12(fp)
  809370:	e17ffe15 	stw	r5,-8(fp)
  809374:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  809378:	e0bffd17 	ldw	r2,-12(fp)
  80937c:	10800017 	ldw	r2,0(r2)
  809380:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  809384:	e0bffc17 	ldw	r2,-16(fp)
  809388:	10c00a04 	addi	r3,r2,40
  80938c:	e0bffd17 	ldw	r2,-12(fp)
  809390:	10800217 	ldw	r2,8(r2)
  809394:	100f883a 	mov	r7,r2
  809398:	e1bfff17 	ldw	r6,-4(fp)
  80939c:	e17ffe17 	ldw	r5,-8(fp)
  8093a0:	1809883a 	mov	r4,r3
  8093a4:	08099840 	call	809984 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8093a8:	e037883a 	mov	sp,fp
  8093ac:	dfc00117 	ldw	ra,4(sp)
  8093b0:	df000017 	ldw	fp,0(sp)
  8093b4:	dec00204 	addi	sp,sp,8
  8093b8:	f800283a 	ret

008093bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8093bc:	defffa04 	addi	sp,sp,-24
  8093c0:	dfc00515 	stw	ra,20(sp)
  8093c4:	df000415 	stw	fp,16(sp)
  8093c8:	df000404 	addi	fp,sp,16
  8093cc:	e13ffd15 	stw	r4,-12(fp)
  8093d0:	e17ffe15 	stw	r5,-8(fp)
  8093d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8093d8:	e0bffd17 	ldw	r2,-12(fp)
  8093dc:	10800017 	ldw	r2,0(r2)
  8093e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8093e4:	e0bffc17 	ldw	r2,-16(fp)
  8093e8:	10c00a04 	addi	r3,r2,40
  8093ec:	e0bffd17 	ldw	r2,-12(fp)
  8093f0:	10800217 	ldw	r2,8(r2)
  8093f4:	100f883a 	mov	r7,r2
  8093f8:	e1bfff17 	ldw	r6,-4(fp)
  8093fc:	e17ffe17 	ldw	r5,-8(fp)
  809400:	1809883a 	mov	r4,r3
  809404:	0809ba00 	call	809ba0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  809408:	e037883a 	mov	sp,fp
  80940c:	dfc00117 	ldw	ra,4(sp)
  809410:	df000017 	ldw	fp,0(sp)
  809414:	dec00204 	addi	sp,sp,8
  809418:	f800283a 	ret

0080941c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80941c:	defffc04 	addi	sp,sp,-16
  809420:	dfc00315 	stw	ra,12(sp)
  809424:	df000215 	stw	fp,8(sp)
  809428:	df000204 	addi	fp,sp,8
  80942c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  809430:	e0bfff17 	ldw	r2,-4(fp)
  809434:	10800017 	ldw	r2,0(r2)
  809438:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80943c:	e0bffe17 	ldw	r2,-8(fp)
  809440:	10c00a04 	addi	r3,r2,40
  809444:	e0bfff17 	ldw	r2,-4(fp)
  809448:	10800217 	ldw	r2,8(r2)
  80944c:	100b883a 	mov	r5,r2
  809450:	1809883a 	mov	r4,r3
  809454:	080982c0 	call	80982c <altera_avalon_jtag_uart_close>
}
  809458:	e037883a 	mov	sp,fp
  80945c:	dfc00117 	ldw	ra,4(sp)
  809460:	df000017 	ldw	fp,0(sp)
  809464:	dec00204 	addi	sp,sp,8
  809468:	f800283a 	ret

0080946c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80946c:	defffa04 	addi	sp,sp,-24
  809470:	dfc00515 	stw	ra,20(sp)
  809474:	df000415 	stw	fp,16(sp)
  809478:	df000404 	addi	fp,sp,16
  80947c:	e13ffd15 	stw	r4,-12(fp)
  809480:	e17ffe15 	stw	r5,-8(fp)
  809484:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  809488:	e0bffd17 	ldw	r2,-12(fp)
  80948c:	10800017 	ldw	r2,0(r2)
  809490:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  809494:	e0bffc17 	ldw	r2,-16(fp)
  809498:	10800a04 	addi	r2,r2,40
  80949c:	e1bfff17 	ldw	r6,-4(fp)
  8094a0:	e17ffe17 	ldw	r5,-8(fp)
  8094a4:	1009883a 	mov	r4,r2
  8094a8:	08098940 	call	809894 <altera_avalon_jtag_uart_ioctl>
}
  8094ac:	e037883a 	mov	sp,fp
  8094b0:	dfc00117 	ldw	ra,4(sp)
  8094b4:	df000017 	ldw	fp,0(sp)
  8094b8:	dec00204 	addi	sp,sp,8
  8094bc:	f800283a 	ret

008094c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8094c0:	defffa04 	addi	sp,sp,-24
  8094c4:	dfc00515 	stw	ra,20(sp)
  8094c8:	df000415 	stw	fp,16(sp)
  8094cc:	df000404 	addi	fp,sp,16
  8094d0:	e13ffd15 	stw	r4,-12(fp)
  8094d4:	e17ffe15 	stw	r5,-8(fp)
  8094d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8094dc:	e0bffd17 	ldw	r2,-12(fp)
  8094e0:	00c00044 	movi	r3,1
  8094e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8094e8:	e0bffd17 	ldw	r2,-12(fp)
  8094ec:	10800017 	ldw	r2,0(r2)
  8094f0:	10800104 	addi	r2,r2,4
  8094f4:	1007883a 	mov	r3,r2
  8094f8:	e0bffd17 	ldw	r2,-12(fp)
  8094fc:	10800817 	ldw	r2,32(r2)
  809500:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  809504:	e0bffe17 	ldw	r2,-8(fp)
  809508:	e0ffff17 	ldw	r3,-4(fp)
  80950c:	d8000015 	stw	zero,0(sp)
  809510:	e1fffd17 	ldw	r7,-12(fp)
  809514:	01802074 	movhi	r6,129
  809518:	31a56004 	addi	r6,r6,-27264
  80951c:	180b883a 	mov	r5,r3
  809520:	1009883a 	mov	r4,r2
  809524:	080b9c00 	call	80b9c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  809528:	e0bffd17 	ldw	r2,-12(fp)
  80952c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  809530:	e0bffd17 	ldw	r2,-12(fp)
  809534:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  809538:	d0e62617 	ldw	r3,-26472(gp)
  80953c:	e1fffd17 	ldw	r7,-12(fp)
  809540:	01802074 	movhi	r6,129
  809544:	31a5e304 	addi	r6,r6,-26740
  809548:	180b883a 	mov	r5,r3
  80954c:	1009883a 	mov	r4,r2
  809550:	0808e200 	call	808e20 <alt_alarm_start>
  809554:	1000040e 	bge	r2,zero,809568 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  809558:	e0fffd17 	ldw	r3,-12(fp)
  80955c:	00a00034 	movhi	r2,32768
  809560:	10bfffc4 	addi	r2,r2,-1
  809564:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  809568:	0001883a 	nop
  80956c:	e037883a 	mov	sp,fp
  809570:	dfc00117 	ldw	ra,4(sp)
  809574:	df000017 	ldw	fp,0(sp)
  809578:	dec00204 	addi	sp,sp,8
  80957c:	f800283a 	ret

00809580 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  809580:	defff804 	addi	sp,sp,-32
  809584:	df000715 	stw	fp,28(sp)
  809588:	df000704 	addi	fp,sp,28
  80958c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  809590:	e0bfff17 	ldw	r2,-4(fp)
  809594:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  809598:	e0bffb17 	ldw	r2,-20(fp)
  80959c:	10800017 	ldw	r2,0(r2)
  8095a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8095a4:	e0bffc17 	ldw	r2,-16(fp)
  8095a8:	10800104 	addi	r2,r2,4
  8095ac:	10800037 	ldwio	r2,0(r2)
  8095b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8095b4:	e0bffd17 	ldw	r2,-12(fp)
  8095b8:	1080c00c 	andi	r2,r2,768
  8095bc:	10006d26 	beq	r2,zero,809774 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8095c0:	e0bffd17 	ldw	r2,-12(fp)
  8095c4:	1080400c 	andi	r2,r2,256
  8095c8:	10003526 	beq	r2,zero,8096a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8095cc:	00800074 	movhi	r2,1
  8095d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8095d4:	e0bffb17 	ldw	r2,-20(fp)
  8095d8:	10800a17 	ldw	r2,40(r2)
  8095dc:	10800044 	addi	r2,r2,1
  8095e0:	1081ffcc 	andi	r2,r2,2047
  8095e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  8095e8:	e0bffb17 	ldw	r2,-20(fp)
  8095ec:	10c00b17 	ldw	r3,44(r2)
  8095f0:	e0bffe17 	ldw	r2,-8(fp)
  8095f4:	18801526 	beq	r3,r2,80964c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8095f8:	e0bffc17 	ldw	r2,-16(fp)
  8095fc:	10800037 	ldwio	r2,0(r2)
  809600:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  809604:	e0bff917 	ldw	r2,-28(fp)
  809608:	10a0000c 	andi	r2,r2,32768
  80960c:	10001126 	beq	r2,zero,809654 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  809610:	e0bffb17 	ldw	r2,-20(fp)
  809614:	10800a17 	ldw	r2,40(r2)
  809618:	e0fff917 	ldw	r3,-28(fp)
  80961c:	1809883a 	mov	r4,r3
  809620:	e0fffb17 	ldw	r3,-20(fp)
  809624:	1885883a 	add	r2,r3,r2
  809628:	10800e04 	addi	r2,r2,56
  80962c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  809630:	e0bffb17 	ldw	r2,-20(fp)
  809634:	10800a17 	ldw	r2,40(r2)
  809638:	10800044 	addi	r2,r2,1
  80963c:	10c1ffcc 	andi	r3,r2,2047
  809640:	e0bffb17 	ldw	r2,-20(fp)
  809644:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  809648:	003fe206 	br	8095d4 <__alt_mem_onchip_mem+0xff8015d4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80964c:	0001883a 	nop
  809650:	00000106 	br	809658 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  809654:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  809658:	e0bff917 	ldw	r2,-28(fp)
  80965c:	10bfffec 	andhi	r2,r2,65535
  809660:	10000f26 	beq	r2,zero,8096a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  809664:	e0bffb17 	ldw	r2,-20(fp)
  809668:	10c00817 	ldw	r3,32(r2)
  80966c:	00bfff84 	movi	r2,-2
  809670:	1886703a 	and	r3,r3,r2
  809674:	e0bffb17 	ldw	r2,-20(fp)
  809678:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80967c:	e0bffc17 	ldw	r2,-16(fp)
  809680:	10800104 	addi	r2,r2,4
  809684:	1007883a 	mov	r3,r2
  809688:	e0bffb17 	ldw	r2,-20(fp)
  80968c:	10800817 	ldw	r2,32(r2)
  809690:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  809694:	e0bffc17 	ldw	r2,-16(fp)
  809698:	10800104 	addi	r2,r2,4
  80969c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8096a0:	e0bffd17 	ldw	r2,-12(fp)
  8096a4:	1080800c 	andi	r2,r2,512
  8096a8:	103fbe26 	beq	r2,zero,8095a4 <__alt_mem_onchip_mem+0xff8015a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8096ac:	e0bffd17 	ldw	r2,-12(fp)
  8096b0:	1004d43a 	srli	r2,r2,16
  8096b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8096b8:	00001406 	br	80970c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8096bc:	e0bffc17 	ldw	r2,-16(fp)
  8096c0:	e0fffb17 	ldw	r3,-20(fp)
  8096c4:	18c00d17 	ldw	r3,52(r3)
  8096c8:	e13ffb17 	ldw	r4,-20(fp)
  8096cc:	20c7883a 	add	r3,r4,r3
  8096d0:	18c20e04 	addi	r3,r3,2104
  8096d4:	18c00003 	ldbu	r3,0(r3)
  8096d8:	18c03fcc 	andi	r3,r3,255
  8096dc:	18c0201c 	xori	r3,r3,128
  8096e0:	18ffe004 	addi	r3,r3,-128
  8096e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8096e8:	e0bffb17 	ldw	r2,-20(fp)
  8096ec:	10800d17 	ldw	r2,52(r2)
  8096f0:	10800044 	addi	r2,r2,1
  8096f4:	10c1ffcc 	andi	r3,r2,2047
  8096f8:	e0bffb17 	ldw	r2,-20(fp)
  8096fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  809700:	e0bffa17 	ldw	r2,-24(fp)
  809704:	10bfffc4 	addi	r2,r2,-1
  809708:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80970c:	e0bffa17 	ldw	r2,-24(fp)
  809710:	10000526 	beq	r2,zero,809728 <altera_avalon_jtag_uart_irq+0x1a8>
  809714:	e0bffb17 	ldw	r2,-20(fp)
  809718:	10c00d17 	ldw	r3,52(r2)
  80971c:	e0bffb17 	ldw	r2,-20(fp)
  809720:	10800c17 	ldw	r2,48(r2)
  809724:	18bfe51e 	bne	r3,r2,8096bc <__alt_mem_onchip_mem+0xff8016bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  809728:	e0bffa17 	ldw	r2,-24(fp)
  80972c:	103f9d26 	beq	r2,zero,8095a4 <__alt_mem_onchip_mem+0xff8015a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  809730:	e0bffb17 	ldw	r2,-20(fp)
  809734:	10c00817 	ldw	r3,32(r2)
  809738:	00bfff44 	movi	r2,-3
  80973c:	1886703a 	and	r3,r3,r2
  809740:	e0bffb17 	ldw	r2,-20(fp)
  809744:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  809748:	e0bffb17 	ldw	r2,-20(fp)
  80974c:	10800017 	ldw	r2,0(r2)
  809750:	10800104 	addi	r2,r2,4
  809754:	1007883a 	mov	r3,r2
  809758:	e0bffb17 	ldw	r2,-20(fp)
  80975c:	10800817 	ldw	r2,32(r2)
  809760:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  809764:	e0bffc17 	ldw	r2,-16(fp)
  809768:	10800104 	addi	r2,r2,4
  80976c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  809770:	003f8c06 	br	8095a4 <__alt_mem_onchip_mem+0xff8015a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  809774:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  809778:	0001883a 	nop
  80977c:	e037883a 	mov	sp,fp
  809780:	df000017 	ldw	fp,0(sp)
  809784:	dec00104 	addi	sp,sp,4
  809788:	f800283a 	ret

0080978c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80978c:	defff804 	addi	sp,sp,-32
  809790:	df000715 	stw	fp,28(sp)
  809794:	df000704 	addi	fp,sp,28
  809798:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80979c:	e0bffb17 	ldw	r2,-20(fp)
  8097a0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8097a4:	e0bff917 	ldw	r2,-28(fp)
  8097a8:	10800017 	ldw	r2,0(r2)
  8097ac:	10800104 	addi	r2,r2,4
  8097b0:	10800037 	ldwio	r2,0(r2)
  8097b4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8097b8:	e0bffa17 	ldw	r2,-24(fp)
  8097bc:	1081000c 	andi	r2,r2,1024
  8097c0:	10000b26 	beq	r2,zero,8097f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8097c4:	e0bff917 	ldw	r2,-28(fp)
  8097c8:	10800017 	ldw	r2,0(r2)
  8097cc:	10800104 	addi	r2,r2,4
  8097d0:	1007883a 	mov	r3,r2
  8097d4:	e0bff917 	ldw	r2,-28(fp)
  8097d8:	10800817 	ldw	r2,32(r2)
  8097dc:	10810014 	ori	r2,r2,1024
  8097e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8097e4:	e0bff917 	ldw	r2,-28(fp)
  8097e8:	10000915 	stw	zero,36(r2)
  8097ec:	00000a06 	br	809818 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8097f0:	e0bff917 	ldw	r2,-28(fp)
  8097f4:	10c00917 	ldw	r3,36(r2)
  8097f8:	00a00034 	movhi	r2,32768
  8097fc:	10bfff04 	addi	r2,r2,-4
  809800:	10c00536 	bltu	r2,r3,809818 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  809804:	e0bff917 	ldw	r2,-28(fp)
  809808:	10800917 	ldw	r2,36(r2)
  80980c:	10c00044 	addi	r3,r2,1
  809810:	e0bff917 	ldw	r2,-28(fp)
  809814:	10c00915 	stw	r3,36(r2)
  809818:	d0a62617 	ldw	r2,-26472(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80981c:	e037883a 	mov	sp,fp
  809820:	df000017 	ldw	fp,0(sp)
  809824:	dec00104 	addi	sp,sp,4
  809828:	f800283a 	ret

0080982c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80982c:	defffd04 	addi	sp,sp,-12
  809830:	df000215 	stw	fp,8(sp)
  809834:	df000204 	addi	fp,sp,8
  809838:	e13ffe15 	stw	r4,-8(fp)
  80983c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  809840:	00000506 	br	809858 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  809844:	e0bfff17 	ldw	r2,-4(fp)
  809848:	1090000c 	andi	r2,r2,16384
  80984c:	10000226 	beq	r2,zero,809858 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  809850:	00bffd44 	movi	r2,-11
  809854:	00000b06 	br	809884 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  809858:	e0bffe17 	ldw	r2,-8(fp)
  80985c:	10c00d17 	ldw	r3,52(r2)
  809860:	e0bffe17 	ldw	r2,-8(fp)
  809864:	10800c17 	ldw	r2,48(r2)
  809868:	18800526 	beq	r3,r2,809880 <altera_avalon_jtag_uart_close+0x54>
  80986c:	e0bffe17 	ldw	r2,-8(fp)
  809870:	10c00917 	ldw	r3,36(r2)
  809874:	e0bffe17 	ldw	r2,-8(fp)
  809878:	10800117 	ldw	r2,4(r2)
  80987c:	18bff136 	bltu	r3,r2,809844 <__alt_mem_onchip_mem+0xff801844>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  809880:	0005883a 	mov	r2,zero
}
  809884:	e037883a 	mov	sp,fp
  809888:	df000017 	ldw	fp,0(sp)
  80988c:	dec00104 	addi	sp,sp,4
  809890:	f800283a 	ret

00809894 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  809894:	defffa04 	addi	sp,sp,-24
  809898:	df000515 	stw	fp,20(sp)
  80989c:	df000504 	addi	fp,sp,20
  8098a0:	e13ffd15 	stw	r4,-12(fp)
  8098a4:	e17ffe15 	stw	r5,-8(fp)
  8098a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  8098ac:	00bff9c4 	movi	r2,-25
  8098b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  8098b4:	e0bffe17 	ldw	r2,-8(fp)
  8098b8:	10da8060 	cmpeqi	r3,r2,27137
  8098bc:	1800031e 	bne	r3,zero,8098cc <altera_avalon_jtag_uart_ioctl+0x38>
  8098c0:	109a80a0 	cmpeqi	r2,r2,27138
  8098c4:	1000181e 	bne	r2,zero,809928 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  8098c8:	00002906 	br	809970 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8098cc:	e0bffd17 	ldw	r2,-12(fp)
  8098d0:	10c00117 	ldw	r3,4(r2)
  8098d4:	00a00034 	movhi	r2,32768
  8098d8:	10bfffc4 	addi	r2,r2,-1
  8098dc:	18802126 	beq	r3,r2,809964 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  8098e0:	e0bfff17 	ldw	r2,-4(fp)
  8098e4:	10800017 	ldw	r2,0(r2)
  8098e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8098ec:	e0bffc17 	ldw	r2,-16(fp)
  8098f0:	10800090 	cmplti	r2,r2,2
  8098f4:	1000061e 	bne	r2,zero,809910 <altera_avalon_jtag_uart_ioctl+0x7c>
  8098f8:	e0fffc17 	ldw	r3,-16(fp)
  8098fc:	00a00034 	movhi	r2,32768
  809900:	10bfffc4 	addi	r2,r2,-1
  809904:	18800226 	beq	r3,r2,809910 <altera_avalon_jtag_uart_ioctl+0x7c>
  809908:	e0bffc17 	ldw	r2,-16(fp)
  80990c:	00000206 	br	809918 <altera_avalon_jtag_uart_ioctl+0x84>
  809910:	00a00034 	movhi	r2,32768
  809914:	10bfff84 	addi	r2,r2,-2
  809918:	e0fffd17 	ldw	r3,-12(fp)
  80991c:	18800115 	stw	r2,4(r3)
      rc = 0;
  809920:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  809924:	00000f06 	br	809964 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  809928:	e0bffd17 	ldw	r2,-12(fp)
  80992c:	10c00117 	ldw	r3,4(r2)
  809930:	00a00034 	movhi	r2,32768
  809934:	10bfffc4 	addi	r2,r2,-1
  809938:	18800c26 	beq	r3,r2,80996c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80993c:	e0bffd17 	ldw	r2,-12(fp)
  809940:	10c00917 	ldw	r3,36(r2)
  809944:	e0bffd17 	ldw	r2,-12(fp)
  809948:	10800117 	ldw	r2,4(r2)
  80994c:	1885803a 	cmpltu	r2,r3,r2
  809950:	10c03fcc 	andi	r3,r2,255
  809954:	e0bfff17 	ldw	r2,-4(fp)
  809958:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80995c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  809960:	00000206 	br	80996c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  809964:	0001883a 	nop
  809968:	00000106 	br	809970 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80996c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  809970:	e0bffb17 	ldw	r2,-20(fp)
}
  809974:	e037883a 	mov	sp,fp
  809978:	df000017 	ldw	fp,0(sp)
  80997c:	dec00104 	addi	sp,sp,4
  809980:	f800283a 	ret

00809984 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  809984:	defff304 	addi	sp,sp,-52
  809988:	dfc00c15 	stw	ra,48(sp)
  80998c:	df000b15 	stw	fp,44(sp)
  809990:	df000b04 	addi	fp,sp,44
  809994:	e13ffc15 	stw	r4,-16(fp)
  809998:	e17ffd15 	stw	r5,-12(fp)
  80999c:	e1bffe15 	stw	r6,-8(fp)
  8099a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8099a4:	e0bffd17 	ldw	r2,-12(fp)
  8099a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8099ac:	00004706 	br	809acc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8099b0:	e0bffc17 	ldw	r2,-16(fp)
  8099b4:	10800a17 	ldw	r2,40(r2)
  8099b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8099bc:	e0bffc17 	ldw	r2,-16(fp)
  8099c0:	10800b17 	ldw	r2,44(r2)
  8099c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8099c8:	e0fff717 	ldw	r3,-36(fp)
  8099cc:	e0bff817 	ldw	r2,-32(fp)
  8099d0:	18800536 	bltu	r3,r2,8099e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8099d4:	e0fff717 	ldw	r3,-36(fp)
  8099d8:	e0bff817 	ldw	r2,-32(fp)
  8099dc:	1885c83a 	sub	r2,r3,r2
  8099e0:	e0bff615 	stw	r2,-40(fp)
  8099e4:	00000406 	br	8099f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8099e8:	00c20004 	movi	r3,2048
  8099ec:	e0bff817 	ldw	r2,-32(fp)
  8099f0:	1885c83a 	sub	r2,r3,r2
  8099f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8099f8:	e0bff617 	ldw	r2,-40(fp)
  8099fc:	10001e26 	beq	r2,zero,809a78 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  809a00:	e0fffe17 	ldw	r3,-8(fp)
  809a04:	e0bff617 	ldw	r2,-40(fp)
  809a08:	1880022e 	bgeu	r3,r2,809a14 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  809a0c:	e0bffe17 	ldw	r2,-8(fp)
  809a10:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  809a14:	e0bffc17 	ldw	r2,-16(fp)
  809a18:	10c00e04 	addi	r3,r2,56
  809a1c:	e0bff817 	ldw	r2,-32(fp)
  809a20:	1885883a 	add	r2,r3,r2
  809a24:	e1bff617 	ldw	r6,-40(fp)
  809a28:	100b883a 	mov	r5,r2
  809a2c:	e13ff517 	ldw	r4,-44(fp)
  809a30:	080c6340 	call	80c634 <memcpy>
      ptr   += n;
  809a34:	e0fff517 	ldw	r3,-44(fp)
  809a38:	e0bff617 	ldw	r2,-40(fp)
  809a3c:	1885883a 	add	r2,r3,r2
  809a40:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  809a44:	e0fffe17 	ldw	r3,-8(fp)
  809a48:	e0bff617 	ldw	r2,-40(fp)
  809a4c:	1885c83a 	sub	r2,r3,r2
  809a50:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  809a54:	e0fff817 	ldw	r3,-32(fp)
  809a58:	e0bff617 	ldw	r2,-40(fp)
  809a5c:	1885883a 	add	r2,r3,r2
  809a60:	10c1ffcc 	andi	r3,r2,2047
  809a64:	e0bffc17 	ldw	r2,-16(fp)
  809a68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  809a6c:	e0bffe17 	ldw	r2,-8(fp)
  809a70:	00bfcf16 	blt	zero,r2,8099b0 <__alt_mem_onchip_mem+0xff8019b0>
  809a74:	00000106 	br	809a7c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  809a78:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  809a7c:	e0fff517 	ldw	r3,-44(fp)
  809a80:	e0bffd17 	ldw	r2,-12(fp)
  809a84:	1880141e 	bne	r3,r2,809ad8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  809a88:	e0bfff17 	ldw	r2,-4(fp)
  809a8c:	1090000c 	andi	r2,r2,16384
  809a90:	1000131e 	bne	r2,zero,809ae0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  809a94:	0001883a 	nop
  809a98:	e0bffc17 	ldw	r2,-16(fp)
  809a9c:	10c00a17 	ldw	r3,40(r2)
  809aa0:	e0bff717 	ldw	r2,-36(fp)
  809aa4:	1880051e 	bne	r3,r2,809abc <altera_avalon_jtag_uart_read+0x138>
  809aa8:	e0bffc17 	ldw	r2,-16(fp)
  809aac:	10c00917 	ldw	r3,36(r2)
  809ab0:	e0bffc17 	ldw	r2,-16(fp)
  809ab4:	10800117 	ldw	r2,4(r2)
  809ab8:	18bff736 	bltu	r3,r2,809a98 <__alt_mem_onchip_mem+0xff801a98>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  809abc:	e0bffc17 	ldw	r2,-16(fp)
  809ac0:	10c00a17 	ldw	r3,40(r2)
  809ac4:	e0bff717 	ldw	r2,-36(fp)
  809ac8:	18800726 	beq	r3,r2,809ae8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  809acc:	e0bffe17 	ldw	r2,-8(fp)
  809ad0:	00bfb716 	blt	zero,r2,8099b0 <__alt_mem_onchip_mem+0xff8019b0>
  809ad4:	00000506 	br	809aec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  809ad8:	0001883a 	nop
  809adc:	00000306 	br	809aec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  809ae0:	0001883a 	nop
  809ae4:	00000106 	br	809aec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  809ae8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  809aec:	e0fff517 	ldw	r3,-44(fp)
  809af0:	e0bffd17 	ldw	r2,-12(fp)
  809af4:	18801826 	beq	r3,r2,809b58 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809af8:	0005303a 	rdctl	r2,status
  809afc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809b00:	e0fffb17 	ldw	r3,-20(fp)
  809b04:	00bfff84 	movi	r2,-2
  809b08:	1884703a 	and	r2,r3,r2
  809b0c:	1001703a 	wrctl	status,r2
  
  return context;
  809b10:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  809b14:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  809b18:	e0bffc17 	ldw	r2,-16(fp)
  809b1c:	10800817 	ldw	r2,32(r2)
  809b20:	10c00054 	ori	r3,r2,1
  809b24:	e0bffc17 	ldw	r2,-16(fp)
  809b28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  809b2c:	e0bffc17 	ldw	r2,-16(fp)
  809b30:	10800017 	ldw	r2,0(r2)
  809b34:	10800104 	addi	r2,r2,4
  809b38:	1007883a 	mov	r3,r2
  809b3c:	e0bffc17 	ldw	r2,-16(fp)
  809b40:	10800817 	ldw	r2,32(r2)
  809b44:	18800035 	stwio	r2,0(r3)
  809b48:	e0bffa17 	ldw	r2,-24(fp)
  809b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809b50:	e0bff917 	ldw	r2,-28(fp)
  809b54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  809b58:	e0fff517 	ldw	r3,-44(fp)
  809b5c:	e0bffd17 	ldw	r2,-12(fp)
  809b60:	18800426 	beq	r3,r2,809b74 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  809b64:	e0fff517 	ldw	r3,-44(fp)
  809b68:	e0bffd17 	ldw	r2,-12(fp)
  809b6c:	1885c83a 	sub	r2,r3,r2
  809b70:	00000606 	br	809b8c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  809b74:	e0bfff17 	ldw	r2,-4(fp)
  809b78:	1090000c 	andi	r2,r2,16384
  809b7c:	10000226 	beq	r2,zero,809b88 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  809b80:	00bffd44 	movi	r2,-11
  809b84:	00000106 	br	809b8c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  809b88:	00bffec4 	movi	r2,-5
}
  809b8c:	e037883a 	mov	sp,fp
  809b90:	dfc00117 	ldw	ra,4(sp)
  809b94:	df000017 	ldw	fp,0(sp)
  809b98:	dec00204 	addi	sp,sp,8
  809b9c:	f800283a 	ret

00809ba0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  809ba0:	defff304 	addi	sp,sp,-52
  809ba4:	dfc00c15 	stw	ra,48(sp)
  809ba8:	df000b15 	stw	fp,44(sp)
  809bac:	df000b04 	addi	fp,sp,44
  809bb0:	e13ffc15 	stw	r4,-16(fp)
  809bb4:	e17ffd15 	stw	r5,-12(fp)
  809bb8:	e1bffe15 	stw	r6,-8(fp)
  809bbc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  809bc0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  809bc4:	e0bffd17 	ldw	r2,-12(fp)
  809bc8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  809bcc:	00003706 	br	809cac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  809bd0:	e0bffc17 	ldw	r2,-16(fp)
  809bd4:	10800c17 	ldw	r2,48(r2)
  809bd8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  809bdc:	e0bffc17 	ldw	r2,-16(fp)
  809be0:	10800d17 	ldw	r2,52(r2)
  809be4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  809be8:	e0fff917 	ldw	r3,-28(fp)
  809bec:	e0bff517 	ldw	r2,-44(fp)
  809bf0:	1880062e 	bgeu	r3,r2,809c0c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  809bf4:	e0fff517 	ldw	r3,-44(fp)
  809bf8:	e0bff917 	ldw	r2,-28(fp)
  809bfc:	1885c83a 	sub	r2,r3,r2
  809c00:	10bfffc4 	addi	r2,r2,-1
  809c04:	e0bff615 	stw	r2,-40(fp)
  809c08:	00000b06 	br	809c38 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  809c0c:	e0bff517 	ldw	r2,-44(fp)
  809c10:	10000526 	beq	r2,zero,809c28 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  809c14:	00c20004 	movi	r3,2048
  809c18:	e0bff917 	ldw	r2,-28(fp)
  809c1c:	1885c83a 	sub	r2,r3,r2
  809c20:	e0bff615 	stw	r2,-40(fp)
  809c24:	00000406 	br	809c38 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  809c28:	00c1ffc4 	movi	r3,2047
  809c2c:	e0bff917 	ldw	r2,-28(fp)
  809c30:	1885c83a 	sub	r2,r3,r2
  809c34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  809c38:	e0bff617 	ldw	r2,-40(fp)
  809c3c:	10001e26 	beq	r2,zero,809cb8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  809c40:	e0fffe17 	ldw	r3,-8(fp)
  809c44:	e0bff617 	ldw	r2,-40(fp)
  809c48:	1880022e 	bgeu	r3,r2,809c54 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  809c4c:	e0bffe17 	ldw	r2,-8(fp)
  809c50:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  809c54:	e0bffc17 	ldw	r2,-16(fp)
  809c58:	10c20e04 	addi	r3,r2,2104
  809c5c:	e0bff917 	ldw	r2,-28(fp)
  809c60:	1885883a 	add	r2,r3,r2
  809c64:	e1bff617 	ldw	r6,-40(fp)
  809c68:	e17ffd17 	ldw	r5,-12(fp)
  809c6c:	1009883a 	mov	r4,r2
  809c70:	080c6340 	call	80c634 <memcpy>
      ptr   += n;
  809c74:	e0fffd17 	ldw	r3,-12(fp)
  809c78:	e0bff617 	ldw	r2,-40(fp)
  809c7c:	1885883a 	add	r2,r3,r2
  809c80:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  809c84:	e0fffe17 	ldw	r3,-8(fp)
  809c88:	e0bff617 	ldw	r2,-40(fp)
  809c8c:	1885c83a 	sub	r2,r3,r2
  809c90:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  809c94:	e0fff917 	ldw	r3,-28(fp)
  809c98:	e0bff617 	ldw	r2,-40(fp)
  809c9c:	1885883a 	add	r2,r3,r2
  809ca0:	10c1ffcc 	andi	r3,r2,2047
  809ca4:	e0bffc17 	ldw	r2,-16(fp)
  809ca8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  809cac:	e0bffe17 	ldw	r2,-8(fp)
  809cb0:	00bfc716 	blt	zero,r2,809bd0 <__alt_mem_onchip_mem+0xff801bd0>
  809cb4:	00000106 	br	809cbc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  809cb8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809cbc:	0005303a 	rdctl	r2,status
  809cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809cc4:	e0fffb17 	ldw	r3,-20(fp)
  809cc8:	00bfff84 	movi	r2,-2
  809ccc:	1884703a 	and	r2,r3,r2
  809cd0:	1001703a 	wrctl	status,r2
  
  return context;
  809cd4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  809cd8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  809cdc:	e0bffc17 	ldw	r2,-16(fp)
  809ce0:	10800817 	ldw	r2,32(r2)
  809ce4:	10c00094 	ori	r3,r2,2
  809ce8:	e0bffc17 	ldw	r2,-16(fp)
  809cec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  809cf0:	e0bffc17 	ldw	r2,-16(fp)
  809cf4:	10800017 	ldw	r2,0(r2)
  809cf8:	10800104 	addi	r2,r2,4
  809cfc:	1007883a 	mov	r3,r2
  809d00:	e0bffc17 	ldw	r2,-16(fp)
  809d04:	10800817 	ldw	r2,32(r2)
  809d08:	18800035 	stwio	r2,0(r3)
  809d0c:	e0bffa17 	ldw	r2,-24(fp)
  809d10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809d14:	e0bff817 	ldw	r2,-32(fp)
  809d18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  809d1c:	e0bffe17 	ldw	r2,-8(fp)
  809d20:	0080100e 	bge	zero,r2,809d64 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  809d24:	e0bfff17 	ldw	r2,-4(fp)
  809d28:	1090000c 	andi	r2,r2,16384
  809d2c:	1000101e 	bne	r2,zero,809d70 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  809d30:	0001883a 	nop
  809d34:	e0bffc17 	ldw	r2,-16(fp)
  809d38:	10c00d17 	ldw	r3,52(r2)
  809d3c:	e0bff517 	ldw	r2,-44(fp)
  809d40:	1880051e 	bne	r3,r2,809d58 <altera_avalon_jtag_uart_write+0x1b8>
  809d44:	e0bffc17 	ldw	r2,-16(fp)
  809d48:	10c00917 	ldw	r3,36(r2)
  809d4c:	e0bffc17 	ldw	r2,-16(fp)
  809d50:	10800117 	ldw	r2,4(r2)
  809d54:	18bff736 	bltu	r3,r2,809d34 <__alt_mem_onchip_mem+0xff801d34>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  809d58:	e0bffc17 	ldw	r2,-16(fp)
  809d5c:	10800917 	ldw	r2,36(r2)
  809d60:	1000051e 	bne	r2,zero,809d78 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  809d64:	e0bffe17 	ldw	r2,-8(fp)
  809d68:	00bfd016 	blt	zero,r2,809cac <__alt_mem_onchip_mem+0xff801cac>
  809d6c:	00000306 	br	809d7c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  809d70:	0001883a 	nop
  809d74:	00000106 	br	809d7c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  809d78:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  809d7c:	e0fffd17 	ldw	r3,-12(fp)
  809d80:	e0bff717 	ldw	r2,-36(fp)
  809d84:	18800426 	beq	r3,r2,809d98 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  809d88:	e0fffd17 	ldw	r3,-12(fp)
  809d8c:	e0bff717 	ldw	r2,-36(fp)
  809d90:	1885c83a 	sub	r2,r3,r2
  809d94:	00000606 	br	809db0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  809d98:	e0bfff17 	ldw	r2,-4(fp)
  809d9c:	1090000c 	andi	r2,r2,16384
  809da0:	10000226 	beq	r2,zero,809dac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  809da4:	00bffd44 	movi	r2,-11
  809da8:	00000106 	br	809db0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  809dac:	00bffec4 	movi	r2,-5
}
  809db0:	e037883a 	mov	sp,fp
  809db4:	dfc00117 	ldw	ra,4(sp)
  809db8:	df000017 	ldw	fp,0(sp)
  809dbc:	dec00204 	addi	sp,sp,8
  809dc0:	f800283a 	ret

00809dc4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  809dc4:	defffa04 	addi	sp,sp,-24
  809dc8:	dfc00515 	stw	ra,20(sp)
  809dcc:	df000415 	stw	fp,16(sp)
  809dd0:	df000404 	addi	fp,sp,16
  809dd4:	e13ffe15 	stw	r4,-8(fp)
  809dd8:	2805883a 	mov	r2,r5
  809ddc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  809de0:	e0bffe17 	ldw	r2,-8(fp)
  809de4:	10800017 	ldw	r2,0(r2)
  809de8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  809dec:	008003f4 	movhi	r2,15
  809df0:	10909004 	addi	r2,r2,16960
  809df4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  809df8:	e0bffe17 	ldw	r2,-8(fp)
  809dfc:	10800803 	ldbu	r2,32(r2)
  809e00:	10803fcc 	andi	r2,r2,255
  809e04:	1080201c 	xori	r2,r2,128
  809e08:	10bfe004 	addi	r2,r2,-128
  809e0c:	1000151e 	bne	r2,zero,809e64 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  809e10:	00000906 	br	809e38 <lcd_write_command+0x74>
    if (--i == 0)
  809e14:	e0bffc17 	ldw	r2,-16(fp)
  809e18:	10bfffc4 	addi	r2,r2,-1
  809e1c:	e0bffc15 	stw	r2,-16(fp)
  809e20:	e0bffc17 	ldw	r2,-16(fp)
  809e24:	1000041e 	bne	r2,zero,809e38 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  809e28:	e0bffe17 	ldw	r2,-8(fp)
  809e2c:	00c00044 	movi	r3,1
  809e30:	10c00805 	stb	r3,32(r2)
      return;
  809e34:	00000c06 	br	809e68 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  809e38:	e0bffd17 	ldw	r2,-12(fp)
  809e3c:	10800104 	addi	r2,r2,4
  809e40:	10800037 	ldwio	r2,0(r2)
  809e44:	1080200c 	andi	r2,r2,128
  809e48:	103ff21e 	bne	r2,zero,809e14 <__alt_mem_onchip_mem+0xff801e14>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  809e4c:	01001904 	movi	r4,100
  809e50:	080c0580 	call	80c058 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  809e54:	e0bffd17 	ldw	r2,-12(fp)
  809e58:	e0ffff03 	ldbu	r3,-4(fp)
  809e5c:	10c00035 	stwio	r3,0(r2)
  809e60:	00000106 	br	809e68 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  809e64:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  809e68:	e037883a 	mov	sp,fp
  809e6c:	dfc00117 	ldw	ra,4(sp)
  809e70:	df000017 	ldw	fp,0(sp)
  809e74:	dec00204 	addi	sp,sp,8
  809e78:	f800283a 	ret

00809e7c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  809e7c:	defffa04 	addi	sp,sp,-24
  809e80:	dfc00515 	stw	ra,20(sp)
  809e84:	df000415 	stw	fp,16(sp)
  809e88:	df000404 	addi	fp,sp,16
  809e8c:	e13ffe15 	stw	r4,-8(fp)
  809e90:	2805883a 	mov	r2,r5
  809e94:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  809e98:	e0bffe17 	ldw	r2,-8(fp)
  809e9c:	10800017 	ldw	r2,0(r2)
  809ea0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  809ea4:	008003f4 	movhi	r2,15
  809ea8:	10909004 	addi	r2,r2,16960
  809eac:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  809eb0:	e0bffe17 	ldw	r2,-8(fp)
  809eb4:	10800803 	ldbu	r2,32(r2)
  809eb8:	10803fcc 	andi	r2,r2,255
  809ebc:	1080201c 	xori	r2,r2,128
  809ec0:	10bfe004 	addi	r2,r2,-128
  809ec4:	10001d1e 	bne	r2,zero,809f3c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  809ec8:	00000906 	br	809ef0 <lcd_write_data+0x74>
    if (--i == 0)
  809ecc:	e0bffc17 	ldw	r2,-16(fp)
  809ed0:	10bfffc4 	addi	r2,r2,-1
  809ed4:	e0bffc15 	stw	r2,-16(fp)
  809ed8:	e0bffc17 	ldw	r2,-16(fp)
  809edc:	1000041e 	bne	r2,zero,809ef0 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  809ee0:	e0bffe17 	ldw	r2,-8(fp)
  809ee4:	00c00044 	movi	r3,1
  809ee8:	10c00805 	stb	r3,32(r2)
      return;
  809eec:	00001406 	br	809f40 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  809ef0:	e0bffd17 	ldw	r2,-12(fp)
  809ef4:	10800104 	addi	r2,r2,4
  809ef8:	10800037 	ldwio	r2,0(r2)
  809efc:	1080200c 	andi	r2,r2,128
  809f00:	103ff21e 	bne	r2,zero,809ecc <__alt_mem_onchip_mem+0xff801ecc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  809f04:	01001904 	movi	r4,100
  809f08:	080c0580 	call	80c058 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  809f0c:	e0bffd17 	ldw	r2,-12(fp)
  809f10:	10800204 	addi	r2,r2,8
  809f14:	1007883a 	mov	r3,r2
  809f18:	e0bfff03 	ldbu	r2,-4(fp)
  809f1c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  809f20:	e0bffe17 	ldw	r2,-8(fp)
  809f24:	108008c3 	ldbu	r2,35(r2)
  809f28:	10800044 	addi	r2,r2,1
  809f2c:	1007883a 	mov	r3,r2
  809f30:	e0bffe17 	ldw	r2,-8(fp)
  809f34:	10c008c5 	stb	r3,35(r2)
  809f38:	00000106 	br	809f40 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  809f3c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  809f40:	e037883a 	mov	sp,fp
  809f44:	dfc00117 	ldw	ra,4(sp)
  809f48:	df000017 	ldw	fp,0(sp)
  809f4c:	dec00204 	addi	sp,sp,8
  809f50:	f800283a 	ret

00809f54 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  809f54:	defffc04 	addi	sp,sp,-16
  809f58:	dfc00315 	stw	ra,12(sp)
  809f5c:	df000215 	stw	fp,8(sp)
  809f60:	df000204 	addi	fp,sp,8
  809f64:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  809f68:	01400044 	movi	r5,1
  809f6c:	e13fff17 	ldw	r4,-4(fp)
  809f70:	0809dc40 	call	809dc4 <lcd_write_command>

  sp->x = 0;
  809f74:	e0bfff17 	ldw	r2,-4(fp)
  809f78:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  809f7c:	e0bfff17 	ldw	r2,-4(fp)
  809f80:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  809f84:	e0bfff17 	ldw	r2,-4(fp)
  809f88:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  809f8c:	e03ffe15 	stw	zero,-8(fp)
  809f90:	00001b06 	br	80a000 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  809f94:	e0bffe17 	ldw	r2,-8(fp)
  809f98:	108018e4 	muli	r2,r2,99
  809f9c:	10801004 	addi	r2,r2,64
  809fa0:	e0ffff17 	ldw	r3,-4(fp)
  809fa4:	1885883a 	add	r2,r3,r2
  809fa8:	01801444 	movi	r6,81
  809fac:	01400804 	movi	r5,32
  809fb0:	1009883a 	mov	r4,r2
  809fb4:	080c77c0 	call	80c77c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  809fb8:	e0bffe17 	ldw	r2,-8(fp)
  809fbc:	108018e4 	muli	r2,r2,99
  809fc0:	10800c04 	addi	r2,r2,48
  809fc4:	e0ffff17 	ldw	r3,-4(fp)
  809fc8:	1885883a 	add	r2,r3,r2
  809fcc:	01800404 	movi	r6,16
  809fd0:	01400804 	movi	r5,32
  809fd4:	1009883a 	mov	r4,r2
  809fd8:	080c77c0 	call	80c77c <memset>
    sp->line[y].width = 0;
  809fdc:	e0ffff17 	ldw	r3,-4(fp)
  809fe0:	e0bffe17 	ldw	r2,-8(fp)
  809fe4:	108018e4 	muli	r2,r2,99
  809fe8:	1885883a 	add	r2,r3,r2
  809fec:	10802444 	addi	r2,r2,145
  809ff0:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  809ff4:	e0bffe17 	ldw	r2,-8(fp)
  809ff8:	10800044 	addi	r2,r2,1
  809ffc:	e0bffe15 	stw	r2,-8(fp)
  80a000:	e0bffe17 	ldw	r2,-8(fp)
  80a004:	10800090 	cmplti	r2,r2,2
  80a008:	103fe21e 	bne	r2,zero,809f94 <__alt_mem_onchip_mem+0xff801f94>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80a00c:	0001883a 	nop
  80a010:	e037883a 	mov	sp,fp
  80a014:	dfc00117 	ldw	ra,4(sp)
  80a018:	df000017 	ldw	fp,0(sp)
  80a01c:	dec00204 	addi	sp,sp,8
  80a020:	f800283a 	ret

0080a024 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80a024:	defff704 	addi	sp,sp,-36
  80a028:	dfc00815 	stw	ra,32(sp)
  80a02c:	df000715 	stw	fp,28(sp)
  80a030:	df000704 	addi	fp,sp,28
  80a034:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80a038:	e0bfff17 	ldw	r2,-4(fp)
  80a03c:	10800943 	ldbu	r2,37(r2)
  80a040:	10803fcc 	andi	r2,r2,255
  80a044:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80a048:	e03ff915 	stw	zero,-28(fp)
  80a04c:	00006706 	br	80a1ec <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80a050:	e0ffff17 	ldw	r3,-4(fp)
  80a054:	e0bff917 	ldw	r2,-28(fp)
  80a058:	108018e4 	muli	r2,r2,99
  80a05c:	1885883a 	add	r2,r3,r2
  80a060:	10802444 	addi	r2,r2,145
  80a064:	10800003 	ldbu	r2,0(r2)
  80a068:	10803fcc 	andi	r2,r2,255
  80a06c:	1080201c 	xori	r2,r2,128
  80a070:	10bfe004 	addi	r2,r2,-128
  80a074:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80a078:	e0ffff17 	ldw	r3,-4(fp)
  80a07c:	e0bff917 	ldw	r2,-28(fp)
  80a080:	108018e4 	muli	r2,r2,99
  80a084:	1885883a 	add	r2,r3,r2
  80a088:	10802484 	addi	r2,r2,146
  80a08c:	10800003 	ldbu	r2,0(r2)
  80a090:	10c03fcc 	andi	r3,r2,255
  80a094:	e0bffc17 	ldw	r2,-16(fp)
  80a098:	1885383a 	mul	r2,r3,r2
  80a09c:	1005d23a 	srai	r2,r2,8
  80a0a0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80a0a4:	e0fffb17 	ldw	r3,-20(fp)
  80a0a8:	e0bffd17 	ldw	r2,-12(fp)
  80a0ac:	18800116 	blt	r3,r2,80a0b4 <lcd_repaint_screen+0x90>
      offset = 0;
  80a0b0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80a0b4:	e03ffa15 	stw	zero,-24(fp)
  80a0b8:	00004606 	br	80a1d4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80a0bc:	e0fffa17 	ldw	r3,-24(fp)
  80a0c0:	e0bffb17 	ldw	r2,-20(fp)
  80a0c4:	1885883a 	add	r2,r3,r2
  80a0c8:	e17ffd17 	ldw	r5,-12(fp)
  80a0cc:	1009883a 	mov	r4,r2
  80a0d0:	080cc580 	call	80cc58 <__modsi3>
  80a0d4:	1009883a 	mov	r4,r2
  80a0d8:	e0ffff17 	ldw	r3,-4(fp)
  80a0dc:	e0bff917 	ldw	r2,-28(fp)
  80a0e0:	108018e4 	muli	r2,r2,99
  80a0e4:	1885883a 	add	r2,r3,r2
  80a0e8:	1105883a 	add	r2,r2,r4
  80a0ec:	10801004 	addi	r2,r2,64
  80a0f0:	10800003 	ldbu	r2,0(r2)
  80a0f4:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80a0f8:	e0ffff17 	ldw	r3,-4(fp)
  80a0fc:	e0bff917 	ldw	r2,-28(fp)
  80a100:	108018e4 	muli	r2,r2,99
  80a104:	1887883a 	add	r3,r3,r2
  80a108:	e0bffa17 	ldw	r2,-24(fp)
  80a10c:	1885883a 	add	r2,r3,r2
  80a110:	10800c04 	addi	r2,r2,48
  80a114:	10800003 	ldbu	r2,0(r2)
  80a118:	10c03fcc 	andi	r3,r2,255
  80a11c:	18c0201c 	xori	r3,r3,128
  80a120:	18ffe004 	addi	r3,r3,-128
  80a124:	e0bffe07 	ldb	r2,-8(fp)
  80a128:	18802726 	beq	r3,r2,80a1c8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80a12c:	e0fff917 	ldw	r3,-28(fp)
  80a130:	d0a00304 	addi	r2,gp,-32756
  80a134:	1885883a 	add	r2,r3,r2
  80a138:	10800003 	ldbu	r2,0(r2)
  80a13c:	1007883a 	mov	r3,r2
  80a140:	e0bffa17 	ldw	r2,-24(fp)
  80a144:	1885883a 	add	r2,r3,r2
  80a148:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80a14c:	e0fffe43 	ldbu	r3,-7(fp)
  80a150:	e0bfff17 	ldw	r2,-4(fp)
  80a154:	108008c3 	ldbu	r2,35(r2)
  80a158:	10803fcc 	andi	r2,r2,255
  80a15c:	1080201c 	xori	r2,r2,128
  80a160:	10bfe004 	addi	r2,r2,-128
  80a164:	18800a26 	beq	r3,r2,80a190 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80a168:	e0fffe43 	ldbu	r3,-7(fp)
  80a16c:	00bfe004 	movi	r2,-128
  80a170:	1884b03a 	or	r2,r3,r2
  80a174:	10803fcc 	andi	r2,r2,255
  80a178:	100b883a 	mov	r5,r2
  80a17c:	e13fff17 	ldw	r4,-4(fp)
  80a180:	0809dc40 	call	809dc4 <lcd_write_command>
          sp->address = address;
  80a184:	e0fffe43 	ldbu	r3,-7(fp)
  80a188:	e0bfff17 	ldw	r2,-4(fp)
  80a18c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80a190:	e0bffe03 	ldbu	r2,-8(fp)
  80a194:	10803fcc 	andi	r2,r2,255
  80a198:	100b883a 	mov	r5,r2
  80a19c:	e13fff17 	ldw	r4,-4(fp)
  80a1a0:	0809e7c0 	call	809e7c <lcd_write_data>
        sp->line[y].visible[x] = c;
  80a1a4:	e0ffff17 	ldw	r3,-4(fp)
  80a1a8:	e0bff917 	ldw	r2,-28(fp)
  80a1ac:	108018e4 	muli	r2,r2,99
  80a1b0:	1887883a 	add	r3,r3,r2
  80a1b4:	e0bffa17 	ldw	r2,-24(fp)
  80a1b8:	1885883a 	add	r2,r3,r2
  80a1bc:	10800c04 	addi	r2,r2,48
  80a1c0:	e0fffe03 	ldbu	r3,-8(fp)
  80a1c4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80a1c8:	e0bffa17 	ldw	r2,-24(fp)
  80a1cc:	10800044 	addi	r2,r2,1
  80a1d0:	e0bffa15 	stw	r2,-24(fp)
  80a1d4:	e0bffa17 	ldw	r2,-24(fp)
  80a1d8:	10800410 	cmplti	r2,r2,16
  80a1dc:	103fb71e 	bne	r2,zero,80a0bc <__alt_mem_onchip_mem+0xff8020bc>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80a1e0:	e0bff917 	ldw	r2,-28(fp)
  80a1e4:	10800044 	addi	r2,r2,1
  80a1e8:	e0bff915 	stw	r2,-28(fp)
  80a1ec:	e0bff917 	ldw	r2,-28(fp)
  80a1f0:	10800090 	cmplti	r2,r2,2
  80a1f4:	103f961e 	bne	r2,zero,80a050 <__alt_mem_onchip_mem+0xff802050>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80a1f8:	0001883a 	nop
  80a1fc:	e037883a 	mov	sp,fp
  80a200:	dfc00117 	ldw	ra,4(sp)
  80a204:	df000017 	ldw	fp,0(sp)
  80a208:	dec00204 	addi	sp,sp,8
  80a20c:	f800283a 	ret

0080a210 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80a210:	defffc04 	addi	sp,sp,-16
  80a214:	dfc00315 	stw	ra,12(sp)
  80a218:	df000215 	stw	fp,8(sp)
  80a21c:	df000204 	addi	fp,sp,8
  80a220:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80a224:	e03ffe15 	stw	zero,-8(fp)
  80a228:	00001d06 	br	80a2a0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80a22c:	e0bffe17 	ldw	r2,-8(fp)
  80a230:	00800f16 	blt	zero,r2,80a270 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80a234:	e0bffe17 	ldw	r2,-8(fp)
  80a238:	108018e4 	muli	r2,r2,99
  80a23c:	10801004 	addi	r2,r2,64
  80a240:	e0ffff17 	ldw	r3,-4(fp)
  80a244:	1889883a 	add	r4,r3,r2
  80a248:	e0bffe17 	ldw	r2,-8(fp)
  80a24c:	10800044 	addi	r2,r2,1
  80a250:	108018e4 	muli	r2,r2,99
  80a254:	10801004 	addi	r2,r2,64
  80a258:	e0ffff17 	ldw	r3,-4(fp)
  80a25c:	1885883a 	add	r2,r3,r2
  80a260:	01801404 	movi	r6,80
  80a264:	100b883a 	mov	r5,r2
  80a268:	080c6340 	call	80c634 <memcpy>
  80a26c:	00000906 	br	80a294 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80a270:	e0bffe17 	ldw	r2,-8(fp)
  80a274:	108018e4 	muli	r2,r2,99
  80a278:	10801004 	addi	r2,r2,64
  80a27c:	e0ffff17 	ldw	r3,-4(fp)
  80a280:	1885883a 	add	r2,r3,r2
  80a284:	01801404 	movi	r6,80
  80a288:	01400804 	movi	r5,32
  80a28c:	1009883a 	mov	r4,r2
  80a290:	080c77c0 	call	80c77c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80a294:	e0bffe17 	ldw	r2,-8(fp)
  80a298:	10800044 	addi	r2,r2,1
  80a29c:	e0bffe15 	stw	r2,-8(fp)
  80a2a0:	e0bffe17 	ldw	r2,-8(fp)
  80a2a4:	10800090 	cmplti	r2,r2,2
  80a2a8:	103fe01e 	bne	r2,zero,80a22c <__alt_mem_onchip_mem+0xff80222c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80a2ac:	e0bfff17 	ldw	r2,-4(fp)
  80a2b0:	10800883 	ldbu	r2,34(r2)
  80a2b4:	10bfffc4 	addi	r2,r2,-1
  80a2b8:	1007883a 	mov	r3,r2
  80a2bc:	e0bfff17 	ldw	r2,-4(fp)
  80a2c0:	10c00885 	stb	r3,34(r2)
}
  80a2c4:	0001883a 	nop
  80a2c8:	e037883a 	mov	sp,fp
  80a2cc:	dfc00117 	ldw	ra,4(sp)
  80a2d0:	df000017 	ldw	fp,0(sp)
  80a2d4:	dec00204 	addi	sp,sp,8
  80a2d8:	f800283a 	ret

0080a2dc <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80a2dc:	defff904 	addi	sp,sp,-28
  80a2e0:	dfc00615 	stw	ra,24(sp)
  80a2e4:	df000515 	stw	fp,20(sp)
  80a2e8:	df000504 	addi	fp,sp,20
  80a2ec:	e13ffe15 	stw	r4,-8(fp)
  80a2f0:	2805883a 	mov	r2,r5
  80a2f4:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80a2f8:	e03ffb15 	stw	zero,-20(fp)
  80a2fc:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80a300:	e0bffe17 	ldw	r2,-8(fp)
  80a304:	10800a03 	ldbu	r2,40(r2)
  80a308:	10803fcc 	andi	r2,r2,255
  80a30c:	1080201c 	xori	r2,r2,128
  80a310:	10bfe004 	addi	r2,r2,-128
  80a314:	108016d8 	cmpnei	r2,r2,91
  80a318:	1000411e 	bne	r2,zero,80a420 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80a31c:	e0bffe17 	ldw	r2,-8(fp)
  80a320:	10800a04 	addi	r2,r2,40
  80a324:	10800044 	addi	r2,r2,1
  80a328:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80a32c:	00000c06 	br	80a360 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80a330:	e0bffb17 	ldw	r2,-20(fp)
  80a334:	10c002a4 	muli	r3,r2,10
  80a338:	e0bffd17 	ldw	r2,-12(fp)
  80a33c:	11000044 	addi	r4,r2,1
  80a340:	e13ffd15 	stw	r4,-12(fp)
  80a344:	10800003 	ldbu	r2,0(r2)
  80a348:	10803fcc 	andi	r2,r2,255
  80a34c:	1080201c 	xori	r2,r2,128
  80a350:	10bfe004 	addi	r2,r2,-128
  80a354:	10bff404 	addi	r2,r2,-48
  80a358:	1885883a 	add	r2,r3,r2
  80a35c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80a360:	d0e00b17 	ldw	r3,-32724(gp)
  80a364:	e0bffd17 	ldw	r2,-12(fp)
  80a368:	10800003 	ldbu	r2,0(r2)
  80a36c:	10803fcc 	andi	r2,r2,255
  80a370:	1080201c 	xori	r2,r2,128
  80a374:	10bfe004 	addi	r2,r2,-128
  80a378:	10800044 	addi	r2,r2,1
  80a37c:	1885883a 	add	r2,r3,r2
  80a380:	10800003 	ldbu	r2,0(r2)
  80a384:	10803fcc 	andi	r2,r2,255
  80a388:	1080010c 	andi	r2,r2,4
  80a38c:	103fe81e 	bne	r2,zero,80a330 <__alt_mem_onchip_mem+0xff802330>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80a390:	e0bffd17 	ldw	r2,-12(fp)
  80a394:	10800003 	ldbu	r2,0(r2)
  80a398:	10803fcc 	andi	r2,r2,255
  80a39c:	1080201c 	xori	r2,r2,128
  80a3a0:	10bfe004 	addi	r2,r2,-128
  80a3a4:	10800ed8 	cmpnei	r2,r2,59
  80a3a8:	10001f1e 	bne	r2,zero,80a428 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80a3ac:	e0bffd17 	ldw	r2,-12(fp)
  80a3b0:	10800044 	addi	r2,r2,1
  80a3b4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80a3b8:	00000c06 	br	80a3ec <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80a3bc:	e0bffc17 	ldw	r2,-16(fp)
  80a3c0:	10c002a4 	muli	r3,r2,10
  80a3c4:	e0bffd17 	ldw	r2,-12(fp)
  80a3c8:	11000044 	addi	r4,r2,1
  80a3cc:	e13ffd15 	stw	r4,-12(fp)
  80a3d0:	10800003 	ldbu	r2,0(r2)
  80a3d4:	10803fcc 	andi	r2,r2,255
  80a3d8:	1080201c 	xori	r2,r2,128
  80a3dc:	10bfe004 	addi	r2,r2,-128
  80a3e0:	10bff404 	addi	r2,r2,-48
  80a3e4:	1885883a 	add	r2,r3,r2
  80a3e8:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80a3ec:	d0e00b17 	ldw	r3,-32724(gp)
  80a3f0:	e0bffd17 	ldw	r2,-12(fp)
  80a3f4:	10800003 	ldbu	r2,0(r2)
  80a3f8:	10803fcc 	andi	r2,r2,255
  80a3fc:	1080201c 	xori	r2,r2,128
  80a400:	10bfe004 	addi	r2,r2,-128
  80a404:	10800044 	addi	r2,r2,1
  80a408:	1885883a 	add	r2,r3,r2
  80a40c:	10800003 	ldbu	r2,0(r2)
  80a410:	10803fcc 	andi	r2,r2,255
  80a414:	1080010c 	andi	r2,r2,4
  80a418:	103fe81e 	bne	r2,zero,80a3bc <__alt_mem_onchip_mem+0xff8023bc>
  80a41c:	00000206 	br	80a428 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80a420:	00bfffc4 	movi	r2,-1
  80a424:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80a428:	e0bfff07 	ldb	r2,-4(fp)
  80a42c:	10c012a0 	cmpeqi	r3,r2,74
  80a430:	1800291e 	bne	r3,zero,80a4d8 <lcd_handle_escape+0x1fc>
  80a434:	10c012c8 	cmpgei	r3,r2,75
  80a438:	1800031e 	bne	r3,zero,80a448 <lcd_handle_escape+0x16c>
  80a43c:	10801220 	cmpeqi	r2,r2,72
  80a440:	1000061e 	bne	r2,zero,80a45c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80a444:	00004a06 	br	80a570 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80a448:	10c012e0 	cmpeqi	r3,r2,75
  80a44c:	1800281e 	bne	r3,zero,80a4f0 <lcd_handle_escape+0x214>
  80a450:	108019a0 	cmpeqi	r2,r2,102
  80a454:	1000011e 	bne	r2,zero,80a45c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80a458:	00004506 	br	80a570 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80a45c:	e0bffc17 	ldw	r2,-16(fp)
  80a460:	0080050e 	bge	zero,r2,80a478 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80a464:	e0bffc17 	ldw	r2,-16(fp)
  80a468:	10bfffc4 	addi	r2,r2,-1
  80a46c:	1007883a 	mov	r3,r2
  80a470:	e0bffe17 	ldw	r2,-8(fp)
  80a474:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80a478:	e0bffb17 	ldw	r2,-20(fp)
  80a47c:	0080370e 	bge	zero,r2,80a55c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80a480:	e0bffb17 	ldw	r2,-20(fp)
  80a484:	10bfffc4 	addi	r2,r2,-1
  80a488:	1007883a 	mov	r3,r2
  80a48c:	e0bffe17 	ldw	r2,-8(fp)
  80a490:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80a494:	e0bffe17 	ldw	r2,-8(fp)
  80a498:	10800883 	ldbu	r2,34(r2)
  80a49c:	10803fcc 	andi	r2,r2,255
  80a4a0:	10800170 	cmpltui	r2,r2,5
  80a4a4:	1000061e 	bne	r2,zero,80a4c0 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80a4a8:	e0bffe17 	ldw	r2,-8(fp)
  80a4ac:	00c00104 	movi	r3,4
  80a4b0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80a4b4:	00000206 	br	80a4c0 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80a4b8:	e13ffe17 	ldw	r4,-8(fp)
  80a4bc:	080a2100 	call	80a210 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80a4c0:	e0bffe17 	ldw	r2,-8(fp)
  80a4c4:	10800883 	ldbu	r2,34(r2)
  80a4c8:	10803fcc 	andi	r2,r2,255
  80a4cc:	108000e8 	cmpgeui	r2,r2,3
  80a4d0:	103ff91e 	bne	r2,zero,80a4b8 <__alt_mem_onchip_mem+0xff8024b8>
        lcd_scroll_up(sp);
    }
    break;
  80a4d4:	00002106 	br	80a55c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80a4d8:	e0bffb17 	ldw	r2,-20(fp)
  80a4dc:	10800098 	cmpnei	r2,r2,2
  80a4e0:	1000201e 	bne	r2,zero,80a564 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80a4e4:	e13ffe17 	ldw	r4,-8(fp)
  80a4e8:	0809f540 	call	809f54 <lcd_clear_screen>
    break;
  80a4ec:	00001d06 	br	80a564 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80a4f0:	e0bffb17 	ldw	r2,-20(fp)
  80a4f4:	00801d16 	blt	zero,r2,80a56c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80a4f8:	e0bffe17 	ldw	r2,-8(fp)
  80a4fc:	10800843 	ldbu	r2,33(r2)
  80a500:	10803fcc 	andi	r2,r2,255
  80a504:	10801428 	cmpgeui	r2,r2,80
  80a508:	1000181e 	bne	r2,zero,80a56c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80a50c:	e0bffe17 	ldw	r2,-8(fp)
  80a510:	10800883 	ldbu	r2,34(r2)
  80a514:	10803fcc 	andi	r2,r2,255
  80a518:	108018e4 	muli	r2,r2,99
  80a51c:	10801004 	addi	r2,r2,64
  80a520:	e0fffe17 	ldw	r3,-8(fp)
  80a524:	1887883a 	add	r3,r3,r2
  80a528:	e0bffe17 	ldw	r2,-8(fp)
  80a52c:	10800843 	ldbu	r2,33(r2)
  80a530:	10803fcc 	andi	r2,r2,255
  80a534:	1889883a 	add	r4,r3,r2
  80a538:	e0bffe17 	ldw	r2,-8(fp)
  80a53c:	10800843 	ldbu	r2,33(r2)
  80a540:	10803fcc 	andi	r2,r2,255
  80a544:	00c01404 	movi	r3,80
  80a548:	1885c83a 	sub	r2,r3,r2
  80a54c:	100d883a 	mov	r6,r2
  80a550:	01400804 	movi	r5,32
  80a554:	080c77c0 	call	80c77c <memset>
    }
    break;
  80a558:	00000406 	br	80a56c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80a55c:	0001883a 	nop
  80a560:	00000306 	br	80a570 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80a564:	0001883a 	nop
  80a568:	00000106 	br	80a570 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80a56c:	0001883a 	nop
  }
}
  80a570:	0001883a 	nop
  80a574:	e037883a 	mov	sp,fp
  80a578:	dfc00117 	ldw	ra,4(sp)
  80a57c:	df000017 	ldw	fp,0(sp)
  80a580:	dec00204 	addi	sp,sp,8
  80a584:	f800283a 	ret

0080a588 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80a588:	defff304 	addi	sp,sp,-52
  80a58c:	dfc00c15 	stw	ra,48(sp)
  80a590:	df000b15 	stw	fp,44(sp)
  80a594:	df000b04 	addi	fp,sp,44
  80a598:	e13ffc15 	stw	r4,-16(fp)
  80a59c:	e17ffd15 	stw	r5,-12(fp)
  80a5a0:	e1bffe15 	stw	r6,-8(fp)
  80a5a4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80a5a8:	e0bffe17 	ldw	r2,-8(fp)
  80a5ac:	e0fffd17 	ldw	r3,-12(fp)
  80a5b0:	1885883a 	add	r2,r3,r2
  80a5b4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80a5b8:	e0bffc17 	ldw	r2,-16(fp)
  80a5bc:	00c00044 	movi	r3,1
  80a5c0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80a5c4:	00009906 	br	80a82c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80a5c8:	e0bffd17 	ldw	r2,-12(fp)
  80a5cc:	10800003 	ldbu	r2,0(r2)
  80a5d0:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80a5d4:	e0bffc17 	ldw	r2,-16(fp)
  80a5d8:	10800903 	ldbu	r2,36(r2)
  80a5dc:	10803fcc 	andi	r2,r2,255
  80a5e0:	1080201c 	xori	r2,r2,128
  80a5e4:	10bfe004 	addi	r2,r2,-128
  80a5e8:	10003716 	blt	r2,zero,80a6c8 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80a5ec:	e0bffc17 	ldw	r2,-16(fp)
  80a5f0:	10800903 	ldbu	r2,36(r2)
  80a5f4:	10803fcc 	andi	r2,r2,255
  80a5f8:	1080201c 	xori	r2,r2,128
  80a5fc:	10bfe004 	addi	r2,r2,-128
  80a600:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80a604:	e0bffa17 	ldw	r2,-24(fp)
  80a608:	1000031e 	bne	r2,zero,80a618 <altera_avalon_lcd_16207_write+0x90>
  80a60c:	e0bff907 	ldb	r2,-28(fp)
  80a610:	108016d8 	cmpnei	r2,r2,91
  80a614:	10000d1e 	bne	r2,zero,80a64c <altera_avalon_lcd_16207_write+0xc4>
  80a618:	e0bffa17 	ldw	r2,-24(fp)
  80a61c:	10001826 	beq	r2,zero,80a680 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80a620:	d0e00b17 	ldw	r3,-32724(gp)
  80a624:	e0bff907 	ldb	r2,-28(fp)
  80a628:	10800044 	addi	r2,r2,1
  80a62c:	1885883a 	add	r2,r3,r2
  80a630:	10800003 	ldbu	r2,0(r2)
  80a634:	10803fcc 	andi	r2,r2,255
  80a638:	1080010c 	andi	r2,r2,4
  80a63c:	1000101e 	bne	r2,zero,80a680 <altera_avalon_lcd_16207_write+0xf8>
  80a640:	e0bff907 	ldb	r2,-28(fp)
  80a644:	10800ee0 	cmpeqi	r2,r2,59
  80a648:	10000d1e 	bne	r2,zero,80a680 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80a64c:	e0fffc17 	ldw	r3,-16(fp)
  80a650:	e0bffa17 	ldw	r2,-24(fp)
  80a654:	1885883a 	add	r2,r3,r2
  80a658:	10800a04 	addi	r2,r2,40
  80a65c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80a660:	e0bff907 	ldb	r2,-28(fp)
  80a664:	100b883a 	mov	r5,r2
  80a668:	e13ffc17 	ldw	r4,-16(fp)
  80a66c:	080a2dc0 	call	80a2dc <lcd_handle_escape>

        sp->esccount = -1;
  80a670:	e0bffc17 	ldw	r2,-16(fp)
  80a674:	00ffffc4 	movi	r3,-1
  80a678:	10c00905 	stb	r3,36(r2)
  80a67c:	00006806 	br	80a820 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80a680:	e0bffc17 	ldw	r2,-16(fp)
  80a684:	10800903 	ldbu	r2,36(r2)
  80a688:	10803fcc 	andi	r2,r2,255
  80a68c:	108001e8 	cmpgeui	r2,r2,7
  80a690:	1000631e 	bne	r2,zero,80a820 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80a694:	e0fffc17 	ldw	r3,-16(fp)
  80a698:	e0bffa17 	ldw	r2,-24(fp)
  80a69c:	1885883a 	add	r2,r3,r2
  80a6a0:	10800a04 	addi	r2,r2,40
  80a6a4:	e0fff903 	ldbu	r3,-28(fp)
  80a6a8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80a6ac:	e0bffc17 	ldw	r2,-16(fp)
  80a6b0:	10800903 	ldbu	r2,36(r2)
  80a6b4:	10800044 	addi	r2,r2,1
  80a6b8:	1007883a 	mov	r3,r2
  80a6bc:	e0bffc17 	ldw	r2,-16(fp)
  80a6c0:	10c00905 	stb	r3,36(r2)
  80a6c4:	00005606 	br	80a820 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80a6c8:	e0bff907 	ldb	r2,-28(fp)
  80a6cc:	108006d8 	cmpnei	r2,r2,27
  80a6d0:	1000031e 	bne	r2,zero,80a6e0 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80a6d4:	e0bffc17 	ldw	r2,-16(fp)
  80a6d8:	10000905 	stb	zero,36(r2)
  80a6dc:	00005006 	br	80a820 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80a6e0:	e0bff907 	ldb	r2,-28(fp)
  80a6e4:	10800358 	cmpnei	r2,r2,13
  80a6e8:	1000031e 	bne	r2,zero,80a6f8 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80a6ec:	e0bffc17 	ldw	r2,-16(fp)
  80a6f0:	10000845 	stb	zero,33(r2)
  80a6f4:	00004a06 	br	80a820 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80a6f8:	e0bff907 	ldb	r2,-28(fp)
  80a6fc:	10800298 	cmpnei	r2,r2,10
  80a700:	1000101e 	bne	r2,zero,80a744 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80a704:	e0bffc17 	ldw	r2,-16(fp)
  80a708:	10000845 	stb	zero,33(r2)
      sp->y++;
  80a70c:	e0bffc17 	ldw	r2,-16(fp)
  80a710:	10800883 	ldbu	r2,34(r2)
  80a714:	10800044 	addi	r2,r2,1
  80a718:	1007883a 	mov	r3,r2
  80a71c:	e0bffc17 	ldw	r2,-16(fp)
  80a720:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80a724:	e0bffc17 	ldw	r2,-16(fp)
  80a728:	10800883 	ldbu	r2,34(r2)
  80a72c:	10803fcc 	andi	r2,r2,255
  80a730:	108000f0 	cmpltui	r2,r2,3
  80a734:	10003a1e 	bne	r2,zero,80a820 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80a738:	e13ffc17 	ldw	r4,-16(fp)
  80a73c:	080a2100 	call	80a210 <lcd_scroll_up>
  80a740:	00003706 	br	80a820 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80a744:	e0bff907 	ldb	r2,-28(fp)
  80a748:	10800218 	cmpnei	r2,r2,8
  80a74c:	10000b1e 	bne	r2,zero,80a77c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80a750:	e0bffc17 	ldw	r2,-16(fp)
  80a754:	10800843 	ldbu	r2,33(r2)
  80a758:	10803fcc 	andi	r2,r2,255
  80a75c:	10003026 	beq	r2,zero,80a820 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80a760:	e0bffc17 	ldw	r2,-16(fp)
  80a764:	10800843 	ldbu	r2,33(r2)
  80a768:	10bfffc4 	addi	r2,r2,-1
  80a76c:	1007883a 	mov	r3,r2
  80a770:	e0bffc17 	ldw	r2,-16(fp)
  80a774:	10c00845 	stb	r3,33(r2)
  80a778:	00002906 	br	80a820 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80a77c:	d0e00b17 	ldw	r3,-32724(gp)
  80a780:	e0bff907 	ldb	r2,-28(fp)
  80a784:	10800044 	addi	r2,r2,1
  80a788:	1885883a 	add	r2,r3,r2
  80a78c:	10800003 	ldbu	r2,0(r2)
  80a790:	10803fcc 	andi	r2,r2,255
  80a794:	1080201c 	xori	r2,r2,128
  80a798:	10bfe004 	addi	r2,r2,-128
  80a79c:	108025cc 	andi	r2,r2,151
  80a7a0:	10001f26 	beq	r2,zero,80a820 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80a7a4:	e0bffc17 	ldw	r2,-16(fp)
  80a7a8:	10800883 	ldbu	r2,34(r2)
  80a7ac:	10803fcc 	andi	r2,r2,255
  80a7b0:	108000b0 	cmpltui	r2,r2,2
  80a7b4:	1000021e 	bne	r2,zero,80a7c0 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80a7b8:	e13ffc17 	ldw	r4,-16(fp)
  80a7bc:	080a2100 	call	80a210 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80a7c0:	e0bffc17 	ldw	r2,-16(fp)
  80a7c4:	10800843 	ldbu	r2,33(r2)
  80a7c8:	10803fcc 	andi	r2,r2,255
  80a7cc:	10801428 	cmpgeui	r2,r2,80
  80a7d0:	10000d1e 	bne	r2,zero,80a808 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80a7d4:	e0bffc17 	ldw	r2,-16(fp)
  80a7d8:	10800883 	ldbu	r2,34(r2)
  80a7dc:	10c03fcc 	andi	r3,r2,255
  80a7e0:	e0bffc17 	ldw	r2,-16(fp)
  80a7e4:	10800843 	ldbu	r2,33(r2)
  80a7e8:	10803fcc 	andi	r2,r2,255
  80a7ec:	e13ffc17 	ldw	r4,-16(fp)
  80a7f0:	18c018e4 	muli	r3,r3,99
  80a7f4:	20c7883a 	add	r3,r4,r3
  80a7f8:	1885883a 	add	r2,r3,r2
  80a7fc:	10801004 	addi	r2,r2,64
  80a800:	e0fff903 	ldbu	r3,-28(fp)
  80a804:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80a808:	e0bffc17 	ldw	r2,-16(fp)
  80a80c:	10800843 	ldbu	r2,33(r2)
  80a810:	10800044 	addi	r2,r2,1
  80a814:	1007883a 	mov	r3,r2
  80a818:	e0bffc17 	ldw	r2,-16(fp)
  80a81c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80a820:	e0bffd17 	ldw	r2,-12(fp)
  80a824:	10800044 	addi	r2,r2,1
  80a828:	e0bffd15 	stw	r2,-12(fp)
  80a82c:	e0fffd17 	ldw	r3,-12(fp)
  80a830:	e0bff817 	ldw	r2,-32(fp)
  80a834:	18bf6436 	bltu	r3,r2,80a5c8 <__alt_mem_onchip_mem+0xff8025c8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80a838:	00800404 	movi	r2,16
  80a83c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80a840:	e03ff515 	stw	zero,-44(fp)
  80a844:	00003706 	br	80a924 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80a848:	00801404 	movi	r2,80
  80a84c:	e0bff715 	stw	r2,-36(fp)
  80a850:	00001106 	br	80a898 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80a854:	e0bff717 	ldw	r2,-36(fp)
  80a858:	10bfffc4 	addi	r2,r2,-1
  80a85c:	e13ffc17 	ldw	r4,-16(fp)
  80a860:	e0fff517 	ldw	r3,-44(fp)
  80a864:	18c018e4 	muli	r3,r3,99
  80a868:	20c7883a 	add	r3,r4,r3
  80a86c:	1885883a 	add	r2,r3,r2
  80a870:	10801004 	addi	r2,r2,64
  80a874:	10800003 	ldbu	r2,0(r2)
  80a878:	10803fcc 	andi	r2,r2,255
  80a87c:	1080201c 	xori	r2,r2,128
  80a880:	10bfe004 	addi	r2,r2,-128
  80a884:	10800820 	cmpeqi	r2,r2,32
  80a888:	10000626 	beq	r2,zero,80a8a4 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80a88c:	e0bff717 	ldw	r2,-36(fp)
  80a890:	10bfffc4 	addi	r2,r2,-1
  80a894:	e0bff715 	stw	r2,-36(fp)
  80a898:	e0bff717 	ldw	r2,-36(fp)
  80a89c:	00bfed16 	blt	zero,r2,80a854 <__alt_mem_onchip_mem+0xff802854>
  80a8a0:	00000106 	br	80a8a8 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80a8a4:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80a8a8:	e0bff717 	ldw	r2,-36(fp)
  80a8ac:	10800448 	cmpgei	r2,r2,17
  80a8b0:	1000031e 	bne	r2,zero,80a8c0 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80a8b4:	00800404 	movi	r2,16
  80a8b8:	e0bff715 	stw	r2,-36(fp)
  80a8bc:	00000306 	br	80a8cc <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80a8c0:	e0bff717 	ldw	r2,-36(fp)
  80a8c4:	10800044 	addi	r2,r2,1
  80a8c8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80a8cc:	e0bff717 	ldw	r2,-36(fp)
  80a8d0:	1009883a 	mov	r4,r2
  80a8d4:	e0fffc17 	ldw	r3,-16(fp)
  80a8d8:	e0bff517 	ldw	r2,-44(fp)
  80a8dc:	108018e4 	muli	r2,r2,99
  80a8e0:	1885883a 	add	r2,r3,r2
  80a8e4:	10802444 	addi	r2,r2,145
  80a8e8:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80a8ec:	e0fff617 	ldw	r3,-40(fp)
  80a8f0:	e0bff717 	ldw	r2,-36(fp)
  80a8f4:	1880020e 	bge	r3,r2,80a900 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80a8f8:	e0bff717 	ldw	r2,-36(fp)
  80a8fc:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80a900:	e0fffc17 	ldw	r3,-16(fp)
  80a904:	e0bff517 	ldw	r2,-44(fp)
  80a908:	108018e4 	muli	r2,r2,99
  80a90c:	1885883a 	add	r2,r3,r2
  80a910:	10802484 	addi	r2,r2,146
  80a914:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80a918:	e0bff517 	ldw	r2,-44(fp)
  80a91c:	10800044 	addi	r2,r2,1
  80a920:	e0bff515 	stw	r2,-44(fp)
  80a924:	e0bff517 	ldw	r2,-44(fp)
  80a928:	10800090 	cmplti	r2,r2,2
  80a92c:	103fc61e 	bne	r2,zero,80a848 <__alt_mem_onchip_mem+0xff802848>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80a930:	e0bff617 	ldw	r2,-40(fp)
  80a934:	10800448 	cmpgei	r2,r2,17
  80a938:	1000031e 	bne	r2,zero,80a948 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80a93c:	e0bffc17 	ldw	r2,-16(fp)
  80a940:	10000985 	stb	zero,38(r2)
  80a944:	00002e06 	br	80aa00 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80a948:	e0bff617 	ldw	r2,-40(fp)
  80a94c:	1085883a 	add	r2,r2,r2
  80a950:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80a954:	e0bff617 	ldw	r2,-40(fp)
  80a958:	1007883a 	mov	r3,r2
  80a95c:	e0bffc17 	ldw	r2,-16(fp)
  80a960:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80a964:	e03ff515 	stw	zero,-44(fp)
  80a968:	00002206 	br	80a9f4 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80a96c:	e0fffc17 	ldw	r3,-16(fp)
  80a970:	e0bff517 	ldw	r2,-44(fp)
  80a974:	108018e4 	muli	r2,r2,99
  80a978:	1885883a 	add	r2,r3,r2
  80a97c:	10802444 	addi	r2,r2,145
  80a980:	10800003 	ldbu	r2,0(r2)
  80a984:	10803fcc 	andi	r2,r2,255
  80a988:	1080201c 	xori	r2,r2,128
  80a98c:	10bfe004 	addi	r2,r2,-128
  80a990:	10800450 	cmplti	r2,r2,17
  80a994:	1000141e 	bne	r2,zero,80a9e8 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80a998:	e0fffc17 	ldw	r3,-16(fp)
  80a99c:	e0bff517 	ldw	r2,-44(fp)
  80a9a0:	108018e4 	muli	r2,r2,99
  80a9a4:	1885883a 	add	r2,r3,r2
  80a9a8:	10802444 	addi	r2,r2,145
  80a9ac:	10800003 	ldbu	r2,0(r2)
  80a9b0:	10803fcc 	andi	r2,r2,255
  80a9b4:	1080201c 	xori	r2,r2,128
  80a9b8:	10bfe004 	addi	r2,r2,-128
  80a9bc:	1004923a 	slli	r2,r2,8
  80a9c0:	e17ff617 	ldw	r5,-40(fp)
  80a9c4:	1009883a 	mov	r4,r2
  80a9c8:	080cbd40 	call	80cbd4 <__divsi3>
  80a9cc:	1009883a 	mov	r4,r2
  80a9d0:	e0fffc17 	ldw	r3,-16(fp)
  80a9d4:	e0bff517 	ldw	r2,-44(fp)
  80a9d8:	108018e4 	muli	r2,r2,99
  80a9dc:	1885883a 	add	r2,r3,r2
  80a9e0:	10802484 	addi	r2,r2,146
  80a9e4:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80a9e8:	e0bff517 	ldw	r2,-44(fp)
  80a9ec:	10800044 	addi	r2,r2,1
  80a9f0:	e0bff515 	stw	r2,-44(fp)
  80a9f4:	e0bff517 	ldw	r2,-44(fp)
  80a9f8:	10800090 	cmplti	r2,r2,2
  80a9fc:	103fdb1e 	bne	r2,zero,80a96c <__alt_mem_onchip_mem+0xff80296c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80aa00:	e0bffc17 	ldw	r2,-16(fp)
  80aa04:	10800943 	ldbu	r2,37(r2)
  80aa08:	10803fcc 	andi	r2,r2,255
  80aa0c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80aa10:	e13ffc17 	ldw	r4,-16(fp)
  80aa14:	080a0240 	call	80a024 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80aa18:	e0bffc17 	ldw	r2,-16(fp)
  80aa1c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80aa20:	e0bffc17 	ldw	r2,-16(fp)
  80aa24:	10800943 	ldbu	r2,37(r2)
  80aa28:	10c03fcc 	andi	r3,r2,255
  80aa2c:	e0bffb17 	ldw	r2,-20(fp)
  80aa30:	18800426 	beq	r3,r2,80aa44 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80aa34:	e0bffc17 	ldw	r2,-16(fp)
  80aa38:	00c00044 	movi	r3,1
  80aa3c:	10c009c5 	stb	r3,39(r2)
  }
  80aa40:	003fef06 	br	80aa00 <__alt_mem_onchip_mem+0xff802a00>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80aa44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80aa48:	e0bffe17 	ldw	r2,-8(fp)
}
  80aa4c:	e037883a 	mov	sp,fp
  80aa50:	dfc00117 	ldw	ra,4(sp)
  80aa54:	df000017 	ldw	fp,0(sp)
  80aa58:	dec00204 	addi	sp,sp,8
  80aa5c:	f800283a 	ret

0080aa60 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80aa60:	defffc04 	addi	sp,sp,-16
  80aa64:	dfc00315 	stw	ra,12(sp)
  80aa68:	df000215 	stw	fp,8(sp)
  80aa6c:	df000204 	addi	fp,sp,8
  80aa70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80aa74:	e0bfff17 	ldw	r2,-4(fp)
  80aa78:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80aa7c:	e0bffe17 	ldw	r2,-8(fp)
  80aa80:	10800943 	ldbu	r2,37(r2)
  80aa84:	10803fcc 	andi	r2,r2,255
  80aa88:	10c00044 	addi	r3,r2,1
  80aa8c:	e0bffe17 	ldw	r2,-8(fp)
  80aa90:	10800983 	ldbu	r2,38(r2)
  80aa94:	10803fcc 	andi	r2,r2,255
  80aa98:	18800316 	blt	r3,r2,80aaa8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80aa9c:	e0bffe17 	ldw	r2,-8(fp)
  80aaa0:	10000945 	stb	zero,37(r2)
  80aaa4:	00000606 	br	80aac0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80aaa8:	e0bffe17 	ldw	r2,-8(fp)
  80aaac:	10800943 	ldbu	r2,37(r2)
  80aab0:	10800044 	addi	r2,r2,1
  80aab4:	1007883a 	mov	r3,r2
  80aab8:	e0bffe17 	ldw	r2,-8(fp)
  80aabc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80aac0:	e0bffe17 	ldw	r2,-8(fp)
  80aac4:	10800983 	ldbu	r2,38(r2)
  80aac8:	10803fcc 	andi	r2,r2,255
  80aacc:	10000826 	beq	r2,zero,80aaf0 <alt_lcd_16207_timeout+0x90>
  80aad0:	e0bffe17 	ldw	r2,-8(fp)
  80aad4:	108009c3 	ldbu	r2,39(r2)
  80aad8:	10803fcc 	andi	r2,r2,255
  80aadc:	1080201c 	xori	r2,r2,128
  80aae0:	10bfe004 	addi	r2,r2,-128
  80aae4:	1000021e 	bne	r2,zero,80aaf0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80aae8:	e13ffe17 	ldw	r4,-8(fp)
  80aaec:	080a0240 	call	80a024 <lcd_repaint_screen>

  return sp->period;
  80aaf0:	e0bffe17 	ldw	r2,-8(fp)
  80aaf4:	10800717 	ldw	r2,28(r2)
}
  80aaf8:	e037883a 	mov	sp,fp
  80aafc:	dfc00117 	ldw	ra,4(sp)
  80ab00:	df000017 	ldw	fp,0(sp)
  80ab04:	dec00204 	addi	sp,sp,8
  80ab08:	f800283a 	ret

0080ab0c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80ab0c:	defffc04 	addi	sp,sp,-16
  80ab10:	dfc00315 	stw	ra,12(sp)
  80ab14:	df000215 	stw	fp,8(sp)
  80ab18:	df000204 	addi	fp,sp,8
  80ab1c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80ab20:	e0bfff17 	ldw	r2,-4(fp)
  80ab24:	10800017 	ldw	r2,0(r2)
  80ab28:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80ab2c:	e0bfff17 	ldw	r2,-4(fp)
  80ab30:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80ab34:	010ea604 	movi	r4,15000
  80ab38:	080c0580 	call	80c058 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80ab3c:	e0bffe17 	ldw	r2,-8(fp)
  80ab40:	00c00c04 	movi	r3,48
  80ab44:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80ab48:	01040104 	movi	r4,4100
  80ab4c:	080c0580 	call	80c058 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80ab50:	e0bffe17 	ldw	r2,-8(fp)
  80ab54:	00c00c04 	movi	r3,48
  80ab58:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80ab5c:	0100fa04 	movi	r4,1000
  80ab60:	080c0580 	call	80c058 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80ab64:	e0bffe17 	ldw	r2,-8(fp)
  80ab68:	00c00c04 	movi	r3,48
  80ab6c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80ab70:	01400e04 	movi	r5,56
  80ab74:	e13fff17 	ldw	r4,-4(fp)
  80ab78:	0809dc40 	call	809dc4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80ab7c:	01400204 	movi	r5,8
  80ab80:	e13fff17 	ldw	r4,-4(fp)
  80ab84:	0809dc40 	call	809dc4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80ab88:	e13fff17 	ldw	r4,-4(fp)
  80ab8c:	0809f540 	call	809f54 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80ab90:	01400184 	movi	r5,6
  80ab94:	e13fff17 	ldw	r4,-4(fp)
  80ab98:	0809dc40 	call	809dc4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80ab9c:	01400304 	movi	r5,12
  80aba0:	e13fff17 	ldw	r4,-4(fp)
  80aba4:	0809dc40 	call	809dc4 <lcd_write_command>

  sp->esccount = -1;
  80aba8:	e0bfff17 	ldw	r2,-4(fp)
  80abac:	00ffffc4 	movi	r3,-1
  80abb0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80abb4:	e0bfff17 	ldw	r2,-4(fp)
  80abb8:	10800a04 	addi	r2,r2,40
  80abbc:	01800204 	movi	r6,8
  80abc0:	000b883a 	mov	r5,zero
  80abc4:	1009883a 	mov	r4,r2
  80abc8:	080c77c0 	call	80c77c <memset>

  sp->scrollpos = 0;
  80abcc:	e0bfff17 	ldw	r2,-4(fp)
  80abd0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80abd4:	e0bfff17 	ldw	r2,-4(fp)
  80abd8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80abdc:	e0bfff17 	ldw	r2,-4(fp)
  80abe0:	100009c5 	stb	zero,39(r2)
  80abe4:	d0a62617 	ldw	r2,-26472(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80abe8:	01400284 	movi	r5,10
  80abec:	1009883a 	mov	r4,r2
  80abf0:	080cccc0 	call	80cccc <__udivsi3>
  80abf4:	1007883a 	mov	r3,r2
  80abf8:	e0bfff17 	ldw	r2,-4(fp)
  80abfc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80ac00:	e0bfff17 	ldw	r2,-4(fp)
  80ac04:	10c00104 	addi	r3,r2,4
  80ac08:	e0bfff17 	ldw	r2,-4(fp)
  80ac0c:	10800717 	ldw	r2,28(r2)
  80ac10:	e1ffff17 	ldw	r7,-4(fp)
  80ac14:	01802074 	movhi	r6,129
  80ac18:	31aa9804 	addi	r6,r6,-21920
  80ac1c:	100b883a 	mov	r5,r2
  80ac20:	1809883a 	mov	r4,r3
  80ac24:	0808e200 	call	808e20 <alt_alarm_start>
}
  80ac28:	0001883a 	nop
  80ac2c:	e037883a 	mov	sp,fp
  80ac30:	dfc00117 	ldw	ra,4(sp)
  80ac34:	df000017 	ldw	fp,0(sp)
  80ac38:	dec00204 	addi	sp,sp,8
  80ac3c:	f800283a 	ret

0080ac40 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ac40:	defffa04 	addi	sp,sp,-24
  80ac44:	dfc00515 	stw	ra,20(sp)
  80ac48:	df000415 	stw	fp,16(sp)
  80ac4c:	df000404 	addi	fp,sp,16
  80ac50:	e13ffd15 	stw	r4,-12(fp)
  80ac54:	e17ffe15 	stw	r5,-8(fp)
  80ac58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80ac5c:	e0bffd17 	ldw	r2,-12(fp)
  80ac60:	10800017 	ldw	r2,0(r2)
  80ac64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80ac68:	e0bffc17 	ldw	r2,-16(fp)
  80ac6c:	10c00a04 	addi	r3,r2,40
  80ac70:	e0bffd17 	ldw	r2,-12(fp)
  80ac74:	10800217 	ldw	r2,8(r2)
  80ac78:	100f883a 	mov	r7,r2
  80ac7c:	e1bfff17 	ldw	r6,-4(fp)
  80ac80:	e17ffe17 	ldw	r5,-8(fp)
  80ac84:	1809883a 	mov	r4,r3
  80ac88:	080a5880 	call	80a588 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80ac8c:	e037883a 	mov	sp,fp
  80ac90:	dfc00117 	ldw	ra,4(sp)
  80ac94:	df000017 	ldw	fp,0(sp)
  80ac98:	dec00204 	addi	sp,sp,8
  80ac9c:	f800283a 	ret

0080aca0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80aca0:	defffa04 	addi	sp,sp,-24
  80aca4:	dfc00515 	stw	ra,20(sp)
  80aca8:	df000415 	stw	fp,16(sp)
  80acac:	df000404 	addi	fp,sp,16
  80acb0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80acb4:	0007883a 	mov	r3,zero
  80acb8:	e0bfff17 	ldw	r2,-4(fp)
  80acbc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80acc0:	e0bfff17 	ldw	r2,-4(fp)
  80acc4:	10800104 	addi	r2,r2,4
  80acc8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80accc:	0005303a 	rdctl	r2,status
  80acd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80acd4:	e0fffd17 	ldw	r3,-12(fp)
  80acd8:	00bfff84 	movi	r2,-2
  80acdc:	1884703a 	and	r2,r3,r2
  80ace0:	1001703a 	wrctl	status,r2
  
  return context;
  80ace4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80ace8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80acec:	08091500 	call	809150 <alt_tick>
  80acf0:	e0bffc17 	ldw	r2,-16(fp)
  80acf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80acf8:	e0bffe17 	ldw	r2,-8(fp)
  80acfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80ad00:	0001883a 	nop
  80ad04:	e037883a 	mov	sp,fp
  80ad08:	dfc00117 	ldw	ra,4(sp)
  80ad0c:	df000017 	ldw	fp,0(sp)
  80ad10:	dec00204 	addi	sp,sp,8
  80ad14:	f800283a 	ret

0080ad18 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80ad18:	defff804 	addi	sp,sp,-32
  80ad1c:	dfc00715 	stw	ra,28(sp)
  80ad20:	df000615 	stw	fp,24(sp)
  80ad24:	df000604 	addi	fp,sp,24
  80ad28:	e13ffc15 	stw	r4,-16(fp)
  80ad2c:	e17ffd15 	stw	r5,-12(fp)
  80ad30:	e1bffe15 	stw	r6,-8(fp)
  80ad34:	e1ffff15 	stw	r7,-4(fp)
  80ad38:	e0bfff17 	ldw	r2,-4(fp)
  80ad3c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80ad40:	d0a62617 	ldw	r2,-26472(gp)
  80ad44:	1000021e 	bne	r2,zero,80ad50 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80ad48:	e0bffb17 	ldw	r2,-20(fp)
  80ad4c:	d0a62615 	stw	r2,-26472(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80ad50:	e0bffc17 	ldw	r2,-16(fp)
  80ad54:	10800104 	addi	r2,r2,4
  80ad58:	00c001c4 	movi	r3,7
  80ad5c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80ad60:	d8000015 	stw	zero,0(sp)
  80ad64:	e1fffc17 	ldw	r7,-16(fp)
  80ad68:	01802074 	movhi	r6,129
  80ad6c:	31ab2804 	addi	r6,r6,-21344
  80ad70:	e17ffe17 	ldw	r5,-8(fp)
  80ad74:	e13ffd17 	ldw	r4,-12(fp)
  80ad78:	080b9c00 	call	80b9c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80ad7c:	0001883a 	nop
  80ad80:	e037883a 	mov	sp,fp
  80ad84:	dfc00117 	ldw	ra,4(sp)
  80ad88:	df000017 	ldw	fp,0(sp)
  80ad8c:	dec00204 	addi	sp,sp,8
  80ad90:	f800283a 	ret

0080ad94 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ad94:	defffa04 	addi	sp,sp,-24
  80ad98:	dfc00515 	stw	ra,20(sp)
  80ad9c:	df000415 	stw	fp,16(sp)
  80ada0:	df000404 	addi	fp,sp,16
  80ada4:	e13ffd15 	stw	r4,-12(fp)
  80ada8:	e17ffe15 	stw	r5,-8(fp)
  80adac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80adb0:	e0bffd17 	ldw	r2,-12(fp)
  80adb4:	10800017 	ldw	r2,0(r2)
  80adb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80adbc:	e0bffc17 	ldw	r2,-16(fp)
  80adc0:	10c00a04 	addi	r3,r2,40
  80adc4:	e0bffd17 	ldw	r2,-12(fp)
  80adc8:	10800217 	ldw	r2,8(r2)
  80adcc:	100f883a 	mov	r7,r2
  80add0:	e1bfff17 	ldw	r6,-4(fp)
  80add4:	e17ffe17 	ldw	r5,-8(fp)
  80add8:	1809883a 	mov	r4,r3
  80addc:	080b2a80 	call	80b2a8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80ade0:	e037883a 	mov	sp,fp
  80ade4:	dfc00117 	ldw	ra,4(sp)
  80ade8:	df000017 	ldw	fp,0(sp)
  80adec:	dec00204 	addi	sp,sp,8
  80adf0:	f800283a 	ret

0080adf4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80adf4:	defffa04 	addi	sp,sp,-24
  80adf8:	dfc00515 	stw	ra,20(sp)
  80adfc:	df000415 	stw	fp,16(sp)
  80ae00:	df000404 	addi	fp,sp,16
  80ae04:	e13ffd15 	stw	r4,-12(fp)
  80ae08:	e17ffe15 	stw	r5,-8(fp)
  80ae0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ae10:	e0bffd17 	ldw	r2,-12(fp)
  80ae14:	10800017 	ldw	r2,0(r2)
  80ae18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80ae1c:	e0bffc17 	ldw	r2,-16(fp)
  80ae20:	10c00a04 	addi	r3,r2,40
  80ae24:	e0bffd17 	ldw	r2,-12(fp)
  80ae28:	10800217 	ldw	r2,8(r2)
  80ae2c:	100f883a 	mov	r7,r2
  80ae30:	e1bfff17 	ldw	r6,-4(fp)
  80ae34:	e17ffe17 	ldw	r5,-8(fp)
  80ae38:	1809883a 	mov	r4,r3
  80ae3c:	080b4c00 	call	80b4c0 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80ae40:	e037883a 	mov	sp,fp
  80ae44:	dfc00117 	ldw	ra,4(sp)
  80ae48:	df000017 	ldw	fp,0(sp)
  80ae4c:	dec00204 	addi	sp,sp,8
  80ae50:	f800283a 	ret

0080ae54 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80ae54:	defffc04 	addi	sp,sp,-16
  80ae58:	dfc00315 	stw	ra,12(sp)
  80ae5c:	df000215 	stw	fp,8(sp)
  80ae60:	df000204 	addi	fp,sp,8
  80ae64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ae68:	e0bfff17 	ldw	r2,-4(fp)
  80ae6c:	10800017 	ldw	r2,0(r2)
  80ae70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80ae74:	e0bffe17 	ldw	r2,-8(fp)
  80ae78:	10c00a04 	addi	r3,r2,40
  80ae7c:	e0bfff17 	ldw	r2,-4(fp)
  80ae80:	10800217 	ldw	r2,8(r2)
  80ae84:	100b883a 	mov	r5,r2
  80ae88:	1809883a 	mov	r4,r3
  80ae8c:	080b2180 	call	80b218 <altera_avalon_uart_close>
}
  80ae90:	e037883a 	mov	sp,fp
  80ae94:	dfc00117 	ldw	ra,4(sp)
  80ae98:	df000017 	ldw	fp,0(sp)
  80ae9c:	dec00204 	addi	sp,sp,8
  80aea0:	f800283a 	ret

0080aea4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80aea4:	defff804 	addi	sp,sp,-32
  80aea8:	dfc00715 	stw	ra,28(sp)
  80aeac:	df000615 	stw	fp,24(sp)
  80aeb0:	df000604 	addi	fp,sp,24
  80aeb4:	e13ffd15 	stw	r4,-12(fp)
  80aeb8:	e17ffe15 	stw	r5,-8(fp)
  80aebc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80aec0:	e0bffd17 	ldw	r2,-12(fp)
  80aec4:	10800017 	ldw	r2,0(r2)
  80aec8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80aecc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80aed0:	1000041e 	bne	r2,zero,80aee4 <altera_avalon_uart_init+0x40>
  80aed4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80aed8:	1000021e 	bne	r2,zero,80aee4 <altera_avalon_uart_init+0x40>
  80aedc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80aee0:	10000226 	beq	r2,zero,80aeec <altera_avalon_uart_init+0x48>
  80aee4:	00800044 	movi	r2,1
  80aee8:	00000106 	br	80aef0 <altera_avalon_uart_init+0x4c>
  80aeec:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80aef0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80aef4:	e0bffc17 	ldw	r2,-16(fp)
  80aef8:	10000f1e 	bne	r2,zero,80af38 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80aefc:	e0bffd17 	ldw	r2,-12(fp)
  80af00:	00c32004 	movi	r3,3200
  80af04:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80af08:	e0bffb17 	ldw	r2,-20(fp)
  80af0c:	10800304 	addi	r2,r2,12
  80af10:	e0fffd17 	ldw	r3,-12(fp)
  80af14:	18c00117 	ldw	r3,4(r3)
  80af18:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80af1c:	d8000015 	stw	zero,0(sp)
  80af20:	e1fffd17 	ldw	r7,-12(fp)
  80af24:	01802074 	movhi	r6,129
  80af28:	31abd404 	addi	r6,r6,-20656
  80af2c:	e17fff17 	ldw	r5,-4(fp)
  80af30:	e13ffe17 	ldw	r4,-8(fp)
  80af34:	080b9c00 	call	80b9c0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80af38:	0001883a 	nop
  80af3c:	e037883a 	mov	sp,fp
  80af40:	dfc00117 	ldw	ra,4(sp)
  80af44:	df000017 	ldw	fp,0(sp)
  80af48:	dec00204 	addi	sp,sp,8
  80af4c:	f800283a 	ret

0080af50 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80af50:	defffa04 	addi	sp,sp,-24
  80af54:	dfc00515 	stw	ra,20(sp)
  80af58:	df000415 	stw	fp,16(sp)
  80af5c:	df000404 	addi	fp,sp,16
  80af60:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80af64:	e0bfff17 	ldw	r2,-4(fp)
  80af68:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80af6c:	e0bffc17 	ldw	r2,-16(fp)
  80af70:	10800017 	ldw	r2,0(r2)
  80af74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80af78:	e0bffd17 	ldw	r2,-12(fp)
  80af7c:	10800204 	addi	r2,r2,8
  80af80:	10800037 	ldwio	r2,0(r2)
  80af84:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80af88:	e0bffd17 	ldw	r2,-12(fp)
  80af8c:	10800204 	addi	r2,r2,8
  80af90:	0007883a 	mov	r3,zero
  80af94:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80af98:	e0bffd17 	ldw	r2,-12(fp)
  80af9c:	10800204 	addi	r2,r2,8
  80afa0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80afa4:	e0bffe17 	ldw	r2,-8(fp)
  80afa8:	1080200c 	andi	r2,r2,128
  80afac:	10000326 	beq	r2,zero,80afbc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80afb0:	e17ffe17 	ldw	r5,-8(fp)
  80afb4:	e13ffc17 	ldw	r4,-16(fp)
  80afb8:	080afec0 	call	80afec <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80afbc:	e0bffe17 	ldw	r2,-8(fp)
  80afc0:	1081100c 	andi	r2,r2,1088
  80afc4:	10000326 	beq	r2,zero,80afd4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80afc8:	e17ffe17 	ldw	r5,-8(fp)
  80afcc:	e13ffc17 	ldw	r4,-16(fp)
  80afd0:	080b0d00 	call	80b0d0 <altera_avalon_uart_txirq>
  }
  

}
  80afd4:	0001883a 	nop
  80afd8:	e037883a 	mov	sp,fp
  80afdc:	dfc00117 	ldw	ra,4(sp)
  80afe0:	df000017 	ldw	fp,0(sp)
  80afe4:	dec00204 	addi	sp,sp,8
  80afe8:	f800283a 	ret

0080afec <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80afec:	defffc04 	addi	sp,sp,-16
  80aff0:	df000315 	stw	fp,12(sp)
  80aff4:	df000304 	addi	fp,sp,12
  80aff8:	e13ffe15 	stw	r4,-8(fp)
  80affc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80b000:	e0bfff17 	ldw	r2,-4(fp)
  80b004:	108000cc 	andi	r2,r2,3
  80b008:	10002c1e 	bne	r2,zero,80b0bc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80b00c:	e0bffe17 	ldw	r2,-8(fp)
  80b010:	10800317 	ldw	r2,12(r2)
  80b014:	e0bffe17 	ldw	r2,-8(fp)
  80b018:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80b01c:	e0bffe17 	ldw	r2,-8(fp)
  80b020:	10800317 	ldw	r2,12(r2)
  80b024:	10800044 	addi	r2,r2,1
  80b028:	10800fcc 	andi	r2,r2,63
  80b02c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80b030:	e0bffe17 	ldw	r2,-8(fp)
  80b034:	10800317 	ldw	r2,12(r2)
  80b038:	e0fffe17 	ldw	r3,-8(fp)
  80b03c:	18c00017 	ldw	r3,0(r3)
  80b040:	18c00037 	ldwio	r3,0(r3)
  80b044:	1809883a 	mov	r4,r3
  80b048:	e0fffe17 	ldw	r3,-8(fp)
  80b04c:	1885883a 	add	r2,r3,r2
  80b050:	10800704 	addi	r2,r2,28
  80b054:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80b058:	e0bffe17 	ldw	r2,-8(fp)
  80b05c:	e0fffd17 	ldw	r3,-12(fp)
  80b060:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80b064:	e0bffe17 	ldw	r2,-8(fp)
  80b068:	10800317 	ldw	r2,12(r2)
  80b06c:	10800044 	addi	r2,r2,1
  80b070:	10800fcc 	andi	r2,r2,63
  80b074:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80b078:	e0bffe17 	ldw	r2,-8(fp)
  80b07c:	10c00217 	ldw	r3,8(r2)
  80b080:	e0bffd17 	ldw	r2,-12(fp)
  80b084:	18800e1e 	bne	r3,r2,80b0c0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80b088:	e0bffe17 	ldw	r2,-8(fp)
  80b08c:	10c00117 	ldw	r3,4(r2)
  80b090:	00bfdfc4 	movi	r2,-129
  80b094:	1886703a 	and	r3,r3,r2
  80b098:	e0bffe17 	ldw	r2,-8(fp)
  80b09c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80b0a0:	e0bffe17 	ldw	r2,-8(fp)
  80b0a4:	10800017 	ldw	r2,0(r2)
  80b0a8:	10800304 	addi	r2,r2,12
  80b0ac:	e0fffe17 	ldw	r3,-8(fp)
  80b0b0:	18c00117 	ldw	r3,4(r3)
  80b0b4:	10c00035 	stwio	r3,0(r2)
  80b0b8:	00000106 	br	80b0c0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80b0bc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80b0c0:	e037883a 	mov	sp,fp
  80b0c4:	df000017 	ldw	fp,0(sp)
  80b0c8:	dec00104 	addi	sp,sp,4
  80b0cc:	f800283a 	ret

0080b0d0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80b0d0:	defffb04 	addi	sp,sp,-20
  80b0d4:	df000415 	stw	fp,16(sp)
  80b0d8:	df000404 	addi	fp,sp,16
  80b0dc:	e13ffc15 	stw	r4,-16(fp)
  80b0e0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80b0e4:	e0bffc17 	ldw	r2,-16(fp)
  80b0e8:	10c00417 	ldw	r3,16(r2)
  80b0ec:	e0bffc17 	ldw	r2,-16(fp)
  80b0f0:	10800517 	ldw	r2,20(r2)
  80b0f4:	18803226 	beq	r3,r2,80b1c0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80b0f8:	e0bffc17 	ldw	r2,-16(fp)
  80b0fc:	10800617 	ldw	r2,24(r2)
  80b100:	1080008c 	andi	r2,r2,2
  80b104:	10000326 	beq	r2,zero,80b114 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80b108:	e0bffd17 	ldw	r2,-12(fp)
  80b10c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80b110:	10001d26 	beq	r2,zero,80b188 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80b114:	e0bffc17 	ldw	r2,-16(fp)
  80b118:	10800417 	ldw	r2,16(r2)
  80b11c:	e0bffc17 	ldw	r2,-16(fp)
  80b120:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80b124:	e0bffc17 	ldw	r2,-16(fp)
  80b128:	10800017 	ldw	r2,0(r2)
  80b12c:	10800104 	addi	r2,r2,4
  80b130:	e0fffc17 	ldw	r3,-16(fp)
  80b134:	18c00417 	ldw	r3,16(r3)
  80b138:	e13ffc17 	ldw	r4,-16(fp)
  80b13c:	20c7883a 	add	r3,r4,r3
  80b140:	18c01704 	addi	r3,r3,92
  80b144:	18c00003 	ldbu	r3,0(r3)
  80b148:	18c03fcc 	andi	r3,r3,255
  80b14c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80b150:	e0bffc17 	ldw	r2,-16(fp)
  80b154:	10800417 	ldw	r2,16(r2)
  80b158:	10800044 	addi	r2,r2,1
  80b15c:	e0fffc17 	ldw	r3,-16(fp)
  80b160:	18800415 	stw	r2,16(r3)
  80b164:	10c00fcc 	andi	r3,r2,63
  80b168:	e0bffc17 	ldw	r2,-16(fp)
  80b16c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80b170:	e0bffc17 	ldw	r2,-16(fp)
  80b174:	10800117 	ldw	r2,4(r2)
  80b178:	10c01014 	ori	r3,r2,64
  80b17c:	e0bffc17 	ldw	r2,-16(fp)
  80b180:	10c00115 	stw	r3,4(r2)
  80b184:	00000e06 	br	80b1c0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80b188:	e0bffc17 	ldw	r2,-16(fp)
  80b18c:	10800017 	ldw	r2,0(r2)
  80b190:	10800204 	addi	r2,r2,8
  80b194:	10800037 	ldwio	r2,0(r2)
  80b198:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80b19c:	e0bffd17 	ldw	r2,-12(fp)
  80b1a0:	1082000c 	andi	r2,r2,2048
  80b1a4:	1000061e 	bne	r2,zero,80b1c0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80b1a8:	e0bffc17 	ldw	r2,-16(fp)
  80b1ac:	10c00117 	ldw	r3,4(r2)
  80b1b0:	00bfefc4 	movi	r2,-65
  80b1b4:	1886703a 	and	r3,r3,r2
  80b1b8:	e0bffc17 	ldw	r2,-16(fp)
  80b1bc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80b1c0:	e0bffc17 	ldw	r2,-16(fp)
  80b1c4:	10c00417 	ldw	r3,16(r2)
  80b1c8:	e0bffc17 	ldw	r2,-16(fp)
  80b1cc:	10800517 	ldw	r2,20(r2)
  80b1d0:	1880061e 	bne	r3,r2,80b1ec <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80b1d4:	e0bffc17 	ldw	r2,-16(fp)
  80b1d8:	10c00117 	ldw	r3,4(r2)
  80b1dc:	00beefc4 	movi	r2,-1089
  80b1e0:	1886703a 	and	r3,r3,r2
  80b1e4:	e0bffc17 	ldw	r2,-16(fp)
  80b1e8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80b1ec:	e0bffc17 	ldw	r2,-16(fp)
  80b1f0:	10800017 	ldw	r2,0(r2)
  80b1f4:	10800304 	addi	r2,r2,12
  80b1f8:	e0fffc17 	ldw	r3,-16(fp)
  80b1fc:	18c00117 	ldw	r3,4(r3)
  80b200:	10c00035 	stwio	r3,0(r2)
}
  80b204:	0001883a 	nop
  80b208:	e037883a 	mov	sp,fp
  80b20c:	df000017 	ldw	fp,0(sp)
  80b210:	dec00104 	addi	sp,sp,4
  80b214:	f800283a 	ret

0080b218 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80b218:	defffd04 	addi	sp,sp,-12
  80b21c:	df000215 	stw	fp,8(sp)
  80b220:	df000204 	addi	fp,sp,8
  80b224:	e13ffe15 	stw	r4,-8(fp)
  80b228:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80b22c:	00000506 	br	80b244 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80b230:	e0bfff17 	ldw	r2,-4(fp)
  80b234:	1090000c 	andi	r2,r2,16384
  80b238:	10000226 	beq	r2,zero,80b244 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80b23c:	00bffd44 	movi	r2,-11
  80b240:	00000606 	br	80b25c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80b244:	e0bffe17 	ldw	r2,-8(fp)
  80b248:	10c00417 	ldw	r3,16(r2)
  80b24c:	e0bffe17 	ldw	r2,-8(fp)
  80b250:	10800517 	ldw	r2,20(r2)
  80b254:	18bff61e 	bne	r3,r2,80b230 <__alt_mem_onchip_mem+0xff803230>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b258:	0005883a 	mov	r2,zero
}
  80b25c:	e037883a 	mov	sp,fp
  80b260:	df000017 	ldw	fp,0(sp)
  80b264:	dec00104 	addi	sp,sp,4
  80b268:	f800283a 	ret

0080b26c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b26c:	defffe04 	addi	sp,sp,-8
  80b270:	dfc00115 	stw	ra,4(sp)
  80b274:	df000015 	stw	fp,0(sp)
  80b278:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b27c:	d0a00917 	ldw	r2,-32732(gp)
  80b280:	10000326 	beq	r2,zero,80b290 <alt_get_errno+0x24>
  80b284:	d0a00917 	ldw	r2,-32732(gp)
  80b288:	103ee83a 	callr	r2
  80b28c:	00000106 	br	80b294 <alt_get_errno+0x28>
  80b290:	d0a62a04 	addi	r2,gp,-26456
}
  80b294:	e037883a 	mov	sp,fp
  80b298:	dfc00117 	ldw	ra,4(sp)
  80b29c:	df000017 	ldw	fp,0(sp)
  80b2a0:	dec00204 	addi	sp,sp,8
  80b2a4:	f800283a 	ret

0080b2a8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80b2a8:	defff204 	addi	sp,sp,-56
  80b2ac:	dfc00d15 	stw	ra,52(sp)
  80b2b0:	df000c15 	stw	fp,48(sp)
  80b2b4:	df000c04 	addi	fp,sp,48
  80b2b8:	e13ffc15 	stw	r4,-16(fp)
  80b2bc:	e17ffd15 	stw	r5,-12(fp)
  80b2c0:	e1bffe15 	stw	r6,-8(fp)
  80b2c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80b2c8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80b2cc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80b2d0:	e0bfff17 	ldw	r2,-4(fp)
  80b2d4:	1090000c 	andi	r2,r2,16384
  80b2d8:	1005003a 	cmpeq	r2,r2,zero
  80b2dc:	10803fcc 	andi	r2,r2,255
  80b2e0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80b2e4:	00001306 	br	80b334 <altera_avalon_uart_read+0x8c>
    {
      count++;
  80b2e8:	e0bff517 	ldw	r2,-44(fp)
  80b2ec:	10800044 	addi	r2,r2,1
  80b2f0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80b2f4:	e0bffd17 	ldw	r2,-12(fp)
  80b2f8:	10c00044 	addi	r3,r2,1
  80b2fc:	e0fffd15 	stw	r3,-12(fp)
  80b300:	e0fffc17 	ldw	r3,-16(fp)
  80b304:	18c00217 	ldw	r3,8(r3)
  80b308:	e13ffc17 	ldw	r4,-16(fp)
  80b30c:	20c7883a 	add	r3,r4,r3
  80b310:	18c00704 	addi	r3,r3,28
  80b314:	18c00003 	ldbu	r3,0(r3)
  80b318:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80b31c:	e0bffc17 	ldw	r2,-16(fp)
  80b320:	10800217 	ldw	r2,8(r2)
  80b324:	10800044 	addi	r2,r2,1
  80b328:	10c00fcc 	andi	r3,r2,63
  80b32c:	e0bffc17 	ldw	r2,-16(fp)
  80b330:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80b334:	e0fff517 	ldw	r3,-44(fp)
  80b338:	e0bffe17 	ldw	r2,-8(fp)
  80b33c:	1880050e 	bge	r3,r2,80b354 <altera_avalon_uart_read+0xac>
  80b340:	e0bffc17 	ldw	r2,-16(fp)
  80b344:	10c00217 	ldw	r3,8(r2)
  80b348:	e0bffc17 	ldw	r2,-16(fp)
  80b34c:	10800317 	ldw	r2,12(r2)
  80b350:	18bfe51e 	bne	r3,r2,80b2e8 <__alt_mem_onchip_mem+0xff8032e8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80b354:	e0bff517 	ldw	r2,-44(fp)
  80b358:	1000251e 	bne	r2,zero,80b3f0 <altera_avalon_uart_read+0x148>
  80b35c:	e0bffc17 	ldw	r2,-16(fp)
  80b360:	10c00217 	ldw	r3,8(r2)
  80b364:	e0bffc17 	ldw	r2,-16(fp)
  80b368:	10800317 	ldw	r2,12(r2)
  80b36c:	1880201e 	bne	r3,r2,80b3f0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80b370:	e0bff617 	ldw	r2,-40(fp)
  80b374:	1000071e 	bne	r2,zero,80b394 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80b378:	080b26c0 	call	80b26c <alt_get_errno>
  80b37c:	1007883a 	mov	r3,r2
  80b380:	008002c4 	movi	r2,11
  80b384:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80b388:	00800044 	movi	r2,1
  80b38c:	e0bff405 	stb	r2,-48(fp)
        break;
  80b390:	00001b06 	br	80b400 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b394:	0005303a 	rdctl	r2,status
  80b398:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b39c:	e0fff917 	ldw	r3,-28(fp)
  80b3a0:	00bfff84 	movi	r2,-2
  80b3a4:	1884703a 	and	r2,r3,r2
  80b3a8:	1001703a 	wrctl	status,r2
  
  return context;
  80b3ac:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80b3b0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80b3b4:	e0bffc17 	ldw	r2,-16(fp)
  80b3b8:	10800117 	ldw	r2,4(r2)
  80b3bc:	10c02014 	ori	r3,r2,128
  80b3c0:	e0bffc17 	ldw	r2,-16(fp)
  80b3c4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80b3c8:	e0bffc17 	ldw	r2,-16(fp)
  80b3cc:	10800017 	ldw	r2,0(r2)
  80b3d0:	10800304 	addi	r2,r2,12
  80b3d4:	e0fffc17 	ldw	r3,-16(fp)
  80b3d8:	18c00117 	ldw	r3,4(r3)
  80b3dc:	10c00035 	stwio	r3,0(r2)
  80b3e0:	e0bff817 	ldw	r2,-32(fp)
  80b3e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b3e8:	e0bffa17 	ldw	r2,-24(fp)
  80b3ec:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80b3f0:	e0bff517 	ldw	r2,-44(fp)
  80b3f4:	1000021e 	bne	r2,zero,80b400 <altera_avalon_uart_read+0x158>
  80b3f8:	e0bffe17 	ldw	r2,-8(fp)
  80b3fc:	103fcd1e 	bne	r2,zero,80b334 <__alt_mem_onchip_mem+0xff803334>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b400:	0005303a 	rdctl	r2,status
  80b404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b408:	e0fffb17 	ldw	r3,-20(fp)
  80b40c:	00bfff84 	movi	r2,-2
  80b410:	1884703a 	and	r2,r3,r2
  80b414:	1001703a 	wrctl	status,r2
  
  return context;
  80b418:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80b41c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80b420:	e0bffc17 	ldw	r2,-16(fp)
  80b424:	10800117 	ldw	r2,4(r2)
  80b428:	10c02014 	ori	r3,r2,128
  80b42c:	e0bffc17 	ldw	r2,-16(fp)
  80b430:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80b434:	e0bffc17 	ldw	r2,-16(fp)
  80b438:	10800017 	ldw	r2,0(r2)
  80b43c:	10800304 	addi	r2,r2,12
  80b440:	e0fffc17 	ldw	r3,-16(fp)
  80b444:	18c00117 	ldw	r3,4(r3)
  80b448:	10c00035 	stwio	r3,0(r2)
  80b44c:	e0bff817 	ldw	r2,-32(fp)
  80b450:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b454:	e0bff717 	ldw	r2,-36(fp)
  80b458:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80b45c:	e0bff403 	ldbu	r2,-48(fp)
  80b460:	10000226 	beq	r2,zero,80b46c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80b464:	00bffd44 	movi	r2,-11
  80b468:	00000106 	br	80b470 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80b46c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80b470:	e037883a 	mov	sp,fp
  80b474:	dfc00117 	ldw	ra,4(sp)
  80b478:	df000017 	ldw	fp,0(sp)
  80b47c:	dec00204 	addi	sp,sp,8
  80b480:	f800283a 	ret

0080b484 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b484:	defffe04 	addi	sp,sp,-8
  80b488:	dfc00115 	stw	ra,4(sp)
  80b48c:	df000015 	stw	fp,0(sp)
  80b490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b494:	d0a00917 	ldw	r2,-32732(gp)
  80b498:	10000326 	beq	r2,zero,80b4a8 <alt_get_errno+0x24>
  80b49c:	d0a00917 	ldw	r2,-32732(gp)
  80b4a0:	103ee83a 	callr	r2
  80b4a4:	00000106 	br	80b4ac <alt_get_errno+0x28>
  80b4a8:	d0a62a04 	addi	r2,gp,-26456
}
  80b4ac:	e037883a 	mov	sp,fp
  80b4b0:	dfc00117 	ldw	ra,4(sp)
  80b4b4:	df000017 	ldw	fp,0(sp)
  80b4b8:	dec00204 	addi	sp,sp,8
  80b4bc:	f800283a 	ret

0080b4c0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80b4c0:	defff204 	addi	sp,sp,-56
  80b4c4:	dfc00d15 	stw	ra,52(sp)
  80b4c8:	df000c15 	stw	fp,48(sp)
  80b4cc:	df000c04 	addi	fp,sp,48
  80b4d0:	e13ffc15 	stw	r4,-16(fp)
  80b4d4:	e17ffd15 	stw	r5,-12(fp)
  80b4d8:	e1bffe15 	stw	r6,-8(fp)
  80b4dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80b4e0:	e0bffe17 	ldw	r2,-8(fp)
  80b4e4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80b4e8:	e0bfff17 	ldw	r2,-4(fp)
  80b4ec:	1090000c 	andi	r2,r2,16384
  80b4f0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80b4f4:	00003c06 	br	80b5e8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80b4f8:	e0bffc17 	ldw	r2,-16(fp)
  80b4fc:	10800517 	ldw	r2,20(r2)
  80b500:	10800044 	addi	r2,r2,1
  80b504:	10800fcc 	andi	r2,r2,63
  80b508:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80b50c:	e0bffc17 	ldw	r2,-16(fp)
  80b510:	10c00417 	ldw	r3,16(r2)
  80b514:	e0bff717 	ldw	r2,-36(fp)
  80b518:	1880221e 	bne	r3,r2,80b5a4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80b51c:	e0bff517 	ldw	r2,-44(fp)
  80b520:	10000526 	beq	r2,zero,80b538 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80b524:	080b4840 	call	80b484 <alt_get_errno>
  80b528:	1007883a 	mov	r3,r2
  80b52c:	008002c4 	movi	r2,11
  80b530:	18800015 	stw	r2,0(r3)
        break;
  80b534:	00002e06 	br	80b5f0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b538:	0005303a 	rdctl	r2,status
  80b53c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b540:	e0fff917 	ldw	r3,-28(fp)
  80b544:	00bfff84 	movi	r2,-2
  80b548:	1884703a 	and	r2,r3,r2
  80b54c:	1001703a 	wrctl	status,r2
  
  return context;
  80b550:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80b554:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80b558:	e0bffc17 	ldw	r2,-16(fp)
  80b55c:	10800117 	ldw	r2,4(r2)
  80b560:	10c11014 	ori	r3,r2,1088
  80b564:	e0bffc17 	ldw	r2,-16(fp)
  80b568:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80b56c:	e0bffc17 	ldw	r2,-16(fp)
  80b570:	10800017 	ldw	r2,0(r2)
  80b574:	10800304 	addi	r2,r2,12
  80b578:	e0fffc17 	ldw	r3,-16(fp)
  80b57c:	18c00117 	ldw	r3,4(r3)
  80b580:	10c00035 	stwio	r3,0(r2)
  80b584:	e0bff817 	ldw	r2,-32(fp)
  80b588:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b58c:	e0bff617 	ldw	r2,-40(fp)
  80b590:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80b594:	e0bffc17 	ldw	r2,-16(fp)
  80b598:	10c00417 	ldw	r3,16(r2)
  80b59c:	e0bff717 	ldw	r2,-36(fp)
  80b5a0:	18bffc26 	beq	r3,r2,80b594 <__alt_mem_onchip_mem+0xff803594>
      }
    }

    count--;
  80b5a4:	e0bff417 	ldw	r2,-48(fp)
  80b5a8:	10bfffc4 	addi	r2,r2,-1
  80b5ac:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80b5b0:	e0bffc17 	ldw	r2,-16(fp)
  80b5b4:	10c00517 	ldw	r3,20(r2)
  80b5b8:	e0bffd17 	ldw	r2,-12(fp)
  80b5bc:	11000044 	addi	r4,r2,1
  80b5c0:	e13ffd15 	stw	r4,-12(fp)
  80b5c4:	10800003 	ldbu	r2,0(r2)
  80b5c8:	1009883a 	mov	r4,r2
  80b5cc:	e0bffc17 	ldw	r2,-16(fp)
  80b5d0:	10c5883a 	add	r2,r2,r3
  80b5d4:	10801704 	addi	r2,r2,92
  80b5d8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80b5dc:	e0bffc17 	ldw	r2,-16(fp)
  80b5e0:	e0fff717 	ldw	r3,-36(fp)
  80b5e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80b5e8:	e0bff417 	ldw	r2,-48(fp)
  80b5ec:	103fc21e 	bne	r2,zero,80b4f8 <__alt_mem_onchip_mem+0xff8034f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b5f0:	0005303a 	rdctl	r2,status
  80b5f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b5f8:	e0fffb17 	ldw	r3,-20(fp)
  80b5fc:	00bfff84 	movi	r2,-2
  80b600:	1884703a 	and	r2,r3,r2
  80b604:	1001703a 	wrctl	status,r2
  
  return context;
  80b608:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80b60c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80b610:	e0bffc17 	ldw	r2,-16(fp)
  80b614:	10800117 	ldw	r2,4(r2)
  80b618:	10c11014 	ori	r3,r2,1088
  80b61c:	e0bffc17 	ldw	r2,-16(fp)
  80b620:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80b624:	e0bffc17 	ldw	r2,-16(fp)
  80b628:	10800017 	ldw	r2,0(r2)
  80b62c:	10800304 	addi	r2,r2,12
  80b630:	e0fffc17 	ldw	r3,-16(fp)
  80b634:	18c00117 	ldw	r3,4(r3)
  80b638:	10c00035 	stwio	r3,0(r2)
  80b63c:	e0bff817 	ldw	r2,-32(fp)
  80b640:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b644:	e0bffa17 	ldw	r2,-24(fp)
  80b648:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80b64c:	e0fffe17 	ldw	r3,-8(fp)
  80b650:	e0bff417 	ldw	r2,-48(fp)
  80b654:	1885c83a 	sub	r2,r3,r2
}
  80b658:	e037883a 	mov	sp,fp
  80b65c:	dfc00117 	ldw	ra,4(sp)
  80b660:	df000017 	ldw	fp,0(sp)
  80b664:	dec00204 	addi	sp,sp,8
  80b668:	f800283a 	ret

0080b66c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b66c:	defffe04 	addi	sp,sp,-8
  80b670:	dfc00115 	stw	ra,4(sp)
  80b674:	df000015 	stw	fp,0(sp)
  80b678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b67c:	d0a00917 	ldw	r2,-32732(gp)
  80b680:	10000326 	beq	r2,zero,80b690 <alt_get_errno+0x24>
  80b684:	d0a00917 	ldw	r2,-32732(gp)
  80b688:	103ee83a 	callr	r2
  80b68c:	00000106 	br	80b694 <alt_get_errno+0x28>
  80b690:	d0a62a04 	addi	r2,gp,-26456
}
  80b694:	e037883a 	mov	sp,fp
  80b698:	dfc00117 	ldw	ra,4(sp)
  80b69c:	df000017 	ldw	fp,0(sp)
  80b6a0:	dec00204 	addi	sp,sp,8
  80b6a4:	f800283a 	ret

0080b6a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80b6a8:	defffb04 	addi	sp,sp,-20
  80b6ac:	dfc00415 	stw	ra,16(sp)
  80b6b0:	df000315 	stw	fp,12(sp)
  80b6b4:	df000304 	addi	fp,sp,12
  80b6b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80b6bc:	e0bfff17 	ldw	r2,-4(fp)
  80b6c0:	10000616 	blt	r2,zero,80b6dc <close+0x34>
  80b6c4:	e0bfff17 	ldw	r2,-4(fp)
  80b6c8:	10c00324 	muli	r3,r2,12
  80b6cc:	00802074 	movhi	r2,129
  80b6d0:	10b8fc04 	addi	r2,r2,-7184
  80b6d4:	1885883a 	add	r2,r3,r2
  80b6d8:	00000106 	br	80b6e0 <close+0x38>
  80b6dc:	0005883a 	mov	r2,zero
  80b6e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80b6e4:	e0bffd17 	ldw	r2,-12(fp)
  80b6e8:	10001926 	beq	r2,zero,80b750 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80b6ec:	e0bffd17 	ldw	r2,-12(fp)
  80b6f0:	10800017 	ldw	r2,0(r2)
  80b6f4:	10800417 	ldw	r2,16(r2)
  80b6f8:	10000626 	beq	r2,zero,80b714 <close+0x6c>
  80b6fc:	e0bffd17 	ldw	r2,-12(fp)
  80b700:	10800017 	ldw	r2,0(r2)
  80b704:	10800417 	ldw	r2,16(r2)
  80b708:	e13ffd17 	ldw	r4,-12(fp)
  80b70c:	103ee83a 	callr	r2
  80b710:	00000106 	br	80b718 <close+0x70>
  80b714:	0005883a 	mov	r2,zero
  80b718:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80b71c:	e13fff17 	ldw	r4,-4(fp)
  80b720:	080bff40 	call	80bff4 <alt_release_fd>
    if (rval < 0)
  80b724:	e0bffe17 	ldw	r2,-8(fp)
  80b728:	1000070e 	bge	r2,zero,80b748 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80b72c:	080b66c0 	call	80b66c <alt_get_errno>
  80b730:	1007883a 	mov	r3,r2
  80b734:	e0bffe17 	ldw	r2,-8(fp)
  80b738:	0085c83a 	sub	r2,zero,r2
  80b73c:	18800015 	stw	r2,0(r3)
      return -1;
  80b740:	00bfffc4 	movi	r2,-1
  80b744:	00000706 	br	80b764 <close+0xbc>
    }
    return 0;
  80b748:	0005883a 	mov	r2,zero
  80b74c:	00000506 	br	80b764 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b750:	080b66c0 	call	80b66c <alt_get_errno>
  80b754:	1007883a 	mov	r3,r2
  80b758:	00801444 	movi	r2,81
  80b75c:	18800015 	stw	r2,0(r3)
    return -1;
  80b760:	00bfffc4 	movi	r2,-1
  }
}
  80b764:	e037883a 	mov	sp,fp
  80b768:	dfc00117 	ldw	ra,4(sp)
  80b76c:	df000017 	ldw	fp,0(sp)
  80b770:	dec00204 	addi	sp,sp,8
  80b774:	f800283a 	ret

0080b778 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80b778:	defffe04 	addi	sp,sp,-8
  80b77c:	df000115 	stw	fp,4(sp)
  80b780:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80b784:	e03fff15 	stw	zero,-4(fp)
  80b788:	00000506 	br	80b7a0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80b78c:	e0bfff17 	ldw	r2,-4(fp)
  80b790:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80b794:	e0bfff17 	ldw	r2,-4(fp)
  80b798:	10800804 	addi	r2,r2,32
  80b79c:	e0bfff15 	stw	r2,-4(fp)
  80b7a0:	e0bfff17 	ldw	r2,-4(fp)
  80b7a4:	10820030 	cmpltui	r2,r2,2048
  80b7a8:	103ff81e 	bne	r2,zero,80b78c <__alt_mem_onchip_mem+0xff80378c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80b7ac:	0001883a 	nop
  80b7b0:	e037883a 	mov	sp,fp
  80b7b4:	df000017 	ldw	fp,0(sp)
  80b7b8:	dec00104 	addi	sp,sp,4
  80b7bc:	f800283a 	ret

0080b7c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80b7c0:	defffc04 	addi	sp,sp,-16
  80b7c4:	df000315 	stw	fp,12(sp)
  80b7c8:	df000304 	addi	fp,sp,12
  80b7cc:	e13ffd15 	stw	r4,-12(fp)
  80b7d0:	e17ffe15 	stw	r5,-8(fp)
  80b7d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80b7d8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b7dc:	e037883a 	mov	sp,fp
  80b7e0:	df000017 	ldw	fp,0(sp)
  80b7e4:	dec00104 	addi	sp,sp,4
  80b7e8:	f800283a 	ret

0080b7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b7ec:	defffe04 	addi	sp,sp,-8
  80b7f0:	dfc00115 	stw	ra,4(sp)
  80b7f4:	df000015 	stw	fp,0(sp)
  80b7f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80b7fc:	d0a00917 	ldw	r2,-32732(gp)
  80b800:	10000326 	beq	r2,zero,80b810 <alt_get_errno+0x24>
  80b804:	d0a00917 	ldw	r2,-32732(gp)
  80b808:	103ee83a 	callr	r2
  80b80c:	00000106 	br	80b814 <alt_get_errno+0x28>
  80b810:	d0a62a04 	addi	r2,gp,-26456
}
  80b814:	e037883a 	mov	sp,fp
  80b818:	dfc00117 	ldw	ra,4(sp)
  80b81c:	df000017 	ldw	fp,0(sp)
  80b820:	dec00204 	addi	sp,sp,8
  80b824:	f800283a 	ret

0080b828 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80b828:	defffa04 	addi	sp,sp,-24
  80b82c:	dfc00515 	stw	ra,20(sp)
  80b830:	df000415 	stw	fp,16(sp)
  80b834:	df000404 	addi	fp,sp,16
  80b838:	e13ffe15 	stw	r4,-8(fp)
  80b83c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80b840:	e0bffe17 	ldw	r2,-8(fp)
  80b844:	10000326 	beq	r2,zero,80b854 <alt_dev_llist_insert+0x2c>
  80b848:	e0bffe17 	ldw	r2,-8(fp)
  80b84c:	10800217 	ldw	r2,8(r2)
  80b850:	1000061e 	bne	r2,zero,80b86c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80b854:	080b7ec0 	call	80b7ec <alt_get_errno>
  80b858:	1007883a 	mov	r3,r2
  80b85c:	00800584 	movi	r2,22
  80b860:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80b864:	00bffa84 	movi	r2,-22
  80b868:	00001306 	br	80b8b8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80b86c:	e0bffe17 	ldw	r2,-8(fp)
  80b870:	e0ffff17 	ldw	r3,-4(fp)
  80b874:	e0fffc15 	stw	r3,-16(fp)
  80b878:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80b87c:	e0bffd17 	ldw	r2,-12(fp)
  80b880:	e0fffc17 	ldw	r3,-16(fp)
  80b884:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80b888:	e0bffc17 	ldw	r2,-16(fp)
  80b88c:	10c00017 	ldw	r3,0(r2)
  80b890:	e0bffd17 	ldw	r2,-12(fp)
  80b894:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80b898:	e0bffc17 	ldw	r2,-16(fp)
  80b89c:	10800017 	ldw	r2,0(r2)
  80b8a0:	e0fffd17 	ldw	r3,-12(fp)
  80b8a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80b8a8:	e0bffc17 	ldw	r2,-16(fp)
  80b8ac:	e0fffd17 	ldw	r3,-12(fp)
  80b8b0:	10c00015 	stw	r3,0(r2)

  return 0;  
  80b8b4:	0005883a 	mov	r2,zero
}
  80b8b8:	e037883a 	mov	sp,fp
  80b8bc:	dfc00117 	ldw	ra,4(sp)
  80b8c0:	df000017 	ldw	fp,0(sp)
  80b8c4:	dec00204 	addi	sp,sp,8
  80b8c8:	f800283a 	ret

0080b8cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80b8cc:	defffd04 	addi	sp,sp,-12
  80b8d0:	dfc00215 	stw	ra,8(sp)
  80b8d4:	df000115 	stw	fp,4(sp)
  80b8d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80b8dc:	00802074 	movhi	r2,129
  80b8e0:	10b36e04 	addi	r2,r2,-12872
  80b8e4:	e0bfff15 	stw	r2,-4(fp)
  80b8e8:	00000606 	br	80b904 <_do_ctors+0x38>
        (*ctor) (); 
  80b8ec:	e0bfff17 	ldw	r2,-4(fp)
  80b8f0:	10800017 	ldw	r2,0(r2)
  80b8f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80b8f8:	e0bfff17 	ldw	r2,-4(fp)
  80b8fc:	10bfff04 	addi	r2,r2,-4
  80b900:	e0bfff15 	stw	r2,-4(fp)
  80b904:	e0ffff17 	ldw	r3,-4(fp)
  80b908:	00802074 	movhi	r2,129
  80b90c:	10b36f04 	addi	r2,r2,-12868
  80b910:	18bff62e 	bgeu	r3,r2,80b8ec <__alt_mem_onchip_mem+0xff8038ec>
        (*ctor) (); 
}
  80b914:	0001883a 	nop
  80b918:	e037883a 	mov	sp,fp
  80b91c:	dfc00117 	ldw	ra,4(sp)
  80b920:	df000017 	ldw	fp,0(sp)
  80b924:	dec00204 	addi	sp,sp,8
  80b928:	f800283a 	ret

0080b92c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80b92c:	defffd04 	addi	sp,sp,-12
  80b930:	dfc00215 	stw	ra,8(sp)
  80b934:	df000115 	stw	fp,4(sp)
  80b938:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80b93c:	00802074 	movhi	r2,129
  80b940:	10b36e04 	addi	r2,r2,-12872
  80b944:	e0bfff15 	stw	r2,-4(fp)
  80b948:	00000606 	br	80b964 <_do_dtors+0x38>
        (*dtor) (); 
  80b94c:	e0bfff17 	ldw	r2,-4(fp)
  80b950:	10800017 	ldw	r2,0(r2)
  80b954:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80b958:	e0bfff17 	ldw	r2,-4(fp)
  80b95c:	10bfff04 	addi	r2,r2,-4
  80b960:	e0bfff15 	stw	r2,-4(fp)
  80b964:	e0ffff17 	ldw	r3,-4(fp)
  80b968:	00802074 	movhi	r2,129
  80b96c:	10b36f04 	addi	r2,r2,-12868
  80b970:	18bff62e 	bgeu	r3,r2,80b94c <__alt_mem_onchip_mem+0xff80394c>
        (*dtor) (); 
}
  80b974:	0001883a 	nop
  80b978:	e037883a 	mov	sp,fp
  80b97c:	dfc00117 	ldw	ra,4(sp)
  80b980:	df000017 	ldw	fp,0(sp)
  80b984:	dec00204 	addi	sp,sp,8
  80b988:	f800283a 	ret

0080b98c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80b98c:	defffe04 	addi	sp,sp,-8
  80b990:	dfc00115 	stw	ra,4(sp)
  80b994:	df000015 	stw	fp,0(sp)
  80b998:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80b99c:	01440004 	movi	r5,4096
  80b9a0:	0009883a 	mov	r4,zero
  80b9a4:	080c4400 	call	80c440 <alt_icache_flush>
#endif
}
  80b9a8:	0001883a 	nop
  80b9ac:	e037883a 	mov	sp,fp
  80b9b0:	dfc00117 	ldw	ra,4(sp)
  80b9b4:	df000017 	ldw	fp,0(sp)
  80b9b8:	dec00204 	addi	sp,sp,8
  80b9bc:	f800283a 	ret

0080b9c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80b9c0:	defff904 	addi	sp,sp,-28
  80b9c4:	dfc00615 	stw	ra,24(sp)
  80b9c8:	df000515 	stw	fp,20(sp)
  80b9cc:	df000504 	addi	fp,sp,20
  80b9d0:	e13ffc15 	stw	r4,-16(fp)
  80b9d4:	e17ffd15 	stw	r5,-12(fp)
  80b9d8:	e1bffe15 	stw	r6,-8(fp)
  80b9dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80b9e0:	e0800217 	ldw	r2,8(fp)
  80b9e4:	d8800015 	stw	r2,0(sp)
  80b9e8:	e1ffff17 	ldw	r7,-4(fp)
  80b9ec:	e1bffe17 	ldw	r6,-8(fp)
  80b9f0:	e17ffd17 	ldw	r5,-12(fp)
  80b9f4:	e13ffc17 	ldw	r4,-16(fp)
  80b9f8:	080bb700 	call	80bb70 <alt_iic_isr_register>
}  
  80b9fc:	e037883a 	mov	sp,fp
  80ba00:	dfc00117 	ldw	ra,4(sp)
  80ba04:	df000017 	ldw	fp,0(sp)
  80ba08:	dec00204 	addi	sp,sp,8
  80ba0c:	f800283a 	ret

0080ba10 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80ba10:	defff904 	addi	sp,sp,-28
  80ba14:	df000615 	stw	fp,24(sp)
  80ba18:	df000604 	addi	fp,sp,24
  80ba1c:	e13ffe15 	stw	r4,-8(fp)
  80ba20:	e17fff15 	stw	r5,-4(fp)
  80ba24:	e0bfff17 	ldw	r2,-4(fp)
  80ba28:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ba2c:	0005303a 	rdctl	r2,status
  80ba30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ba34:	e0fffb17 	ldw	r3,-20(fp)
  80ba38:	00bfff84 	movi	r2,-2
  80ba3c:	1884703a 	and	r2,r3,r2
  80ba40:	1001703a 	wrctl	status,r2
  
  return context;
  80ba44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ba48:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80ba4c:	00c00044 	movi	r3,1
  80ba50:	e0bffa17 	ldw	r2,-24(fp)
  80ba54:	1884983a 	sll	r2,r3,r2
  80ba58:	1007883a 	mov	r3,r2
  80ba5c:	d0a62817 	ldw	r2,-26464(gp)
  80ba60:	1884b03a 	or	r2,r3,r2
  80ba64:	d0a62815 	stw	r2,-26464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ba68:	d0a62817 	ldw	r2,-26464(gp)
  80ba6c:	100170fa 	wrctl	ienable,r2
  80ba70:	e0bffc17 	ldw	r2,-16(fp)
  80ba74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ba78:	e0bffd17 	ldw	r2,-12(fp)
  80ba7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ba80:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80ba84:	0001883a 	nop
}
  80ba88:	e037883a 	mov	sp,fp
  80ba8c:	df000017 	ldw	fp,0(sp)
  80ba90:	dec00104 	addi	sp,sp,4
  80ba94:	f800283a 	ret

0080ba98 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80ba98:	defff904 	addi	sp,sp,-28
  80ba9c:	df000615 	stw	fp,24(sp)
  80baa0:	df000604 	addi	fp,sp,24
  80baa4:	e13ffe15 	stw	r4,-8(fp)
  80baa8:	e17fff15 	stw	r5,-4(fp)
  80baac:	e0bfff17 	ldw	r2,-4(fp)
  80bab0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bab4:	0005303a 	rdctl	r2,status
  80bab8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80babc:	e0fffb17 	ldw	r3,-20(fp)
  80bac0:	00bfff84 	movi	r2,-2
  80bac4:	1884703a 	and	r2,r3,r2
  80bac8:	1001703a 	wrctl	status,r2
  
  return context;
  80bacc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80bad0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80bad4:	00c00044 	movi	r3,1
  80bad8:	e0bffa17 	ldw	r2,-24(fp)
  80badc:	1884983a 	sll	r2,r3,r2
  80bae0:	0084303a 	nor	r2,zero,r2
  80bae4:	1007883a 	mov	r3,r2
  80bae8:	d0a62817 	ldw	r2,-26464(gp)
  80baec:	1884703a 	and	r2,r3,r2
  80baf0:	d0a62815 	stw	r2,-26464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80baf4:	d0a62817 	ldw	r2,-26464(gp)
  80baf8:	100170fa 	wrctl	ienable,r2
  80bafc:	e0bffc17 	ldw	r2,-16(fp)
  80bb00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb04:	e0bffd17 	ldw	r2,-12(fp)
  80bb08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80bb0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80bb10:	0001883a 	nop
}
  80bb14:	e037883a 	mov	sp,fp
  80bb18:	df000017 	ldw	fp,0(sp)
  80bb1c:	dec00104 	addi	sp,sp,4
  80bb20:	f800283a 	ret

0080bb24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80bb24:	defffc04 	addi	sp,sp,-16
  80bb28:	df000315 	stw	fp,12(sp)
  80bb2c:	df000304 	addi	fp,sp,12
  80bb30:	e13ffe15 	stw	r4,-8(fp)
  80bb34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80bb38:	000530fa 	rdctl	r2,ienable
  80bb3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80bb40:	00c00044 	movi	r3,1
  80bb44:	e0bfff17 	ldw	r2,-4(fp)
  80bb48:	1884983a 	sll	r2,r3,r2
  80bb4c:	1007883a 	mov	r3,r2
  80bb50:	e0bffd17 	ldw	r2,-12(fp)
  80bb54:	1884703a 	and	r2,r3,r2
  80bb58:	1004c03a 	cmpne	r2,r2,zero
  80bb5c:	10803fcc 	andi	r2,r2,255
}
  80bb60:	e037883a 	mov	sp,fp
  80bb64:	df000017 	ldw	fp,0(sp)
  80bb68:	dec00104 	addi	sp,sp,4
  80bb6c:	f800283a 	ret

0080bb70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80bb70:	defff504 	addi	sp,sp,-44
  80bb74:	dfc00a15 	stw	ra,40(sp)
  80bb78:	df000915 	stw	fp,36(sp)
  80bb7c:	df000904 	addi	fp,sp,36
  80bb80:	e13ffc15 	stw	r4,-16(fp)
  80bb84:	e17ffd15 	stw	r5,-12(fp)
  80bb88:	e1bffe15 	stw	r6,-8(fp)
  80bb8c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80bb90:	00bffa84 	movi	r2,-22
  80bb94:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80bb98:	e0bffd17 	ldw	r2,-12(fp)
  80bb9c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80bba0:	e0bff817 	ldw	r2,-32(fp)
  80bba4:	10800808 	cmpgei	r2,r2,32
  80bba8:	1000271e 	bne	r2,zero,80bc48 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bbac:	0005303a 	rdctl	r2,status
  80bbb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bbb4:	e0fffb17 	ldw	r3,-20(fp)
  80bbb8:	00bfff84 	movi	r2,-2
  80bbbc:	1884703a 	and	r2,r3,r2
  80bbc0:	1001703a 	wrctl	status,r2
  
  return context;
  80bbc4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80bbc8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80bbcc:	00802074 	movhi	r2,129
  80bbd0:	10811b04 	addi	r2,r2,1132
  80bbd4:	e0fff817 	ldw	r3,-32(fp)
  80bbd8:	180690fa 	slli	r3,r3,3
  80bbdc:	10c5883a 	add	r2,r2,r3
  80bbe0:	e0fffe17 	ldw	r3,-8(fp)
  80bbe4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80bbe8:	00802074 	movhi	r2,129
  80bbec:	10811b04 	addi	r2,r2,1132
  80bbf0:	e0fff817 	ldw	r3,-32(fp)
  80bbf4:	180690fa 	slli	r3,r3,3
  80bbf8:	10c5883a 	add	r2,r2,r3
  80bbfc:	10800104 	addi	r2,r2,4
  80bc00:	e0ffff17 	ldw	r3,-4(fp)
  80bc04:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80bc08:	e0bffe17 	ldw	r2,-8(fp)
  80bc0c:	10000526 	beq	r2,zero,80bc24 <alt_iic_isr_register+0xb4>
  80bc10:	e0bff817 	ldw	r2,-32(fp)
  80bc14:	100b883a 	mov	r5,r2
  80bc18:	e13ffc17 	ldw	r4,-16(fp)
  80bc1c:	080ba100 	call	80ba10 <alt_ic_irq_enable>
  80bc20:	00000406 	br	80bc34 <alt_iic_isr_register+0xc4>
  80bc24:	e0bff817 	ldw	r2,-32(fp)
  80bc28:	100b883a 	mov	r5,r2
  80bc2c:	e13ffc17 	ldw	r4,-16(fp)
  80bc30:	080ba980 	call	80ba98 <alt_ic_irq_disable>
  80bc34:	e0bff715 	stw	r2,-36(fp)
  80bc38:	e0bffa17 	ldw	r2,-24(fp)
  80bc3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc40:	e0bff917 	ldw	r2,-28(fp)
  80bc44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80bc48:	e0bff717 	ldw	r2,-36(fp)
}
  80bc4c:	e037883a 	mov	sp,fp
  80bc50:	dfc00117 	ldw	ra,4(sp)
  80bc54:	df000017 	ldw	fp,0(sp)
  80bc58:	dec00204 	addi	sp,sp,8
  80bc5c:	f800283a 	ret

0080bc60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80bc60:	defff904 	addi	sp,sp,-28
  80bc64:	dfc00615 	stw	ra,24(sp)
  80bc68:	df000515 	stw	fp,20(sp)
  80bc6c:	df000504 	addi	fp,sp,20
  80bc70:	e13ffc15 	stw	r4,-16(fp)
  80bc74:	e17ffd15 	stw	r5,-12(fp)
  80bc78:	e1bffe15 	stw	r6,-8(fp)
  80bc7c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80bc80:	e1bfff17 	ldw	r6,-4(fp)
  80bc84:	e17ffe17 	ldw	r5,-8(fp)
  80bc88:	e13ffd17 	ldw	r4,-12(fp)
  80bc8c:	080bea00 	call	80bea0 <open>
  80bc90:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80bc94:	e0bffb17 	ldw	r2,-20(fp)
  80bc98:	10001c16 	blt	r2,zero,80bd0c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80bc9c:	00802074 	movhi	r2,129
  80bca0:	10b8fc04 	addi	r2,r2,-7184
  80bca4:	e0fffb17 	ldw	r3,-20(fp)
  80bca8:	18c00324 	muli	r3,r3,12
  80bcac:	10c5883a 	add	r2,r2,r3
  80bcb0:	10c00017 	ldw	r3,0(r2)
  80bcb4:	e0bffc17 	ldw	r2,-16(fp)
  80bcb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80bcbc:	00802074 	movhi	r2,129
  80bcc0:	10b8fc04 	addi	r2,r2,-7184
  80bcc4:	e0fffb17 	ldw	r3,-20(fp)
  80bcc8:	18c00324 	muli	r3,r3,12
  80bccc:	10c5883a 	add	r2,r2,r3
  80bcd0:	10800104 	addi	r2,r2,4
  80bcd4:	10c00017 	ldw	r3,0(r2)
  80bcd8:	e0bffc17 	ldw	r2,-16(fp)
  80bcdc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80bce0:	00802074 	movhi	r2,129
  80bce4:	10b8fc04 	addi	r2,r2,-7184
  80bce8:	e0fffb17 	ldw	r3,-20(fp)
  80bcec:	18c00324 	muli	r3,r3,12
  80bcf0:	10c5883a 	add	r2,r2,r3
  80bcf4:	10800204 	addi	r2,r2,8
  80bcf8:	10c00017 	ldw	r3,0(r2)
  80bcfc:	e0bffc17 	ldw	r2,-16(fp)
  80bd00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80bd04:	e13ffb17 	ldw	r4,-20(fp)
  80bd08:	080bff40 	call	80bff4 <alt_release_fd>
  }
} 
  80bd0c:	0001883a 	nop
  80bd10:	e037883a 	mov	sp,fp
  80bd14:	dfc00117 	ldw	ra,4(sp)
  80bd18:	df000017 	ldw	fp,0(sp)
  80bd1c:	dec00204 	addi	sp,sp,8
  80bd20:	f800283a 	ret

0080bd24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80bd24:	defffb04 	addi	sp,sp,-20
  80bd28:	dfc00415 	stw	ra,16(sp)
  80bd2c:	df000315 	stw	fp,12(sp)
  80bd30:	df000304 	addi	fp,sp,12
  80bd34:	e13ffd15 	stw	r4,-12(fp)
  80bd38:	e17ffe15 	stw	r5,-8(fp)
  80bd3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80bd40:	01c07fc4 	movi	r7,511
  80bd44:	01800044 	movi	r6,1
  80bd48:	e17ffd17 	ldw	r5,-12(fp)
  80bd4c:	01002074 	movhi	r4,129
  80bd50:	2138ff04 	addi	r4,r4,-7172
  80bd54:	080bc600 	call	80bc60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80bd58:	01c07fc4 	movi	r7,511
  80bd5c:	000d883a 	mov	r6,zero
  80bd60:	e17ffe17 	ldw	r5,-8(fp)
  80bd64:	01002074 	movhi	r4,129
  80bd68:	2138fc04 	addi	r4,r4,-7184
  80bd6c:	080bc600 	call	80bc60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80bd70:	01c07fc4 	movi	r7,511
  80bd74:	01800044 	movi	r6,1
  80bd78:	e17fff17 	ldw	r5,-4(fp)
  80bd7c:	01002074 	movhi	r4,129
  80bd80:	21390204 	addi	r4,r4,-7160
  80bd84:	080bc600 	call	80bc60 <alt_open_fd>
}  
  80bd88:	0001883a 	nop
  80bd8c:	e037883a 	mov	sp,fp
  80bd90:	dfc00117 	ldw	ra,4(sp)
  80bd94:	df000017 	ldw	fp,0(sp)
  80bd98:	dec00204 	addi	sp,sp,8
  80bd9c:	f800283a 	ret

0080bda0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bda0:	defffe04 	addi	sp,sp,-8
  80bda4:	dfc00115 	stw	ra,4(sp)
  80bda8:	df000015 	stw	fp,0(sp)
  80bdac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80bdb0:	d0a00917 	ldw	r2,-32732(gp)
  80bdb4:	10000326 	beq	r2,zero,80bdc4 <alt_get_errno+0x24>
  80bdb8:	d0a00917 	ldw	r2,-32732(gp)
  80bdbc:	103ee83a 	callr	r2
  80bdc0:	00000106 	br	80bdc8 <alt_get_errno+0x28>
  80bdc4:	d0a62a04 	addi	r2,gp,-26456
}
  80bdc8:	e037883a 	mov	sp,fp
  80bdcc:	dfc00117 	ldw	ra,4(sp)
  80bdd0:	df000017 	ldw	fp,0(sp)
  80bdd4:	dec00204 	addi	sp,sp,8
  80bdd8:	f800283a 	ret

0080bddc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80bddc:	defffd04 	addi	sp,sp,-12
  80bde0:	df000215 	stw	fp,8(sp)
  80bde4:	df000204 	addi	fp,sp,8
  80bde8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80bdec:	e0bfff17 	ldw	r2,-4(fp)
  80bdf0:	10800217 	ldw	r2,8(r2)
  80bdf4:	10d00034 	orhi	r3,r2,16384
  80bdf8:	e0bfff17 	ldw	r2,-4(fp)
  80bdfc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80be00:	e03ffe15 	stw	zero,-8(fp)
  80be04:	00001d06 	br	80be7c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80be08:	00802074 	movhi	r2,129
  80be0c:	10b8fc04 	addi	r2,r2,-7184
  80be10:	e0fffe17 	ldw	r3,-8(fp)
  80be14:	18c00324 	muli	r3,r3,12
  80be18:	10c5883a 	add	r2,r2,r3
  80be1c:	10c00017 	ldw	r3,0(r2)
  80be20:	e0bfff17 	ldw	r2,-4(fp)
  80be24:	10800017 	ldw	r2,0(r2)
  80be28:	1880111e 	bne	r3,r2,80be70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80be2c:	00802074 	movhi	r2,129
  80be30:	10b8fc04 	addi	r2,r2,-7184
  80be34:	e0fffe17 	ldw	r3,-8(fp)
  80be38:	18c00324 	muli	r3,r3,12
  80be3c:	10c5883a 	add	r2,r2,r3
  80be40:	10800204 	addi	r2,r2,8
  80be44:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80be48:	1000090e 	bge	r2,zero,80be70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80be4c:	e0bffe17 	ldw	r2,-8(fp)
  80be50:	10c00324 	muli	r3,r2,12
  80be54:	00802074 	movhi	r2,129
  80be58:	10b8fc04 	addi	r2,r2,-7184
  80be5c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80be60:	e0bfff17 	ldw	r2,-4(fp)
  80be64:	18800226 	beq	r3,r2,80be70 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80be68:	00bffcc4 	movi	r2,-13
  80be6c:	00000806 	br	80be90 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80be70:	e0bffe17 	ldw	r2,-8(fp)
  80be74:	10800044 	addi	r2,r2,1
  80be78:	e0bffe15 	stw	r2,-8(fp)
  80be7c:	d0a00817 	ldw	r2,-32736(gp)
  80be80:	1007883a 	mov	r3,r2
  80be84:	e0bffe17 	ldw	r2,-8(fp)
  80be88:	18bfdf2e 	bgeu	r3,r2,80be08 <__alt_mem_onchip_mem+0xff803e08>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80be8c:	0005883a 	mov	r2,zero
}
  80be90:	e037883a 	mov	sp,fp
  80be94:	df000017 	ldw	fp,0(sp)
  80be98:	dec00104 	addi	sp,sp,4
  80be9c:	f800283a 	ret

0080bea0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80bea0:	defff604 	addi	sp,sp,-40
  80bea4:	dfc00915 	stw	ra,36(sp)
  80bea8:	df000815 	stw	fp,32(sp)
  80beac:	df000804 	addi	fp,sp,32
  80beb0:	e13ffd15 	stw	r4,-12(fp)
  80beb4:	e17ffe15 	stw	r5,-8(fp)
  80beb8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80bebc:	00bfffc4 	movi	r2,-1
  80bec0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80bec4:	00bffb44 	movi	r2,-19
  80bec8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80becc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80bed0:	d1600604 	addi	r5,gp,-32744
  80bed4:	e13ffd17 	ldw	r4,-12(fp)
  80bed8:	080c2040 	call	80c204 <alt_find_dev>
  80bedc:	e0bff815 	stw	r2,-32(fp)
  80bee0:	e0bff817 	ldw	r2,-32(fp)
  80bee4:	1000051e 	bne	r2,zero,80befc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80bee8:	e13ffd17 	ldw	r4,-12(fp)
  80beec:	080c2940 	call	80c294 <alt_find_file>
  80bef0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80bef4:	00800044 	movi	r2,1
  80bef8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80befc:	e0bff817 	ldw	r2,-32(fp)
  80bf00:	10002926 	beq	r2,zero,80bfa8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80bf04:	e13ff817 	ldw	r4,-32(fp)
  80bf08:	080c39c0 	call	80c39c <alt_get_fd>
  80bf0c:	e0bff915 	stw	r2,-28(fp)
  80bf10:	e0bff917 	ldw	r2,-28(fp)
  80bf14:	1000030e 	bge	r2,zero,80bf24 <open+0x84>
    {
      status = index;
  80bf18:	e0bff917 	ldw	r2,-28(fp)
  80bf1c:	e0bffa15 	stw	r2,-24(fp)
  80bf20:	00002306 	br	80bfb0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80bf24:	e0bff917 	ldw	r2,-28(fp)
  80bf28:	10c00324 	muli	r3,r2,12
  80bf2c:	00802074 	movhi	r2,129
  80bf30:	10b8fc04 	addi	r2,r2,-7184
  80bf34:	1885883a 	add	r2,r3,r2
  80bf38:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80bf3c:	e0fffe17 	ldw	r3,-8(fp)
  80bf40:	00900034 	movhi	r2,16384
  80bf44:	10bfffc4 	addi	r2,r2,-1
  80bf48:	1886703a 	and	r3,r3,r2
  80bf4c:	e0bffc17 	ldw	r2,-16(fp)
  80bf50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80bf54:	e0bffb17 	ldw	r2,-20(fp)
  80bf58:	1000051e 	bne	r2,zero,80bf70 <open+0xd0>
  80bf5c:	e13ffc17 	ldw	r4,-16(fp)
  80bf60:	080bddc0 	call	80bddc <alt_file_locked>
  80bf64:	e0bffa15 	stw	r2,-24(fp)
  80bf68:	e0bffa17 	ldw	r2,-24(fp)
  80bf6c:	10001016 	blt	r2,zero,80bfb0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80bf70:	e0bff817 	ldw	r2,-32(fp)
  80bf74:	10800317 	ldw	r2,12(r2)
  80bf78:	10000826 	beq	r2,zero,80bf9c <open+0xfc>
  80bf7c:	e0bff817 	ldw	r2,-32(fp)
  80bf80:	10800317 	ldw	r2,12(r2)
  80bf84:	e1ffff17 	ldw	r7,-4(fp)
  80bf88:	e1bffe17 	ldw	r6,-8(fp)
  80bf8c:	e17ffd17 	ldw	r5,-12(fp)
  80bf90:	e13ffc17 	ldw	r4,-16(fp)
  80bf94:	103ee83a 	callr	r2
  80bf98:	00000106 	br	80bfa0 <open+0x100>
  80bf9c:	0005883a 	mov	r2,zero
  80bfa0:	e0bffa15 	stw	r2,-24(fp)
  80bfa4:	00000206 	br	80bfb0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80bfa8:	00bffb44 	movi	r2,-19
  80bfac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80bfb0:	e0bffa17 	ldw	r2,-24(fp)
  80bfb4:	1000090e 	bge	r2,zero,80bfdc <open+0x13c>
  {
    alt_release_fd (index);  
  80bfb8:	e13ff917 	ldw	r4,-28(fp)
  80bfbc:	080bff40 	call	80bff4 <alt_release_fd>
    ALT_ERRNO = -status;
  80bfc0:	080bda00 	call	80bda0 <alt_get_errno>
  80bfc4:	1007883a 	mov	r3,r2
  80bfc8:	e0bffa17 	ldw	r2,-24(fp)
  80bfcc:	0085c83a 	sub	r2,zero,r2
  80bfd0:	18800015 	stw	r2,0(r3)
    return -1;
  80bfd4:	00bfffc4 	movi	r2,-1
  80bfd8:	00000106 	br	80bfe0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80bfdc:	e0bff917 	ldw	r2,-28(fp)
}
  80bfe0:	e037883a 	mov	sp,fp
  80bfe4:	dfc00117 	ldw	ra,4(sp)
  80bfe8:	df000017 	ldw	fp,0(sp)
  80bfec:	dec00204 	addi	sp,sp,8
  80bff0:	f800283a 	ret

0080bff4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80bff4:	defffe04 	addi	sp,sp,-8
  80bff8:	df000115 	stw	fp,4(sp)
  80bffc:	df000104 	addi	fp,sp,4
  80c000:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80c004:	e0bfff17 	ldw	r2,-4(fp)
  80c008:	108000d0 	cmplti	r2,r2,3
  80c00c:	10000d1e 	bne	r2,zero,80c044 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c010:	00802074 	movhi	r2,129
  80c014:	10b8fc04 	addi	r2,r2,-7184
  80c018:	e0ffff17 	ldw	r3,-4(fp)
  80c01c:	18c00324 	muli	r3,r3,12
  80c020:	10c5883a 	add	r2,r2,r3
  80c024:	10800204 	addi	r2,r2,8
  80c028:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80c02c:	00802074 	movhi	r2,129
  80c030:	10b8fc04 	addi	r2,r2,-7184
  80c034:	e0ffff17 	ldw	r3,-4(fp)
  80c038:	18c00324 	muli	r3,r3,12
  80c03c:	10c5883a 	add	r2,r2,r3
  80c040:	10000015 	stw	zero,0(r2)
  }
}
  80c044:	0001883a 	nop
  80c048:	e037883a 	mov	sp,fp
  80c04c:	df000017 	ldw	fp,0(sp)
  80c050:	dec00104 	addi	sp,sp,4
  80c054:	f800283a 	ret

0080c058 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80c058:	defffd04 	addi	sp,sp,-12
  80c05c:	dfc00215 	stw	ra,8(sp)
  80c060:	df000115 	stw	fp,4(sp)
  80c064:	df000104 	addi	fp,sp,4
  80c068:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80c06c:	e13fff17 	ldw	r4,-4(fp)
  80c070:	080c0ac0 	call	80c0ac <alt_busy_sleep>
}
  80c074:	e037883a 	mov	sp,fp
  80c078:	dfc00117 	ldw	ra,4(sp)
  80c07c:	df000017 	ldw	fp,0(sp)
  80c080:	dec00204 	addi	sp,sp,8
  80c084:	f800283a 	ret

0080c088 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80c088:	deffff04 	addi	sp,sp,-4
  80c08c:	df000015 	stw	fp,0(sp)
  80c090:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80c094:	000170fa 	wrctl	ienable,zero
}
  80c098:	0001883a 	nop
  80c09c:	e037883a 	mov	sp,fp
  80c0a0:	df000017 	ldw	fp,0(sp)
  80c0a4:	dec00104 	addi	sp,sp,4
  80c0a8:	f800283a 	ret

0080c0ac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80c0ac:	defffa04 	addi	sp,sp,-24
  80c0b0:	dfc00515 	stw	ra,20(sp)
  80c0b4:	df000415 	stw	fp,16(sp)
  80c0b8:	df000404 	addi	fp,sp,16
  80c0bc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80c0c0:	008000c4 	movi	r2,3
  80c0c4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80c0c8:	e0fffd17 	ldw	r3,-12(fp)
  80c0cc:	008003f4 	movhi	r2,15
  80c0d0:	10909004 	addi	r2,r2,16960
  80c0d4:	1885383a 	mul	r2,r3,r2
  80c0d8:	100b883a 	mov	r5,r2
  80c0dc:	0100bef4 	movhi	r4,763
  80c0e0:	213c2004 	addi	r4,r4,-3968
  80c0e4:	080cccc0 	call	80cccc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80c0e8:	100b883a 	mov	r5,r2
  80c0ec:	01200034 	movhi	r4,32768
  80c0f0:	213fffc4 	addi	r4,r4,-1
  80c0f4:	080cccc0 	call	80cccc <__udivsi3>
  80c0f8:	100b883a 	mov	r5,r2
  80c0fc:	e13fff17 	ldw	r4,-4(fp)
  80c100:	080cccc0 	call	80cccc <__udivsi3>
  80c104:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80c108:	e0bffe17 	ldw	r2,-8(fp)
  80c10c:	10002a26 	beq	r2,zero,80c1b8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80c110:	e03ffc15 	stw	zero,-16(fp)
  80c114:	00001706 	br	80c174 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80c118:	00a00034 	movhi	r2,32768
  80c11c:	10bfffc4 	addi	r2,r2,-1
  80c120:	10bfffc4 	addi	r2,r2,-1
  80c124:	103ffe1e 	bne	r2,zero,80c120 <__alt_mem_onchip_mem+0xff804120>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80c128:	e0fffd17 	ldw	r3,-12(fp)
  80c12c:	008003f4 	movhi	r2,15
  80c130:	10909004 	addi	r2,r2,16960
  80c134:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80c138:	100b883a 	mov	r5,r2
  80c13c:	0100bef4 	movhi	r4,763
  80c140:	213c2004 	addi	r4,r4,-3968
  80c144:	080cccc0 	call	80cccc <__udivsi3>
  80c148:	100b883a 	mov	r5,r2
  80c14c:	01200034 	movhi	r4,32768
  80c150:	213fffc4 	addi	r4,r4,-1
  80c154:	080cccc0 	call	80cccc <__udivsi3>
  80c158:	1007883a 	mov	r3,r2
  80c15c:	e0bfff17 	ldw	r2,-4(fp)
  80c160:	10c5c83a 	sub	r2,r2,r3
  80c164:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80c168:	e0bffc17 	ldw	r2,-16(fp)
  80c16c:	10800044 	addi	r2,r2,1
  80c170:	e0bffc15 	stw	r2,-16(fp)
  80c174:	e0fffc17 	ldw	r3,-16(fp)
  80c178:	e0bffe17 	ldw	r2,-8(fp)
  80c17c:	18bfe616 	blt	r3,r2,80c118 <__alt_mem_onchip_mem+0xff804118>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80c180:	e0fffd17 	ldw	r3,-12(fp)
  80c184:	008003f4 	movhi	r2,15
  80c188:	10909004 	addi	r2,r2,16960
  80c18c:	1885383a 	mul	r2,r3,r2
  80c190:	100b883a 	mov	r5,r2
  80c194:	0100bef4 	movhi	r4,763
  80c198:	213c2004 	addi	r4,r4,-3968
  80c19c:	080cccc0 	call	80cccc <__udivsi3>
  80c1a0:	1007883a 	mov	r3,r2
  80c1a4:	e0bfff17 	ldw	r2,-4(fp)
  80c1a8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80c1ac:	10bfffc4 	addi	r2,r2,-1
  80c1b0:	103ffe1e 	bne	r2,zero,80c1ac <__alt_mem_onchip_mem+0xff8041ac>
  80c1b4:	00000d06 	br	80c1ec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80c1b8:	e0fffd17 	ldw	r3,-12(fp)
  80c1bc:	008003f4 	movhi	r2,15
  80c1c0:	10909004 	addi	r2,r2,16960
  80c1c4:	1885383a 	mul	r2,r3,r2
  80c1c8:	100b883a 	mov	r5,r2
  80c1cc:	0100bef4 	movhi	r4,763
  80c1d0:	213c2004 	addi	r4,r4,-3968
  80c1d4:	080cccc0 	call	80cccc <__udivsi3>
  80c1d8:	1007883a 	mov	r3,r2
  80c1dc:	e0bfff17 	ldw	r2,-4(fp)
  80c1e0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80c1e4:	10bfffc4 	addi	r2,r2,-1
  80c1e8:	00bffe16 	blt	zero,r2,80c1e4 <__alt_mem_onchip_mem+0xff8041e4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80c1ec:	0005883a 	mov	r2,zero
}
  80c1f0:	e037883a 	mov	sp,fp
  80c1f4:	dfc00117 	ldw	ra,4(sp)
  80c1f8:	df000017 	ldw	fp,0(sp)
  80c1fc:	dec00204 	addi	sp,sp,8
  80c200:	f800283a 	ret

0080c204 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80c204:	defffa04 	addi	sp,sp,-24
  80c208:	dfc00515 	stw	ra,20(sp)
  80c20c:	df000415 	stw	fp,16(sp)
  80c210:	df000404 	addi	fp,sp,16
  80c214:	e13ffe15 	stw	r4,-8(fp)
  80c218:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80c21c:	e0bfff17 	ldw	r2,-4(fp)
  80c220:	10800017 	ldw	r2,0(r2)
  80c224:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80c228:	e13ffe17 	ldw	r4,-8(fp)
  80c22c:	080c8a40 	call	80c8a4 <strlen>
  80c230:	10800044 	addi	r2,r2,1
  80c234:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c238:	00000d06 	br	80c270 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80c23c:	e0bffc17 	ldw	r2,-16(fp)
  80c240:	10800217 	ldw	r2,8(r2)
  80c244:	e0fffd17 	ldw	r3,-12(fp)
  80c248:	180d883a 	mov	r6,r3
  80c24c:	e17ffe17 	ldw	r5,-8(fp)
  80c250:	1009883a 	mov	r4,r2
  80c254:	080c5b80 	call	80c5b8 <memcmp>
  80c258:	1000021e 	bne	r2,zero,80c264 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80c25c:	e0bffc17 	ldw	r2,-16(fp)
  80c260:	00000706 	br	80c280 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80c264:	e0bffc17 	ldw	r2,-16(fp)
  80c268:	10800017 	ldw	r2,0(r2)
  80c26c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c270:	e0fffc17 	ldw	r3,-16(fp)
  80c274:	e0bfff17 	ldw	r2,-4(fp)
  80c278:	18bff01e 	bne	r3,r2,80c23c <__alt_mem_onchip_mem+0xff80423c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80c27c:	0005883a 	mov	r2,zero
}
  80c280:	e037883a 	mov	sp,fp
  80c284:	dfc00117 	ldw	ra,4(sp)
  80c288:	df000017 	ldw	fp,0(sp)
  80c28c:	dec00204 	addi	sp,sp,8
  80c290:	f800283a 	ret

0080c294 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80c294:	defffb04 	addi	sp,sp,-20
  80c298:	dfc00415 	stw	ra,16(sp)
  80c29c:	df000315 	stw	fp,12(sp)
  80c2a0:	df000304 	addi	fp,sp,12
  80c2a4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80c2a8:	d0a00417 	ldw	r2,-32752(gp)
  80c2ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c2b0:	00003106 	br	80c378 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80c2b4:	e0bffd17 	ldw	r2,-12(fp)
  80c2b8:	10800217 	ldw	r2,8(r2)
  80c2bc:	1009883a 	mov	r4,r2
  80c2c0:	080c8a40 	call	80c8a4 <strlen>
  80c2c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80c2c8:	e0bffd17 	ldw	r2,-12(fp)
  80c2cc:	10c00217 	ldw	r3,8(r2)
  80c2d0:	e0bffe17 	ldw	r2,-8(fp)
  80c2d4:	10bfffc4 	addi	r2,r2,-1
  80c2d8:	1885883a 	add	r2,r3,r2
  80c2dc:	10800003 	ldbu	r2,0(r2)
  80c2e0:	10803fcc 	andi	r2,r2,255
  80c2e4:	1080201c 	xori	r2,r2,128
  80c2e8:	10bfe004 	addi	r2,r2,-128
  80c2ec:	10800bd8 	cmpnei	r2,r2,47
  80c2f0:	1000031e 	bne	r2,zero,80c300 <alt_find_file+0x6c>
    {
      len -= 1;
  80c2f4:	e0bffe17 	ldw	r2,-8(fp)
  80c2f8:	10bfffc4 	addi	r2,r2,-1
  80c2fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80c300:	e0bffe17 	ldw	r2,-8(fp)
  80c304:	e0ffff17 	ldw	r3,-4(fp)
  80c308:	1885883a 	add	r2,r3,r2
  80c30c:	10800003 	ldbu	r2,0(r2)
  80c310:	10803fcc 	andi	r2,r2,255
  80c314:	1080201c 	xori	r2,r2,128
  80c318:	10bfe004 	addi	r2,r2,-128
  80c31c:	10800be0 	cmpeqi	r2,r2,47
  80c320:	1000081e 	bne	r2,zero,80c344 <alt_find_file+0xb0>
  80c324:	e0bffe17 	ldw	r2,-8(fp)
  80c328:	e0ffff17 	ldw	r3,-4(fp)
  80c32c:	1885883a 	add	r2,r3,r2
  80c330:	10800003 	ldbu	r2,0(r2)
  80c334:	10803fcc 	andi	r2,r2,255
  80c338:	1080201c 	xori	r2,r2,128
  80c33c:	10bfe004 	addi	r2,r2,-128
  80c340:	10000a1e 	bne	r2,zero,80c36c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80c344:	e0bffd17 	ldw	r2,-12(fp)
  80c348:	10800217 	ldw	r2,8(r2)
  80c34c:	e0fffe17 	ldw	r3,-8(fp)
  80c350:	180d883a 	mov	r6,r3
  80c354:	e17fff17 	ldw	r5,-4(fp)
  80c358:	1009883a 	mov	r4,r2
  80c35c:	080c5b80 	call	80c5b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80c360:	1000021e 	bne	r2,zero,80c36c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80c364:	e0bffd17 	ldw	r2,-12(fp)
  80c368:	00000706 	br	80c388 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80c36c:	e0bffd17 	ldw	r2,-12(fp)
  80c370:	10800017 	ldw	r2,0(r2)
  80c374:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c378:	e0fffd17 	ldw	r3,-12(fp)
  80c37c:	d0a00404 	addi	r2,gp,-32752
  80c380:	18bfcc1e 	bne	r3,r2,80c2b4 <__alt_mem_onchip_mem+0xff8042b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80c384:	0005883a 	mov	r2,zero
}
  80c388:	e037883a 	mov	sp,fp
  80c38c:	dfc00117 	ldw	ra,4(sp)
  80c390:	df000017 	ldw	fp,0(sp)
  80c394:	dec00204 	addi	sp,sp,8
  80c398:	f800283a 	ret

0080c39c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80c39c:	defffc04 	addi	sp,sp,-16
  80c3a0:	df000315 	stw	fp,12(sp)
  80c3a4:	df000304 	addi	fp,sp,12
  80c3a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80c3ac:	00bffa04 	movi	r2,-24
  80c3b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c3b4:	e03ffd15 	stw	zero,-12(fp)
  80c3b8:	00001906 	br	80c420 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80c3bc:	00802074 	movhi	r2,129
  80c3c0:	10b8fc04 	addi	r2,r2,-7184
  80c3c4:	e0fffd17 	ldw	r3,-12(fp)
  80c3c8:	18c00324 	muli	r3,r3,12
  80c3cc:	10c5883a 	add	r2,r2,r3
  80c3d0:	10800017 	ldw	r2,0(r2)
  80c3d4:	10000f1e 	bne	r2,zero,80c414 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80c3d8:	00802074 	movhi	r2,129
  80c3dc:	10b8fc04 	addi	r2,r2,-7184
  80c3e0:	e0fffd17 	ldw	r3,-12(fp)
  80c3e4:	18c00324 	muli	r3,r3,12
  80c3e8:	10c5883a 	add	r2,r2,r3
  80c3ec:	e0ffff17 	ldw	r3,-4(fp)
  80c3f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80c3f4:	d0e00817 	ldw	r3,-32736(gp)
  80c3f8:	e0bffd17 	ldw	r2,-12(fp)
  80c3fc:	1880020e 	bge	r3,r2,80c408 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80c400:	e0bffd17 	ldw	r2,-12(fp)
  80c404:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80c408:	e0bffd17 	ldw	r2,-12(fp)
  80c40c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80c410:	00000606 	br	80c42c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c414:	e0bffd17 	ldw	r2,-12(fp)
  80c418:	10800044 	addi	r2,r2,1
  80c41c:	e0bffd15 	stw	r2,-12(fp)
  80c420:	e0bffd17 	ldw	r2,-12(fp)
  80c424:	10800810 	cmplti	r2,r2,32
  80c428:	103fe41e 	bne	r2,zero,80c3bc <__alt_mem_onchip_mem+0xff8043bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80c42c:	e0bffe17 	ldw	r2,-8(fp)
}
  80c430:	e037883a 	mov	sp,fp
  80c434:	df000017 	ldw	fp,0(sp)
  80c438:	dec00104 	addi	sp,sp,4
  80c43c:	f800283a 	ret

0080c440 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80c440:	defffb04 	addi	sp,sp,-20
  80c444:	df000415 	stw	fp,16(sp)
  80c448:	df000404 	addi	fp,sp,16
  80c44c:	e13ffe15 	stw	r4,-8(fp)
  80c450:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80c454:	e0bfff17 	ldw	r2,-4(fp)
  80c458:	10840070 	cmpltui	r2,r2,4097
  80c45c:	1000021e 	bne	r2,zero,80c468 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80c460:	00840004 	movi	r2,4096
  80c464:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80c468:	e0fffe17 	ldw	r3,-8(fp)
  80c46c:	e0bfff17 	ldw	r2,-4(fp)
  80c470:	1885883a 	add	r2,r3,r2
  80c474:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80c478:	e0bffe17 	ldw	r2,-8(fp)
  80c47c:	e0bffc15 	stw	r2,-16(fp)
  80c480:	00000506 	br	80c498 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80c484:	e0bffc17 	ldw	r2,-16(fp)
  80c488:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80c48c:	e0bffc17 	ldw	r2,-16(fp)
  80c490:	10800804 	addi	r2,r2,32
  80c494:	e0bffc15 	stw	r2,-16(fp)
  80c498:	e0fffc17 	ldw	r3,-16(fp)
  80c49c:	e0bffd17 	ldw	r2,-12(fp)
  80c4a0:	18bff836 	bltu	r3,r2,80c484 <__alt_mem_onchip_mem+0xff804484>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80c4a4:	e0bffe17 	ldw	r2,-8(fp)
  80c4a8:	108007cc 	andi	r2,r2,31
  80c4ac:	10000226 	beq	r2,zero,80c4b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80c4b0:	e0bffc17 	ldw	r2,-16(fp)
  80c4b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80c4b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80c4bc:	0001883a 	nop
  80c4c0:	e037883a 	mov	sp,fp
  80c4c4:	df000017 	ldw	fp,0(sp)
  80c4c8:	dec00104 	addi	sp,sp,4
  80c4cc:	f800283a 	ret

0080c4d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80c4d0:	defffe04 	addi	sp,sp,-8
  80c4d4:	df000115 	stw	fp,4(sp)
  80c4d8:	df000104 	addi	fp,sp,4
  80c4dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80c4e0:	e0bfff17 	ldw	r2,-4(fp)
  80c4e4:	10bffe84 	addi	r2,r2,-6
  80c4e8:	10c00428 	cmpgeui	r3,r2,16
  80c4ec:	18001a1e 	bne	r3,zero,80c558 <alt_exception_cause_generated_bad_addr+0x88>
  80c4f0:	100690ba 	slli	r3,r2,2
  80c4f4:	00802074 	movhi	r2,129
  80c4f8:	10b14204 	addi	r2,r2,-15096
  80c4fc:	1885883a 	add	r2,r3,r2
  80c500:	10800017 	ldw	r2,0(r2)
  80c504:	1000683a 	jmp	r2
  80c508:	0080c548 	cmpgei	r2,zero,789
  80c50c:	0080c548 	cmpgei	r2,zero,789
  80c510:	0080c558 	cmpnei	r2,zero,789
  80c514:	0080c558 	cmpnei	r2,zero,789
  80c518:	0080c558 	cmpnei	r2,zero,789
  80c51c:	0080c548 	cmpgei	r2,zero,789
  80c520:	0080c550 	cmplti	r2,zero,789
  80c524:	0080c558 	cmpnei	r2,zero,789
  80c528:	0080c548 	cmpgei	r2,zero,789
  80c52c:	0080c548 	cmpgei	r2,zero,789
  80c530:	0080c558 	cmpnei	r2,zero,789
  80c534:	0080c548 	cmpgei	r2,zero,789
  80c538:	0080c550 	cmplti	r2,zero,789
  80c53c:	0080c558 	cmpnei	r2,zero,789
  80c540:	0080c558 	cmpnei	r2,zero,789
  80c544:	0080c548 	cmpgei	r2,zero,789
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80c548:	00800044 	movi	r2,1
  80c54c:	00000306 	br	80c55c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80c550:	0005883a 	mov	r2,zero
  80c554:	00000106 	br	80c55c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80c558:	0005883a 	mov	r2,zero
  }
}
  80c55c:	e037883a 	mov	sp,fp
  80c560:	df000017 	ldw	fp,0(sp)
  80c564:	dec00104 	addi	sp,sp,4
  80c568:	f800283a 	ret

0080c56c <atexit>:
  80c56c:	200b883a 	mov	r5,r4
  80c570:	000f883a 	mov	r7,zero
  80c574:	000d883a 	mov	r6,zero
  80c578:	0009883a 	mov	r4,zero
  80c57c:	080c93c1 	jmpi	80c93c <__register_exitproc>

0080c580 <exit>:
  80c580:	defffe04 	addi	sp,sp,-8
  80c584:	000b883a 	mov	r5,zero
  80c588:	dc000015 	stw	r16,0(sp)
  80c58c:	dfc00115 	stw	ra,4(sp)
  80c590:	2021883a 	mov	r16,r4
  80c594:	080ca540 	call	80ca54 <__call_exitprocs>
  80c598:	00802074 	movhi	r2,129
  80c59c:	10ba7104 	addi	r2,r2,-5692
  80c5a0:	11000017 	ldw	r4,0(r2)
  80c5a4:	20800f17 	ldw	r2,60(r4)
  80c5a8:	10000126 	beq	r2,zero,80c5b0 <exit+0x30>
  80c5ac:	103ee83a 	callr	r2
  80c5b0:	8009883a 	mov	r4,r16
  80c5b4:	080cd880 	call	80cd88 <_exit>

0080c5b8 <memcmp>:
  80c5b8:	01c000c4 	movi	r7,3
  80c5bc:	3980192e 	bgeu	r7,r6,80c624 <memcmp+0x6c>
  80c5c0:	2144b03a 	or	r2,r4,r5
  80c5c4:	11c4703a 	and	r2,r2,r7
  80c5c8:	10000f26 	beq	r2,zero,80c608 <memcmp+0x50>
  80c5cc:	20800003 	ldbu	r2,0(r4)
  80c5d0:	28c00003 	ldbu	r3,0(r5)
  80c5d4:	10c0151e 	bne	r2,r3,80c62c <memcmp+0x74>
  80c5d8:	31bfff84 	addi	r6,r6,-2
  80c5dc:	01ffffc4 	movi	r7,-1
  80c5e0:	00000406 	br	80c5f4 <memcmp+0x3c>
  80c5e4:	20800003 	ldbu	r2,0(r4)
  80c5e8:	28c00003 	ldbu	r3,0(r5)
  80c5ec:	31bfffc4 	addi	r6,r6,-1
  80c5f0:	10c00e1e 	bne	r2,r3,80c62c <memcmp+0x74>
  80c5f4:	21000044 	addi	r4,r4,1
  80c5f8:	29400044 	addi	r5,r5,1
  80c5fc:	31fff91e 	bne	r6,r7,80c5e4 <__alt_mem_onchip_mem+0xff8045e4>
  80c600:	0005883a 	mov	r2,zero
  80c604:	f800283a 	ret
  80c608:	20c00017 	ldw	r3,0(r4)
  80c60c:	28800017 	ldw	r2,0(r5)
  80c610:	18bfee1e 	bne	r3,r2,80c5cc <__alt_mem_onchip_mem+0xff8045cc>
  80c614:	31bfff04 	addi	r6,r6,-4
  80c618:	21000104 	addi	r4,r4,4
  80c61c:	29400104 	addi	r5,r5,4
  80c620:	39bff936 	bltu	r7,r6,80c608 <__alt_mem_onchip_mem+0xff804608>
  80c624:	303fe91e 	bne	r6,zero,80c5cc <__alt_mem_onchip_mem+0xff8045cc>
  80c628:	003ff506 	br	80c600 <__alt_mem_onchip_mem+0xff804600>
  80c62c:	10c5c83a 	sub	r2,r2,r3
  80c630:	f800283a 	ret

0080c634 <memcpy>:
  80c634:	defffd04 	addi	sp,sp,-12
  80c638:	dfc00215 	stw	ra,8(sp)
  80c63c:	dc400115 	stw	r17,4(sp)
  80c640:	dc000015 	stw	r16,0(sp)
  80c644:	00c003c4 	movi	r3,15
  80c648:	2005883a 	mov	r2,r4
  80c64c:	1980452e 	bgeu	r3,r6,80c764 <memcpy+0x130>
  80c650:	2906b03a 	or	r3,r5,r4
  80c654:	18c000cc 	andi	r3,r3,3
  80c658:	1800441e 	bne	r3,zero,80c76c <memcpy+0x138>
  80c65c:	347ffc04 	addi	r17,r6,-16
  80c660:	8822d13a 	srli	r17,r17,4
  80c664:	28c00104 	addi	r3,r5,4
  80c668:	23400104 	addi	r13,r4,4
  80c66c:	8820913a 	slli	r16,r17,4
  80c670:	2b000204 	addi	r12,r5,8
  80c674:	22c00204 	addi	r11,r4,8
  80c678:	84000504 	addi	r16,r16,20
  80c67c:	2a800304 	addi	r10,r5,12
  80c680:	22400304 	addi	r9,r4,12
  80c684:	2c21883a 	add	r16,r5,r16
  80c688:	2811883a 	mov	r8,r5
  80c68c:	200f883a 	mov	r7,r4
  80c690:	41000017 	ldw	r4,0(r8)
  80c694:	1fc00017 	ldw	ra,0(r3)
  80c698:	63c00017 	ldw	r15,0(r12)
  80c69c:	39000015 	stw	r4,0(r7)
  80c6a0:	53800017 	ldw	r14,0(r10)
  80c6a4:	6fc00015 	stw	ra,0(r13)
  80c6a8:	5bc00015 	stw	r15,0(r11)
  80c6ac:	4b800015 	stw	r14,0(r9)
  80c6b0:	18c00404 	addi	r3,r3,16
  80c6b4:	39c00404 	addi	r7,r7,16
  80c6b8:	42000404 	addi	r8,r8,16
  80c6bc:	6b400404 	addi	r13,r13,16
  80c6c0:	63000404 	addi	r12,r12,16
  80c6c4:	5ac00404 	addi	r11,r11,16
  80c6c8:	52800404 	addi	r10,r10,16
  80c6cc:	4a400404 	addi	r9,r9,16
  80c6d0:	1c3fef1e 	bne	r3,r16,80c690 <__alt_mem_onchip_mem+0xff804690>
  80c6d4:	89c00044 	addi	r7,r17,1
  80c6d8:	380e913a 	slli	r7,r7,4
  80c6dc:	310003cc 	andi	r4,r6,15
  80c6e0:	02c000c4 	movi	r11,3
  80c6e4:	11c7883a 	add	r3,r2,r7
  80c6e8:	29cb883a 	add	r5,r5,r7
  80c6ec:	5900212e 	bgeu	r11,r4,80c774 <memcpy+0x140>
  80c6f0:	1813883a 	mov	r9,r3
  80c6f4:	2811883a 	mov	r8,r5
  80c6f8:	200f883a 	mov	r7,r4
  80c6fc:	42800017 	ldw	r10,0(r8)
  80c700:	4a400104 	addi	r9,r9,4
  80c704:	39ffff04 	addi	r7,r7,-4
  80c708:	4abfff15 	stw	r10,-4(r9)
  80c70c:	42000104 	addi	r8,r8,4
  80c710:	59fffa36 	bltu	r11,r7,80c6fc <__alt_mem_onchip_mem+0xff8046fc>
  80c714:	213fff04 	addi	r4,r4,-4
  80c718:	2008d0ba 	srli	r4,r4,2
  80c71c:	318000cc 	andi	r6,r6,3
  80c720:	21000044 	addi	r4,r4,1
  80c724:	2109883a 	add	r4,r4,r4
  80c728:	2109883a 	add	r4,r4,r4
  80c72c:	1907883a 	add	r3,r3,r4
  80c730:	290b883a 	add	r5,r5,r4
  80c734:	30000626 	beq	r6,zero,80c750 <memcpy+0x11c>
  80c738:	198d883a 	add	r6,r3,r6
  80c73c:	29c00003 	ldbu	r7,0(r5)
  80c740:	18c00044 	addi	r3,r3,1
  80c744:	29400044 	addi	r5,r5,1
  80c748:	19ffffc5 	stb	r7,-1(r3)
  80c74c:	19bffb1e 	bne	r3,r6,80c73c <__alt_mem_onchip_mem+0xff80473c>
  80c750:	dfc00217 	ldw	ra,8(sp)
  80c754:	dc400117 	ldw	r17,4(sp)
  80c758:	dc000017 	ldw	r16,0(sp)
  80c75c:	dec00304 	addi	sp,sp,12
  80c760:	f800283a 	ret
  80c764:	2007883a 	mov	r3,r4
  80c768:	003ff206 	br	80c734 <__alt_mem_onchip_mem+0xff804734>
  80c76c:	2007883a 	mov	r3,r4
  80c770:	003ff106 	br	80c738 <__alt_mem_onchip_mem+0xff804738>
  80c774:	200d883a 	mov	r6,r4
  80c778:	003fee06 	br	80c734 <__alt_mem_onchip_mem+0xff804734>

0080c77c <memset>:
  80c77c:	20c000cc 	andi	r3,r4,3
  80c780:	2005883a 	mov	r2,r4
  80c784:	18004426 	beq	r3,zero,80c898 <memset+0x11c>
  80c788:	31ffffc4 	addi	r7,r6,-1
  80c78c:	30004026 	beq	r6,zero,80c890 <memset+0x114>
  80c790:	2813883a 	mov	r9,r5
  80c794:	200d883a 	mov	r6,r4
  80c798:	2007883a 	mov	r3,r4
  80c79c:	00000406 	br	80c7b0 <memset+0x34>
  80c7a0:	3a3fffc4 	addi	r8,r7,-1
  80c7a4:	31800044 	addi	r6,r6,1
  80c7a8:	38003926 	beq	r7,zero,80c890 <memset+0x114>
  80c7ac:	400f883a 	mov	r7,r8
  80c7b0:	18c00044 	addi	r3,r3,1
  80c7b4:	32400005 	stb	r9,0(r6)
  80c7b8:	1a0000cc 	andi	r8,r3,3
  80c7bc:	403ff81e 	bne	r8,zero,80c7a0 <__alt_mem_onchip_mem+0xff8047a0>
  80c7c0:	010000c4 	movi	r4,3
  80c7c4:	21c02d2e 	bgeu	r4,r7,80c87c <memset+0x100>
  80c7c8:	29003fcc 	andi	r4,r5,255
  80c7cc:	200c923a 	slli	r6,r4,8
  80c7d0:	3108b03a 	or	r4,r6,r4
  80c7d4:	200c943a 	slli	r6,r4,16
  80c7d8:	218cb03a 	or	r6,r4,r6
  80c7dc:	010003c4 	movi	r4,15
  80c7e0:	21c0182e 	bgeu	r4,r7,80c844 <memset+0xc8>
  80c7e4:	3b3ffc04 	addi	r12,r7,-16
  80c7e8:	6018d13a 	srli	r12,r12,4
  80c7ec:	1a000104 	addi	r8,r3,4
  80c7f0:	1ac00204 	addi	r11,r3,8
  80c7f4:	6008913a 	slli	r4,r12,4
  80c7f8:	1a800304 	addi	r10,r3,12
  80c7fc:	1813883a 	mov	r9,r3
  80c800:	21000504 	addi	r4,r4,20
  80c804:	1909883a 	add	r4,r3,r4
  80c808:	49800015 	stw	r6,0(r9)
  80c80c:	41800015 	stw	r6,0(r8)
  80c810:	59800015 	stw	r6,0(r11)
  80c814:	51800015 	stw	r6,0(r10)
  80c818:	42000404 	addi	r8,r8,16
  80c81c:	4a400404 	addi	r9,r9,16
  80c820:	5ac00404 	addi	r11,r11,16
  80c824:	52800404 	addi	r10,r10,16
  80c828:	413ff71e 	bne	r8,r4,80c808 <__alt_mem_onchip_mem+0xff804808>
  80c82c:	63000044 	addi	r12,r12,1
  80c830:	6018913a 	slli	r12,r12,4
  80c834:	39c003cc 	andi	r7,r7,15
  80c838:	010000c4 	movi	r4,3
  80c83c:	1b07883a 	add	r3,r3,r12
  80c840:	21c00e2e 	bgeu	r4,r7,80c87c <memset+0x100>
  80c844:	1813883a 	mov	r9,r3
  80c848:	3811883a 	mov	r8,r7
  80c84c:	010000c4 	movi	r4,3
  80c850:	49800015 	stw	r6,0(r9)
  80c854:	423fff04 	addi	r8,r8,-4
  80c858:	4a400104 	addi	r9,r9,4
  80c85c:	223ffc36 	bltu	r4,r8,80c850 <__alt_mem_onchip_mem+0xff804850>
  80c860:	393fff04 	addi	r4,r7,-4
  80c864:	2008d0ba 	srli	r4,r4,2
  80c868:	39c000cc 	andi	r7,r7,3
  80c86c:	21000044 	addi	r4,r4,1
  80c870:	2109883a 	add	r4,r4,r4
  80c874:	2109883a 	add	r4,r4,r4
  80c878:	1907883a 	add	r3,r3,r4
  80c87c:	38000526 	beq	r7,zero,80c894 <memset+0x118>
  80c880:	19cf883a 	add	r7,r3,r7
  80c884:	19400005 	stb	r5,0(r3)
  80c888:	18c00044 	addi	r3,r3,1
  80c88c:	38fffd1e 	bne	r7,r3,80c884 <__alt_mem_onchip_mem+0xff804884>
  80c890:	f800283a 	ret
  80c894:	f800283a 	ret
  80c898:	2007883a 	mov	r3,r4
  80c89c:	300f883a 	mov	r7,r6
  80c8a0:	003fc706 	br	80c7c0 <__alt_mem_onchip_mem+0xff8047c0>

0080c8a4 <strlen>:
  80c8a4:	208000cc 	andi	r2,r4,3
  80c8a8:	10002026 	beq	r2,zero,80c92c <strlen+0x88>
  80c8ac:	20800007 	ldb	r2,0(r4)
  80c8b0:	10002026 	beq	r2,zero,80c934 <strlen+0x90>
  80c8b4:	2005883a 	mov	r2,r4
  80c8b8:	00000206 	br	80c8c4 <strlen+0x20>
  80c8bc:	10c00007 	ldb	r3,0(r2)
  80c8c0:	18001826 	beq	r3,zero,80c924 <strlen+0x80>
  80c8c4:	10800044 	addi	r2,r2,1
  80c8c8:	10c000cc 	andi	r3,r2,3
  80c8cc:	183ffb1e 	bne	r3,zero,80c8bc <__alt_mem_onchip_mem+0xff8048bc>
  80c8d0:	10c00017 	ldw	r3,0(r2)
  80c8d4:	01ffbff4 	movhi	r7,65279
  80c8d8:	39ffbfc4 	addi	r7,r7,-257
  80c8dc:	00ca303a 	nor	r5,zero,r3
  80c8e0:	01a02074 	movhi	r6,32897
  80c8e4:	19c7883a 	add	r3,r3,r7
  80c8e8:	31a02004 	addi	r6,r6,-32640
  80c8ec:	1946703a 	and	r3,r3,r5
  80c8f0:	1986703a 	and	r3,r3,r6
  80c8f4:	1800091e 	bne	r3,zero,80c91c <strlen+0x78>
  80c8f8:	10800104 	addi	r2,r2,4
  80c8fc:	10c00017 	ldw	r3,0(r2)
  80c900:	19cb883a 	add	r5,r3,r7
  80c904:	00c6303a 	nor	r3,zero,r3
  80c908:	28c6703a 	and	r3,r5,r3
  80c90c:	1986703a 	and	r3,r3,r6
  80c910:	183ff926 	beq	r3,zero,80c8f8 <__alt_mem_onchip_mem+0xff8048f8>
  80c914:	00000106 	br	80c91c <strlen+0x78>
  80c918:	10800044 	addi	r2,r2,1
  80c91c:	10c00007 	ldb	r3,0(r2)
  80c920:	183ffd1e 	bne	r3,zero,80c918 <__alt_mem_onchip_mem+0xff804918>
  80c924:	1105c83a 	sub	r2,r2,r4
  80c928:	f800283a 	ret
  80c92c:	2005883a 	mov	r2,r4
  80c930:	003fe706 	br	80c8d0 <__alt_mem_onchip_mem+0xff8048d0>
  80c934:	0005883a 	mov	r2,zero
  80c938:	f800283a 	ret

0080c93c <__register_exitproc>:
  80c93c:	defffa04 	addi	sp,sp,-24
  80c940:	dc000315 	stw	r16,12(sp)
  80c944:	04002074 	movhi	r16,129
  80c948:	843a7104 	addi	r16,r16,-5692
  80c94c:	80c00017 	ldw	r3,0(r16)
  80c950:	dc400415 	stw	r17,16(sp)
  80c954:	dfc00515 	stw	ra,20(sp)
  80c958:	18805217 	ldw	r2,328(r3)
  80c95c:	2023883a 	mov	r17,r4
  80c960:	10003726 	beq	r2,zero,80ca40 <__register_exitproc+0x104>
  80c964:	10c00117 	ldw	r3,4(r2)
  80c968:	010007c4 	movi	r4,31
  80c96c:	20c00e16 	blt	r4,r3,80c9a8 <__register_exitproc+0x6c>
  80c970:	1a000044 	addi	r8,r3,1
  80c974:	8800221e 	bne	r17,zero,80ca00 <__register_exitproc+0xc4>
  80c978:	18c00084 	addi	r3,r3,2
  80c97c:	18c7883a 	add	r3,r3,r3
  80c980:	18c7883a 	add	r3,r3,r3
  80c984:	12000115 	stw	r8,4(r2)
  80c988:	10c7883a 	add	r3,r2,r3
  80c98c:	19400015 	stw	r5,0(r3)
  80c990:	0005883a 	mov	r2,zero
  80c994:	dfc00517 	ldw	ra,20(sp)
  80c998:	dc400417 	ldw	r17,16(sp)
  80c99c:	dc000317 	ldw	r16,12(sp)
  80c9a0:	dec00604 	addi	sp,sp,24
  80c9a4:	f800283a 	ret
  80c9a8:	00800034 	movhi	r2,0
  80c9ac:	10800004 	addi	r2,r2,0
  80c9b0:	10002626 	beq	r2,zero,80ca4c <__register_exitproc+0x110>
  80c9b4:	01006404 	movi	r4,400
  80c9b8:	d9400015 	stw	r5,0(sp)
  80c9bc:	d9800115 	stw	r6,4(sp)
  80c9c0:	d9c00215 	stw	r7,8(sp)
  80c9c4:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80c9c8:	d9400017 	ldw	r5,0(sp)
  80c9cc:	d9800117 	ldw	r6,4(sp)
  80c9d0:	d9c00217 	ldw	r7,8(sp)
  80c9d4:	10001d26 	beq	r2,zero,80ca4c <__register_exitproc+0x110>
  80c9d8:	81000017 	ldw	r4,0(r16)
  80c9dc:	10000115 	stw	zero,4(r2)
  80c9e0:	02000044 	movi	r8,1
  80c9e4:	22405217 	ldw	r9,328(r4)
  80c9e8:	0007883a 	mov	r3,zero
  80c9ec:	12400015 	stw	r9,0(r2)
  80c9f0:	20805215 	stw	r2,328(r4)
  80c9f4:	10006215 	stw	zero,392(r2)
  80c9f8:	10006315 	stw	zero,396(r2)
  80c9fc:	883fde26 	beq	r17,zero,80c978 <__alt_mem_onchip_mem+0xff804978>
  80ca00:	18c9883a 	add	r4,r3,r3
  80ca04:	2109883a 	add	r4,r4,r4
  80ca08:	1109883a 	add	r4,r2,r4
  80ca0c:	21802215 	stw	r6,136(r4)
  80ca10:	01800044 	movi	r6,1
  80ca14:	12406217 	ldw	r9,392(r2)
  80ca18:	30cc983a 	sll	r6,r6,r3
  80ca1c:	4992b03a 	or	r9,r9,r6
  80ca20:	12406215 	stw	r9,392(r2)
  80ca24:	21c04215 	stw	r7,264(r4)
  80ca28:	01000084 	movi	r4,2
  80ca2c:	893fd21e 	bne	r17,r4,80c978 <__alt_mem_onchip_mem+0xff804978>
  80ca30:	11006317 	ldw	r4,396(r2)
  80ca34:	218cb03a 	or	r6,r4,r6
  80ca38:	11806315 	stw	r6,396(r2)
  80ca3c:	003fce06 	br	80c978 <__alt_mem_onchip_mem+0xff804978>
  80ca40:	18805304 	addi	r2,r3,332
  80ca44:	18805215 	stw	r2,328(r3)
  80ca48:	003fc606 	br	80c964 <__alt_mem_onchip_mem+0xff804964>
  80ca4c:	00bfffc4 	movi	r2,-1
  80ca50:	003fd006 	br	80c994 <__alt_mem_onchip_mem+0xff804994>

0080ca54 <__call_exitprocs>:
  80ca54:	defff504 	addi	sp,sp,-44
  80ca58:	df000915 	stw	fp,36(sp)
  80ca5c:	dd400615 	stw	r21,24(sp)
  80ca60:	dc800315 	stw	r18,12(sp)
  80ca64:	dfc00a15 	stw	ra,40(sp)
  80ca68:	ddc00815 	stw	r23,32(sp)
  80ca6c:	dd800715 	stw	r22,28(sp)
  80ca70:	dd000515 	stw	r20,20(sp)
  80ca74:	dcc00415 	stw	r19,16(sp)
  80ca78:	dc400215 	stw	r17,8(sp)
  80ca7c:	dc000115 	stw	r16,4(sp)
  80ca80:	d9000015 	stw	r4,0(sp)
  80ca84:	2839883a 	mov	fp,r5
  80ca88:	04800044 	movi	r18,1
  80ca8c:	057fffc4 	movi	r21,-1
  80ca90:	00802074 	movhi	r2,129
  80ca94:	10ba7104 	addi	r2,r2,-5692
  80ca98:	12000017 	ldw	r8,0(r2)
  80ca9c:	45005217 	ldw	r20,328(r8)
  80caa0:	44c05204 	addi	r19,r8,328
  80caa4:	a0001c26 	beq	r20,zero,80cb18 <__call_exitprocs+0xc4>
  80caa8:	a0800117 	ldw	r2,4(r20)
  80caac:	15ffffc4 	addi	r23,r2,-1
  80cab0:	b8000d16 	blt	r23,zero,80cae8 <__call_exitprocs+0x94>
  80cab4:	14000044 	addi	r16,r2,1
  80cab8:	8421883a 	add	r16,r16,r16
  80cabc:	8421883a 	add	r16,r16,r16
  80cac0:	84402004 	addi	r17,r16,128
  80cac4:	a463883a 	add	r17,r20,r17
  80cac8:	a421883a 	add	r16,r20,r16
  80cacc:	e0001e26 	beq	fp,zero,80cb48 <__call_exitprocs+0xf4>
  80cad0:	80804017 	ldw	r2,256(r16)
  80cad4:	e0801c26 	beq	fp,r2,80cb48 <__call_exitprocs+0xf4>
  80cad8:	bdffffc4 	addi	r23,r23,-1
  80cadc:	843fff04 	addi	r16,r16,-4
  80cae0:	8c7fff04 	addi	r17,r17,-4
  80cae4:	bd7ff91e 	bne	r23,r21,80cacc <__alt_mem_onchip_mem+0xff804acc>
  80cae8:	00800034 	movhi	r2,0
  80caec:	10800004 	addi	r2,r2,0
  80caf0:	10000926 	beq	r2,zero,80cb18 <__call_exitprocs+0xc4>
  80caf4:	a0800117 	ldw	r2,4(r20)
  80caf8:	1000301e 	bne	r2,zero,80cbbc <__call_exitprocs+0x168>
  80cafc:	a0800017 	ldw	r2,0(r20)
  80cb00:	10003226 	beq	r2,zero,80cbcc <__call_exitprocs+0x178>
  80cb04:	a009883a 	mov	r4,r20
  80cb08:	98800015 	stw	r2,0(r19)
  80cb0c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80cb10:	9d000017 	ldw	r20,0(r19)
  80cb14:	a03fe41e 	bne	r20,zero,80caa8 <__alt_mem_onchip_mem+0xff804aa8>
  80cb18:	dfc00a17 	ldw	ra,40(sp)
  80cb1c:	df000917 	ldw	fp,36(sp)
  80cb20:	ddc00817 	ldw	r23,32(sp)
  80cb24:	dd800717 	ldw	r22,28(sp)
  80cb28:	dd400617 	ldw	r21,24(sp)
  80cb2c:	dd000517 	ldw	r20,20(sp)
  80cb30:	dcc00417 	ldw	r19,16(sp)
  80cb34:	dc800317 	ldw	r18,12(sp)
  80cb38:	dc400217 	ldw	r17,8(sp)
  80cb3c:	dc000117 	ldw	r16,4(sp)
  80cb40:	dec00b04 	addi	sp,sp,44
  80cb44:	f800283a 	ret
  80cb48:	a0800117 	ldw	r2,4(r20)
  80cb4c:	80c00017 	ldw	r3,0(r16)
  80cb50:	10bfffc4 	addi	r2,r2,-1
  80cb54:	15c01426 	beq	r2,r23,80cba8 <__call_exitprocs+0x154>
  80cb58:	80000015 	stw	zero,0(r16)
  80cb5c:	183fde26 	beq	r3,zero,80cad8 <__alt_mem_onchip_mem+0xff804ad8>
  80cb60:	95c8983a 	sll	r4,r18,r23
  80cb64:	a0806217 	ldw	r2,392(r20)
  80cb68:	a5800117 	ldw	r22,4(r20)
  80cb6c:	2084703a 	and	r2,r4,r2
  80cb70:	10000b26 	beq	r2,zero,80cba0 <__call_exitprocs+0x14c>
  80cb74:	a0806317 	ldw	r2,396(r20)
  80cb78:	2088703a 	and	r4,r4,r2
  80cb7c:	20000c1e 	bne	r4,zero,80cbb0 <__call_exitprocs+0x15c>
  80cb80:	89400017 	ldw	r5,0(r17)
  80cb84:	d9000017 	ldw	r4,0(sp)
  80cb88:	183ee83a 	callr	r3
  80cb8c:	a0800117 	ldw	r2,4(r20)
  80cb90:	15bfbf1e 	bne	r2,r22,80ca90 <__alt_mem_onchip_mem+0xff804a90>
  80cb94:	98800017 	ldw	r2,0(r19)
  80cb98:	153fcf26 	beq	r2,r20,80cad8 <__alt_mem_onchip_mem+0xff804ad8>
  80cb9c:	003fbc06 	br	80ca90 <__alt_mem_onchip_mem+0xff804a90>
  80cba0:	183ee83a 	callr	r3
  80cba4:	003ff906 	br	80cb8c <__alt_mem_onchip_mem+0xff804b8c>
  80cba8:	a5c00115 	stw	r23,4(r20)
  80cbac:	003feb06 	br	80cb5c <__alt_mem_onchip_mem+0xff804b5c>
  80cbb0:	89000017 	ldw	r4,0(r17)
  80cbb4:	183ee83a 	callr	r3
  80cbb8:	003ff406 	br	80cb8c <__alt_mem_onchip_mem+0xff804b8c>
  80cbbc:	a0800017 	ldw	r2,0(r20)
  80cbc0:	a027883a 	mov	r19,r20
  80cbc4:	1029883a 	mov	r20,r2
  80cbc8:	003fb606 	br	80caa4 <__alt_mem_onchip_mem+0xff804aa4>
  80cbcc:	0005883a 	mov	r2,zero
  80cbd0:	003ffb06 	br	80cbc0 <__alt_mem_onchip_mem+0xff804bc0>

0080cbd4 <__divsi3>:
  80cbd4:	20001b16 	blt	r4,zero,80cc44 <__divsi3+0x70>
  80cbd8:	000f883a 	mov	r7,zero
  80cbdc:	28001616 	blt	r5,zero,80cc38 <__divsi3+0x64>
  80cbe0:	200d883a 	mov	r6,r4
  80cbe4:	29001a2e 	bgeu	r5,r4,80cc50 <__divsi3+0x7c>
  80cbe8:	00800804 	movi	r2,32
  80cbec:	00c00044 	movi	r3,1
  80cbf0:	00000106 	br	80cbf8 <__divsi3+0x24>
  80cbf4:	10000d26 	beq	r2,zero,80cc2c <__divsi3+0x58>
  80cbf8:	294b883a 	add	r5,r5,r5
  80cbfc:	10bfffc4 	addi	r2,r2,-1
  80cc00:	18c7883a 	add	r3,r3,r3
  80cc04:	293ffb36 	bltu	r5,r4,80cbf4 <__alt_mem_onchip_mem+0xff804bf4>
  80cc08:	0005883a 	mov	r2,zero
  80cc0c:	18000726 	beq	r3,zero,80cc2c <__divsi3+0x58>
  80cc10:	0005883a 	mov	r2,zero
  80cc14:	31400236 	bltu	r6,r5,80cc20 <__divsi3+0x4c>
  80cc18:	314dc83a 	sub	r6,r6,r5
  80cc1c:	10c4b03a 	or	r2,r2,r3
  80cc20:	1806d07a 	srli	r3,r3,1
  80cc24:	280ad07a 	srli	r5,r5,1
  80cc28:	183ffa1e 	bne	r3,zero,80cc14 <__alt_mem_onchip_mem+0xff804c14>
  80cc2c:	38000126 	beq	r7,zero,80cc34 <__divsi3+0x60>
  80cc30:	0085c83a 	sub	r2,zero,r2
  80cc34:	f800283a 	ret
  80cc38:	014bc83a 	sub	r5,zero,r5
  80cc3c:	39c0005c 	xori	r7,r7,1
  80cc40:	003fe706 	br	80cbe0 <__alt_mem_onchip_mem+0xff804be0>
  80cc44:	0109c83a 	sub	r4,zero,r4
  80cc48:	01c00044 	movi	r7,1
  80cc4c:	003fe306 	br	80cbdc <__alt_mem_onchip_mem+0xff804bdc>
  80cc50:	00c00044 	movi	r3,1
  80cc54:	003fee06 	br	80cc10 <__alt_mem_onchip_mem+0xff804c10>

0080cc58 <__modsi3>:
  80cc58:	20001716 	blt	r4,zero,80ccb8 <__modsi3+0x60>
  80cc5c:	000f883a 	mov	r7,zero
  80cc60:	2005883a 	mov	r2,r4
  80cc64:	28001216 	blt	r5,zero,80ccb0 <__modsi3+0x58>
  80cc68:	2900162e 	bgeu	r5,r4,80ccc4 <__modsi3+0x6c>
  80cc6c:	01800804 	movi	r6,32
  80cc70:	00c00044 	movi	r3,1
  80cc74:	00000106 	br	80cc7c <__modsi3+0x24>
  80cc78:	30000a26 	beq	r6,zero,80cca4 <__modsi3+0x4c>
  80cc7c:	294b883a 	add	r5,r5,r5
  80cc80:	31bfffc4 	addi	r6,r6,-1
  80cc84:	18c7883a 	add	r3,r3,r3
  80cc88:	293ffb36 	bltu	r5,r4,80cc78 <__alt_mem_onchip_mem+0xff804c78>
  80cc8c:	18000526 	beq	r3,zero,80cca4 <__modsi3+0x4c>
  80cc90:	1806d07a 	srli	r3,r3,1
  80cc94:	11400136 	bltu	r2,r5,80cc9c <__modsi3+0x44>
  80cc98:	1145c83a 	sub	r2,r2,r5
  80cc9c:	280ad07a 	srli	r5,r5,1
  80cca0:	183ffb1e 	bne	r3,zero,80cc90 <__alt_mem_onchip_mem+0xff804c90>
  80cca4:	38000126 	beq	r7,zero,80ccac <__modsi3+0x54>
  80cca8:	0085c83a 	sub	r2,zero,r2
  80ccac:	f800283a 	ret
  80ccb0:	014bc83a 	sub	r5,zero,r5
  80ccb4:	003fec06 	br	80cc68 <__alt_mem_onchip_mem+0xff804c68>
  80ccb8:	0109c83a 	sub	r4,zero,r4
  80ccbc:	01c00044 	movi	r7,1
  80ccc0:	003fe706 	br	80cc60 <__alt_mem_onchip_mem+0xff804c60>
  80ccc4:	00c00044 	movi	r3,1
  80ccc8:	003ff106 	br	80cc90 <__alt_mem_onchip_mem+0xff804c90>

0080cccc <__udivsi3>:
  80cccc:	200d883a 	mov	r6,r4
  80ccd0:	2900152e 	bgeu	r5,r4,80cd28 <__udivsi3+0x5c>
  80ccd4:	28001416 	blt	r5,zero,80cd28 <__udivsi3+0x5c>
  80ccd8:	00800804 	movi	r2,32
  80ccdc:	00c00044 	movi	r3,1
  80cce0:	00000206 	br	80ccec <__udivsi3+0x20>
  80cce4:	10000e26 	beq	r2,zero,80cd20 <__udivsi3+0x54>
  80cce8:	28000516 	blt	r5,zero,80cd00 <__udivsi3+0x34>
  80ccec:	294b883a 	add	r5,r5,r5
  80ccf0:	10bfffc4 	addi	r2,r2,-1
  80ccf4:	18c7883a 	add	r3,r3,r3
  80ccf8:	293ffa36 	bltu	r5,r4,80cce4 <__alt_mem_onchip_mem+0xff804ce4>
  80ccfc:	18000826 	beq	r3,zero,80cd20 <__udivsi3+0x54>
  80cd00:	0005883a 	mov	r2,zero
  80cd04:	31400236 	bltu	r6,r5,80cd10 <__udivsi3+0x44>
  80cd08:	314dc83a 	sub	r6,r6,r5
  80cd0c:	10c4b03a 	or	r2,r2,r3
  80cd10:	1806d07a 	srli	r3,r3,1
  80cd14:	280ad07a 	srli	r5,r5,1
  80cd18:	183ffa1e 	bne	r3,zero,80cd04 <__alt_mem_onchip_mem+0xff804d04>
  80cd1c:	f800283a 	ret
  80cd20:	0005883a 	mov	r2,zero
  80cd24:	f800283a 	ret
  80cd28:	00c00044 	movi	r3,1
  80cd2c:	003ff406 	br	80cd00 <__alt_mem_onchip_mem+0xff804d00>

0080cd30 <__umodsi3>:
  80cd30:	2005883a 	mov	r2,r4
  80cd34:	2900122e 	bgeu	r5,r4,80cd80 <__umodsi3+0x50>
  80cd38:	28001116 	blt	r5,zero,80cd80 <__umodsi3+0x50>
  80cd3c:	01800804 	movi	r6,32
  80cd40:	00c00044 	movi	r3,1
  80cd44:	00000206 	br	80cd50 <__umodsi3+0x20>
  80cd48:	30000c26 	beq	r6,zero,80cd7c <__umodsi3+0x4c>
  80cd4c:	28000516 	blt	r5,zero,80cd64 <__umodsi3+0x34>
  80cd50:	294b883a 	add	r5,r5,r5
  80cd54:	31bfffc4 	addi	r6,r6,-1
  80cd58:	18c7883a 	add	r3,r3,r3
  80cd5c:	293ffa36 	bltu	r5,r4,80cd48 <__alt_mem_onchip_mem+0xff804d48>
  80cd60:	18000626 	beq	r3,zero,80cd7c <__umodsi3+0x4c>
  80cd64:	1806d07a 	srli	r3,r3,1
  80cd68:	11400136 	bltu	r2,r5,80cd70 <__umodsi3+0x40>
  80cd6c:	1145c83a 	sub	r2,r2,r5
  80cd70:	280ad07a 	srli	r5,r5,1
  80cd74:	183ffb1e 	bne	r3,zero,80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80cd78:	f800283a 	ret
  80cd7c:	f800283a 	ret
  80cd80:	00c00044 	movi	r3,1
  80cd84:	003ff706 	br	80cd64 <__alt_mem_onchip_mem+0xff804d64>

0080cd88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80cd88:	defffd04 	addi	sp,sp,-12
  80cd8c:	df000215 	stw	fp,8(sp)
  80cd90:	df000204 	addi	fp,sp,8
  80cd94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80cd98:	0001883a 	nop
  80cd9c:	e0bfff17 	ldw	r2,-4(fp)
  80cda0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80cda4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80cda8:	10000226 	beq	r2,zero,80cdb4 <_exit+0x2c>
    ALT_SIM_FAIL();
  80cdac:	002af070 	cmpltui	zero,zero,43969
  80cdb0:	00000106 	br	80cdb8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80cdb4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80cdb8:	003fff06 	br	80cdb8 <__alt_mem_onchip_mem+0xff804db8>
