/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <stdint.h>

#include "system.h"
#include "timing.h"
#include "altera_avalon_pio_regs.h"
#include "scchart_heart.h"

#include "sys/alt_alarm.h"
#include "c_heart.h"

extern volatile alt_alarm URI_LRI, PVARP, VRP, AEI_AVI;
extern volatile alt_u8 can_vpulse;
extern volatile alt_u8 reset_cycle;
extern volatile alt_u8 ignore_v;
extern volatile alt_u8 ignore_a;
extern volatile alt_u8 is_recent_a; // 0 is venticular event, 1 is atrial event
extern volatile alt_u8 need_v_pulse;
extern volatile alt_u8 started;

extern volatile alt_u8 vp, ap;

//volatile FILE* fp;
//volatile char char_recieve;

int main() {
	//fp = fopen ("/dev/uart", "r+"); //Open file for reading and writing

	//printf("stuck\n");

	//while (fp == NULL) {


	//};

	//printf("not stuck\n");

	TickData t;
	reset(t);

	printf("start\n");

	alt_u8 key, key0_pre, key1_pre;

	start_cycle();

  while (1){

	  if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 1){
	  		  key = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
	  		t.AS = 0;
	  	  	  if ((~key & 0x01) == 1 && key0_pre == 0){ // key 0 rising

	  	  		  if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2){
	  	  			  t.AS = 1;
	  	  		  }
	  	  		  else {
	  	  			  extern_v_interrupt();
	  	  		  }
	  	  	  }
	  	  	  key0_pre = ~key & 0x01;

	  	  	  if ((~key & 0x02) >> 1 == 1 && key1_pre == 0){ // key 1 rising

	  	  		  if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2){

	  	  		  }
	  	  		  else {
	  	  			  extern_a_interrupt();
	  	  		  }
	  	  	  }
	  	  	  key1_pre = ~key & 0x02 >> 1;

	  	  	  if (vp){
	  	  		  vp = 0;
	  	  		  printf ("V\n");
	  	  	  }
	  	      if (ap){
	  	  		  ap = 0;
	  	  		  printf ("A\n");
	  	  	  }

	  	  	  // LED PLACEHOLDER
	  	  }
	  	  /*
	  	  else {
	  		  //char_recieve = getc(fp);
	  		  if (char_recieve == 'A'){
	  			  extern_a_interrupt();
	  		  }
	  		  if (char_recieve == 'V'){
	  			  extern_v_interrupt();
	  		  }

	  		  if (vp){
	  			  vp = 0;
	  			  fwrite ('V', 1, 1, fp);
	  		  }
	  		  if (ap){
	  		 	  ap = 0;
	  		 	  fwrite ('A', 1, 1, fp);
	  		  }




	  	  }*/

	  if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 2){ // if its on then sccharts

	  }
	  else {
		  if (reset_cycle){ // a v event has occurred and timers must be reset
		  	  reset_cycle = 0; // reset everything
		    start_cycle();
		  }
		  if (can_vpulse && need_v_pulse){
		   need_v_pulse = 0;
		   vp = 1;
		   reset_cycle = 1;
		  }
	  }




  }

  return 0;
}
